
lab_11_IR_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c1c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08005dbc  08005dbc  00006dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e60  08005e60  0000712c  2**0
                  CONTENTS
  4 .ARM          00000008  08005e60  08005e60  00006e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e68  08005e68  0000712c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e68  08005e68  00006e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e6c  08005e6c  00006e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000012c  20000000  08005e70  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000083c  2000012c  08005f9c  0000712c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000968  08005f9c  00007968  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000712c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f296  00000000  00000000  0000715c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000202a  00000000  00000000  000163f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea8  00000000  00000000  00018420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b84  00000000  00000000  000192c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015e4a  00000000  00000000  00019e4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010373  00000000  00000000  0002fc96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008da54  00000000  00000000  00040009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cda5d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004360  00000000  00000000  000cdaa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000d1e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000012c 	.word	0x2000012c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005da4 	.word	0x08005da4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000130 	.word	0x20000130
 80001dc:	08005da4 	.word	0x08005da4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <init_char_map>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void init_char_map(void) {
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
	for(int i = 0; i < 256; i++) {
 8000576:	2300      	movs	r3, #0
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	e007      	b.n	800058c <init_char_map+0x1c>
		charmap[i] = matrix_QM;
 800057c:	4a28      	ldr	r2, [pc, #160]	@ (8000620 <init_char_map+0xb0>)
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4928      	ldr	r1, [pc, #160]	@ (8000624 <init_char_map+0xb4>)
 8000582:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < 256; i++) {
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	3301      	adds	r3, #1
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	2bff      	cmp	r3, #255	@ 0xff
 8000590:	ddf4      	ble.n	800057c <init_char_map+0xc>
	}

	charmap['0'] = matrix_0;
 8000592:	4b23      	ldr	r3, [pc, #140]	@ (8000620 <init_char_map+0xb0>)
 8000594:	4a24      	ldr	r2, [pc, #144]	@ (8000628 <init_char_map+0xb8>)
 8000596:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	charmap['1'] = matrix_1;
 800059a:	4b21      	ldr	r3, [pc, #132]	@ (8000620 <init_char_map+0xb0>)
 800059c:	4a23      	ldr	r2, [pc, #140]	@ (800062c <init_char_map+0xbc>)
 800059e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
	charmap['2'] = matrix_2;
 80005a2:	4b1f      	ldr	r3, [pc, #124]	@ (8000620 <init_char_map+0xb0>)
 80005a4:	4a22      	ldr	r2, [pc, #136]	@ (8000630 <init_char_map+0xc0>)
 80005a6:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
	charmap['3'] = matrix_3;
 80005aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000620 <init_char_map+0xb0>)
 80005ac:	4a21      	ldr	r2, [pc, #132]	@ (8000634 <init_char_map+0xc4>)
 80005ae:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
	charmap['4'] = matrix_4;
 80005b2:	4b1b      	ldr	r3, [pc, #108]	@ (8000620 <init_char_map+0xb0>)
 80005b4:	4a20      	ldr	r2, [pc, #128]	@ (8000638 <init_char_map+0xc8>)
 80005b6:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
	charmap['5'] = matrix_5;
 80005ba:	4b19      	ldr	r3, [pc, #100]	@ (8000620 <init_char_map+0xb0>)
 80005bc:	4a1f      	ldr	r2, [pc, #124]	@ (800063c <init_char_map+0xcc>)
 80005be:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
	charmap['6'] = matrix_6;
 80005c2:	4b17      	ldr	r3, [pc, #92]	@ (8000620 <init_char_map+0xb0>)
 80005c4:	4a1e      	ldr	r2, [pc, #120]	@ (8000640 <init_char_map+0xd0>)
 80005c6:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
	charmap['7'] = matrix_7;
 80005ca:	4b15      	ldr	r3, [pc, #84]	@ (8000620 <init_char_map+0xb0>)
 80005cc:	4a1d      	ldr	r2, [pc, #116]	@ (8000644 <init_char_map+0xd4>)
 80005ce:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
	charmap['8'] = matrix_8;
 80005d2:	4b13      	ldr	r3, [pc, #76]	@ (8000620 <init_char_map+0xb0>)
 80005d4:	4a1c      	ldr	r2, [pc, #112]	@ (8000648 <init_char_map+0xd8>)
 80005d6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
	charmap['9'] = matrix_9;
 80005da:	4b11      	ldr	r3, [pc, #68]	@ (8000620 <init_char_map+0xb0>)
 80005dc:	4a1b      	ldr	r2, [pc, #108]	@ (800064c <init_char_map+0xdc>)
 80005de:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
	charmap['A'] = matrix_A;
 80005e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000620 <init_char_map+0xb0>)
 80005e4:	4a1a      	ldr	r2, [pc, #104]	@ (8000650 <init_char_map+0xe0>)
 80005e6:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
	charmap['B'] = matrix_B;
 80005ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000620 <init_char_map+0xb0>)
 80005ec:	4a19      	ldr	r2, [pc, #100]	@ (8000654 <init_char_map+0xe4>)
 80005ee:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
	charmap['C'] = matrix_C;
 80005f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000620 <init_char_map+0xb0>)
 80005f4:	4a18      	ldr	r2, [pc, #96]	@ (8000658 <init_char_map+0xe8>)
 80005f6:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
	charmap['D'] = matrix_D;
 80005fa:	4b09      	ldr	r3, [pc, #36]	@ (8000620 <init_char_map+0xb0>)
 80005fc:	4a17      	ldr	r2, [pc, #92]	@ (800065c <init_char_map+0xec>)
 80005fe:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
	charmap['E'] = matrix_E;
 8000602:	4b07      	ldr	r3, [pc, #28]	@ (8000620 <init_char_map+0xb0>)
 8000604:	4a16      	ldr	r2, [pc, #88]	@ (8000660 <init_char_map+0xf0>)
 8000606:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
	charmap['F'] = matrix_F;
 800060a:	4b05      	ldr	r3, [pc, #20]	@ (8000620 <init_char_map+0xb0>)
 800060c:	4a15      	ldr	r2, [pc, #84]	@ (8000664 <init_char_map+0xf4>)
 800060e:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
}
 8000612:	bf00      	nop
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	20000418 	.word	0x20000418
 8000624:	20000000 	.word	0x20000000
 8000628:	20000054 	.word	0x20000054
 800062c:	20000060 	.word	0x20000060
 8000630:	2000006c 	.word	0x2000006c
 8000634:	20000078 	.word	0x20000078
 8000638:	20000084 	.word	0x20000084
 800063c:	20000090 	.word	0x20000090
 8000640:	2000009c 	.word	0x2000009c
 8000644:	200000a8 	.word	0x200000a8
 8000648:	200000b4 	.word	0x200000b4
 800064c:	200000c0 	.word	0x200000c0
 8000650:	2000000c 	.word	0x2000000c
 8000654:	20000018 	.word	0x20000018
 8000658:	20000024 	.word	0x20000024
 800065c:	20000030 	.word	0x20000030
 8000660:	2000003c 	.word	0x2000003c
 8000664:	20000048 	.word	0x20000048

08000668 <show_letter>:

void show_letter(char digit) {
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	71fb      	strb	r3, [r7, #7]
	matrix = charmap[(uint8_t) digit];
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	4a05      	ldr	r2, [pc, #20]	@ (800068c <show_letter+0x24>)
 8000676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800067a:	4a05      	ldr	r2, [pc, #20]	@ (8000690 <show_letter+0x28>)
 800067c:	6013      	str	r3, [r2, #0]
}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	20000418 	.word	0x20000418
 8000690:	200000cc 	.word	0x200000cc

08000694 <continue_TX_callback>:




void continue_TX_callback() {
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
	uint16_t bit = *(uint16_t*)buffer;
 800069a:	4b16      	ldr	r3, [pc, #88]	@ (80006f4 <continue_TX_callback+0x60>)
 800069c:	881b      	ldrh	r3, [r3, #0]
 800069e:	80fb      	strh	r3, [r7, #6]
	bit = (bit >> my_index) & 1;
 80006a0:	88fa      	ldrh	r2, [r7, #6]
 80006a2:	4b15      	ldr	r3, [pc, #84]	@ (80006f8 <continue_TX_callback+0x64>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	fa42 f303 	asr.w	r3, r2, r3
 80006aa:	b29b      	uxth	r3, r3
 80006ac:	f003 0301 	and.w	r3, r3, #1
 80006b0:	80fb      	strh	r3, [r7, #6]
	my_index++;
 80006b2:	4b11      	ldr	r3, [pc, #68]	@ (80006f8 <continue_TX_callback+0x64>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	3301      	adds	r3, #1
 80006b8:	4a0f      	ldr	r2, [pc, #60]	@ (80006f8 <continue_TX_callback+0x64>)
 80006ba:	6013      	str	r3, [r2, #0]

	if (bit) {
 80006bc:	88fb      	ldrh	r3, [r7, #6]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d004      	beq.n	80006cc <continue_TX_callback+0x38>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 80006c2:	2108      	movs	r1, #8
 80006c4:	480d      	ldr	r0, [pc, #52]	@ (80006fc <continue_TX_callback+0x68>)
 80006c6:	f003 f803 	bl	80036d0 <HAL_TIM_PWM_Stop>
 80006ca:	e003      	b.n	80006d4 <continue_TX_callback+0x40>
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
	} else {
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80006cc:	2108      	movs	r1, #8
 80006ce:	480b      	ldr	r0, [pc, #44]	@ (80006fc <continue_TX_callback+0x68>)
 80006d0:	f002 ff4e 	bl	8003570 <HAL_TIM_PWM_Start>
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
	}

	if (my_index > 9) {
 80006d4:	4b08      	ldr	r3, [pc, #32]	@ (80006f8 <continue_TX_callback+0x64>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2b09      	cmp	r3, #9
 80006da:	dd07      	ble.n	80006ec <continue_TX_callback+0x58>
		HAL_TIM_Base_Stop(&htim1);
 80006dc:	4808      	ldr	r0, [pc, #32]	@ (8000700 <continue_TX_callback+0x6c>)
 80006de:	f002 fe64 	bl	80033aa <HAL_TIM_Base_Stop>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2120      	movs	r1, #32
 80006e6:	4807      	ldr	r0, [pc, #28]	@ (8000704 <continue_TX_callback+0x70>)
 80006e8:	f001 feb0 	bl	800244c <HAL_GPIO_WritePin>
	}
}
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	200003b0 	.word	0x200003b0
 80006f8:	200003b4 	.word	0x200003b4
 80006fc:	20000248 	.word	0x20000248
 8000700:	20000200 	.word	0x20000200
 8000704:	40020000 	.word	0x40020000

08000708 <scan_keyboard_callback>:

void scan_keyboard_callback() {
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
	flag_keyboard = 1;
 800070c:	4b03      	ldr	r3, [pc, #12]	@ (800071c <scan_keyboard_callback+0x14>)
 800070e:	2201      	movs	r2, #1
 8000710:	601a      	str	r2, [r3, #0]
}
 8000712:	bf00      	nop
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr
 800071c:	200003b8 	.word	0x200003b8

08000720 <LED_matrix_callback>:


void LED_matrix_callback() {
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RCLK_PIN, GPIO_PIN_RESET);
 8000724:	2200      	movs	r2, #0
 8000726:	2140      	movs	r1, #64	@ 0x40
 8000728:	480d      	ldr	r0, [pc, #52]	@ (8000760 <LED_matrix_callback+0x40>)
 800072a:	f001 fe8f 	bl	800244c <HAL_GPIO_WritePin>

//	int UART_length = snprintf(stringa, sizeof(stringa), "%d %d\n\r", matrix[0], matrix[0]);
//	HAL_UART_Transmit(&huart2, stringa, UART_length, 100);

	HAL_SPI_Transmit_DMA(&hspi1, &matrix[2 * column_index], 2);
 800072e:	4b0d      	ldr	r3, [pc, #52]	@ (8000764 <LED_matrix_callback+0x44>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4a0d      	ldr	r2, [pc, #52]	@ (8000768 <LED_matrix_callback+0x48>)
 8000734:	6812      	ldr	r2, [r2, #0]
 8000736:	0052      	lsls	r2, r2, #1
 8000738:	4413      	add	r3, r2
 800073a:	2202      	movs	r2, #2
 800073c:	4619      	mov	r1, r3
 800073e:	480b      	ldr	r0, [pc, #44]	@ (800076c <LED_matrix_callback+0x4c>)
 8000740:	f002 fbc0 	bl	8002ec4 <HAL_SPI_Transmit_DMA>
	if(++column_index > 4) column_index = 0;
 8000744:	4b08      	ldr	r3, [pc, #32]	@ (8000768 <LED_matrix_callback+0x48>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	3301      	adds	r3, #1
 800074a:	4a07      	ldr	r2, [pc, #28]	@ (8000768 <LED_matrix_callback+0x48>)
 800074c:	6013      	str	r3, [r2, #0]
 800074e:	4b06      	ldr	r3, [pc, #24]	@ (8000768 <LED_matrix_callback+0x48>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	2b04      	cmp	r3, #4
 8000754:	dd02      	ble.n	800075c <LED_matrix_callback+0x3c>
 8000756:	4b04      	ldr	r3, [pc, #16]	@ (8000768 <LED_matrix_callback+0x48>)
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40020400 	.word	0x40020400
 8000764:	200000cc 	.word	0x200000cc
 8000768:	2000040c 	.word	0x2000040c
 800076c:	20000148 	.word	0x20000148

08000770 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
	if (htim == &htim3) scan_keyboard_callback();
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	4a0b      	ldr	r2, [pc, #44]	@ (80007a8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800077c:	4293      	cmp	r3, r2
 800077e:	d102      	bne.n	8000786 <HAL_TIM_PeriodElapsedCallback+0x16>
 8000780:	f7ff ffc2 	bl	8000708 <scan_keyboard_callback>
 8000784:	e005      	b.n	8000792 <HAL_TIM_PeriodElapsedCallback+0x22>
	else if (htim == &htim1) continue_TX_callback();
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	4a08      	ldr	r2, [pc, #32]	@ (80007ac <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d101      	bne.n	8000792 <HAL_TIM_PeriodElapsedCallback+0x22>
 800078e:	f7ff ff81 	bl	8000694 <continue_TX_callback>
	if(htim == &htim10) LED_matrix_callback();
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	4a06      	ldr	r2, [pc, #24]	@ (80007b0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d101      	bne.n	800079e <HAL_TIM_PeriodElapsedCallback+0x2e>
 800079a:	f7ff ffc1 	bl	8000720 <LED_matrix_callback>
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000290 	.word	0x20000290
 80007ac:	20000200 	.word	0x20000200
 80007b0:	200002d8 	.word	0x200002d8

080007b4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
	if (huart != &huart1) return;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	4a11      	ldr	r2, [pc, #68]	@ (8000804 <HAL_UART_RxCpltCallback+0x50>)
 80007c0:	4293      	cmp	r3, r2
 80007c2:	d11b      	bne.n	80007fc <HAL_UART_RxCpltCallback+0x48>

	int UART_length = snprintf(stringa, sizeof(stringa), "received: %c\n\r", RX_byte);
 80007c4:	4b10      	ldr	r3, [pc, #64]	@ (8000808 <HAL_UART_RxCpltCallback+0x54>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	4a10      	ldr	r2, [pc, #64]	@ (800080c <HAL_UART_RxCpltCallback+0x58>)
 80007ca:	2140      	movs	r1, #64	@ 0x40
 80007cc:	4810      	ldr	r0, [pc, #64]	@ (8000810 <HAL_UART_RxCpltCallback+0x5c>)
 80007ce:	f004 fe35 	bl	800543c <sniprintf>
 80007d2:	60f8      	str	r0, [r7, #12]
	HAL_UART_Transmit(&huart2, stringa, UART_length, 100);
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	b29a      	uxth	r2, r3
 80007d8:	2364      	movs	r3, #100	@ 0x64
 80007da:	490d      	ldr	r1, [pc, #52]	@ (8000810 <HAL_UART_RxCpltCallback+0x5c>)
 80007dc:	480d      	ldr	r0, [pc, #52]	@ (8000814 <HAL_UART_RxCpltCallback+0x60>)
 80007de:	f003 fe27 	bl	8004430 <HAL_UART_Transmit>

	HAL_UART_Receive_IT(&huart1, &RX_byte, 1);
 80007e2:	2201      	movs	r2, #1
 80007e4:	4908      	ldr	r1, [pc, #32]	@ (8000808 <HAL_UART_RxCpltCallback+0x54>)
 80007e6:	4807      	ldr	r0, [pc, #28]	@ (8000804 <HAL_UART_RxCpltCallback+0x50>)
 80007e8:	f003 fead 	bl	8004546 <HAL_UART_Receive_IT>

	command = RX_byte;
 80007ec:	4b06      	ldr	r3, [pc, #24]	@ (8000808 <HAL_UART_RxCpltCallback+0x54>)
 80007ee:	781a      	ldrb	r2, [r3, #0]
 80007f0:	4b09      	ldr	r3, [pc, #36]	@ (8000818 <HAL_UART_RxCpltCallback+0x64>)
 80007f2:	701a      	strb	r2, [r3, #0]
	new_command = 1;
 80007f4:	4b09      	ldr	r3, [pc, #36]	@ (800081c <HAL_UART_RxCpltCallback+0x68>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	e000      	b.n	80007fe <HAL_UART_RxCpltCallback+0x4a>
	if (huart != &huart1) return;
 80007fc:	bf00      	nop
}
 80007fe:	3710      	adds	r7, #16
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000320 	.word	0x20000320
 8000808:	20000410 	.word	0x20000410
 800080c:	08005dbc 	.word	0x08005dbc
 8000810:	200003bc 	.word	0x200003bc
 8000814:	20000368 	.word	0x20000368
 8000818:	20000411 	.word	0x20000411
 800081c:	20000414 	.word	0x20000414

08000820 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
	if(hspi != &hspi1) return;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	4a06      	ldr	r2, [pc, #24]	@ (8000844 <HAL_SPI_TxCpltCallback+0x24>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d105      	bne.n	800083c <HAL_SPI_TxCpltCallback+0x1c>

	HAL_GPIO_WritePin(RCLK_PIN, GPIO_PIN_SET);
 8000830:	2201      	movs	r2, #1
 8000832:	2140      	movs	r1, #64	@ 0x40
 8000834:	4804      	ldr	r0, [pc, #16]	@ (8000848 <HAL_SPI_TxCpltCallback+0x28>)
 8000836:	f001 fe09 	bl	800244c <HAL_GPIO_WritePin>
 800083a:	e000      	b.n	800083e <HAL_SPI_TxCpltCallback+0x1e>
	if(hspi != &hspi1) return;
 800083c:	bf00      	nop
}
 800083e:	3708      	adds	r7, #8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20000148 	.word	0x20000148
 8000848:	40020400 	.word	0x40020400

0800084c <transmit_byte>:

void transmit_byte(uint8_t data) {
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000856:	2201      	movs	r2, #1
 8000858:	2120      	movs	r1, #32
 800085a:	4818      	ldr	r0, [pc, #96]	@ (80008bc <transmit_byte+0x70>)
 800085c:	f001 fdf6 	bl	800244c <HAL_GPIO_WritePin>

	buffer[0] = (data << 1); // 0000001P xxxxxxx0
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	005b      	lsls	r3, r3, #1
 8000864:	b2da      	uxtb	r2, r3
 8000866:	4b16      	ldr	r3, [pc, #88]	@ (80008c0 <transmit_byte+0x74>)
 8000868:	701a      	strb	r2, [r3, #0]

	uint8_t parity = 0;
 800086a:	2300      	movs	r3, #0
 800086c:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < 7; i++) {
 800086e:	2300      	movs	r3, #0
 8000870:	60bb      	str	r3, [r7, #8]
 8000872:	e00f      	b.n	8000894 <transmit_byte+0x48>
		parity ^= (data >> i) & 1; // odd parity
 8000874:	79fa      	ldrb	r2, [r7, #7]
 8000876:	68bb      	ldr	r3, [r7, #8]
 8000878:	fa42 f303 	asr.w	r3, r2, r3
 800087c:	b25b      	sxtb	r3, r3
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	b25a      	sxtb	r2, r3
 8000884:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000888:	4053      	eors	r3, r2
 800088a:	b25b      	sxtb	r3, r3
 800088c:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < 7; i++) {
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	3301      	adds	r3, #1
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	2b06      	cmp	r3, #6
 8000898:	ddec      	ble.n	8000874 <transmit_byte+0x28>
	}

	buffer[1] = 0b10 | parity;
 800089a:	7bfb      	ldrb	r3, [r7, #15]
 800089c:	f043 0302 	orr.w	r3, r3, #2
 80008a0:	b2da      	uxtb	r2, r3
 80008a2:	4b07      	ldr	r3, [pc, #28]	@ (80008c0 <transmit_byte+0x74>)
 80008a4:	705a      	strb	r2, [r3, #1]

	my_index = 0;
 80008a6:	4b07      	ldr	r3, [pc, #28]	@ (80008c4 <transmit_byte+0x78>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]

	HAL_TIM_Base_Start_IT(&htim1);
 80008ac:	4806      	ldr	r0, [pc, #24]	@ (80008c8 <transmit_byte+0x7c>)
 80008ae:	f002 fda3 	bl	80033f8 <HAL_TIM_Base_Start_IT>
}
 80008b2:	bf00      	nop
 80008b4:	3710      	adds	r7, #16
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40020000 	.word	0x40020000
 80008c0:	200003b0 	.word	0x200003b0
 80008c4:	200003b4 	.word	0x200003b4
 80008c8:	20000200 	.word	0x20000200

080008cc <scan_keyboard>:

void scan_keyboard(int* col_index) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08c      	sub	sp, #48	@ 0x30
 80008d0:	af04      	add	r7, sp, #16
 80008d2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOC, COLUMN_PIN[*col_index], GPIO_PIN_SET);
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a47      	ldr	r2, [pc, #284]	@ (80009f8 <scan_keyboard+0x12c>)
 80008da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008de:	2201      	movs	r2, #1
 80008e0:	4619      	mov	r1, r3
 80008e2:	4846      	ldr	r0, [pc, #280]	@ (80009fc <scan_keyboard+0x130>)
 80008e4:	f001 fdb2 	bl	800244c <HAL_GPIO_WritePin>

	if (!flag_keyboard) return; // every time it is set to true, we pass to the next column
 80008e8:	4b45      	ldr	r3, [pc, #276]	@ (8000a00 <scan_keyboard+0x134>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d07e      	beq.n	80009ee <scan_keyboard+0x122>
	//HAL_Delay(5); // ADESSO IL DEBOUNINC SI FA COL TIMER

	for (int row_index = 0; row_index < 4; row_index++) {
 80008f0:	2300      	movs	r3, #0
 80008f2:	61fb      	str	r3, [r7, #28]
 80008f4:	e05e      	b.n	80009b4 <scan_keyboard+0xe8>
	  int row = (1 - HAL_GPIO_ReadPin(GPIOC, ROW_PIN[row_index])) * (row_index + 1);
 80008f6:	4a43      	ldr	r2, [pc, #268]	@ (8000a04 <scan_keyboard+0x138>)
 80008f8:	69fb      	ldr	r3, [r7, #28]
 80008fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008fe:	4619      	mov	r1, r3
 8000900:	483e      	ldr	r0, [pc, #248]	@ (80009fc <scan_keyboard+0x130>)
 8000902:	f001 fd8b 	bl	800241c <HAL_GPIO_ReadPin>
 8000906:	4603      	mov	r3, r0
 8000908:	f1c3 0301 	rsb	r3, r3, #1
 800090c:	69fa      	ldr	r2, [r7, #28]
 800090e:	3201      	adds	r2, #1
 8000910:	fb02 f303 	mul.w	r3, r2, r3
 8000914:	617b      	str	r3, [r7, #20]

	  int key_index = *col_index + (row - 1) * 4; // it's correct if row > 0
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	3b01      	subs	r3, #1
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	4413      	add	r3, r2
 8000922:	61bb      	str	r3, [r7, #24]

	  if (row != 0 && key_state[key_index] == 0) {
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d036      	beq.n	8000998 <scan_keyboard+0xcc>
 800092a:	4a37      	ldr	r2, [pc, #220]	@ (8000a08 <scan_keyboard+0x13c>)
 800092c:	69bb      	ldr	r3, [r7, #24]
 800092e:	4413      	add	r3, r2
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d130      	bne.n	8000998 <scan_keyboard+0xcc>
		  key_state[key_index] = 1;
 8000936:	4a34      	ldr	r2, [pc, #208]	@ (8000a08 <scan_keyboard+0x13c>)
 8000938:	69bb      	ldr	r3, [r7, #24]
 800093a:	4413      	add	r3, r2
 800093c:	2201      	movs	r2, #1
 800093e:	701a      	strb	r2, [r3, #0]

		  if (((row - 1) == 3) || ((row - 1) >= 2 && *col_index >= 2)) {
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	2b04      	cmp	r3, #4
 8000944:	d006      	beq.n	8000954 <scan_keyboard+0x88>
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	2b02      	cmp	r3, #2
 800094a:	dd06      	ble.n	800095a <scan_keyboard+0x8e>
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2b01      	cmp	r3, #1
 8000952:	dd02      	ble.n	800095a <scan_keyboard+0x8e>
			  key_index += 7;
 8000954:	69bb      	ldr	r3, [r7, #24]
 8000956:	3307      	adds	r3, #7
 8000958:	61bb      	str	r3, [r7, #24]
		  }

		  char c = '0' + key_index;
 800095a:	69bb      	ldr	r3, [r7, #24]
 800095c:	b2db      	uxtb	r3, r3
 800095e:	3330      	adds	r3, #48	@ 0x30
 8000960:	74fb      	strb	r3, [r7, #19]

		  transmit_byte(c);
 8000962:	7cfb      	ldrb	r3, [r7, #19]
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff ff71 	bl	800084c <transmit_byte>

		  int UART_length = snprintf(stringa, sizeof(stringa), "pressed: %c (%d, %d) -> %d\n\r", c, *col_index, row, key_index);
 800096a:	7cf9      	ldrb	r1, [r7, #19]
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	69ba      	ldr	r2, [r7, #24]
 8000972:	9202      	str	r2, [sp, #8]
 8000974:	697a      	ldr	r2, [r7, #20]
 8000976:	9201      	str	r2, [sp, #4]
 8000978:	9300      	str	r3, [sp, #0]
 800097a:	460b      	mov	r3, r1
 800097c:	4a23      	ldr	r2, [pc, #140]	@ (8000a0c <scan_keyboard+0x140>)
 800097e:	2140      	movs	r1, #64	@ 0x40
 8000980:	4823      	ldr	r0, [pc, #140]	@ (8000a10 <scan_keyboard+0x144>)
 8000982:	f004 fd5b 	bl	800543c <sniprintf>
 8000986:	60f8      	str	r0, [r7, #12]
		  HAL_UART_Transmit(&huart2, stringa, UART_length, 100);
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	b29a      	uxth	r2, r3
 800098c:	2364      	movs	r3, #100	@ 0x64
 800098e:	4920      	ldr	r1, [pc, #128]	@ (8000a10 <scan_keyboard+0x144>)
 8000990:	4820      	ldr	r0, [pc, #128]	@ (8000a14 <scan_keyboard+0x148>)
 8000992:	f003 fd4d 	bl	8004430 <HAL_UART_Transmit>
	  if (row != 0 && key_state[key_index] == 0) {
 8000996:	e00a      	b.n	80009ae <scan_keyboard+0xe2>

	  } else if (row == 0) {
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d107      	bne.n	80009ae <scan_keyboard+0xe2>
		  key_state[*col_index + row_index * 4] = 0;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	4413      	add	r3, r2
 80009a8:	4a17      	ldr	r2, [pc, #92]	@ (8000a08 <scan_keyboard+0x13c>)
 80009aa:	2100      	movs	r1, #0
 80009ac:	54d1      	strb	r1, [r2, r3]
	for (int row_index = 0; row_index < 4; row_index++) {
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	3301      	adds	r3, #1
 80009b2:	61fb      	str	r3, [r7, #28]
 80009b4:	69fb      	ldr	r3, [r7, #28]
 80009b6:	2b03      	cmp	r3, #3
 80009b8:	dd9d      	ble.n	80008f6 <scan_keyboard+0x2a>
	  }
	}

	HAL_GPIO_WritePin(GPIOC, COLUMN_PIN[*col_index], GPIO_PIN_RESET);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a0e      	ldr	r2, [pc, #56]	@ (80009f8 <scan_keyboard+0x12c>)
 80009c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009c4:	2200      	movs	r2, #0
 80009c6:	4619      	mov	r1, r3
 80009c8:	480c      	ldr	r0, [pc, #48]	@ (80009fc <scan_keyboard+0x130>)
 80009ca:	f001 fd3f 	bl	800244c <HAL_GPIO_WritePin>

	*col_index = (*col_index + 1) % 4;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	3301      	adds	r3, #1
 80009d4:	425a      	negs	r2, r3
 80009d6:	f003 0303 	and.w	r3, r3, #3
 80009da:	f002 0203 	and.w	r2, r2, #3
 80009de:	bf58      	it	pl
 80009e0:	4253      	negpl	r3, r2
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	6013      	str	r3, [r2, #0]

	flag_keyboard = 0;
 80009e6:	4b06      	ldr	r3, [pc, #24]	@ (8000a00 <scan_keyboard+0x134>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	e000      	b.n	80009f0 <scan_keyboard+0x124>
	if (!flag_keyboard) return; // every time it is set to true, we pass to the next column
 80009ee:	bf00      	nop
}
 80009f0:	3720      	adds	r7, #32
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	08005dfc 	.word	0x08005dfc
 80009fc:	40020800 	.word	0x40020800
 8000a00:	200003b8 	.word	0x200003b8
 8000a04:	08005e04 	.word	0x08005e04
 8000a08:	200003fc 	.word	0x200003fc
 8000a0c:	08005dcc 	.word	0x08005dcc
 8000a10:	200003bc 	.word	0x200003bc
 8000a14:	20000368 	.word	0x20000368

08000a18 <show_new_command>:

void show_new_command() {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	if(new_command) {
 8000a1c:	4b06      	ldr	r3, [pc, #24]	@ (8000a38 <show_new_command+0x20>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d007      	beq.n	8000a34 <show_new_command+0x1c>
		show_letter(command);
 8000a24:	4b05      	ldr	r3, [pc, #20]	@ (8000a3c <show_new_command+0x24>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f7ff fe1d 	bl	8000668 <show_letter>
		new_command = 0;
 8000a2e:	4b02      	ldr	r3, [pc, #8]	@ (8000a38 <show_new_command+0x20>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
	}
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20000414 	.word	0x20000414
 8000a3c:	20000411 	.word	0x20000411

08000a40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a46:	f000 fddf 	bl	8001608 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a4a:	f000 f865 	bl	8000b18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a4e:	f000 faaf 	bl	8000fb0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a52:	f000 fa8d 	bl	8000f70 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000a56:	f000 fa61 	bl	8000f1c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000a5a:	f000 f94f 	bl	8000cfc <MX_TIM2_Init>
  MX_TIM1_Init();
 8000a5e:	f000 f8fd 	bl	8000c5c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000a62:	f000 f9bf 	bl	8000de4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000a66:	f000 fa2f 	bl	8000ec8 <MX_USART1_UART_Init>
  MX_TIM10_Init();
 8000a6a:	f000 fa09 	bl	8000e80 <MX_TIM10_Init>
  MX_SPI1_Init();
 8000a6e:	f000 f8bf 	bl	8000bf0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  int IR_index = 0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	60fb      	str	r3, [r7, #12]

HAL_GPIO_WritePin(GPIOC, COLUMN_PIN[0], GPIO_PIN_RESET);
 8000a76:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	481e      	ldr	r0, [pc, #120]	@ (8000af8 <main+0xb8>)
 8000a80:	f001 fce4 	bl	800244c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOC, COLUMN_PIN[1], GPIO_PIN_RESET);
 8000a84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a88:	2200      	movs	r2, #0
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	481a      	ldr	r0, [pc, #104]	@ (8000af8 <main+0xb8>)
 8000a8e:	f001 fcdd 	bl	800244c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOC, COLUMN_PIN[2], GPIO_PIN_RESET);
 8000a92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a96:	2200      	movs	r2, #0
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4817      	ldr	r0, [pc, #92]	@ (8000af8 <main+0xb8>)
 8000a9c:	f001 fcd6 	bl	800244c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOC, COLUMN_PIN[3], GPIO_PIN_RESET);
 8000aa0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4813      	ldr	r0, [pc, #76]	@ (8000af8 <main+0xb8>)
 8000aaa:	f001 fccf 	bl	800244c <HAL_GPIO_WritePin>

int keyboard_col_index = 0; // used to scan the column of the keyboard
 8000aae:	2300      	movs	r3, #0
 8000ab0:	607b      	str	r3, [r7, #4]

int UART_length = snprintf(stringa, sizeof(stringa), "--- INIT ---\n\r");
 8000ab2:	4a12      	ldr	r2, [pc, #72]	@ (8000afc <main+0xbc>)
 8000ab4:	2140      	movs	r1, #64	@ 0x40
 8000ab6:	4812      	ldr	r0, [pc, #72]	@ (8000b00 <main+0xc0>)
 8000ab8:	f004 fcc0 	bl	800543c <sniprintf>
 8000abc:	60b8      	str	r0, [r7, #8]
HAL_UART_Transmit(&huart2, stringa, UART_length, 100);
 8000abe:	68bb      	ldr	r3, [r7, #8]
 8000ac0:	b29a      	uxth	r2, r3
 8000ac2:	2364      	movs	r3, #100	@ 0x64
 8000ac4:	490e      	ldr	r1, [pc, #56]	@ (8000b00 <main+0xc0>)
 8000ac6:	480f      	ldr	r0, [pc, #60]	@ (8000b04 <main+0xc4>)
 8000ac8:	f003 fcb2 	bl	8004430 <HAL_UART_Transmit>

init_char_map();
 8000acc:	f7ff fd50 	bl	8000570 <init_char_map>
HAL_UART_Receive_IT(&huart1, &RX_byte, 1);
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	490d      	ldr	r1, [pc, #52]	@ (8000b08 <main+0xc8>)
 8000ad4:	480d      	ldr	r0, [pc, #52]	@ (8000b0c <main+0xcc>)
 8000ad6:	f003 fd36 	bl	8004546 <HAL_UART_Receive_IT>

HAL_TIM_Base_Start_IT(&htim3);
 8000ada:	480d      	ldr	r0, [pc, #52]	@ (8000b10 <main+0xd0>)
 8000adc:	f002 fc8c 	bl	80033f8 <HAL_TIM_Base_Start_IT>
HAL_TIM_Base_Start_IT(&htim10);
 8000ae0:	480c      	ldr	r0, [pc, #48]	@ (8000b14 <main+0xd4>)
 8000ae2:	f002 fc89 	bl	80033f8 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	scan_keyboard(&keyboard_col_index);
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff feef 	bl	80008cc <scan_keyboard>

	show_new_command();
 8000aee:	f7ff ff93 	bl	8000a18 <show_new_command>
	scan_keyboard(&keyboard_col_index);
 8000af2:	bf00      	nop
 8000af4:	e7f7      	b.n	8000ae6 <main+0xa6>
 8000af6:	bf00      	nop
 8000af8:	40020800 	.word	0x40020800
 8000afc:	08005dec 	.word	0x08005dec
 8000b00:	200003bc 	.word	0x200003bc
 8000b04:	20000368 	.word	0x20000368
 8000b08:	20000410 	.word	0x20000410
 8000b0c:	20000320 	.word	0x20000320
 8000b10:	20000290 	.word	0x20000290
 8000b14:	200002d8 	.word	0x200002d8

08000b18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b094      	sub	sp, #80	@ 0x50
 8000b1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b1e:	f107 0320 	add.w	r3, r7, #32
 8000b22:	2230      	movs	r2, #48	@ 0x30
 8000b24:	2100      	movs	r1, #0
 8000b26:	4618      	mov	r0, r3
 8000b28:	f004 fcbc 	bl	80054a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b2c:	f107 030c 	add.w	r3, r7, #12
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60bb      	str	r3, [r7, #8]
 8000b40:	4b29      	ldr	r3, [pc, #164]	@ (8000be8 <SystemClock_Config+0xd0>)
 8000b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b44:	4a28      	ldr	r2, [pc, #160]	@ (8000be8 <SystemClock_Config+0xd0>)
 8000b46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b4c:	4b26      	ldr	r3, [pc, #152]	@ (8000be8 <SystemClock_Config+0xd0>)
 8000b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b54:	60bb      	str	r3, [r7, #8]
 8000b56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b58:	2300      	movs	r3, #0
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	4b23      	ldr	r3, [pc, #140]	@ (8000bec <SystemClock_Config+0xd4>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b64:	4a21      	ldr	r2, [pc, #132]	@ (8000bec <SystemClock_Config+0xd4>)
 8000b66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b6a:	6013      	str	r3, [r2, #0]
 8000b6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000bec <SystemClock_Config+0xd4>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b74:	607b      	str	r3, [r7, #4]
 8000b76:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b80:	2310      	movs	r3, #16
 8000b82:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b84:	2302      	movs	r3, #2
 8000b86:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000b8c:	2310      	movs	r3, #16
 8000b8e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b90:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000b94:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b96:	2304      	movs	r3, #4
 8000b98:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b9a:	2307      	movs	r3, #7
 8000b9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b9e:	f107 0320 	add.w	r3, r7, #32
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f001 fc6c 	bl	8002480 <HAL_RCC_OscConfig>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000bae:	f000 fa81 	bl	80010b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb2:	230f      	movs	r3, #15
 8000bb4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bbe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bc2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bc8:	f107 030c 	add.w	r3, r7, #12
 8000bcc:	2102      	movs	r1, #2
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f001 fece 	bl	8002970 <HAL_RCC_ClockConfig>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000bda:	f000 fa6b 	bl	80010b4 <Error_Handler>
  }
}
 8000bde:	bf00      	nop
 8000be0:	3750      	adds	r7, #80	@ 0x50
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40023800 	.word	0x40023800
 8000bec:	40007000 	.word	0x40007000

08000bf0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bf4:	4b17      	ldr	r3, [pc, #92]	@ (8000c54 <MX_SPI1_Init+0x64>)
 8000bf6:	4a18      	ldr	r2, [pc, #96]	@ (8000c58 <MX_SPI1_Init+0x68>)
 8000bf8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bfa:	4b16      	ldr	r3, [pc, #88]	@ (8000c54 <MX_SPI1_Init+0x64>)
 8000bfc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c02:	4b14      	ldr	r3, [pc, #80]	@ (8000c54 <MX_SPI1_Init+0x64>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c08:	4b12      	ldr	r3, [pc, #72]	@ (8000c54 <MX_SPI1_Init+0x64>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c0e:	4b11      	ldr	r3, [pc, #68]	@ (8000c54 <MX_SPI1_Init+0x64>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c14:	4b0f      	ldr	r3, [pc, #60]	@ (8000c54 <MX_SPI1_Init+0x64>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c54 <MX_SPI1_Init+0x64>)
 8000c1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c20:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000c22:	4b0c      	ldr	r3, [pc, #48]	@ (8000c54 <MX_SPI1_Init+0x64>)
 8000c24:	2208      	movs	r2, #8
 8000c26:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c28:	4b0a      	ldr	r3, [pc, #40]	@ (8000c54 <MX_SPI1_Init+0x64>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c2e:	4b09      	ldr	r3, [pc, #36]	@ (8000c54 <MX_SPI1_Init+0x64>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c34:	4b07      	ldr	r3, [pc, #28]	@ (8000c54 <MX_SPI1_Init+0x64>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c3a:	4b06      	ldr	r3, [pc, #24]	@ (8000c54 <MX_SPI1_Init+0x64>)
 8000c3c:	220a      	movs	r2, #10
 8000c3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c40:	4804      	ldr	r0, [pc, #16]	@ (8000c54 <MX_SPI1_Init+0x64>)
 8000c42:	f002 f8b5 	bl	8002db0 <HAL_SPI_Init>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c4c:	f000 fa32 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c50:	bf00      	nop
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20000148 	.word	0x20000148
 8000c58:	40013000 	.word	0x40013000

08000c5c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c62:	f107 0308 	add.w	r3, r7, #8
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	609a      	str	r2, [r3, #8]
 8000c6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c70:	463b      	mov	r3, r7
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c78:	4b1e      	ldr	r3, [pc, #120]	@ (8000cf4 <MX_TIM1_Init+0x98>)
 8000c7a:	4a1f      	ldr	r2, [pc, #124]	@ (8000cf8 <MX_TIM1_Init+0x9c>)
 8000c7c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3500-1;
 8000c7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf4 <MX_TIM1_Init+0x98>)
 8000c80:	f640 52ab 	movw	r2, #3499	@ 0xdab
 8000c84:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c86:	4b1b      	ldr	r3, [pc, #108]	@ (8000cf4 <MX_TIM1_Init+0x98>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10-1;
 8000c8c:	4b19      	ldr	r3, [pc, #100]	@ (8000cf4 <MX_TIM1_Init+0x98>)
 8000c8e:	2209      	movs	r2, #9
 8000c90:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c92:	4b18      	ldr	r3, [pc, #96]	@ (8000cf4 <MX_TIM1_Init+0x98>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c98:	4b16      	ldr	r3, [pc, #88]	@ (8000cf4 <MX_TIM1_Init+0x98>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c9e:	4b15      	ldr	r3, [pc, #84]	@ (8000cf4 <MX_TIM1_Init+0x98>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ca4:	4813      	ldr	r0, [pc, #76]	@ (8000cf4 <MX_TIM1_Init+0x98>)
 8000ca6:	f002 fb31 	bl	800330c <HAL_TIM_Base_Init>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000cb0:	f000 fa00 	bl	80010b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cb4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cb8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000cba:	f107 0308 	add.w	r3, r7, #8
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	480c      	ldr	r0, [pc, #48]	@ (8000cf4 <MX_TIM1_Init+0x98>)
 8000cc2:	f002 ff1b 	bl	8003afc <HAL_TIM_ConfigClockSource>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000ccc:	f000 f9f2 	bl	80010b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cd8:	463b      	mov	r3, r7
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4805      	ldr	r0, [pc, #20]	@ (8000cf4 <MX_TIM1_Init+0x98>)
 8000cde:	f003 fad5 	bl	800428c <HAL_TIMEx_MasterConfigSynchronization>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000ce8:	f000 f9e4 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000cec:	bf00      	nop
 8000cee:	3718      	adds	r7, #24
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20000200 	.word	0x20000200
 8000cf8:	40010000 	.word	0x40010000

08000cfc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08e      	sub	sp, #56	@ 0x38
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d02:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d10:	f107 0320 	add.w	r3, r7, #32
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
 8000d28:	615a      	str	r2, [r3, #20]
 8000d2a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d2c:	4b2c      	ldr	r3, [pc, #176]	@ (8000de0 <MX_TIM2_Init+0xe4>)
 8000d2e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d32:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 221-1;
 8000d34:	4b2a      	ldr	r3, [pc, #168]	@ (8000de0 <MX_TIM2_Init+0xe4>)
 8000d36:	22dc      	movs	r2, #220	@ 0xdc
 8000d38:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d3a:	4b29      	ldr	r3, [pc, #164]	@ (8000de0 <MX_TIM2_Init+0xe4>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 8000d40:	4b27      	ldr	r3, [pc, #156]	@ (8000de0 <MX_TIM2_Init+0xe4>)
 8000d42:	2209      	movs	r2, #9
 8000d44:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d46:	4b26      	ldr	r3, [pc, #152]	@ (8000de0 <MX_TIM2_Init+0xe4>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d4c:	4b24      	ldr	r3, [pc, #144]	@ (8000de0 <MX_TIM2_Init+0xe4>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d52:	4823      	ldr	r0, [pc, #140]	@ (8000de0 <MX_TIM2_Init+0xe4>)
 8000d54:	f002 fada 	bl	800330c <HAL_TIM_Base_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000d5e:	f000 f9a9 	bl	80010b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d66:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d68:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	481c      	ldr	r0, [pc, #112]	@ (8000de0 <MX_TIM2_Init+0xe4>)
 8000d70:	f002 fec4 	bl	8003afc <HAL_TIM_ConfigClockSource>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000d7a:	f000 f99b 	bl	80010b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d7e:	4818      	ldr	r0, [pc, #96]	@ (8000de0 <MX_TIM2_Init+0xe4>)
 8000d80:	f002 fb9c 	bl	80034bc <HAL_TIM_PWM_Init>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000d8a:	f000 f993 	bl	80010b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d92:	2300      	movs	r3, #0
 8000d94:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d96:	f107 0320 	add.w	r3, r7, #32
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4810      	ldr	r0, [pc, #64]	@ (8000de0 <MX_TIM2_Init+0xe4>)
 8000d9e:	f003 fa75 	bl	800428c <HAL_TIMEx_MasterConfigSynchronization>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000da8:	f000 f984 	bl	80010b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dac:	2360      	movs	r3, #96	@ 0x60
 8000dae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 5;
 8000db0:	2305      	movs	r3, #5
 8000db2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000db4:	2300      	movs	r3, #0
 8000db6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	2208      	movs	r2, #8
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4807      	ldr	r0, [pc, #28]	@ (8000de0 <MX_TIM2_Init+0xe4>)
 8000dc4:	f002 fdd8 	bl	8003978 <HAL_TIM_PWM_ConfigChannel>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000dce:	f000 f971 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000dd2:	4803      	ldr	r0, [pc, #12]	@ (8000de0 <MX_TIM2_Init+0xe4>)
 8000dd4:	f000 fa8e 	bl	80012f4 <HAL_TIM_MspPostInit>

}
 8000dd8:	bf00      	nop
 8000dda:	3738      	adds	r7, #56	@ 0x38
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20000248 	.word	0x20000248

08000de4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dea:	f107 0308 	add.w	r3, r7, #8
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]
 8000df4:	609a      	str	r2, [r3, #8]
 8000df6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df8:	463b      	mov	r3, r7
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e00:	4b1d      	ldr	r3, [pc, #116]	@ (8000e78 <MX_TIM3_Init+0x94>)
 8000e02:	4a1e      	ldr	r2, [pc, #120]	@ (8000e7c <MX_TIM3_Init+0x98>)
 8000e04:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 8000e06:	4b1c      	ldr	r3, [pc, #112]	@ (8000e78 <MX_TIM3_Init+0x94>)
 8000e08:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000e0c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000e78 <MX_TIM3_Init+0x94>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 30-1;
 8000e14:	4b18      	ldr	r3, [pc, #96]	@ (8000e78 <MX_TIM3_Init+0x94>)
 8000e16:	221d      	movs	r2, #29
 8000e18:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e1a:	4b17      	ldr	r3, [pc, #92]	@ (8000e78 <MX_TIM3_Init+0x94>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e20:	4b15      	ldr	r3, [pc, #84]	@ (8000e78 <MX_TIM3_Init+0x94>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e26:	4814      	ldr	r0, [pc, #80]	@ (8000e78 <MX_TIM3_Init+0x94>)
 8000e28:	f002 fa70 	bl	800330c <HAL_TIM_Base_Init>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000e32:	f000 f93f 	bl	80010b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e3a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e3c:	f107 0308 	add.w	r3, r7, #8
 8000e40:	4619      	mov	r1, r3
 8000e42:	480d      	ldr	r0, [pc, #52]	@ (8000e78 <MX_TIM3_Init+0x94>)
 8000e44:	f002 fe5a 	bl	8003afc <HAL_TIM_ConfigClockSource>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000e4e:	f000 f931 	bl	80010b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e52:	2300      	movs	r3, #0
 8000e54:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e56:	2300      	movs	r3, #0
 8000e58:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e5a:	463b      	mov	r3, r7
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4806      	ldr	r0, [pc, #24]	@ (8000e78 <MX_TIM3_Init+0x94>)
 8000e60:	f003 fa14 	bl	800428c <HAL_TIMEx_MasterConfigSynchronization>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000e6a:	f000 f923 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e6e:	bf00      	nop
 8000e70:	3718      	adds	r7, #24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000290 	.word	0x20000290
 8000e7c:	40000400 	.word	0x40000400

08000e80 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000e84:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec0 <MX_TIM10_Init+0x40>)
 8000e86:	4a0f      	ldr	r2, [pc, #60]	@ (8000ec4 <MX_TIM10_Init+0x44>)
 8000e88:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 84-1;
 8000e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec0 <MX_TIM10_Init+0x40>)
 8000e8c:	2253      	movs	r2, #83	@ 0x53
 8000e8e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e90:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec0 <MX_TIM10_Init+0x40>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4000-1;
 8000e96:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec0 <MX_TIM10_Init+0x40>)
 8000e98:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8000e9c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e9e:	4b08      	ldr	r3, [pc, #32]	@ (8000ec0 <MX_TIM10_Init+0x40>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea4:	4b06      	ldr	r3, [pc, #24]	@ (8000ec0 <MX_TIM10_Init+0x40>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000eaa:	4805      	ldr	r0, [pc, #20]	@ (8000ec0 <MX_TIM10_Init+0x40>)
 8000eac:	f002 fa2e 	bl	800330c <HAL_TIM_Base_Init>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8000eb6:	f000 f8fd 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	200002d8 	.word	0x200002d8
 8000ec4:	40014400 	.word	0x40014400

08000ec8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ecc:	4b11      	ldr	r3, [pc, #68]	@ (8000f14 <MX_USART1_UART_Init+0x4c>)
 8000ece:	4a12      	ldr	r2, [pc, #72]	@ (8000f18 <MX_USART1_UART_Init+0x50>)
 8000ed0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2400;
 8000ed2:	4b10      	ldr	r3, [pc, #64]	@ (8000f14 <MX_USART1_UART_Init+0x4c>)
 8000ed4:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8000ed8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000eda:	4b0e      	ldr	r3, [pc, #56]	@ (8000f14 <MX_USART1_UART_Init+0x4c>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f14 <MX_USART1_UART_Init+0x4c>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 8000ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8000f14 <MX_USART1_UART_Init+0x4c>)
 8000ee8:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8000eec:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000eee:	4b09      	ldr	r3, [pc, #36]	@ (8000f14 <MX_USART1_UART_Init+0x4c>)
 8000ef0:	220c      	movs	r2, #12
 8000ef2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ef4:	4b07      	ldr	r3, [pc, #28]	@ (8000f14 <MX_USART1_UART_Init+0x4c>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000efa:	4b06      	ldr	r3, [pc, #24]	@ (8000f14 <MX_USART1_UART_Init+0x4c>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f00:	4804      	ldr	r0, [pc, #16]	@ (8000f14 <MX_USART1_UART_Init+0x4c>)
 8000f02:	f003 fa45 	bl	8004390 <HAL_UART_Init>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8000f0c:	f000 f8d2 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000320 	.word	0x20000320
 8000f18:	40011000 	.word	0x40011000

08000f1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f20:	4b11      	ldr	r3, [pc, #68]	@ (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f22:	4a12      	ldr	r2, [pc, #72]	@ (8000f6c <MX_USART2_UART_Init+0x50>)
 8000f24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f26:	4b10      	ldr	r3, [pc, #64]	@ (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f28:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f34:	4b0c      	ldr	r3, [pc, #48]	@ (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f40:	4b09      	ldr	r3, [pc, #36]	@ (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f42:	220c      	movs	r2, #12
 8000f44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f46:	4b08      	ldr	r3, [pc, #32]	@ (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f4c:	4b06      	ldr	r3, [pc, #24]	@ (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f52:	4805      	ldr	r0, [pc, #20]	@ (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f54:	f003 fa1c 	bl	8004390 <HAL_UART_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f5e:	f000 f8a9 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000368 	.word	0x20000368
 8000f6c:	40004400 	.word	0x40004400

08000f70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	607b      	str	r3, [r7, #4]
 8000f7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000fac <MX_DMA_Init+0x3c>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7e:	4a0b      	ldr	r2, [pc, #44]	@ (8000fac <MX_DMA_Init+0x3c>)
 8000f80:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f86:	4b09      	ldr	r3, [pc, #36]	@ (8000fac <MX_DMA_Init+0x3c>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2100      	movs	r1, #0
 8000f96:	203b      	movs	r0, #59	@ 0x3b
 8000f98:	f000 fc83 	bl	80018a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000f9c:	203b      	movs	r0, #59	@ 0x3b
 8000f9e:	f000 fc9c 	bl	80018da <HAL_NVIC_EnableIRQ>

}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40023800 	.word	0x40023800

08000fb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	@ 0x28
 8000fb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb6:	f107 0314 	add.w	r3, r7, #20
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	605a      	str	r2, [r3, #4]
 8000fc0:	609a      	str	r2, [r3, #8]
 8000fc2:	60da      	str	r2, [r3, #12]
 8000fc4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	613b      	str	r3, [r7, #16]
 8000fca:	4b37      	ldr	r3, [pc, #220]	@ (80010a8 <MX_GPIO_Init+0xf8>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fce:	4a36      	ldr	r2, [pc, #216]	@ (80010a8 <MX_GPIO_Init+0xf8>)
 8000fd0:	f043 0304 	orr.w	r3, r3, #4
 8000fd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fd6:	4b34      	ldr	r3, [pc, #208]	@ (80010a8 <MX_GPIO_Init+0xf8>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fda:	f003 0304 	and.w	r3, r3, #4
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	4b30      	ldr	r3, [pc, #192]	@ (80010a8 <MX_GPIO_Init+0xf8>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fea:	4a2f      	ldr	r2, [pc, #188]	@ (80010a8 <MX_GPIO_Init+0xf8>)
 8000fec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ff0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff2:	4b2d      	ldr	r3, [pc, #180]	@ (80010a8 <MX_GPIO_Init+0xf8>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	4b29      	ldr	r3, [pc, #164]	@ (80010a8 <MX_GPIO_Init+0xf8>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001006:	4a28      	ldr	r2, [pc, #160]	@ (80010a8 <MX_GPIO_Init+0xf8>)
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	6313      	str	r3, [r2, #48]	@ 0x30
 800100e:	4b26      	ldr	r3, [pc, #152]	@ (80010a8 <MX_GPIO_Init+0xf8>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	607b      	str	r3, [r7, #4]
 800101e:	4b22      	ldr	r3, [pc, #136]	@ (80010a8 <MX_GPIO_Init+0xf8>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001022:	4a21      	ldr	r2, [pc, #132]	@ (80010a8 <MX_GPIO_Init+0xf8>)
 8001024:	f043 0302 	orr.w	r3, r3, #2
 8001028:	6313      	str	r3, [r2, #48]	@ 0x30
 800102a:	4b1f      	ldr	r3, [pc, #124]	@ (80010a8 <MX_GPIO_Init+0xf8>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8001036:	2200      	movs	r2, #0
 8001038:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 800103c:	481b      	ldr	r0, [pc, #108]	@ (80010ac <MX_GPIO_Init+0xfc>)
 800103e:	f001 fa05 	bl	800244c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	2140      	movs	r1, #64	@ 0x40
 8001046:	481a      	ldr	r0, [pc, #104]	@ (80010b0 <MX_GPIO_Init+0x100>)
 8001048:	f001 fa00 	bl	800244c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_12;
 800104c:	f243 030c 	movw	r3, #12300	@ 0x300c
 8001050:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001052:	2300      	movs	r3, #0
 8001054:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	4619      	mov	r1, r3
 8001060:	4812      	ldr	r0, [pc, #72]	@ (80010ac <MX_GPIO_Init+0xfc>)
 8001062:	f001 f857 	bl	8002114 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001066:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800106a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106c:	2301      	movs	r3, #1
 800106e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	2300      	movs	r3, #0
 8001076:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	4619      	mov	r1, r3
 800107e:	480b      	ldr	r0, [pc, #44]	@ (80010ac <MX_GPIO_Init+0xfc>)
 8001080:	f001 f848 	bl	8002114 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001084:	2340      	movs	r3, #64	@ 0x40
 8001086:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001088:	2301      	movs	r3, #1
 800108a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001090:	2300      	movs	r3, #0
 8001092:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	4619      	mov	r1, r3
 800109a:	4805      	ldr	r0, [pc, #20]	@ (80010b0 <MX_GPIO_Init+0x100>)
 800109c:	f001 f83a 	bl	8002114 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010a0:	bf00      	nop
 80010a2:	3728      	adds	r7, #40	@ 0x28
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40020800 	.word	0x40020800
 80010b0:	40020400 	.word	0x40020400

080010b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b8:	b672      	cpsid	i
}
 80010ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010bc:	bf00      	nop
 80010be:	e7fd      	b.n	80010bc <Error_Handler+0x8>

080010c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	4b10      	ldr	r3, [pc, #64]	@ (800110c <HAL_MspInit+0x4c>)
 80010cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ce:	4a0f      	ldr	r2, [pc, #60]	@ (800110c <HAL_MspInit+0x4c>)
 80010d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80010d6:	4b0d      	ldr	r3, [pc, #52]	@ (800110c <HAL_MspInit+0x4c>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	603b      	str	r3, [r7, #0]
 80010e6:	4b09      	ldr	r3, [pc, #36]	@ (800110c <HAL_MspInit+0x4c>)
 80010e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ea:	4a08      	ldr	r2, [pc, #32]	@ (800110c <HAL_MspInit+0x4c>)
 80010ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80010f2:	4b06      	ldr	r3, [pc, #24]	@ (800110c <HAL_MspInit+0x4c>)
 80010f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010fa:	603b      	str	r3, [r7, #0]
 80010fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80010fe:	2007      	movs	r0, #7
 8001100:	f000 fbc4 	bl	800188c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001104:	bf00      	nop
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40023800 	.word	0x40023800

08001110 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08a      	sub	sp, #40	@ 0x28
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a30      	ldr	r2, [pc, #192]	@ (80011f0 <HAL_SPI_MspInit+0xe0>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d159      	bne.n	80011e6 <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	613b      	str	r3, [r7, #16]
 8001136:	4b2f      	ldr	r3, [pc, #188]	@ (80011f4 <HAL_SPI_MspInit+0xe4>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113a:	4a2e      	ldr	r2, [pc, #184]	@ (80011f4 <HAL_SPI_MspInit+0xe4>)
 800113c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001140:	6453      	str	r3, [r2, #68]	@ 0x44
 8001142:	4b2c      	ldr	r3, [pc, #176]	@ (80011f4 <HAL_SPI_MspInit+0xe4>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001146:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800114a:	613b      	str	r3, [r7, #16]
 800114c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	4b28      	ldr	r3, [pc, #160]	@ (80011f4 <HAL_SPI_MspInit+0xe4>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001156:	4a27      	ldr	r2, [pc, #156]	@ (80011f4 <HAL_SPI_MspInit+0xe4>)
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	6313      	str	r3, [r2, #48]	@ 0x30
 800115e:	4b25      	ldr	r3, [pc, #148]	@ (80011f4 <HAL_SPI_MspInit+0xe4>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800116a:	23a0      	movs	r3, #160	@ 0xa0
 800116c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116e:	2302      	movs	r3, #2
 8001170:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001176:	2303      	movs	r3, #3
 8001178:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800117a:	2305      	movs	r3, #5
 800117c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	4619      	mov	r1, r3
 8001184:	481c      	ldr	r0, [pc, #112]	@ (80011f8 <HAL_SPI_MspInit+0xe8>)
 8001186:	f000 ffc5 	bl	8002114 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800118a:	4b1c      	ldr	r3, [pc, #112]	@ (80011fc <HAL_SPI_MspInit+0xec>)
 800118c:	4a1c      	ldr	r2, [pc, #112]	@ (8001200 <HAL_SPI_MspInit+0xf0>)
 800118e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001190:	4b1a      	ldr	r3, [pc, #104]	@ (80011fc <HAL_SPI_MspInit+0xec>)
 8001192:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001196:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001198:	4b18      	ldr	r3, [pc, #96]	@ (80011fc <HAL_SPI_MspInit+0xec>)
 800119a:	2240      	movs	r2, #64	@ 0x40
 800119c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800119e:	4b17      	ldr	r3, [pc, #92]	@ (80011fc <HAL_SPI_MspInit+0xec>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011a4:	4b15      	ldr	r3, [pc, #84]	@ (80011fc <HAL_SPI_MspInit+0xec>)
 80011a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011aa:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011ac:	4b13      	ldr	r3, [pc, #76]	@ (80011fc <HAL_SPI_MspInit+0xec>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011b2:	4b12      	ldr	r3, [pc, #72]	@ (80011fc <HAL_SPI_MspInit+0xec>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80011b8:	4b10      	ldr	r3, [pc, #64]	@ (80011fc <HAL_SPI_MspInit+0xec>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011be:	4b0f      	ldr	r3, [pc, #60]	@ (80011fc <HAL_SPI_MspInit+0xec>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011c4:	4b0d      	ldr	r3, [pc, #52]	@ (80011fc <HAL_SPI_MspInit+0xec>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80011ca:	480c      	ldr	r0, [pc, #48]	@ (80011fc <HAL_SPI_MspInit+0xec>)
 80011cc:	f000 fba0 	bl	8001910 <HAL_DMA_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 80011d6:	f7ff ff6d 	bl	80010b4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a07      	ldr	r2, [pc, #28]	@ (80011fc <HAL_SPI_MspInit+0xec>)
 80011de:	649a      	str	r2, [r3, #72]	@ 0x48
 80011e0:	4a06      	ldr	r2, [pc, #24]	@ (80011fc <HAL_SPI_MspInit+0xec>)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80011e6:	bf00      	nop
 80011e8:	3728      	adds	r7, #40	@ 0x28
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40013000 	.word	0x40013000
 80011f4:	40023800 	.word	0x40023800
 80011f8:	40020000 	.word	0x40020000
 80011fc:	200001a0 	.word	0x200001a0
 8001200:	40026458 	.word	0x40026458

08001204 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a34      	ldr	r2, [pc, #208]	@ (80012e4 <HAL_TIM_Base_MspInit+0xe0>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d116      	bne.n	8001244 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	617b      	str	r3, [r7, #20]
 800121a:	4b33      	ldr	r3, [pc, #204]	@ (80012e8 <HAL_TIM_Base_MspInit+0xe4>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800121e:	4a32      	ldr	r2, [pc, #200]	@ (80012e8 <HAL_TIM_Base_MspInit+0xe4>)
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	6453      	str	r3, [r2, #68]	@ 0x44
 8001226:	4b30      	ldr	r3, [pc, #192]	@ (80012e8 <HAL_TIM_Base_MspInit+0xe4>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	617b      	str	r3, [r7, #20]
 8001230:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2100      	movs	r1, #0
 8001236:	2019      	movs	r0, #25
 8001238:	f000 fb33 	bl	80018a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800123c:	2019      	movs	r0, #25
 800123e:	f000 fb4c 	bl	80018da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001242:	e04a      	b.n	80012da <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM2)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800124c:	d10e      	bne.n	800126c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	613b      	str	r3, [r7, #16]
 8001252:	4b25      	ldr	r3, [pc, #148]	@ (80012e8 <HAL_TIM_Base_MspInit+0xe4>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001256:	4a24      	ldr	r2, [pc, #144]	@ (80012e8 <HAL_TIM_Base_MspInit+0xe4>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	6413      	str	r3, [r2, #64]	@ 0x40
 800125e:	4b22      	ldr	r3, [pc, #136]	@ (80012e8 <HAL_TIM_Base_MspInit+0xe4>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	613b      	str	r3, [r7, #16]
 8001268:	693b      	ldr	r3, [r7, #16]
}
 800126a:	e036      	b.n	80012da <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM3)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a1e      	ldr	r2, [pc, #120]	@ (80012ec <HAL_TIM_Base_MspInit+0xe8>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d116      	bne.n	80012a4 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	4b1b      	ldr	r3, [pc, #108]	@ (80012e8 <HAL_TIM_Base_MspInit+0xe4>)
 800127c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127e:	4a1a      	ldr	r2, [pc, #104]	@ (80012e8 <HAL_TIM_Base_MspInit+0xe4>)
 8001280:	f043 0302 	orr.w	r3, r3, #2
 8001284:	6413      	str	r3, [r2, #64]	@ 0x40
 8001286:	4b18      	ldr	r3, [pc, #96]	@ (80012e8 <HAL_TIM_Base_MspInit+0xe4>)
 8001288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	2100      	movs	r1, #0
 8001296:	201d      	movs	r0, #29
 8001298:	f000 fb03 	bl	80018a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800129c:	201d      	movs	r0, #29
 800129e:	f000 fb1c 	bl	80018da <HAL_NVIC_EnableIRQ>
}
 80012a2:	e01a      	b.n	80012da <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM10)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a11      	ldr	r2, [pc, #68]	@ (80012f0 <HAL_TIM_Base_MspInit+0xec>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d115      	bne.n	80012da <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	4b0d      	ldr	r3, [pc, #52]	@ (80012e8 <HAL_TIM_Base_MspInit+0xe4>)
 80012b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012b6:	4a0c      	ldr	r2, [pc, #48]	@ (80012e8 <HAL_TIM_Base_MspInit+0xe4>)
 80012b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80012be:	4b0a      	ldr	r3, [pc, #40]	@ (80012e8 <HAL_TIM_Base_MspInit+0xe4>)
 80012c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80012ca:	2200      	movs	r2, #0
 80012cc:	2100      	movs	r1, #0
 80012ce:	2019      	movs	r0, #25
 80012d0:	f000 fae7 	bl	80018a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80012d4:	2019      	movs	r0, #25
 80012d6:	f000 fb00 	bl	80018da <HAL_NVIC_EnableIRQ>
}
 80012da:	bf00      	nop
 80012dc:	3718      	adds	r7, #24
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40010000 	.word	0x40010000
 80012e8:	40023800 	.word	0x40023800
 80012ec:	40000400 	.word	0x40000400
 80012f0:	40014400 	.word	0x40014400

080012f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b088      	sub	sp, #32
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	f107 030c 	add.w	r3, r7, #12
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001314:	d11e      	bne.n	8001354 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	60bb      	str	r3, [r7, #8]
 800131a:	4b10      	ldr	r3, [pc, #64]	@ (800135c <HAL_TIM_MspPostInit+0x68>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131e:	4a0f      	ldr	r2, [pc, #60]	@ (800135c <HAL_TIM_MspPostInit+0x68>)
 8001320:	f043 0302 	orr.w	r3, r3, #2
 8001324:	6313      	str	r3, [r2, #48]	@ 0x30
 8001326:	4b0d      	ldr	r3, [pc, #52]	@ (800135c <HAL_TIM_MspPostInit+0x68>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	60bb      	str	r3, [r7, #8]
 8001330:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001332:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001336:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001338:	2302      	movs	r3, #2
 800133a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001340:	2300      	movs	r3, #0
 8001342:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001344:	2301      	movs	r3, #1
 8001346:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001348:	f107 030c 	add.w	r3, r7, #12
 800134c:	4619      	mov	r1, r3
 800134e:	4804      	ldr	r0, [pc, #16]	@ (8001360 <HAL_TIM_MspPostInit+0x6c>)
 8001350:	f000 fee0 	bl	8002114 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001354:	bf00      	nop
 8001356:	3720      	adds	r7, #32
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40023800 	.word	0x40023800
 8001360:	40020400 	.word	0x40020400

08001364 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08c      	sub	sp, #48	@ 0x30
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136c:	f107 031c 	add.w	r3, r7, #28
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a36      	ldr	r2, [pc, #216]	@ (800145c <HAL_UART_MspInit+0xf8>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d135      	bne.n	80013f2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	61bb      	str	r3, [r7, #24]
 800138a:	4b35      	ldr	r3, [pc, #212]	@ (8001460 <HAL_UART_MspInit+0xfc>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800138e:	4a34      	ldr	r2, [pc, #208]	@ (8001460 <HAL_UART_MspInit+0xfc>)
 8001390:	f043 0310 	orr.w	r3, r3, #16
 8001394:	6453      	str	r3, [r2, #68]	@ 0x44
 8001396:	4b32      	ldr	r3, [pc, #200]	@ (8001460 <HAL_UART_MspInit+0xfc>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800139a:	f003 0310 	and.w	r3, r3, #16
 800139e:	61bb      	str	r3, [r7, #24]
 80013a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
 80013a6:	4b2e      	ldr	r3, [pc, #184]	@ (8001460 <HAL_UART_MspInit+0xfc>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013aa:	4a2d      	ldr	r2, [pc, #180]	@ (8001460 <HAL_UART_MspInit+0xfc>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001460 <HAL_UART_MspInit+0xfc>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	617b      	str	r3, [r7, #20]
 80013bc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80013be:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80013c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c4:	2302      	movs	r3, #2
 80013c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013cc:	2303      	movs	r3, #3
 80013ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013d0:	2307      	movs	r3, #7
 80013d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d4:	f107 031c 	add.w	r3, r7, #28
 80013d8:	4619      	mov	r1, r3
 80013da:	4822      	ldr	r0, [pc, #136]	@ (8001464 <HAL_UART_MspInit+0x100>)
 80013dc:	f000 fe9a 	bl	8002114 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80013e0:	2200      	movs	r2, #0
 80013e2:	2100      	movs	r1, #0
 80013e4:	2025      	movs	r0, #37	@ 0x25
 80013e6:	f000 fa5c 	bl	80018a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80013ea:	2025      	movs	r0, #37	@ 0x25
 80013ec:	f000 fa75 	bl	80018da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013f0:	e030      	b.n	8001454 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a1c      	ldr	r2, [pc, #112]	@ (8001468 <HAL_UART_MspInit+0x104>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d12b      	bne.n	8001454 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80013fc:	2300      	movs	r3, #0
 80013fe:	613b      	str	r3, [r7, #16]
 8001400:	4b17      	ldr	r3, [pc, #92]	@ (8001460 <HAL_UART_MspInit+0xfc>)
 8001402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001404:	4a16      	ldr	r2, [pc, #88]	@ (8001460 <HAL_UART_MspInit+0xfc>)
 8001406:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800140a:	6413      	str	r3, [r2, #64]	@ 0x40
 800140c:	4b14      	ldr	r3, [pc, #80]	@ (8001460 <HAL_UART_MspInit+0xfc>)
 800140e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001410:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001414:	613b      	str	r3, [r7, #16]
 8001416:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001418:	2300      	movs	r3, #0
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	4b10      	ldr	r3, [pc, #64]	@ (8001460 <HAL_UART_MspInit+0xfc>)
 800141e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001420:	4a0f      	ldr	r2, [pc, #60]	@ (8001460 <HAL_UART_MspInit+0xfc>)
 8001422:	f043 0301 	orr.w	r3, r3, #1
 8001426:	6313      	str	r3, [r2, #48]	@ 0x30
 8001428:	4b0d      	ldr	r3, [pc, #52]	@ (8001460 <HAL_UART_MspInit+0xfc>)
 800142a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001434:	230c      	movs	r3, #12
 8001436:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001438:	2302      	movs	r3, #2
 800143a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001440:	2300      	movs	r3, #0
 8001442:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001444:	2307      	movs	r3, #7
 8001446:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001448:	f107 031c 	add.w	r3, r7, #28
 800144c:	4619      	mov	r1, r3
 800144e:	4805      	ldr	r0, [pc, #20]	@ (8001464 <HAL_UART_MspInit+0x100>)
 8001450:	f000 fe60 	bl	8002114 <HAL_GPIO_Init>
}
 8001454:	bf00      	nop
 8001456:	3730      	adds	r7, #48	@ 0x30
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40011000 	.word	0x40011000
 8001460:	40023800 	.word	0x40023800
 8001464:	40020000 	.word	0x40020000
 8001468:	40004400 	.word	0x40004400

0800146c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001470:	bf00      	nop
 8001472:	e7fd      	b.n	8001470 <NMI_Handler+0x4>

08001474 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001478:	bf00      	nop
 800147a:	e7fd      	b.n	8001478 <HardFault_Handler+0x4>

0800147c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001480:	bf00      	nop
 8001482:	e7fd      	b.n	8001480 <MemManage_Handler+0x4>

08001484 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001488:	bf00      	nop
 800148a:	e7fd      	b.n	8001488 <BusFault_Handler+0x4>

0800148c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001490:	bf00      	nop
 8001492:	e7fd      	b.n	8001490 <UsageFault_Handler+0x4>

08001494 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014c2:	f000 f8f3 	bl	80016ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
	...

080014cc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014d0:	4803      	ldr	r0, [pc, #12]	@ (80014e0 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80014d2:	f002 f961 	bl	8003798 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80014d6:	4803      	ldr	r0, [pc, #12]	@ (80014e4 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80014d8:	f002 f95e 	bl	8003798 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20000200 	.word	0x20000200
 80014e4:	200002d8 	.word	0x200002d8

080014e8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80014ec:	4802      	ldr	r0, [pc, #8]	@ (80014f8 <TIM3_IRQHandler+0x10>)
 80014ee:	f002 f953 	bl	8003798 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000290 	.word	0x20000290

080014fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001500:	4802      	ldr	r0, [pc, #8]	@ (800150c <USART1_IRQHandler+0x10>)
 8001502:	f003 f845 	bl	8004590 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000320 	.word	0x20000320

08001510 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001514:	4802      	ldr	r0, [pc, #8]	@ (8001520 <DMA2_Stream3_IRQHandler+0x10>)
 8001516:	f000 fb93 	bl	8001c40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	200001a0 	.word	0x200001a0

08001524 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800152c:	4a14      	ldr	r2, [pc, #80]	@ (8001580 <_sbrk+0x5c>)
 800152e:	4b15      	ldr	r3, [pc, #84]	@ (8001584 <_sbrk+0x60>)
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001538:	4b13      	ldr	r3, [pc, #76]	@ (8001588 <_sbrk+0x64>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d102      	bne.n	8001546 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001540:	4b11      	ldr	r3, [pc, #68]	@ (8001588 <_sbrk+0x64>)
 8001542:	4a12      	ldr	r2, [pc, #72]	@ (800158c <_sbrk+0x68>)
 8001544:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001546:	4b10      	ldr	r3, [pc, #64]	@ (8001588 <_sbrk+0x64>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4413      	add	r3, r2
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	429a      	cmp	r2, r3
 8001552:	d207      	bcs.n	8001564 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001554:	f003 ffae 	bl	80054b4 <__errno>
 8001558:	4603      	mov	r3, r0
 800155a:	220c      	movs	r2, #12
 800155c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800155e:	f04f 33ff 	mov.w	r3, #4294967295
 8001562:	e009      	b.n	8001578 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001564:	4b08      	ldr	r3, [pc, #32]	@ (8001588 <_sbrk+0x64>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800156a:	4b07      	ldr	r3, [pc, #28]	@ (8001588 <_sbrk+0x64>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4413      	add	r3, r2
 8001572:	4a05      	ldr	r2, [pc, #20]	@ (8001588 <_sbrk+0x64>)
 8001574:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001576:	68fb      	ldr	r3, [r7, #12]
}
 8001578:	4618      	mov	r0, r3
 800157a:	3718      	adds	r7, #24
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20018000 	.word	0x20018000
 8001584:	00000400 	.word	0x00000400
 8001588:	20000818 	.word	0x20000818
 800158c:	20000968 	.word	0x20000968

08001590 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001594:	4b06      	ldr	r3, [pc, #24]	@ (80015b0 <SystemInit+0x20>)
 8001596:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800159a:	4a05      	ldr	r2, [pc, #20]	@ (80015b0 <SystemInit+0x20>)
 800159c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80015b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015ec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80015b8:	f7ff ffea 	bl	8001590 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015bc:	480c      	ldr	r0, [pc, #48]	@ (80015f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015be:	490d      	ldr	r1, [pc, #52]	@ (80015f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015c0:	4a0d      	ldr	r2, [pc, #52]	@ (80015f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015c4:	e002      	b.n	80015cc <LoopCopyDataInit>

080015c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ca:	3304      	adds	r3, #4

080015cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d0:	d3f9      	bcc.n	80015c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015d2:	4a0a      	ldr	r2, [pc, #40]	@ (80015fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001600 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015d8:	e001      	b.n	80015de <LoopFillZerobss>

080015da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015dc:	3204      	adds	r2, #4

080015de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e0:	d3fb      	bcc.n	80015da <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80015e2:	f003 ff6d 	bl	80054c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015e6:	f7ff fa2b 	bl	8000a40 <main>
  bx  lr    
 80015ea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80015ec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80015f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015f4:	2000012c 	.word	0x2000012c
  ldr r2, =_sidata
 80015f8:	08005e70 	.word	0x08005e70
  ldr r2, =_sbss
 80015fc:	2000012c 	.word	0x2000012c
  ldr r4, =_ebss
 8001600:	20000968 	.word	0x20000968

08001604 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001604:	e7fe      	b.n	8001604 <ADC_IRQHandler>
	...

08001608 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800160c:	4b0e      	ldr	r3, [pc, #56]	@ (8001648 <HAL_Init+0x40>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a0d      	ldr	r2, [pc, #52]	@ (8001648 <HAL_Init+0x40>)
 8001612:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001616:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001618:	4b0b      	ldr	r3, [pc, #44]	@ (8001648 <HAL_Init+0x40>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a0a      	ldr	r2, [pc, #40]	@ (8001648 <HAL_Init+0x40>)
 800161e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001622:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001624:	4b08      	ldr	r3, [pc, #32]	@ (8001648 <HAL_Init+0x40>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a07      	ldr	r2, [pc, #28]	@ (8001648 <HAL_Init+0x40>)
 800162a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800162e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001630:	2003      	movs	r0, #3
 8001632:	f000 f92b 	bl	800188c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001636:	2000      	movs	r0, #0
 8001638:	f000 f808 	bl	800164c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800163c:	f7ff fd40 	bl	80010c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40023c00 	.word	0x40023c00

0800164c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001654:	4b12      	ldr	r3, [pc, #72]	@ (80016a0 <HAL_InitTick+0x54>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4b12      	ldr	r3, [pc, #72]	@ (80016a4 <HAL_InitTick+0x58>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	4619      	mov	r1, r3
 800165e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001662:	fbb3 f3f1 	udiv	r3, r3, r1
 8001666:	fbb2 f3f3 	udiv	r3, r2, r3
 800166a:	4618      	mov	r0, r3
 800166c:	f000 f943 	bl	80018f6 <HAL_SYSTICK_Config>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e00e      	b.n	8001698 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2b0f      	cmp	r3, #15
 800167e:	d80a      	bhi.n	8001696 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001680:	2200      	movs	r2, #0
 8001682:	6879      	ldr	r1, [r7, #4]
 8001684:	f04f 30ff 	mov.w	r0, #4294967295
 8001688:	f000 f90b 	bl	80018a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800168c:	4a06      	ldr	r2, [pc, #24]	@ (80016a8 <HAL_InitTick+0x5c>)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001692:	2300      	movs	r3, #0
 8001694:	e000      	b.n	8001698 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
}
 8001698:	4618      	mov	r0, r3
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	200000d0 	.word	0x200000d0
 80016a4:	200000d8 	.word	0x200000d8
 80016a8:	200000d4 	.word	0x200000d4

080016ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016b0:	4b06      	ldr	r3, [pc, #24]	@ (80016cc <HAL_IncTick+0x20>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	461a      	mov	r2, r3
 80016b6:	4b06      	ldr	r3, [pc, #24]	@ (80016d0 <HAL_IncTick+0x24>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4413      	add	r3, r2
 80016bc:	4a04      	ldr	r2, [pc, #16]	@ (80016d0 <HAL_IncTick+0x24>)
 80016be:	6013      	str	r3, [r2, #0]
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	200000d8 	.word	0x200000d8
 80016d0:	2000081c 	.word	0x2000081c

080016d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  return uwTick;
 80016d8:	4b03      	ldr	r3, [pc, #12]	@ (80016e8 <HAL_GetTick+0x14>)
 80016da:	681b      	ldr	r3, [r3, #0]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	2000081c 	.word	0x2000081c

080016ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001730 <__NVIC_SetPriorityGrouping+0x44>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001702:	68ba      	ldr	r2, [r7, #8]
 8001704:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001708:	4013      	ands	r3, r2
 800170a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001714:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001718:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800171c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800171e:	4a04      	ldr	r2, [pc, #16]	@ (8001730 <__NVIC_SetPriorityGrouping+0x44>)
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	60d3      	str	r3, [r2, #12]
}
 8001724:	bf00      	nop
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001738:	4b04      	ldr	r3, [pc, #16]	@ (800174c <__NVIC_GetPriorityGrouping+0x18>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	0a1b      	lsrs	r3, r3, #8
 800173e:	f003 0307 	and.w	r3, r3, #7
}
 8001742:	4618      	mov	r0, r3
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	2b00      	cmp	r3, #0
 8001760:	db0b      	blt.n	800177a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	f003 021f 	and.w	r2, r3, #31
 8001768:	4907      	ldr	r1, [pc, #28]	@ (8001788 <__NVIC_EnableIRQ+0x38>)
 800176a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176e:	095b      	lsrs	r3, r3, #5
 8001770:	2001      	movs	r0, #1
 8001772:	fa00 f202 	lsl.w	r2, r0, r2
 8001776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800177a:	bf00      	nop
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	e000e100 	.word	0xe000e100

0800178c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	6039      	str	r1, [r7, #0]
 8001796:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179c:	2b00      	cmp	r3, #0
 800179e:	db0a      	blt.n	80017b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	490c      	ldr	r1, [pc, #48]	@ (80017d8 <__NVIC_SetPriority+0x4c>)
 80017a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017aa:	0112      	lsls	r2, r2, #4
 80017ac:	b2d2      	uxtb	r2, r2
 80017ae:	440b      	add	r3, r1
 80017b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017b4:	e00a      	b.n	80017cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	4908      	ldr	r1, [pc, #32]	@ (80017dc <__NVIC_SetPriority+0x50>)
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	f003 030f 	and.w	r3, r3, #15
 80017c2:	3b04      	subs	r3, #4
 80017c4:	0112      	lsls	r2, r2, #4
 80017c6:	b2d2      	uxtb	r2, r2
 80017c8:	440b      	add	r3, r1
 80017ca:	761a      	strb	r2, [r3, #24]
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	e000e100 	.word	0xe000e100
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b089      	sub	sp, #36	@ 0x24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	f1c3 0307 	rsb	r3, r3, #7
 80017fa:	2b04      	cmp	r3, #4
 80017fc:	bf28      	it	cs
 80017fe:	2304      	movcs	r3, #4
 8001800:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	3304      	adds	r3, #4
 8001806:	2b06      	cmp	r3, #6
 8001808:	d902      	bls.n	8001810 <NVIC_EncodePriority+0x30>
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	3b03      	subs	r3, #3
 800180e:	e000      	b.n	8001812 <NVIC_EncodePriority+0x32>
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001814:	f04f 32ff 	mov.w	r2, #4294967295
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43da      	mvns	r2, r3
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	401a      	ands	r2, r3
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001828:	f04f 31ff 	mov.w	r1, #4294967295
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	fa01 f303 	lsl.w	r3, r1, r3
 8001832:	43d9      	mvns	r1, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001838:	4313      	orrs	r3, r2
         );
}
 800183a:	4618      	mov	r0, r3
 800183c:	3724      	adds	r7, #36	@ 0x24
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
	...

08001848 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3b01      	subs	r3, #1
 8001854:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001858:	d301      	bcc.n	800185e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800185a:	2301      	movs	r3, #1
 800185c:	e00f      	b.n	800187e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800185e:	4a0a      	ldr	r2, [pc, #40]	@ (8001888 <SysTick_Config+0x40>)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3b01      	subs	r3, #1
 8001864:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001866:	210f      	movs	r1, #15
 8001868:	f04f 30ff 	mov.w	r0, #4294967295
 800186c:	f7ff ff8e 	bl	800178c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001870:	4b05      	ldr	r3, [pc, #20]	@ (8001888 <SysTick_Config+0x40>)
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001876:	4b04      	ldr	r3, [pc, #16]	@ (8001888 <SysTick_Config+0x40>)
 8001878:	2207      	movs	r2, #7
 800187a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	e000e010 	.word	0xe000e010

0800188c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f7ff ff29 	bl	80016ec <__NVIC_SetPriorityGrouping>
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b086      	sub	sp, #24
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	4603      	mov	r3, r0
 80018aa:	60b9      	str	r1, [r7, #8]
 80018ac:	607a      	str	r2, [r7, #4]
 80018ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018b4:	f7ff ff3e 	bl	8001734 <__NVIC_GetPriorityGrouping>
 80018b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	68b9      	ldr	r1, [r7, #8]
 80018be:	6978      	ldr	r0, [r7, #20]
 80018c0:	f7ff ff8e 	bl	80017e0 <NVIC_EncodePriority>
 80018c4:	4602      	mov	r2, r0
 80018c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ca:	4611      	mov	r1, r2
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff ff5d 	bl	800178c <__NVIC_SetPriority>
}
 80018d2:	bf00      	nop
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
 80018e0:	4603      	mov	r3, r0
 80018e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff ff31 	bl	8001750 <__NVIC_EnableIRQ>
}
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b082      	sub	sp, #8
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff ffa2 	bl	8001848 <SysTick_Config>
 8001904:	4603      	mov	r3, r0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
	...

08001910 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800191c:	f7ff feda 	bl	80016d4 <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d101      	bne.n	800192c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e099      	b.n	8001a60 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2202      	movs	r2, #2
 8001930:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f022 0201 	bic.w	r2, r2, #1
 800194a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800194c:	e00f      	b.n	800196e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800194e:	f7ff fec1 	bl	80016d4 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b05      	cmp	r3, #5
 800195a:	d908      	bls.n	800196e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2220      	movs	r2, #32
 8001960:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2203      	movs	r2, #3
 8001966:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e078      	b.n	8001a60 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1e8      	bne.n	800194e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001984:	697a      	ldr	r2, [r7, #20]
 8001986:	4b38      	ldr	r3, [pc, #224]	@ (8001a68 <HAL_DMA_Init+0x158>)
 8001988:	4013      	ands	r3, r2
 800198a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685a      	ldr	r2, [r3, #4]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800199a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	691b      	ldr	r3, [r3, #16]
 80019a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a1b      	ldr	r3, [r3, #32]
 80019b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019ba:	697a      	ldr	r2, [r7, #20]
 80019bc:	4313      	orrs	r3, r2
 80019be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c4:	2b04      	cmp	r3, #4
 80019c6:	d107      	bne.n	80019d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d0:	4313      	orrs	r3, r2
 80019d2:	697a      	ldr	r2, [r7, #20]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	697a      	ldr	r2, [r7, #20]
 80019de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	f023 0307 	bic.w	r3, r3, #7
 80019ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f4:	697a      	ldr	r2, [r7, #20]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019fe:	2b04      	cmp	r3, #4
 8001a00:	d117      	bne.n	8001a32 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a06:	697a      	ldr	r2, [r7, #20]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d00e      	beq.n	8001a32 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 fb01 	bl	800201c <DMA_CheckFifoParam>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d008      	beq.n	8001a32 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2240      	movs	r2, #64	@ 0x40
 8001a24:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e016      	b.n	8001a60 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	697a      	ldr	r2, [r7, #20]
 8001a38:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f000 fab8 	bl	8001fb0 <DMA_CalcBaseAndBitshift>
 8001a40:	4603      	mov	r3, r0
 8001a42:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a48:	223f      	movs	r2, #63	@ 0x3f
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3718      	adds	r7, #24
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	f010803f 	.word	0xf010803f

08001a6c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
 8001a78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a82:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d101      	bne.n	8001a92 <HAL_DMA_Start_IT+0x26>
 8001a8e:	2302      	movs	r3, #2
 8001a90:	e040      	b.n	8001b14 <HAL_DMA_Start_IT+0xa8>
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2201      	movs	r2, #1
 8001a96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d12f      	bne.n	8001b06 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2202      	movs	r2, #2
 8001aaa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	68b9      	ldr	r1, [r7, #8]
 8001aba:	68f8      	ldr	r0, [r7, #12]
 8001abc:	f000 fa4a 	bl	8001f54 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ac4:	223f      	movs	r2, #63	@ 0x3f
 8001ac6:	409a      	lsls	r2, r3
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f042 0216 	orr.w	r2, r2, #22
 8001ada:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d007      	beq.n	8001af4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f042 0208 	orr.w	r2, r2, #8
 8001af2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f042 0201 	orr.w	r2, r2, #1
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	e005      	b.n	8001b12 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b12:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3718      	adds	r7, #24
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b28:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b2a:	f7ff fdd3 	bl	80016d4 <HAL_GetTick>
 8001b2e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d008      	beq.n	8001b4e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2280      	movs	r2, #128	@ 0x80
 8001b40:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e052      	b.n	8001bf4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f022 0216 	bic.w	r2, r2, #22
 8001b5c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	695a      	ldr	r2, [r3, #20]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b6c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d103      	bne.n	8001b7e <HAL_DMA_Abort+0x62>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d007      	beq.n	8001b8e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f022 0208 	bic.w	r2, r2, #8
 8001b8c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f022 0201 	bic.w	r2, r2, #1
 8001b9c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b9e:	e013      	b.n	8001bc8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ba0:	f7ff fd98 	bl	80016d4 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b05      	cmp	r3, #5
 8001bac:	d90c      	bls.n	8001bc8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2220      	movs	r2, #32
 8001bb2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2203      	movs	r2, #3
 8001bb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e015      	b.n	8001bf4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1e4      	bne.n	8001ba0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bda:	223f      	movs	r2, #63	@ 0x3f
 8001bdc:	409a      	lsls	r2, r3
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2201      	movs	r2, #1
 8001be6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d004      	beq.n	8001c1a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2280      	movs	r2, #128	@ 0x80
 8001c14:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e00c      	b.n	8001c34 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2205      	movs	r2, #5
 8001c1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f022 0201 	bic.w	r2, r2, #1
 8001c30:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c4c:	4b8e      	ldr	r3, [pc, #568]	@ (8001e88 <HAL_DMA_IRQHandler+0x248>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a8e      	ldr	r2, [pc, #568]	@ (8001e8c <HAL_DMA_IRQHandler+0x24c>)
 8001c52:	fba2 2303 	umull	r2, r3, r2, r3
 8001c56:	0a9b      	lsrs	r3, r3, #10
 8001c58:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c5e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c6a:	2208      	movs	r2, #8
 8001c6c:	409a      	lsls	r2, r3
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	4013      	ands	r3, r2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d01a      	beq.n	8001cac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0304 	and.w	r3, r3, #4
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d013      	beq.n	8001cac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f022 0204 	bic.w	r2, r2, #4
 8001c92:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c98:	2208      	movs	r2, #8
 8001c9a:	409a      	lsls	r2, r3
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ca4:	f043 0201 	orr.w	r2, r3, #1
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	409a      	lsls	r2, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d012      	beq.n	8001ce2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	695b      	ldr	r3, [r3, #20]
 8001cc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d00b      	beq.n	8001ce2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cce:	2201      	movs	r2, #1
 8001cd0:	409a      	lsls	r2, r3
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cda:	f043 0202 	orr.w	r2, r3, #2
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ce6:	2204      	movs	r2, #4
 8001ce8:	409a      	lsls	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	4013      	ands	r3, r2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d012      	beq.n	8001d18 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d00b      	beq.n	8001d18 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d04:	2204      	movs	r2, #4
 8001d06:	409a      	lsls	r2, r3
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d10:	f043 0204 	orr.w	r2, r3, #4
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d1c:	2210      	movs	r2, #16
 8001d1e:	409a      	lsls	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	4013      	ands	r3, r2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d043      	beq.n	8001db0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0308 	and.w	r3, r3, #8
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d03c      	beq.n	8001db0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d3a:	2210      	movs	r2, #16
 8001d3c:	409a      	lsls	r2, r3
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d018      	beq.n	8001d82 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d108      	bne.n	8001d70 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d024      	beq.n	8001db0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	4798      	blx	r3
 8001d6e:	e01f      	b.n	8001db0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d01b      	beq.n	8001db0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	4798      	blx	r3
 8001d80:	e016      	b.n	8001db0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d107      	bne.n	8001da0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f022 0208 	bic.w	r2, r2, #8
 8001d9e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d003      	beq.n	8001db0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001db4:	2220      	movs	r2, #32
 8001db6:	409a      	lsls	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	f000 808f 	beq.w	8001ee0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0310 	and.w	r3, r3, #16
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f000 8087 	beq.w	8001ee0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dd6:	2220      	movs	r2, #32
 8001dd8:	409a      	lsls	r2, r3
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b05      	cmp	r3, #5
 8001de8:	d136      	bne.n	8001e58 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f022 0216 	bic.w	r2, r2, #22
 8001df8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	695a      	ldr	r2, [r3, #20]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e08:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d103      	bne.n	8001e1a <HAL_DMA_IRQHandler+0x1da>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d007      	beq.n	8001e2a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f022 0208 	bic.w	r2, r2, #8
 8001e28:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e2e:	223f      	movs	r2, #63	@ 0x3f
 8001e30:	409a      	lsls	r2, r3
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d07e      	beq.n	8001f4c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	4798      	blx	r3
        }
        return;
 8001e56:	e079      	b.n	8001f4c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d01d      	beq.n	8001ea2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d10d      	bne.n	8001e90 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d031      	beq.n	8001ee0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	4798      	blx	r3
 8001e84:	e02c      	b.n	8001ee0 <HAL_DMA_IRQHandler+0x2a0>
 8001e86:	bf00      	nop
 8001e88:	200000d0 	.word	0x200000d0
 8001e8c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d023      	beq.n	8001ee0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	4798      	blx	r3
 8001ea0:	e01e      	b.n	8001ee0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d10f      	bne.n	8001ed0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f022 0210 	bic.w	r2, r2, #16
 8001ebe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d003      	beq.n	8001ee0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d032      	beq.n	8001f4e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d022      	beq.n	8001f3a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2205      	movs	r2, #5
 8001ef8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f022 0201 	bic.w	r2, r2, #1
 8001f0a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	60bb      	str	r3, [r7, #8]
 8001f12:	697a      	ldr	r2, [r7, #20]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d307      	bcc.n	8001f28 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1f2      	bne.n	8001f0c <HAL_DMA_IRQHandler+0x2cc>
 8001f26:	e000      	b.n	8001f2a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001f28:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d005      	beq.n	8001f4e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	4798      	blx	r3
 8001f4a:	e000      	b.n	8001f4e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001f4c:	bf00      	nop
    }
  }
}
 8001f4e:	3718      	adds	r7, #24
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
 8001f60:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001f70:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	683a      	ldr	r2, [r7, #0]
 8001f78:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	2b40      	cmp	r3, #64	@ 0x40
 8001f80:	d108      	bne.n	8001f94 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68ba      	ldr	r2, [r7, #8]
 8001f90:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001f92:	e007      	b.n	8001fa4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	68ba      	ldr	r2, [r7, #8]
 8001f9a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	60da      	str	r2, [r3, #12]
}
 8001fa4:	bf00      	nop
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	3b10      	subs	r3, #16
 8001fc0:	4a14      	ldr	r2, [pc, #80]	@ (8002014 <DMA_CalcBaseAndBitshift+0x64>)
 8001fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc6:	091b      	lsrs	r3, r3, #4
 8001fc8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001fca:	4a13      	ldr	r2, [pc, #76]	@ (8002018 <DMA_CalcBaseAndBitshift+0x68>)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4413      	add	r3, r2
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2b03      	cmp	r3, #3
 8001fdc:	d909      	bls.n	8001ff2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001fe6:	f023 0303 	bic.w	r3, r3, #3
 8001fea:	1d1a      	adds	r2, r3, #4
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	659a      	str	r2, [r3, #88]	@ 0x58
 8001ff0:	e007      	b.n	8002002 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001ffa:	f023 0303 	bic.w	r3, r3, #3
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002006:	4618      	mov	r0, r3
 8002008:	3714      	adds	r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	aaaaaaab 	.word	0xaaaaaaab
 8002018:	08005e24 	.word	0x08005e24

0800201c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002024:	2300      	movs	r3, #0
 8002026:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800202c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d11f      	bne.n	8002076 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	2b03      	cmp	r3, #3
 800203a:	d856      	bhi.n	80020ea <DMA_CheckFifoParam+0xce>
 800203c:	a201      	add	r2, pc, #4	@ (adr r2, 8002044 <DMA_CheckFifoParam+0x28>)
 800203e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002042:	bf00      	nop
 8002044:	08002055 	.word	0x08002055
 8002048:	08002067 	.word	0x08002067
 800204c:	08002055 	.word	0x08002055
 8002050:	080020eb 	.word	0x080020eb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002058:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d046      	beq.n	80020ee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002064:	e043      	b.n	80020ee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800206a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800206e:	d140      	bne.n	80020f2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002074:	e03d      	b.n	80020f2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800207e:	d121      	bne.n	80020c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	2b03      	cmp	r3, #3
 8002084:	d837      	bhi.n	80020f6 <DMA_CheckFifoParam+0xda>
 8002086:	a201      	add	r2, pc, #4	@ (adr r2, 800208c <DMA_CheckFifoParam+0x70>)
 8002088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800208c:	0800209d 	.word	0x0800209d
 8002090:	080020a3 	.word	0x080020a3
 8002094:	0800209d 	.word	0x0800209d
 8002098:	080020b5 	.word	0x080020b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	73fb      	strb	r3, [r7, #15]
      break;
 80020a0:	e030      	b.n	8002104 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d025      	beq.n	80020fa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020b2:	e022      	b.n	80020fa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020b8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80020bc:	d11f      	bne.n	80020fe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80020c2:	e01c      	b.n	80020fe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d903      	bls.n	80020d2 <DMA_CheckFifoParam+0xb6>
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	2b03      	cmp	r3, #3
 80020ce:	d003      	beq.n	80020d8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80020d0:	e018      	b.n	8002104 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	73fb      	strb	r3, [r7, #15]
      break;
 80020d6:	e015      	b.n	8002104 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d00e      	beq.n	8002102 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	73fb      	strb	r3, [r7, #15]
      break;
 80020e8:	e00b      	b.n	8002102 <DMA_CheckFifoParam+0xe6>
      break;
 80020ea:	bf00      	nop
 80020ec:	e00a      	b.n	8002104 <DMA_CheckFifoParam+0xe8>
      break;
 80020ee:	bf00      	nop
 80020f0:	e008      	b.n	8002104 <DMA_CheckFifoParam+0xe8>
      break;
 80020f2:	bf00      	nop
 80020f4:	e006      	b.n	8002104 <DMA_CheckFifoParam+0xe8>
      break;
 80020f6:	bf00      	nop
 80020f8:	e004      	b.n	8002104 <DMA_CheckFifoParam+0xe8>
      break;
 80020fa:	bf00      	nop
 80020fc:	e002      	b.n	8002104 <DMA_CheckFifoParam+0xe8>
      break;   
 80020fe:	bf00      	nop
 8002100:	e000      	b.n	8002104 <DMA_CheckFifoParam+0xe8>
      break;
 8002102:	bf00      	nop
    }
  } 
  
  return status; 
 8002104:	7bfb      	ldrb	r3, [r7, #15]
}
 8002106:	4618      	mov	r0, r3
 8002108:	3714      	adds	r7, #20
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop

08002114 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002114:	b480      	push	{r7}
 8002116:	b089      	sub	sp, #36	@ 0x24
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800211e:	2300      	movs	r3, #0
 8002120:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002122:	2300      	movs	r3, #0
 8002124:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002126:	2300      	movs	r3, #0
 8002128:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800212a:	2300      	movs	r3, #0
 800212c:	61fb      	str	r3, [r7, #28]
 800212e:	e159      	b.n	80023e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002130:	2201      	movs	r2, #1
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	697a      	ldr	r2, [r7, #20]
 8002140:	4013      	ands	r3, r2
 8002142:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	429a      	cmp	r2, r3
 800214a:	f040 8148 	bne.w	80023de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	2b01      	cmp	r3, #1
 8002158:	d005      	beq.n	8002166 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002162:	2b02      	cmp	r3, #2
 8002164:	d130      	bne.n	80021c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	2203      	movs	r2, #3
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	43db      	mvns	r3, r3
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4013      	ands	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	68da      	ldr	r2, [r3, #12]
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4313      	orrs	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800219c:	2201      	movs	r2, #1
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	43db      	mvns	r3, r3
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4013      	ands	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	091b      	lsrs	r3, r3, #4
 80021b2:	f003 0201 	and.w	r2, r3, #1
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	4313      	orrs	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f003 0303 	and.w	r3, r3, #3
 80021d0:	2b03      	cmp	r3, #3
 80021d2:	d017      	beq.n	8002204 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	2203      	movs	r2, #3
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	43db      	mvns	r3, r3
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4013      	ands	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 0303 	and.w	r3, r3, #3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d123      	bne.n	8002258 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	08da      	lsrs	r2, r3, #3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3208      	adds	r2, #8
 8002218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800221c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	f003 0307 	and.w	r3, r3, #7
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	220f      	movs	r2, #15
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	43db      	mvns	r3, r3
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4013      	ands	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	691a      	ldr	r2, [r3, #16]
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	f003 0307 	and.w	r3, r3, #7
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4313      	orrs	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	08da      	lsrs	r2, r3, #3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	3208      	adds	r2, #8
 8002252:	69b9      	ldr	r1, [r7, #24]
 8002254:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	2203      	movs	r2, #3
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4013      	ands	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f003 0203 	and.w	r2, r3, #3
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4313      	orrs	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002294:	2b00      	cmp	r3, #0
 8002296:	f000 80a2 	beq.w	80023de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	60fb      	str	r3, [r7, #12]
 800229e:	4b57      	ldr	r3, [pc, #348]	@ (80023fc <HAL_GPIO_Init+0x2e8>)
 80022a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a2:	4a56      	ldr	r2, [pc, #344]	@ (80023fc <HAL_GPIO_Init+0x2e8>)
 80022a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80022aa:	4b54      	ldr	r3, [pc, #336]	@ (80023fc <HAL_GPIO_Init+0x2e8>)
 80022ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022b6:	4a52      	ldr	r2, [pc, #328]	@ (8002400 <HAL_GPIO_Init+0x2ec>)
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	089b      	lsrs	r3, r3, #2
 80022bc:	3302      	adds	r3, #2
 80022be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	f003 0303 	and.w	r3, r3, #3
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	220f      	movs	r2, #15
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43db      	mvns	r3, r3
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4013      	ands	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a49      	ldr	r2, [pc, #292]	@ (8002404 <HAL_GPIO_Init+0x2f0>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d019      	beq.n	8002316 <HAL_GPIO_Init+0x202>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a48      	ldr	r2, [pc, #288]	@ (8002408 <HAL_GPIO_Init+0x2f4>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d013      	beq.n	8002312 <HAL_GPIO_Init+0x1fe>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a47      	ldr	r2, [pc, #284]	@ (800240c <HAL_GPIO_Init+0x2f8>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d00d      	beq.n	800230e <HAL_GPIO_Init+0x1fa>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a46      	ldr	r2, [pc, #280]	@ (8002410 <HAL_GPIO_Init+0x2fc>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d007      	beq.n	800230a <HAL_GPIO_Init+0x1f6>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a45      	ldr	r2, [pc, #276]	@ (8002414 <HAL_GPIO_Init+0x300>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d101      	bne.n	8002306 <HAL_GPIO_Init+0x1f2>
 8002302:	2304      	movs	r3, #4
 8002304:	e008      	b.n	8002318 <HAL_GPIO_Init+0x204>
 8002306:	2307      	movs	r3, #7
 8002308:	e006      	b.n	8002318 <HAL_GPIO_Init+0x204>
 800230a:	2303      	movs	r3, #3
 800230c:	e004      	b.n	8002318 <HAL_GPIO_Init+0x204>
 800230e:	2302      	movs	r3, #2
 8002310:	e002      	b.n	8002318 <HAL_GPIO_Init+0x204>
 8002312:	2301      	movs	r3, #1
 8002314:	e000      	b.n	8002318 <HAL_GPIO_Init+0x204>
 8002316:	2300      	movs	r3, #0
 8002318:	69fa      	ldr	r2, [r7, #28]
 800231a:	f002 0203 	and.w	r2, r2, #3
 800231e:	0092      	lsls	r2, r2, #2
 8002320:	4093      	lsls	r3, r2
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4313      	orrs	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002328:	4935      	ldr	r1, [pc, #212]	@ (8002400 <HAL_GPIO_Init+0x2ec>)
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	089b      	lsrs	r3, r3, #2
 800232e:	3302      	adds	r3, #2
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002336:	4b38      	ldr	r3, [pc, #224]	@ (8002418 <HAL_GPIO_Init+0x304>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	43db      	mvns	r3, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4013      	ands	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	4313      	orrs	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800235a:	4a2f      	ldr	r2, [pc, #188]	@ (8002418 <HAL_GPIO_Init+0x304>)
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002360:	4b2d      	ldr	r3, [pc, #180]	@ (8002418 <HAL_GPIO_Init+0x304>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	43db      	mvns	r3, r3
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4013      	ands	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d003      	beq.n	8002384 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	4313      	orrs	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002384:	4a24      	ldr	r2, [pc, #144]	@ (8002418 <HAL_GPIO_Init+0x304>)
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800238a:	4b23      	ldr	r3, [pc, #140]	@ (8002418 <HAL_GPIO_Init+0x304>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	43db      	mvns	r3, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4013      	ands	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023ae:	4a1a      	ldr	r2, [pc, #104]	@ (8002418 <HAL_GPIO_Init+0x304>)
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023b4:	4b18      	ldr	r3, [pc, #96]	@ (8002418 <HAL_GPIO_Init+0x304>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	43db      	mvns	r3, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4013      	ands	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d003      	beq.n	80023d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023d8:	4a0f      	ldr	r2, [pc, #60]	@ (8002418 <HAL_GPIO_Init+0x304>)
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	3301      	adds	r3, #1
 80023e2:	61fb      	str	r3, [r7, #28]
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	2b0f      	cmp	r3, #15
 80023e8:	f67f aea2 	bls.w	8002130 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023ec:	bf00      	nop
 80023ee:	bf00      	nop
 80023f0:	3724      	adds	r7, #36	@ 0x24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	40023800 	.word	0x40023800
 8002400:	40013800 	.word	0x40013800
 8002404:	40020000 	.word	0x40020000
 8002408:	40020400 	.word	0x40020400
 800240c:	40020800 	.word	0x40020800
 8002410:	40020c00 	.word	0x40020c00
 8002414:	40021000 	.word	0x40021000
 8002418:	40013c00 	.word	0x40013c00

0800241c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	460b      	mov	r3, r1
 8002426:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	691a      	ldr	r2, [r3, #16]
 800242c:	887b      	ldrh	r3, [r7, #2]
 800242e:	4013      	ands	r3, r2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d002      	beq.n	800243a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002434:	2301      	movs	r3, #1
 8002436:	73fb      	strb	r3, [r7, #15]
 8002438:	e001      	b.n	800243e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800243a:	2300      	movs	r3, #0
 800243c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800243e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002440:	4618      	mov	r0, r3
 8002442:	3714      	adds	r7, #20
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	460b      	mov	r3, r1
 8002456:	807b      	strh	r3, [r7, #2]
 8002458:	4613      	mov	r3, r2
 800245a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800245c:	787b      	ldrb	r3, [r7, #1]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002462:	887a      	ldrh	r2, [r7, #2]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002468:	e003      	b.n	8002472 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800246a:	887b      	ldrh	r3, [r7, #2]
 800246c:	041a      	lsls	r2, r3, #16
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	619a      	str	r2, [r3, #24]
}
 8002472:	bf00      	nop
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
	...

08002480 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e267      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	d075      	beq.n	800258a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800249e:	4b88      	ldr	r3, [pc, #544]	@ (80026c0 <HAL_RCC_OscConfig+0x240>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 030c 	and.w	r3, r3, #12
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	d00c      	beq.n	80024c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024aa:	4b85      	ldr	r3, [pc, #532]	@ (80026c0 <HAL_RCC_OscConfig+0x240>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024b2:	2b08      	cmp	r3, #8
 80024b4:	d112      	bne.n	80024dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024b6:	4b82      	ldr	r3, [pc, #520]	@ (80026c0 <HAL_RCC_OscConfig+0x240>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024c2:	d10b      	bne.n	80024dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c4:	4b7e      	ldr	r3, [pc, #504]	@ (80026c0 <HAL_RCC_OscConfig+0x240>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d05b      	beq.n	8002588 <HAL_RCC_OscConfig+0x108>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d157      	bne.n	8002588 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e242      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024e4:	d106      	bne.n	80024f4 <HAL_RCC_OscConfig+0x74>
 80024e6:	4b76      	ldr	r3, [pc, #472]	@ (80026c0 <HAL_RCC_OscConfig+0x240>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a75      	ldr	r2, [pc, #468]	@ (80026c0 <HAL_RCC_OscConfig+0x240>)
 80024ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024f0:	6013      	str	r3, [r2, #0]
 80024f2:	e01d      	b.n	8002530 <HAL_RCC_OscConfig+0xb0>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024fc:	d10c      	bne.n	8002518 <HAL_RCC_OscConfig+0x98>
 80024fe:	4b70      	ldr	r3, [pc, #448]	@ (80026c0 <HAL_RCC_OscConfig+0x240>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a6f      	ldr	r2, [pc, #444]	@ (80026c0 <HAL_RCC_OscConfig+0x240>)
 8002504:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	4b6d      	ldr	r3, [pc, #436]	@ (80026c0 <HAL_RCC_OscConfig+0x240>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a6c      	ldr	r2, [pc, #432]	@ (80026c0 <HAL_RCC_OscConfig+0x240>)
 8002510:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002514:	6013      	str	r3, [r2, #0]
 8002516:	e00b      	b.n	8002530 <HAL_RCC_OscConfig+0xb0>
 8002518:	4b69      	ldr	r3, [pc, #420]	@ (80026c0 <HAL_RCC_OscConfig+0x240>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a68      	ldr	r2, [pc, #416]	@ (80026c0 <HAL_RCC_OscConfig+0x240>)
 800251e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002522:	6013      	str	r3, [r2, #0]
 8002524:	4b66      	ldr	r3, [pc, #408]	@ (80026c0 <HAL_RCC_OscConfig+0x240>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a65      	ldr	r2, [pc, #404]	@ (80026c0 <HAL_RCC_OscConfig+0x240>)
 800252a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800252e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d013      	beq.n	8002560 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002538:	f7ff f8cc 	bl	80016d4 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002540:	f7ff f8c8 	bl	80016d4 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b64      	cmp	r3, #100	@ 0x64
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e207      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002552:	4b5b      	ldr	r3, [pc, #364]	@ (80026c0 <HAL_RCC_OscConfig+0x240>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d0f0      	beq.n	8002540 <HAL_RCC_OscConfig+0xc0>
 800255e:	e014      	b.n	800258a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002560:	f7ff f8b8 	bl	80016d4 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002568:	f7ff f8b4 	bl	80016d4 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b64      	cmp	r3, #100	@ 0x64
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e1f3      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800257a:	4b51      	ldr	r3, [pc, #324]	@ (80026c0 <HAL_RCC_OscConfig+0x240>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1f0      	bne.n	8002568 <HAL_RCC_OscConfig+0xe8>
 8002586:	e000      	b.n	800258a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002588:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d063      	beq.n	800265e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002596:	4b4a      	ldr	r3, [pc, #296]	@ (80026c0 <HAL_RCC_OscConfig+0x240>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 030c 	and.w	r3, r3, #12
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00b      	beq.n	80025ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025a2:	4b47      	ldr	r3, [pc, #284]	@ (80026c0 <HAL_RCC_OscConfig+0x240>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025aa:	2b08      	cmp	r3, #8
 80025ac:	d11c      	bne.n	80025e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ae:	4b44      	ldr	r3, [pc, #272]	@ (80026c0 <HAL_RCC_OscConfig+0x240>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d116      	bne.n	80025e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ba:	4b41      	ldr	r3, [pc, #260]	@ (80026c0 <HAL_RCC_OscConfig+0x240>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d005      	beq.n	80025d2 <HAL_RCC_OscConfig+0x152>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d001      	beq.n	80025d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e1c7      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d2:	4b3b      	ldr	r3, [pc, #236]	@ (80026c0 <HAL_RCC_OscConfig+0x240>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	4937      	ldr	r1, [pc, #220]	@ (80026c0 <HAL_RCC_OscConfig+0x240>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025e6:	e03a      	b.n	800265e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d020      	beq.n	8002632 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025f0:	4b34      	ldr	r3, [pc, #208]	@ (80026c4 <HAL_RCC_OscConfig+0x244>)
 80025f2:	2201      	movs	r2, #1
 80025f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f6:	f7ff f86d 	bl	80016d4 <HAL_GetTick>
 80025fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025fc:	e008      	b.n	8002610 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025fe:	f7ff f869 	bl	80016d4 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e1a8      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002610:	4b2b      	ldr	r3, [pc, #172]	@ (80026c0 <HAL_RCC_OscConfig+0x240>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0f0      	beq.n	80025fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800261c:	4b28      	ldr	r3, [pc, #160]	@ (80026c0 <HAL_RCC_OscConfig+0x240>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	4925      	ldr	r1, [pc, #148]	@ (80026c0 <HAL_RCC_OscConfig+0x240>)
 800262c:	4313      	orrs	r3, r2
 800262e:	600b      	str	r3, [r1, #0]
 8002630:	e015      	b.n	800265e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002632:	4b24      	ldr	r3, [pc, #144]	@ (80026c4 <HAL_RCC_OscConfig+0x244>)
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002638:	f7ff f84c 	bl	80016d4 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002640:	f7ff f848 	bl	80016d4 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e187      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002652:	4b1b      	ldr	r3, [pc, #108]	@ (80026c0 <HAL_RCC_OscConfig+0x240>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1f0      	bne.n	8002640 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0308 	and.w	r3, r3, #8
 8002666:	2b00      	cmp	r3, #0
 8002668:	d036      	beq.n	80026d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d016      	beq.n	80026a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002672:	4b15      	ldr	r3, [pc, #84]	@ (80026c8 <HAL_RCC_OscConfig+0x248>)
 8002674:	2201      	movs	r2, #1
 8002676:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002678:	f7ff f82c 	bl	80016d4 <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002680:	f7ff f828 	bl	80016d4 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e167      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002692:	4b0b      	ldr	r3, [pc, #44]	@ (80026c0 <HAL_RCC_OscConfig+0x240>)
 8002694:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d0f0      	beq.n	8002680 <HAL_RCC_OscConfig+0x200>
 800269e:	e01b      	b.n	80026d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026a0:	4b09      	ldr	r3, [pc, #36]	@ (80026c8 <HAL_RCC_OscConfig+0x248>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026a6:	f7ff f815 	bl	80016d4 <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026ac:	e00e      	b.n	80026cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026ae:	f7ff f811 	bl	80016d4 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d907      	bls.n	80026cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e150      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
 80026c0:	40023800 	.word	0x40023800
 80026c4:	42470000 	.word	0x42470000
 80026c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026cc:	4b88      	ldr	r3, [pc, #544]	@ (80028f0 <HAL_RCC_OscConfig+0x470>)
 80026ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1ea      	bne.n	80026ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 8097 	beq.w	8002814 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026e6:	2300      	movs	r3, #0
 80026e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ea:	4b81      	ldr	r3, [pc, #516]	@ (80028f0 <HAL_RCC_OscConfig+0x470>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d10f      	bne.n	8002716 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	60bb      	str	r3, [r7, #8]
 80026fa:	4b7d      	ldr	r3, [pc, #500]	@ (80028f0 <HAL_RCC_OscConfig+0x470>)
 80026fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fe:	4a7c      	ldr	r2, [pc, #496]	@ (80028f0 <HAL_RCC_OscConfig+0x470>)
 8002700:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002704:	6413      	str	r3, [r2, #64]	@ 0x40
 8002706:	4b7a      	ldr	r3, [pc, #488]	@ (80028f0 <HAL_RCC_OscConfig+0x470>)
 8002708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800270e:	60bb      	str	r3, [r7, #8]
 8002710:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002712:	2301      	movs	r3, #1
 8002714:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002716:	4b77      	ldr	r3, [pc, #476]	@ (80028f4 <HAL_RCC_OscConfig+0x474>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800271e:	2b00      	cmp	r3, #0
 8002720:	d118      	bne.n	8002754 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002722:	4b74      	ldr	r3, [pc, #464]	@ (80028f4 <HAL_RCC_OscConfig+0x474>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a73      	ldr	r2, [pc, #460]	@ (80028f4 <HAL_RCC_OscConfig+0x474>)
 8002728:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800272c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800272e:	f7fe ffd1 	bl	80016d4 <HAL_GetTick>
 8002732:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002734:	e008      	b.n	8002748 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002736:	f7fe ffcd 	bl	80016d4 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d901      	bls.n	8002748 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e10c      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002748:	4b6a      	ldr	r3, [pc, #424]	@ (80028f4 <HAL_RCC_OscConfig+0x474>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002750:	2b00      	cmp	r3, #0
 8002752:	d0f0      	beq.n	8002736 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d106      	bne.n	800276a <HAL_RCC_OscConfig+0x2ea>
 800275c:	4b64      	ldr	r3, [pc, #400]	@ (80028f0 <HAL_RCC_OscConfig+0x470>)
 800275e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002760:	4a63      	ldr	r2, [pc, #396]	@ (80028f0 <HAL_RCC_OscConfig+0x470>)
 8002762:	f043 0301 	orr.w	r3, r3, #1
 8002766:	6713      	str	r3, [r2, #112]	@ 0x70
 8002768:	e01c      	b.n	80027a4 <HAL_RCC_OscConfig+0x324>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	2b05      	cmp	r3, #5
 8002770:	d10c      	bne.n	800278c <HAL_RCC_OscConfig+0x30c>
 8002772:	4b5f      	ldr	r3, [pc, #380]	@ (80028f0 <HAL_RCC_OscConfig+0x470>)
 8002774:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002776:	4a5e      	ldr	r2, [pc, #376]	@ (80028f0 <HAL_RCC_OscConfig+0x470>)
 8002778:	f043 0304 	orr.w	r3, r3, #4
 800277c:	6713      	str	r3, [r2, #112]	@ 0x70
 800277e:	4b5c      	ldr	r3, [pc, #368]	@ (80028f0 <HAL_RCC_OscConfig+0x470>)
 8002780:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002782:	4a5b      	ldr	r2, [pc, #364]	@ (80028f0 <HAL_RCC_OscConfig+0x470>)
 8002784:	f043 0301 	orr.w	r3, r3, #1
 8002788:	6713      	str	r3, [r2, #112]	@ 0x70
 800278a:	e00b      	b.n	80027a4 <HAL_RCC_OscConfig+0x324>
 800278c:	4b58      	ldr	r3, [pc, #352]	@ (80028f0 <HAL_RCC_OscConfig+0x470>)
 800278e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002790:	4a57      	ldr	r2, [pc, #348]	@ (80028f0 <HAL_RCC_OscConfig+0x470>)
 8002792:	f023 0301 	bic.w	r3, r3, #1
 8002796:	6713      	str	r3, [r2, #112]	@ 0x70
 8002798:	4b55      	ldr	r3, [pc, #340]	@ (80028f0 <HAL_RCC_OscConfig+0x470>)
 800279a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800279c:	4a54      	ldr	r2, [pc, #336]	@ (80028f0 <HAL_RCC_OscConfig+0x470>)
 800279e:	f023 0304 	bic.w	r3, r3, #4
 80027a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d015      	beq.n	80027d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ac:	f7fe ff92 	bl	80016d4 <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b2:	e00a      	b.n	80027ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027b4:	f7fe ff8e 	bl	80016d4 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e0cb      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ca:	4b49      	ldr	r3, [pc, #292]	@ (80028f0 <HAL_RCC_OscConfig+0x470>)
 80027cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d0ee      	beq.n	80027b4 <HAL_RCC_OscConfig+0x334>
 80027d6:	e014      	b.n	8002802 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027d8:	f7fe ff7c 	bl	80016d4 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027de:	e00a      	b.n	80027f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027e0:	f7fe ff78 	bl	80016d4 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e0b5      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027f6:	4b3e      	ldr	r3, [pc, #248]	@ (80028f0 <HAL_RCC_OscConfig+0x470>)
 80027f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1ee      	bne.n	80027e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002802:	7dfb      	ldrb	r3, [r7, #23]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d105      	bne.n	8002814 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002808:	4b39      	ldr	r3, [pc, #228]	@ (80028f0 <HAL_RCC_OscConfig+0x470>)
 800280a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280c:	4a38      	ldr	r2, [pc, #224]	@ (80028f0 <HAL_RCC_OscConfig+0x470>)
 800280e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002812:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 80a1 	beq.w	8002960 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800281e:	4b34      	ldr	r3, [pc, #208]	@ (80028f0 <HAL_RCC_OscConfig+0x470>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 030c 	and.w	r3, r3, #12
 8002826:	2b08      	cmp	r3, #8
 8002828:	d05c      	beq.n	80028e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	2b02      	cmp	r3, #2
 8002830:	d141      	bne.n	80028b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002832:	4b31      	ldr	r3, [pc, #196]	@ (80028f8 <HAL_RCC_OscConfig+0x478>)
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002838:	f7fe ff4c 	bl	80016d4 <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002840:	f7fe ff48 	bl	80016d4 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e087      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002852:	4b27      	ldr	r3, [pc, #156]	@ (80028f0 <HAL_RCC_OscConfig+0x470>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1f0      	bne.n	8002840 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	69da      	ldr	r2, [r3, #28]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	431a      	orrs	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286c:	019b      	lsls	r3, r3, #6
 800286e:	431a      	orrs	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002874:	085b      	lsrs	r3, r3, #1
 8002876:	3b01      	subs	r3, #1
 8002878:	041b      	lsls	r3, r3, #16
 800287a:	431a      	orrs	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002880:	061b      	lsls	r3, r3, #24
 8002882:	491b      	ldr	r1, [pc, #108]	@ (80028f0 <HAL_RCC_OscConfig+0x470>)
 8002884:	4313      	orrs	r3, r2
 8002886:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002888:	4b1b      	ldr	r3, [pc, #108]	@ (80028f8 <HAL_RCC_OscConfig+0x478>)
 800288a:	2201      	movs	r2, #1
 800288c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288e:	f7fe ff21 	bl	80016d4 <HAL_GetTick>
 8002892:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002894:	e008      	b.n	80028a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002896:	f7fe ff1d 	bl	80016d4 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e05c      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028a8:	4b11      	ldr	r3, [pc, #68]	@ (80028f0 <HAL_RCC_OscConfig+0x470>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d0f0      	beq.n	8002896 <HAL_RCC_OscConfig+0x416>
 80028b4:	e054      	b.n	8002960 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028b6:	4b10      	ldr	r3, [pc, #64]	@ (80028f8 <HAL_RCC_OscConfig+0x478>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028bc:	f7fe ff0a 	bl	80016d4 <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028c4:	f7fe ff06 	bl	80016d4 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e045      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028d6:	4b06      	ldr	r3, [pc, #24]	@ (80028f0 <HAL_RCC_OscConfig+0x470>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1f0      	bne.n	80028c4 <HAL_RCC_OscConfig+0x444>
 80028e2:	e03d      	b.n	8002960 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d107      	bne.n	80028fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e038      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
 80028f0:	40023800 	.word	0x40023800
 80028f4:	40007000 	.word	0x40007000
 80028f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028fc:	4b1b      	ldr	r3, [pc, #108]	@ (800296c <HAL_RCC_OscConfig+0x4ec>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d028      	beq.n	800295c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002914:	429a      	cmp	r2, r3
 8002916:	d121      	bne.n	800295c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002922:	429a      	cmp	r2, r3
 8002924:	d11a      	bne.n	800295c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800292c:	4013      	ands	r3, r2
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002932:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002934:	4293      	cmp	r3, r2
 8002936:	d111      	bne.n	800295c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002942:	085b      	lsrs	r3, r3, #1
 8002944:	3b01      	subs	r3, #1
 8002946:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002948:	429a      	cmp	r2, r3
 800294a:	d107      	bne.n	800295c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002956:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002958:	429a      	cmp	r2, r3
 800295a:	d001      	beq.n	8002960 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e000      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3718      	adds	r7, #24
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	40023800 	.word	0x40023800

08002970 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d101      	bne.n	8002984 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e0cc      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002984:	4b68      	ldr	r3, [pc, #416]	@ (8002b28 <HAL_RCC_ClockConfig+0x1b8>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0307 	and.w	r3, r3, #7
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	429a      	cmp	r2, r3
 8002990:	d90c      	bls.n	80029ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002992:	4b65      	ldr	r3, [pc, #404]	@ (8002b28 <HAL_RCC_ClockConfig+0x1b8>)
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	b2d2      	uxtb	r2, r2
 8002998:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800299a:	4b63      	ldr	r3, [pc, #396]	@ (8002b28 <HAL_RCC_ClockConfig+0x1b8>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0307 	and.w	r3, r3, #7
 80029a2:	683a      	ldr	r2, [r7, #0]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d001      	beq.n	80029ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e0b8      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d020      	beq.n	80029fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0304 	and.w	r3, r3, #4
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d005      	beq.n	80029d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029c4:	4b59      	ldr	r3, [pc, #356]	@ (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	4a58      	ldr	r2, [pc, #352]	@ (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 80029ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80029ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0308 	and.w	r3, r3, #8
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d005      	beq.n	80029e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029dc:	4b53      	ldr	r3, [pc, #332]	@ (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	4a52      	ldr	r2, [pc, #328]	@ (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 80029e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80029e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029e8:	4b50      	ldr	r3, [pc, #320]	@ (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	494d      	ldr	r1, [pc, #308]	@ (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d044      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d107      	bne.n	8002a1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a0e:	4b47      	ldr	r3, [pc, #284]	@ (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d119      	bne.n	8002a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e07f      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d003      	beq.n	8002a2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a2a:	2b03      	cmp	r3, #3
 8002a2c:	d107      	bne.n	8002a3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a2e:	4b3f      	ldr	r3, [pc, #252]	@ (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d109      	bne.n	8002a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e06f      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a3e:	4b3b      	ldr	r3, [pc, #236]	@ (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e067      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a4e:	4b37      	ldr	r3, [pc, #220]	@ (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f023 0203 	bic.w	r2, r3, #3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	4934      	ldr	r1, [pc, #208]	@ (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a60:	f7fe fe38 	bl	80016d4 <HAL_GetTick>
 8002a64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a66:	e00a      	b.n	8002a7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a68:	f7fe fe34 	bl	80016d4 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e04f      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a7e:	4b2b      	ldr	r3, [pc, #172]	@ (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f003 020c 	and.w	r2, r3, #12
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d1eb      	bne.n	8002a68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a90:	4b25      	ldr	r3, [pc, #148]	@ (8002b28 <HAL_RCC_ClockConfig+0x1b8>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0307 	and.w	r3, r3, #7
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d20c      	bcs.n	8002ab8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a9e:	4b22      	ldr	r3, [pc, #136]	@ (8002b28 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	b2d2      	uxtb	r2, r2
 8002aa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aa6:	4b20      	ldr	r3, [pc, #128]	@ (8002b28 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0307 	and.w	r3, r3, #7
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d001      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e032      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d008      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ac4:	4b19      	ldr	r3, [pc, #100]	@ (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	4916      	ldr	r1, [pc, #88]	@ (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0308 	and.w	r3, r3, #8
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d009      	beq.n	8002af6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ae2:	4b12      	ldr	r3, [pc, #72]	@ (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	490e      	ldr	r1, [pc, #56]	@ (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002af6:	f000 f821 	bl	8002b3c <HAL_RCC_GetSysClockFreq>
 8002afa:	4602      	mov	r2, r0
 8002afc:	4b0b      	ldr	r3, [pc, #44]	@ (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	091b      	lsrs	r3, r3, #4
 8002b02:	f003 030f 	and.w	r3, r3, #15
 8002b06:	490a      	ldr	r1, [pc, #40]	@ (8002b30 <HAL_RCC_ClockConfig+0x1c0>)
 8002b08:	5ccb      	ldrb	r3, [r1, r3]
 8002b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b0e:	4a09      	ldr	r2, [pc, #36]	@ (8002b34 <HAL_RCC_ClockConfig+0x1c4>)
 8002b10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b12:	4b09      	ldr	r3, [pc, #36]	@ (8002b38 <HAL_RCC_ClockConfig+0x1c8>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7fe fd98 	bl	800164c <HAL_InitTick>

  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3710      	adds	r7, #16
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	40023c00 	.word	0x40023c00
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	08005e0c 	.word	0x08005e0c
 8002b34:	200000d0 	.word	0x200000d0
 8002b38:	200000d4 	.word	0x200000d4

08002b3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b40:	b094      	sub	sp, #80	@ 0x50
 8002b42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b48:	2300      	movs	r3, #0
 8002b4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002b50:	2300      	movs	r3, #0
 8002b52:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b54:	4b79      	ldr	r3, [pc, #484]	@ (8002d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f003 030c 	and.w	r3, r3, #12
 8002b5c:	2b08      	cmp	r3, #8
 8002b5e:	d00d      	beq.n	8002b7c <HAL_RCC_GetSysClockFreq+0x40>
 8002b60:	2b08      	cmp	r3, #8
 8002b62:	f200 80e1 	bhi.w	8002d28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d002      	beq.n	8002b70 <HAL_RCC_GetSysClockFreq+0x34>
 8002b6a:	2b04      	cmp	r3, #4
 8002b6c:	d003      	beq.n	8002b76 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b6e:	e0db      	b.n	8002d28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b70:	4b73      	ldr	r3, [pc, #460]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b72:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002b74:	e0db      	b.n	8002d2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b76:	4b73      	ldr	r3, [pc, #460]	@ (8002d44 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b78:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b7a:	e0d8      	b.n	8002d2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b7c:	4b6f      	ldr	r3, [pc, #444]	@ (8002d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b84:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b86:	4b6d      	ldr	r3, [pc, #436]	@ (8002d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d063      	beq.n	8002c5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b92:	4b6a      	ldr	r3, [pc, #424]	@ (8002d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	099b      	lsrs	r3, r3, #6
 8002b98:	2200      	movs	r2, #0
 8002b9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b9c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ba4:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	637b      	str	r3, [r7, #52]	@ 0x34
 8002baa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002bae:	4622      	mov	r2, r4
 8002bb0:	462b      	mov	r3, r5
 8002bb2:	f04f 0000 	mov.w	r0, #0
 8002bb6:	f04f 0100 	mov.w	r1, #0
 8002bba:	0159      	lsls	r1, r3, #5
 8002bbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bc0:	0150      	lsls	r0, r2, #5
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	4621      	mov	r1, r4
 8002bc8:	1a51      	subs	r1, r2, r1
 8002bca:	6139      	str	r1, [r7, #16]
 8002bcc:	4629      	mov	r1, r5
 8002bce:	eb63 0301 	sbc.w	r3, r3, r1
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	f04f 0200 	mov.w	r2, #0
 8002bd8:	f04f 0300 	mov.w	r3, #0
 8002bdc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002be0:	4659      	mov	r1, fp
 8002be2:	018b      	lsls	r3, r1, #6
 8002be4:	4651      	mov	r1, sl
 8002be6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bea:	4651      	mov	r1, sl
 8002bec:	018a      	lsls	r2, r1, #6
 8002bee:	4651      	mov	r1, sl
 8002bf0:	ebb2 0801 	subs.w	r8, r2, r1
 8002bf4:	4659      	mov	r1, fp
 8002bf6:	eb63 0901 	sbc.w	r9, r3, r1
 8002bfa:	f04f 0200 	mov.w	r2, #0
 8002bfe:	f04f 0300 	mov.w	r3, #0
 8002c02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c0e:	4690      	mov	r8, r2
 8002c10:	4699      	mov	r9, r3
 8002c12:	4623      	mov	r3, r4
 8002c14:	eb18 0303 	adds.w	r3, r8, r3
 8002c18:	60bb      	str	r3, [r7, #8]
 8002c1a:	462b      	mov	r3, r5
 8002c1c:	eb49 0303 	adc.w	r3, r9, r3
 8002c20:	60fb      	str	r3, [r7, #12]
 8002c22:	f04f 0200 	mov.w	r2, #0
 8002c26:	f04f 0300 	mov.w	r3, #0
 8002c2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c2e:	4629      	mov	r1, r5
 8002c30:	024b      	lsls	r3, r1, #9
 8002c32:	4621      	mov	r1, r4
 8002c34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c38:	4621      	mov	r1, r4
 8002c3a:	024a      	lsls	r2, r1, #9
 8002c3c:	4610      	mov	r0, r2
 8002c3e:	4619      	mov	r1, r3
 8002c40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c42:	2200      	movs	r2, #0
 8002c44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c4c:	f7fd fb18 	bl	8000280 <__aeabi_uldivmod>
 8002c50:	4602      	mov	r2, r0
 8002c52:	460b      	mov	r3, r1
 8002c54:	4613      	mov	r3, r2
 8002c56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c58:	e058      	b.n	8002d0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c5a:	4b38      	ldr	r3, [pc, #224]	@ (8002d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	099b      	lsrs	r3, r3, #6
 8002c60:	2200      	movs	r2, #0
 8002c62:	4618      	mov	r0, r3
 8002c64:	4611      	mov	r1, r2
 8002c66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c6a:	623b      	str	r3, [r7, #32]
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c74:	4642      	mov	r2, r8
 8002c76:	464b      	mov	r3, r9
 8002c78:	f04f 0000 	mov.w	r0, #0
 8002c7c:	f04f 0100 	mov.w	r1, #0
 8002c80:	0159      	lsls	r1, r3, #5
 8002c82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c86:	0150      	lsls	r0, r2, #5
 8002c88:	4602      	mov	r2, r0
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	4641      	mov	r1, r8
 8002c8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c92:	4649      	mov	r1, r9
 8002c94:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c98:	f04f 0200 	mov.w	r2, #0
 8002c9c:	f04f 0300 	mov.w	r3, #0
 8002ca0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ca4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ca8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002cac:	ebb2 040a 	subs.w	r4, r2, sl
 8002cb0:	eb63 050b 	sbc.w	r5, r3, fp
 8002cb4:	f04f 0200 	mov.w	r2, #0
 8002cb8:	f04f 0300 	mov.w	r3, #0
 8002cbc:	00eb      	lsls	r3, r5, #3
 8002cbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cc2:	00e2      	lsls	r2, r4, #3
 8002cc4:	4614      	mov	r4, r2
 8002cc6:	461d      	mov	r5, r3
 8002cc8:	4643      	mov	r3, r8
 8002cca:	18e3      	adds	r3, r4, r3
 8002ccc:	603b      	str	r3, [r7, #0]
 8002cce:	464b      	mov	r3, r9
 8002cd0:	eb45 0303 	adc.w	r3, r5, r3
 8002cd4:	607b      	str	r3, [r7, #4]
 8002cd6:	f04f 0200 	mov.w	r2, #0
 8002cda:	f04f 0300 	mov.w	r3, #0
 8002cde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ce2:	4629      	mov	r1, r5
 8002ce4:	028b      	lsls	r3, r1, #10
 8002ce6:	4621      	mov	r1, r4
 8002ce8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cec:	4621      	mov	r1, r4
 8002cee:	028a      	lsls	r2, r1, #10
 8002cf0:	4610      	mov	r0, r2
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	61bb      	str	r3, [r7, #24]
 8002cfa:	61fa      	str	r2, [r7, #28]
 8002cfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d00:	f7fd fabe 	bl	8000280 <__aeabi_uldivmod>
 8002d04:	4602      	mov	r2, r0
 8002d06:	460b      	mov	r3, r1
 8002d08:	4613      	mov	r3, r2
 8002d0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	0c1b      	lsrs	r3, r3, #16
 8002d12:	f003 0303 	and.w	r3, r3, #3
 8002d16:	3301      	adds	r3, #1
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002d1c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d24:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d26:	e002      	b.n	8002d2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d28:	4b05      	ldr	r3, [pc, #20]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d2a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3750      	adds	r7, #80	@ 0x50
 8002d34:	46bd      	mov	sp, r7
 8002d36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d3a:	bf00      	nop
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	00f42400 	.word	0x00f42400
 8002d44:	007a1200 	.word	0x007a1200

08002d48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d4c:	4b03      	ldr	r3, [pc, #12]	@ (8002d5c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	200000d0 	.word	0x200000d0

08002d60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d64:	f7ff fff0 	bl	8002d48 <HAL_RCC_GetHCLKFreq>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	4b05      	ldr	r3, [pc, #20]	@ (8002d80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	0a9b      	lsrs	r3, r3, #10
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	4903      	ldr	r1, [pc, #12]	@ (8002d84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d76:	5ccb      	ldrb	r3, [r1, r3]
 8002d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40023800 	.word	0x40023800
 8002d84:	08005e1c 	.word	0x08005e1c

08002d88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d8c:	f7ff ffdc 	bl	8002d48 <HAL_RCC_GetHCLKFreq>
 8002d90:	4602      	mov	r2, r0
 8002d92:	4b05      	ldr	r3, [pc, #20]	@ (8002da8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	0b5b      	lsrs	r3, r3, #13
 8002d98:	f003 0307 	and.w	r3, r3, #7
 8002d9c:	4903      	ldr	r1, [pc, #12]	@ (8002dac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d9e:	5ccb      	ldrb	r3, [r1, r3]
 8002da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40023800 	.word	0x40023800
 8002dac:	08005e1c 	.word	0x08005e1c

08002db0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e07b      	b.n	8002eba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d108      	bne.n	8002ddc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002dd2:	d009      	beq.n	8002de8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	61da      	str	r2, [r3, #28]
 8002dda:	e005      	b.n	8002de8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d106      	bne.n	8002e08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7fe f984 	bl	8001110 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e1e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002e30:	431a      	orrs	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	431a      	orrs	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e62:	431a      	orrs	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e6c:	ea42 0103 	orr.w	r1, r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e74:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	0c1b      	lsrs	r3, r3, #16
 8002e86:	f003 0104 	and.w	r1, r3, #4
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8e:	f003 0210 	and.w	r2, r3, #16
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	430a      	orrs	r2, r1
 8002e98:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	69da      	ldr	r2, [r3, #28]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ea8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
	...

08002ec4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d101      	bne.n	8002ee4 <HAL_SPI_Transmit_DMA+0x20>
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	e097      	b.n	8003014 <HAL_SPI_Transmit_DMA+0x150>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d002      	beq.n	8002efe <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8002ef8:	2302      	movs	r3, #2
 8002efa:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002efc:	e085      	b.n	800300a <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d002      	beq.n	8002f0a <HAL_SPI_Transmit_DMA+0x46>
 8002f04:	88fb      	ldrh	r3, [r7, #6]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d102      	bne.n	8002f10 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002f0e:	e07c      	b.n	800300a <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2203      	movs	r2, #3
 8002f14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	68ba      	ldr	r2, [r7, #8]
 8002f22:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	88fa      	ldrh	r2, [r7, #6]
 8002f28:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	88fa      	ldrh	r2, [r7, #6]
 8002f2e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f56:	d10f      	bne.n	8002f78 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f66:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f76:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f7c:	4a27      	ldr	r2, [pc, #156]	@ (800301c <HAL_SPI_Transmit_DMA+0x158>)
 8002f7e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f84:	4a26      	ldr	r2, [pc, #152]	@ (8003020 <HAL_SPI_Transmit_DMA+0x15c>)
 8002f86:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f8c:	4a25      	ldr	r2, [pc, #148]	@ (8003024 <HAL_SPI_Transmit_DMA+0x160>)
 8002f8e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f94:	2200      	movs	r2, #0
 8002f96:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	330c      	adds	r3, #12
 8002fa8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fae:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002fb0:	f7fe fd5c 	bl	8001a6c <HAL_DMA_Start_IT>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d008      	beq.n	8002fcc <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fbe:	f043 0210 	orr.w	r2, r3, #16
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	75fb      	strb	r3, [r7, #23]

    goto error;
 8002fca:	e01e      	b.n	800300a <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fd6:	2b40      	cmp	r3, #64	@ 0x40
 8002fd8:	d007      	beq.n	8002fea <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002fe8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	685a      	ldr	r2, [r3, #4]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f042 0220 	orr.w	r2, r2, #32
 8002ff8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f042 0202 	orr.w	r2, r2, #2
 8003008:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003012:	7dfb      	ldrb	r3, [r7, #23]
}
 8003014:	4618      	mov	r0, r3
 8003016:	3718      	adds	r7, #24
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	080030f9 	.word	0x080030f9
 8003020:	08003051 	.word	0x08003051
 8003024:	08003115 	.word	0x08003115

08003028 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800305c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800305e:	f7fe fb39 	bl	80016d4 <HAL_GetTick>
 8003062:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800306e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003072:	d03b      	beq.n	80030ec <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	685a      	ldr	r2, [r3, #4]
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 0220 	bic.w	r2, r2, #32
 8003082:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	685a      	ldr	r2, [r3, #4]
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 0202 	bic.w	r2, r2, #2
 8003092:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	2164      	movs	r1, #100	@ 0x64
 8003098:	6978      	ldr	r0, [r7, #20]
 800309a:	f000 f8e3 	bl	8003264 <SPI_EndRxTxTransaction>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d005      	beq.n	80030b0 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030a8:	f043 0220 	orr.w	r2, r3, #32
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d10a      	bne.n	80030ce <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030b8:	2300      	movs	r3, #0
 80030ba:	60fb      	str	r3, [r7, #12]
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	60fb      	str	r3, [r7, #12]
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	2200      	movs	r2, #0
 80030d2:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d003      	beq.n	80030ec <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80030e4:	6978      	ldr	r0, [r7, #20]
 80030e6:	f7ff ffa9 	bl	800303c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80030ea:	e002      	b.n	80030f2 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80030ec:	6978      	ldr	r0, [r7, #20]
 80030ee:	f7fd fb97 	bl	8000820 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80030f2:	3718      	adds	r7, #24
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003104:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f7ff ff8e 	bl	8003028 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800310c:	bf00      	nop
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003120:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	685a      	ldr	r2, [r3, #4]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f022 0203 	bic.w	r2, r2, #3
 8003130:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003136:	f043 0210 	orr.w	r2, r3, #16
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f7ff ff78 	bl	800303c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800314c:	bf00      	nop
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b088      	sub	sp, #32
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	603b      	str	r3, [r7, #0]
 8003160:	4613      	mov	r3, r2
 8003162:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003164:	f7fe fab6 	bl	80016d4 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800316c:	1a9b      	subs	r3, r3, r2
 800316e:	683a      	ldr	r2, [r7, #0]
 8003170:	4413      	add	r3, r2
 8003172:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003174:	f7fe faae 	bl	80016d4 <HAL_GetTick>
 8003178:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800317a:	4b39      	ldr	r3, [pc, #228]	@ (8003260 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	015b      	lsls	r3, r3, #5
 8003180:	0d1b      	lsrs	r3, r3, #20
 8003182:	69fa      	ldr	r2, [r7, #28]
 8003184:	fb02 f303 	mul.w	r3, r2, r3
 8003188:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800318a:	e054      	b.n	8003236 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003192:	d050      	beq.n	8003236 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003194:	f7fe fa9e 	bl	80016d4 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	69fa      	ldr	r2, [r7, #28]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d902      	bls.n	80031aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d13d      	bne.n	8003226 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	685a      	ldr	r2, [r3, #4]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80031b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031c2:	d111      	bne.n	80031e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031cc:	d004      	beq.n	80031d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031d6:	d107      	bne.n	80031e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031f0:	d10f      	bne.n	8003212 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003200:	601a      	str	r2, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003210:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e017      	b.n	8003256 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d101      	bne.n	8003230 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800322c:	2300      	movs	r3, #0
 800322e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	3b01      	subs	r3, #1
 8003234:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	4013      	ands	r3, r2
 8003240:	68ba      	ldr	r2, [r7, #8]
 8003242:	429a      	cmp	r2, r3
 8003244:	bf0c      	ite	eq
 8003246:	2301      	moveq	r3, #1
 8003248:	2300      	movne	r3, #0
 800324a:	b2db      	uxtb	r3, r3
 800324c:	461a      	mov	r2, r3
 800324e:	79fb      	ldrb	r3, [r7, #7]
 8003250:	429a      	cmp	r2, r3
 8003252:	d19b      	bne.n	800318c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3720      	adds	r7, #32
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	200000d0 	.word	0x200000d0

08003264 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b088      	sub	sp, #32
 8003268:	af02      	add	r7, sp, #8
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	9300      	str	r3, [sp, #0]
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	2201      	movs	r2, #1
 8003278:	2102      	movs	r1, #2
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f7ff ff6a 	bl	8003154 <SPI_WaitFlagStateUntilTimeout>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d007      	beq.n	8003296 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800328a:	f043 0220 	orr.w	r2, r3, #32
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e032      	b.n	80032fc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003296:	4b1b      	ldr	r3, [pc, #108]	@ (8003304 <SPI_EndRxTxTransaction+0xa0>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a1b      	ldr	r2, [pc, #108]	@ (8003308 <SPI_EndRxTxTransaction+0xa4>)
 800329c:	fba2 2303 	umull	r2, r3, r2, r3
 80032a0:	0d5b      	lsrs	r3, r3, #21
 80032a2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80032a6:	fb02 f303 	mul.w	r3, r2, r3
 80032aa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80032b4:	d112      	bne.n	80032dc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	9300      	str	r3, [sp, #0]
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	2200      	movs	r2, #0
 80032be:	2180      	movs	r1, #128	@ 0x80
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f7ff ff47 	bl	8003154 <SPI_WaitFlagStateUntilTimeout>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d016      	beq.n	80032fa <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032d0:	f043 0220 	orr.w	r2, r3, #32
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e00f      	b.n	80032fc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00a      	beq.n	80032f8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	3b01      	subs	r3, #1
 80032e6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032f2:	2b80      	cmp	r3, #128	@ 0x80
 80032f4:	d0f2      	beq.n	80032dc <SPI_EndRxTxTransaction+0x78>
 80032f6:	e000      	b.n	80032fa <SPI_EndRxTxTransaction+0x96>
        break;
 80032f8:	bf00      	nop
  }

  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3718      	adds	r7, #24
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	200000d0 	.word	0x200000d0
 8003308:	165e9f81 	.word	0x165e9f81

0800330c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e041      	b.n	80033a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d106      	bne.n	8003338 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f7fd ff66 	bl	8001204 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2202      	movs	r2, #2
 800333c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3304      	adds	r3, #4
 8003348:	4619      	mov	r1, r3
 800334a:	4610      	mov	r0, r2
 800334c:	f000 fcc6 	bl	8003cdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b083      	sub	sp, #12
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6a1a      	ldr	r2, [r3, #32]
 80033b8:	f241 1311 	movw	r3, #4369	@ 0x1111
 80033bc:	4013      	ands	r3, r2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10f      	bne.n	80033e2 <HAL_TIM_Base_Stop+0x38>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	6a1a      	ldr	r2, [r3, #32]
 80033c8:	f240 4344 	movw	r3, #1092	@ 0x444
 80033cc:	4013      	ands	r3, r2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d107      	bne.n	80033e2 <HAL_TIM_Base_Stop+0x38>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 0201 	bic.w	r2, r2, #1
 80033e0:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b01      	cmp	r3, #1
 800340a:	d001      	beq.n	8003410 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e044      	b.n	800349a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2202      	movs	r2, #2
 8003414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68da      	ldr	r2, [r3, #12]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f042 0201 	orr.w	r2, r2, #1
 8003426:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a1e      	ldr	r2, [pc, #120]	@ (80034a8 <HAL_TIM_Base_Start_IT+0xb0>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d018      	beq.n	8003464 <HAL_TIM_Base_Start_IT+0x6c>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800343a:	d013      	beq.n	8003464 <HAL_TIM_Base_Start_IT+0x6c>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a1a      	ldr	r2, [pc, #104]	@ (80034ac <HAL_TIM_Base_Start_IT+0xb4>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d00e      	beq.n	8003464 <HAL_TIM_Base_Start_IT+0x6c>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a19      	ldr	r2, [pc, #100]	@ (80034b0 <HAL_TIM_Base_Start_IT+0xb8>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d009      	beq.n	8003464 <HAL_TIM_Base_Start_IT+0x6c>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a17      	ldr	r2, [pc, #92]	@ (80034b4 <HAL_TIM_Base_Start_IT+0xbc>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d004      	beq.n	8003464 <HAL_TIM_Base_Start_IT+0x6c>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a16      	ldr	r2, [pc, #88]	@ (80034b8 <HAL_TIM_Base_Start_IT+0xc0>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d111      	bne.n	8003488 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 0307 	and.w	r3, r3, #7
 800346e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2b06      	cmp	r3, #6
 8003474:	d010      	beq.n	8003498 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f042 0201 	orr.w	r2, r2, #1
 8003484:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003486:	e007      	b.n	8003498 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f042 0201 	orr.w	r2, r2, #1
 8003496:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3714      	adds	r7, #20
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	40010000 	.word	0x40010000
 80034ac:	40000400 	.word	0x40000400
 80034b0:	40000800 	.word	0x40000800
 80034b4:	40000c00 	.word	0x40000c00
 80034b8:	40014000 	.word	0x40014000

080034bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e041      	b.n	8003552 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d106      	bne.n	80034e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 f839 	bl	800355a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2202      	movs	r2, #2
 80034ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	3304      	adds	r3, #4
 80034f8:	4619      	mov	r1, r3
 80034fa:	4610      	mov	r0, r2
 80034fc:	f000 fbee 	bl	8003cdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800355a:	b480      	push	{r7}
 800355c:	b083      	sub	sp, #12
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003562:	bf00      	nop
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
	...

08003570 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d109      	bne.n	8003594 <HAL_TIM_PWM_Start+0x24>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b01      	cmp	r3, #1
 800358a:	bf14      	ite	ne
 800358c:	2301      	movne	r3, #1
 800358e:	2300      	moveq	r3, #0
 8003590:	b2db      	uxtb	r3, r3
 8003592:	e022      	b.n	80035da <HAL_TIM_PWM_Start+0x6a>
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	2b04      	cmp	r3, #4
 8003598:	d109      	bne.n	80035ae <HAL_TIM_PWM_Start+0x3e>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	bf14      	ite	ne
 80035a6:	2301      	movne	r3, #1
 80035a8:	2300      	moveq	r3, #0
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	e015      	b.n	80035da <HAL_TIM_PWM_Start+0x6a>
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	2b08      	cmp	r3, #8
 80035b2:	d109      	bne.n	80035c8 <HAL_TIM_PWM_Start+0x58>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b01      	cmp	r3, #1
 80035be:	bf14      	ite	ne
 80035c0:	2301      	movne	r3, #1
 80035c2:	2300      	moveq	r3, #0
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	e008      	b.n	80035da <HAL_TIM_PWM_Start+0x6a>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	bf14      	ite	ne
 80035d4:	2301      	movne	r3, #1
 80035d6:	2300      	moveq	r3, #0
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e068      	b.n	80036b4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d104      	bne.n	80035f2 <HAL_TIM_PWM_Start+0x82>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2202      	movs	r2, #2
 80035ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035f0:	e013      	b.n	800361a <HAL_TIM_PWM_Start+0xaa>
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	2b04      	cmp	r3, #4
 80035f6:	d104      	bne.n	8003602 <HAL_TIM_PWM_Start+0x92>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2202      	movs	r2, #2
 80035fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003600:	e00b      	b.n	800361a <HAL_TIM_PWM_Start+0xaa>
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	2b08      	cmp	r3, #8
 8003606:	d104      	bne.n	8003612 <HAL_TIM_PWM_Start+0xa2>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2202      	movs	r2, #2
 800360c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003610:	e003      	b.n	800361a <HAL_TIM_PWM_Start+0xaa>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2202      	movs	r2, #2
 8003616:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2201      	movs	r2, #1
 8003620:	6839      	ldr	r1, [r7, #0]
 8003622:	4618      	mov	r0, r3
 8003624:	f000 fe0c 	bl	8004240 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a23      	ldr	r2, [pc, #140]	@ (80036bc <HAL_TIM_PWM_Start+0x14c>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d107      	bne.n	8003642 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003640:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a1d      	ldr	r2, [pc, #116]	@ (80036bc <HAL_TIM_PWM_Start+0x14c>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d018      	beq.n	800367e <HAL_TIM_PWM_Start+0x10e>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003654:	d013      	beq.n	800367e <HAL_TIM_PWM_Start+0x10e>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a19      	ldr	r2, [pc, #100]	@ (80036c0 <HAL_TIM_PWM_Start+0x150>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d00e      	beq.n	800367e <HAL_TIM_PWM_Start+0x10e>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a17      	ldr	r2, [pc, #92]	@ (80036c4 <HAL_TIM_PWM_Start+0x154>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d009      	beq.n	800367e <HAL_TIM_PWM_Start+0x10e>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a16      	ldr	r2, [pc, #88]	@ (80036c8 <HAL_TIM_PWM_Start+0x158>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d004      	beq.n	800367e <HAL_TIM_PWM_Start+0x10e>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a14      	ldr	r2, [pc, #80]	@ (80036cc <HAL_TIM_PWM_Start+0x15c>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d111      	bne.n	80036a2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f003 0307 	and.w	r3, r3, #7
 8003688:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2b06      	cmp	r3, #6
 800368e:	d010      	beq.n	80036b2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f042 0201 	orr.w	r2, r2, #1
 800369e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036a0:	e007      	b.n	80036b2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f042 0201 	orr.w	r2, r2, #1
 80036b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	40010000 	.word	0x40010000
 80036c0:	40000400 	.word	0x40000400
 80036c4:	40000800 	.word	0x40000800
 80036c8:	40000c00 	.word	0x40000c00
 80036cc:	40014000 	.word	0x40014000

080036d0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2200      	movs	r2, #0
 80036e0:	6839      	ldr	r1, [r7, #0]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f000 fdac 	bl	8004240 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a29      	ldr	r2, [pc, #164]	@ (8003794 <HAL_TIM_PWM_Stop+0xc4>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d117      	bne.n	8003722 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	6a1a      	ldr	r2, [r3, #32]
 80036f8:	f241 1311 	movw	r3, #4369	@ 0x1111
 80036fc:	4013      	ands	r3, r2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10f      	bne.n	8003722 <HAL_TIM_PWM_Stop+0x52>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	6a1a      	ldr	r2, [r3, #32]
 8003708:	f240 4344 	movw	r3, #1092	@ 0x444
 800370c:	4013      	ands	r3, r2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d107      	bne.n	8003722 <HAL_TIM_PWM_Stop+0x52>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003720:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	6a1a      	ldr	r2, [r3, #32]
 8003728:	f241 1311 	movw	r3, #4369	@ 0x1111
 800372c:	4013      	ands	r3, r2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d10f      	bne.n	8003752 <HAL_TIM_PWM_Stop+0x82>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	6a1a      	ldr	r2, [r3, #32]
 8003738:	f240 4344 	movw	r3, #1092	@ 0x444
 800373c:	4013      	ands	r3, r2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d107      	bne.n	8003752 <HAL_TIM_PWM_Stop+0x82>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 0201 	bic.w	r2, r2, #1
 8003750:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d104      	bne.n	8003762 <HAL_TIM_PWM_Stop+0x92>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003760:	e013      	b.n	800378a <HAL_TIM_PWM_Stop+0xba>
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	2b04      	cmp	r3, #4
 8003766:	d104      	bne.n	8003772 <HAL_TIM_PWM_Stop+0xa2>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003770:	e00b      	b.n	800378a <HAL_TIM_PWM_Stop+0xba>
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	2b08      	cmp	r3, #8
 8003776:	d104      	bne.n	8003782 <HAL_TIM_PWM_Stop+0xb2>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003780:	e003      	b.n	800378a <HAL_TIM_PWM_Stop+0xba>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3708      	adds	r7, #8
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	40010000 	.word	0x40010000

08003798 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d020      	beq.n	80037fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d01b      	beq.n	80037fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f06f 0202 	mvn.w	r2, #2
 80037cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2201      	movs	r2, #1
 80037d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	f003 0303 	and.w	r3, r3, #3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d003      	beq.n	80037ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 fa5b 	bl	8003c9e <HAL_TIM_IC_CaptureCallback>
 80037e8:	e005      	b.n	80037f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 fa4d 	bl	8003c8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 fa5e 	bl	8003cb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	f003 0304 	and.w	r3, r3, #4
 8003802:	2b00      	cmp	r3, #0
 8003804:	d020      	beq.n	8003848 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f003 0304 	and.w	r3, r3, #4
 800380c:	2b00      	cmp	r3, #0
 800380e:	d01b      	beq.n	8003848 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f06f 0204 	mvn.w	r2, #4
 8003818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2202      	movs	r2, #2
 800381e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800382a:	2b00      	cmp	r3, #0
 800382c:	d003      	beq.n	8003836 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 fa35 	bl	8003c9e <HAL_TIM_IC_CaptureCallback>
 8003834:	e005      	b.n	8003842 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 fa27 	bl	8003c8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 fa38 	bl	8003cb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	f003 0308 	and.w	r3, r3, #8
 800384e:	2b00      	cmp	r3, #0
 8003850:	d020      	beq.n	8003894 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f003 0308 	and.w	r3, r3, #8
 8003858:	2b00      	cmp	r3, #0
 800385a:	d01b      	beq.n	8003894 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f06f 0208 	mvn.w	r2, #8
 8003864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2204      	movs	r2, #4
 800386a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	69db      	ldr	r3, [r3, #28]
 8003872:	f003 0303 	and.w	r3, r3, #3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 fa0f 	bl	8003c9e <HAL_TIM_IC_CaptureCallback>
 8003880:	e005      	b.n	800388e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 fa01 	bl	8003c8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 fa12 	bl	8003cb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	f003 0310 	and.w	r3, r3, #16
 800389a:	2b00      	cmp	r3, #0
 800389c:	d020      	beq.n	80038e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f003 0310 	and.w	r3, r3, #16
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d01b      	beq.n	80038e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f06f 0210 	mvn.w	r2, #16
 80038b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2208      	movs	r2, #8
 80038b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	69db      	ldr	r3, [r3, #28]
 80038be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d003      	beq.n	80038ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f9e9 	bl	8003c9e <HAL_TIM_IC_CaptureCallback>
 80038cc:	e005      	b.n	80038da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 f9db 	bl	8003c8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 f9ec 	bl	8003cb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00c      	beq.n	8003904 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d007      	beq.n	8003904 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f06f 0201 	mvn.w	r2, #1
 80038fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f7fc ff36 	bl	8000770 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00c      	beq.n	8003928 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003914:	2b00      	cmp	r3, #0
 8003916:	d007      	beq.n	8003928 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 fd2a 	bl	800437c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00c      	beq.n	800394c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003938:	2b00      	cmp	r3, #0
 800393a:	d007      	beq.n	800394c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 f9bd 	bl	8003cc6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	f003 0320 	and.w	r3, r3, #32
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00c      	beq.n	8003970 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f003 0320 	and.w	r3, r3, #32
 800395c:	2b00      	cmp	r3, #0
 800395e:	d007      	beq.n	8003970 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f06f 0220 	mvn.w	r2, #32
 8003968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 fcfc 	bl	8004368 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003970:	bf00      	nop
 8003972:	3710      	adds	r7, #16
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003984:	2300      	movs	r3, #0
 8003986:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800398e:	2b01      	cmp	r3, #1
 8003990:	d101      	bne.n	8003996 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003992:	2302      	movs	r3, #2
 8003994:	e0ae      	b.n	8003af4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2201      	movs	r2, #1
 800399a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2b0c      	cmp	r3, #12
 80039a2:	f200 809f 	bhi.w	8003ae4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80039a6:	a201      	add	r2, pc, #4	@ (adr r2, 80039ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80039a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ac:	080039e1 	.word	0x080039e1
 80039b0:	08003ae5 	.word	0x08003ae5
 80039b4:	08003ae5 	.word	0x08003ae5
 80039b8:	08003ae5 	.word	0x08003ae5
 80039bc:	08003a21 	.word	0x08003a21
 80039c0:	08003ae5 	.word	0x08003ae5
 80039c4:	08003ae5 	.word	0x08003ae5
 80039c8:	08003ae5 	.word	0x08003ae5
 80039cc:	08003a63 	.word	0x08003a63
 80039d0:	08003ae5 	.word	0x08003ae5
 80039d4:	08003ae5 	.word	0x08003ae5
 80039d8:	08003ae5 	.word	0x08003ae5
 80039dc:	08003aa3 	.word	0x08003aa3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68b9      	ldr	r1, [r7, #8]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f000 fa04 	bl	8003df4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	699a      	ldr	r2, [r3, #24]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f042 0208 	orr.w	r2, r2, #8
 80039fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	699a      	ldr	r2, [r3, #24]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 0204 	bic.w	r2, r2, #4
 8003a0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	6999      	ldr	r1, [r3, #24]
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	691a      	ldr	r2, [r3, #16]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	619a      	str	r2, [r3, #24]
      break;
 8003a1e:	e064      	b.n	8003aea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68b9      	ldr	r1, [r7, #8]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f000 fa4a 	bl	8003ec0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	699a      	ldr	r2, [r3, #24]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	699a      	ldr	r2, [r3, #24]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	6999      	ldr	r1, [r3, #24]
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	021a      	lsls	r2, r3, #8
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	619a      	str	r2, [r3, #24]
      break;
 8003a60:	e043      	b.n	8003aea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68b9      	ldr	r1, [r7, #8]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f000 fa95 	bl	8003f98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	69da      	ldr	r2, [r3, #28]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f042 0208 	orr.w	r2, r2, #8
 8003a7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	69da      	ldr	r2, [r3, #28]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f022 0204 	bic.w	r2, r2, #4
 8003a8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	69d9      	ldr	r1, [r3, #28]
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	691a      	ldr	r2, [r3, #16]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	61da      	str	r2, [r3, #28]
      break;
 8003aa0:	e023      	b.n	8003aea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68b9      	ldr	r1, [r7, #8]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f000 fadf 	bl	800406c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	69da      	ldr	r2, [r3, #28]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003abc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	69da      	ldr	r2, [r3, #28]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003acc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	69d9      	ldr	r1, [r3, #28]
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	021a      	lsls	r2, r3, #8
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	61da      	str	r2, [r3, #28]
      break;
 8003ae2:	e002      	b.n	8003aea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ae8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003af2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3718      	adds	r7, #24
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b06:	2300      	movs	r3, #0
 8003b08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d101      	bne.n	8003b18 <HAL_TIM_ConfigClockSource+0x1c>
 8003b14:	2302      	movs	r3, #2
 8003b16:	e0b4      	b.n	8003c82 <HAL_TIM_ConfigClockSource+0x186>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2202      	movs	r2, #2
 8003b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003b36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b50:	d03e      	beq.n	8003bd0 <HAL_TIM_ConfigClockSource+0xd4>
 8003b52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b56:	f200 8087 	bhi.w	8003c68 <HAL_TIM_ConfigClockSource+0x16c>
 8003b5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b5e:	f000 8086 	beq.w	8003c6e <HAL_TIM_ConfigClockSource+0x172>
 8003b62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b66:	d87f      	bhi.n	8003c68 <HAL_TIM_ConfigClockSource+0x16c>
 8003b68:	2b70      	cmp	r3, #112	@ 0x70
 8003b6a:	d01a      	beq.n	8003ba2 <HAL_TIM_ConfigClockSource+0xa6>
 8003b6c:	2b70      	cmp	r3, #112	@ 0x70
 8003b6e:	d87b      	bhi.n	8003c68 <HAL_TIM_ConfigClockSource+0x16c>
 8003b70:	2b60      	cmp	r3, #96	@ 0x60
 8003b72:	d050      	beq.n	8003c16 <HAL_TIM_ConfigClockSource+0x11a>
 8003b74:	2b60      	cmp	r3, #96	@ 0x60
 8003b76:	d877      	bhi.n	8003c68 <HAL_TIM_ConfigClockSource+0x16c>
 8003b78:	2b50      	cmp	r3, #80	@ 0x50
 8003b7a:	d03c      	beq.n	8003bf6 <HAL_TIM_ConfigClockSource+0xfa>
 8003b7c:	2b50      	cmp	r3, #80	@ 0x50
 8003b7e:	d873      	bhi.n	8003c68 <HAL_TIM_ConfigClockSource+0x16c>
 8003b80:	2b40      	cmp	r3, #64	@ 0x40
 8003b82:	d058      	beq.n	8003c36 <HAL_TIM_ConfigClockSource+0x13a>
 8003b84:	2b40      	cmp	r3, #64	@ 0x40
 8003b86:	d86f      	bhi.n	8003c68 <HAL_TIM_ConfigClockSource+0x16c>
 8003b88:	2b30      	cmp	r3, #48	@ 0x30
 8003b8a:	d064      	beq.n	8003c56 <HAL_TIM_ConfigClockSource+0x15a>
 8003b8c:	2b30      	cmp	r3, #48	@ 0x30
 8003b8e:	d86b      	bhi.n	8003c68 <HAL_TIM_ConfigClockSource+0x16c>
 8003b90:	2b20      	cmp	r3, #32
 8003b92:	d060      	beq.n	8003c56 <HAL_TIM_ConfigClockSource+0x15a>
 8003b94:	2b20      	cmp	r3, #32
 8003b96:	d867      	bhi.n	8003c68 <HAL_TIM_ConfigClockSource+0x16c>
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d05c      	beq.n	8003c56 <HAL_TIM_ConfigClockSource+0x15a>
 8003b9c:	2b10      	cmp	r3, #16
 8003b9e:	d05a      	beq.n	8003c56 <HAL_TIM_ConfigClockSource+0x15a>
 8003ba0:	e062      	b.n	8003c68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003bb2:	f000 fb25 	bl	8004200 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003bc4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68ba      	ldr	r2, [r7, #8]
 8003bcc:	609a      	str	r2, [r3, #8]
      break;
 8003bce:	e04f      	b.n	8003c70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003be0:	f000 fb0e 	bl	8004200 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689a      	ldr	r2, [r3, #8]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003bf2:	609a      	str	r2, [r3, #8]
      break;
 8003bf4:	e03c      	b.n	8003c70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c02:	461a      	mov	r2, r3
 8003c04:	f000 fa82 	bl	800410c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2150      	movs	r1, #80	@ 0x50
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 fadb 	bl	80041ca <TIM_ITRx_SetConfig>
      break;
 8003c14:	e02c      	b.n	8003c70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c22:	461a      	mov	r2, r3
 8003c24:	f000 faa1 	bl	800416a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2160      	movs	r1, #96	@ 0x60
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 facb 	bl	80041ca <TIM_ITRx_SetConfig>
      break;
 8003c34:	e01c      	b.n	8003c70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c42:	461a      	mov	r2, r3
 8003c44:	f000 fa62 	bl	800410c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2140      	movs	r1, #64	@ 0x40
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f000 fabb 	bl	80041ca <TIM_ITRx_SetConfig>
      break;
 8003c54:	e00c      	b.n	8003c70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4619      	mov	r1, r3
 8003c60:	4610      	mov	r0, r2
 8003c62:	f000 fab2 	bl	80041ca <TIM_ITRx_SetConfig>
      break;
 8003c66:	e003      	b.n	8003c70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c6c:	e000      	b.n	8003c70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b083      	sub	sp, #12
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c92:	bf00      	nop
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr

08003c9e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b083      	sub	sp, #12
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ca6:	bf00      	nop
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr

08003cb2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	b083      	sub	sp, #12
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cba:	bf00      	nop
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b083      	sub	sp, #12
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cce:	bf00      	nop
 8003cd0:	370c      	adds	r7, #12
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
	...

08003cdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a3a      	ldr	r2, [pc, #232]	@ (8003dd8 <TIM_Base_SetConfig+0xfc>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d00f      	beq.n	8003d14 <TIM_Base_SetConfig+0x38>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cfa:	d00b      	beq.n	8003d14 <TIM_Base_SetConfig+0x38>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a37      	ldr	r2, [pc, #220]	@ (8003ddc <TIM_Base_SetConfig+0x100>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d007      	beq.n	8003d14 <TIM_Base_SetConfig+0x38>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a36      	ldr	r2, [pc, #216]	@ (8003de0 <TIM_Base_SetConfig+0x104>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d003      	beq.n	8003d14 <TIM_Base_SetConfig+0x38>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a35      	ldr	r2, [pc, #212]	@ (8003de4 <TIM_Base_SetConfig+0x108>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d108      	bne.n	8003d26 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a2b      	ldr	r2, [pc, #172]	@ (8003dd8 <TIM_Base_SetConfig+0xfc>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d01b      	beq.n	8003d66 <TIM_Base_SetConfig+0x8a>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d34:	d017      	beq.n	8003d66 <TIM_Base_SetConfig+0x8a>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a28      	ldr	r2, [pc, #160]	@ (8003ddc <TIM_Base_SetConfig+0x100>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d013      	beq.n	8003d66 <TIM_Base_SetConfig+0x8a>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a27      	ldr	r2, [pc, #156]	@ (8003de0 <TIM_Base_SetConfig+0x104>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d00f      	beq.n	8003d66 <TIM_Base_SetConfig+0x8a>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a26      	ldr	r2, [pc, #152]	@ (8003de4 <TIM_Base_SetConfig+0x108>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d00b      	beq.n	8003d66 <TIM_Base_SetConfig+0x8a>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a25      	ldr	r2, [pc, #148]	@ (8003de8 <TIM_Base_SetConfig+0x10c>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d007      	beq.n	8003d66 <TIM_Base_SetConfig+0x8a>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a24      	ldr	r2, [pc, #144]	@ (8003dec <TIM_Base_SetConfig+0x110>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d003      	beq.n	8003d66 <TIM_Base_SetConfig+0x8a>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a23      	ldr	r2, [pc, #140]	@ (8003df0 <TIM_Base_SetConfig+0x114>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d108      	bne.n	8003d78 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	689a      	ldr	r2, [r3, #8]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a0e      	ldr	r2, [pc, #56]	@ (8003dd8 <TIM_Base_SetConfig+0xfc>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d103      	bne.n	8003dac <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	691a      	ldr	r2, [r3, #16]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d105      	bne.n	8003dca <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	f023 0201 	bic.w	r2, r3, #1
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	611a      	str	r2, [r3, #16]
  }
}
 8003dca:	bf00      	nop
 8003dcc:	3714      	adds	r7, #20
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	40010000 	.word	0x40010000
 8003ddc:	40000400 	.word	0x40000400
 8003de0:	40000800 	.word	0x40000800
 8003de4:	40000c00 	.word	0x40000c00
 8003de8:	40014000 	.word	0x40014000
 8003dec:	40014400 	.word	0x40014400
 8003df0:	40014800 	.word	0x40014800

08003df4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b087      	sub	sp, #28
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a1b      	ldr	r3, [r3, #32]
 8003e08:	f023 0201 	bic.w	r2, r3, #1
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f023 0303 	bic.w	r3, r3, #3
 8003e2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	f023 0302 	bic.w	r3, r3, #2
 8003e3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a1c      	ldr	r2, [pc, #112]	@ (8003ebc <TIM_OC1_SetConfig+0xc8>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d10c      	bne.n	8003e6a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	f023 0308 	bic.w	r3, r3, #8
 8003e56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	697a      	ldr	r2, [r7, #20]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	f023 0304 	bic.w	r3, r3, #4
 8003e68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a13      	ldr	r2, [pc, #76]	@ (8003ebc <TIM_OC1_SetConfig+0xc8>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d111      	bne.n	8003e96 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003e80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	685a      	ldr	r2, [r3, #4]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	697a      	ldr	r2, [r7, #20]
 8003eae:	621a      	str	r2, [r3, #32]
}
 8003eb0:	bf00      	nop
 8003eb2:	371c      	adds	r7, #28
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	40010000 	.word	0x40010000

08003ec0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b087      	sub	sp, #28
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
 8003ece:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a1b      	ldr	r3, [r3, #32]
 8003ed4:	f023 0210 	bic.w	r2, r3, #16
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003eee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ef6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	021b      	lsls	r3, r3, #8
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	f023 0320 	bic.w	r3, r3, #32
 8003f0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	011b      	lsls	r3, r3, #4
 8003f12:	697a      	ldr	r2, [r7, #20]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a1e      	ldr	r2, [pc, #120]	@ (8003f94 <TIM_OC2_SetConfig+0xd4>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d10d      	bne.n	8003f3c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	011b      	lsls	r3, r3, #4
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f3a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a15      	ldr	r2, [pc, #84]	@ (8003f94 <TIM_OC2_SetConfig+0xd4>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d113      	bne.n	8003f6c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003f52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	695b      	ldr	r3, [r3, #20]
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	693a      	ldr	r2, [r7, #16]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	621a      	str	r2, [r3, #32]
}
 8003f86:	bf00      	nop
 8003f88:	371c      	adds	r7, #28
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	40010000 	.word	0x40010000

08003f98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b087      	sub	sp, #28
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a1b      	ldr	r3, [r3, #32]
 8003fac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	69db      	ldr	r3, [r3, #28]
 8003fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f023 0303 	bic.w	r3, r3, #3
 8003fce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003fe0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	021b      	lsls	r3, r3, #8
 8003fe8:	697a      	ldr	r2, [r7, #20]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a1d      	ldr	r2, [pc, #116]	@ (8004068 <TIM_OC3_SetConfig+0xd0>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d10d      	bne.n	8004012 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003ffc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	021b      	lsls	r3, r3, #8
 8004004:	697a      	ldr	r2, [r7, #20]
 8004006:	4313      	orrs	r3, r2
 8004008:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004010:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a14      	ldr	r2, [pc, #80]	@ (8004068 <TIM_OC3_SetConfig+0xd0>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d113      	bne.n	8004042 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004020:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004028:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	011b      	lsls	r3, r3, #4
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	4313      	orrs	r3, r2
 8004034:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	011b      	lsls	r3, r3, #4
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	4313      	orrs	r3, r2
 8004040:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	685a      	ldr	r2, [r3, #4]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	621a      	str	r2, [r3, #32]
}
 800405c:	bf00      	nop
 800405e:	371c      	adds	r7, #28
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr
 8004068:	40010000 	.word	0x40010000

0800406c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800406c:	b480      	push	{r7}
 800406e:	b087      	sub	sp, #28
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a1b      	ldr	r3, [r3, #32]
 800407a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	69db      	ldr	r3, [r3, #28]
 8004092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800409a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	021b      	lsls	r3, r3, #8
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80040b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	031b      	lsls	r3, r3, #12
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a10      	ldr	r2, [pc, #64]	@ (8004108 <TIM_OC4_SetConfig+0x9c>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d109      	bne.n	80040e0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80040d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	019b      	lsls	r3, r3, #6
 80040da:	697a      	ldr	r2, [r7, #20]
 80040dc:	4313      	orrs	r3, r2
 80040de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	697a      	ldr	r2, [r7, #20]
 80040e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	68fa      	ldr	r2, [r7, #12]
 80040ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	685a      	ldr	r2, [r3, #4]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	621a      	str	r2, [r3, #32]
}
 80040fa:	bf00      	nop
 80040fc:	371c      	adds	r7, #28
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	40010000 	.word	0x40010000

0800410c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800410c:	b480      	push	{r7}
 800410e:	b087      	sub	sp, #28
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	f023 0201 	bic.w	r2, r3, #1
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004136:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	011b      	lsls	r3, r3, #4
 800413c:	693a      	ldr	r2, [r7, #16]
 800413e:	4313      	orrs	r3, r2
 8004140:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	f023 030a 	bic.w	r3, r3, #10
 8004148:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	4313      	orrs	r3, r2
 8004150:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	693a      	ldr	r2, [r7, #16]
 8004156:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	621a      	str	r2, [r3, #32]
}
 800415e:	bf00      	nop
 8004160:	371c      	adds	r7, #28
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800416a:	b480      	push	{r7}
 800416c:	b087      	sub	sp, #28
 800416e:	af00      	add	r7, sp, #0
 8004170:	60f8      	str	r0, [r7, #12]
 8004172:	60b9      	str	r1, [r7, #8]
 8004174:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6a1b      	ldr	r3, [r3, #32]
 8004180:	f023 0210 	bic.w	r2, r3, #16
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004194:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	031b      	lsls	r3, r3, #12
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	4313      	orrs	r3, r2
 800419e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80041a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	011b      	lsls	r3, r3, #4
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	621a      	str	r2, [r3, #32]
}
 80041be:	bf00      	nop
 80041c0:	371c      	adds	r7, #28
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr

080041ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041ca:	b480      	push	{r7}
 80041cc:	b085      	sub	sp, #20
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
 80041d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041e2:	683a      	ldr	r2, [r7, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	f043 0307 	orr.w	r3, r3, #7
 80041ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	609a      	str	r2, [r3, #8]
}
 80041f4:	bf00      	nop
 80041f6:	3714      	adds	r7, #20
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004200:	b480      	push	{r7}
 8004202:	b087      	sub	sp, #28
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
 800420c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800421a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	021a      	lsls	r2, r3, #8
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	431a      	orrs	r2, r3
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	4313      	orrs	r3, r2
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	4313      	orrs	r3, r2
 800422c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	609a      	str	r2, [r3, #8]
}
 8004234:	bf00      	nop
 8004236:	371c      	adds	r7, #28
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004240:	b480      	push	{r7}
 8004242:	b087      	sub	sp, #28
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	f003 031f 	and.w	r3, r3, #31
 8004252:	2201      	movs	r2, #1
 8004254:	fa02 f303 	lsl.w	r3, r2, r3
 8004258:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6a1a      	ldr	r2, [r3, #32]
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	43db      	mvns	r3, r3
 8004262:	401a      	ands	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6a1a      	ldr	r2, [r3, #32]
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	f003 031f 	and.w	r3, r3, #31
 8004272:	6879      	ldr	r1, [r7, #4]
 8004274:	fa01 f303 	lsl.w	r3, r1, r3
 8004278:	431a      	orrs	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	621a      	str	r2, [r3, #32]
}
 800427e:	bf00      	nop
 8004280:	371c      	adds	r7, #28
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
	...

0800428c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800429c:	2b01      	cmp	r3, #1
 800429e:	d101      	bne.n	80042a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042a0:	2302      	movs	r3, #2
 80042a2:	e050      	b.n	8004346 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2202      	movs	r2, #2
 80042b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a1c      	ldr	r2, [pc, #112]	@ (8004354 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d018      	beq.n	800431a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042f0:	d013      	beq.n	800431a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a18      	ldr	r2, [pc, #96]	@ (8004358 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d00e      	beq.n	800431a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a16      	ldr	r2, [pc, #88]	@ (800435c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d009      	beq.n	800431a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a15      	ldr	r2, [pc, #84]	@ (8004360 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d004      	beq.n	800431a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a13      	ldr	r2, [pc, #76]	@ (8004364 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d10c      	bne.n	8004334 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004320:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	68ba      	ldr	r2, [r7, #8]
 8004328:	4313      	orrs	r3, r2
 800432a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68ba      	ldr	r2, [r7, #8]
 8004332:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3714      	adds	r7, #20
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	40010000 	.word	0x40010000
 8004358:	40000400 	.word	0x40000400
 800435c:	40000800 	.word	0x40000800
 8004360:	40000c00 	.word	0x40000c00
 8004364:	40014000 	.word	0x40014000

08004368 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004384:	bf00      	nop
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d101      	bne.n	80043a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e042      	b.n	8004428 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d106      	bne.n	80043bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f7fc ffd4 	bl	8001364 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2224      	movs	r2, #36	@ 0x24
 80043c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68da      	ldr	r2, [r3, #12]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80043d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 fdbd 	bl	8004f54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	691a      	ldr	r2, [r3, #16]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80043e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	695a      	ldr	r2, [r3, #20]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80043f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68da      	ldr	r2, [r3, #12]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004408:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2220      	movs	r2, #32
 8004414:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2220      	movs	r2, #32
 800441c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3708      	adds	r7, #8
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b08a      	sub	sp, #40	@ 0x28
 8004434:	af02      	add	r7, sp, #8
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	603b      	str	r3, [r7, #0]
 800443c:	4613      	mov	r3, r2
 800443e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004440:	2300      	movs	r3, #0
 8004442:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800444a:	b2db      	uxtb	r3, r3
 800444c:	2b20      	cmp	r3, #32
 800444e:	d175      	bne.n	800453c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d002      	beq.n	800445c <HAL_UART_Transmit+0x2c>
 8004456:	88fb      	ldrh	r3, [r7, #6]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d101      	bne.n	8004460 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e06e      	b.n	800453e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2200      	movs	r2, #0
 8004464:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2221      	movs	r2, #33	@ 0x21
 800446a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800446e:	f7fd f931 	bl	80016d4 <HAL_GetTick>
 8004472:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	88fa      	ldrh	r2, [r7, #6]
 8004478:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	88fa      	ldrh	r2, [r7, #6]
 800447e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004488:	d108      	bne.n	800449c <HAL_UART_Transmit+0x6c>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d104      	bne.n	800449c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004492:	2300      	movs	r3, #0
 8004494:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	61bb      	str	r3, [r7, #24]
 800449a:	e003      	b.n	80044a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044a0:	2300      	movs	r3, #0
 80044a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80044a4:	e02e      	b.n	8004504 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	2200      	movs	r2, #0
 80044ae:	2180      	movs	r1, #128	@ 0x80
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	f000 fb1f 	bl	8004af4 <UART_WaitOnFlagUntilTimeout>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d005      	beq.n	80044c8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2220      	movs	r2, #32
 80044c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e03a      	b.n	800453e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d10b      	bne.n	80044e6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	881b      	ldrh	r3, [r3, #0]
 80044d2:	461a      	mov	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	3302      	adds	r3, #2
 80044e2:	61bb      	str	r3, [r7, #24]
 80044e4:	e007      	b.n	80044f6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	781a      	ldrb	r2, [r3, #0]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	3301      	adds	r3, #1
 80044f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	3b01      	subs	r3, #1
 80044fe:	b29a      	uxth	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004508:	b29b      	uxth	r3, r3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1cb      	bne.n	80044a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	9300      	str	r3, [sp, #0]
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	2200      	movs	r2, #0
 8004516:	2140      	movs	r1, #64	@ 0x40
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f000 faeb 	bl	8004af4 <UART_WaitOnFlagUntilTimeout>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d005      	beq.n	8004530 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2220      	movs	r2, #32
 8004528:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e006      	b.n	800453e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2220      	movs	r2, #32
 8004534:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004538:	2300      	movs	r3, #0
 800453a:	e000      	b.n	800453e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800453c:	2302      	movs	r3, #2
  }
}
 800453e:	4618      	mov	r0, r3
 8004540:	3720      	adds	r7, #32
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b084      	sub	sp, #16
 800454a:	af00      	add	r7, sp, #0
 800454c:	60f8      	str	r0, [r7, #12]
 800454e:	60b9      	str	r1, [r7, #8]
 8004550:	4613      	mov	r3, r2
 8004552:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800455a:	b2db      	uxtb	r3, r3
 800455c:	2b20      	cmp	r3, #32
 800455e:	d112      	bne.n	8004586 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d002      	beq.n	800456c <HAL_UART_Receive_IT+0x26>
 8004566:	88fb      	ldrh	r3, [r7, #6]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d101      	bne.n	8004570 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e00b      	b.n	8004588 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004576:	88fb      	ldrh	r3, [r7, #6]
 8004578:	461a      	mov	r2, r3
 800457a:	68b9      	ldr	r1, [r7, #8]
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f000 fb12 	bl	8004ba6 <UART_Start_Receive_IT>
 8004582:	4603      	mov	r3, r0
 8004584:	e000      	b.n	8004588 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004586:	2302      	movs	r3, #2
  }
}
 8004588:	4618      	mov	r0, r3
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b0ba      	sub	sp, #232	@ 0xe8
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80045b6:	2300      	movs	r3, #0
 80045b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80045bc:	2300      	movs	r3, #0
 80045be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80045c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045c6:	f003 030f 	and.w	r3, r3, #15
 80045ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80045ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10f      	bne.n	80045f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045da:	f003 0320 	and.w	r3, r3, #32
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d009      	beq.n	80045f6 <HAL_UART_IRQHandler+0x66>
 80045e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045e6:	f003 0320 	and.w	r3, r3, #32
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d003      	beq.n	80045f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 fbf2 	bl	8004dd8 <UART_Receive_IT>
      return;
 80045f4:	e25b      	b.n	8004aae <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80045f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f000 80de 	beq.w	80047bc <HAL_UART_IRQHandler+0x22c>
 8004600:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004604:	f003 0301 	and.w	r3, r3, #1
 8004608:	2b00      	cmp	r3, #0
 800460a:	d106      	bne.n	800461a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800460c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004610:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004614:	2b00      	cmp	r3, #0
 8004616:	f000 80d1 	beq.w	80047bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800461a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800461e:	f003 0301 	and.w	r3, r3, #1
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00b      	beq.n	800463e <HAL_UART_IRQHandler+0xae>
 8004626:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800462a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800462e:	2b00      	cmp	r3, #0
 8004630:	d005      	beq.n	800463e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004636:	f043 0201 	orr.w	r2, r3, #1
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800463e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004642:	f003 0304 	and.w	r3, r3, #4
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00b      	beq.n	8004662 <HAL_UART_IRQHandler+0xd2>
 800464a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b00      	cmp	r3, #0
 8004654:	d005      	beq.n	8004662 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800465a:	f043 0202 	orr.w	r2, r3, #2
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00b      	beq.n	8004686 <HAL_UART_IRQHandler+0xf6>
 800466e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	2b00      	cmp	r3, #0
 8004678:	d005      	beq.n	8004686 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800467e:	f043 0204 	orr.w	r2, r3, #4
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800468a:	f003 0308 	and.w	r3, r3, #8
 800468e:	2b00      	cmp	r3, #0
 8004690:	d011      	beq.n	80046b6 <HAL_UART_IRQHandler+0x126>
 8004692:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004696:	f003 0320 	and.w	r3, r3, #32
 800469a:	2b00      	cmp	r3, #0
 800469c:	d105      	bne.n	80046aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800469e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046a2:	f003 0301 	and.w	r3, r3, #1
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d005      	beq.n	80046b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ae:	f043 0208 	orr.w	r2, r3, #8
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f000 81f2 	beq.w	8004aa4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046c4:	f003 0320 	and.w	r3, r3, #32
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d008      	beq.n	80046de <HAL_UART_IRQHandler+0x14e>
 80046cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046d0:	f003 0320 	and.w	r3, r3, #32
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d002      	beq.n	80046de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 fb7d 	bl	8004dd8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	695b      	ldr	r3, [r3, #20]
 80046e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046e8:	2b40      	cmp	r3, #64	@ 0x40
 80046ea:	bf0c      	ite	eq
 80046ec:	2301      	moveq	r3, #1
 80046ee:	2300      	movne	r3, #0
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046fa:	f003 0308 	and.w	r3, r3, #8
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d103      	bne.n	800470a <HAL_UART_IRQHandler+0x17a>
 8004702:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004706:	2b00      	cmp	r3, #0
 8004708:	d04f      	beq.n	80047aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 fa85 	bl	8004c1a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800471a:	2b40      	cmp	r3, #64	@ 0x40
 800471c:	d141      	bne.n	80047a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	3314      	adds	r3, #20
 8004724:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004728:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800472c:	e853 3f00 	ldrex	r3, [r3]
 8004730:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004734:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004738:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800473c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	3314      	adds	r3, #20
 8004746:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800474a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800474e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004752:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004756:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800475a:	e841 2300 	strex	r3, r2, [r1]
 800475e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004762:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1d9      	bne.n	800471e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800476e:	2b00      	cmp	r3, #0
 8004770:	d013      	beq.n	800479a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004776:	4a7e      	ldr	r2, [pc, #504]	@ (8004970 <HAL_UART_IRQHandler+0x3e0>)
 8004778:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800477e:	4618      	mov	r0, r3
 8004780:	f7fd fa3c 	bl	8001bfc <HAL_DMA_Abort_IT>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d016      	beq.n	80047b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800478e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004794:	4610      	mov	r0, r2
 8004796:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004798:	e00e      	b.n	80047b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 f994 	bl	8004ac8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047a0:	e00a      	b.n	80047b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 f990 	bl	8004ac8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047a8:	e006      	b.n	80047b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f98c 	bl	8004ac8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80047b6:	e175      	b.n	8004aa4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b8:	bf00      	nop
    return;
 80047ba:	e173      	b.n	8004aa4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	f040 814f 	bne.w	8004a64 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80047c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047ca:	f003 0310 	and.w	r3, r3, #16
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	f000 8148 	beq.w	8004a64 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80047d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047d8:	f003 0310 	and.w	r3, r3, #16
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f000 8141 	beq.w	8004a64 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047e2:	2300      	movs	r3, #0
 80047e4:	60bb      	str	r3, [r7, #8]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	60bb      	str	r3, [r7, #8]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	60bb      	str	r3, [r7, #8]
 80047f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004802:	2b40      	cmp	r3, #64	@ 0x40
 8004804:	f040 80b6 	bne.w	8004974 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004814:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004818:	2b00      	cmp	r3, #0
 800481a:	f000 8145 	beq.w	8004aa8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004822:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004826:	429a      	cmp	r2, r3
 8004828:	f080 813e 	bcs.w	8004aa8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004832:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004838:	69db      	ldr	r3, [r3, #28]
 800483a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800483e:	f000 8088 	beq.w	8004952 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	330c      	adds	r3, #12
 8004848:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004850:	e853 3f00 	ldrex	r3, [r3]
 8004854:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004858:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800485c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004860:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	330c      	adds	r3, #12
 800486a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800486e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004872:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004876:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800487a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800487e:	e841 2300 	strex	r3, r2, [r1]
 8004882:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004886:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1d9      	bne.n	8004842 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	3314      	adds	r3, #20
 8004894:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004896:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004898:	e853 3f00 	ldrex	r3, [r3]
 800489c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800489e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80048a0:	f023 0301 	bic.w	r3, r3, #1
 80048a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	3314      	adds	r3, #20
 80048ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80048b2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80048b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80048ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80048be:	e841 2300 	strex	r3, r2, [r1]
 80048c2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80048c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1e1      	bne.n	800488e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	3314      	adds	r3, #20
 80048d0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80048d4:	e853 3f00 	ldrex	r3, [r3]
 80048d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80048da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80048dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	3314      	adds	r3, #20
 80048ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80048ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80048f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80048f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80048f6:	e841 2300 	strex	r3, r2, [r1]
 80048fa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80048fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1e3      	bne.n	80048ca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2220      	movs	r2, #32
 8004906:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	330c      	adds	r3, #12
 8004916:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004918:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800491a:	e853 3f00 	ldrex	r3, [r3]
 800491e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004920:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004922:	f023 0310 	bic.w	r3, r3, #16
 8004926:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	330c      	adds	r3, #12
 8004930:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004934:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004936:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004938:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800493a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800493c:	e841 2300 	strex	r3, r2, [r1]
 8004940:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004942:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1e3      	bne.n	8004910 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800494c:	4618      	mov	r0, r3
 800494e:	f7fd f8e5 	bl	8001b1c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2202      	movs	r2, #2
 8004956:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004960:	b29b      	uxth	r3, r3
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	b29b      	uxth	r3, r3
 8004966:	4619      	mov	r1, r3
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 f8b7 	bl	8004adc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800496e:	e09b      	b.n	8004aa8 <HAL_UART_IRQHandler+0x518>
 8004970:	08004ce1 	.word	0x08004ce1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800497c:	b29b      	uxth	r3, r3
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004988:	b29b      	uxth	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	f000 808e 	beq.w	8004aac <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004990:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004994:	2b00      	cmp	r3, #0
 8004996:	f000 8089 	beq.w	8004aac <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	330c      	adds	r3, #12
 80049a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049a4:	e853 3f00 	ldrex	r3, [r3]
 80049a8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80049aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	330c      	adds	r3, #12
 80049ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80049be:	647a      	str	r2, [r7, #68]	@ 0x44
 80049c0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80049c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80049c6:	e841 2300 	strex	r3, r2, [r1]
 80049ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80049cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1e3      	bne.n	800499a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	3314      	adds	r3, #20
 80049d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049dc:	e853 3f00 	ldrex	r3, [r3]
 80049e0:	623b      	str	r3, [r7, #32]
   return(result);
 80049e2:	6a3b      	ldr	r3, [r7, #32]
 80049e4:	f023 0301 	bic.w	r3, r3, #1
 80049e8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	3314      	adds	r3, #20
 80049f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80049f6:	633a      	str	r2, [r7, #48]	@ 0x30
 80049f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80049fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049fe:	e841 2300 	strex	r3, r2, [r1]
 8004a02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1e3      	bne.n	80049d2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2220      	movs	r2, #32
 8004a0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	330c      	adds	r3, #12
 8004a1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	e853 3f00 	ldrex	r3, [r3]
 8004a26:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f023 0310 	bic.w	r3, r3, #16
 8004a2e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	330c      	adds	r3, #12
 8004a38:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004a3c:	61fa      	str	r2, [r7, #28]
 8004a3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a40:	69b9      	ldr	r1, [r7, #24]
 8004a42:	69fa      	ldr	r2, [r7, #28]
 8004a44:	e841 2300 	strex	r3, r2, [r1]
 8004a48:	617b      	str	r3, [r7, #20]
   return(result);
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d1e3      	bne.n	8004a18 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2202      	movs	r2, #2
 8004a54:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a56:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 f83d 	bl	8004adc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a62:	e023      	b.n	8004aac <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d009      	beq.n	8004a84 <HAL_UART_IRQHandler+0x4f4>
 8004a70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d003      	beq.n	8004a84 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 f943 	bl	8004d08 <UART_Transmit_IT>
    return;
 8004a82:	e014      	b.n	8004aae <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d00e      	beq.n	8004aae <HAL_UART_IRQHandler+0x51e>
 8004a90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d008      	beq.n	8004aae <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f000 f983 	bl	8004da8 <UART_EndTransmit_IT>
    return;
 8004aa2:	e004      	b.n	8004aae <HAL_UART_IRQHandler+0x51e>
    return;
 8004aa4:	bf00      	nop
 8004aa6:	e002      	b.n	8004aae <HAL_UART_IRQHandler+0x51e>
      return;
 8004aa8:	bf00      	nop
 8004aaa:	e000      	b.n	8004aae <HAL_UART_IRQHandler+0x51e>
      return;
 8004aac:	bf00      	nop
  }
}
 8004aae:	37e8      	adds	r7, #232	@ 0xe8
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004abc:	bf00      	nop
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004ad0:	bf00      	nop
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b086      	sub	sp, #24
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	603b      	str	r3, [r7, #0]
 8004b00:	4613      	mov	r3, r2
 8004b02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b04:	e03b      	b.n	8004b7e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b06:	6a3b      	ldr	r3, [r7, #32]
 8004b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b0c:	d037      	beq.n	8004b7e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b0e:	f7fc fde1 	bl	80016d4 <HAL_GetTick>
 8004b12:	4602      	mov	r2, r0
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	6a3a      	ldr	r2, [r7, #32]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d302      	bcc.n	8004b24 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b1e:	6a3b      	ldr	r3, [r7, #32]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d101      	bne.n	8004b28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e03a      	b.n	8004b9e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	f003 0304 	and.w	r3, r3, #4
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d023      	beq.n	8004b7e <UART_WaitOnFlagUntilTimeout+0x8a>
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	2b80      	cmp	r3, #128	@ 0x80
 8004b3a:	d020      	beq.n	8004b7e <UART_WaitOnFlagUntilTimeout+0x8a>
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	2b40      	cmp	r3, #64	@ 0x40
 8004b40:	d01d      	beq.n	8004b7e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0308 	and.w	r3, r3, #8
 8004b4c:	2b08      	cmp	r3, #8
 8004b4e:	d116      	bne.n	8004b7e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004b50:	2300      	movs	r3, #0
 8004b52:	617b      	str	r3, [r7, #20]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	617b      	str	r3, [r7, #20]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	617b      	str	r3, [r7, #20]
 8004b64:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f000 f857 	bl	8004c1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2208      	movs	r2, #8
 8004b70:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e00f      	b.n	8004b9e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	4013      	ands	r3, r2
 8004b88:	68ba      	ldr	r2, [r7, #8]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	bf0c      	ite	eq
 8004b8e:	2301      	moveq	r3, #1
 8004b90:	2300      	movne	r3, #0
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	461a      	mov	r2, r3
 8004b96:	79fb      	ldrb	r3, [r7, #7]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d0b4      	beq.n	8004b06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3718      	adds	r7, #24
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	b085      	sub	sp, #20
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	60f8      	str	r0, [r7, #12]
 8004bae:	60b9      	str	r1, [r7, #8]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	68ba      	ldr	r2, [r7, #8]
 8004bb8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	88fa      	ldrh	r2, [r7, #6]
 8004bbe:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	88fa      	ldrh	r2, [r7, #6]
 8004bc4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2222      	movs	r2, #34	@ 0x22
 8004bd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d007      	beq.n	8004bec <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68da      	ldr	r2, [r3, #12]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004bea:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	695a      	ldr	r2, [r3, #20]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f042 0201 	orr.w	r2, r2, #1
 8004bfa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68da      	ldr	r2, [r3, #12]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f042 0220 	orr.w	r2, r2, #32
 8004c0a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3714      	adds	r7, #20
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr

08004c1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c1a:	b480      	push	{r7}
 8004c1c:	b095      	sub	sp, #84	@ 0x54
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	330c      	adds	r3, #12
 8004c28:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c2c:	e853 3f00 	ldrex	r3, [r3]
 8004c30:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	330c      	adds	r3, #12
 8004c40:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c42:	643a      	str	r2, [r7, #64]	@ 0x40
 8004c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c46:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c48:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c4a:	e841 2300 	strex	r3, r2, [r1]
 8004c4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1e5      	bne.n	8004c22 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	3314      	adds	r3, #20
 8004c5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5e:	6a3b      	ldr	r3, [r7, #32]
 8004c60:	e853 3f00 	ldrex	r3, [r3]
 8004c64:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	f023 0301 	bic.w	r3, r3, #1
 8004c6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	3314      	adds	r3, #20
 8004c74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c78:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c7e:	e841 2300 	strex	r3, r2, [r1]
 8004c82:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1e5      	bne.n	8004c56 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d119      	bne.n	8004cc6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	330c      	adds	r3, #12
 8004c98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	e853 3f00 	ldrex	r3, [r3]
 8004ca0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	f023 0310 	bic.w	r3, r3, #16
 8004ca8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	330c      	adds	r3, #12
 8004cb0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004cb2:	61ba      	str	r2, [r7, #24]
 8004cb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb6:	6979      	ldr	r1, [r7, #20]
 8004cb8:	69ba      	ldr	r2, [r7, #24]
 8004cba:	e841 2300 	strex	r3, r2, [r1]
 8004cbe:	613b      	str	r3, [r7, #16]
   return(result);
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1e5      	bne.n	8004c92 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2220      	movs	r2, #32
 8004cca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004cd4:	bf00      	nop
 8004cd6:	3754      	adds	r7, #84	@ 0x54
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004cfa:	68f8      	ldr	r0, [r7, #12]
 8004cfc:	f7ff fee4 	bl	8004ac8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d00:	bf00      	nop
 8004d02:	3710      	adds	r7, #16
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	2b21      	cmp	r3, #33	@ 0x21
 8004d1a:	d13e      	bne.n	8004d9a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d24:	d114      	bne.n	8004d50 <UART_Transmit_IT+0x48>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d110      	bne.n	8004d50 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a1b      	ldr	r3, [r3, #32]
 8004d32:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	881b      	ldrh	r3, [r3, #0]
 8004d38:	461a      	mov	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d42:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a1b      	ldr	r3, [r3, #32]
 8004d48:	1c9a      	adds	r2, r3, #2
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	621a      	str	r2, [r3, #32]
 8004d4e:	e008      	b.n	8004d62 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a1b      	ldr	r3, [r3, #32]
 8004d54:	1c59      	adds	r1, r3, #1
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	6211      	str	r1, [r2, #32]
 8004d5a:	781a      	ldrb	r2, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	4619      	mov	r1, r3
 8004d70:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10f      	bne.n	8004d96 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68da      	ldr	r2, [r3, #12]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004d84:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68da      	ldr	r2, [r3, #12]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d94:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d96:	2300      	movs	r3, #0
 8004d98:	e000      	b.n	8004d9c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004d9a:	2302      	movs	r3, #2
  }
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3714      	adds	r7, #20
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68da      	ldr	r2, [r3, #12]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004dbe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2220      	movs	r2, #32
 8004dc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f7ff fe73 	bl	8004ab4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3708      	adds	r7, #8
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b08c      	sub	sp, #48	@ 0x30
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	2b22      	cmp	r3, #34	@ 0x22
 8004dea:	f040 80ae 	bne.w	8004f4a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004df6:	d117      	bne.n	8004e28 <UART_Receive_IT+0x50>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d113      	bne.n	8004e28 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004e00:	2300      	movs	r3, #0
 8004e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e08:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e1a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e20:	1c9a      	adds	r2, r3, #2
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	629a      	str	r2, [r3, #40]	@ 0x28
 8004e26:	e026      	b.n	8004e76 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e3a:	d007      	beq.n	8004e4c <UART_Receive_IT+0x74>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d10a      	bne.n	8004e5a <UART_Receive_IT+0x82>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d106      	bne.n	8004e5a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	b2da      	uxtb	r2, r3
 8004e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e56:	701a      	strb	r2, [r3, #0]
 8004e58:	e008      	b.n	8004e6c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e66:	b2da      	uxtb	r2, r3
 8004e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e6a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e70:	1c5a      	adds	r2, r3, #1
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	4619      	mov	r1, r3
 8004e84:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d15d      	bne.n	8004f46 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68da      	ldr	r2, [r3, #12]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f022 0220 	bic.w	r2, r2, #32
 8004e98:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68da      	ldr	r2, [r3, #12]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ea8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	695a      	ldr	r2, [r3, #20]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f022 0201 	bic.w	r2, r2, #1
 8004eb8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2220      	movs	r2, #32
 8004ebe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d135      	bne.n	8004f3c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	330c      	adds	r3, #12
 8004edc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	e853 3f00 	ldrex	r3, [r3]
 8004ee4:	613b      	str	r3, [r7, #16]
   return(result);
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	f023 0310 	bic.w	r3, r3, #16
 8004eec:	627b      	str	r3, [r7, #36]	@ 0x24
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	330c      	adds	r3, #12
 8004ef4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ef6:	623a      	str	r2, [r7, #32]
 8004ef8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efa:	69f9      	ldr	r1, [r7, #28]
 8004efc:	6a3a      	ldr	r2, [r7, #32]
 8004efe:	e841 2300 	strex	r3, r2, [r1]
 8004f02:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1e5      	bne.n	8004ed6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0310 	and.w	r3, r3, #16
 8004f14:	2b10      	cmp	r3, #16
 8004f16:	d10a      	bne.n	8004f2e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f18:	2300      	movs	r3, #0
 8004f1a:	60fb      	str	r3, [r7, #12]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	60fb      	str	r3, [r7, #12]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	60fb      	str	r3, [r7, #12]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004f32:	4619      	mov	r1, r3
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f7ff fdd1 	bl	8004adc <HAL_UARTEx_RxEventCallback>
 8004f3a:	e002      	b.n	8004f42 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f7fb fc39 	bl	80007b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004f42:	2300      	movs	r3, #0
 8004f44:	e002      	b.n	8004f4c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004f46:	2300      	movs	r3, #0
 8004f48:	e000      	b.n	8004f4c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004f4a:	2302      	movs	r3, #2
  }
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3730      	adds	r7, #48	@ 0x30
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f58:	b0c0      	sub	sp, #256	@ 0x100
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f70:	68d9      	ldr	r1, [r3, #12]
 8004f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	ea40 0301 	orr.w	r3, r0, r1
 8004f7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f82:	689a      	ldr	r2, [r3, #8]
 8004f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	431a      	orrs	r2, r3
 8004f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f90:	695b      	ldr	r3, [r3, #20]
 8004f92:	431a      	orrs	r2, r3
 8004f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f98:	69db      	ldr	r3, [r3, #28]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004fac:	f021 010c 	bic.w	r1, r1, #12
 8004fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004fba:	430b      	orrs	r3, r1
 8004fbc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fce:	6999      	ldr	r1, [r3, #24]
 8004fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	ea40 0301 	orr.w	r3, r0, r1
 8004fda:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	4b8f      	ldr	r3, [pc, #572]	@ (8005220 <UART_SetConfig+0x2cc>)
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d005      	beq.n	8004ff4 <UART_SetConfig+0xa0>
 8004fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	4b8d      	ldr	r3, [pc, #564]	@ (8005224 <UART_SetConfig+0x2d0>)
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d104      	bne.n	8004ffe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ff4:	f7fd fec8 	bl	8002d88 <HAL_RCC_GetPCLK2Freq>
 8004ff8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004ffc:	e003      	b.n	8005006 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ffe:	f7fd feaf 	bl	8002d60 <HAL_RCC_GetPCLK1Freq>
 8005002:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800500a:	69db      	ldr	r3, [r3, #28]
 800500c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005010:	f040 810c 	bne.w	800522c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005014:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005018:	2200      	movs	r2, #0
 800501a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800501e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005022:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005026:	4622      	mov	r2, r4
 8005028:	462b      	mov	r3, r5
 800502a:	1891      	adds	r1, r2, r2
 800502c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800502e:	415b      	adcs	r3, r3
 8005030:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005032:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005036:	4621      	mov	r1, r4
 8005038:	eb12 0801 	adds.w	r8, r2, r1
 800503c:	4629      	mov	r1, r5
 800503e:	eb43 0901 	adc.w	r9, r3, r1
 8005042:	f04f 0200 	mov.w	r2, #0
 8005046:	f04f 0300 	mov.w	r3, #0
 800504a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800504e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005052:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005056:	4690      	mov	r8, r2
 8005058:	4699      	mov	r9, r3
 800505a:	4623      	mov	r3, r4
 800505c:	eb18 0303 	adds.w	r3, r8, r3
 8005060:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005064:	462b      	mov	r3, r5
 8005066:	eb49 0303 	adc.w	r3, r9, r3
 800506a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800506e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800507a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800507e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005082:	460b      	mov	r3, r1
 8005084:	18db      	adds	r3, r3, r3
 8005086:	653b      	str	r3, [r7, #80]	@ 0x50
 8005088:	4613      	mov	r3, r2
 800508a:	eb42 0303 	adc.w	r3, r2, r3
 800508e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005090:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005094:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005098:	f7fb f8f2 	bl	8000280 <__aeabi_uldivmod>
 800509c:	4602      	mov	r2, r0
 800509e:	460b      	mov	r3, r1
 80050a0:	4b61      	ldr	r3, [pc, #388]	@ (8005228 <UART_SetConfig+0x2d4>)
 80050a2:	fba3 2302 	umull	r2, r3, r3, r2
 80050a6:	095b      	lsrs	r3, r3, #5
 80050a8:	011c      	lsls	r4, r3, #4
 80050aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050ae:	2200      	movs	r2, #0
 80050b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80050b4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80050b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80050bc:	4642      	mov	r2, r8
 80050be:	464b      	mov	r3, r9
 80050c0:	1891      	adds	r1, r2, r2
 80050c2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80050c4:	415b      	adcs	r3, r3
 80050c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80050cc:	4641      	mov	r1, r8
 80050ce:	eb12 0a01 	adds.w	sl, r2, r1
 80050d2:	4649      	mov	r1, r9
 80050d4:	eb43 0b01 	adc.w	fp, r3, r1
 80050d8:	f04f 0200 	mov.w	r2, #0
 80050dc:	f04f 0300 	mov.w	r3, #0
 80050e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80050e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80050e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050ec:	4692      	mov	sl, r2
 80050ee:	469b      	mov	fp, r3
 80050f0:	4643      	mov	r3, r8
 80050f2:	eb1a 0303 	adds.w	r3, sl, r3
 80050f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80050fa:	464b      	mov	r3, r9
 80050fc:	eb4b 0303 	adc.w	r3, fp, r3
 8005100:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005110:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005114:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005118:	460b      	mov	r3, r1
 800511a:	18db      	adds	r3, r3, r3
 800511c:	643b      	str	r3, [r7, #64]	@ 0x40
 800511e:	4613      	mov	r3, r2
 8005120:	eb42 0303 	adc.w	r3, r2, r3
 8005124:	647b      	str	r3, [r7, #68]	@ 0x44
 8005126:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800512a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800512e:	f7fb f8a7 	bl	8000280 <__aeabi_uldivmod>
 8005132:	4602      	mov	r2, r0
 8005134:	460b      	mov	r3, r1
 8005136:	4611      	mov	r1, r2
 8005138:	4b3b      	ldr	r3, [pc, #236]	@ (8005228 <UART_SetConfig+0x2d4>)
 800513a:	fba3 2301 	umull	r2, r3, r3, r1
 800513e:	095b      	lsrs	r3, r3, #5
 8005140:	2264      	movs	r2, #100	@ 0x64
 8005142:	fb02 f303 	mul.w	r3, r2, r3
 8005146:	1acb      	subs	r3, r1, r3
 8005148:	00db      	lsls	r3, r3, #3
 800514a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800514e:	4b36      	ldr	r3, [pc, #216]	@ (8005228 <UART_SetConfig+0x2d4>)
 8005150:	fba3 2302 	umull	r2, r3, r3, r2
 8005154:	095b      	lsrs	r3, r3, #5
 8005156:	005b      	lsls	r3, r3, #1
 8005158:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800515c:	441c      	add	r4, r3
 800515e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005162:	2200      	movs	r2, #0
 8005164:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005168:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800516c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005170:	4642      	mov	r2, r8
 8005172:	464b      	mov	r3, r9
 8005174:	1891      	adds	r1, r2, r2
 8005176:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005178:	415b      	adcs	r3, r3
 800517a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800517c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005180:	4641      	mov	r1, r8
 8005182:	1851      	adds	r1, r2, r1
 8005184:	6339      	str	r1, [r7, #48]	@ 0x30
 8005186:	4649      	mov	r1, r9
 8005188:	414b      	adcs	r3, r1
 800518a:	637b      	str	r3, [r7, #52]	@ 0x34
 800518c:	f04f 0200 	mov.w	r2, #0
 8005190:	f04f 0300 	mov.w	r3, #0
 8005194:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005198:	4659      	mov	r1, fp
 800519a:	00cb      	lsls	r3, r1, #3
 800519c:	4651      	mov	r1, sl
 800519e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051a2:	4651      	mov	r1, sl
 80051a4:	00ca      	lsls	r2, r1, #3
 80051a6:	4610      	mov	r0, r2
 80051a8:	4619      	mov	r1, r3
 80051aa:	4603      	mov	r3, r0
 80051ac:	4642      	mov	r2, r8
 80051ae:	189b      	adds	r3, r3, r2
 80051b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80051b4:	464b      	mov	r3, r9
 80051b6:	460a      	mov	r2, r1
 80051b8:	eb42 0303 	adc.w	r3, r2, r3
 80051bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80051c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80051cc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80051d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80051d4:	460b      	mov	r3, r1
 80051d6:	18db      	adds	r3, r3, r3
 80051d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051da:	4613      	mov	r3, r2
 80051dc:	eb42 0303 	adc.w	r3, r2, r3
 80051e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80051e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80051ea:	f7fb f849 	bl	8000280 <__aeabi_uldivmod>
 80051ee:	4602      	mov	r2, r0
 80051f0:	460b      	mov	r3, r1
 80051f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005228 <UART_SetConfig+0x2d4>)
 80051f4:	fba3 1302 	umull	r1, r3, r3, r2
 80051f8:	095b      	lsrs	r3, r3, #5
 80051fa:	2164      	movs	r1, #100	@ 0x64
 80051fc:	fb01 f303 	mul.w	r3, r1, r3
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	00db      	lsls	r3, r3, #3
 8005204:	3332      	adds	r3, #50	@ 0x32
 8005206:	4a08      	ldr	r2, [pc, #32]	@ (8005228 <UART_SetConfig+0x2d4>)
 8005208:	fba2 2303 	umull	r2, r3, r2, r3
 800520c:	095b      	lsrs	r3, r3, #5
 800520e:	f003 0207 	and.w	r2, r3, #7
 8005212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4422      	add	r2, r4
 800521a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800521c:	e106      	b.n	800542c <UART_SetConfig+0x4d8>
 800521e:	bf00      	nop
 8005220:	40011000 	.word	0x40011000
 8005224:	40011400 	.word	0x40011400
 8005228:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800522c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005230:	2200      	movs	r2, #0
 8005232:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005236:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800523a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800523e:	4642      	mov	r2, r8
 8005240:	464b      	mov	r3, r9
 8005242:	1891      	adds	r1, r2, r2
 8005244:	6239      	str	r1, [r7, #32]
 8005246:	415b      	adcs	r3, r3
 8005248:	627b      	str	r3, [r7, #36]	@ 0x24
 800524a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800524e:	4641      	mov	r1, r8
 8005250:	1854      	adds	r4, r2, r1
 8005252:	4649      	mov	r1, r9
 8005254:	eb43 0501 	adc.w	r5, r3, r1
 8005258:	f04f 0200 	mov.w	r2, #0
 800525c:	f04f 0300 	mov.w	r3, #0
 8005260:	00eb      	lsls	r3, r5, #3
 8005262:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005266:	00e2      	lsls	r2, r4, #3
 8005268:	4614      	mov	r4, r2
 800526a:	461d      	mov	r5, r3
 800526c:	4643      	mov	r3, r8
 800526e:	18e3      	adds	r3, r4, r3
 8005270:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005274:	464b      	mov	r3, r9
 8005276:	eb45 0303 	adc.w	r3, r5, r3
 800527a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800527e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800528a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800528e:	f04f 0200 	mov.w	r2, #0
 8005292:	f04f 0300 	mov.w	r3, #0
 8005296:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800529a:	4629      	mov	r1, r5
 800529c:	008b      	lsls	r3, r1, #2
 800529e:	4621      	mov	r1, r4
 80052a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052a4:	4621      	mov	r1, r4
 80052a6:	008a      	lsls	r2, r1, #2
 80052a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80052ac:	f7fa ffe8 	bl	8000280 <__aeabi_uldivmod>
 80052b0:	4602      	mov	r2, r0
 80052b2:	460b      	mov	r3, r1
 80052b4:	4b60      	ldr	r3, [pc, #384]	@ (8005438 <UART_SetConfig+0x4e4>)
 80052b6:	fba3 2302 	umull	r2, r3, r3, r2
 80052ba:	095b      	lsrs	r3, r3, #5
 80052bc:	011c      	lsls	r4, r3, #4
 80052be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052c2:	2200      	movs	r2, #0
 80052c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80052c8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80052cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80052d0:	4642      	mov	r2, r8
 80052d2:	464b      	mov	r3, r9
 80052d4:	1891      	adds	r1, r2, r2
 80052d6:	61b9      	str	r1, [r7, #24]
 80052d8:	415b      	adcs	r3, r3
 80052da:	61fb      	str	r3, [r7, #28]
 80052dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052e0:	4641      	mov	r1, r8
 80052e2:	1851      	adds	r1, r2, r1
 80052e4:	6139      	str	r1, [r7, #16]
 80052e6:	4649      	mov	r1, r9
 80052e8:	414b      	adcs	r3, r1
 80052ea:	617b      	str	r3, [r7, #20]
 80052ec:	f04f 0200 	mov.w	r2, #0
 80052f0:	f04f 0300 	mov.w	r3, #0
 80052f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052f8:	4659      	mov	r1, fp
 80052fa:	00cb      	lsls	r3, r1, #3
 80052fc:	4651      	mov	r1, sl
 80052fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005302:	4651      	mov	r1, sl
 8005304:	00ca      	lsls	r2, r1, #3
 8005306:	4610      	mov	r0, r2
 8005308:	4619      	mov	r1, r3
 800530a:	4603      	mov	r3, r0
 800530c:	4642      	mov	r2, r8
 800530e:	189b      	adds	r3, r3, r2
 8005310:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005314:	464b      	mov	r3, r9
 8005316:	460a      	mov	r2, r1
 8005318:	eb42 0303 	adc.w	r3, r2, r3
 800531c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	67bb      	str	r3, [r7, #120]	@ 0x78
 800532a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800532c:	f04f 0200 	mov.w	r2, #0
 8005330:	f04f 0300 	mov.w	r3, #0
 8005334:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005338:	4649      	mov	r1, r9
 800533a:	008b      	lsls	r3, r1, #2
 800533c:	4641      	mov	r1, r8
 800533e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005342:	4641      	mov	r1, r8
 8005344:	008a      	lsls	r2, r1, #2
 8005346:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800534a:	f7fa ff99 	bl	8000280 <__aeabi_uldivmod>
 800534e:	4602      	mov	r2, r0
 8005350:	460b      	mov	r3, r1
 8005352:	4611      	mov	r1, r2
 8005354:	4b38      	ldr	r3, [pc, #224]	@ (8005438 <UART_SetConfig+0x4e4>)
 8005356:	fba3 2301 	umull	r2, r3, r3, r1
 800535a:	095b      	lsrs	r3, r3, #5
 800535c:	2264      	movs	r2, #100	@ 0x64
 800535e:	fb02 f303 	mul.w	r3, r2, r3
 8005362:	1acb      	subs	r3, r1, r3
 8005364:	011b      	lsls	r3, r3, #4
 8005366:	3332      	adds	r3, #50	@ 0x32
 8005368:	4a33      	ldr	r2, [pc, #204]	@ (8005438 <UART_SetConfig+0x4e4>)
 800536a:	fba2 2303 	umull	r2, r3, r2, r3
 800536e:	095b      	lsrs	r3, r3, #5
 8005370:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005374:	441c      	add	r4, r3
 8005376:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800537a:	2200      	movs	r2, #0
 800537c:	673b      	str	r3, [r7, #112]	@ 0x70
 800537e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005380:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005384:	4642      	mov	r2, r8
 8005386:	464b      	mov	r3, r9
 8005388:	1891      	adds	r1, r2, r2
 800538a:	60b9      	str	r1, [r7, #8]
 800538c:	415b      	adcs	r3, r3
 800538e:	60fb      	str	r3, [r7, #12]
 8005390:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005394:	4641      	mov	r1, r8
 8005396:	1851      	adds	r1, r2, r1
 8005398:	6039      	str	r1, [r7, #0]
 800539a:	4649      	mov	r1, r9
 800539c:	414b      	adcs	r3, r1
 800539e:	607b      	str	r3, [r7, #4]
 80053a0:	f04f 0200 	mov.w	r2, #0
 80053a4:	f04f 0300 	mov.w	r3, #0
 80053a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80053ac:	4659      	mov	r1, fp
 80053ae:	00cb      	lsls	r3, r1, #3
 80053b0:	4651      	mov	r1, sl
 80053b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053b6:	4651      	mov	r1, sl
 80053b8:	00ca      	lsls	r2, r1, #3
 80053ba:	4610      	mov	r0, r2
 80053bc:	4619      	mov	r1, r3
 80053be:	4603      	mov	r3, r0
 80053c0:	4642      	mov	r2, r8
 80053c2:	189b      	adds	r3, r3, r2
 80053c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80053c6:	464b      	mov	r3, r9
 80053c8:	460a      	mov	r2, r1
 80053ca:	eb42 0303 	adc.w	r3, r2, r3
 80053ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80053d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80053da:	667a      	str	r2, [r7, #100]	@ 0x64
 80053dc:	f04f 0200 	mov.w	r2, #0
 80053e0:	f04f 0300 	mov.w	r3, #0
 80053e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80053e8:	4649      	mov	r1, r9
 80053ea:	008b      	lsls	r3, r1, #2
 80053ec:	4641      	mov	r1, r8
 80053ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053f2:	4641      	mov	r1, r8
 80053f4:	008a      	lsls	r2, r1, #2
 80053f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80053fa:	f7fa ff41 	bl	8000280 <__aeabi_uldivmod>
 80053fe:	4602      	mov	r2, r0
 8005400:	460b      	mov	r3, r1
 8005402:	4b0d      	ldr	r3, [pc, #52]	@ (8005438 <UART_SetConfig+0x4e4>)
 8005404:	fba3 1302 	umull	r1, r3, r3, r2
 8005408:	095b      	lsrs	r3, r3, #5
 800540a:	2164      	movs	r1, #100	@ 0x64
 800540c:	fb01 f303 	mul.w	r3, r1, r3
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	011b      	lsls	r3, r3, #4
 8005414:	3332      	adds	r3, #50	@ 0x32
 8005416:	4a08      	ldr	r2, [pc, #32]	@ (8005438 <UART_SetConfig+0x4e4>)
 8005418:	fba2 2303 	umull	r2, r3, r2, r3
 800541c:	095b      	lsrs	r3, r3, #5
 800541e:	f003 020f 	and.w	r2, r3, #15
 8005422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4422      	add	r2, r4
 800542a:	609a      	str	r2, [r3, #8]
}
 800542c:	bf00      	nop
 800542e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005432:	46bd      	mov	sp, r7
 8005434:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005438:	51eb851f 	.word	0x51eb851f

0800543c <sniprintf>:
 800543c:	b40c      	push	{r2, r3}
 800543e:	b530      	push	{r4, r5, lr}
 8005440:	4b17      	ldr	r3, [pc, #92]	@ (80054a0 <sniprintf+0x64>)
 8005442:	1e0c      	subs	r4, r1, #0
 8005444:	681d      	ldr	r5, [r3, #0]
 8005446:	b09d      	sub	sp, #116	@ 0x74
 8005448:	da08      	bge.n	800545c <sniprintf+0x20>
 800544a:	238b      	movs	r3, #139	@ 0x8b
 800544c:	602b      	str	r3, [r5, #0]
 800544e:	f04f 30ff 	mov.w	r0, #4294967295
 8005452:	b01d      	add	sp, #116	@ 0x74
 8005454:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005458:	b002      	add	sp, #8
 800545a:	4770      	bx	lr
 800545c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005460:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005464:	bf14      	ite	ne
 8005466:	f104 33ff 	addne.w	r3, r4, #4294967295
 800546a:	4623      	moveq	r3, r4
 800546c:	9304      	str	r3, [sp, #16]
 800546e:	9307      	str	r3, [sp, #28]
 8005470:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005474:	9002      	str	r0, [sp, #8]
 8005476:	9006      	str	r0, [sp, #24]
 8005478:	f8ad 3016 	strh.w	r3, [sp, #22]
 800547c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800547e:	ab21      	add	r3, sp, #132	@ 0x84
 8005480:	a902      	add	r1, sp, #8
 8005482:	4628      	mov	r0, r5
 8005484:	9301      	str	r3, [sp, #4]
 8005486:	f000 f995 	bl	80057b4 <_svfiprintf_r>
 800548a:	1c43      	adds	r3, r0, #1
 800548c:	bfbc      	itt	lt
 800548e:	238b      	movlt	r3, #139	@ 0x8b
 8005490:	602b      	strlt	r3, [r5, #0]
 8005492:	2c00      	cmp	r4, #0
 8005494:	d0dd      	beq.n	8005452 <sniprintf+0x16>
 8005496:	9b02      	ldr	r3, [sp, #8]
 8005498:	2200      	movs	r2, #0
 800549a:	701a      	strb	r2, [r3, #0]
 800549c:	e7d9      	b.n	8005452 <sniprintf+0x16>
 800549e:	bf00      	nop
 80054a0:	200000dc 	.word	0x200000dc

080054a4 <memset>:
 80054a4:	4402      	add	r2, r0
 80054a6:	4603      	mov	r3, r0
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d100      	bne.n	80054ae <memset+0xa>
 80054ac:	4770      	bx	lr
 80054ae:	f803 1b01 	strb.w	r1, [r3], #1
 80054b2:	e7f9      	b.n	80054a8 <memset+0x4>

080054b4 <__errno>:
 80054b4:	4b01      	ldr	r3, [pc, #4]	@ (80054bc <__errno+0x8>)
 80054b6:	6818      	ldr	r0, [r3, #0]
 80054b8:	4770      	bx	lr
 80054ba:	bf00      	nop
 80054bc:	200000dc 	.word	0x200000dc

080054c0 <__libc_init_array>:
 80054c0:	b570      	push	{r4, r5, r6, lr}
 80054c2:	4d0d      	ldr	r5, [pc, #52]	@ (80054f8 <__libc_init_array+0x38>)
 80054c4:	4c0d      	ldr	r4, [pc, #52]	@ (80054fc <__libc_init_array+0x3c>)
 80054c6:	1b64      	subs	r4, r4, r5
 80054c8:	10a4      	asrs	r4, r4, #2
 80054ca:	2600      	movs	r6, #0
 80054cc:	42a6      	cmp	r6, r4
 80054ce:	d109      	bne.n	80054e4 <__libc_init_array+0x24>
 80054d0:	4d0b      	ldr	r5, [pc, #44]	@ (8005500 <__libc_init_array+0x40>)
 80054d2:	4c0c      	ldr	r4, [pc, #48]	@ (8005504 <__libc_init_array+0x44>)
 80054d4:	f000 fc66 	bl	8005da4 <_init>
 80054d8:	1b64      	subs	r4, r4, r5
 80054da:	10a4      	asrs	r4, r4, #2
 80054dc:	2600      	movs	r6, #0
 80054de:	42a6      	cmp	r6, r4
 80054e0:	d105      	bne.n	80054ee <__libc_init_array+0x2e>
 80054e2:	bd70      	pop	{r4, r5, r6, pc}
 80054e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80054e8:	4798      	blx	r3
 80054ea:	3601      	adds	r6, #1
 80054ec:	e7ee      	b.n	80054cc <__libc_init_array+0xc>
 80054ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80054f2:	4798      	blx	r3
 80054f4:	3601      	adds	r6, #1
 80054f6:	e7f2      	b.n	80054de <__libc_init_array+0x1e>
 80054f8:	08005e68 	.word	0x08005e68
 80054fc:	08005e68 	.word	0x08005e68
 8005500:	08005e68 	.word	0x08005e68
 8005504:	08005e6c 	.word	0x08005e6c

08005508 <__retarget_lock_acquire_recursive>:
 8005508:	4770      	bx	lr

0800550a <__retarget_lock_release_recursive>:
 800550a:	4770      	bx	lr

0800550c <_free_r>:
 800550c:	b538      	push	{r3, r4, r5, lr}
 800550e:	4605      	mov	r5, r0
 8005510:	2900      	cmp	r1, #0
 8005512:	d041      	beq.n	8005598 <_free_r+0x8c>
 8005514:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005518:	1f0c      	subs	r4, r1, #4
 800551a:	2b00      	cmp	r3, #0
 800551c:	bfb8      	it	lt
 800551e:	18e4      	addlt	r4, r4, r3
 8005520:	f000 f8e0 	bl	80056e4 <__malloc_lock>
 8005524:	4a1d      	ldr	r2, [pc, #116]	@ (800559c <_free_r+0x90>)
 8005526:	6813      	ldr	r3, [r2, #0]
 8005528:	b933      	cbnz	r3, 8005538 <_free_r+0x2c>
 800552a:	6063      	str	r3, [r4, #4]
 800552c:	6014      	str	r4, [r2, #0]
 800552e:	4628      	mov	r0, r5
 8005530:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005534:	f000 b8dc 	b.w	80056f0 <__malloc_unlock>
 8005538:	42a3      	cmp	r3, r4
 800553a:	d908      	bls.n	800554e <_free_r+0x42>
 800553c:	6820      	ldr	r0, [r4, #0]
 800553e:	1821      	adds	r1, r4, r0
 8005540:	428b      	cmp	r3, r1
 8005542:	bf01      	itttt	eq
 8005544:	6819      	ldreq	r1, [r3, #0]
 8005546:	685b      	ldreq	r3, [r3, #4]
 8005548:	1809      	addeq	r1, r1, r0
 800554a:	6021      	streq	r1, [r4, #0]
 800554c:	e7ed      	b.n	800552a <_free_r+0x1e>
 800554e:	461a      	mov	r2, r3
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	b10b      	cbz	r3, 8005558 <_free_r+0x4c>
 8005554:	42a3      	cmp	r3, r4
 8005556:	d9fa      	bls.n	800554e <_free_r+0x42>
 8005558:	6811      	ldr	r1, [r2, #0]
 800555a:	1850      	adds	r0, r2, r1
 800555c:	42a0      	cmp	r0, r4
 800555e:	d10b      	bne.n	8005578 <_free_r+0x6c>
 8005560:	6820      	ldr	r0, [r4, #0]
 8005562:	4401      	add	r1, r0
 8005564:	1850      	adds	r0, r2, r1
 8005566:	4283      	cmp	r3, r0
 8005568:	6011      	str	r1, [r2, #0]
 800556a:	d1e0      	bne.n	800552e <_free_r+0x22>
 800556c:	6818      	ldr	r0, [r3, #0]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	6053      	str	r3, [r2, #4]
 8005572:	4408      	add	r0, r1
 8005574:	6010      	str	r0, [r2, #0]
 8005576:	e7da      	b.n	800552e <_free_r+0x22>
 8005578:	d902      	bls.n	8005580 <_free_r+0x74>
 800557a:	230c      	movs	r3, #12
 800557c:	602b      	str	r3, [r5, #0]
 800557e:	e7d6      	b.n	800552e <_free_r+0x22>
 8005580:	6820      	ldr	r0, [r4, #0]
 8005582:	1821      	adds	r1, r4, r0
 8005584:	428b      	cmp	r3, r1
 8005586:	bf04      	itt	eq
 8005588:	6819      	ldreq	r1, [r3, #0]
 800558a:	685b      	ldreq	r3, [r3, #4]
 800558c:	6063      	str	r3, [r4, #4]
 800558e:	bf04      	itt	eq
 8005590:	1809      	addeq	r1, r1, r0
 8005592:	6021      	streq	r1, [r4, #0]
 8005594:	6054      	str	r4, [r2, #4]
 8005596:	e7ca      	b.n	800552e <_free_r+0x22>
 8005598:	bd38      	pop	{r3, r4, r5, pc}
 800559a:	bf00      	nop
 800559c:	20000964 	.word	0x20000964

080055a0 <sbrk_aligned>:
 80055a0:	b570      	push	{r4, r5, r6, lr}
 80055a2:	4e0f      	ldr	r6, [pc, #60]	@ (80055e0 <sbrk_aligned+0x40>)
 80055a4:	460c      	mov	r4, r1
 80055a6:	6831      	ldr	r1, [r6, #0]
 80055a8:	4605      	mov	r5, r0
 80055aa:	b911      	cbnz	r1, 80055b2 <sbrk_aligned+0x12>
 80055ac:	f000 fba6 	bl	8005cfc <_sbrk_r>
 80055b0:	6030      	str	r0, [r6, #0]
 80055b2:	4621      	mov	r1, r4
 80055b4:	4628      	mov	r0, r5
 80055b6:	f000 fba1 	bl	8005cfc <_sbrk_r>
 80055ba:	1c43      	adds	r3, r0, #1
 80055bc:	d103      	bne.n	80055c6 <sbrk_aligned+0x26>
 80055be:	f04f 34ff 	mov.w	r4, #4294967295
 80055c2:	4620      	mov	r0, r4
 80055c4:	bd70      	pop	{r4, r5, r6, pc}
 80055c6:	1cc4      	adds	r4, r0, #3
 80055c8:	f024 0403 	bic.w	r4, r4, #3
 80055cc:	42a0      	cmp	r0, r4
 80055ce:	d0f8      	beq.n	80055c2 <sbrk_aligned+0x22>
 80055d0:	1a21      	subs	r1, r4, r0
 80055d2:	4628      	mov	r0, r5
 80055d4:	f000 fb92 	bl	8005cfc <_sbrk_r>
 80055d8:	3001      	adds	r0, #1
 80055da:	d1f2      	bne.n	80055c2 <sbrk_aligned+0x22>
 80055dc:	e7ef      	b.n	80055be <sbrk_aligned+0x1e>
 80055de:	bf00      	nop
 80055e0:	20000960 	.word	0x20000960

080055e4 <_malloc_r>:
 80055e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055e8:	1ccd      	adds	r5, r1, #3
 80055ea:	f025 0503 	bic.w	r5, r5, #3
 80055ee:	3508      	adds	r5, #8
 80055f0:	2d0c      	cmp	r5, #12
 80055f2:	bf38      	it	cc
 80055f4:	250c      	movcc	r5, #12
 80055f6:	2d00      	cmp	r5, #0
 80055f8:	4606      	mov	r6, r0
 80055fa:	db01      	blt.n	8005600 <_malloc_r+0x1c>
 80055fc:	42a9      	cmp	r1, r5
 80055fe:	d904      	bls.n	800560a <_malloc_r+0x26>
 8005600:	230c      	movs	r3, #12
 8005602:	6033      	str	r3, [r6, #0]
 8005604:	2000      	movs	r0, #0
 8005606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800560a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80056e0 <_malloc_r+0xfc>
 800560e:	f000 f869 	bl	80056e4 <__malloc_lock>
 8005612:	f8d8 3000 	ldr.w	r3, [r8]
 8005616:	461c      	mov	r4, r3
 8005618:	bb44      	cbnz	r4, 800566c <_malloc_r+0x88>
 800561a:	4629      	mov	r1, r5
 800561c:	4630      	mov	r0, r6
 800561e:	f7ff ffbf 	bl	80055a0 <sbrk_aligned>
 8005622:	1c43      	adds	r3, r0, #1
 8005624:	4604      	mov	r4, r0
 8005626:	d158      	bne.n	80056da <_malloc_r+0xf6>
 8005628:	f8d8 4000 	ldr.w	r4, [r8]
 800562c:	4627      	mov	r7, r4
 800562e:	2f00      	cmp	r7, #0
 8005630:	d143      	bne.n	80056ba <_malloc_r+0xd6>
 8005632:	2c00      	cmp	r4, #0
 8005634:	d04b      	beq.n	80056ce <_malloc_r+0xea>
 8005636:	6823      	ldr	r3, [r4, #0]
 8005638:	4639      	mov	r1, r7
 800563a:	4630      	mov	r0, r6
 800563c:	eb04 0903 	add.w	r9, r4, r3
 8005640:	f000 fb5c 	bl	8005cfc <_sbrk_r>
 8005644:	4581      	cmp	r9, r0
 8005646:	d142      	bne.n	80056ce <_malloc_r+0xea>
 8005648:	6821      	ldr	r1, [r4, #0]
 800564a:	1a6d      	subs	r5, r5, r1
 800564c:	4629      	mov	r1, r5
 800564e:	4630      	mov	r0, r6
 8005650:	f7ff ffa6 	bl	80055a0 <sbrk_aligned>
 8005654:	3001      	adds	r0, #1
 8005656:	d03a      	beq.n	80056ce <_malloc_r+0xea>
 8005658:	6823      	ldr	r3, [r4, #0]
 800565a:	442b      	add	r3, r5
 800565c:	6023      	str	r3, [r4, #0]
 800565e:	f8d8 3000 	ldr.w	r3, [r8]
 8005662:	685a      	ldr	r2, [r3, #4]
 8005664:	bb62      	cbnz	r2, 80056c0 <_malloc_r+0xdc>
 8005666:	f8c8 7000 	str.w	r7, [r8]
 800566a:	e00f      	b.n	800568c <_malloc_r+0xa8>
 800566c:	6822      	ldr	r2, [r4, #0]
 800566e:	1b52      	subs	r2, r2, r5
 8005670:	d420      	bmi.n	80056b4 <_malloc_r+0xd0>
 8005672:	2a0b      	cmp	r2, #11
 8005674:	d917      	bls.n	80056a6 <_malloc_r+0xc2>
 8005676:	1961      	adds	r1, r4, r5
 8005678:	42a3      	cmp	r3, r4
 800567a:	6025      	str	r5, [r4, #0]
 800567c:	bf18      	it	ne
 800567e:	6059      	strne	r1, [r3, #4]
 8005680:	6863      	ldr	r3, [r4, #4]
 8005682:	bf08      	it	eq
 8005684:	f8c8 1000 	streq.w	r1, [r8]
 8005688:	5162      	str	r2, [r4, r5]
 800568a:	604b      	str	r3, [r1, #4]
 800568c:	4630      	mov	r0, r6
 800568e:	f000 f82f 	bl	80056f0 <__malloc_unlock>
 8005692:	f104 000b 	add.w	r0, r4, #11
 8005696:	1d23      	adds	r3, r4, #4
 8005698:	f020 0007 	bic.w	r0, r0, #7
 800569c:	1ac2      	subs	r2, r0, r3
 800569e:	bf1c      	itt	ne
 80056a0:	1a1b      	subne	r3, r3, r0
 80056a2:	50a3      	strne	r3, [r4, r2]
 80056a4:	e7af      	b.n	8005606 <_malloc_r+0x22>
 80056a6:	6862      	ldr	r2, [r4, #4]
 80056a8:	42a3      	cmp	r3, r4
 80056aa:	bf0c      	ite	eq
 80056ac:	f8c8 2000 	streq.w	r2, [r8]
 80056b0:	605a      	strne	r2, [r3, #4]
 80056b2:	e7eb      	b.n	800568c <_malloc_r+0xa8>
 80056b4:	4623      	mov	r3, r4
 80056b6:	6864      	ldr	r4, [r4, #4]
 80056b8:	e7ae      	b.n	8005618 <_malloc_r+0x34>
 80056ba:	463c      	mov	r4, r7
 80056bc:	687f      	ldr	r7, [r7, #4]
 80056be:	e7b6      	b.n	800562e <_malloc_r+0x4a>
 80056c0:	461a      	mov	r2, r3
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	42a3      	cmp	r3, r4
 80056c6:	d1fb      	bne.n	80056c0 <_malloc_r+0xdc>
 80056c8:	2300      	movs	r3, #0
 80056ca:	6053      	str	r3, [r2, #4]
 80056cc:	e7de      	b.n	800568c <_malloc_r+0xa8>
 80056ce:	230c      	movs	r3, #12
 80056d0:	6033      	str	r3, [r6, #0]
 80056d2:	4630      	mov	r0, r6
 80056d4:	f000 f80c 	bl	80056f0 <__malloc_unlock>
 80056d8:	e794      	b.n	8005604 <_malloc_r+0x20>
 80056da:	6005      	str	r5, [r0, #0]
 80056dc:	e7d6      	b.n	800568c <_malloc_r+0xa8>
 80056de:	bf00      	nop
 80056e0:	20000964 	.word	0x20000964

080056e4 <__malloc_lock>:
 80056e4:	4801      	ldr	r0, [pc, #4]	@ (80056ec <__malloc_lock+0x8>)
 80056e6:	f7ff bf0f 	b.w	8005508 <__retarget_lock_acquire_recursive>
 80056ea:	bf00      	nop
 80056ec:	2000095c 	.word	0x2000095c

080056f0 <__malloc_unlock>:
 80056f0:	4801      	ldr	r0, [pc, #4]	@ (80056f8 <__malloc_unlock+0x8>)
 80056f2:	f7ff bf0a 	b.w	800550a <__retarget_lock_release_recursive>
 80056f6:	bf00      	nop
 80056f8:	2000095c 	.word	0x2000095c

080056fc <__ssputs_r>:
 80056fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005700:	688e      	ldr	r6, [r1, #8]
 8005702:	461f      	mov	r7, r3
 8005704:	42be      	cmp	r6, r7
 8005706:	680b      	ldr	r3, [r1, #0]
 8005708:	4682      	mov	sl, r0
 800570a:	460c      	mov	r4, r1
 800570c:	4690      	mov	r8, r2
 800570e:	d82d      	bhi.n	800576c <__ssputs_r+0x70>
 8005710:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005714:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005718:	d026      	beq.n	8005768 <__ssputs_r+0x6c>
 800571a:	6965      	ldr	r5, [r4, #20]
 800571c:	6909      	ldr	r1, [r1, #16]
 800571e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005722:	eba3 0901 	sub.w	r9, r3, r1
 8005726:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800572a:	1c7b      	adds	r3, r7, #1
 800572c:	444b      	add	r3, r9
 800572e:	106d      	asrs	r5, r5, #1
 8005730:	429d      	cmp	r5, r3
 8005732:	bf38      	it	cc
 8005734:	461d      	movcc	r5, r3
 8005736:	0553      	lsls	r3, r2, #21
 8005738:	d527      	bpl.n	800578a <__ssputs_r+0x8e>
 800573a:	4629      	mov	r1, r5
 800573c:	f7ff ff52 	bl	80055e4 <_malloc_r>
 8005740:	4606      	mov	r6, r0
 8005742:	b360      	cbz	r0, 800579e <__ssputs_r+0xa2>
 8005744:	6921      	ldr	r1, [r4, #16]
 8005746:	464a      	mov	r2, r9
 8005748:	f000 fae8 	bl	8005d1c <memcpy>
 800574c:	89a3      	ldrh	r3, [r4, #12]
 800574e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005752:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005756:	81a3      	strh	r3, [r4, #12]
 8005758:	6126      	str	r6, [r4, #16]
 800575a:	6165      	str	r5, [r4, #20]
 800575c:	444e      	add	r6, r9
 800575e:	eba5 0509 	sub.w	r5, r5, r9
 8005762:	6026      	str	r6, [r4, #0]
 8005764:	60a5      	str	r5, [r4, #8]
 8005766:	463e      	mov	r6, r7
 8005768:	42be      	cmp	r6, r7
 800576a:	d900      	bls.n	800576e <__ssputs_r+0x72>
 800576c:	463e      	mov	r6, r7
 800576e:	6820      	ldr	r0, [r4, #0]
 8005770:	4632      	mov	r2, r6
 8005772:	4641      	mov	r1, r8
 8005774:	f000 faa8 	bl	8005cc8 <memmove>
 8005778:	68a3      	ldr	r3, [r4, #8]
 800577a:	1b9b      	subs	r3, r3, r6
 800577c:	60a3      	str	r3, [r4, #8]
 800577e:	6823      	ldr	r3, [r4, #0]
 8005780:	4433      	add	r3, r6
 8005782:	6023      	str	r3, [r4, #0]
 8005784:	2000      	movs	r0, #0
 8005786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800578a:	462a      	mov	r2, r5
 800578c:	f000 fad4 	bl	8005d38 <_realloc_r>
 8005790:	4606      	mov	r6, r0
 8005792:	2800      	cmp	r0, #0
 8005794:	d1e0      	bne.n	8005758 <__ssputs_r+0x5c>
 8005796:	6921      	ldr	r1, [r4, #16]
 8005798:	4650      	mov	r0, sl
 800579a:	f7ff feb7 	bl	800550c <_free_r>
 800579e:	230c      	movs	r3, #12
 80057a0:	f8ca 3000 	str.w	r3, [sl]
 80057a4:	89a3      	ldrh	r3, [r4, #12]
 80057a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057aa:	81a3      	strh	r3, [r4, #12]
 80057ac:	f04f 30ff 	mov.w	r0, #4294967295
 80057b0:	e7e9      	b.n	8005786 <__ssputs_r+0x8a>
	...

080057b4 <_svfiprintf_r>:
 80057b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057b8:	4698      	mov	r8, r3
 80057ba:	898b      	ldrh	r3, [r1, #12]
 80057bc:	061b      	lsls	r3, r3, #24
 80057be:	b09d      	sub	sp, #116	@ 0x74
 80057c0:	4607      	mov	r7, r0
 80057c2:	460d      	mov	r5, r1
 80057c4:	4614      	mov	r4, r2
 80057c6:	d510      	bpl.n	80057ea <_svfiprintf_r+0x36>
 80057c8:	690b      	ldr	r3, [r1, #16]
 80057ca:	b973      	cbnz	r3, 80057ea <_svfiprintf_r+0x36>
 80057cc:	2140      	movs	r1, #64	@ 0x40
 80057ce:	f7ff ff09 	bl	80055e4 <_malloc_r>
 80057d2:	6028      	str	r0, [r5, #0]
 80057d4:	6128      	str	r0, [r5, #16]
 80057d6:	b930      	cbnz	r0, 80057e6 <_svfiprintf_r+0x32>
 80057d8:	230c      	movs	r3, #12
 80057da:	603b      	str	r3, [r7, #0]
 80057dc:	f04f 30ff 	mov.w	r0, #4294967295
 80057e0:	b01d      	add	sp, #116	@ 0x74
 80057e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057e6:	2340      	movs	r3, #64	@ 0x40
 80057e8:	616b      	str	r3, [r5, #20]
 80057ea:	2300      	movs	r3, #0
 80057ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80057ee:	2320      	movs	r3, #32
 80057f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80057f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80057f8:	2330      	movs	r3, #48	@ 0x30
 80057fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005998 <_svfiprintf_r+0x1e4>
 80057fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005802:	f04f 0901 	mov.w	r9, #1
 8005806:	4623      	mov	r3, r4
 8005808:	469a      	mov	sl, r3
 800580a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800580e:	b10a      	cbz	r2, 8005814 <_svfiprintf_r+0x60>
 8005810:	2a25      	cmp	r2, #37	@ 0x25
 8005812:	d1f9      	bne.n	8005808 <_svfiprintf_r+0x54>
 8005814:	ebba 0b04 	subs.w	fp, sl, r4
 8005818:	d00b      	beq.n	8005832 <_svfiprintf_r+0x7e>
 800581a:	465b      	mov	r3, fp
 800581c:	4622      	mov	r2, r4
 800581e:	4629      	mov	r1, r5
 8005820:	4638      	mov	r0, r7
 8005822:	f7ff ff6b 	bl	80056fc <__ssputs_r>
 8005826:	3001      	adds	r0, #1
 8005828:	f000 80a7 	beq.w	800597a <_svfiprintf_r+0x1c6>
 800582c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800582e:	445a      	add	r2, fp
 8005830:	9209      	str	r2, [sp, #36]	@ 0x24
 8005832:	f89a 3000 	ldrb.w	r3, [sl]
 8005836:	2b00      	cmp	r3, #0
 8005838:	f000 809f 	beq.w	800597a <_svfiprintf_r+0x1c6>
 800583c:	2300      	movs	r3, #0
 800583e:	f04f 32ff 	mov.w	r2, #4294967295
 8005842:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005846:	f10a 0a01 	add.w	sl, sl, #1
 800584a:	9304      	str	r3, [sp, #16]
 800584c:	9307      	str	r3, [sp, #28]
 800584e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005852:	931a      	str	r3, [sp, #104]	@ 0x68
 8005854:	4654      	mov	r4, sl
 8005856:	2205      	movs	r2, #5
 8005858:	f814 1b01 	ldrb.w	r1, [r4], #1
 800585c:	484e      	ldr	r0, [pc, #312]	@ (8005998 <_svfiprintf_r+0x1e4>)
 800585e:	f7fa fcbf 	bl	80001e0 <memchr>
 8005862:	9a04      	ldr	r2, [sp, #16]
 8005864:	b9d8      	cbnz	r0, 800589e <_svfiprintf_r+0xea>
 8005866:	06d0      	lsls	r0, r2, #27
 8005868:	bf44      	itt	mi
 800586a:	2320      	movmi	r3, #32
 800586c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005870:	0711      	lsls	r1, r2, #28
 8005872:	bf44      	itt	mi
 8005874:	232b      	movmi	r3, #43	@ 0x2b
 8005876:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800587a:	f89a 3000 	ldrb.w	r3, [sl]
 800587e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005880:	d015      	beq.n	80058ae <_svfiprintf_r+0xfa>
 8005882:	9a07      	ldr	r2, [sp, #28]
 8005884:	4654      	mov	r4, sl
 8005886:	2000      	movs	r0, #0
 8005888:	f04f 0c0a 	mov.w	ip, #10
 800588c:	4621      	mov	r1, r4
 800588e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005892:	3b30      	subs	r3, #48	@ 0x30
 8005894:	2b09      	cmp	r3, #9
 8005896:	d94b      	bls.n	8005930 <_svfiprintf_r+0x17c>
 8005898:	b1b0      	cbz	r0, 80058c8 <_svfiprintf_r+0x114>
 800589a:	9207      	str	r2, [sp, #28]
 800589c:	e014      	b.n	80058c8 <_svfiprintf_r+0x114>
 800589e:	eba0 0308 	sub.w	r3, r0, r8
 80058a2:	fa09 f303 	lsl.w	r3, r9, r3
 80058a6:	4313      	orrs	r3, r2
 80058a8:	9304      	str	r3, [sp, #16]
 80058aa:	46a2      	mov	sl, r4
 80058ac:	e7d2      	b.n	8005854 <_svfiprintf_r+0xa0>
 80058ae:	9b03      	ldr	r3, [sp, #12]
 80058b0:	1d19      	adds	r1, r3, #4
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	9103      	str	r1, [sp, #12]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	bfbb      	ittet	lt
 80058ba:	425b      	neglt	r3, r3
 80058bc:	f042 0202 	orrlt.w	r2, r2, #2
 80058c0:	9307      	strge	r3, [sp, #28]
 80058c2:	9307      	strlt	r3, [sp, #28]
 80058c4:	bfb8      	it	lt
 80058c6:	9204      	strlt	r2, [sp, #16]
 80058c8:	7823      	ldrb	r3, [r4, #0]
 80058ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80058cc:	d10a      	bne.n	80058e4 <_svfiprintf_r+0x130>
 80058ce:	7863      	ldrb	r3, [r4, #1]
 80058d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80058d2:	d132      	bne.n	800593a <_svfiprintf_r+0x186>
 80058d4:	9b03      	ldr	r3, [sp, #12]
 80058d6:	1d1a      	adds	r2, r3, #4
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	9203      	str	r2, [sp, #12]
 80058dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80058e0:	3402      	adds	r4, #2
 80058e2:	9305      	str	r3, [sp, #20]
 80058e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80059a8 <_svfiprintf_r+0x1f4>
 80058e8:	7821      	ldrb	r1, [r4, #0]
 80058ea:	2203      	movs	r2, #3
 80058ec:	4650      	mov	r0, sl
 80058ee:	f7fa fc77 	bl	80001e0 <memchr>
 80058f2:	b138      	cbz	r0, 8005904 <_svfiprintf_r+0x150>
 80058f4:	9b04      	ldr	r3, [sp, #16]
 80058f6:	eba0 000a 	sub.w	r0, r0, sl
 80058fa:	2240      	movs	r2, #64	@ 0x40
 80058fc:	4082      	lsls	r2, r0
 80058fe:	4313      	orrs	r3, r2
 8005900:	3401      	adds	r4, #1
 8005902:	9304      	str	r3, [sp, #16]
 8005904:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005908:	4824      	ldr	r0, [pc, #144]	@ (800599c <_svfiprintf_r+0x1e8>)
 800590a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800590e:	2206      	movs	r2, #6
 8005910:	f7fa fc66 	bl	80001e0 <memchr>
 8005914:	2800      	cmp	r0, #0
 8005916:	d036      	beq.n	8005986 <_svfiprintf_r+0x1d2>
 8005918:	4b21      	ldr	r3, [pc, #132]	@ (80059a0 <_svfiprintf_r+0x1ec>)
 800591a:	bb1b      	cbnz	r3, 8005964 <_svfiprintf_r+0x1b0>
 800591c:	9b03      	ldr	r3, [sp, #12]
 800591e:	3307      	adds	r3, #7
 8005920:	f023 0307 	bic.w	r3, r3, #7
 8005924:	3308      	adds	r3, #8
 8005926:	9303      	str	r3, [sp, #12]
 8005928:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800592a:	4433      	add	r3, r6
 800592c:	9309      	str	r3, [sp, #36]	@ 0x24
 800592e:	e76a      	b.n	8005806 <_svfiprintf_r+0x52>
 8005930:	fb0c 3202 	mla	r2, ip, r2, r3
 8005934:	460c      	mov	r4, r1
 8005936:	2001      	movs	r0, #1
 8005938:	e7a8      	b.n	800588c <_svfiprintf_r+0xd8>
 800593a:	2300      	movs	r3, #0
 800593c:	3401      	adds	r4, #1
 800593e:	9305      	str	r3, [sp, #20]
 8005940:	4619      	mov	r1, r3
 8005942:	f04f 0c0a 	mov.w	ip, #10
 8005946:	4620      	mov	r0, r4
 8005948:	f810 2b01 	ldrb.w	r2, [r0], #1
 800594c:	3a30      	subs	r2, #48	@ 0x30
 800594e:	2a09      	cmp	r2, #9
 8005950:	d903      	bls.n	800595a <_svfiprintf_r+0x1a6>
 8005952:	2b00      	cmp	r3, #0
 8005954:	d0c6      	beq.n	80058e4 <_svfiprintf_r+0x130>
 8005956:	9105      	str	r1, [sp, #20]
 8005958:	e7c4      	b.n	80058e4 <_svfiprintf_r+0x130>
 800595a:	fb0c 2101 	mla	r1, ip, r1, r2
 800595e:	4604      	mov	r4, r0
 8005960:	2301      	movs	r3, #1
 8005962:	e7f0      	b.n	8005946 <_svfiprintf_r+0x192>
 8005964:	ab03      	add	r3, sp, #12
 8005966:	9300      	str	r3, [sp, #0]
 8005968:	462a      	mov	r2, r5
 800596a:	4b0e      	ldr	r3, [pc, #56]	@ (80059a4 <_svfiprintf_r+0x1f0>)
 800596c:	a904      	add	r1, sp, #16
 800596e:	4638      	mov	r0, r7
 8005970:	f3af 8000 	nop.w
 8005974:	1c42      	adds	r2, r0, #1
 8005976:	4606      	mov	r6, r0
 8005978:	d1d6      	bne.n	8005928 <_svfiprintf_r+0x174>
 800597a:	89ab      	ldrh	r3, [r5, #12]
 800597c:	065b      	lsls	r3, r3, #25
 800597e:	f53f af2d 	bmi.w	80057dc <_svfiprintf_r+0x28>
 8005982:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005984:	e72c      	b.n	80057e0 <_svfiprintf_r+0x2c>
 8005986:	ab03      	add	r3, sp, #12
 8005988:	9300      	str	r3, [sp, #0]
 800598a:	462a      	mov	r2, r5
 800598c:	4b05      	ldr	r3, [pc, #20]	@ (80059a4 <_svfiprintf_r+0x1f0>)
 800598e:	a904      	add	r1, sp, #16
 8005990:	4638      	mov	r0, r7
 8005992:	f000 f879 	bl	8005a88 <_printf_i>
 8005996:	e7ed      	b.n	8005974 <_svfiprintf_r+0x1c0>
 8005998:	08005e2c 	.word	0x08005e2c
 800599c:	08005e36 	.word	0x08005e36
 80059a0:	00000000 	.word	0x00000000
 80059a4:	080056fd 	.word	0x080056fd
 80059a8:	08005e32 	.word	0x08005e32

080059ac <_printf_common>:
 80059ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059b0:	4616      	mov	r6, r2
 80059b2:	4698      	mov	r8, r3
 80059b4:	688a      	ldr	r2, [r1, #8]
 80059b6:	690b      	ldr	r3, [r1, #16]
 80059b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80059bc:	4293      	cmp	r3, r2
 80059be:	bfb8      	it	lt
 80059c0:	4613      	movlt	r3, r2
 80059c2:	6033      	str	r3, [r6, #0]
 80059c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80059c8:	4607      	mov	r7, r0
 80059ca:	460c      	mov	r4, r1
 80059cc:	b10a      	cbz	r2, 80059d2 <_printf_common+0x26>
 80059ce:	3301      	adds	r3, #1
 80059d0:	6033      	str	r3, [r6, #0]
 80059d2:	6823      	ldr	r3, [r4, #0]
 80059d4:	0699      	lsls	r1, r3, #26
 80059d6:	bf42      	ittt	mi
 80059d8:	6833      	ldrmi	r3, [r6, #0]
 80059da:	3302      	addmi	r3, #2
 80059dc:	6033      	strmi	r3, [r6, #0]
 80059de:	6825      	ldr	r5, [r4, #0]
 80059e0:	f015 0506 	ands.w	r5, r5, #6
 80059e4:	d106      	bne.n	80059f4 <_printf_common+0x48>
 80059e6:	f104 0a19 	add.w	sl, r4, #25
 80059ea:	68e3      	ldr	r3, [r4, #12]
 80059ec:	6832      	ldr	r2, [r6, #0]
 80059ee:	1a9b      	subs	r3, r3, r2
 80059f0:	42ab      	cmp	r3, r5
 80059f2:	dc26      	bgt.n	8005a42 <_printf_common+0x96>
 80059f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80059f8:	6822      	ldr	r2, [r4, #0]
 80059fa:	3b00      	subs	r3, #0
 80059fc:	bf18      	it	ne
 80059fe:	2301      	movne	r3, #1
 8005a00:	0692      	lsls	r2, r2, #26
 8005a02:	d42b      	bmi.n	8005a5c <_printf_common+0xb0>
 8005a04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005a08:	4641      	mov	r1, r8
 8005a0a:	4638      	mov	r0, r7
 8005a0c:	47c8      	blx	r9
 8005a0e:	3001      	adds	r0, #1
 8005a10:	d01e      	beq.n	8005a50 <_printf_common+0xa4>
 8005a12:	6823      	ldr	r3, [r4, #0]
 8005a14:	6922      	ldr	r2, [r4, #16]
 8005a16:	f003 0306 	and.w	r3, r3, #6
 8005a1a:	2b04      	cmp	r3, #4
 8005a1c:	bf02      	ittt	eq
 8005a1e:	68e5      	ldreq	r5, [r4, #12]
 8005a20:	6833      	ldreq	r3, [r6, #0]
 8005a22:	1aed      	subeq	r5, r5, r3
 8005a24:	68a3      	ldr	r3, [r4, #8]
 8005a26:	bf0c      	ite	eq
 8005a28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a2c:	2500      	movne	r5, #0
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	bfc4      	itt	gt
 8005a32:	1a9b      	subgt	r3, r3, r2
 8005a34:	18ed      	addgt	r5, r5, r3
 8005a36:	2600      	movs	r6, #0
 8005a38:	341a      	adds	r4, #26
 8005a3a:	42b5      	cmp	r5, r6
 8005a3c:	d11a      	bne.n	8005a74 <_printf_common+0xc8>
 8005a3e:	2000      	movs	r0, #0
 8005a40:	e008      	b.n	8005a54 <_printf_common+0xa8>
 8005a42:	2301      	movs	r3, #1
 8005a44:	4652      	mov	r2, sl
 8005a46:	4641      	mov	r1, r8
 8005a48:	4638      	mov	r0, r7
 8005a4a:	47c8      	blx	r9
 8005a4c:	3001      	adds	r0, #1
 8005a4e:	d103      	bne.n	8005a58 <_printf_common+0xac>
 8005a50:	f04f 30ff 	mov.w	r0, #4294967295
 8005a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a58:	3501      	adds	r5, #1
 8005a5a:	e7c6      	b.n	80059ea <_printf_common+0x3e>
 8005a5c:	18e1      	adds	r1, r4, r3
 8005a5e:	1c5a      	adds	r2, r3, #1
 8005a60:	2030      	movs	r0, #48	@ 0x30
 8005a62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005a66:	4422      	add	r2, r4
 8005a68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005a6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005a70:	3302      	adds	r3, #2
 8005a72:	e7c7      	b.n	8005a04 <_printf_common+0x58>
 8005a74:	2301      	movs	r3, #1
 8005a76:	4622      	mov	r2, r4
 8005a78:	4641      	mov	r1, r8
 8005a7a:	4638      	mov	r0, r7
 8005a7c:	47c8      	blx	r9
 8005a7e:	3001      	adds	r0, #1
 8005a80:	d0e6      	beq.n	8005a50 <_printf_common+0xa4>
 8005a82:	3601      	adds	r6, #1
 8005a84:	e7d9      	b.n	8005a3a <_printf_common+0x8e>
	...

08005a88 <_printf_i>:
 8005a88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a8c:	7e0f      	ldrb	r7, [r1, #24]
 8005a8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005a90:	2f78      	cmp	r7, #120	@ 0x78
 8005a92:	4691      	mov	r9, r2
 8005a94:	4680      	mov	r8, r0
 8005a96:	460c      	mov	r4, r1
 8005a98:	469a      	mov	sl, r3
 8005a9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005a9e:	d807      	bhi.n	8005ab0 <_printf_i+0x28>
 8005aa0:	2f62      	cmp	r7, #98	@ 0x62
 8005aa2:	d80a      	bhi.n	8005aba <_printf_i+0x32>
 8005aa4:	2f00      	cmp	r7, #0
 8005aa6:	f000 80d2 	beq.w	8005c4e <_printf_i+0x1c6>
 8005aaa:	2f58      	cmp	r7, #88	@ 0x58
 8005aac:	f000 80b9 	beq.w	8005c22 <_printf_i+0x19a>
 8005ab0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ab4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005ab8:	e03a      	b.n	8005b30 <_printf_i+0xa8>
 8005aba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005abe:	2b15      	cmp	r3, #21
 8005ac0:	d8f6      	bhi.n	8005ab0 <_printf_i+0x28>
 8005ac2:	a101      	add	r1, pc, #4	@ (adr r1, 8005ac8 <_printf_i+0x40>)
 8005ac4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ac8:	08005b21 	.word	0x08005b21
 8005acc:	08005b35 	.word	0x08005b35
 8005ad0:	08005ab1 	.word	0x08005ab1
 8005ad4:	08005ab1 	.word	0x08005ab1
 8005ad8:	08005ab1 	.word	0x08005ab1
 8005adc:	08005ab1 	.word	0x08005ab1
 8005ae0:	08005b35 	.word	0x08005b35
 8005ae4:	08005ab1 	.word	0x08005ab1
 8005ae8:	08005ab1 	.word	0x08005ab1
 8005aec:	08005ab1 	.word	0x08005ab1
 8005af0:	08005ab1 	.word	0x08005ab1
 8005af4:	08005c35 	.word	0x08005c35
 8005af8:	08005b5f 	.word	0x08005b5f
 8005afc:	08005bef 	.word	0x08005bef
 8005b00:	08005ab1 	.word	0x08005ab1
 8005b04:	08005ab1 	.word	0x08005ab1
 8005b08:	08005c57 	.word	0x08005c57
 8005b0c:	08005ab1 	.word	0x08005ab1
 8005b10:	08005b5f 	.word	0x08005b5f
 8005b14:	08005ab1 	.word	0x08005ab1
 8005b18:	08005ab1 	.word	0x08005ab1
 8005b1c:	08005bf7 	.word	0x08005bf7
 8005b20:	6833      	ldr	r3, [r6, #0]
 8005b22:	1d1a      	adds	r2, r3, #4
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	6032      	str	r2, [r6, #0]
 8005b28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005b30:	2301      	movs	r3, #1
 8005b32:	e09d      	b.n	8005c70 <_printf_i+0x1e8>
 8005b34:	6833      	ldr	r3, [r6, #0]
 8005b36:	6820      	ldr	r0, [r4, #0]
 8005b38:	1d19      	adds	r1, r3, #4
 8005b3a:	6031      	str	r1, [r6, #0]
 8005b3c:	0606      	lsls	r6, r0, #24
 8005b3e:	d501      	bpl.n	8005b44 <_printf_i+0xbc>
 8005b40:	681d      	ldr	r5, [r3, #0]
 8005b42:	e003      	b.n	8005b4c <_printf_i+0xc4>
 8005b44:	0645      	lsls	r5, r0, #25
 8005b46:	d5fb      	bpl.n	8005b40 <_printf_i+0xb8>
 8005b48:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005b4c:	2d00      	cmp	r5, #0
 8005b4e:	da03      	bge.n	8005b58 <_printf_i+0xd0>
 8005b50:	232d      	movs	r3, #45	@ 0x2d
 8005b52:	426d      	negs	r5, r5
 8005b54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b58:	4859      	ldr	r0, [pc, #356]	@ (8005cc0 <_printf_i+0x238>)
 8005b5a:	230a      	movs	r3, #10
 8005b5c:	e011      	b.n	8005b82 <_printf_i+0xfa>
 8005b5e:	6821      	ldr	r1, [r4, #0]
 8005b60:	6833      	ldr	r3, [r6, #0]
 8005b62:	0608      	lsls	r0, r1, #24
 8005b64:	f853 5b04 	ldr.w	r5, [r3], #4
 8005b68:	d402      	bmi.n	8005b70 <_printf_i+0xe8>
 8005b6a:	0649      	lsls	r1, r1, #25
 8005b6c:	bf48      	it	mi
 8005b6e:	b2ad      	uxthmi	r5, r5
 8005b70:	2f6f      	cmp	r7, #111	@ 0x6f
 8005b72:	4853      	ldr	r0, [pc, #332]	@ (8005cc0 <_printf_i+0x238>)
 8005b74:	6033      	str	r3, [r6, #0]
 8005b76:	bf14      	ite	ne
 8005b78:	230a      	movne	r3, #10
 8005b7a:	2308      	moveq	r3, #8
 8005b7c:	2100      	movs	r1, #0
 8005b7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005b82:	6866      	ldr	r6, [r4, #4]
 8005b84:	60a6      	str	r6, [r4, #8]
 8005b86:	2e00      	cmp	r6, #0
 8005b88:	bfa2      	ittt	ge
 8005b8a:	6821      	ldrge	r1, [r4, #0]
 8005b8c:	f021 0104 	bicge.w	r1, r1, #4
 8005b90:	6021      	strge	r1, [r4, #0]
 8005b92:	b90d      	cbnz	r5, 8005b98 <_printf_i+0x110>
 8005b94:	2e00      	cmp	r6, #0
 8005b96:	d04b      	beq.n	8005c30 <_printf_i+0x1a8>
 8005b98:	4616      	mov	r6, r2
 8005b9a:	fbb5 f1f3 	udiv	r1, r5, r3
 8005b9e:	fb03 5711 	mls	r7, r3, r1, r5
 8005ba2:	5dc7      	ldrb	r7, [r0, r7]
 8005ba4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005ba8:	462f      	mov	r7, r5
 8005baa:	42bb      	cmp	r3, r7
 8005bac:	460d      	mov	r5, r1
 8005bae:	d9f4      	bls.n	8005b9a <_printf_i+0x112>
 8005bb0:	2b08      	cmp	r3, #8
 8005bb2:	d10b      	bne.n	8005bcc <_printf_i+0x144>
 8005bb4:	6823      	ldr	r3, [r4, #0]
 8005bb6:	07df      	lsls	r7, r3, #31
 8005bb8:	d508      	bpl.n	8005bcc <_printf_i+0x144>
 8005bba:	6923      	ldr	r3, [r4, #16]
 8005bbc:	6861      	ldr	r1, [r4, #4]
 8005bbe:	4299      	cmp	r1, r3
 8005bc0:	bfde      	ittt	le
 8005bc2:	2330      	movle	r3, #48	@ 0x30
 8005bc4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005bc8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005bcc:	1b92      	subs	r2, r2, r6
 8005bce:	6122      	str	r2, [r4, #16]
 8005bd0:	f8cd a000 	str.w	sl, [sp]
 8005bd4:	464b      	mov	r3, r9
 8005bd6:	aa03      	add	r2, sp, #12
 8005bd8:	4621      	mov	r1, r4
 8005bda:	4640      	mov	r0, r8
 8005bdc:	f7ff fee6 	bl	80059ac <_printf_common>
 8005be0:	3001      	adds	r0, #1
 8005be2:	d14a      	bne.n	8005c7a <_printf_i+0x1f2>
 8005be4:	f04f 30ff 	mov.w	r0, #4294967295
 8005be8:	b004      	add	sp, #16
 8005bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bee:	6823      	ldr	r3, [r4, #0]
 8005bf0:	f043 0320 	orr.w	r3, r3, #32
 8005bf4:	6023      	str	r3, [r4, #0]
 8005bf6:	4833      	ldr	r0, [pc, #204]	@ (8005cc4 <_printf_i+0x23c>)
 8005bf8:	2778      	movs	r7, #120	@ 0x78
 8005bfa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005bfe:	6823      	ldr	r3, [r4, #0]
 8005c00:	6831      	ldr	r1, [r6, #0]
 8005c02:	061f      	lsls	r7, r3, #24
 8005c04:	f851 5b04 	ldr.w	r5, [r1], #4
 8005c08:	d402      	bmi.n	8005c10 <_printf_i+0x188>
 8005c0a:	065f      	lsls	r7, r3, #25
 8005c0c:	bf48      	it	mi
 8005c0e:	b2ad      	uxthmi	r5, r5
 8005c10:	6031      	str	r1, [r6, #0]
 8005c12:	07d9      	lsls	r1, r3, #31
 8005c14:	bf44      	itt	mi
 8005c16:	f043 0320 	orrmi.w	r3, r3, #32
 8005c1a:	6023      	strmi	r3, [r4, #0]
 8005c1c:	b11d      	cbz	r5, 8005c26 <_printf_i+0x19e>
 8005c1e:	2310      	movs	r3, #16
 8005c20:	e7ac      	b.n	8005b7c <_printf_i+0xf4>
 8005c22:	4827      	ldr	r0, [pc, #156]	@ (8005cc0 <_printf_i+0x238>)
 8005c24:	e7e9      	b.n	8005bfa <_printf_i+0x172>
 8005c26:	6823      	ldr	r3, [r4, #0]
 8005c28:	f023 0320 	bic.w	r3, r3, #32
 8005c2c:	6023      	str	r3, [r4, #0]
 8005c2e:	e7f6      	b.n	8005c1e <_printf_i+0x196>
 8005c30:	4616      	mov	r6, r2
 8005c32:	e7bd      	b.n	8005bb0 <_printf_i+0x128>
 8005c34:	6833      	ldr	r3, [r6, #0]
 8005c36:	6825      	ldr	r5, [r4, #0]
 8005c38:	6961      	ldr	r1, [r4, #20]
 8005c3a:	1d18      	adds	r0, r3, #4
 8005c3c:	6030      	str	r0, [r6, #0]
 8005c3e:	062e      	lsls	r6, r5, #24
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	d501      	bpl.n	8005c48 <_printf_i+0x1c0>
 8005c44:	6019      	str	r1, [r3, #0]
 8005c46:	e002      	b.n	8005c4e <_printf_i+0x1c6>
 8005c48:	0668      	lsls	r0, r5, #25
 8005c4a:	d5fb      	bpl.n	8005c44 <_printf_i+0x1bc>
 8005c4c:	8019      	strh	r1, [r3, #0]
 8005c4e:	2300      	movs	r3, #0
 8005c50:	6123      	str	r3, [r4, #16]
 8005c52:	4616      	mov	r6, r2
 8005c54:	e7bc      	b.n	8005bd0 <_printf_i+0x148>
 8005c56:	6833      	ldr	r3, [r6, #0]
 8005c58:	1d1a      	adds	r2, r3, #4
 8005c5a:	6032      	str	r2, [r6, #0]
 8005c5c:	681e      	ldr	r6, [r3, #0]
 8005c5e:	6862      	ldr	r2, [r4, #4]
 8005c60:	2100      	movs	r1, #0
 8005c62:	4630      	mov	r0, r6
 8005c64:	f7fa fabc 	bl	80001e0 <memchr>
 8005c68:	b108      	cbz	r0, 8005c6e <_printf_i+0x1e6>
 8005c6a:	1b80      	subs	r0, r0, r6
 8005c6c:	6060      	str	r0, [r4, #4]
 8005c6e:	6863      	ldr	r3, [r4, #4]
 8005c70:	6123      	str	r3, [r4, #16]
 8005c72:	2300      	movs	r3, #0
 8005c74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c78:	e7aa      	b.n	8005bd0 <_printf_i+0x148>
 8005c7a:	6923      	ldr	r3, [r4, #16]
 8005c7c:	4632      	mov	r2, r6
 8005c7e:	4649      	mov	r1, r9
 8005c80:	4640      	mov	r0, r8
 8005c82:	47d0      	blx	sl
 8005c84:	3001      	adds	r0, #1
 8005c86:	d0ad      	beq.n	8005be4 <_printf_i+0x15c>
 8005c88:	6823      	ldr	r3, [r4, #0]
 8005c8a:	079b      	lsls	r3, r3, #30
 8005c8c:	d413      	bmi.n	8005cb6 <_printf_i+0x22e>
 8005c8e:	68e0      	ldr	r0, [r4, #12]
 8005c90:	9b03      	ldr	r3, [sp, #12]
 8005c92:	4298      	cmp	r0, r3
 8005c94:	bfb8      	it	lt
 8005c96:	4618      	movlt	r0, r3
 8005c98:	e7a6      	b.n	8005be8 <_printf_i+0x160>
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	4632      	mov	r2, r6
 8005c9e:	4649      	mov	r1, r9
 8005ca0:	4640      	mov	r0, r8
 8005ca2:	47d0      	blx	sl
 8005ca4:	3001      	adds	r0, #1
 8005ca6:	d09d      	beq.n	8005be4 <_printf_i+0x15c>
 8005ca8:	3501      	adds	r5, #1
 8005caa:	68e3      	ldr	r3, [r4, #12]
 8005cac:	9903      	ldr	r1, [sp, #12]
 8005cae:	1a5b      	subs	r3, r3, r1
 8005cb0:	42ab      	cmp	r3, r5
 8005cb2:	dcf2      	bgt.n	8005c9a <_printf_i+0x212>
 8005cb4:	e7eb      	b.n	8005c8e <_printf_i+0x206>
 8005cb6:	2500      	movs	r5, #0
 8005cb8:	f104 0619 	add.w	r6, r4, #25
 8005cbc:	e7f5      	b.n	8005caa <_printf_i+0x222>
 8005cbe:	bf00      	nop
 8005cc0:	08005e3d 	.word	0x08005e3d
 8005cc4:	08005e4e 	.word	0x08005e4e

08005cc8 <memmove>:
 8005cc8:	4288      	cmp	r0, r1
 8005cca:	b510      	push	{r4, lr}
 8005ccc:	eb01 0402 	add.w	r4, r1, r2
 8005cd0:	d902      	bls.n	8005cd8 <memmove+0x10>
 8005cd2:	4284      	cmp	r4, r0
 8005cd4:	4623      	mov	r3, r4
 8005cd6:	d807      	bhi.n	8005ce8 <memmove+0x20>
 8005cd8:	1e43      	subs	r3, r0, #1
 8005cda:	42a1      	cmp	r1, r4
 8005cdc:	d008      	beq.n	8005cf0 <memmove+0x28>
 8005cde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ce2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005ce6:	e7f8      	b.n	8005cda <memmove+0x12>
 8005ce8:	4402      	add	r2, r0
 8005cea:	4601      	mov	r1, r0
 8005cec:	428a      	cmp	r2, r1
 8005cee:	d100      	bne.n	8005cf2 <memmove+0x2a>
 8005cf0:	bd10      	pop	{r4, pc}
 8005cf2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005cf6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005cfa:	e7f7      	b.n	8005cec <memmove+0x24>

08005cfc <_sbrk_r>:
 8005cfc:	b538      	push	{r3, r4, r5, lr}
 8005cfe:	4d06      	ldr	r5, [pc, #24]	@ (8005d18 <_sbrk_r+0x1c>)
 8005d00:	2300      	movs	r3, #0
 8005d02:	4604      	mov	r4, r0
 8005d04:	4608      	mov	r0, r1
 8005d06:	602b      	str	r3, [r5, #0]
 8005d08:	f7fb fc0c 	bl	8001524 <_sbrk>
 8005d0c:	1c43      	adds	r3, r0, #1
 8005d0e:	d102      	bne.n	8005d16 <_sbrk_r+0x1a>
 8005d10:	682b      	ldr	r3, [r5, #0]
 8005d12:	b103      	cbz	r3, 8005d16 <_sbrk_r+0x1a>
 8005d14:	6023      	str	r3, [r4, #0]
 8005d16:	bd38      	pop	{r3, r4, r5, pc}
 8005d18:	20000958 	.word	0x20000958

08005d1c <memcpy>:
 8005d1c:	440a      	add	r2, r1
 8005d1e:	4291      	cmp	r1, r2
 8005d20:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d24:	d100      	bne.n	8005d28 <memcpy+0xc>
 8005d26:	4770      	bx	lr
 8005d28:	b510      	push	{r4, lr}
 8005d2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d32:	4291      	cmp	r1, r2
 8005d34:	d1f9      	bne.n	8005d2a <memcpy+0xe>
 8005d36:	bd10      	pop	{r4, pc}

08005d38 <_realloc_r>:
 8005d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d3c:	4680      	mov	r8, r0
 8005d3e:	4615      	mov	r5, r2
 8005d40:	460c      	mov	r4, r1
 8005d42:	b921      	cbnz	r1, 8005d4e <_realloc_r+0x16>
 8005d44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d48:	4611      	mov	r1, r2
 8005d4a:	f7ff bc4b 	b.w	80055e4 <_malloc_r>
 8005d4e:	b92a      	cbnz	r2, 8005d5c <_realloc_r+0x24>
 8005d50:	f7ff fbdc 	bl	800550c <_free_r>
 8005d54:	2400      	movs	r4, #0
 8005d56:	4620      	mov	r0, r4
 8005d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d5c:	f000 f81a 	bl	8005d94 <_malloc_usable_size_r>
 8005d60:	4285      	cmp	r5, r0
 8005d62:	4606      	mov	r6, r0
 8005d64:	d802      	bhi.n	8005d6c <_realloc_r+0x34>
 8005d66:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005d6a:	d8f4      	bhi.n	8005d56 <_realloc_r+0x1e>
 8005d6c:	4629      	mov	r1, r5
 8005d6e:	4640      	mov	r0, r8
 8005d70:	f7ff fc38 	bl	80055e4 <_malloc_r>
 8005d74:	4607      	mov	r7, r0
 8005d76:	2800      	cmp	r0, #0
 8005d78:	d0ec      	beq.n	8005d54 <_realloc_r+0x1c>
 8005d7a:	42b5      	cmp	r5, r6
 8005d7c:	462a      	mov	r2, r5
 8005d7e:	4621      	mov	r1, r4
 8005d80:	bf28      	it	cs
 8005d82:	4632      	movcs	r2, r6
 8005d84:	f7ff ffca 	bl	8005d1c <memcpy>
 8005d88:	4621      	mov	r1, r4
 8005d8a:	4640      	mov	r0, r8
 8005d8c:	f7ff fbbe 	bl	800550c <_free_r>
 8005d90:	463c      	mov	r4, r7
 8005d92:	e7e0      	b.n	8005d56 <_realloc_r+0x1e>

08005d94 <_malloc_usable_size_r>:
 8005d94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d98:	1f18      	subs	r0, r3, #4
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	bfbc      	itt	lt
 8005d9e:	580b      	ldrlt	r3, [r1, r0]
 8005da0:	18c0      	addlt	r0, r0, r3
 8005da2:	4770      	bx	lr

08005da4 <_init>:
 8005da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005da6:	bf00      	nop
 8005da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005daa:	bc08      	pop	{r3}
 8005dac:	469e      	mov	lr, r3
 8005dae:	4770      	bx	lr

08005db0 <_fini>:
 8005db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005db2:	bf00      	nop
 8005db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005db6:	bc08      	pop	{r3}
 8005db8:	469e      	mov	lr, r3
 8005dba:	4770      	bx	lr
