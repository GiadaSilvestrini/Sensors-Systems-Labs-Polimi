
Ex3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1d0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  0800a370  0800a370  0000b370  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a760  0800a760  0000c200  2**0
                  CONTENTS
  4 .ARM          00000008  0800a760  0800a760  0000b760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a768  0800a768  0000c200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a768  0800a768  0000b768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a76c  0800a76c  0000b76c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800a770  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000330  20000200  0800a970  0000c200  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000530  0800a970  0000c530  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c200  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b1c  00000000  00000000  0000c230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000238c  00000000  00000000  0001cd4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001048  00000000  00000000  0001f0d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cd9  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b13  00000000  00000000  00020df9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000135aa  00000000  00000000  0003890c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091b43  00000000  00000000  0004beb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dd9f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056d0  00000000  00000000  000dda3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000e310c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000200 	.word	0x20000200
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a358 	.word	0x0800a358

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000204 	.word	0x20000204
 80001dc:	0800a358 	.word	0x0800a358

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <DWT_Delay_Init>:

//Microsecond delay functions. Credit:
//https://deepbluembedded.com/stm32-delay-microsecond-millisecond-utility-dwt-delay-timer-delay/

uint32_t DWT_Delay_Init(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000f4c:	4b14      	ldr	r3, [pc, #80]	@ (8000fa0 <DWT_Delay_Init+0x58>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	4a13      	ldr	r2, [pc, #76]	@ (8000fa0 <DWT_Delay_Init+0x58>)
 8000f52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000f56:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000f58:	4b11      	ldr	r3, [pc, #68]	@ (8000fa0 <DWT_Delay_Init+0x58>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	4a10      	ldr	r2, [pc, #64]	@ (8000fa0 <DWT_Delay_Init+0x58>)
 8000f5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000f62:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000f64:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa4 <DWT_Delay_Init+0x5c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a0e      	ldr	r2, [pc, #56]	@ (8000fa4 <DWT_Delay_Init+0x5c>)
 8000f6a:	f023 0301 	bic.w	r3, r3, #1
 8000f6e:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000f70:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa4 <DWT_Delay_Init+0x5c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a0b      	ldr	r2, [pc, #44]	@ (8000fa4 <DWT_Delay_Init+0x5c>)
 8000f76:	f043 0301 	orr.w	r3, r3, #1
 8000f7a:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000f7c:	4b09      	ldr	r3, [pc, #36]	@ (8000fa4 <DWT_Delay_Init+0x5c>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000f82:	bf00      	nop
    __ASM volatile ("NOP");
 8000f84:	bf00      	nop
    __ASM volatile ("NOP");
 8000f86:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8000f88:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <DWT_Delay_Init+0x5c>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8000f90:	2300      	movs	r3, #0
 8000f92:	e000      	b.n	8000f96 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8000f94:	2301      	movs	r3, #1
    }
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000edf0 	.word	0xe000edf0
 8000fa4:	e0001000 	.word	0xe0001000

08000fa8 <DWT_Delay_us>:

void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8000fb0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff0 <DWT_Delay_us+0x48>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 8000fb6:	f004 fd8f 	bl	8005ad8 <HAL_RCC_GetHCLKFreq>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000ff4 <DWT_Delay_us+0x4c>)
 8000fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc2:	0c9b      	lsrs	r3, r3, #18
 8000fc4:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	68ba      	ldr	r2, [r7, #8]
 8000fca:	fb02 f303 	mul.w	r3, r2, r3
 8000fce:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 8000fd0:	bf00      	nop
 8000fd2:	4b07      	ldr	r3, [pc, #28]	@ (8000ff0 <DWT_Delay_us+0x48>)
 8000fd4:	685a      	ldr	r2, [r3, #4]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	1ad2      	subs	r2, r2, r3
 8000fda:	6879      	ldr	r1, [r7, #4]
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	1acb      	subs	r3, r1, r3
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d3f6      	bcc.n	8000fd2 <DWT_Delay_us+0x2a>
}
 8000fe4:	bf00      	nop
 8000fe6:	bf00      	nop
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	e0001000 	.word	0xe0001000
 8000ff4:	431bde83 	.word	0x431bde83

08000ff8 <lcd_enable>:


//  LCD code


void lcd_enable(){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LCD_E, GPIO_PIN_RESET);
	//HAL_Delay(1);
	//DWT_Delay_us(50);
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_SET);  //pulse needs to be some clock cycles long, we are not in hurry right now
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	2102      	movs	r1, #2
 8001000:	4807      	ldr	r0, [pc, #28]	@ (8001020 <lcd_enable+0x28>)
 8001002:	f001 fec3 	bl	8002d8c <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	DWT_Delay_us(50);
 8001006:	2032      	movs	r0, #50	@ 0x32
 8001008:	f7ff ffce 	bl	8000fa8 <DWT_Delay_us>
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_RESET);
 800100c:	2200      	movs	r2, #0
 800100e:	2102      	movs	r1, #2
 8001010:	4803      	ldr	r0, [pc, #12]	@ (8001020 <lcd_enable+0x28>)
 8001012:	f001 febb 	bl	8002d8c <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	DWT_Delay_us(50);
 8001016:	2032      	movs	r0, #50	@ 0x32
 8001018:	f7ff ffc6 	bl	8000fa8 <DWT_Delay_us>
}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40020400 	.word	0x40020400

08001024 <lcd_write4>:

//  write a nibble (4 bits)
void lcd_write4(uint8_t word){
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(LCD_D4, (word & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET); //we AND the word and the mask. If it's true, we write GPIO_PIN_SET, else _RESET
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	f003 0301 	and.w	r3, r3, #1
 8001034:	b2db      	uxtb	r3, r3
 8001036:	461a      	mov	r2, r3
 8001038:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800103c:	4816      	ldr	r0, [pc, #88]	@ (8001098 <lcd_write4+0x74>)
 800103e:	f001 fea5 	bl	8002d8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_D5, (word & 0x02)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	105b      	asrs	r3, r3, #1
 8001046:	b2db      	uxtb	r3, r3
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	b2db      	uxtb	r3, r3
 800104e:	461a      	mov	r2, r3
 8001050:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001054:	4810      	ldr	r0, [pc, #64]	@ (8001098 <lcd_write4+0x74>)
 8001056:	f001 fe99 	bl	8002d8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_D6, (word & 0x04)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	109b      	asrs	r3, r3, #2
 800105e:	b2db      	uxtb	r3, r3
 8001060:	f003 0301 	and.w	r3, r3, #1
 8001064:	b2db      	uxtb	r3, r3
 8001066:	461a      	mov	r2, r3
 8001068:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800106c:	480a      	ldr	r0, [pc, #40]	@ (8001098 <lcd_write4+0x74>)
 800106e:	f001 fe8d 	bl	8002d8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_D7, (word & 0x08)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	10db      	asrs	r3, r3, #3
 8001076:	b2db      	uxtb	r3, r3
 8001078:	f003 0301 	and.w	r3, r3, #1
 800107c:	b2db      	uxtb	r3, r3
 800107e:	461a      	mov	r2, r3
 8001080:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001084:	4804      	ldr	r0, [pc, #16]	@ (8001098 <lcd_write4+0x74>)
 8001086:	f001 fe81 	bl	8002d8c <HAL_GPIO_WritePin>
		lcd_enable();  //pulse the E line
 800108a:	f7ff ffb5 	bl	8000ff8 <lcd_enable>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40020400 	.word	0x40020400

0800109c <lcd_write>:

//  write a byte (8 bits)
void lcd_write(uint8_t word){	
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
		lcd_write4(word>>4); //we first write the upper nibble
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	091b      	lsrs	r3, r3, #4
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ffb9 	bl	8001024 <lcd_write4>
		lcd_write4(word);    //and then the lower nibble
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ffb5 	bl	8001024 <lcd_write4>
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <lcd_command>:
#define DISPLAY_ON 0x04
#define LCD_SETDRAMADD 0x80
uint8_t _display_ctrl = 0;

//  send an instruction to the LCD
void lcd_command(uint8_t byte){
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET); //write an instruction -> RS must be low
 80010ce:	2200      	movs	r2, #0
 80010d0:	2104      	movs	r1, #4
 80010d2:	4805      	ldr	r0, [pc, #20]	@ (80010e8 <lcd_command+0x24>)
 80010d4:	f001 fe5a 	bl	8002d8c <HAL_GPIO_WritePin>
	lcd_write(byte);
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff ffde 	bl	800109c <lcd_write>
}
 80010e0:	bf00      	nop
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40020400 	.word	0x40020400

080010ec <lcd_data>:
	lcd_command(LCD_CLEAR_COMMAND);
	DWT_Delay_us(2000);
}

//  send data to the LCD
void lcd_data(uint8_t byte){
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_SET); //write data, not instruction -> RS must be high
 80010f6:	2201      	movs	r2, #1
 80010f8:	2104      	movs	r1, #4
 80010fa:	4805      	ldr	r0, [pc, #20]	@ (8001110 <lcd_data+0x24>)
 80010fc:	f001 fe46 	bl	8002d8c <HAL_GPIO_WritePin>
	lcd_write(byte);
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff ffca 	bl	800109c <lcd_write>
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40020400 	.word	0x40020400

08001114 <setCursor>:

//  set (x, y) position of the cursor
void setCursor(uint8_t col, uint8_t row){
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	460a      	mov	r2, r1
 800111e:	71fb      	strb	r3, [r7, #7]
 8001120:	4613      	mov	r3, r2
 8001122:	71bb      	strb	r3, [r7, #6]
	if ((col+1)*(row+1)<80){
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	3301      	adds	r3, #1
 8001128:	79ba      	ldrb	r2, [r7, #6]
 800112a:	3201      	adds	r2, #1
 800112c:	fb02 f303 	mul.w	r3, r2, r3
 8001130:	2b4f      	cmp	r3, #79	@ 0x4f
 8001132:	dc10      	bgt.n	8001156 <setCursor+0x42>
		lcd_command(LCD_SETDRAMADD|(col + 40*row)); //in the second row, address is offset by 40
 8001134:	79bb      	ldrb	r3, [r7, #6]
 8001136:	461a      	mov	r2, r3
 8001138:	0092      	lsls	r2, r2, #2
 800113a:	4413      	add	r3, r2
 800113c:	00db      	lsls	r3, r3, #3
 800113e:	b2da      	uxtb	r2, r3
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	4413      	add	r3, r2
 8001144:	b2db      	uxtb	r3, r3
 8001146:	b25b      	sxtb	r3, r3
 8001148:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800114c:	b25b      	sxtb	r3, r3
 800114e:	b2db      	uxtb	r3, r3
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff ffb7 	bl	80010c4 <lcd_command>
	}
}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <lcd_print>:

//  print a string on the display, starting from the cursor position
void lcd_print(char string[]){  //pointer to first char in the string
 800115e:	b580      	push	{r7, lr}
 8001160:	b084      	sub	sp, #16
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
	
	int size = strlen(string);
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f7ff f88a 	bl	8000280 <strlen>
 800116c:	4603      	mov	r3, r0
 800116e:	60fb      	str	r3, [r7, #12]
	
	while (size--){
 8001170:	e006      	b.n	8001180 <lcd_print+0x22>
		lcd_data(*string++);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	1c5a      	adds	r2, r3, #1
 8001176:	607a      	str	r2, [r7, #4]
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff ffb6 	bl	80010ec <lcd_data>
	while (size--){
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	1e5a      	subs	r2, r3, #1
 8001184:	60fa      	str	r2, [r7, #12]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d1f3      	bne.n	8001172 <lcd_print+0x14>
	}
}
 800118a:	bf00      	nop
 800118c:	bf00      	nop
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <lcd_println>:

void lcd_println(char string[], uint8_t row){
 8001194:	b5b0      	push	{r4, r5, r7, lr}
 8001196:	b088      	sub	sp, #32
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	460b      	mov	r3, r1
 800119e:	70fb      	strb	r3, [r7, #3]
	
	char line[] = "                ";
 80011a0:	4b17      	ldr	r3, [pc, #92]	@ (8001200 <lcd_println+0x6c>)
 80011a2:	f107 0408 	add.w	r4, r7, #8
 80011a6:	461d      	mov	r5, r3
 80011a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ac:	682b      	ldr	r3, [r5, #0]
 80011ae:	7023      	strb	r3, [r4, #0]
	
	int size = strlen(string);
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7ff f865 	bl	8000280 <strlen>
 80011b6:	4603      	mov	r3, r0
 80011b8:	61fb      	str	r3, [r7, #28]
	
	if (size > 16)
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	2b10      	cmp	r3, #16
 80011be:	dd0c      	ble.n	80011da <lcd_println+0x46>
		size = 16;
 80011c0:	2310      	movs	r3, #16
 80011c2:	61fb      	str	r3, [r7, #28]

	while (size--){
 80011c4:	e009      	b.n	80011da <lcd_println+0x46>
		line[size] = string[size];
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	4413      	add	r3, r2
 80011cc:	7819      	ldrb	r1, [r3, #0]
 80011ce:	f107 0208 	add.w	r2, r7, #8
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	4413      	add	r3, r2
 80011d6:	460a      	mov	r2, r1
 80011d8:	701a      	strb	r2, [r3, #0]
	while (size--){
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	1e5a      	subs	r2, r3, #1
 80011de:	61fa      	str	r2, [r7, #28]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d1f0      	bne.n	80011c6 <lcd_println+0x32>
	}
	setCursor(0, row);
 80011e4:	78fb      	ldrb	r3, [r7, #3]
 80011e6:	4619      	mov	r1, r3
 80011e8:	2000      	movs	r0, #0
 80011ea:	f7ff ff93 	bl	8001114 <setCursor>
	lcd_print(line);
 80011ee:	f107 0308 	add.w	r3, r7, #8
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff ffb3 	bl	800115e <lcd_print>
}
 80011f8:	bf00      	nop
 80011fa:	3720      	adds	r7, #32
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001200:	0800a370 	.word	0x0800a370

08001204 <writeCustomChar>:

void writeCustomChar(uint8_t address, uint8_t map[]){ //fill Character Generator RAM with custom symbols
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	6039      	str	r1, [r7, #0]
 800120e:	71fb      	strb	r3, [r7, #7]
	address &= 0x7; //address must be 0 to 7
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	f003 0307 	and.w	r3, r3, #7
 8001216:	71fb      	strb	r3, [r7, #7]
	lcd_command(0x40 | (address <<3)); //Set CGRAM address + address shifted left by 3 bits to start writing first byte
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	b25b      	sxtb	r3, r3
 800121e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001222:	b25b      	sxtb	r3, r3
 8001224:	b2db      	uxtb	r3, r3
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff ff4c 	bl	80010c4 <lcd_command>
	for (int i = 0; i<8; i++){
 800122c:	2300      	movs	r3, #0
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	e009      	b.n	8001246 <writeCustomChar+0x42>
		lcd_data(map[i]);	
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	683a      	ldr	r2, [r7, #0]
 8001236:	4413      	add	r3, r2
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff ff56 	bl	80010ec <lcd_data>
	for (int i = 0; i<8; i++){
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	3301      	adds	r3, #1
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	2b07      	cmp	r3, #7
 800124a:	ddf2      	ble.n	8001232 <writeCustomChar+0x2e>
	}
}
 800124c:	bf00      	nop
 800124e:	bf00      	nop
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
	...

08001258 <loadCustomChars>:

void loadCustomChars(){ //write all custom characters to the LCD module memory
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
	writeCustomChar(CHAR_1_5, CUSTOM_1_5);
 800125c:	490a      	ldr	r1, [pc, #40]	@ (8001288 <loadCustomChars+0x30>)
 800125e:	2001      	movs	r0, #1
 8001260:	f7ff ffd0 	bl	8001204 <writeCustomChar>
	writeCustomChar(CHAR_2_5, CUSTOM_2_5);
 8001264:	4909      	ldr	r1, [pc, #36]	@ (800128c <loadCustomChars+0x34>)
 8001266:	2002      	movs	r0, #2
 8001268:	f7ff ffcc 	bl	8001204 <writeCustomChar>
	writeCustomChar(CHAR_3_5, CUSTOM_3_5);
 800126c:	4908      	ldr	r1, [pc, #32]	@ (8001290 <loadCustomChars+0x38>)
 800126e:	2003      	movs	r0, #3
 8001270:	f7ff ffc8 	bl	8001204 <writeCustomChar>
	writeCustomChar(CHAR_4_5, CUSTOM_4_5);
 8001274:	4907      	ldr	r1, [pc, #28]	@ (8001294 <loadCustomChars+0x3c>)
 8001276:	2004      	movs	r0, #4
 8001278:	f7ff ffc4 	bl	8001204 <writeCustomChar>
	writeCustomChar(CHAR_5_5, CUSTOM_5_5);
 800127c:	4906      	ldr	r1, [pc, #24]	@ (8001298 <loadCustomChars+0x40>)
 800127e:	2005      	movs	r0, #5
 8001280:	f7ff ffc0 	bl	8001204 <writeCustomChar>
}
 8001284:	bf00      	nop
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20000000 	.word	0x20000000
 800128c:	20000008 	.word	0x20000008
 8001290:	20000010 	.word	0x20000010
 8001294:	20000018 	.word	0x20000018
 8001298:	20000020 	.word	0x20000020

0800129c <lcd_initialize>:
		i++;
	}
	lcd_print(bar); //finally we write to the LCD
}

void lcd_initialize(){  //initialize WH1602C LCD module in 4 bit mode, page 25
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0

	HAL_Delay(50);  //wait >40 ms as per datasheet
 80012a0:	2032      	movs	r0, #50	@ 0x32
 80012a2:	f000 fe9d 	bl	8001fe0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2104      	movs	r1, #4
 80012aa:	4824      	ldr	r0, [pc, #144]	@ (800133c <lcd_initialize+0xa0>)
 80012ac:	f001 fd6e 	bl	8002d8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_RESET);
 80012b0:	2200      	movs	r2, #0
 80012b2:	2102      	movs	r1, #2
 80012b4:	4821      	ldr	r0, [pc, #132]	@ (800133c <lcd_initialize+0xa0>)
 80012b6:	f001 fd69 	bl	8002d8c <HAL_GPIO_WritePin>
	//LCD WritePIn is hard-wired low as per board schematic
	DWT_Delay_Init();
 80012ba:	f7ff fe45 	bl	8000f48 <DWT_Delay_Init>
	//Magic reset sequence
	lcd_write4(0x03);  //4-bit mode
 80012be:	2003      	movs	r0, #3
 80012c0:	f7ff feb0 	bl	8001024 <lcd_write4>
	HAL_Delay(5);
 80012c4:	2005      	movs	r0, #5
 80012c6:	f000 fe8b 	bl	8001fe0 <HAL_Delay>
	lcd_write4(0x03);
 80012ca:	2003      	movs	r0, #3
 80012cc:	f7ff feaa 	bl	8001024 <lcd_write4>
	HAL_Delay(5);
 80012d0:	2005      	movs	r0, #5
 80012d2:	f000 fe85 	bl	8001fe0 <HAL_Delay>
	lcd_write4(0x03);
 80012d6:	2003      	movs	r0, #3
 80012d8:	f7ff fea4 	bl	8001024 <lcd_write4>
	HAL_Delay(5);
 80012dc:	2005      	movs	r0, #5
 80012de:	f000 fe7f 	bl	8001fe0 <HAL_Delay>
	lcd_write4(0x02); //Set 4-bit mode
 80012e2:	2002      	movs	r0, #2
 80012e4:	f7ff fe9e 	bl	8001024 <lcd_write4>
	lcd_write(0x28); //4bit, 2 lines, 5x8 font
 80012e8:	2028      	movs	r0, #40	@ 0x28
 80012ea:	f7ff fed7 	bl	800109c <lcd_write>
	HAL_Delay(5);
 80012ee:	2005      	movs	r0, #5
 80012f0:	f000 fe76 	bl	8001fe0 <HAL_Delay>
	lcd_write(0x08); //display off;
 80012f4:	2008      	movs	r0, #8
 80012f6:	f7ff fed1 	bl	800109c <lcd_write>
	lcd_write(LCD_CLEAR_COMMAND); 			 //display clear;
 80012fa:	2001      	movs	r0, #1
 80012fc:	f7ff fece 	bl	800109c <lcd_write>
	HAL_Delay(5);
 8001300:	2005      	movs	r0, #5
 8001302:	f000 fe6d 	bl	8001fe0 <HAL_Delay>
	lcd_write(0x06); //entry mode set: increment
 8001306:	2006      	movs	r0, #6
 8001308:	f7ff fec8 	bl	800109c <lcd_write>
	HAL_GPIO_WritePin(LCD_BL_ON, GPIO_PIN_SET);  //enable backlight
 800130c:	2201      	movs	r2, #1
 800130e:	2110      	movs	r1, #16
 8001310:	480b      	ldr	r0, [pc, #44]	@ (8001340 <lcd_initialize+0xa4>)
 8001312:	f001 fd3b 	bl	8002d8c <HAL_GPIO_WritePin>
	//_display_ctrl = DISPLAY_COMMAND|DISPLAY_ON|CURSOR_ON|BLINK_ON;
	_display_ctrl = DISPLAY_COMMAND|DISPLAY_ON;
 8001316:	4b0b      	ldr	r3, [pc, #44]	@ (8001344 <lcd_initialize+0xa8>)
 8001318:	220c      	movs	r2, #12
 800131a:	701a      	strb	r2, [r3, #0]
	lcd_write(_display_ctrl); //set as above
 800131c:	4b09      	ldr	r3, [pc, #36]	@ (8001344 <lcd_initialize+0xa8>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff febb 	bl	800109c <lcd_write>
	lcd_write(0x02); //go home
 8001326:	2002      	movs	r0, #2
 8001328:	f7ff feb8 	bl	800109c <lcd_write>
	HAL_Delay(2);
 800132c:	2002      	movs	r0, #2
 800132e:	f000 fe57 	bl	8001fe0 <HAL_Delay>
	loadCustomChars();
 8001332:	f7ff ff91 	bl	8001258 <loadCustomChars>

}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40020400 	.word	0x40020400
 8001340:	40020000 	.word	0x40020000
 8001344:	2000021c 	.word	0x2000021c

08001348 <lcd_backlight_ON>:

void lcd_backlight_ON(){
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_BL_ON, GPIO_PIN_SET);
 800134c:	2201      	movs	r2, #1
 800134e:	2110      	movs	r1, #16
 8001350:	4802      	ldr	r0, [pc, #8]	@ (800135c <lcd_backlight_ON+0x14>)
 8001352:	f001 fd1b 	bl	8002d8c <HAL_GPIO_WritePin>
}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40020000 	.word	0x40020000

08001360 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
	if (htim != &htim1) return;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4a06      	ldr	r2, [pc, #24]	@ (8001384 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d103      	bne.n	8001378 <HAL_TIM_PeriodElapsedCallback+0x18>
	timer_finished = 1;
 8001370:	4b05      	ldr	r3, [pc, #20]	@ (8001388 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001372:	2201      	movs	r2, #1
 8001374:	701a      	strb	r2, [r3, #0]
 8001376:	e000      	b.n	800137a <HAL_TIM_PeriodElapsedCallback+0x1a>
	if (htim != &htim1) return;
 8001378:	bf00      	nop
}
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	200002d4 	.word	0x200002d4
 8001388:	200003c4 	.word	0x200003c4

0800138c <HAL_I2C_MasterRxCpltCallback>:
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c){
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
	acc_g_x=values[0]/64.0;
 8001394:	4b2e      	ldr	r3, [pc, #184]	@ (8001450 <HAL_I2C_MasterRxCpltCallback+0xc4>)
 8001396:	f993 3000 	ldrsb.w	r3, [r3]
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff f8ca 	bl	8000534 <__aeabi_i2d>
 80013a0:	f04f 0200 	mov.w	r2, #0
 80013a4:	4b2b      	ldr	r3, [pc, #172]	@ (8001454 <HAL_I2C_MasterRxCpltCallback+0xc8>)
 80013a6:	f7ff fa59 	bl	800085c <__aeabi_ddiv>
 80013aa:	4602      	mov	r2, r0
 80013ac:	460b      	mov	r3, r1
 80013ae:	4610      	mov	r0, r2
 80013b0:	4619      	mov	r1, r3
 80013b2:	f7ff fc01 	bl	8000bb8 <__aeabi_d2f>
 80013b6:	4603      	mov	r3, r0
 80013b8:	4a27      	ldr	r2, [pc, #156]	@ (8001458 <HAL_I2C_MasterRxCpltCallback+0xcc>)
 80013ba:	6013      	str	r3, [r2, #0]
	acc_g_y=values[2]/64.0;
 80013bc:	4b24      	ldr	r3, [pc, #144]	@ (8001450 <HAL_I2C_MasterRxCpltCallback+0xc4>)
 80013be:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff f8b6 	bl	8000534 <__aeabi_i2d>
 80013c8:	f04f 0200 	mov.w	r2, #0
 80013cc:	4b21      	ldr	r3, [pc, #132]	@ (8001454 <HAL_I2C_MasterRxCpltCallback+0xc8>)
 80013ce:	f7ff fa45 	bl	800085c <__aeabi_ddiv>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	4610      	mov	r0, r2
 80013d8:	4619      	mov	r1, r3
 80013da:	f7ff fbed 	bl	8000bb8 <__aeabi_d2f>
 80013de:	4603      	mov	r3, r0
 80013e0:	4a1e      	ldr	r2, [pc, #120]	@ (800145c <HAL_I2C_MasterRxCpltCallback+0xd0>)
 80013e2:	6013      	str	r3, [r2, #0]
	acc_g_z=values[4]/64.0;
 80013e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001450 <HAL_I2C_MasterRxCpltCallback+0xc4>)
 80013e6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff f8a2 	bl	8000534 <__aeabi_i2d>
 80013f0:	f04f 0200 	mov.w	r2, #0
 80013f4:	4b17      	ldr	r3, [pc, #92]	@ (8001454 <HAL_I2C_MasterRxCpltCallback+0xc8>)
 80013f6:	f7ff fa31 	bl	800085c <__aeabi_ddiv>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	4610      	mov	r0, r2
 8001400:	4619      	mov	r1, r3
 8001402:	f7ff fbd9 	bl	8000bb8 <__aeabi_d2f>
 8001406:	4603      	mov	r3, r0
 8001408:	4a15      	ldr	r2, [pc, #84]	@ (8001460 <HAL_I2C_MasterRxCpltCallback+0xd4>)
 800140a:	6013      	str	r3, [r2, #0]
	if(acc_g_z>0){
 800140c:	4b14      	ldr	r3, [pc, #80]	@ (8001460 <HAL_I2C_MasterRxCpltCallback+0xd4>)
 800140e:	edd3 7a00 	vldr	s15, [r3]
 8001412:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800141a:	dd04      	ble.n	8001426 <HAL_I2C_MasterRxCpltCallback+0x9a>
		lcd_println("alto", 0);
 800141c:	2100      	movs	r1, #0
 800141e:	4811      	ldr	r0, [pc, #68]	@ (8001464 <HAL_I2C_MasterRxCpltCallback+0xd8>)
 8001420:	f7ff feb8 	bl	8001194 <lcd_println>
	}else if(acc_g_z<0){
		lcd_println("basso", 0);
	}else{
		lcd_println("verticale", 0);
	}
}
 8001424:	e010      	b.n	8001448 <HAL_I2C_MasterRxCpltCallback+0xbc>
	}else if(acc_g_z<0){
 8001426:	4b0e      	ldr	r3, [pc, #56]	@ (8001460 <HAL_I2C_MasterRxCpltCallback+0xd4>)
 8001428:	edd3 7a00 	vldr	s15, [r3]
 800142c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001434:	d504      	bpl.n	8001440 <HAL_I2C_MasterRxCpltCallback+0xb4>
		lcd_println("basso", 0);
 8001436:	2100      	movs	r1, #0
 8001438:	480b      	ldr	r0, [pc, #44]	@ (8001468 <HAL_I2C_MasterRxCpltCallback+0xdc>)
 800143a:	f7ff feab 	bl	8001194 <lcd_println>
}
 800143e:	e003      	b.n	8001448 <HAL_I2C_MasterRxCpltCallback+0xbc>
		lcd_println("verticale", 0);
 8001440:	2100      	movs	r1, #0
 8001442:	480a      	ldr	r0, [pc, #40]	@ (800146c <HAL_I2C_MasterRxCpltCallback+0xe0>)
 8001444:	f7ff fea6 	bl	8001194 <lcd_println>
}
 8001448:	bf00      	nop
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	200003c8 	.word	0x200003c8
 8001454:	40500000 	.word	0x40500000
 8001458:	200003d0 	.word	0x200003d0
 800145c:	200003d4 	.word	0x200003d4
 8001460:	200003d8 	.word	0x200003d8
 8001464:	0800a384 	.word	0x0800a384
 8001468:	0800a38c 	.word	0x0800a38c
 800146c:	0800a394 	.word	0x0800a394

08001470 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b09a      	sub	sp, #104	@ 0x68
 8001474:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001476:	f000 fd41 	bl	8001efc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800147a:	f000 f8bd 	bl	80015f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800147e:	f000 f9f9 	bl	8001874 <MX_GPIO_Init>
  MX_DMA_Init();
 8001482:	f000 f9cf 	bl	8001824 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001486:	f000 f9a3 	bl	80017d0 <MX_USART2_UART_Init>
  lcd_initialize();
 800148a:	f7ff ff07 	bl	800129c <lcd_initialize>
  lcd_backlight_ON();
 800148e:	f7ff ff5b 	bl	8001348 <lcd_backlight_ON>
  MX_I2C1_Init();
 8001492:	f000 f91d 	bl	80016d0 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001496:	f000 f949 	bl	800172c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  char stringa[64];
	uint8_t data[5];

	int length = snprintf(stringa, sizeof(stringa), "-----\n\r");
 800149a:	f107 0314 	add.w	r3, r7, #20
 800149e:	4a4d      	ldr	r2, [pc, #308]	@ (80015d4 <main+0x164>)
 80014a0:	2140      	movs	r1, #64	@ 0x40
 80014a2:	4618      	mov	r0, r3
 80014a4:	f006 fe16 	bl	80080d4 <sniprintf>
 80014a8:	65f8      	str	r0, [r7, #92]	@ 0x5c
	HAL_UART_Transmit(&huart2, stringa, length, 100);
 80014aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	f107 0114 	add.w	r1, r7, #20
 80014b2:	2364      	movs	r3, #100	@ 0x64
 80014b4:	4848      	ldr	r0, [pc, #288]	@ (80015d8 <main+0x168>)
 80014b6:	f004 ffd6 	bl	8006466 <HAL_UART_Transmit>

	// REG_ADDRESS | 4-bit config | LOW_POWER | ZYX
	uint8_t mode = 0b0001;
 80014ba:	2301      	movs	r3, #1
 80014bc:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	uint8_t low_power = 0b0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
	uint8_t axis = 0b111;
 80014c6:	2307      	movs	r3, #7
 80014c8:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59

	uint8_t CTRL_REG1[] = {0x20, (mode << 4) | (low_power << 3) | (axis)};
 80014cc:	2320      	movs	r3, #32
 80014ce:	723b      	strb	r3, [r7, #8]
 80014d0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80014d4:	011b      	lsls	r3, r3, #4
 80014d6:	b25a      	sxtb	r2, r3
 80014d8:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	b25b      	sxtb	r3, r3
 80014e0:	4313      	orrs	r3, r2
 80014e2:	b25a      	sxtb	r2, r3
 80014e4:	f997 3059 	ldrsb.w	r3, [r7, #89]	@ 0x59
 80014e8:	4313      	orrs	r3, r2
 80014ea:	b25b      	sxtb	r3, r3
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	727b      	strb	r3, [r7, #9]
	uint8_t CTRL_REG2[] = {0x21, 0x00};
 80014f0:	2321      	movs	r3, #33	@ 0x21
 80014f2:	80bb      	strh	r3, [r7, #4]
	uint8_t CTRL_REG4[] = {0x23, 0x00};
 80014f4:	2323      	movs	r3, #35	@ 0x23
 80014f6:	803b      	strh	r3, [r7, #0]

	if (HAL_I2C_Master_Transmit(&hi2c1, (ACCEL_ADDRESS_V1 << 1) | WRITEBIT, CTRL_REG1, sizeof(CTRL_REG1), 200) == HAL_OK) {
 80014f8:	f107 0208 	add.w	r2, r7, #8
 80014fc:	23c8      	movs	r3, #200	@ 0xc8
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	2302      	movs	r3, #2
 8001502:	2150      	movs	r1, #80	@ 0x50
 8001504:	4835      	ldr	r0, [pc, #212]	@ (80015dc <main+0x16c>)
 8001506:	f001 fd9f 	bl	8003048 <HAL_I2C_Master_Transmit>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d103      	bne.n	8001518 <main+0xa8>
	  ACCEL_ADDRESS = ACCEL_ADDRESS_V1;
 8001510:	4b33      	ldr	r3, [pc, #204]	@ (80015e0 <main+0x170>)
 8001512:	2228      	movs	r2, #40	@ 0x28
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	e01f      	b.n	8001558 <main+0xe8>
	} else if (HAL_I2C_Master_Transmit(&hi2c1, (ACCEL_ADDRESS_V2 << 1) | WRITEBIT, CTRL_REG1, sizeof(CTRL_REG1), 200) == HAL_OK) {
 8001518:	f107 0208 	add.w	r2, r7, #8
 800151c:	23c8      	movs	r3, #200	@ 0xc8
 800151e:	9300      	str	r3, [sp, #0]
 8001520:	2302      	movs	r3, #2
 8001522:	2150      	movs	r1, #80	@ 0x50
 8001524:	482d      	ldr	r0, [pc, #180]	@ (80015dc <main+0x16c>)
 8001526:	f001 fd8f 	bl	8003048 <HAL_I2C_Master_Transmit>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d103      	bne.n	8001538 <main+0xc8>
	  ACCEL_ADDRESS = ACCEL_ADDRESS_V2;
 8001530:	4b2b      	ldr	r3, [pc, #172]	@ (80015e0 <main+0x170>)
 8001532:	2228      	movs	r2, #40	@ 0x28
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	e00f      	b.n	8001558 <main+0xe8>
	} else {
	  int length = snprintf(stringa, sizeof(stringa), "Error: incorrect accelerator address\n\r");
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	4a29      	ldr	r2, [pc, #164]	@ (80015e4 <main+0x174>)
 800153e:	2140      	movs	r1, #64	@ 0x40
 8001540:	4618      	mov	r0, r3
 8001542:	f006 fdc7 	bl	80080d4 <sniprintf>
 8001546:	6578      	str	r0, [r7, #84]	@ 0x54
	  HAL_UART_Transmit_DMA(&huart2, stringa, length);
 8001548:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800154a:	b29a      	uxth	r2, r3
 800154c:	f107 0314 	add.w	r3, r7, #20
 8001550:	4619      	mov	r1, r3
 8001552:	4821      	ldr	r0, [pc, #132]	@ (80015d8 <main+0x168>)
 8001554:	f005 f81a 	bl	800658c <HAL_UART_Transmit_DMA>
	}

	HAL_I2C_Master_Transmit(&hi2c1, (ACCEL_ADDRESS << 1) | WRITEBIT, CTRL_REG2, sizeof(CTRL_REG2), 200);
 8001558:	4b21      	ldr	r3, [pc, #132]	@ (80015e0 <main+0x170>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	b29b      	uxth	r3, r3
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	b299      	uxth	r1, r3
 8001562:	1d3a      	adds	r2, r7, #4
 8001564:	23c8      	movs	r3, #200	@ 0xc8
 8001566:	9300      	str	r3, [sp, #0]
 8001568:	2302      	movs	r3, #2
 800156a:	481c      	ldr	r0, [pc, #112]	@ (80015dc <main+0x16c>)
 800156c:	f001 fd6c 	bl	8003048 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c1, (ACCEL_ADDRESS << 1) | WRITEBIT, CTRL_REG4, sizeof(CTRL_REG4), 200);
 8001570:	4b1b      	ldr	r3, [pc, #108]	@ (80015e0 <main+0x170>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	b29b      	uxth	r3, r3
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	b299      	uxth	r1, r3
 800157a:	463a      	mov	r2, r7
 800157c:	23c8      	movs	r3, #200	@ 0xc8
 800157e:	9300      	str	r3, [sp, #0]
 8001580:	2302      	movs	r3, #2
 8001582:	4816      	ldr	r0, [pc, #88]	@ (80015dc <main+0x16c>)
 8001584:	f001 fd60 	bl	8003048 <HAL_I2C_Master_Transmit>

	HAL_TIM_Base_Start_IT(&htim1);
 8001588:	4817      	ldr	r0, [pc, #92]	@ (80015e8 <main+0x178>)
 800158a:	f004 fb29 	bl	8005be0 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (!timer_finished) continue;
 800158e:	4b17      	ldr	r3, [pc, #92]	@ (80015ec <main+0x17c>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	b2db      	uxtb	r3, r3
 8001594:	2b00      	cmp	r3, #0
 8001596:	d01b      	beq.n	80015d0 <main+0x160>
	  timer_finished = 0;
 8001598:	4b14      	ldr	r3, [pc, #80]	@ (80015ec <main+0x17c>)
 800159a:	2200      	movs	r2, #0
 800159c:	701a      	strb	r2, [r3, #0]

	  HAL_I2C_Master_Transmit(&hi2c1, (ACCEL_ADDRESS<<1), &out_add, 1, 200);
 800159e:	4b10      	ldr	r3, [pc, #64]	@ (80015e0 <main+0x170>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	b299      	uxth	r1, r3
 80015a8:	23c8      	movs	r3, #200	@ 0xc8
 80015aa:	9300      	str	r3, [sp, #0]
 80015ac:	2301      	movs	r3, #1
 80015ae:	4a10      	ldr	r2, [pc, #64]	@ (80015f0 <main+0x180>)
 80015b0:	480a      	ldr	r0, [pc, #40]	@ (80015dc <main+0x16c>)
 80015b2:	f001 fd49 	bl	8003048 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive_DMA(&hi2c1, (ACCEL_ADDRESS<<1)+1, values, 5);
 80015b6:	4b0a      	ldr	r3, [pc, #40]	@ (80015e0 <main+0x170>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	b29b      	uxth	r3, r3
 80015c0:	3301      	adds	r3, #1
 80015c2:	b299      	uxth	r1, r3
 80015c4:	2305      	movs	r3, #5
 80015c6:	4a0b      	ldr	r2, [pc, #44]	@ (80015f4 <main+0x184>)
 80015c8:	4804      	ldr	r0, [pc, #16]	@ (80015dc <main+0x16c>)
 80015ca:	f001 fe3b 	bl	8003244 <HAL_I2C_Master_Receive_DMA>
 80015ce:	e7de      	b.n	800158e <main+0x11e>
	  if (!timer_finished) continue;
 80015d0:	bf00      	nop
 80015d2:	e7dc      	b.n	800158e <main+0x11e>
 80015d4:	0800a3a0 	.word	0x0800a3a0
 80015d8:	2000031c 	.word	0x2000031c
 80015dc:	20000220 	.word	0x20000220
 80015e0:	200003c0 	.word	0x200003c0
 80015e4:	0800a3a8 	.word	0x0800a3a8
 80015e8:	200002d4 	.word	0x200002d4
 80015ec:	200003c4 	.word	0x200003c4
 80015f0:	20000028 	.word	0x20000028
 80015f4:	200003c8 	.word	0x200003c8

080015f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b094      	sub	sp, #80	@ 0x50
 80015fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015fe:	f107 0320 	add.w	r3, r7, #32
 8001602:	2230      	movs	r2, #48	@ 0x30
 8001604:	2100      	movs	r1, #0
 8001606:	4618      	mov	r0, r3
 8001608:	f006 fddb 	bl	80081c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800160c:	f107 030c 	add.w	r3, r7, #12
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800161c:	2300      	movs	r3, #0
 800161e:	60bb      	str	r3, [r7, #8]
 8001620:	4b29      	ldr	r3, [pc, #164]	@ (80016c8 <SystemClock_Config+0xd0>)
 8001622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001624:	4a28      	ldr	r2, [pc, #160]	@ (80016c8 <SystemClock_Config+0xd0>)
 8001626:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800162a:	6413      	str	r3, [r2, #64]	@ 0x40
 800162c:	4b26      	ldr	r3, [pc, #152]	@ (80016c8 <SystemClock_Config+0xd0>)
 800162e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001630:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001634:	60bb      	str	r3, [r7, #8]
 8001636:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001638:	2300      	movs	r3, #0
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	4b23      	ldr	r3, [pc, #140]	@ (80016cc <SystemClock_Config+0xd4>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001644:	4a21      	ldr	r2, [pc, #132]	@ (80016cc <SystemClock_Config+0xd4>)
 8001646:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800164a:	6013      	str	r3, [r2, #0]
 800164c:	4b1f      	ldr	r3, [pc, #124]	@ (80016cc <SystemClock_Config+0xd4>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001654:	607b      	str	r3, [r7, #4]
 8001656:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001658:	2302      	movs	r3, #2
 800165a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800165c:	2301      	movs	r3, #1
 800165e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001660:	2310      	movs	r3, #16
 8001662:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001664:	2302      	movs	r3, #2
 8001666:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001668:	2300      	movs	r3, #0
 800166a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800166c:	2310      	movs	r3, #16
 800166e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001670:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001674:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001676:	2304      	movs	r3, #4
 8001678:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800167a:	2307      	movs	r3, #7
 800167c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800167e:	f107 0320 	add.w	r3, r7, #32
 8001682:	4618      	mov	r0, r3
 8001684:	f003 fdc4 	bl	8005210 <HAL_RCC_OscConfig>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800168e:	f000 f977 	bl	8001980 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001692:	230f      	movs	r3, #15
 8001694:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001696:	2302      	movs	r3, #2
 8001698:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800169e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016a4:	2300      	movs	r3, #0
 80016a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016a8:	f107 030c 	add.w	r3, r7, #12
 80016ac:	2102      	movs	r1, #2
 80016ae:	4618      	mov	r0, r3
 80016b0:	f004 f826 	bl	8005700 <HAL_RCC_ClockConfig>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80016ba:	f000 f961 	bl	8001980 <Error_Handler>
  }
}
 80016be:	bf00      	nop
 80016c0:	3750      	adds	r7, #80	@ 0x50
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40007000 	.word	0x40007000

080016d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016d4:	4b12      	ldr	r3, [pc, #72]	@ (8001720 <MX_I2C1_Init+0x50>)
 80016d6:	4a13      	ldr	r2, [pc, #76]	@ (8001724 <MX_I2C1_Init+0x54>)
 80016d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016da:	4b11      	ldr	r3, [pc, #68]	@ (8001720 <MX_I2C1_Init+0x50>)
 80016dc:	4a12      	ldr	r2, [pc, #72]	@ (8001728 <MX_I2C1_Init+0x58>)
 80016de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001720 <MX_I2C1_Init+0x50>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001720 <MX_I2C1_Init+0x50>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001720 <MX_I2C1_Init+0x50>)
 80016ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80016f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001720 <MX_I2C1_Init+0x50>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016fa:	4b09      	ldr	r3, [pc, #36]	@ (8001720 <MX_I2C1_Init+0x50>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001700:	4b07      	ldr	r3, [pc, #28]	@ (8001720 <MX_I2C1_Init+0x50>)
 8001702:	2200      	movs	r2, #0
 8001704:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001706:	4b06      	ldr	r3, [pc, #24]	@ (8001720 <MX_I2C1_Init+0x50>)
 8001708:	2200      	movs	r2, #0
 800170a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800170c:	4804      	ldr	r0, [pc, #16]	@ (8001720 <MX_I2C1_Init+0x50>)
 800170e:	f001 fb57 	bl	8002dc0 <HAL_I2C_Init>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001718:	f000 f932 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800171c:	bf00      	nop
 800171e:	bd80      	pop	{r7, pc}
 8001720:	20000220 	.word	0x20000220
 8001724:	40005400 	.word	0x40005400
 8001728:	000186a0 	.word	0x000186a0

0800172c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001732:	f107 0308 	add.w	r3, r7, #8
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	605a      	str	r2, [r3, #4]
 800173c:	609a      	str	r2, [r3, #8]
 800173e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001740:	463b      	mov	r3, r7
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001748:	4b1f      	ldr	r3, [pc, #124]	@ (80017c8 <MX_TIM1_Init+0x9c>)
 800174a:	4a20      	ldr	r2, [pc, #128]	@ (80017cc <MX_TIM1_Init+0xa0>)
 800174c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8400-1;
 800174e:	4b1e      	ldr	r3, [pc, #120]	@ (80017c8 <MX_TIM1_Init+0x9c>)
 8001750:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001754:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001756:	4b1c      	ldr	r3, [pc, #112]	@ (80017c8 <MX_TIM1_Init+0x9c>)
 8001758:	2200      	movs	r2, #0
 800175a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 800175c:	4b1a      	ldr	r3, [pc, #104]	@ (80017c8 <MX_TIM1_Init+0x9c>)
 800175e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001762:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001764:	4b18      	ldr	r3, [pc, #96]	@ (80017c8 <MX_TIM1_Init+0x9c>)
 8001766:	2200      	movs	r2, #0
 8001768:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800176a:	4b17      	ldr	r3, [pc, #92]	@ (80017c8 <MX_TIM1_Init+0x9c>)
 800176c:	2200      	movs	r2, #0
 800176e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001770:	4b15      	ldr	r3, [pc, #84]	@ (80017c8 <MX_TIM1_Init+0x9c>)
 8001772:	2200      	movs	r2, #0
 8001774:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001776:	4814      	ldr	r0, [pc, #80]	@ (80017c8 <MX_TIM1_Init+0x9c>)
 8001778:	f004 f9e2 	bl	8005b40 <HAL_TIM_Base_Init>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001782:	f000 f8fd 	bl	8001980 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001786:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800178a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800178c:	f107 0308 	add.w	r3, r7, #8
 8001790:	4619      	mov	r1, r3
 8001792:	480d      	ldr	r0, [pc, #52]	@ (80017c8 <MX_TIM1_Init+0x9c>)
 8001794:	f004 fb8e 	bl	8005eb4 <HAL_TIM_ConfigClockSource>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800179e:	f000 f8ef 	bl	8001980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017a2:	2300      	movs	r3, #0
 80017a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017a6:	2300      	movs	r3, #0
 80017a8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017aa:	463b      	mov	r3, r7
 80017ac:	4619      	mov	r1, r3
 80017ae:	4806      	ldr	r0, [pc, #24]	@ (80017c8 <MX_TIM1_Init+0x9c>)
 80017b0:	f004 fd8a 	bl	80062c8 <HAL_TIMEx_MasterConfigSynchronization>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80017ba:	f000 f8e1 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80017be:	bf00      	nop
 80017c0:	3718      	adds	r7, #24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	200002d4 	.word	0x200002d4
 80017cc:	40010000 	.word	0x40010000

080017d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017d4:	4b11      	ldr	r3, [pc, #68]	@ (800181c <MX_USART2_UART_Init+0x4c>)
 80017d6:	4a12      	ldr	r2, [pc, #72]	@ (8001820 <MX_USART2_UART_Init+0x50>)
 80017d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017da:	4b10      	ldr	r3, [pc, #64]	@ (800181c <MX_USART2_UART_Init+0x4c>)
 80017dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017e2:	4b0e      	ldr	r3, [pc, #56]	@ (800181c <MX_USART2_UART_Init+0x4c>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017e8:	4b0c      	ldr	r3, [pc, #48]	@ (800181c <MX_USART2_UART_Init+0x4c>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017ee:	4b0b      	ldr	r3, [pc, #44]	@ (800181c <MX_USART2_UART_Init+0x4c>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017f4:	4b09      	ldr	r3, [pc, #36]	@ (800181c <MX_USART2_UART_Init+0x4c>)
 80017f6:	220c      	movs	r2, #12
 80017f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017fa:	4b08      	ldr	r3, [pc, #32]	@ (800181c <MX_USART2_UART_Init+0x4c>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001800:	4b06      	ldr	r3, [pc, #24]	@ (800181c <MX_USART2_UART_Init+0x4c>)
 8001802:	2200      	movs	r2, #0
 8001804:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001806:	4805      	ldr	r0, [pc, #20]	@ (800181c <MX_USART2_UART_Init+0x4c>)
 8001808:	f004 fde0 	bl	80063cc <HAL_UART_Init>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001812:	f000 f8b5 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	2000031c 	.word	0x2000031c
 8001820:	40004400 	.word	0x40004400

08001824 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	607b      	str	r3, [r7, #4]
 800182e:	4b10      	ldr	r3, [pc, #64]	@ (8001870 <MX_DMA_Init+0x4c>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001832:	4a0f      	ldr	r2, [pc, #60]	@ (8001870 <MX_DMA_Init+0x4c>)
 8001834:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001838:	6313      	str	r3, [r2, #48]	@ 0x30
 800183a:	4b0d      	ldr	r3, [pc, #52]	@ (8001870 <MX_DMA_Init+0x4c>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001842:	607b      	str	r3, [r7, #4]
 8001844:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001846:	2200      	movs	r2, #0
 8001848:	2100      	movs	r1, #0
 800184a:	200b      	movs	r0, #11
 800184c:	f000 fcc7 	bl	80021de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001850:	200b      	movs	r0, #11
 8001852:	f000 fce0 	bl	8002216 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001856:	2200      	movs	r2, #0
 8001858:	2100      	movs	r1, #0
 800185a:	2011      	movs	r0, #17
 800185c:	f000 fcbf 	bl	80021de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001860:	2011      	movs	r0, #17
 8001862:	f000 fcd8 	bl	8002216 <HAL_NVIC_EnableIRQ>

}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40023800 	.word	0x40023800

08001874 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b08a      	sub	sp, #40	@ 0x28
 8001878:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187a:	f107 0314 	add.w	r3, r7, #20
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	605a      	str	r2, [r3, #4]
 8001884:	609a      	str	r2, [r3, #8]
 8001886:	60da      	str	r2, [r3, #12]
 8001888:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	613b      	str	r3, [r7, #16]
 800188e:	4b38      	ldr	r3, [pc, #224]	@ (8001970 <MX_GPIO_Init+0xfc>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001892:	4a37      	ldr	r2, [pc, #220]	@ (8001970 <MX_GPIO_Init+0xfc>)
 8001894:	f043 0304 	orr.w	r3, r3, #4
 8001898:	6313      	str	r3, [r2, #48]	@ 0x30
 800189a:	4b35      	ldr	r3, [pc, #212]	@ (8001970 <MX_GPIO_Init+0xfc>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189e:	f003 0304 	and.w	r3, r3, #4
 80018a2:	613b      	str	r3, [r7, #16]
 80018a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	4b31      	ldr	r3, [pc, #196]	@ (8001970 <MX_GPIO_Init+0xfc>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ae:	4a30      	ldr	r2, [pc, #192]	@ (8001970 <MX_GPIO_Init+0xfc>)
 80018b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018b6:	4b2e      	ldr	r3, [pc, #184]	@ (8001970 <MX_GPIO_Init+0xfc>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	60bb      	str	r3, [r7, #8]
 80018c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001970 <MX_GPIO_Init+0xfc>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ca:	4a29      	ldr	r2, [pc, #164]	@ (8001970 <MX_GPIO_Init+0xfc>)
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018d2:	4b27      	ldr	r3, [pc, #156]	@ (8001970 <MX_GPIO_Init+0xfc>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	60bb      	str	r3, [r7, #8]
 80018dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	607b      	str	r3, [r7, #4]
 80018e2:	4b23      	ldr	r3, [pc, #140]	@ (8001970 <MX_GPIO_Init+0xfc>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e6:	4a22      	ldr	r2, [pc, #136]	@ (8001970 <MX_GPIO_Init+0xfc>)
 80018e8:	f043 0302 	orr.w	r3, r3, #2
 80018ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ee:	4b20      	ldr	r3, [pc, #128]	@ (8001970 <MX_GPIO_Init+0xfc>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	607b      	str	r3, [r7, #4]
 80018f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 80018fa:	2200      	movs	r2, #0
 80018fc:	2130      	movs	r1, #48	@ 0x30
 80018fe:	481d      	ldr	r0, [pc, #116]	@ (8001974 <MX_GPIO_Init+0x100>)
 8001900:	f001 fa44 	bl	8002d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 8001904:	2200      	movs	r2, #0
 8001906:	f24f 0106 	movw	r1, #61446	@ 0xf006
 800190a:	481b      	ldr	r0, [pc, #108]	@ (8001978 <MX_GPIO_Init+0x104>)
 800190c:	f001 fa3e 	bl	8002d8c <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001910:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001916:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800191a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001920:	f107 0314 	add.w	r3, r7, #20
 8001924:	4619      	mov	r1, r3
 8001926:	4815      	ldr	r0, [pc, #84]	@ (800197c <MX_GPIO_Init+0x108>)
 8001928:	f001 f8ac 	bl	8002a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 800192c:	2330      	movs	r3, #48	@ 0x30
 800192e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001930:	2301      	movs	r3, #1
 8001932:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001938:	2300      	movs	r3, #0
 800193a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193c:	f107 0314 	add.w	r3, r7, #20
 8001940:	4619      	mov	r1, r3
 8001942:	480c      	ldr	r0, [pc, #48]	@ (8001974 <MX_GPIO_Init+0x100>)
 8001944:	f001 f89e 	bl	8002a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 8001948:	f24f 0306 	movw	r3, #61446	@ 0xf006
 800194c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800194e:	2301      	movs	r3, #1
 8001950:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001952:	2300      	movs	r3, #0
 8001954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001956:	2300      	movs	r3, #0
 8001958:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800195a:	f107 0314 	add.w	r3, r7, #20
 800195e:	4619      	mov	r1, r3
 8001960:	4805      	ldr	r0, [pc, #20]	@ (8001978 <MX_GPIO_Init+0x104>)
 8001962:	f001 f88f 	bl	8002a84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001966:	bf00      	nop
 8001968:	3728      	adds	r7, #40	@ 0x28
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40023800 	.word	0x40023800
 8001974:	40020000 	.word	0x40020000
 8001978:	40020400 	.word	0x40020400
 800197c:	40020800 	.word	0x40020800

08001980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001984:	b672      	cpsid	i
}
 8001986:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001988:	bf00      	nop
 800198a:	e7fd      	b.n	8001988 <Error_Handler+0x8>

0800198c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	607b      	str	r3, [r7, #4]
 8001996:	4b10      	ldr	r3, [pc, #64]	@ (80019d8 <HAL_MspInit+0x4c>)
 8001998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800199a:	4a0f      	ldr	r2, [pc, #60]	@ (80019d8 <HAL_MspInit+0x4c>)
 800199c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80019a2:	4b0d      	ldr	r3, [pc, #52]	@ (80019d8 <HAL_MspInit+0x4c>)
 80019a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019aa:	607b      	str	r3, [r7, #4]
 80019ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	603b      	str	r3, [r7, #0]
 80019b2:	4b09      	ldr	r3, [pc, #36]	@ (80019d8 <HAL_MspInit+0x4c>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b6:	4a08      	ldr	r2, [pc, #32]	@ (80019d8 <HAL_MspInit+0x4c>)
 80019b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80019be:	4b06      	ldr	r3, [pc, #24]	@ (80019d8 <HAL_MspInit+0x4c>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019c6:	603b      	str	r3, [r7, #0]
 80019c8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80019ca:	2007      	movs	r0, #7
 80019cc:	f000 fbfc 	bl	80021c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019d0:	bf00      	nop
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40023800 	.word	0x40023800

080019dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08a      	sub	sp, #40	@ 0x28
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e4:	f107 0314 	add.w	r3, r7, #20
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a34      	ldr	r2, [pc, #208]	@ (8001acc <HAL_I2C_MspInit+0xf0>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d162      	bne.n	8001ac4 <HAL_I2C_MspInit+0xe8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	613b      	str	r3, [r7, #16]
 8001a02:	4b33      	ldr	r3, [pc, #204]	@ (8001ad0 <HAL_I2C_MspInit+0xf4>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a06:	4a32      	ldr	r2, [pc, #200]	@ (8001ad0 <HAL_I2C_MspInit+0xf4>)
 8001a08:	f043 0302 	orr.w	r3, r3, #2
 8001a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a0e:	4b30      	ldr	r3, [pc, #192]	@ (8001ad0 <HAL_I2C_MspInit+0xf4>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	613b      	str	r3, [r7, #16]
 8001a18:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a1a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a20:	2312      	movs	r3, #18
 8001a22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a2c:	2304      	movs	r3, #4
 8001a2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a30:	f107 0314 	add.w	r3, r7, #20
 8001a34:	4619      	mov	r1, r3
 8001a36:	4827      	ldr	r0, [pc, #156]	@ (8001ad4 <HAL_I2C_MspInit+0xf8>)
 8001a38:	f001 f824 	bl	8002a84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	4b23      	ldr	r3, [pc, #140]	@ (8001ad0 <HAL_I2C_MspInit+0xf4>)
 8001a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a44:	4a22      	ldr	r2, [pc, #136]	@ (8001ad0 <HAL_I2C_MspInit+0xf4>)
 8001a46:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a4c:	4b20      	ldr	r3, [pc, #128]	@ (8001ad0 <HAL_I2C_MspInit+0xf4>)
 8001a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001a58:	4b1f      	ldr	r3, [pc, #124]	@ (8001ad8 <HAL_I2C_MspInit+0xfc>)
 8001a5a:	4a20      	ldr	r2, [pc, #128]	@ (8001adc <HAL_I2C_MspInit+0x100>)
 8001a5c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ad8 <HAL_I2C_MspInit+0xfc>)
 8001a60:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a64:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a66:	4b1c      	ldr	r3, [pc, #112]	@ (8001ad8 <HAL_I2C_MspInit+0xfc>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad8 <HAL_I2C_MspInit+0xfc>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a72:	4b19      	ldr	r3, [pc, #100]	@ (8001ad8 <HAL_I2C_MspInit+0xfc>)
 8001a74:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a78:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a7a:	4b17      	ldr	r3, [pc, #92]	@ (8001ad8 <HAL_I2C_MspInit+0xfc>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a80:	4b15      	ldr	r3, [pc, #84]	@ (8001ad8 <HAL_I2C_MspInit+0xfc>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001a86:	4b14      	ldr	r3, [pc, #80]	@ (8001ad8 <HAL_I2C_MspInit+0xfc>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a8c:	4b12      	ldr	r3, [pc, #72]	@ (8001ad8 <HAL_I2C_MspInit+0xfc>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a92:	4b11      	ldr	r3, [pc, #68]	@ (8001ad8 <HAL_I2C_MspInit+0xfc>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001a98:	480f      	ldr	r0, [pc, #60]	@ (8001ad8 <HAL_I2C_MspInit+0xfc>)
 8001a9a:	f000 fbd7 	bl	800224c <HAL_DMA_Init>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8001aa4:	f7ff ff6c 	bl	8001980 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4a0b      	ldr	r2, [pc, #44]	@ (8001ad8 <HAL_I2C_MspInit+0xfc>)
 8001aac:	639a      	str	r2, [r3, #56]	@ 0x38
 8001aae:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad8 <HAL_I2C_MspInit+0xfc>)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	201f      	movs	r0, #31
 8001aba:	f000 fb90 	bl	80021de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001abe:	201f      	movs	r0, #31
 8001ac0:	f000 fba9 	bl	8002216 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ac4:	bf00      	nop
 8001ac6:	3728      	adds	r7, #40	@ 0x28
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40005400 	.word	0x40005400
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	40020400 	.word	0x40020400
 8001ad8:	20000274 	.word	0x20000274
 8001adc:	40026010 	.word	0x40026010

08001ae0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a0e      	ldr	r2, [pc, #56]	@ (8001b28 <HAL_TIM_Base_MspInit+0x48>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d115      	bne.n	8001b1e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	4b0d      	ldr	r3, [pc, #52]	@ (8001b2c <HAL_TIM_Base_MspInit+0x4c>)
 8001af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001afa:	4a0c      	ldr	r2, [pc, #48]	@ (8001b2c <HAL_TIM_Base_MspInit+0x4c>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b02:	4b0a      	ldr	r3, [pc, #40]	@ (8001b2c <HAL_TIM_Base_MspInit+0x4c>)
 8001b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2100      	movs	r1, #0
 8001b12:	2019      	movs	r0, #25
 8001b14:	f000 fb63 	bl	80021de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001b18:	2019      	movs	r0, #25
 8001b1a:	f000 fb7c 	bl	8002216 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001b1e:	bf00      	nop
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40010000 	.word	0x40010000
 8001b2c:	40023800 	.word	0x40023800

08001b30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08a      	sub	sp, #40	@ 0x28
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b38:	f107 0314 	add.w	r3, r7, #20
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]
 8001b46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a34      	ldr	r2, [pc, #208]	@ (8001c20 <HAL_UART_MspInit+0xf0>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d161      	bne.n	8001c16 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	613b      	str	r3, [r7, #16]
 8001b56:	4b33      	ldr	r3, [pc, #204]	@ (8001c24 <HAL_UART_MspInit+0xf4>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5a:	4a32      	ldr	r2, [pc, #200]	@ (8001c24 <HAL_UART_MspInit+0xf4>)
 8001b5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b62:	4b30      	ldr	r3, [pc, #192]	@ (8001c24 <HAL_UART_MspInit+0xf4>)
 8001b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b6a:	613b      	str	r3, [r7, #16]
 8001b6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	4b2c      	ldr	r3, [pc, #176]	@ (8001c24 <HAL_UART_MspInit+0xf4>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b76:	4a2b      	ldr	r2, [pc, #172]	@ (8001c24 <HAL_UART_MspInit+0xf4>)
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b7e:	4b29      	ldr	r3, [pc, #164]	@ (8001c24 <HAL_UART_MspInit+0xf4>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b8a:	230c      	movs	r3, #12
 8001b8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b96:	2300      	movs	r3, #0
 8001b98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b9a:	2307      	movs	r3, #7
 8001b9c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b9e:	f107 0314 	add.w	r3, r7, #20
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4820      	ldr	r0, [pc, #128]	@ (8001c28 <HAL_UART_MspInit+0xf8>)
 8001ba6:	f000 ff6d 	bl	8002a84 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001baa:	4b20      	ldr	r3, [pc, #128]	@ (8001c2c <HAL_UART_MspInit+0xfc>)
 8001bac:	4a20      	ldr	r2, [pc, #128]	@ (8001c30 <HAL_UART_MspInit+0x100>)
 8001bae:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001bb0:	4b1e      	ldr	r3, [pc, #120]	@ (8001c2c <HAL_UART_MspInit+0xfc>)
 8001bb2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001bb6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bb8:	4b1c      	ldr	r3, [pc, #112]	@ (8001c2c <HAL_UART_MspInit+0xfc>)
 8001bba:	2240      	movs	r2, #64	@ 0x40
 8001bbc:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bbe:	4b1b      	ldr	r3, [pc, #108]	@ (8001c2c <HAL_UART_MspInit+0xfc>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001bc4:	4b19      	ldr	r3, [pc, #100]	@ (8001c2c <HAL_UART_MspInit+0xfc>)
 8001bc6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bca:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bcc:	4b17      	ldr	r3, [pc, #92]	@ (8001c2c <HAL_UART_MspInit+0xfc>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bd2:	4b16      	ldr	r3, [pc, #88]	@ (8001c2c <HAL_UART_MspInit+0xfc>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001bd8:	4b14      	ldr	r3, [pc, #80]	@ (8001c2c <HAL_UART_MspInit+0xfc>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001bde:	4b13      	ldr	r3, [pc, #76]	@ (8001c2c <HAL_UART_MspInit+0xfc>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001be4:	4b11      	ldr	r3, [pc, #68]	@ (8001c2c <HAL_UART_MspInit+0xfc>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001bea:	4810      	ldr	r0, [pc, #64]	@ (8001c2c <HAL_UART_MspInit+0xfc>)
 8001bec:	f000 fb2e 	bl	800224c <HAL_DMA_Init>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001bf6:	f7ff fec3 	bl	8001980 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a0b      	ldr	r2, [pc, #44]	@ (8001c2c <HAL_UART_MspInit+0xfc>)
 8001bfe:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c00:	4a0a      	ldr	r2, [pc, #40]	@ (8001c2c <HAL_UART_MspInit+0xfc>)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c06:	2200      	movs	r2, #0
 8001c08:	2100      	movs	r1, #0
 8001c0a:	2026      	movs	r0, #38	@ 0x26
 8001c0c:	f000 fae7 	bl	80021de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c10:	2026      	movs	r0, #38	@ 0x26
 8001c12:	f000 fb00 	bl	8002216 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c16:	bf00      	nop
 8001c18:	3728      	adds	r7, #40	@ 0x28
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40004400 	.word	0x40004400
 8001c24:	40023800 	.word	0x40023800
 8001c28:	40020000 	.word	0x40020000
 8001c2c:	20000360 	.word	0x20000360
 8001c30:	400260a0 	.word	0x400260a0

08001c34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c38:	bf00      	nop
 8001c3a:	e7fd      	b.n	8001c38 <NMI_Handler+0x4>

08001c3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c40:	bf00      	nop
 8001c42:	e7fd      	b.n	8001c40 <HardFault_Handler+0x4>

08001c44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c48:	bf00      	nop
 8001c4a:	e7fd      	b.n	8001c48 <MemManage_Handler+0x4>

08001c4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c50:	bf00      	nop
 8001c52:	e7fd      	b.n	8001c50 <BusFault_Handler+0x4>

08001c54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c58:	bf00      	nop
 8001c5a:	e7fd      	b.n	8001c58 <UsageFault_Handler+0x4>

08001c5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr

08001c6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c7c:	bf00      	nop
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c8a:	f000 f989 	bl	8001fa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
	...

08001c94 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001c98:	4802      	ldr	r0, [pc, #8]	@ (8001ca4 <DMA1_Stream0_IRQHandler+0x10>)
 8001c9a:	f000 fc6f 	bl	800257c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20000274 	.word	0x20000274

08001ca8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001cac:	4802      	ldr	r0, [pc, #8]	@ (8001cb8 <DMA1_Stream6_IRQHandler+0x10>)
 8001cae:	f000 fc65 	bl	800257c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000360 	.word	0x20000360

08001cbc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001cc0:	4802      	ldr	r0, [pc, #8]	@ (8001ccc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001cc2:	f003 ffef 	bl	8005ca4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	200002d4 	.word	0x200002d4

08001cd0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001cd4:	4802      	ldr	r0, [pc, #8]	@ (8001ce0 <I2C1_EV_IRQHandler+0x10>)
 8001cd6:	f001 fbe5 	bl	80034a4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20000220 	.word	0x20000220

08001ce4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ce8:	4802      	ldr	r0, [pc, #8]	@ (8001cf4 <USART2_IRQHandler+0x10>)
 8001cea:	f004 fccd 	bl	8006688 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	2000031c 	.word	0x2000031c

08001cf8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  return 1;
 8001cfc:	2301      	movs	r3, #1
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <_kill>:

int _kill(int pid, int sig)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d12:	f006 faa9 	bl	8008268 <__errno>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2216      	movs	r2, #22
 8001d1a:	601a      	str	r2, [r3, #0]
  return -1;
 8001d1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <_exit>:

void _exit (int status)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d30:	f04f 31ff 	mov.w	r1, #4294967295
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f7ff ffe7 	bl	8001d08 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d3a:	bf00      	nop
 8001d3c:	e7fd      	b.n	8001d3a <_exit+0x12>

08001d3e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b086      	sub	sp, #24
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	60f8      	str	r0, [r7, #12]
 8001d46:	60b9      	str	r1, [r7, #8]
 8001d48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	617b      	str	r3, [r7, #20]
 8001d4e:	e00a      	b.n	8001d66 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d50:	f3af 8000 	nop.w
 8001d54:	4601      	mov	r1, r0
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	1c5a      	adds	r2, r3, #1
 8001d5a:	60ba      	str	r2, [r7, #8]
 8001d5c:	b2ca      	uxtb	r2, r1
 8001d5e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	3301      	adds	r3, #1
 8001d64:	617b      	str	r3, [r7, #20]
 8001d66:	697a      	ldr	r2, [r7, #20]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	dbf0      	blt.n	8001d50 <_read+0x12>
  }

  return len;
 8001d6e:	687b      	ldr	r3, [r7, #4]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3718      	adds	r7, #24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]
 8001d88:	e009      	b.n	8001d9e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	1c5a      	adds	r2, r3, #1
 8001d8e:	60ba      	str	r2, [r7, #8]
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	617b      	str	r3, [r7, #20]
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	dbf1      	blt.n	8001d8a <_write+0x12>
  }
  return len;
 8001da6:	687b      	ldr	r3, [r7, #4]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3718      	adds	r7, #24
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <_close>:

int _close(int file)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001db8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001dd8:	605a      	str	r2, [r3, #4]
  return 0;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <_isatty>:

int _isatty(int file)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001df0:	2301      	movs	r3, #1
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b085      	sub	sp, #20
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	60f8      	str	r0, [r7, #12]
 8001e06:	60b9      	str	r1, [r7, #8]
 8001e08:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e20:	4a14      	ldr	r2, [pc, #80]	@ (8001e74 <_sbrk+0x5c>)
 8001e22:	4b15      	ldr	r3, [pc, #84]	@ (8001e78 <_sbrk+0x60>)
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e2c:	4b13      	ldr	r3, [pc, #76]	@ (8001e7c <_sbrk+0x64>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d102      	bne.n	8001e3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e34:	4b11      	ldr	r3, [pc, #68]	@ (8001e7c <_sbrk+0x64>)
 8001e36:	4a12      	ldr	r2, [pc, #72]	@ (8001e80 <_sbrk+0x68>)
 8001e38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e3a:	4b10      	ldr	r3, [pc, #64]	@ (8001e7c <_sbrk+0x64>)
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4413      	add	r3, r2
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d207      	bcs.n	8001e58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e48:	f006 fa0e 	bl	8008268 <__errno>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	220c      	movs	r2, #12
 8001e50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e52:	f04f 33ff 	mov.w	r3, #4294967295
 8001e56:	e009      	b.n	8001e6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e58:	4b08      	ldr	r3, [pc, #32]	@ (8001e7c <_sbrk+0x64>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e5e:	4b07      	ldr	r3, [pc, #28]	@ (8001e7c <_sbrk+0x64>)
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4413      	add	r3, r2
 8001e66:	4a05      	ldr	r2, [pc, #20]	@ (8001e7c <_sbrk+0x64>)
 8001e68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3718      	adds	r7, #24
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	20018000 	.word	0x20018000
 8001e78:	00000400 	.word	0x00000400
 8001e7c:	200003dc 	.word	0x200003dc
 8001e80:	20000530 	.word	0x20000530

08001e84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e88:	4b06      	ldr	r3, [pc, #24]	@ (8001ea4 <SystemInit+0x20>)
 8001e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e8e:	4a05      	ldr	r2, [pc, #20]	@ (8001ea4 <SystemInit+0x20>)
 8001e90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e98:	bf00      	nop
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	e000ed00 	.word	0xe000ed00

08001ea8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ea8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ee0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001eac:	480d      	ldr	r0, [pc, #52]	@ (8001ee4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001eae:	490e      	ldr	r1, [pc, #56]	@ (8001ee8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001eb0:	4a0e      	ldr	r2, [pc, #56]	@ (8001eec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001eb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eb4:	e002      	b.n	8001ebc <LoopCopyDataInit>

08001eb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eba:	3304      	adds	r3, #4

08001ebc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ebc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ebe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ec0:	d3f9      	bcc.n	8001eb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ec2:	4a0b      	ldr	r2, [pc, #44]	@ (8001ef0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ec4:	4c0b      	ldr	r4, [pc, #44]	@ (8001ef4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ec6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ec8:	e001      	b.n	8001ece <LoopFillZerobss>

08001eca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ecc:	3204      	adds	r2, #4

08001ece <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ece:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ed0:	d3fb      	bcc.n	8001eca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ed2:	f7ff ffd7 	bl	8001e84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ed6:	f006 f9cd 	bl	8008274 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eda:	f7ff fac9 	bl	8001470 <main>
  bx  lr    
 8001ede:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ee0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ee4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ee8:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8001eec:	0800a770 	.word	0x0800a770
  ldr r2, =_sbss
 8001ef0:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8001ef4:	20000530 	.word	0x20000530

08001ef8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ef8:	e7fe      	b.n	8001ef8 <ADC_IRQHandler>
	...

08001efc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f00:	4b0e      	ldr	r3, [pc, #56]	@ (8001f3c <HAL_Init+0x40>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a0d      	ldr	r2, [pc, #52]	@ (8001f3c <HAL_Init+0x40>)
 8001f06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f3c <HAL_Init+0x40>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a0a      	ldr	r2, [pc, #40]	@ (8001f3c <HAL_Init+0x40>)
 8001f12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f18:	4b08      	ldr	r3, [pc, #32]	@ (8001f3c <HAL_Init+0x40>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a07      	ldr	r2, [pc, #28]	@ (8001f3c <HAL_Init+0x40>)
 8001f1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f24:	2003      	movs	r0, #3
 8001f26:	f000 f94f 	bl	80021c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f2a:	2000      	movs	r0, #0
 8001f2c:	f000 f808 	bl	8001f40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f30:	f7ff fd2c 	bl	800198c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40023c00 	.word	0x40023c00

08001f40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f48:	4b12      	ldr	r3, [pc, #72]	@ (8001f94 <HAL_InitTick+0x54>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	4b12      	ldr	r3, [pc, #72]	@ (8001f98 <HAL_InitTick+0x58>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	4619      	mov	r1, r3
 8001f52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f000 f967 	bl	8002232 <HAL_SYSTICK_Config>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e00e      	b.n	8001f8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b0f      	cmp	r3, #15
 8001f72:	d80a      	bhi.n	8001f8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f74:	2200      	movs	r2, #0
 8001f76:	6879      	ldr	r1, [r7, #4]
 8001f78:	f04f 30ff 	mov.w	r0, #4294967295
 8001f7c:	f000 f92f 	bl	80021de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f80:	4a06      	ldr	r2, [pc, #24]	@ (8001f9c <HAL_InitTick+0x5c>)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
 8001f88:	e000      	b.n	8001f8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	2000002c 	.word	0x2000002c
 8001f98:	20000034 	.word	0x20000034
 8001f9c:	20000030 	.word	0x20000030

08001fa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fa4:	4b06      	ldr	r3, [pc, #24]	@ (8001fc0 <HAL_IncTick+0x20>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	4b06      	ldr	r3, [pc, #24]	@ (8001fc4 <HAL_IncTick+0x24>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4413      	add	r3, r2
 8001fb0:	4a04      	ldr	r2, [pc, #16]	@ (8001fc4 <HAL_IncTick+0x24>)
 8001fb2:	6013      	str	r3, [r2, #0]
}
 8001fb4:	bf00      	nop
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	20000034 	.word	0x20000034
 8001fc4:	200003e0 	.word	0x200003e0

08001fc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  return uwTick;
 8001fcc:	4b03      	ldr	r3, [pc, #12]	@ (8001fdc <HAL_GetTick+0x14>)
 8001fce:	681b      	ldr	r3, [r3, #0]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	200003e0 	.word	0x200003e0

08001fe0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fe8:	f7ff ffee 	bl	8001fc8 <HAL_GetTick>
 8001fec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff8:	d005      	beq.n	8002006 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8002024 <HAL_Delay+0x44>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	461a      	mov	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4413      	add	r3, r2
 8002004:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002006:	bf00      	nop
 8002008:	f7ff ffde 	bl	8001fc8 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	429a      	cmp	r2, r3
 8002016:	d8f7      	bhi.n	8002008 <HAL_Delay+0x28>
  {
  }
}
 8002018:	bf00      	nop
 800201a:	bf00      	nop
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	20000034 	.word	0x20000034

08002028 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002038:	4b0c      	ldr	r3, [pc, #48]	@ (800206c <__NVIC_SetPriorityGrouping+0x44>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800203e:	68ba      	ldr	r2, [r7, #8]
 8002040:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002044:	4013      	ands	r3, r2
 8002046:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002050:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002054:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002058:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800205a:	4a04      	ldr	r2, [pc, #16]	@ (800206c <__NVIC_SetPriorityGrouping+0x44>)
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	60d3      	str	r3, [r2, #12]
}
 8002060:	bf00      	nop
 8002062:	3714      	adds	r7, #20
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002074:	4b04      	ldr	r3, [pc, #16]	@ (8002088 <__NVIC_GetPriorityGrouping+0x18>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	0a1b      	lsrs	r3, r3, #8
 800207a:	f003 0307 	and.w	r3, r3, #7
}
 800207e:	4618      	mov	r0, r3
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	e000ed00 	.word	0xe000ed00

0800208c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209a:	2b00      	cmp	r3, #0
 800209c:	db0b      	blt.n	80020b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800209e:	79fb      	ldrb	r3, [r7, #7]
 80020a0:	f003 021f 	and.w	r2, r3, #31
 80020a4:	4907      	ldr	r1, [pc, #28]	@ (80020c4 <__NVIC_EnableIRQ+0x38>)
 80020a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020aa:	095b      	lsrs	r3, r3, #5
 80020ac:	2001      	movs	r0, #1
 80020ae:	fa00 f202 	lsl.w	r2, r0, r2
 80020b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	e000e100 	.word	0xe000e100

080020c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	6039      	str	r1, [r7, #0]
 80020d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	db0a      	blt.n	80020f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	490c      	ldr	r1, [pc, #48]	@ (8002114 <__NVIC_SetPriority+0x4c>)
 80020e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e6:	0112      	lsls	r2, r2, #4
 80020e8:	b2d2      	uxtb	r2, r2
 80020ea:	440b      	add	r3, r1
 80020ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020f0:	e00a      	b.n	8002108 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	4908      	ldr	r1, [pc, #32]	@ (8002118 <__NVIC_SetPriority+0x50>)
 80020f8:	79fb      	ldrb	r3, [r7, #7]
 80020fa:	f003 030f 	and.w	r3, r3, #15
 80020fe:	3b04      	subs	r3, #4
 8002100:	0112      	lsls	r2, r2, #4
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	440b      	add	r3, r1
 8002106:	761a      	strb	r2, [r3, #24]
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	e000e100 	.word	0xe000e100
 8002118:	e000ed00 	.word	0xe000ed00

0800211c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800211c:	b480      	push	{r7}
 800211e:	b089      	sub	sp, #36	@ 0x24
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	f1c3 0307 	rsb	r3, r3, #7
 8002136:	2b04      	cmp	r3, #4
 8002138:	bf28      	it	cs
 800213a:	2304      	movcs	r3, #4
 800213c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	3304      	adds	r3, #4
 8002142:	2b06      	cmp	r3, #6
 8002144:	d902      	bls.n	800214c <NVIC_EncodePriority+0x30>
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	3b03      	subs	r3, #3
 800214a:	e000      	b.n	800214e <NVIC_EncodePriority+0x32>
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002150:	f04f 32ff 	mov.w	r2, #4294967295
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	43da      	mvns	r2, r3
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	401a      	ands	r2, r3
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002164:	f04f 31ff 	mov.w	r1, #4294967295
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	fa01 f303 	lsl.w	r3, r1, r3
 800216e:	43d9      	mvns	r1, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002174:	4313      	orrs	r3, r2
         );
}
 8002176:	4618      	mov	r0, r3
 8002178:	3724      	adds	r7, #36	@ 0x24
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
	...

08002184 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3b01      	subs	r3, #1
 8002190:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002194:	d301      	bcc.n	800219a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002196:	2301      	movs	r3, #1
 8002198:	e00f      	b.n	80021ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800219a:	4a0a      	ldr	r2, [pc, #40]	@ (80021c4 <SysTick_Config+0x40>)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3b01      	subs	r3, #1
 80021a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021a2:	210f      	movs	r1, #15
 80021a4:	f04f 30ff 	mov.w	r0, #4294967295
 80021a8:	f7ff ff8e 	bl	80020c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021ac:	4b05      	ldr	r3, [pc, #20]	@ (80021c4 <SysTick_Config+0x40>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021b2:	4b04      	ldr	r3, [pc, #16]	@ (80021c4 <SysTick_Config+0x40>)
 80021b4:	2207      	movs	r2, #7
 80021b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	e000e010 	.word	0xe000e010

080021c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f7ff ff29 	bl	8002028 <__NVIC_SetPriorityGrouping>
}
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021de:	b580      	push	{r7, lr}
 80021e0:	b086      	sub	sp, #24
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	4603      	mov	r3, r0
 80021e6:	60b9      	str	r1, [r7, #8]
 80021e8:	607a      	str	r2, [r7, #4]
 80021ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021ec:	2300      	movs	r3, #0
 80021ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021f0:	f7ff ff3e 	bl	8002070 <__NVIC_GetPriorityGrouping>
 80021f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	68b9      	ldr	r1, [r7, #8]
 80021fa:	6978      	ldr	r0, [r7, #20]
 80021fc:	f7ff ff8e 	bl	800211c <NVIC_EncodePriority>
 8002200:	4602      	mov	r2, r0
 8002202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002206:	4611      	mov	r1, r2
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff ff5d 	bl	80020c8 <__NVIC_SetPriority>
}
 800220e:	bf00      	nop
 8002210:	3718      	adds	r7, #24
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b082      	sub	sp, #8
 800221a:	af00      	add	r7, sp, #0
 800221c:	4603      	mov	r3, r0
 800221e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff ff31 	bl	800208c <__NVIC_EnableIRQ>
}
 800222a:	bf00      	nop
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b082      	sub	sp, #8
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f7ff ffa2 	bl	8002184 <SysTick_Config>
 8002240:	4603      	mov	r3, r0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
	...

0800224c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002254:	2300      	movs	r3, #0
 8002256:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002258:	f7ff feb6 	bl	8001fc8 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d101      	bne.n	8002268 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e099      	b.n	800239c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2202      	movs	r2, #2
 800226c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f022 0201 	bic.w	r2, r2, #1
 8002286:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002288:	e00f      	b.n	80022aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800228a:	f7ff fe9d 	bl	8001fc8 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b05      	cmp	r3, #5
 8002296:	d908      	bls.n	80022aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2220      	movs	r2, #32
 800229c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2203      	movs	r2, #3
 80022a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e078      	b.n	800239c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1e8      	bne.n	800228a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80022c0:	697a      	ldr	r2, [r7, #20]
 80022c2:	4b38      	ldr	r3, [pc, #224]	@ (80023a4 <HAL_DMA_Init+0x158>)
 80022c4:	4013      	ands	r3, r2
 80022c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685a      	ldr	r2, [r3, #4]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022f6:	697a      	ldr	r2, [r7, #20]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002300:	2b04      	cmp	r3, #4
 8002302:	d107      	bne.n	8002314 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230c:	4313      	orrs	r3, r2
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	4313      	orrs	r3, r2
 8002312:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	697a      	ldr	r2, [r7, #20]
 800231a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	f023 0307 	bic.w	r3, r3, #7
 800232a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002330:	697a      	ldr	r2, [r7, #20]
 8002332:	4313      	orrs	r3, r2
 8002334:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800233a:	2b04      	cmp	r3, #4
 800233c:	d117      	bne.n	800236e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002342:	697a      	ldr	r2, [r7, #20]
 8002344:	4313      	orrs	r3, r2
 8002346:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800234c:	2b00      	cmp	r3, #0
 800234e:	d00e      	beq.n	800236e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f000 fb1b 	bl	800298c <DMA_CheckFifoParam>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d008      	beq.n	800236e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2240      	movs	r2, #64	@ 0x40
 8002360:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800236a:	2301      	movs	r3, #1
 800236c:	e016      	b.n	800239c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 fad2 	bl	8002920 <DMA_CalcBaseAndBitshift>
 800237c:	4603      	mov	r3, r0
 800237e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002384:	223f      	movs	r2, #63	@ 0x3f
 8002386:	409a      	lsls	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2201      	movs	r2, #1
 8002396:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3718      	adds	r7, #24
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	f010803f 	.word	0xf010803f

080023a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
 80023b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023b6:	2300      	movs	r3, #0
 80023b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d101      	bne.n	80023ce <HAL_DMA_Start_IT+0x26>
 80023ca:	2302      	movs	r3, #2
 80023cc:	e040      	b.n	8002450 <HAL_DMA_Start_IT+0xa8>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d12f      	bne.n	8002442 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2202      	movs	r2, #2
 80023e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	68b9      	ldr	r1, [r7, #8]
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f000 fa64 	bl	80028c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002400:	223f      	movs	r2, #63	@ 0x3f
 8002402:	409a      	lsls	r2, r3
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f042 0216 	orr.w	r2, r2, #22
 8002416:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241c:	2b00      	cmp	r3, #0
 800241e:	d007      	beq.n	8002430 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f042 0208 	orr.w	r2, r2, #8
 800242e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f042 0201 	orr.w	r2, r2, #1
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	e005      	b.n	800244e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800244a:	2302      	movs	r3, #2
 800244c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800244e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002450:	4618      	mov	r0, r3
 8002452:	3718      	adds	r7, #24
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002464:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002466:	f7ff fdaf 	bl	8001fc8 <HAL_GetTick>
 800246a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d008      	beq.n	800248a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2280      	movs	r2, #128	@ 0x80
 800247c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e052      	b.n	8002530 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 0216 	bic.w	r2, r2, #22
 8002498:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	695a      	ldr	r2, [r3, #20]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80024a8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d103      	bne.n	80024ba <HAL_DMA_Abort+0x62>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d007      	beq.n	80024ca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f022 0208 	bic.w	r2, r2, #8
 80024c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f022 0201 	bic.w	r2, r2, #1
 80024d8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024da:	e013      	b.n	8002504 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024dc:	f7ff fd74 	bl	8001fc8 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b05      	cmp	r3, #5
 80024e8:	d90c      	bls.n	8002504 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2220      	movs	r2, #32
 80024ee:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2203      	movs	r2, #3
 80024f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e015      	b.n	8002530 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1e4      	bne.n	80024dc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002516:	223f      	movs	r2, #63	@ 0x3f
 8002518:	409a      	lsls	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2201      	movs	r2, #1
 8002522:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	3710      	adds	r7, #16
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d004      	beq.n	8002556 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2280      	movs	r2, #128	@ 0x80
 8002550:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e00c      	b.n	8002570 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2205      	movs	r2, #5
 800255a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 0201 	bic.w	r2, r2, #1
 800256c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002584:	2300      	movs	r3, #0
 8002586:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002588:	4b8e      	ldr	r3, [pc, #568]	@ (80027c4 <HAL_DMA_IRQHandler+0x248>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a8e      	ldr	r2, [pc, #568]	@ (80027c8 <HAL_DMA_IRQHandler+0x24c>)
 800258e:	fba2 2303 	umull	r2, r3, r2, r3
 8002592:	0a9b      	lsrs	r3, r3, #10
 8002594:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800259a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025a6:	2208      	movs	r2, #8
 80025a8:	409a      	lsls	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	4013      	ands	r3, r2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d01a      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0304 	and.w	r3, r3, #4
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d013      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f022 0204 	bic.w	r2, r2, #4
 80025ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025d4:	2208      	movs	r2, #8
 80025d6:	409a      	lsls	r2, r3
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025e0:	f043 0201 	orr.w	r2, r3, #1
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ec:	2201      	movs	r2, #1
 80025ee:	409a      	lsls	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	4013      	ands	r3, r2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d012      	beq.n	800261e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00b      	beq.n	800261e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800260a:	2201      	movs	r2, #1
 800260c:	409a      	lsls	r2, r3
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002616:	f043 0202 	orr.w	r2, r3, #2
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002622:	2204      	movs	r2, #4
 8002624:	409a      	lsls	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	4013      	ands	r3, r2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d012      	beq.n	8002654 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00b      	beq.n	8002654 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002640:	2204      	movs	r2, #4
 8002642:	409a      	lsls	r2, r3
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800264c:	f043 0204 	orr.w	r2, r3, #4
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002658:	2210      	movs	r2, #16
 800265a:	409a      	lsls	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	4013      	ands	r3, r2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d043      	beq.n	80026ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0308 	and.w	r3, r3, #8
 800266e:	2b00      	cmp	r3, #0
 8002670:	d03c      	beq.n	80026ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002676:	2210      	movs	r2, #16
 8002678:	409a      	lsls	r2, r3
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d018      	beq.n	80026be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d108      	bne.n	80026ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d024      	beq.n	80026ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	4798      	blx	r3
 80026aa:	e01f      	b.n	80026ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d01b      	beq.n	80026ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	4798      	blx	r3
 80026bc:	e016      	b.n	80026ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d107      	bne.n	80026dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f022 0208 	bic.w	r2, r2, #8
 80026da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d003      	beq.n	80026ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026f0:	2220      	movs	r2, #32
 80026f2:	409a      	lsls	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	4013      	ands	r3, r2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f000 808f 	beq.w	800281c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0310 	and.w	r3, r3, #16
 8002708:	2b00      	cmp	r3, #0
 800270a:	f000 8087 	beq.w	800281c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002712:	2220      	movs	r2, #32
 8002714:	409a      	lsls	r2, r3
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b05      	cmp	r3, #5
 8002724:	d136      	bne.n	8002794 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 0216 	bic.w	r2, r2, #22
 8002734:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	695a      	ldr	r2, [r3, #20]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002744:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274a:	2b00      	cmp	r3, #0
 800274c:	d103      	bne.n	8002756 <HAL_DMA_IRQHandler+0x1da>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002752:	2b00      	cmp	r3, #0
 8002754:	d007      	beq.n	8002766 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f022 0208 	bic.w	r2, r2, #8
 8002764:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800276a:	223f      	movs	r2, #63	@ 0x3f
 800276c:	409a      	lsls	r2, r3
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2201      	movs	r2, #1
 8002776:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002786:	2b00      	cmp	r3, #0
 8002788:	d07e      	beq.n	8002888 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	4798      	blx	r3
        }
        return;
 8002792:	e079      	b.n	8002888 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d01d      	beq.n	80027de <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d10d      	bne.n	80027cc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d031      	beq.n	800281c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	4798      	blx	r3
 80027c0:	e02c      	b.n	800281c <HAL_DMA_IRQHandler+0x2a0>
 80027c2:	bf00      	nop
 80027c4:	2000002c 	.word	0x2000002c
 80027c8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d023      	beq.n	800281c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	4798      	blx	r3
 80027dc:	e01e      	b.n	800281c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d10f      	bne.n	800280c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f022 0210 	bic.w	r2, r2, #16
 80027fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002810:	2b00      	cmp	r3, #0
 8002812:	d003      	beq.n	800281c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002820:	2b00      	cmp	r3, #0
 8002822:	d032      	beq.n	800288a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	2b00      	cmp	r3, #0
 800282e:	d022      	beq.n	8002876 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2205      	movs	r2, #5
 8002834:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f022 0201 	bic.w	r2, r2, #1
 8002846:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	3301      	adds	r3, #1
 800284c:	60bb      	str	r3, [r7, #8]
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	429a      	cmp	r2, r3
 8002852:	d307      	bcc.n	8002864 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1f2      	bne.n	8002848 <HAL_DMA_IRQHandler+0x2cc>
 8002862:	e000      	b.n	8002866 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002864:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800287a:	2b00      	cmp	r3, #0
 800287c:	d005      	beq.n	800288a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	4798      	blx	r3
 8002886:	e000      	b.n	800288a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002888:	bf00      	nop
    }
  }
}
 800288a:	3718      	adds	r7, #24
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800289e:	b2db      	uxtb	r3, r3
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
 80028d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80028e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	683a      	ldr	r2, [r7, #0]
 80028e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	2b40      	cmp	r3, #64	@ 0x40
 80028f0:	d108      	bne.n	8002904 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68ba      	ldr	r2, [r7, #8]
 8002900:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002902:	e007      	b.n	8002914 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68ba      	ldr	r2, [r7, #8]
 800290a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	60da      	str	r2, [r3, #12]
}
 8002914:	bf00      	nop
 8002916:	3714      	adds	r7, #20
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	b2db      	uxtb	r3, r3
 800292e:	3b10      	subs	r3, #16
 8002930:	4a14      	ldr	r2, [pc, #80]	@ (8002984 <DMA_CalcBaseAndBitshift+0x64>)
 8002932:	fba2 2303 	umull	r2, r3, r2, r3
 8002936:	091b      	lsrs	r3, r3, #4
 8002938:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800293a:	4a13      	ldr	r2, [pc, #76]	@ (8002988 <DMA_CalcBaseAndBitshift+0x68>)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	4413      	add	r3, r2
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	461a      	mov	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2b03      	cmp	r3, #3
 800294c:	d909      	bls.n	8002962 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002956:	f023 0303 	bic.w	r3, r3, #3
 800295a:	1d1a      	adds	r2, r3, #4
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002960:	e007      	b.n	8002972 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800296a:	f023 0303 	bic.w	r3, r3, #3
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002976:	4618      	mov	r0, r3
 8002978:	3714      	adds	r7, #20
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	aaaaaaab 	.word	0xaaaaaaab
 8002988:	0800a3e8 	.word	0x0800a3e8

0800298c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002994:	2300      	movs	r3, #0
 8002996:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800299c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d11f      	bne.n	80029e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	2b03      	cmp	r3, #3
 80029aa:	d856      	bhi.n	8002a5a <DMA_CheckFifoParam+0xce>
 80029ac:	a201      	add	r2, pc, #4	@ (adr r2, 80029b4 <DMA_CheckFifoParam+0x28>)
 80029ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029b2:	bf00      	nop
 80029b4:	080029c5 	.word	0x080029c5
 80029b8:	080029d7 	.word	0x080029d7
 80029bc:	080029c5 	.word	0x080029c5
 80029c0:	08002a5b 	.word	0x08002a5b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d046      	beq.n	8002a5e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029d4:	e043      	b.n	8002a5e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029da:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80029de:	d140      	bne.n	8002a62 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029e4:	e03d      	b.n	8002a62 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029ee:	d121      	bne.n	8002a34 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	2b03      	cmp	r3, #3
 80029f4:	d837      	bhi.n	8002a66 <DMA_CheckFifoParam+0xda>
 80029f6:	a201      	add	r2, pc, #4	@ (adr r2, 80029fc <DMA_CheckFifoParam+0x70>)
 80029f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029fc:	08002a0d 	.word	0x08002a0d
 8002a00:	08002a13 	.word	0x08002a13
 8002a04:	08002a0d 	.word	0x08002a0d
 8002a08:	08002a25 	.word	0x08002a25
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a10:	e030      	b.n	8002a74 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a16:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d025      	beq.n	8002a6a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a22:	e022      	b.n	8002a6a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a28:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a2c:	d11f      	bne.n	8002a6e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a32:	e01c      	b.n	8002a6e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d903      	bls.n	8002a42 <DMA_CheckFifoParam+0xb6>
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	2b03      	cmp	r3, #3
 8002a3e:	d003      	beq.n	8002a48 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a40:	e018      	b.n	8002a74 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	73fb      	strb	r3, [r7, #15]
      break;
 8002a46:	e015      	b.n	8002a74 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a4c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00e      	beq.n	8002a72 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	73fb      	strb	r3, [r7, #15]
      break;
 8002a58:	e00b      	b.n	8002a72 <DMA_CheckFifoParam+0xe6>
      break;
 8002a5a:	bf00      	nop
 8002a5c:	e00a      	b.n	8002a74 <DMA_CheckFifoParam+0xe8>
      break;
 8002a5e:	bf00      	nop
 8002a60:	e008      	b.n	8002a74 <DMA_CheckFifoParam+0xe8>
      break;
 8002a62:	bf00      	nop
 8002a64:	e006      	b.n	8002a74 <DMA_CheckFifoParam+0xe8>
      break;
 8002a66:	bf00      	nop
 8002a68:	e004      	b.n	8002a74 <DMA_CheckFifoParam+0xe8>
      break;
 8002a6a:	bf00      	nop
 8002a6c:	e002      	b.n	8002a74 <DMA_CheckFifoParam+0xe8>
      break;   
 8002a6e:	bf00      	nop
 8002a70:	e000      	b.n	8002a74 <DMA_CheckFifoParam+0xe8>
      break;
 8002a72:	bf00      	nop
    }
  } 
  
  return status; 
 8002a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop

08002a84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b089      	sub	sp, #36	@ 0x24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61fb      	str	r3, [r7, #28]
 8002a9e:	e159      	b.n	8002d54 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	f040 8148 	bne.w	8002d4e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f003 0303 	and.w	r3, r3, #3
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d005      	beq.n	8002ad6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d130      	bne.n	8002b38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	2203      	movs	r2, #3
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	43db      	mvns	r3, r3
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	4013      	ands	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	68da      	ldr	r2, [r3, #12]
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	43db      	mvns	r3, r3
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	091b      	lsrs	r3, r3, #4
 8002b22:	f003 0201 	and.w	r2, r3, #1
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f003 0303 	and.w	r3, r3, #3
 8002b40:	2b03      	cmp	r3, #3
 8002b42:	d017      	beq.n	8002b74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	2203      	movs	r2, #3
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	43db      	mvns	r3, r3
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f003 0303 	and.w	r3, r3, #3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d123      	bne.n	8002bc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	08da      	lsrs	r2, r3, #3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	3208      	adds	r2, #8
 8002b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	f003 0307 	and.w	r3, r3, #7
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	220f      	movs	r2, #15
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	691a      	ldr	r2, [r3, #16]
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	f003 0307 	and.w	r3, r3, #7
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	08da      	lsrs	r2, r3, #3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	3208      	adds	r2, #8
 8002bc2:	69b9      	ldr	r1, [r7, #24]
 8002bc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	2203      	movs	r2, #3
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f003 0203 	and.w	r2, r3, #3
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 80a2 	beq.w	8002d4e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60fb      	str	r3, [r7, #12]
 8002c0e:	4b57      	ldr	r3, [pc, #348]	@ (8002d6c <HAL_GPIO_Init+0x2e8>)
 8002c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c12:	4a56      	ldr	r2, [pc, #344]	@ (8002d6c <HAL_GPIO_Init+0x2e8>)
 8002c14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c18:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c1a:	4b54      	ldr	r3, [pc, #336]	@ (8002d6c <HAL_GPIO_Init+0x2e8>)
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c22:	60fb      	str	r3, [r7, #12]
 8002c24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c26:	4a52      	ldr	r2, [pc, #328]	@ (8002d70 <HAL_GPIO_Init+0x2ec>)
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	089b      	lsrs	r3, r3, #2
 8002c2c:	3302      	adds	r3, #2
 8002c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	f003 0303 	and.w	r3, r3, #3
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	220f      	movs	r2, #15
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	43db      	mvns	r3, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4013      	ands	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a49      	ldr	r2, [pc, #292]	@ (8002d74 <HAL_GPIO_Init+0x2f0>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d019      	beq.n	8002c86 <HAL_GPIO_Init+0x202>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a48      	ldr	r2, [pc, #288]	@ (8002d78 <HAL_GPIO_Init+0x2f4>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d013      	beq.n	8002c82 <HAL_GPIO_Init+0x1fe>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a47      	ldr	r2, [pc, #284]	@ (8002d7c <HAL_GPIO_Init+0x2f8>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d00d      	beq.n	8002c7e <HAL_GPIO_Init+0x1fa>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a46      	ldr	r2, [pc, #280]	@ (8002d80 <HAL_GPIO_Init+0x2fc>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d007      	beq.n	8002c7a <HAL_GPIO_Init+0x1f6>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a45      	ldr	r2, [pc, #276]	@ (8002d84 <HAL_GPIO_Init+0x300>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d101      	bne.n	8002c76 <HAL_GPIO_Init+0x1f2>
 8002c72:	2304      	movs	r3, #4
 8002c74:	e008      	b.n	8002c88 <HAL_GPIO_Init+0x204>
 8002c76:	2307      	movs	r3, #7
 8002c78:	e006      	b.n	8002c88 <HAL_GPIO_Init+0x204>
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e004      	b.n	8002c88 <HAL_GPIO_Init+0x204>
 8002c7e:	2302      	movs	r3, #2
 8002c80:	e002      	b.n	8002c88 <HAL_GPIO_Init+0x204>
 8002c82:	2301      	movs	r3, #1
 8002c84:	e000      	b.n	8002c88 <HAL_GPIO_Init+0x204>
 8002c86:	2300      	movs	r3, #0
 8002c88:	69fa      	ldr	r2, [r7, #28]
 8002c8a:	f002 0203 	and.w	r2, r2, #3
 8002c8e:	0092      	lsls	r2, r2, #2
 8002c90:	4093      	lsls	r3, r2
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c98:	4935      	ldr	r1, [pc, #212]	@ (8002d70 <HAL_GPIO_Init+0x2ec>)
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	089b      	lsrs	r3, r3, #2
 8002c9e:	3302      	adds	r3, #2
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ca6:	4b38      	ldr	r3, [pc, #224]	@ (8002d88 <HAL_GPIO_Init+0x304>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	43db      	mvns	r3, r3
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d003      	beq.n	8002cca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cca:	4a2f      	ldr	r2, [pc, #188]	@ (8002d88 <HAL_GPIO_Init+0x304>)
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cd0:	4b2d      	ldr	r3, [pc, #180]	@ (8002d88 <HAL_GPIO_Init+0x304>)
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d003      	beq.n	8002cf4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cf4:	4a24      	ldr	r2, [pc, #144]	@ (8002d88 <HAL_GPIO_Init+0x304>)
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cfa:	4b23      	ldr	r3, [pc, #140]	@ (8002d88 <HAL_GPIO_Init+0x304>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	43db      	mvns	r3, r3
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	4013      	ands	r3, r2
 8002d08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d1e:	4a1a      	ldr	r2, [pc, #104]	@ (8002d88 <HAL_GPIO_Init+0x304>)
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d24:	4b18      	ldr	r3, [pc, #96]	@ (8002d88 <HAL_GPIO_Init+0x304>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	4013      	ands	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d003      	beq.n	8002d48 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d48:	4a0f      	ldr	r2, [pc, #60]	@ (8002d88 <HAL_GPIO_Init+0x304>)
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	3301      	adds	r3, #1
 8002d52:	61fb      	str	r3, [r7, #28]
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	2b0f      	cmp	r3, #15
 8002d58:	f67f aea2 	bls.w	8002aa0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d5c:	bf00      	nop
 8002d5e:	bf00      	nop
 8002d60:	3724      	adds	r7, #36	@ 0x24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	40023800 	.word	0x40023800
 8002d70:	40013800 	.word	0x40013800
 8002d74:	40020000 	.word	0x40020000
 8002d78:	40020400 	.word	0x40020400
 8002d7c:	40020800 	.word	0x40020800
 8002d80:	40020c00 	.word	0x40020c00
 8002d84:	40021000 	.word	0x40021000
 8002d88:	40013c00 	.word	0x40013c00

08002d8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	460b      	mov	r3, r1
 8002d96:	807b      	strh	r3, [r7, #2]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d9c:	787b      	ldrb	r3, [r7, #1]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002da2:	887a      	ldrh	r2, [r7, #2]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002da8:	e003      	b.n	8002db2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002daa:	887b      	ldrh	r3, [r7, #2]
 8002dac:	041a      	lsls	r2, r3, #16
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	619a      	str	r2, [r3, #24]
}
 8002db2:	bf00      	nop
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
	...

08002dc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e12b      	b.n	800302a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d106      	bne.n	8002dec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7fe fdf8 	bl	80019dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2224      	movs	r2, #36	@ 0x24
 8002df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 0201 	bic.w	r2, r2, #1
 8002e02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e24:	f002 fe64 	bl	8005af0 <HAL_RCC_GetPCLK1Freq>
 8002e28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	4a81      	ldr	r2, [pc, #516]	@ (8003034 <HAL_I2C_Init+0x274>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d807      	bhi.n	8002e44 <HAL_I2C_Init+0x84>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	4a80      	ldr	r2, [pc, #512]	@ (8003038 <HAL_I2C_Init+0x278>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	bf94      	ite	ls
 8002e3c:	2301      	movls	r3, #1
 8002e3e:	2300      	movhi	r3, #0
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	e006      	b.n	8002e52 <HAL_I2C_Init+0x92>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	4a7d      	ldr	r2, [pc, #500]	@ (800303c <HAL_I2C_Init+0x27c>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	bf94      	ite	ls
 8002e4c:	2301      	movls	r3, #1
 8002e4e:	2300      	movhi	r3, #0
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e0e7      	b.n	800302a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	4a78      	ldr	r2, [pc, #480]	@ (8003040 <HAL_I2C_Init+0x280>)
 8002e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e62:	0c9b      	lsrs	r3, r3, #18
 8002e64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68ba      	ldr	r2, [r7, #8]
 8002e76:	430a      	orrs	r2, r1
 8002e78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	4a6a      	ldr	r2, [pc, #424]	@ (8003034 <HAL_I2C_Init+0x274>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d802      	bhi.n	8002e94 <HAL_I2C_Init+0xd4>
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	3301      	adds	r3, #1
 8002e92:	e009      	b.n	8002ea8 <HAL_I2C_Init+0xe8>
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002e9a:	fb02 f303 	mul.w	r3, r2, r3
 8002e9e:	4a69      	ldr	r2, [pc, #420]	@ (8003044 <HAL_I2C_Init+0x284>)
 8002ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea4:	099b      	lsrs	r3, r3, #6
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	6812      	ldr	r2, [r2, #0]
 8002eac:	430b      	orrs	r3, r1
 8002eae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	69db      	ldr	r3, [r3, #28]
 8002eb6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002eba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	495c      	ldr	r1, [pc, #368]	@ (8003034 <HAL_I2C_Init+0x274>)
 8002ec4:	428b      	cmp	r3, r1
 8002ec6:	d819      	bhi.n	8002efc <HAL_I2C_Init+0x13c>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	1e59      	subs	r1, r3, #1
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ed6:	1c59      	adds	r1, r3, #1
 8002ed8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002edc:	400b      	ands	r3, r1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00a      	beq.n	8002ef8 <HAL_I2C_Init+0x138>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	1e59      	subs	r1, r3, #1
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ef6:	e051      	b.n	8002f9c <HAL_I2C_Init+0x1dc>
 8002ef8:	2304      	movs	r3, #4
 8002efa:	e04f      	b.n	8002f9c <HAL_I2C_Init+0x1dc>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d111      	bne.n	8002f28 <HAL_I2C_Init+0x168>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	1e58      	subs	r0, r3, #1
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6859      	ldr	r1, [r3, #4]
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	440b      	add	r3, r1
 8002f12:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f16:	3301      	adds	r3, #1
 8002f18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	bf0c      	ite	eq
 8002f20:	2301      	moveq	r3, #1
 8002f22:	2300      	movne	r3, #0
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	e012      	b.n	8002f4e <HAL_I2C_Init+0x18e>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	1e58      	subs	r0, r3, #1
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6859      	ldr	r1, [r3, #4]
 8002f30:	460b      	mov	r3, r1
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	440b      	add	r3, r1
 8002f36:	0099      	lsls	r1, r3, #2
 8002f38:	440b      	add	r3, r1
 8002f3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f3e:	3301      	adds	r3, #1
 8002f40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	bf0c      	ite	eq
 8002f48:	2301      	moveq	r3, #1
 8002f4a:	2300      	movne	r3, #0
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <HAL_I2C_Init+0x196>
 8002f52:	2301      	movs	r3, #1
 8002f54:	e022      	b.n	8002f9c <HAL_I2C_Init+0x1dc>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10e      	bne.n	8002f7c <HAL_I2C_Init+0x1bc>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	1e58      	subs	r0, r3, #1
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6859      	ldr	r1, [r3, #4]
 8002f66:	460b      	mov	r3, r1
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	440b      	add	r3, r1
 8002f6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f70:	3301      	adds	r3, #1
 8002f72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f7a:	e00f      	b.n	8002f9c <HAL_I2C_Init+0x1dc>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	1e58      	subs	r0, r3, #1
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6859      	ldr	r1, [r3, #4]
 8002f84:	460b      	mov	r3, r1
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	440b      	add	r3, r1
 8002f8a:	0099      	lsls	r1, r3, #2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f92:	3301      	adds	r3, #1
 8002f94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f98:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f9c:	6879      	ldr	r1, [r7, #4]
 8002f9e:	6809      	ldr	r1, [r1, #0]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	69da      	ldr	r2, [r3, #28]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002fca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	6911      	ldr	r1, [r2, #16]
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	68d2      	ldr	r2, [r2, #12]
 8002fd6:	4311      	orrs	r1, r2
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	6812      	ldr	r2, [r2, #0]
 8002fdc:	430b      	orrs	r3, r1
 8002fde:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	695a      	ldr	r2, [r3, #20]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f042 0201 	orr.w	r2, r2, #1
 800300a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2220      	movs	r2, #32
 8003016:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	000186a0 	.word	0x000186a0
 8003038:	001e847f 	.word	0x001e847f
 800303c:	003d08ff 	.word	0x003d08ff
 8003040:	431bde83 	.word	0x431bde83
 8003044:	10624dd3 	.word	0x10624dd3

08003048 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b088      	sub	sp, #32
 800304c:	af02      	add	r7, sp, #8
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	607a      	str	r2, [r7, #4]
 8003052:	461a      	mov	r2, r3
 8003054:	460b      	mov	r3, r1
 8003056:	817b      	strh	r3, [r7, #10]
 8003058:	4613      	mov	r3, r2
 800305a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800305c:	f7fe ffb4 	bl	8001fc8 <HAL_GetTick>
 8003060:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b20      	cmp	r3, #32
 800306c:	f040 80e0 	bne.w	8003230 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	9300      	str	r3, [sp, #0]
 8003074:	2319      	movs	r3, #25
 8003076:	2201      	movs	r2, #1
 8003078:	4970      	ldr	r1, [pc, #448]	@ (800323c <HAL_I2C_Master_Transmit+0x1f4>)
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f001 fef4 	bl	8004e68 <I2C_WaitOnFlagUntilTimeout>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003086:	2302      	movs	r3, #2
 8003088:	e0d3      	b.n	8003232 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003090:	2b01      	cmp	r3, #1
 8003092:	d101      	bne.n	8003098 <HAL_I2C_Master_Transmit+0x50>
 8003094:	2302      	movs	r3, #2
 8003096:	e0cc      	b.n	8003232 <HAL_I2C_Master_Transmit+0x1ea>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d007      	beq.n	80030be <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f042 0201 	orr.w	r2, r2, #1
 80030bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2221      	movs	r2, #33	@ 0x21
 80030d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2210      	movs	r2, #16
 80030da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	893a      	ldrh	r2, [r7, #8]
 80030ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	4a50      	ldr	r2, [pc, #320]	@ (8003240 <HAL_I2C_Master_Transmit+0x1f8>)
 80030fe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003100:	8979      	ldrh	r1, [r7, #10]
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	6a3a      	ldr	r2, [r7, #32]
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f001 fc72 	bl	80049f0 <I2C_MasterRequestWrite>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e08d      	b.n	8003232 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003116:	2300      	movs	r3, #0
 8003118:	613b      	str	r3, [r7, #16]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	695b      	ldr	r3, [r3, #20]
 8003120:	613b      	str	r3, [r7, #16]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	613b      	str	r3, [r7, #16]
 800312a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800312c:	e066      	b.n	80031fc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	6a39      	ldr	r1, [r7, #32]
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	f001 ff6e 	bl	8005014 <I2C_WaitOnTXEFlagUntilTimeout>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00d      	beq.n	800315a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003142:	2b04      	cmp	r3, #4
 8003144:	d107      	bne.n	8003156 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003154:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e06b      	b.n	8003232 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315e:	781a      	ldrb	r2, [r3, #0]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316a:	1c5a      	adds	r2, r3, #1
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003174:	b29b      	uxth	r3, r3
 8003176:	3b01      	subs	r3, #1
 8003178:	b29a      	uxth	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003182:	3b01      	subs	r3, #1
 8003184:	b29a      	uxth	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	695b      	ldr	r3, [r3, #20]
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	2b04      	cmp	r3, #4
 8003196:	d11b      	bne.n	80031d0 <HAL_I2C_Master_Transmit+0x188>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800319c:	2b00      	cmp	r3, #0
 800319e:	d017      	beq.n	80031d0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a4:	781a      	ldrb	r2, [r3, #0]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b0:	1c5a      	adds	r2, r3, #1
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	3b01      	subs	r3, #1
 80031be:	b29a      	uxth	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031c8:	3b01      	subs	r3, #1
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031d0:	697a      	ldr	r2, [r7, #20]
 80031d2:	6a39      	ldr	r1, [r7, #32]
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f001 ff5e 	bl	8005096 <I2C_WaitOnBTFFlagUntilTimeout>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00d      	beq.n	80031fc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e4:	2b04      	cmp	r3, #4
 80031e6:	d107      	bne.n	80031f8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031f6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e01a      	b.n	8003232 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003200:	2b00      	cmp	r3, #0
 8003202:	d194      	bne.n	800312e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003212:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2220      	movs	r2, #32
 8003218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800322c:	2300      	movs	r3, #0
 800322e:	e000      	b.n	8003232 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003230:	2302      	movs	r3, #2
  }
}
 8003232:	4618      	mov	r0, r3
 8003234:	3718      	adds	r7, #24
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	00100002 	.word	0x00100002
 8003240:	ffff0000 	.word	0xffff0000

08003244 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	607a      	str	r2, [r7, #4]
 800324e:	461a      	mov	r2, r3
 8003250:	460b      	mov	r3, r1
 8003252:	817b      	strh	r3, [r7, #10]
 8003254:	4613      	mov	r3, r2
 8003256:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003258:	2300      	movs	r3, #0
 800325a:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2b20      	cmp	r3, #32
 8003266:	f040 810d 	bne.w	8003484 <HAL_I2C_Master_Receive_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800326a:	4b89      	ldr	r3, [pc, #548]	@ (8003490 <HAL_I2C_Master_Receive_DMA+0x24c>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	08db      	lsrs	r3, r3, #3
 8003270:	4a88      	ldr	r2, [pc, #544]	@ (8003494 <HAL_I2C_Master_Receive_DMA+0x250>)
 8003272:	fba2 2303 	umull	r2, r3, r2, r3
 8003276:	0a1a      	lsrs	r2, r3, #8
 8003278:	4613      	mov	r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	4413      	add	r3, r2
 800327e:	009a      	lsls	r2, r3, #2
 8003280:	4413      	add	r3, r2
 8003282:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	3b01      	subs	r3, #1
 8003288:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d116      	bne.n	80032be <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2220      	movs	r2, #32
 800329a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032aa:	f043 0220 	orr.w	r2, r3, #32
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e0e3      	b.n	8003486 <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d0db      	beq.n	8003284 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d101      	bne.n	80032da <HAL_I2C_Master_Receive_DMA+0x96>
 80032d6:	2302      	movs	r3, #2
 80032d8:	e0d5      	b.n	8003486 <HAL_I2C_Master_Receive_DMA+0x242>
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2201      	movs	r2, #1
 80032de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d007      	beq.n	8003300 <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f042 0201 	orr.w	r2, r2, #1
 80032fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800330e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2222      	movs	r2, #34	@ 0x22
 8003314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2210      	movs	r2, #16
 800331c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	893a      	ldrh	r2, [r7, #8]
 8003330:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003336:	b29a      	uxth	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	4a56      	ldr	r2, [pc, #344]	@ (8003498 <HAL_I2C_Master_Receive_DMA+0x254>)
 8003340:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8003342:	897a      	ldrh	r2, [r7, #10]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	645a      	str	r2, [r3, #68]	@ 0x44

    if (hi2c->XferSize > 0U)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800334c:	2b00      	cmp	r3, #0
 800334e:	d07b      	beq.n	8003448 <HAL_I2C_Master_Receive_DMA+0x204>
    {
      if (hi2c->hdmarx != NULL)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003354:	2b00      	cmp	r3, #0
 8003356:	d02a      	beq.n	80033ae <HAL_I2C_Master_Receive_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800335c:	4a4f      	ldr	r2, [pc, #316]	@ (800349c <HAL_I2C_Master_Receive_DMA+0x258>)
 800335e:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003364:	4a4e      	ldr	r2, [pc, #312]	@ (80034a0 <HAL_I2C_Master_Receive_DMA+0x25c>)
 8003366:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800336c:	2200      	movs	r2, #0
 800336e:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003374:	2200      	movs	r2, #0
 8003376:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800337c:	2200      	movs	r2, #0
 800337e:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003384:	2200      	movs	r2, #0
 8003386:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	3310      	adds	r3, #16
 8003392:	4619      	mov	r1, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003398:	461a      	mov	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800339e:	f7ff f803 	bl	80023a8 <HAL_DMA_Start_IT>
 80033a2:	4603      	mov	r3, r0
 80033a4:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80033a6:	7dfb      	ldrb	r3, [r7, #23]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d139      	bne.n	8003420 <HAL_I2C_Master_Receive_DMA+0x1dc>
 80033ac:	e013      	b.n	80033d6 <HAL_I2C_Master_Receive_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2220      	movs	r2, #32
 80033b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e057      	b.n	8003486 <HAL_I2C_Master_Receive_DMA+0x242>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80033e4:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033f4:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	685a      	ldr	r2, [r3, #4]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800340c:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800341c:	605a      	str	r2, [r3, #4]
 800341e:	e02f      	b.n	8003480 <HAL_I2C_Master_Receive_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2220      	movs	r2, #32
 8003424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003434:	f043 0210 	orr.w	r2, r3, #16
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e01e      	b.n	8003486 <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	685a      	ldr	r2, [r3, #4]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 800345e:	605a      	str	r2, [r3, #4]

      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800346e:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800347e:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8003480:	2300      	movs	r3, #0
 8003482:	e000      	b.n	8003486 <HAL_I2C_Master_Receive_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 8003484:	2302      	movs	r3, #2
  }
}
 8003486:	4618      	mov	r0, r3
 8003488:	3718      	adds	r7, #24
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	2000002c 	.word	0x2000002c
 8003494:	14f8b589 	.word	0x14f8b589
 8003498:	ffff0000 	.word	0xffff0000
 800349c:	08004af5 	.word	0x08004af5
 80034a0:	08004c9f 	.word	0x08004c9f

080034a4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b088      	sub	sp, #32
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80034ac:	2300      	movs	r3, #0
 80034ae:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034bc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80034c4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034cc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80034ce:	7bfb      	ldrb	r3, [r7, #15]
 80034d0:	2b10      	cmp	r3, #16
 80034d2:	d003      	beq.n	80034dc <HAL_I2C_EV_IRQHandler+0x38>
 80034d4:	7bfb      	ldrb	r3, [r7, #15]
 80034d6:	2b40      	cmp	r3, #64	@ 0x40
 80034d8:	f040 80b1 	bne.w	800363e <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10d      	bne.n	8003512 <HAL_I2C_EV_IRQHandler+0x6e>
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80034fc:	d003      	beq.n	8003506 <HAL_I2C_EV_IRQHandler+0x62>
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003504:	d101      	bne.n	800350a <HAL_I2C_EV_IRQHandler+0x66>
 8003506:	2301      	movs	r3, #1
 8003508:	e000      	b.n	800350c <HAL_I2C_EV_IRQHandler+0x68>
 800350a:	2300      	movs	r3, #0
 800350c:	2b01      	cmp	r3, #1
 800350e:	f000 8114 	beq.w	800373a <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	f003 0301 	and.w	r3, r3, #1
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00b      	beq.n	8003534 <HAL_I2C_EV_IRQHandler+0x90>
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003522:	2b00      	cmp	r3, #0
 8003524:	d006      	beq.n	8003534 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f001 fe57 	bl	80051da <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f000 fcb5 	bl	8003e9c <I2C_Master_SB>
 8003532:	e083      	b.n	800363c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	f003 0308 	and.w	r3, r3, #8
 800353a:	2b00      	cmp	r3, #0
 800353c:	d008      	beq.n	8003550 <HAL_I2C_EV_IRQHandler+0xac>
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003544:	2b00      	cmp	r3, #0
 8003546:	d003      	beq.n	8003550 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 fd2d 	bl	8003fa8 <I2C_Master_ADD10>
 800354e:	e075      	b.n	800363c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d008      	beq.n	800356c <HAL_I2C_EV_IRQHandler+0xc8>
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003560:	2b00      	cmp	r3, #0
 8003562:	d003      	beq.n	800356c <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 fd49 	bl	8003ffc <I2C_Master_ADDR>
 800356a:	e067      	b.n	800363c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	f003 0304 	and.w	r3, r3, #4
 8003572:	2b00      	cmp	r3, #0
 8003574:	d036      	beq.n	80035e4 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003580:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003584:	f000 80db 	beq.w	800373e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00d      	beq.n	80035ae <HAL_I2C_EV_IRQHandler+0x10a>
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003598:	2b00      	cmp	r3, #0
 800359a:	d008      	beq.n	80035ae <HAL_I2C_EV_IRQHandler+0x10a>
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	f003 0304 	and.w	r3, r3, #4
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d103      	bne.n	80035ae <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 f92d 	bl	8003806 <I2C_MasterTransmit_TXE>
 80035ac:	e046      	b.n	800363c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	f003 0304 	and.w	r3, r3, #4
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f000 80c2 	beq.w	800373e <HAL_I2C_EV_IRQHandler+0x29a>
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f000 80bc 	beq.w	800373e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80035c6:	7bbb      	ldrb	r3, [r7, #14]
 80035c8:	2b21      	cmp	r3, #33	@ 0x21
 80035ca:	d103      	bne.n	80035d4 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 f9b6 	bl	800393e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035d2:	e0b4      	b.n	800373e <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80035d4:	7bfb      	ldrb	r3, [r7, #15]
 80035d6:	2b40      	cmp	r3, #64	@ 0x40
 80035d8:	f040 80b1 	bne.w	800373e <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 fa24 	bl	8003a2a <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035e2:	e0ac      	b.n	800373e <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035f2:	f000 80a4 	beq.w	800373e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00d      	beq.n	800361c <HAL_I2C_EV_IRQHandler+0x178>
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003606:	2b00      	cmp	r3, #0
 8003608:	d008      	beq.n	800361c <HAL_I2C_EV_IRQHandler+0x178>
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	f003 0304 	and.w	r3, r3, #4
 8003610:	2b00      	cmp	r3, #0
 8003612:	d103      	bne.n	800361c <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 fa9c 	bl	8003b52 <I2C_MasterReceive_RXNE>
 800361a:	e00f      	b.n	800363c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	f003 0304 	and.w	r3, r3, #4
 8003622:	2b00      	cmp	r3, #0
 8003624:	f000 808b 	beq.w	800373e <HAL_I2C_EV_IRQHandler+0x29a>
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800362e:	2b00      	cmp	r3, #0
 8003630:	f000 8085 	beq.w	800373e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f000 fb47 	bl	8003cc8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800363a:	e080      	b.n	800373e <HAL_I2C_EV_IRQHandler+0x29a>
 800363c:	e07f      	b.n	800373e <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003642:	2b00      	cmp	r3, #0
 8003644:	d004      	beq.n	8003650 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	695b      	ldr	r3, [r3, #20]
 800364c:	61fb      	str	r3, [r7, #28]
 800364e:	e007      	b.n	8003660 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d011      	beq.n	800368e <HAL_I2C_EV_IRQHandler+0x1ea>
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00c      	beq.n	800368e <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003678:	2b00      	cmp	r3, #0
 800367a:	d003      	beq.n	8003684 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003684:	69b9      	ldr	r1, [r7, #24]
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 ff07 	bl	800449a <I2C_Slave_ADDR>
 800368c:	e05a      	b.n	8003744 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	f003 0310 	and.w	r3, r3, #16
 8003694:	2b00      	cmp	r3, #0
 8003696:	d008      	beq.n	80036aa <HAL_I2C_EV_IRQHandler+0x206>
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d003      	beq.n	80036aa <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 ff42 	bl	800452c <I2C_Slave_STOPF>
 80036a8:	e04c      	b.n	8003744 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80036aa:	7bbb      	ldrb	r3, [r7, #14]
 80036ac:	2b21      	cmp	r3, #33	@ 0x21
 80036ae:	d002      	beq.n	80036b6 <HAL_I2C_EV_IRQHandler+0x212>
 80036b0:	7bbb      	ldrb	r3, [r7, #14]
 80036b2:	2b29      	cmp	r3, #41	@ 0x29
 80036b4:	d120      	bne.n	80036f8 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00d      	beq.n	80036dc <HAL_I2C_EV_IRQHandler+0x238>
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d008      	beq.n	80036dc <HAL_I2C_EV_IRQHandler+0x238>
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	f003 0304 	and.w	r3, r3, #4
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d103      	bne.n	80036dc <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 fe22 	bl	800431e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036da:	e032      	b.n	8003742 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	f003 0304 	and.w	r3, r3, #4
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d02d      	beq.n	8003742 <HAL_I2C_EV_IRQHandler+0x29e>
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d028      	beq.n	8003742 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 fe51 	bl	8004398 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036f6:	e024      	b.n	8003742 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00d      	beq.n	800371e <HAL_I2C_EV_IRQHandler+0x27a>
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003708:	2b00      	cmp	r3, #0
 800370a:	d008      	beq.n	800371e <HAL_I2C_EV_IRQHandler+0x27a>
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	f003 0304 	and.w	r3, r3, #4
 8003712:	2b00      	cmp	r3, #0
 8003714:	d103      	bne.n	800371e <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 fe5f 	bl	80043da <I2C_SlaveReceive_RXNE>
 800371c:	e012      	b.n	8003744 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	f003 0304 	and.w	r3, r3, #4
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00d      	beq.n	8003744 <HAL_I2C_EV_IRQHandler+0x2a0>
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800372e:	2b00      	cmp	r3, #0
 8003730:	d008      	beq.n	8003744 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 fe8f 	bl	8004456 <I2C_SlaveReceive_BTF>
 8003738:	e004      	b.n	8003744 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800373a:	bf00      	nop
 800373c:	e002      	b.n	8003744 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800373e:	bf00      	nop
 8003740:	e000      	b.n	8003744 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003742:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003744:	3720      	adds	r7, #32
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800374a:	b480      	push	{r7}
 800374c:	b083      	sub	sp, #12
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003752:	bf00      	nop
 8003754:	370c      	adds	r7, #12
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr

0800375e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800375e:	b480      	push	{r7}
 8003760:	b083      	sub	sp, #12
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003766:	bf00      	nop
 8003768:	370c      	adds	r7, #12
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr

08003772 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003772:	b480      	push	{r7}
 8003774:	b083      	sub	sp, #12
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800377a:	bf00      	nop
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr

08003786 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003786:	b480      	push	{r7}
 8003788:	b083      	sub	sp, #12
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
 800378e:	460b      	mov	r3, r1
 8003790:	70fb      	strb	r3, [r7, #3]
 8003792:	4613      	mov	r3, r2
 8003794:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003796:	bf00      	nop
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr

080037a2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037a2:	b480      	push	{r7}
 80037a4:	b083      	sub	sp, #12
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80037aa:	bf00      	nop
 80037ac:	370c      	adds	r7, #12
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr

080037b6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037b6:	b480      	push	{r7}
 80037b8:	b083      	sub	sp, #12
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80037be:	bf00      	nop
 80037c0:	370c      	adds	r7, #12
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr

080037ca <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037ca:	b480      	push	{r7}
 80037cc:	b083      	sub	sp, #12
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80037d2:	bf00      	nop
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr

080037de <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80037de:	b480      	push	{r7}
 80037e0:	b083      	sub	sp, #12
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80037e6:	bf00      	nop
 80037e8:	370c      	adds	r7, #12
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr

080037f2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037f2:	b480      	push	{r7}
 80037f4:	b083      	sub	sp, #12
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80037fa:	bf00      	nop
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003806:	b580      	push	{r7, lr}
 8003808:	b084      	sub	sp, #16
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003814:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800381c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003822:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003828:	2b00      	cmp	r3, #0
 800382a:	d150      	bne.n	80038ce <I2C_MasterTransmit_TXE+0xc8>
 800382c:	7bfb      	ldrb	r3, [r7, #15]
 800382e:	2b21      	cmp	r3, #33	@ 0x21
 8003830:	d14d      	bne.n	80038ce <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	2b08      	cmp	r3, #8
 8003836:	d01d      	beq.n	8003874 <I2C_MasterTransmit_TXE+0x6e>
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	2b20      	cmp	r3, #32
 800383c:	d01a      	beq.n	8003874 <I2C_MasterTransmit_TXE+0x6e>
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003844:	d016      	beq.n	8003874 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	685a      	ldr	r2, [r3, #4]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003854:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2211      	movs	r2, #17
 800385a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2220      	movs	r2, #32
 8003868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f7ff ff6c 	bl	800374a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003872:	e060      	b.n	8003936 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685a      	ldr	r2, [r3, #4]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003882:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003892:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2220      	movs	r2, #32
 800389e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b40      	cmp	r3, #64	@ 0x40
 80038ac:	d107      	bne.n	80038be <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f7ff ff7d 	bl	80037b6 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80038bc:	e03b      	b.n	8003936 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f7ff ff3f 	bl	800374a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80038cc:	e033      	b.n	8003936 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80038ce:	7bfb      	ldrb	r3, [r7, #15]
 80038d0:	2b21      	cmp	r3, #33	@ 0x21
 80038d2:	d005      	beq.n	80038e0 <I2C_MasterTransmit_TXE+0xda>
 80038d4:	7bbb      	ldrb	r3, [r7, #14]
 80038d6:	2b40      	cmp	r3, #64	@ 0x40
 80038d8:	d12d      	bne.n	8003936 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80038da:	7bfb      	ldrb	r3, [r7, #15]
 80038dc:	2b22      	cmp	r3, #34	@ 0x22
 80038de:	d12a      	bne.n	8003936 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d108      	bne.n	80038fc <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038f8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80038fa:	e01c      	b.n	8003936 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2b40      	cmp	r3, #64	@ 0x40
 8003906:	d103      	bne.n	8003910 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 f88e 	bl	8003a2a <I2C_MemoryTransmit_TXE_BTF>
}
 800390e:	e012      	b.n	8003936 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003914:	781a      	ldrb	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003920:	1c5a      	adds	r2, r3, #1
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800392a:	b29b      	uxth	r3, r3
 800392c:	3b01      	subs	r3, #1
 800392e:	b29a      	uxth	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003934:	e7ff      	b.n	8003936 <I2C_MasterTransmit_TXE+0x130>
 8003936:	bf00      	nop
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b084      	sub	sp, #16
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800394a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003952:	b2db      	uxtb	r3, r3
 8003954:	2b21      	cmp	r3, #33	@ 0x21
 8003956:	d164      	bne.n	8003a22 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800395c:	b29b      	uxth	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d012      	beq.n	8003988 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003966:	781a      	ldrb	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003972:	1c5a      	adds	r2, r3, #1
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800397c:	b29b      	uxth	r3, r3
 800397e:	3b01      	subs	r3, #1
 8003980:	b29a      	uxth	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003986:	e04c      	b.n	8003a22 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2b08      	cmp	r3, #8
 800398c:	d01d      	beq.n	80039ca <I2C_MasterTransmit_BTF+0x8c>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2b20      	cmp	r3, #32
 8003992:	d01a      	beq.n	80039ca <I2C_MasterTransmit_BTF+0x8c>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800399a:	d016      	beq.n	80039ca <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	685a      	ldr	r2, [r3, #4]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80039aa:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2211      	movs	r2, #17
 80039b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2220      	movs	r2, #32
 80039be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7ff fec1 	bl	800374a <HAL_I2C_MasterTxCpltCallback>
}
 80039c8:	e02b      	b.n	8003a22 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	685a      	ldr	r2, [r3, #4]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80039d8:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039e8:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2220      	movs	r2, #32
 80039f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	2b40      	cmp	r3, #64	@ 0x40
 8003a02:	d107      	bne.n	8003a14 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f7ff fed2 	bl	80037b6 <HAL_I2C_MemTxCpltCallback>
}
 8003a12:	e006      	b.n	8003a22 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f7ff fe94 	bl	800374a <HAL_I2C_MasterTxCpltCallback>
}
 8003a22:	bf00      	nop
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b084      	sub	sp, #16
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a38:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d11d      	bne.n	8003a7e <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d10b      	bne.n	8003a62 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a4e:	b2da      	uxtb	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a5a:	1c9a      	adds	r2, r3, #2
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003a60:	e073      	b.n	8003b4a <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	121b      	asrs	r3, r3, #8
 8003a6a:	b2da      	uxtb	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a76:	1c5a      	adds	r2, r3, #1
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003a7c:	e065      	b.n	8003b4a <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d10b      	bne.n	8003a9e <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a8a:	b2da      	uxtb	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a96:	1c5a      	adds	r2, r3, #1
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003a9c:	e055      	b.n	8003b4a <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d151      	bne.n	8003b4a <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003aa6:	7bfb      	ldrb	r3, [r7, #15]
 8003aa8:	2b22      	cmp	r3, #34	@ 0x22
 8003aaa:	d10d      	bne.n	8003ac8 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003aba:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ac0:	1c5a      	adds	r2, r3, #1
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003ac6:	e040      	b.n	8003b4a <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d015      	beq.n	8003afe <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003ad2:	7bfb      	ldrb	r3, [r7, #15]
 8003ad4:	2b21      	cmp	r3, #33	@ 0x21
 8003ad6:	d112      	bne.n	8003afe <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003adc:	781a      	ldrb	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae8:	1c5a      	adds	r2, r3, #1
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	3b01      	subs	r3, #1
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003afc:	e025      	b.n	8003b4a <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d120      	bne.n	8003b4a <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003b08:	7bfb      	ldrb	r3, [r7, #15]
 8003b0a:	2b21      	cmp	r3, #33	@ 0x21
 8003b0c:	d11d      	bne.n	8003b4a <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	685a      	ldr	r2, [r3, #4]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003b1c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b2c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2220      	movs	r2, #32
 8003b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f7ff fe36 	bl	80037b6 <HAL_I2C_MemTxCpltCallback>
}
 8003b4a:	bf00      	nop
 8003b4c:	3710      	adds	r7, #16
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b084      	sub	sp, #16
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b22      	cmp	r3, #34	@ 0x22
 8003b64:	f040 80ac 	bne.w	8003cc0 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2b03      	cmp	r3, #3
 8003b74:	d921      	bls.n	8003bba <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	691a      	ldr	r2, [r3, #16]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b80:	b2d2      	uxtb	r2, r2
 8003b82:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b88:	1c5a      	adds	r2, r3, #1
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	3b01      	subs	r3, #1
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	2b03      	cmp	r3, #3
 8003ba4:	f040 808c 	bne.w	8003cc0 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bb6:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003bb8:	e082      	b.n	8003cc0 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d075      	beq.n	8003cae <I2C_MasterReceive_RXNE+0x15c>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d002      	beq.n	8003bce <I2C_MasterReceive_RXNE+0x7c>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d16f      	bne.n	8003cae <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f001 faa2 	bl	8005118 <I2C_WaitOnSTOPRequestThroughIT>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d142      	bne.n	8003c60 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003be8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003bf8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	691a      	ldr	r2, [r3, #16]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c04:	b2d2      	uxtb	r2, r2
 8003c06:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c0c:	1c5a      	adds	r2, r3, #1
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2220      	movs	r2, #32
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2b40      	cmp	r3, #64	@ 0x40
 8003c32:	d10a      	bne.n	8003c4a <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f7ff fdc1 	bl	80037ca <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003c48:	e03a      	b.n	8003cc0 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2212      	movs	r2, #18
 8003c56:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f7fd fb97 	bl	800138c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003c5e:	e02f      	b.n	8003cc0 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685a      	ldr	r2, [r3, #4]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003c6e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	691a      	ldr	r2, [r3, #16]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7a:	b2d2      	uxtb	r2, r2
 8003c7c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c82:	1c5a      	adds	r2, r3, #1
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2220      	movs	r2, #32
 8003c9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f7ff fd99 	bl	80037de <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003cac:	e008      	b.n	8003cc0 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	685a      	ldr	r2, [r3, #4]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cbc:	605a      	str	r2, [r3, #4]
}
 8003cbe:	e7ff      	b.n	8003cc0 <I2C_MasterReceive_RXNE+0x16e>
 8003cc0:	bf00      	nop
 8003cc2:	3710      	adds	r7, #16
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	2b04      	cmp	r3, #4
 8003cde:	d11b      	bne.n	8003d18 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	685a      	ldr	r2, [r3, #4]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cee:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	691a      	ldr	r2, [r3, #16]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cfa:	b2d2      	uxtb	r2, r2
 8003cfc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d02:	1c5a      	adds	r2, r3, #1
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003d16:	e0bd      	b.n	8003e94 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	2b03      	cmp	r3, #3
 8003d20:	d129      	bne.n	8003d76 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	685a      	ldr	r2, [r3, #4]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d30:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2b04      	cmp	r3, #4
 8003d36:	d00a      	beq.n	8003d4e <I2C_MasterReceive_BTF+0x86>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d007      	beq.n	8003d4e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d4c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	691a      	ldr	r2, [r3, #16]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d58:	b2d2      	uxtb	r2, r2
 8003d5a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d60:	1c5a      	adds	r2, r3, #1
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003d74:	e08e      	b.n	8003e94 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d176      	bne.n	8003e6e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d002      	beq.n	8003d8c <I2C_MasterReceive_BTF+0xc4>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2b10      	cmp	r3, #16
 8003d8a:	d108      	bne.n	8003d9e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d9a:	601a      	str	r2, [r3, #0]
 8003d9c:	e019      	b.n	8003dd2 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2b04      	cmp	r3, #4
 8003da2:	d002      	beq.n	8003daa <I2C_MasterReceive_BTF+0xe2>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d108      	bne.n	8003dbc <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003db8:	601a      	str	r2, [r3, #0]
 8003dba:	e00a      	b.n	8003dd2 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2b10      	cmp	r3, #16
 8003dc0:	d007      	beq.n	8003dd2 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dd0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	691a      	ldr	r2, [r3, #16]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ddc:	b2d2      	uxtb	r2, r2
 8003dde:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de4:	1c5a      	adds	r2, r3, #1
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	3b01      	subs	r3, #1
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	691a      	ldr	r2, [r3, #16]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e02:	b2d2      	uxtb	r2, r2
 8003e04:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e0a:	1c5a      	adds	r2, r3, #1
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	3b01      	subs	r3, #1
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	685a      	ldr	r2, [r3, #4]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003e2c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2220      	movs	r2, #32
 8003e32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b40      	cmp	r3, #64	@ 0x40
 8003e40:	d10a      	bne.n	8003e58 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f7ff fcba 	bl	80037ca <HAL_I2C_MemRxCpltCallback>
}
 8003e56:	e01d      	b.n	8003e94 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2212      	movs	r2, #18
 8003e64:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f7fd fa90 	bl	800138c <HAL_I2C_MasterRxCpltCallback>
}
 8003e6c:	e012      	b.n	8003e94 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	691a      	ldr	r2, [r3, #16]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e78:	b2d2      	uxtb	r2, r2
 8003e7a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e80:	1c5a      	adds	r2, r3, #1
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003e94:	bf00      	nop
 8003e96:	3710      	adds	r7, #16
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b40      	cmp	r3, #64	@ 0x40
 8003eae:	d117      	bne.n	8003ee0 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d109      	bne.n	8003ecc <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003ec8:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003eca:	e067      	b.n	8003f9c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	f043 0301 	orr.w	r3, r3, #1
 8003ed6:	b2da      	uxtb	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	611a      	str	r2, [r3, #16]
}
 8003ede:	e05d      	b.n	8003f9c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ee8:	d133      	bne.n	8003f52 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b21      	cmp	r3, #33	@ 0x21
 8003ef4:	d109      	bne.n	8003f0a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	461a      	mov	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003f06:	611a      	str	r2, [r3, #16]
 8003f08:	e008      	b.n	8003f1c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	f043 0301 	orr.w	r3, r3, #1
 8003f14:	b2da      	uxtb	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d004      	beq.n	8003f2e <I2C_Master_SB+0x92>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d108      	bne.n	8003f40 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d032      	beq.n	8003f9c <I2C_Master_SB+0x100>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d02d      	beq.n	8003f9c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	685a      	ldr	r2, [r3, #4]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f4e:	605a      	str	r2, [r3, #4]
}
 8003f50:	e024      	b.n	8003f9c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10e      	bne.n	8003f78 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	11db      	asrs	r3, r3, #7
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	f003 0306 	and.w	r3, r3, #6
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	f063 030f 	orn	r3, r3, #15
 8003f6e:	b2da      	uxtb	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	611a      	str	r2, [r3, #16]
}
 8003f76:	e011      	b.n	8003f9c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d10d      	bne.n	8003f9c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	11db      	asrs	r3, r3, #7
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	f003 0306 	and.w	r3, r3, #6
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	f063 030e 	orn	r3, r3, #14
 8003f94:	b2da      	uxtb	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	611a      	str	r2, [r3, #16]
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fb4:	b2da      	uxtb	r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d004      	beq.n	8003fce <I2C_Master_ADD10+0x26>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d108      	bne.n	8003fe0 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00c      	beq.n	8003ff0 <I2C_Master_ADD10+0x48>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d007      	beq.n	8003ff0 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fee:	605a      	str	r2, [r3, #4]
  }
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b091      	sub	sp, #68	@ 0x44
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800400a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004012:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004018:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b22      	cmp	r3, #34	@ 0x22
 8004024:	f040 8169 	bne.w	80042fa <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800402c:	2b00      	cmp	r3, #0
 800402e:	d10f      	bne.n	8004050 <I2C_Master_ADDR+0x54>
 8004030:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004034:	2b40      	cmp	r3, #64	@ 0x40
 8004036:	d10b      	bne.n	8004050 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004038:	2300      	movs	r3, #0
 800403a:	633b      	str	r3, [r7, #48]	@ 0x30
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	633b      	str	r3, [r7, #48]	@ 0x30
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	633b      	str	r3, [r7, #48]	@ 0x30
 800404c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800404e:	e160      	b.n	8004312 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004054:	2b00      	cmp	r3, #0
 8004056:	d11d      	bne.n	8004094 <I2C_Master_ADDR+0x98>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004060:	d118      	bne.n	8004094 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004062:	2300      	movs	r3, #0
 8004064:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	695b      	ldr	r3, [r3, #20]
 800406c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004086:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800408c:	1c5a      	adds	r2, r3, #1
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	651a      	str	r2, [r3, #80]	@ 0x50
 8004092:	e13e      	b.n	8004312 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004098:	b29b      	uxth	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d113      	bne.n	80040c6 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800409e:	2300      	movs	r3, #0
 80040a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	e115      	b.n	80042f2 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	f040 808a 	bne.w	80041e6 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80040d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040d4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80040d8:	d137      	bne.n	800414a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040e8:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040f8:	d113      	bne.n	8004122 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004108:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800410a:	2300      	movs	r3, #0
 800410c:	627b      	str	r3, [r7, #36]	@ 0x24
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	695b      	ldr	r3, [r3, #20]
 8004114:	627b      	str	r3, [r7, #36]	@ 0x24
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	627b      	str	r3, [r7, #36]	@ 0x24
 800411e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004120:	e0e7      	b.n	80042f2 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004122:	2300      	movs	r3, #0
 8004124:	623b      	str	r3, [r7, #32]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	623b      	str	r3, [r7, #32]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	623b      	str	r3, [r7, #32]
 8004136:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004146:	601a      	str	r2, [r3, #0]
 8004148:	e0d3      	b.n	80042f2 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800414a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800414c:	2b08      	cmp	r3, #8
 800414e:	d02e      	beq.n	80041ae <I2C_Master_ADDR+0x1b2>
 8004150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004152:	2b20      	cmp	r3, #32
 8004154:	d02b      	beq.n	80041ae <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004156:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004158:	2b12      	cmp	r3, #18
 800415a:	d102      	bne.n	8004162 <I2C_Master_ADDR+0x166>
 800415c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800415e:	2b01      	cmp	r3, #1
 8004160:	d125      	bne.n	80041ae <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004164:	2b04      	cmp	r3, #4
 8004166:	d00e      	beq.n	8004186 <I2C_Master_ADDR+0x18a>
 8004168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800416a:	2b02      	cmp	r3, #2
 800416c:	d00b      	beq.n	8004186 <I2C_Master_ADDR+0x18a>
 800416e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004170:	2b10      	cmp	r3, #16
 8004172:	d008      	beq.n	8004186 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	e007      	b.n	8004196 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004194:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004196:	2300      	movs	r3, #0
 8004198:	61fb      	str	r3, [r7, #28]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	61fb      	str	r3, [r7, #28]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	61fb      	str	r3, [r7, #28]
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	e0a1      	b.n	80042f2 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041bc:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041be:	2300      	movs	r3, #0
 80041c0:	61bb      	str	r3, [r7, #24]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	695b      	ldr	r3, [r3, #20]
 80041c8:	61bb      	str	r3, [r7, #24]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	699b      	ldr	r3, [r3, #24]
 80041d0:	61bb      	str	r3, [r7, #24]
 80041d2:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041e2:	601a      	str	r2, [r3, #0]
 80041e4:	e085      	b.n	80042f2 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d14d      	bne.n	800428c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80041f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041f2:	2b04      	cmp	r3, #4
 80041f4:	d016      	beq.n	8004224 <I2C_Master_ADDR+0x228>
 80041f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d013      	beq.n	8004224 <I2C_Master_ADDR+0x228>
 80041fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041fe:	2b10      	cmp	r3, #16
 8004200:	d010      	beq.n	8004224 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004210:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004220:	601a      	str	r2, [r3, #0]
 8004222:	e007      	b.n	8004234 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004232:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800423e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004242:	d117      	bne.n	8004274 <I2C_Master_ADDR+0x278>
 8004244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004246:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800424a:	d00b      	beq.n	8004264 <I2C_Master_ADDR+0x268>
 800424c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800424e:	2b01      	cmp	r3, #1
 8004250:	d008      	beq.n	8004264 <I2C_Master_ADDR+0x268>
 8004252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004254:	2b08      	cmp	r3, #8
 8004256:	d005      	beq.n	8004264 <I2C_Master_ADDR+0x268>
 8004258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800425a:	2b10      	cmp	r3, #16
 800425c:	d002      	beq.n	8004264 <I2C_Master_ADDR+0x268>
 800425e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004260:	2b20      	cmp	r3, #32
 8004262:	d107      	bne.n	8004274 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	685a      	ldr	r2, [r3, #4]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004272:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004274:	2300      	movs	r3, #0
 8004276:	617b      	str	r3, [r7, #20]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	617b      	str	r3, [r7, #20]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	617b      	str	r3, [r7, #20]
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	e032      	b.n	80042f2 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800429a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042aa:	d117      	bne.n	80042dc <I2C_Master_ADDR+0x2e0>
 80042ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ae:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80042b2:	d00b      	beq.n	80042cc <I2C_Master_ADDR+0x2d0>
 80042b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d008      	beq.n	80042cc <I2C_Master_ADDR+0x2d0>
 80042ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042bc:	2b08      	cmp	r3, #8
 80042be:	d005      	beq.n	80042cc <I2C_Master_ADDR+0x2d0>
 80042c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042c2:	2b10      	cmp	r3, #16
 80042c4:	d002      	beq.n	80042cc <I2C_Master_ADDR+0x2d0>
 80042c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042c8:	2b20      	cmp	r3, #32
 80042ca:	d107      	bne.n	80042dc <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	685a      	ldr	r2, [r3, #4]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80042da:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042dc:	2300      	movs	r3, #0
 80042de:	613b      	str	r3, [r7, #16]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	613b      	str	r3, [r7, #16]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	613b      	str	r3, [r7, #16]
 80042f0:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80042f8:	e00b      	b.n	8004312 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042fa:	2300      	movs	r3, #0
 80042fc:	60fb      	str	r3, [r7, #12]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	60fb      	str	r3, [r7, #12]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	60fb      	str	r3, [r7, #12]
 800430e:	68fb      	ldr	r3, [r7, #12]
}
 8004310:	e7ff      	b.n	8004312 <I2C_Master_ADDR+0x316>
 8004312:	bf00      	nop
 8004314:	3744      	adds	r7, #68	@ 0x44
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800431e:	b580      	push	{r7, lr}
 8004320:	b084      	sub	sp, #16
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800432c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004332:	b29b      	uxth	r3, r3
 8004334:	2b00      	cmp	r3, #0
 8004336:	d02b      	beq.n	8004390 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433c:	781a      	ldrb	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004348:	1c5a      	adds	r2, r3, #1
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004352:	b29b      	uxth	r3, r3
 8004354:	3b01      	subs	r3, #1
 8004356:	b29a      	uxth	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004360:	b29b      	uxth	r3, r3
 8004362:	2b00      	cmp	r3, #0
 8004364:	d114      	bne.n	8004390 <I2C_SlaveTransmit_TXE+0x72>
 8004366:	7bfb      	ldrb	r3, [r7, #15]
 8004368:	2b29      	cmp	r3, #41	@ 0x29
 800436a:	d111      	bne.n	8004390 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800437a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2221      	movs	r2, #33	@ 0x21
 8004380:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2228      	movs	r2, #40	@ 0x28
 8004386:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f7ff f9e7 	bl	800375e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004390:	bf00      	nop
 8004392:	3710      	adds	r7, #16
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d011      	beq.n	80043ce <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ae:	781a      	ldrb	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ba:	1c5a      	adds	r2, r3, #1
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	3b01      	subs	r3, #1
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80043ce:	bf00      	nop
 80043d0:	370c      	adds	r7, #12
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr

080043da <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80043da:	b580      	push	{r7, lr}
 80043dc:	b084      	sub	sp, #16
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043e8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d02c      	beq.n	800444e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	691a      	ldr	r2, [r3, #16]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043fe:	b2d2      	uxtb	r2, r2
 8004400:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004406:	1c5a      	adds	r2, r3, #1
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004410:	b29b      	uxth	r3, r3
 8004412:	3b01      	subs	r3, #1
 8004414:	b29a      	uxth	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800441e:	b29b      	uxth	r3, r3
 8004420:	2b00      	cmp	r3, #0
 8004422:	d114      	bne.n	800444e <I2C_SlaveReceive_RXNE+0x74>
 8004424:	7bfb      	ldrb	r3, [r7, #15]
 8004426:	2b2a      	cmp	r3, #42	@ 0x2a
 8004428:	d111      	bne.n	800444e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	685a      	ldr	r2, [r3, #4]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004438:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2222      	movs	r2, #34	@ 0x22
 800443e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2228      	movs	r2, #40	@ 0x28
 8004444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f7ff f992 	bl	8003772 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800444e:	bf00      	nop
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004456:	b480      	push	{r7}
 8004458:	b083      	sub	sp, #12
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004462:	b29b      	uxth	r3, r3
 8004464:	2b00      	cmp	r3, #0
 8004466:	d012      	beq.n	800448e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	691a      	ldr	r2, [r3, #16]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004472:	b2d2      	uxtb	r2, r2
 8004474:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800447a:	1c5a      	adds	r2, r3, #1
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004484:	b29b      	uxth	r3, r3
 8004486:	3b01      	subs	r3, #1
 8004488:	b29a      	uxth	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800448e:	bf00      	nop
 8004490:	370c      	adds	r7, #12
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr

0800449a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800449a:	b580      	push	{r7, lr}
 800449c:	b084      	sub	sp, #16
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
 80044a2:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80044a4:	2300      	movs	r3, #0
 80044a6:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80044b4:	2b28      	cmp	r3, #40	@ 0x28
 80044b6:	d125      	bne.n	8004504 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	685a      	ldr	r2, [r3, #4]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044c6:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	f003 0304 	and.w	r3, r3, #4
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80044d2:	2301      	movs	r3, #1
 80044d4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d103      	bne.n	80044e8 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	81bb      	strh	r3, [r7, #12]
 80044e6:	e002      	b.n	80044ee <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80044f6:	89ba      	ldrh	r2, [r7, #12]
 80044f8:	7bfb      	ldrb	r3, [r7, #15]
 80044fa:	4619      	mov	r1, r3
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f7ff f942 	bl	8003786 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004502:	e00e      	b.n	8004522 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004504:	2300      	movs	r3, #0
 8004506:	60bb      	str	r3, [r7, #8]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	60bb      	str	r3, [r7, #8]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	60bb      	str	r3, [r7, #8]
 8004518:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004522:	bf00      	nop
 8004524:	3710      	adds	r7, #16
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
	...

0800452c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800453a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	685a      	ldr	r2, [r3, #4]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800454a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800454c:	2300      	movs	r3, #0
 800454e:	60bb      	str	r3, [r7, #8]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	60bb      	str	r3, [r7, #8]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f042 0201 	orr.w	r2, r2, #1
 8004566:	601a      	str	r2, [r3, #0]
 8004568:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004578:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004584:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004588:	d172      	bne.n	8004670 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800458a:	7bfb      	ldrb	r3, [r7, #15]
 800458c:	2b22      	cmp	r3, #34	@ 0x22
 800458e:	d002      	beq.n	8004596 <I2C_Slave_STOPF+0x6a>
 8004590:	7bfb      	ldrb	r3, [r7, #15]
 8004592:	2b2a      	cmp	r3, #42	@ 0x2a
 8004594:	d135      	bne.n	8004602 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	b29a      	uxth	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d005      	beq.n	80045ba <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b2:	f043 0204 	orr.w	r2, r3, #4
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	685a      	ldr	r2, [r3, #4]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045c8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7fe f95e 	bl	8002890 <HAL_DMA_GetState>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d049      	beq.n	800466e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045de:	4a69      	ldr	r2, [pc, #420]	@ (8004784 <I2C_Slave_STOPF+0x258>)
 80045e0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7fd ffa6 	bl	8002538 <HAL_DMA_Abort_IT>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d03d      	beq.n	800466e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80045fc:	4610      	mov	r0, r2
 80045fe:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004600:	e035      	b.n	800466e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	b29a      	uxth	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004614:	b29b      	uxth	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d005      	beq.n	8004626 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800461e:	f043 0204 	orr.w	r2, r3, #4
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004634:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800463a:	4618      	mov	r0, r3
 800463c:	f7fe f928 	bl	8002890 <HAL_DMA_GetState>
 8004640:	4603      	mov	r3, r0
 8004642:	2b01      	cmp	r3, #1
 8004644:	d014      	beq.n	8004670 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800464a:	4a4e      	ldr	r2, [pc, #312]	@ (8004784 <I2C_Slave_STOPF+0x258>)
 800464c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004652:	4618      	mov	r0, r3
 8004654:	f7fd ff70 	bl	8002538 <HAL_DMA_Abort_IT>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d008      	beq.n	8004670 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004662:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004668:	4610      	mov	r0, r2
 800466a:	4798      	blx	r3
 800466c:	e000      	b.n	8004670 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800466e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004674:	b29b      	uxth	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d03e      	beq.n	80046f8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	695b      	ldr	r3, [r3, #20]
 8004680:	f003 0304 	and.w	r3, r3, #4
 8004684:	2b04      	cmp	r3, #4
 8004686:	d112      	bne.n	80046ae <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	691a      	ldr	r2, [r3, #16]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004692:	b2d2      	uxtb	r2, r2
 8004694:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800469a:	1c5a      	adds	r2, r3, #1
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	3b01      	subs	r3, #1
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	695b      	ldr	r3, [r3, #20]
 80046b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046b8:	2b40      	cmp	r3, #64	@ 0x40
 80046ba:	d112      	bne.n	80046e2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	691a      	ldr	r2, [r3, #16]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c6:	b2d2      	uxtb	r2, r2
 80046c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ce:	1c5a      	adds	r2, r3, #1
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046d8:	b29b      	uxth	r3, r3
 80046da:	3b01      	subs	r3, #1
 80046dc:	b29a      	uxth	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d005      	beq.n	80046f8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f0:	f043 0204 	orr.w	r2, r3, #4
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d003      	beq.n	8004708 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f000 f843 	bl	800478c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004706:	e039      	b.n	800477c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004708:	7bfb      	ldrb	r3, [r7, #15]
 800470a:	2b2a      	cmp	r3, #42	@ 0x2a
 800470c:	d109      	bne.n	8004722 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2228      	movs	r2, #40	@ 0x28
 8004718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f7ff f828 	bl	8003772 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b28      	cmp	r3, #40	@ 0x28
 800472c:	d111      	bne.n	8004752 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a15      	ldr	r2, [pc, #84]	@ (8004788 <I2C_Slave_STOPF+0x25c>)
 8004732:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2220      	movs	r2, #32
 800473e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f7ff f829 	bl	80037a2 <HAL_I2C_ListenCpltCallback>
}
 8004750:	e014      	b.n	800477c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004756:	2b22      	cmp	r3, #34	@ 0x22
 8004758:	d002      	beq.n	8004760 <I2C_Slave_STOPF+0x234>
 800475a:	7bfb      	ldrb	r3, [r7, #15]
 800475c:	2b22      	cmp	r3, #34	@ 0x22
 800475e:	d10d      	bne.n	800477c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2220      	movs	r2, #32
 800476a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f7fe fffb 	bl	8003772 <HAL_I2C_SlaveRxCpltCallback>
}
 800477c:	bf00      	nop
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	08004d19 	.word	0x08004d19
 8004788:	ffff0000 	.word	0xffff0000

0800478c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800479a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047a2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80047a4:	7bbb      	ldrb	r3, [r7, #14]
 80047a6:	2b10      	cmp	r3, #16
 80047a8:	d002      	beq.n	80047b0 <I2C_ITError+0x24>
 80047aa:	7bbb      	ldrb	r3, [r7, #14]
 80047ac:	2b40      	cmp	r3, #64	@ 0x40
 80047ae:	d10a      	bne.n	80047c6 <I2C_ITError+0x3a>
 80047b0:	7bfb      	ldrb	r3, [r7, #15]
 80047b2:	2b22      	cmp	r3, #34	@ 0x22
 80047b4:	d107      	bne.n	80047c6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047c4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80047c6:	7bfb      	ldrb	r3, [r7, #15]
 80047c8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80047cc:	2b28      	cmp	r3, #40	@ 0x28
 80047ce:	d107      	bne.n	80047e0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2228      	movs	r2, #40	@ 0x28
 80047da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80047de:	e015      	b.n	800480c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047ee:	d00a      	beq.n	8004806 <I2C_ITError+0x7a>
 80047f0:	7bfb      	ldrb	r3, [r7, #15]
 80047f2:	2b60      	cmp	r3, #96	@ 0x60
 80047f4:	d007      	beq.n	8004806 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2220      	movs	r2, #32
 80047fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004816:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800481a:	d162      	bne.n	80048e2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	685a      	ldr	r2, [r3, #4]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800482a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004830:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004834:	b2db      	uxtb	r3, r3
 8004836:	2b01      	cmp	r3, #1
 8004838:	d020      	beq.n	800487c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800483e:	4a6a      	ldr	r2, [pc, #424]	@ (80049e8 <I2C_ITError+0x25c>)
 8004840:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004846:	4618      	mov	r0, r3
 8004848:	f7fd fe76 	bl	8002538 <HAL_DMA_Abort_IT>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	f000 8089 	beq.w	8004966 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 0201 	bic.w	r2, r2, #1
 8004862:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2220      	movs	r2, #32
 8004868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004870:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004876:	4610      	mov	r0, r2
 8004878:	4798      	blx	r3
 800487a:	e074      	b.n	8004966 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004880:	4a59      	ldr	r2, [pc, #356]	@ (80049e8 <I2C_ITError+0x25c>)
 8004882:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004888:	4618      	mov	r0, r3
 800488a:	f7fd fe55 	bl	8002538 <HAL_DMA_Abort_IT>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d068      	beq.n	8004966 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	695b      	ldr	r3, [r3, #20]
 800489a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800489e:	2b40      	cmp	r3, #64	@ 0x40
 80048a0:	d10b      	bne.n	80048ba <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	691a      	ldr	r2, [r3, #16]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ac:	b2d2      	uxtb	r2, r2
 80048ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b4:	1c5a      	adds	r2, r3, #1
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f022 0201 	bic.w	r2, r2, #1
 80048c8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2220      	movs	r2, #32
 80048ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80048dc:	4610      	mov	r0, r2
 80048de:	4798      	blx	r3
 80048e0:	e041      	b.n	8004966 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b60      	cmp	r3, #96	@ 0x60
 80048ec:	d125      	bne.n	800493a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2220      	movs	r2, #32
 80048f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004906:	2b40      	cmp	r3, #64	@ 0x40
 8004908:	d10b      	bne.n	8004922 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	691a      	ldr	r2, [r3, #16]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004914:	b2d2      	uxtb	r2, r2
 8004916:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800491c:	1c5a      	adds	r2, r3, #1
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f022 0201 	bic.w	r2, r2, #1
 8004930:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f7fe ff5d 	bl	80037f2 <HAL_I2C_AbortCpltCallback>
 8004938:	e015      	b.n	8004966 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004944:	2b40      	cmp	r3, #64	@ 0x40
 8004946:	d10b      	bne.n	8004960 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	691a      	ldr	r2, [r3, #16]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004952:	b2d2      	uxtb	r2, r2
 8004954:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800495a:	1c5a      	adds	r2, r3, #1
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f7fe ff3c 	bl	80037de <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800496a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10e      	bne.n	8004994 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800497c:	2b00      	cmp	r3, #0
 800497e:	d109      	bne.n	8004994 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004986:	2b00      	cmp	r3, #0
 8004988:	d104      	bne.n	8004994 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004990:	2b00      	cmp	r3, #0
 8004992:	d007      	beq.n	80049a4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	685a      	ldr	r2, [r3, #4]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80049a2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049aa:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b0:	f003 0304 	and.w	r3, r3, #4
 80049b4:	2b04      	cmp	r3, #4
 80049b6:	d113      	bne.n	80049e0 <I2C_ITError+0x254>
 80049b8:	7bfb      	ldrb	r3, [r7, #15]
 80049ba:	2b28      	cmp	r3, #40	@ 0x28
 80049bc:	d110      	bne.n	80049e0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a0a      	ldr	r2, [pc, #40]	@ (80049ec <I2C_ITError+0x260>)
 80049c2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2220      	movs	r2, #32
 80049ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f7fe fee1 	bl	80037a2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80049e0:	bf00      	nop
 80049e2:	3710      	adds	r7, #16
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	08004d19 	.word	0x08004d19
 80049ec:	ffff0000 	.word	0xffff0000

080049f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b088      	sub	sp, #32
 80049f4:	af02      	add	r7, sp, #8
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	607a      	str	r2, [r7, #4]
 80049fa:	603b      	str	r3, [r7, #0]
 80049fc:	460b      	mov	r3, r1
 80049fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a04:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	2b08      	cmp	r3, #8
 8004a0a:	d006      	beq.n	8004a1a <I2C_MasterRequestWrite+0x2a>
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d003      	beq.n	8004a1a <I2C_MasterRequestWrite+0x2a>
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004a18:	d108      	bne.n	8004a2c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a28:	601a      	str	r2, [r3, #0]
 8004a2a:	e00b      	b.n	8004a44 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a30:	2b12      	cmp	r3, #18
 8004a32:	d107      	bne.n	8004a44 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a42:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	9300      	str	r3, [sp, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f000 fa09 	bl	8004e68 <I2C_WaitOnFlagUntilTimeout>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00d      	beq.n	8004a78 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a6a:	d103      	bne.n	8004a74 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a72:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e035      	b.n	8004ae4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a80:	d108      	bne.n	8004a94 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a82:	897b      	ldrh	r3, [r7, #10]
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	461a      	mov	r2, r3
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004a90:	611a      	str	r2, [r3, #16]
 8004a92:	e01b      	b.n	8004acc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004a94:	897b      	ldrh	r3, [r7, #10]
 8004a96:	11db      	asrs	r3, r3, #7
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	f003 0306 	and.w	r3, r3, #6
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	f063 030f 	orn	r3, r3, #15
 8004aa4:	b2da      	uxtb	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	490e      	ldr	r1, [pc, #56]	@ (8004aec <I2C_MasterRequestWrite+0xfc>)
 8004ab2:	68f8      	ldr	r0, [r7, #12]
 8004ab4:	f000 fa2f 	bl	8004f16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d001      	beq.n	8004ac2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e010      	b.n	8004ae4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004ac2:	897b      	ldrh	r3, [r7, #10]
 8004ac4:	b2da      	uxtb	r2, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	4907      	ldr	r1, [pc, #28]	@ (8004af0 <I2C_MasterRequestWrite+0x100>)
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f000 fa1f 	bl	8004f16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d001      	beq.n	8004ae2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e000      	b.n	8004ae4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3718      	adds	r7, #24
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	00010008 	.word	0x00010008
 8004af0:	00010002 	.word	0x00010002

08004af4 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b086      	sub	sp, #24
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b00:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b08:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b10:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b16:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	685a      	ldr	r2, [r3, #4]
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004b26:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d003      	beq.n	8004b38 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b34:	2200      	movs	r2, #0
 8004b36:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d003      	beq.n	8004b48 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b44:	2200      	movs	r2, #0
 8004b46:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8004b48:	7cfb      	ldrb	r3, [r7, #19]
 8004b4a:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8004b4e:	2b21      	cmp	r3, #33	@ 0x21
 8004b50:	d007      	beq.n	8004b62 <I2C_DMAXferCplt+0x6e>
 8004b52:	7cfb      	ldrb	r3, [r7, #19]
 8004b54:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8004b58:	2b22      	cmp	r3, #34	@ 0x22
 8004b5a:	d131      	bne.n	8004bc0 <I2C_DMAXferCplt+0xcc>
 8004b5c:	7cbb      	ldrb	r3, [r7, #18]
 8004b5e:	2b20      	cmp	r3, #32
 8004b60:	d12e      	bne.n	8004bc0 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	685a      	ldr	r2, [r3, #4]
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b70:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	2200      	movs	r2, #0
 8004b76:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004b78:	7cfb      	ldrb	r3, [r7, #19]
 8004b7a:	2b29      	cmp	r3, #41	@ 0x29
 8004b7c:	d10a      	bne.n	8004b94 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	2221      	movs	r2, #33	@ 0x21
 8004b82:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	2228      	movs	r2, #40	@ 0x28
 8004b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004b8c:	6978      	ldr	r0, [r7, #20]
 8004b8e:	f7fe fde6 	bl	800375e <HAL_I2C_SlaveTxCpltCallback>
 8004b92:	e00c      	b.n	8004bae <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004b94:	7cfb      	ldrb	r3, [r7, #19]
 8004b96:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b98:	d109      	bne.n	8004bae <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	2222      	movs	r2, #34	@ 0x22
 8004b9e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	2228      	movs	r2, #40	@ 0x28
 8004ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004ba8:	6978      	ldr	r0, [r7, #20]
 8004baa:	f7fe fde2 	bl	8003772 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	685a      	ldr	r2, [r3, #4]
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004bbc:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004bbe:	e06a      	b.n	8004c96 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d064      	beq.n	8004c96 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d107      	bne.n	8004be6 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004be4:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	685a      	ldr	r2, [r3, #4]
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004bf4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004bfc:	d009      	beq.n	8004c12 <I2C_DMAXferCplt+0x11e>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2b08      	cmp	r3, #8
 8004c02:	d006      	beq.n	8004c12 <I2C_DMAXferCplt+0x11e>
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004c0a:	d002      	beq.n	8004c12 <I2C_DMAXferCplt+0x11e>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2b20      	cmp	r3, #32
 8004c10:	d107      	bne.n	8004c22 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c20:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	685a      	ldr	r2, [r3, #4]
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004c30:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	685a      	ldr	r2, [r3, #4]
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c40:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	2200      	movs	r2, #0
 8004c46:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d003      	beq.n	8004c58 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8004c50:	6978      	ldr	r0, [r7, #20]
 8004c52:	f7fe fdc4 	bl	80037de <HAL_I2C_ErrorCallback>
}
 8004c56:	e01e      	b.n	8004c96 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	2220      	movs	r2, #32
 8004c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	2b40      	cmp	r3, #64	@ 0x40
 8004c6a:	d10a      	bne.n	8004c82 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	2200      	movs	r2, #0
 8004c78:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004c7a:	6978      	ldr	r0, [r7, #20]
 8004c7c:	f7fe fda5 	bl	80037ca <HAL_I2C_MemRxCpltCallback>
}
 8004c80:	e009      	b.n	8004c96 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	2212      	movs	r2, #18
 8004c8e:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004c90:	6978      	ldr	r0, [r7, #20]
 8004c92:	f7fc fb7b 	bl	800138c <HAL_I2C_MasterRxCpltCallback>
}
 8004c96:	bf00      	nop
 8004c98:	3718      	adds	r7, #24
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b084      	sub	sp, #16
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004caa:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d003      	beq.n	8004cbc <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cb8:	2200      	movs	r2, #0
 8004cba:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d003      	beq.n	8004ccc <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cc8:	2200      	movs	r2, #0
 8004cca:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f7fd fded 	bl	80028ac <HAL_DMA_GetError>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d01b      	beq.n	8004d10 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ce6:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2220      	movs	r2, #32
 8004cf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d02:	f043 0210 	orr.w	r2, r3, #16
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f7fe fd67 	bl	80037de <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004d10:	bf00      	nop
 8004d12:	3710      	adds	r7, #16
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b086      	sub	sp, #24
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d20:	2300      	movs	r3, #0
 8004d22:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d28:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d30:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004d32:	4b4b      	ldr	r3, [pc, #300]	@ (8004e60 <I2C_DMAAbort+0x148>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	08db      	lsrs	r3, r3, #3
 8004d38:	4a4a      	ldr	r2, [pc, #296]	@ (8004e64 <I2C_DMAAbort+0x14c>)
 8004d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d3e:	0a1a      	lsrs	r2, r3, #8
 8004d40:	4613      	mov	r3, r2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	4413      	add	r3, r2
 8004d46:	00da      	lsls	r2, r3, #3
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d106      	bne.n	8004d60 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d56:	f043 0220 	orr.w	r2, r3, #32
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004d5e:	e00a      	b.n	8004d76 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	3b01      	subs	r3, #1
 8004d64:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d74:	d0ea      	beq.n	8004d4c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d003      	beq.n	8004d86 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d82:	2200      	movs	r2, #0
 8004d84:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d003      	beq.n	8004d96 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d92:	2200      	movs	r2, #0
 8004d94:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004da4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	2200      	movs	r2, #0
 8004daa:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d003      	beq.n	8004dbc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004db8:	2200      	movs	r2, #0
 8004dba:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d003      	beq.n	8004dcc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dc8:	2200      	movs	r2, #0
 8004dca:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f022 0201 	bic.w	r2, r2, #1
 8004dda:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	2b60      	cmp	r3, #96	@ 0x60
 8004de6:	d10e      	bne.n	8004e06 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	2220      	movs	r2, #32
 8004dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004dfe:	6978      	ldr	r0, [r7, #20]
 8004e00:	f7fe fcf7 	bl	80037f2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004e04:	e027      	b.n	8004e56 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004e06:	7cfb      	ldrb	r3, [r7, #19]
 8004e08:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004e0c:	2b28      	cmp	r3, #40	@ 0x28
 8004e0e:	d117      	bne.n	8004e40 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f042 0201 	orr.w	r2, r2, #1
 8004e1e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004e2e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	2200      	movs	r2, #0
 8004e34:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	2228      	movs	r2, #40	@ 0x28
 8004e3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004e3e:	e007      	b.n	8004e50 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	2220      	movs	r2, #32
 8004e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004e50:	6978      	ldr	r0, [r7, #20]
 8004e52:	f7fe fcc4 	bl	80037de <HAL_I2C_ErrorCallback>
}
 8004e56:	bf00      	nop
 8004e58:	3718      	adds	r7, #24
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	2000002c 	.word	0x2000002c
 8004e64:	14f8b589 	.word	0x14f8b589

08004e68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	603b      	str	r3, [r7, #0]
 8004e74:	4613      	mov	r3, r2
 8004e76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e78:	e025      	b.n	8004ec6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e80:	d021      	beq.n	8004ec6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e82:	f7fd f8a1 	bl	8001fc8 <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	683a      	ldr	r2, [r7, #0]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d302      	bcc.n	8004e98 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d116      	bne.n	8004ec6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2220      	movs	r2, #32
 8004ea2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb2:	f043 0220 	orr.w	r2, r3, #32
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e023      	b.n	8004f0e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	0c1b      	lsrs	r3, r3, #16
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d10d      	bne.n	8004eec <I2C_WaitOnFlagUntilTimeout+0x84>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	43da      	mvns	r2, r3
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	4013      	ands	r3, r2
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	bf0c      	ite	eq
 8004ee2:	2301      	moveq	r3, #1
 8004ee4:	2300      	movne	r3, #0
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	461a      	mov	r2, r3
 8004eea:	e00c      	b.n	8004f06 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	43da      	mvns	r2, r3
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	bf0c      	ite	eq
 8004efe:	2301      	moveq	r3, #1
 8004f00:	2300      	movne	r3, #0
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	461a      	mov	r2, r3
 8004f06:	79fb      	ldrb	r3, [r7, #7]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d0b6      	beq.n	8004e7a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3710      	adds	r7, #16
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}

08004f16 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004f16:	b580      	push	{r7, lr}
 8004f18:	b084      	sub	sp, #16
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	60f8      	str	r0, [r7, #12]
 8004f1e:	60b9      	str	r1, [r7, #8]
 8004f20:	607a      	str	r2, [r7, #4]
 8004f22:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f24:	e051      	b.n	8004fca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	695b      	ldr	r3, [r3, #20]
 8004f2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f34:	d123      	bne.n	8004f7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f44:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004f4e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2220      	movs	r2, #32
 8004f5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f6a:	f043 0204 	orr.w	r2, r3, #4
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e046      	b.n	800500c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f84:	d021      	beq.n	8004fca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f86:	f7fd f81f 	bl	8001fc8 <HAL_GetTick>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d302      	bcc.n	8004f9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d116      	bne.n	8004fca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2220      	movs	r2, #32
 8004fa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb6:	f043 0220 	orr.w	r2, r3, #32
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e020      	b.n	800500c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	0c1b      	lsrs	r3, r3, #16
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d10c      	bne.n	8004fee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	43da      	mvns	r2, r3
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	4013      	ands	r3, r2
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	bf14      	ite	ne
 8004fe6:	2301      	movne	r3, #1
 8004fe8:	2300      	moveq	r3, #0
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	e00b      	b.n	8005006 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	43da      	mvns	r2, r3
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	bf14      	ite	ne
 8005000:	2301      	movne	r3, #1
 8005002:	2300      	moveq	r3, #0
 8005004:	b2db      	uxtb	r3, r3
 8005006:	2b00      	cmp	r3, #0
 8005008:	d18d      	bne.n	8004f26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005020:	e02d      	b.n	800507e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f000 f8aa 	bl	800517c <I2C_IsAcknowledgeFailed>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d001      	beq.n	8005032 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e02d      	b.n	800508e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005038:	d021      	beq.n	800507e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800503a:	f7fc ffc5 	bl	8001fc8 <HAL_GetTick>
 800503e:	4602      	mov	r2, r0
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	68ba      	ldr	r2, [r7, #8]
 8005046:	429a      	cmp	r2, r3
 8005048:	d302      	bcc.n	8005050 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d116      	bne.n	800507e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2200      	movs	r2, #0
 8005054:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2220      	movs	r2, #32
 800505a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800506a:	f043 0220 	orr.w	r2, r3, #32
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e007      	b.n	800508e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	695b      	ldr	r3, [r3, #20]
 8005084:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005088:	2b80      	cmp	r3, #128	@ 0x80
 800508a:	d1ca      	bne.n	8005022 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}

08005096 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005096:	b580      	push	{r7, lr}
 8005098:	b084      	sub	sp, #16
 800509a:	af00      	add	r7, sp, #0
 800509c:	60f8      	str	r0, [r7, #12]
 800509e:	60b9      	str	r1, [r7, #8]
 80050a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80050a2:	e02d      	b.n	8005100 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050a4:	68f8      	ldr	r0, [r7, #12]
 80050a6:	f000 f869 	bl	800517c <I2C_IsAcknowledgeFailed>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d001      	beq.n	80050b4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e02d      	b.n	8005110 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ba:	d021      	beq.n	8005100 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050bc:	f7fc ff84 	bl	8001fc8 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	68ba      	ldr	r2, [r7, #8]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d302      	bcc.n	80050d2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d116      	bne.n	8005100 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2220      	movs	r2, #32
 80050dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ec:	f043 0220 	orr.w	r2, r3, #32
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e007      	b.n	8005110 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	f003 0304 	and.w	r3, r3, #4
 800510a:	2b04      	cmp	r3, #4
 800510c:	d1ca      	bne.n	80050a4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3710      	adds	r7, #16
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005118:	b480      	push	{r7}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005120:	2300      	movs	r3, #0
 8005122:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005124:	4b13      	ldr	r3, [pc, #76]	@ (8005174 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	08db      	lsrs	r3, r3, #3
 800512a:	4a13      	ldr	r2, [pc, #76]	@ (8005178 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800512c:	fba2 2303 	umull	r2, r3, r2, r3
 8005130:	0a1a      	lsrs	r2, r3, #8
 8005132:	4613      	mov	r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	4413      	add	r3, r2
 8005138:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	3b01      	subs	r3, #1
 800513e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d107      	bne.n	8005156 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800514a:	f043 0220 	orr.w	r2, r3, #32
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e008      	b.n	8005168 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005160:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005164:	d0e9      	beq.n	800513a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	3714      	adds	r7, #20
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr
 8005174:	2000002c 	.word	0x2000002c
 8005178:	14f8b589 	.word	0x14f8b589

0800517c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800518e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005192:	d11b      	bne.n	80051cc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800519c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2220      	movs	r2, #32
 80051a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b8:	f043 0204 	orr.w	r2, r3, #4
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e000      	b.n	80051ce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	370c      	adds	r7, #12
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr

080051da <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80051da:	b480      	push	{r7}
 80051dc:	b083      	sub	sp, #12
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e6:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80051ea:	d103      	bne.n	80051f4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80051f2:	e007      	b.n	8005204 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f8:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80051fc:	d102      	bne.n	8005204 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2208      	movs	r2, #8
 8005202:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005204:	bf00      	nop
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b086      	sub	sp, #24
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e267      	b.n	80056f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0301 	and.w	r3, r3, #1
 800522a:	2b00      	cmp	r3, #0
 800522c:	d075      	beq.n	800531a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800522e:	4b88      	ldr	r3, [pc, #544]	@ (8005450 <HAL_RCC_OscConfig+0x240>)
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f003 030c 	and.w	r3, r3, #12
 8005236:	2b04      	cmp	r3, #4
 8005238:	d00c      	beq.n	8005254 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800523a:	4b85      	ldr	r3, [pc, #532]	@ (8005450 <HAL_RCC_OscConfig+0x240>)
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005242:	2b08      	cmp	r3, #8
 8005244:	d112      	bne.n	800526c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005246:	4b82      	ldr	r3, [pc, #520]	@ (8005450 <HAL_RCC_OscConfig+0x240>)
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800524e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005252:	d10b      	bne.n	800526c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005254:	4b7e      	ldr	r3, [pc, #504]	@ (8005450 <HAL_RCC_OscConfig+0x240>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d05b      	beq.n	8005318 <HAL_RCC_OscConfig+0x108>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d157      	bne.n	8005318 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e242      	b.n	80056f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005274:	d106      	bne.n	8005284 <HAL_RCC_OscConfig+0x74>
 8005276:	4b76      	ldr	r3, [pc, #472]	@ (8005450 <HAL_RCC_OscConfig+0x240>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a75      	ldr	r2, [pc, #468]	@ (8005450 <HAL_RCC_OscConfig+0x240>)
 800527c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005280:	6013      	str	r3, [r2, #0]
 8005282:	e01d      	b.n	80052c0 <HAL_RCC_OscConfig+0xb0>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800528c:	d10c      	bne.n	80052a8 <HAL_RCC_OscConfig+0x98>
 800528e:	4b70      	ldr	r3, [pc, #448]	@ (8005450 <HAL_RCC_OscConfig+0x240>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a6f      	ldr	r2, [pc, #444]	@ (8005450 <HAL_RCC_OscConfig+0x240>)
 8005294:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005298:	6013      	str	r3, [r2, #0]
 800529a:	4b6d      	ldr	r3, [pc, #436]	@ (8005450 <HAL_RCC_OscConfig+0x240>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a6c      	ldr	r2, [pc, #432]	@ (8005450 <HAL_RCC_OscConfig+0x240>)
 80052a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052a4:	6013      	str	r3, [r2, #0]
 80052a6:	e00b      	b.n	80052c0 <HAL_RCC_OscConfig+0xb0>
 80052a8:	4b69      	ldr	r3, [pc, #420]	@ (8005450 <HAL_RCC_OscConfig+0x240>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a68      	ldr	r2, [pc, #416]	@ (8005450 <HAL_RCC_OscConfig+0x240>)
 80052ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052b2:	6013      	str	r3, [r2, #0]
 80052b4:	4b66      	ldr	r3, [pc, #408]	@ (8005450 <HAL_RCC_OscConfig+0x240>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a65      	ldr	r2, [pc, #404]	@ (8005450 <HAL_RCC_OscConfig+0x240>)
 80052ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d013      	beq.n	80052f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052c8:	f7fc fe7e 	bl	8001fc8 <HAL_GetTick>
 80052cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ce:	e008      	b.n	80052e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052d0:	f7fc fe7a 	bl	8001fc8 <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	2b64      	cmp	r3, #100	@ 0x64
 80052dc:	d901      	bls.n	80052e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e207      	b.n	80056f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052e2:	4b5b      	ldr	r3, [pc, #364]	@ (8005450 <HAL_RCC_OscConfig+0x240>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d0f0      	beq.n	80052d0 <HAL_RCC_OscConfig+0xc0>
 80052ee:	e014      	b.n	800531a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052f0:	f7fc fe6a 	bl	8001fc8 <HAL_GetTick>
 80052f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052f6:	e008      	b.n	800530a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052f8:	f7fc fe66 	bl	8001fc8 <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	2b64      	cmp	r3, #100	@ 0x64
 8005304:	d901      	bls.n	800530a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e1f3      	b.n	80056f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800530a:	4b51      	ldr	r3, [pc, #324]	@ (8005450 <HAL_RCC_OscConfig+0x240>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1f0      	bne.n	80052f8 <HAL_RCC_OscConfig+0xe8>
 8005316:	e000      	b.n	800531a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005318:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0302 	and.w	r3, r3, #2
 8005322:	2b00      	cmp	r3, #0
 8005324:	d063      	beq.n	80053ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005326:	4b4a      	ldr	r3, [pc, #296]	@ (8005450 <HAL_RCC_OscConfig+0x240>)
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f003 030c 	and.w	r3, r3, #12
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00b      	beq.n	800534a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005332:	4b47      	ldr	r3, [pc, #284]	@ (8005450 <HAL_RCC_OscConfig+0x240>)
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800533a:	2b08      	cmp	r3, #8
 800533c:	d11c      	bne.n	8005378 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800533e:	4b44      	ldr	r3, [pc, #272]	@ (8005450 <HAL_RCC_OscConfig+0x240>)
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d116      	bne.n	8005378 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800534a:	4b41      	ldr	r3, [pc, #260]	@ (8005450 <HAL_RCC_OscConfig+0x240>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0302 	and.w	r3, r3, #2
 8005352:	2b00      	cmp	r3, #0
 8005354:	d005      	beq.n	8005362 <HAL_RCC_OscConfig+0x152>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d001      	beq.n	8005362 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e1c7      	b.n	80056f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005362:	4b3b      	ldr	r3, [pc, #236]	@ (8005450 <HAL_RCC_OscConfig+0x240>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	00db      	lsls	r3, r3, #3
 8005370:	4937      	ldr	r1, [pc, #220]	@ (8005450 <HAL_RCC_OscConfig+0x240>)
 8005372:	4313      	orrs	r3, r2
 8005374:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005376:	e03a      	b.n	80053ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d020      	beq.n	80053c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005380:	4b34      	ldr	r3, [pc, #208]	@ (8005454 <HAL_RCC_OscConfig+0x244>)
 8005382:	2201      	movs	r2, #1
 8005384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005386:	f7fc fe1f 	bl	8001fc8 <HAL_GetTick>
 800538a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800538c:	e008      	b.n	80053a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800538e:	f7fc fe1b 	bl	8001fc8 <HAL_GetTick>
 8005392:	4602      	mov	r2, r0
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	2b02      	cmp	r3, #2
 800539a:	d901      	bls.n	80053a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	e1a8      	b.n	80056f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053a0:	4b2b      	ldr	r3, [pc, #172]	@ (8005450 <HAL_RCC_OscConfig+0x240>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0302 	and.w	r3, r3, #2
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d0f0      	beq.n	800538e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053ac:	4b28      	ldr	r3, [pc, #160]	@ (8005450 <HAL_RCC_OscConfig+0x240>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	00db      	lsls	r3, r3, #3
 80053ba:	4925      	ldr	r1, [pc, #148]	@ (8005450 <HAL_RCC_OscConfig+0x240>)
 80053bc:	4313      	orrs	r3, r2
 80053be:	600b      	str	r3, [r1, #0]
 80053c0:	e015      	b.n	80053ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053c2:	4b24      	ldr	r3, [pc, #144]	@ (8005454 <HAL_RCC_OscConfig+0x244>)
 80053c4:	2200      	movs	r2, #0
 80053c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053c8:	f7fc fdfe 	bl	8001fc8 <HAL_GetTick>
 80053cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053ce:	e008      	b.n	80053e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053d0:	f7fc fdfa 	bl	8001fc8 <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d901      	bls.n	80053e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e187      	b.n	80056f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053e2:	4b1b      	ldr	r3, [pc, #108]	@ (8005450 <HAL_RCC_OscConfig+0x240>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0302 	and.w	r3, r3, #2
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d1f0      	bne.n	80053d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0308 	and.w	r3, r3, #8
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d036      	beq.n	8005468 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	695b      	ldr	r3, [r3, #20]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d016      	beq.n	8005430 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005402:	4b15      	ldr	r3, [pc, #84]	@ (8005458 <HAL_RCC_OscConfig+0x248>)
 8005404:	2201      	movs	r2, #1
 8005406:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005408:	f7fc fdde 	bl	8001fc8 <HAL_GetTick>
 800540c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800540e:	e008      	b.n	8005422 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005410:	f7fc fdda 	bl	8001fc8 <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	2b02      	cmp	r3, #2
 800541c:	d901      	bls.n	8005422 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	e167      	b.n	80056f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005422:	4b0b      	ldr	r3, [pc, #44]	@ (8005450 <HAL_RCC_OscConfig+0x240>)
 8005424:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005426:	f003 0302 	and.w	r3, r3, #2
 800542a:	2b00      	cmp	r3, #0
 800542c:	d0f0      	beq.n	8005410 <HAL_RCC_OscConfig+0x200>
 800542e:	e01b      	b.n	8005468 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005430:	4b09      	ldr	r3, [pc, #36]	@ (8005458 <HAL_RCC_OscConfig+0x248>)
 8005432:	2200      	movs	r2, #0
 8005434:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005436:	f7fc fdc7 	bl	8001fc8 <HAL_GetTick>
 800543a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800543c:	e00e      	b.n	800545c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800543e:	f7fc fdc3 	bl	8001fc8 <HAL_GetTick>
 8005442:	4602      	mov	r2, r0
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	2b02      	cmp	r3, #2
 800544a:	d907      	bls.n	800545c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	e150      	b.n	80056f2 <HAL_RCC_OscConfig+0x4e2>
 8005450:	40023800 	.word	0x40023800
 8005454:	42470000 	.word	0x42470000
 8005458:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800545c:	4b88      	ldr	r3, [pc, #544]	@ (8005680 <HAL_RCC_OscConfig+0x470>)
 800545e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005460:	f003 0302 	and.w	r3, r3, #2
 8005464:	2b00      	cmp	r3, #0
 8005466:	d1ea      	bne.n	800543e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0304 	and.w	r3, r3, #4
 8005470:	2b00      	cmp	r3, #0
 8005472:	f000 8097 	beq.w	80055a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005476:	2300      	movs	r3, #0
 8005478:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800547a:	4b81      	ldr	r3, [pc, #516]	@ (8005680 <HAL_RCC_OscConfig+0x470>)
 800547c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800547e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d10f      	bne.n	80054a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005486:	2300      	movs	r3, #0
 8005488:	60bb      	str	r3, [r7, #8]
 800548a:	4b7d      	ldr	r3, [pc, #500]	@ (8005680 <HAL_RCC_OscConfig+0x470>)
 800548c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800548e:	4a7c      	ldr	r2, [pc, #496]	@ (8005680 <HAL_RCC_OscConfig+0x470>)
 8005490:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005494:	6413      	str	r3, [r2, #64]	@ 0x40
 8005496:	4b7a      	ldr	r3, [pc, #488]	@ (8005680 <HAL_RCC_OscConfig+0x470>)
 8005498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800549a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800549e:	60bb      	str	r3, [r7, #8]
 80054a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054a2:	2301      	movs	r3, #1
 80054a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054a6:	4b77      	ldr	r3, [pc, #476]	@ (8005684 <HAL_RCC_OscConfig+0x474>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d118      	bne.n	80054e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054b2:	4b74      	ldr	r3, [pc, #464]	@ (8005684 <HAL_RCC_OscConfig+0x474>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a73      	ldr	r2, [pc, #460]	@ (8005684 <HAL_RCC_OscConfig+0x474>)
 80054b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054be:	f7fc fd83 	bl	8001fc8 <HAL_GetTick>
 80054c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054c4:	e008      	b.n	80054d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054c6:	f7fc fd7f 	bl	8001fc8 <HAL_GetTick>
 80054ca:	4602      	mov	r2, r0
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	d901      	bls.n	80054d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80054d4:	2303      	movs	r3, #3
 80054d6:	e10c      	b.n	80056f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054d8:	4b6a      	ldr	r3, [pc, #424]	@ (8005684 <HAL_RCC_OscConfig+0x474>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d0f0      	beq.n	80054c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d106      	bne.n	80054fa <HAL_RCC_OscConfig+0x2ea>
 80054ec:	4b64      	ldr	r3, [pc, #400]	@ (8005680 <HAL_RCC_OscConfig+0x470>)
 80054ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054f0:	4a63      	ldr	r2, [pc, #396]	@ (8005680 <HAL_RCC_OscConfig+0x470>)
 80054f2:	f043 0301 	orr.w	r3, r3, #1
 80054f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80054f8:	e01c      	b.n	8005534 <HAL_RCC_OscConfig+0x324>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	2b05      	cmp	r3, #5
 8005500:	d10c      	bne.n	800551c <HAL_RCC_OscConfig+0x30c>
 8005502:	4b5f      	ldr	r3, [pc, #380]	@ (8005680 <HAL_RCC_OscConfig+0x470>)
 8005504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005506:	4a5e      	ldr	r2, [pc, #376]	@ (8005680 <HAL_RCC_OscConfig+0x470>)
 8005508:	f043 0304 	orr.w	r3, r3, #4
 800550c:	6713      	str	r3, [r2, #112]	@ 0x70
 800550e:	4b5c      	ldr	r3, [pc, #368]	@ (8005680 <HAL_RCC_OscConfig+0x470>)
 8005510:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005512:	4a5b      	ldr	r2, [pc, #364]	@ (8005680 <HAL_RCC_OscConfig+0x470>)
 8005514:	f043 0301 	orr.w	r3, r3, #1
 8005518:	6713      	str	r3, [r2, #112]	@ 0x70
 800551a:	e00b      	b.n	8005534 <HAL_RCC_OscConfig+0x324>
 800551c:	4b58      	ldr	r3, [pc, #352]	@ (8005680 <HAL_RCC_OscConfig+0x470>)
 800551e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005520:	4a57      	ldr	r2, [pc, #348]	@ (8005680 <HAL_RCC_OscConfig+0x470>)
 8005522:	f023 0301 	bic.w	r3, r3, #1
 8005526:	6713      	str	r3, [r2, #112]	@ 0x70
 8005528:	4b55      	ldr	r3, [pc, #340]	@ (8005680 <HAL_RCC_OscConfig+0x470>)
 800552a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800552c:	4a54      	ldr	r2, [pc, #336]	@ (8005680 <HAL_RCC_OscConfig+0x470>)
 800552e:	f023 0304 	bic.w	r3, r3, #4
 8005532:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d015      	beq.n	8005568 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800553c:	f7fc fd44 	bl	8001fc8 <HAL_GetTick>
 8005540:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005542:	e00a      	b.n	800555a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005544:	f7fc fd40 	bl	8001fc8 <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005552:	4293      	cmp	r3, r2
 8005554:	d901      	bls.n	800555a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e0cb      	b.n	80056f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800555a:	4b49      	ldr	r3, [pc, #292]	@ (8005680 <HAL_RCC_OscConfig+0x470>)
 800555c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800555e:	f003 0302 	and.w	r3, r3, #2
 8005562:	2b00      	cmp	r3, #0
 8005564:	d0ee      	beq.n	8005544 <HAL_RCC_OscConfig+0x334>
 8005566:	e014      	b.n	8005592 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005568:	f7fc fd2e 	bl	8001fc8 <HAL_GetTick>
 800556c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800556e:	e00a      	b.n	8005586 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005570:	f7fc fd2a 	bl	8001fc8 <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800557e:	4293      	cmp	r3, r2
 8005580:	d901      	bls.n	8005586 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e0b5      	b.n	80056f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005586:	4b3e      	ldr	r3, [pc, #248]	@ (8005680 <HAL_RCC_OscConfig+0x470>)
 8005588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800558a:	f003 0302 	and.w	r3, r3, #2
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1ee      	bne.n	8005570 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005592:	7dfb      	ldrb	r3, [r7, #23]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d105      	bne.n	80055a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005598:	4b39      	ldr	r3, [pc, #228]	@ (8005680 <HAL_RCC_OscConfig+0x470>)
 800559a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800559c:	4a38      	ldr	r2, [pc, #224]	@ (8005680 <HAL_RCC_OscConfig+0x470>)
 800559e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055a2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	f000 80a1 	beq.w	80056f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055ae:	4b34      	ldr	r3, [pc, #208]	@ (8005680 <HAL_RCC_OscConfig+0x470>)
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f003 030c 	and.w	r3, r3, #12
 80055b6:	2b08      	cmp	r3, #8
 80055b8:	d05c      	beq.n	8005674 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	699b      	ldr	r3, [r3, #24]
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d141      	bne.n	8005646 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055c2:	4b31      	ldr	r3, [pc, #196]	@ (8005688 <HAL_RCC_OscConfig+0x478>)
 80055c4:	2200      	movs	r2, #0
 80055c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055c8:	f7fc fcfe 	bl	8001fc8 <HAL_GetTick>
 80055cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055ce:	e008      	b.n	80055e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055d0:	f7fc fcfa 	bl	8001fc8 <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d901      	bls.n	80055e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e087      	b.n	80056f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055e2:	4b27      	ldr	r3, [pc, #156]	@ (8005680 <HAL_RCC_OscConfig+0x470>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1f0      	bne.n	80055d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	69da      	ldr	r2, [r3, #28]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a1b      	ldr	r3, [r3, #32]
 80055f6:	431a      	orrs	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055fc:	019b      	lsls	r3, r3, #6
 80055fe:	431a      	orrs	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005604:	085b      	lsrs	r3, r3, #1
 8005606:	3b01      	subs	r3, #1
 8005608:	041b      	lsls	r3, r3, #16
 800560a:	431a      	orrs	r2, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005610:	061b      	lsls	r3, r3, #24
 8005612:	491b      	ldr	r1, [pc, #108]	@ (8005680 <HAL_RCC_OscConfig+0x470>)
 8005614:	4313      	orrs	r3, r2
 8005616:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005618:	4b1b      	ldr	r3, [pc, #108]	@ (8005688 <HAL_RCC_OscConfig+0x478>)
 800561a:	2201      	movs	r2, #1
 800561c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800561e:	f7fc fcd3 	bl	8001fc8 <HAL_GetTick>
 8005622:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005624:	e008      	b.n	8005638 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005626:	f7fc fccf 	bl	8001fc8 <HAL_GetTick>
 800562a:	4602      	mov	r2, r0
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	2b02      	cmp	r3, #2
 8005632:	d901      	bls.n	8005638 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005634:	2303      	movs	r3, #3
 8005636:	e05c      	b.n	80056f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005638:	4b11      	ldr	r3, [pc, #68]	@ (8005680 <HAL_RCC_OscConfig+0x470>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005640:	2b00      	cmp	r3, #0
 8005642:	d0f0      	beq.n	8005626 <HAL_RCC_OscConfig+0x416>
 8005644:	e054      	b.n	80056f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005646:	4b10      	ldr	r3, [pc, #64]	@ (8005688 <HAL_RCC_OscConfig+0x478>)
 8005648:	2200      	movs	r2, #0
 800564a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800564c:	f7fc fcbc 	bl	8001fc8 <HAL_GetTick>
 8005650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005652:	e008      	b.n	8005666 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005654:	f7fc fcb8 	bl	8001fc8 <HAL_GetTick>
 8005658:	4602      	mov	r2, r0
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	2b02      	cmp	r3, #2
 8005660:	d901      	bls.n	8005666 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e045      	b.n	80056f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005666:	4b06      	ldr	r3, [pc, #24]	@ (8005680 <HAL_RCC_OscConfig+0x470>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800566e:	2b00      	cmp	r3, #0
 8005670:	d1f0      	bne.n	8005654 <HAL_RCC_OscConfig+0x444>
 8005672:	e03d      	b.n	80056f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	2b01      	cmp	r3, #1
 800567a:	d107      	bne.n	800568c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e038      	b.n	80056f2 <HAL_RCC_OscConfig+0x4e2>
 8005680:	40023800 	.word	0x40023800
 8005684:	40007000 	.word	0x40007000
 8005688:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800568c:	4b1b      	ldr	r3, [pc, #108]	@ (80056fc <HAL_RCC_OscConfig+0x4ec>)
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	2b01      	cmp	r3, #1
 8005698:	d028      	beq.n	80056ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d121      	bne.n	80056ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d11a      	bne.n	80056ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80056bc:	4013      	ands	r3, r2
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80056c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d111      	bne.n	80056ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d2:	085b      	lsrs	r3, r3, #1
 80056d4:	3b01      	subs	r3, #1
 80056d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056d8:	429a      	cmp	r2, r3
 80056da:	d107      	bne.n	80056ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d001      	beq.n	80056f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e000      	b.n	80056f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3718      	adds	r7, #24
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	40023800 	.word	0x40023800

08005700 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d101      	bne.n	8005714 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e0cc      	b.n	80058ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005714:	4b68      	ldr	r3, [pc, #416]	@ (80058b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0307 	and.w	r3, r3, #7
 800571c:	683a      	ldr	r2, [r7, #0]
 800571e:	429a      	cmp	r2, r3
 8005720:	d90c      	bls.n	800573c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005722:	4b65      	ldr	r3, [pc, #404]	@ (80058b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005724:	683a      	ldr	r2, [r7, #0]
 8005726:	b2d2      	uxtb	r2, r2
 8005728:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800572a:	4b63      	ldr	r3, [pc, #396]	@ (80058b8 <HAL_RCC_ClockConfig+0x1b8>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0307 	and.w	r3, r3, #7
 8005732:	683a      	ldr	r2, [r7, #0]
 8005734:	429a      	cmp	r2, r3
 8005736:	d001      	beq.n	800573c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e0b8      	b.n	80058ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0302 	and.w	r3, r3, #2
 8005744:	2b00      	cmp	r3, #0
 8005746:	d020      	beq.n	800578a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0304 	and.w	r3, r3, #4
 8005750:	2b00      	cmp	r3, #0
 8005752:	d005      	beq.n	8005760 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005754:	4b59      	ldr	r3, [pc, #356]	@ (80058bc <HAL_RCC_ClockConfig+0x1bc>)
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	4a58      	ldr	r2, [pc, #352]	@ (80058bc <HAL_RCC_ClockConfig+0x1bc>)
 800575a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800575e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 0308 	and.w	r3, r3, #8
 8005768:	2b00      	cmp	r3, #0
 800576a:	d005      	beq.n	8005778 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800576c:	4b53      	ldr	r3, [pc, #332]	@ (80058bc <HAL_RCC_ClockConfig+0x1bc>)
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	4a52      	ldr	r2, [pc, #328]	@ (80058bc <HAL_RCC_ClockConfig+0x1bc>)
 8005772:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005776:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005778:	4b50      	ldr	r3, [pc, #320]	@ (80058bc <HAL_RCC_ClockConfig+0x1bc>)
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	494d      	ldr	r1, [pc, #308]	@ (80058bc <HAL_RCC_ClockConfig+0x1bc>)
 8005786:	4313      	orrs	r3, r2
 8005788:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0301 	and.w	r3, r3, #1
 8005792:	2b00      	cmp	r3, #0
 8005794:	d044      	beq.n	8005820 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d107      	bne.n	80057ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800579e:	4b47      	ldr	r3, [pc, #284]	@ (80058bc <HAL_RCC_ClockConfig+0x1bc>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d119      	bne.n	80057de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e07f      	b.n	80058ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d003      	beq.n	80057be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057ba:	2b03      	cmp	r3, #3
 80057bc:	d107      	bne.n	80057ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057be:	4b3f      	ldr	r3, [pc, #252]	@ (80058bc <HAL_RCC_ClockConfig+0x1bc>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d109      	bne.n	80057de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e06f      	b.n	80058ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057ce:	4b3b      	ldr	r3, [pc, #236]	@ (80058bc <HAL_RCC_ClockConfig+0x1bc>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0302 	and.w	r3, r3, #2
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d101      	bne.n	80057de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e067      	b.n	80058ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057de:	4b37      	ldr	r3, [pc, #220]	@ (80058bc <HAL_RCC_ClockConfig+0x1bc>)
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	f023 0203 	bic.w	r2, r3, #3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	4934      	ldr	r1, [pc, #208]	@ (80058bc <HAL_RCC_ClockConfig+0x1bc>)
 80057ec:	4313      	orrs	r3, r2
 80057ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057f0:	f7fc fbea 	bl	8001fc8 <HAL_GetTick>
 80057f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057f6:	e00a      	b.n	800580e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057f8:	f7fc fbe6 	bl	8001fc8 <HAL_GetTick>
 80057fc:	4602      	mov	r2, r0
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005806:	4293      	cmp	r3, r2
 8005808:	d901      	bls.n	800580e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e04f      	b.n	80058ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800580e:	4b2b      	ldr	r3, [pc, #172]	@ (80058bc <HAL_RCC_ClockConfig+0x1bc>)
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	f003 020c 	and.w	r2, r3, #12
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	429a      	cmp	r2, r3
 800581e:	d1eb      	bne.n	80057f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005820:	4b25      	ldr	r3, [pc, #148]	@ (80058b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 0307 	and.w	r3, r3, #7
 8005828:	683a      	ldr	r2, [r7, #0]
 800582a:	429a      	cmp	r2, r3
 800582c:	d20c      	bcs.n	8005848 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800582e:	4b22      	ldr	r3, [pc, #136]	@ (80058b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005830:	683a      	ldr	r2, [r7, #0]
 8005832:	b2d2      	uxtb	r2, r2
 8005834:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005836:	4b20      	ldr	r3, [pc, #128]	@ (80058b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0307 	and.w	r3, r3, #7
 800583e:	683a      	ldr	r2, [r7, #0]
 8005840:	429a      	cmp	r2, r3
 8005842:	d001      	beq.n	8005848 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e032      	b.n	80058ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 0304 	and.w	r3, r3, #4
 8005850:	2b00      	cmp	r3, #0
 8005852:	d008      	beq.n	8005866 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005854:	4b19      	ldr	r3, [pc, #100]	@ (80058bc <HAL_RCC_ClockConfig+0x1bc>)
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	4916      	ldr	r1, [pc, #88]	@ (80058bc <HAL_RCC_ClockConfig+0x1bc>)
 8005862:	4313      	orrs	r3, r2
 8005864:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0308 	and.w	r3, r3, #8
 800586e:	2b00      	cmp	r3, #0
 8005870:	d009      	beq.n	8005886 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005872:	4b12      	ldr	r3, [pc, #72]	@ (80058bc <HAL_RCC_ClockConfig+0x1bc>)
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	00db      	lsls	r3, r3, #3
 8005880:	490e      	ldr	r1, [pc, #56]	@ (80058bc <HAL_RCC_ClockConfig+0x1bc>)
 8005882:	4313      	orrs	r3, r2
 8005884:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005886:	f000 f821 	bl	80058cc <HAL_RCC_GetSysClockFreq>
 800588a:	4602      	mov	r2, r0
 800588c:	4b0b      	ldr	r3, [pc, #44]	@ (80058bc <HAL_RCC_ClockConfig+0x1bc>)
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	091b      	lsrs	r3, r3, #4
 8005892:	f003 030f 	and.w	r3, r3, #15
 8005896:	490a      	ldr	r1, [pc, #40]	@ (80058c0 <HAL_RCC_ClockConfig+0x1c0>)
 8005898:	5ccb      	ldrb	r3, [r1, r3]
 800589a:	fa22 f303 	lsr.w	r3, r2, r3
 800589e:	4a09      	ldr	r2, [pc, #36]	@ (80058c4 <HAL_RCC_ClockConfig+0x1c4>)
 80058a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80058a2:	4b09      	ldr	r3, [pc, #36]	@ (80058c8 <HAL_RCC_ClockConfig+0x1c8>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4618      	mov	r0, r3
 80058a8:	f7fc fb4a 	bl	8001f40 <HAL_InitTick>

  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3710      	adds	r7, #16
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	40023c00 	.word	0x40023c00
 80058bc:	40023800 	.word	0x40023800
 80058c0:	0800a3d0 	.word	0x0800a3d0
 80058c4:	2000002c 	.word	0x2000002c
 80058c8:	20000030 	.word	0x20000030

080058cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058d0:	b094      	sub	sp, #80	@ 0x50
 80058d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80058d4:	2300      	movs	r3, #0
 80058d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80058d8:	2300      	movs	r3, #0
 80058da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058dc:	2300      	movs	r3, #0
 80058de:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80058e0:	2300      	movs	r3, #0
 80058e2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058e4:	4b79      	ldr	r3, [pc, #484]	@ (8005acc <HAL_RCC_GetSysClockFreq+0x200>)
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f003 030c 	and.w	r3, r3, #12
 80058ec:	2b08      	cmp	r3, #8
 80058ee:	d00d      	beq.n	800590c <HAL_RCC_GetSysClockFreq+0x40>
 80058f0:	2b08      	cmp	r3, #8
 80058f2:	f200 80e1 	bhi.w	8005ab8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d002      	beq.n	8005900 <HAL_RCC_GetSysClockFreq+0x34>
 80058fa:	2b04      	cmp	r3, #4
 80058fc:	d003      	beq.n	8005906 <HAL_RCC_GetSysClockFreq+0x3a>
 80058fe:	e0db      	b.n	8005ab8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005900:	4b73      	ldr	r3, [pc, #460]	@ (8005ad0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005902:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005904:	e0db      	b.n	8005abe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005906:	4b73      	ldr	r3, [pc, #460]	@ (8005ad4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005908:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800590a:	e0d8      	b.n	8005abe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800590c:	4b6f      	ldr	r3, [pc, #444]	@ (8005acc <HAL_RCC_GetSysClockFreq+0x200>)
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005914:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005916:	4b6d      	ldr	r3, [pc, #436]	@ (8005acc <HAL_RCC_GetSysClockFreq+0x200>)
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d063      	beq.n	80059ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005922:	4b6a      	ldr	r3, [pc, #424]	@ (8005acc <HAL_RCC_GetSysClockFreq+0x200>)
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	099b      	lsrs	r3, r3, #6
 8005928:	2200      	movs	r2, #0
 800592a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800592c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800592e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005930:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005934:	633b      	str	r3, [r7, #48]	@ 0x30
 8005936:	2300      	movs	r3, #0
 8005938:	637b      	str	r3, [r7, #52]	@ 0x34
 800593a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800593e:	4622      	mov	r2, r4
 8005940:	462b      	mov	r3, r5
 8005942:	f04f 0000 	mov.w	r0, #0
 8005946:	f04f 0100 	mov.w	r1, #0
 800594a:	0159      	lsls	r1, r3, #5
 800594c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005950:	0150      	lsls	r0, r2, #5
 8005952:	4602      	mov	r2, r0
 8005954:	460b      	mov	r3, r1
 8005956:	4621      	mov	r1, r4
 8005958:	1a51      	subs	r1, r2, r1
 800595a:	6139      	str	r1, [r7, #16]
 800595c:	4629      	mov	r1, r5
 800595e:	eb63 0301 	sbc.w	r3, r3, r1
 8005962:	617b      	str	r3, [r7, #20]
 8005964:	f04f 0200 	mov.w	r2, #0
 8005968:	f04f 0300 	mov.w	r3, #0
 800596c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005970:	4659      	mov	r1, fp
 8005972:	018b      	lsls	r3, r1, #6
 8005974:	4651      	mov	r1, sl
 8005976:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800597a:	4651      	mov	r1, sl
 800597c:	018a      	lsls	r2, r1, #6
 800597e:	4651      	mov	r1, sl
 8005980:	ebb2 0801 	subs.w	r8, r2, r1
 8005984:	4659      	mov	r1, fp
 8005986:	eb63 0901 	sbc.w	r9, r3, r1
 800598a:	f04f 0200 	mov.w	r2, #0
 800598e:	f04f 0300 	mov.w	r3, #0
 8005992:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005996:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800599a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800599e:	4690      	mov	r8, r2
 80059a0:	4699      	mov	r9, r3
 80059a2:	4623      	mov	r3, r4
 80059a4:	eb18 0303 	adds.w	r3, r8, r3
 80059a8:	60bb      	str	r3, [r7, #8]
 80059aa:	462b      	mov	r3, r5
 80059ac:	eb49 0303 	adc.w	r3, r9, r3
 80059b0:	60fb      	str	r3, [r7, #12]
 80059b2:	f04f 0200 	mov.w	r2, #0
 80059b6:	f04f 0300 	mov.w	r3, #0
 80059ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80059be:	4629      	mov	r1, r5
 80059c0:	024b      	lsls	r3, r1, #9
 80059c2:	4621      	mov	r1, r4
 80059c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80059c8:	4621      	mov	r1, r4
 80059ca:	024a      	lsls	r2, r1, #9
 80059cc:	4610      	mov	r0, r2
 80059ce:	4619      	mov	r1, r3
 80059d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059d2:	2200      	movs	r2, #0
 80059d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80059d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80059dc:	f7fb f93c 	bl	8000c58 <__aeabi_uldivmod>
 80059e0:	4602      	mov	r2, r0
 80059e2:	460b      	mov	r3, r1
 80059e4:	4613      	mov	r3, r2
 80059e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059e8:	e058      	b.n	8005a9c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059ea:	4b38      	ldr	r3, [pc, #224]	@ (8005acc <HAL_RCC_GetSysClockFreq+0x200>)
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	099b      	lsrs	r3, r3, #6
 80059f0:	2200      	movs	r2, #0
 80059f2:	4618      	mov	r0, r3
 80059f4:	4611      	mov	r1, r2
 80059f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80059fa:	623b      	str	r3, [r7, #32]
 80059fc:	2300      	movs	r3, #0
 80059fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005a04:	4642      	mov	r2, r8
 8005a06:	464b      	mov	r3, r9
 8005a08:	f04f 0000 	mov.w	r0, #0
 8005a0c:	f04f 0100 	mov.w	r1, #0
 8005a10:	0159      	lsls	r1, r3, #5
 8005a12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a16:	0150      	lsls	r0, r2, #5
 8005a18:	4602      	mov	r2, r0
 8005a1a:	460b      	mov	r3, r1
 8005a1c:	4641      	mov	r1, r8
 8005a1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005a22:	4649      	mov	r1, r9
 8005a24:	eb63 0b01 	sbc.w	fp, r3, r1
 8005a28:	f04f 0200 	mov.w	r2, #0
 8005a2c:	f04f 0300 	mov.w	r3, #0
 8005a30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005a34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005a38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005a3c:	ebb2 040a 	subs.w	r4, r2, sl
 8005a40:	eb63 050b 	sbc.w	r5, r3, fp
 8005a44:	f04f 0200 	mov.w	r2, #0
 8005a48:	f04f 0300 	mov.w	r3, #0
 8005a4c:	00eb      	lsls	r3, r5, #3
 8005a4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a52:	00e2      	lsls	r2, r4, #3
 8005a54:	4614      	mov	r4, r2
 8005a56:	461d      	mov	r5, r3
 8005a58:	4643      	mov	r3, r8
 8005a5a:	18e3      	adds	r3, r4, r3
 8005a5c:	603b      	str	r3, [r7, #0]
 8005a5e:	464b      	mov	r3, r9
 8005a60:	eb45 0303 	adc.w	r3, r5, r3
 8005a64:	607b      	str	r3, [r7, #4]
 8005a66:	f04f 0200 	mov.w	r2, #0
 8005a6a:	f04f 0300 	mov.w	r3, #0
 8005a6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a72:	4629      	mov	r1, r5
 8005a74:	028b      	lsls	r3, r1, #10
 8005a76:	4621      	mov	r1, r4
 8005a78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a7c:	4621      	mov	r1, r4
 8005a7e:	028a      	lsls	r2, r1, #10
 8005a80:	4610      	mov	r0, r2
 8005a82:	4619      	mov	r1, r3
 8005a84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a86:	2200      	movs	r2, #0
 8005a88:	61bb      	str	r3, [r7, #24]
 8005a8a:	61fa      	str	r2, [r7, #28]
 8005a8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a90:	f7fb f8e2 	bl	8000c58 <__aeabi_uldivmod>
 8005a94:	4602      	mov	r2, r0
 8005a96:	460b      	mov	r3, r1
 8005a98:	4613      	mov	r3, r2
 8005a9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8005acc <HAL_RCC_GetSysClockFreq+0x200>)
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	0c1b      	lsrs	r3, r3, #16
 8005aa2:	f003 0303 	and.w	r3, r3, #3
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	005b      	lsls	r3, r3, #1
 8005aaa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8005aac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005aae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ab4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005ab6:	e002      	b.n	8005abe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ab8:	4b05      	ldr	r3, [pc, #20]	@ (8005ad0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005aba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005abc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005abe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3750      	adds	r7, #80	@ 0x50
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005aca:	bf00      	nop
 8005acc:	40023800 	.word	0x40023800
 8005ad0:	00f42400 	.word	0x00f42400
 8005ad4:	007a1200 	.word	0x007a1200

08005ad8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005adc:	4b03      	ldr	r3, [pc, #12]	@ (8005aec <HAL_RCC_GetHCLKFreq+0x14>)
 8005ade:	681b      	ldr	r3, [r3, #0]
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	2000002c 	.word	0x2000002c

08005af0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005af4:	f7ff fff0 	bl	8005ad8 <HAL_RCC_GetHCLKFreq>
 8005af8:	4602      	mov	r2, r0
 8005afa:	4b05      	ldr	r3, [pc, #20]	@ (8005b10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	0a9b      	lsrs	r3, r3, #10
 8005b00:	f003 0307 	and.w	r3, r3, #7
 8005b04:	4903      	ldr	r1, [pc, #12]	@ (8005b14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b06:	5ccb      	ldrb	r3, [r1, r3]
 8005b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	40023800 	.word	0x40023800
 8005b14:	0800a3e0 	.word	0x0800a3e0

08005b18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005b1c:	f7ff ffdc 	bl	8005ad8 <HAL_RCC_GetHCLKFreq>
 8005b20:	4602      	mov	r2, r0
 8005b22:	4b05      	ldr	r3, [pc, #20]	@ (8005b38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	0b5b      	lsrs	r3, r3, #13
 8005b28:	f003 0307 	and.w	r3, r3, #7
 8005b2c:	4903      	ldr	r1, [pc, #12]	@ (8005b3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b2e:	5ccb      	ldrb	r3, [r1, r3]
 8005b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	40023800 	.word	0x40023800
 8005b3c:	0800a3e0 	.word	0x0800a3e0

08005b40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b082      	sub	sp, #8
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d101      	bne.n	8005b52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e041      	b.n	8005bd6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d106      	bne.n	8005b6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f7fb ffba 	bl	8001ae0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2202      	movs	r2, #2
 8005b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	3304      	adds	r3, #4
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	4610      	mov	r0, r2
 8005b80:	f000 fa88 	bl	8006094 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3708      	adds	r7, #8
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
	...

08005be0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d001      	beq.n	8005bf8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e044      	b.n	8005c82 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68da      	ldr	r2, [r3, #12]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f042 0201 	orr.w	r2, r2, #1
 8005c0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a1e      	ldr	r2, [pc, #120]	@ (8005c90 <HAL_TIM_Base_Start_IT+0xb0>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d018      	beq.n	8005c4c <HAL_TIM_Base_Start_IT+0x6c>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c22:	d013      	beq.n	8005c4c <HAL_TIM_Base_Start_IT+0x6c>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a1a      	ldr	r2, [pc, #104]	@ (8005c94 <HAL_TIM_Base_Start_IT+0xb4>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d00e      	beq.n	8005c4c <HAL_TIM_Base_Start_IT+0x6c>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a19      	ldr	r2, [pc, #100]	@ (8005c98 <HAL_TIM_Base_Start_IT+0xb8>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d009      	beq.n	8005c4c <HAL_TIM_Base_Start_IT+0x6c>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a17      	ldr	r2, [pc, #92]	@ (8005c9c <HAL_TIM_Base_Start_IT+0xbc>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d004      	beq.n	8005c4c <HAL_TIM_Base_Start_IT+0x6c>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a16      	ldr	r2, [pc, #88]	@ (8005ca0 <HAL_TIM_Base_Start_IT+0xc0>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d111      	bne.n	8005c70 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f003 0307 	and.w	r3, r3, #7
 8005c56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2b06      	cmp	r3, #6
 8005c5c:	d010      	beq.n	8005c80 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f042 0201 	orr.w	r2, r2, #1
 8005c6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c6e:	e007      	b.n	8005c80 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f042 0201 	orr.w	r2, r2, #1
 8005c7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3714      	adds	r7, #20
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr
 8005c8e:	bf00      	nop
 8005c90:	40010000 	.word	0x40010000
 8005c94:	40000400 	.word	0x40000400
 8005c98:	40000800 	.word	0x40000800
 8005c9c:	40000c00 	.word	0x40000c00
 8005ca0:	40014000 	.word	0x40014000

08005ca4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	f003 0302 	and.w	r3, r3, #2
 8005cb6:	2b02      	cmp	r3, #2
 8005cb8:	d122      	bne.n	8005d00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	f003 0302 	and.w	r3, r3, #2
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d11b      	bne.n	8005d00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f06f 0202 	mvn.w	r2, #2
 8005cd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	699b      	ldr	r3, [r3, #24]
 8005cde:	f003 0303 	and.w	r3, r3, #3
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d003      	beq.n	8005cee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 f9b5 	bl	8006056 <HAL_TIM_IC_CaptureCallback>
 8005cec:	e005      	b.n	8005cfa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 f9a7 	bl	8006042 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 f9b8 	bl	800606a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	f003 0304 	and.w	r3, r3, #4
 8005d0a:	2b04      	cmp	r3, #4
 8005d0c:	d122      	bne.n	8005d54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	f003 0304 	and.w	r3, r3, #4
 8005d18:	2b04      	cmp	r3, #4
 8005d1a:	d11b      	bne.n	8005d54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f06f 0204 	mvn.w	r2, #4
 8005d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2202      	movs	r2, #2
 8005d2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d003      	beq.n	8005d42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 f98b 	bl	8006056 <HAL_TIM_IC_CaptureCallback>
 8005d40:	e005      	b.n	8005d4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 f97d 	bl	8006042 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 f98e 	bl	800606a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	f003 0308 	and.w	r3, r3, #8
 8005d5e:	2b08      	cmp	r3, #8
 8005d60:	d122      	bne.n	8005da8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	f003 0308 	and.w	r3, r3, #8
 8005d6c:	2b08      	cmp	r3, #8
 8005d6e:	d11b      	bne.n	8005da8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f06f 0208 	mvn.w	r2, #8
 8005d78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2204      	movs	r2, #4
 8005d7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	69db      	ldr	r3, [r3, #28]
 8005d86:	f003 0303 	and.w	r3, r3, #3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d003      	beq.n	8005d96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 f961 	bl	8006056 <HAL_TIM_IC_CaptureCallback>
 8005d94:	e005      	b.n	8005da2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 f953 	bl	8006042 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 f964 	bl	800606a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	f003 0310 	and.w	r3, r3, #16
 8005db2:	2b10      	cmp	r3, #16
 8005db4:	d122      	bne.n	8005dfc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	f003 0310 	and.w	r3, r3, #16
 8005dc0:	2b10      	cmp	r3, #16
 8005dc2:	d11b      	bne.n	8005dfc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f06f 0210 	mvn.w	r2, #16
 8005dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2208      	movs	r2, #8
 8005dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	69db      	ldr	r3, [r3, #28]
 8005dda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d003      	beq.n	8005dea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 f937 	bl	8006056 <HAL_TIM_IC_CaptureCallback>
 8005de8:	e005      	b.n	8005df6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 f929 	bl	8006042 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 f93a 	bl	800606a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	f003 0301 	and.w	r3, r3, #1
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d10e      	bne.n	8005e28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	f003 0301 	and.w	r3, r3, #1
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d107      	bne.n	8005e28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f06f 0201 	mvn.w	r2, #1
 8005e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f7fb fa9c 	bl	8001360 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e32:	2b80      	cmp	r3, #128	@ 0x80
 8005e34:	d10e      	bne.n	8005e54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e40:	2b80      	cmp	r3, #128	@ 0x80
 8005e42:	d107      	bne.n	8005e54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 fab2 	bl	80063b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e5e:	2b40      	cmp	r3, #64	@ 0x40
 8005e60:	d10e      	bne.n	8005e80 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e6c:	2b40      	cmp	r3, #64	@ 0x40
 8005e6e:	d107      	bne.n	8005e80 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005e78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 f8ff 	bl	800607e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	f003 0320 	and.w	r3, r3, #32
 8005e8a:	2b20      	cmp	r3, #32
 8005e8c:	d10e      	bne.n	8005eac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	f003 0320 	and.w	r3, r3, #32
 8005e98:	2b20      	cmp	r3, #32
 8005e9a:	d107      	bne.n	8005eac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f06f 0220 	mvn.w	r2, #32
 8005ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 fa7c 	bl	80063a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005eac:	bf00      	nop
 8005eae:	3708      	adds	r7, #8
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d101      	bne.n	8005ed0 <HAL_TIM_ConfigClockSource+0x1c>
 8005ecc:	2302      	movs	r3, #2
 8005ece:	e0b4      	b.n	800603a <HAL_TIM_ConfigClockSource+0x186>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2202      	movs	r2, #2
 8005edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005eee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ef6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	68ba      	ldr	r2, [r7, #8]
 8005efe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f08:	d03e      	beq.n	8005f88 <HAL_TIM_ConfigClockSource+0xd4>
 8005f0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f0e:	f200 8087 	bhi.w	8006020 <HAL_TIM_ConfigClockSource+0x16c>
 8005f12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f16:	f000 8086 	beq.w	8006026 <HAL_TIM_ConfigClockSource+0x172>
 8005f1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f1e:	d87f      	bhi.n	8006020 <HAL_TIM_ConfigClockSource+0x16c>
 8005f20:	2b70      	cmp	r3, #112	@ 0x70
 8005f22:	d01a      	beq.n	8005f5a <HAL_TIM_ConfigClockSource+0xa6>
 8005f24:	2b70      	cmp	r3, #112	@ 0x70
 8005f26:	d87b      	bhi.n	8006020 <HAL_TIM_ConfigClockSource+0x16c>
 8005f28:	2b60      	cmp	r3, #96	@ 0x60
 8005f2a:	d050      	beq.n	8005fce <HAL_TIM_ConfigClockSource+0x11a>
 8005f2c:	2b60      	cmp	r3, #96	@ 0x60
 8005f2e:	d877      	bhi.n	8006020 <HAL_TIM_ConfigClockSource+0x16c>
 8005f30:	2b50      	cmp	r3, #80	@ 0x50
 8005f32:	d03c      	beq.n	8005fae <HAL_TIM_ConfigClockSource+0xfa>
 8005f34:	2b50      	cmp	r3, #80	@ 0x50
 8005f36:	d873      	bhi.n	8006020 <HAL_TIM_ConfigClockSource+0x16c>
 8005f38:	2b40      	cmp	r3, #64	@ 0x40
 8005f3a:	d058      	beq.n	8005fee <HAL_TIM_ConfigClockSource+0x13a>
 8005f3c:	2b40      	cmp	r3, #64	@ 0x40
 8005f3e:	d86f      	bhi.n	8006020 <HAL_TIM_ConfigClockSource+0x16c>
 8005f40:	2b30      	cmp	r3, #48	@ 0x30
 8005f42:	d064      	beq.n	800600e <HAL_TIM_ConfigClockSource+0x15a>
 8005f44:	2b30      	cmp	r3, #48	@ 0x30
 8005f46:	d86b      	bhi.n	8006020 <HAL_TIM_ConfigClockSource+0x16c>
 8005f48:	2b20      	cmp	r3, #32
 8005f4a:	d060      	beq.n	800600e <HAL_TIM_ConfigClockSource+0x15a>
 8005f4c:	2b20      	cmp	r3, #32
 8005f4e:	d867      	bhi.n	8006020 <HAL_TIM_ConfigClockSource+0x16c>
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d05c      	beq.n	800600e <HAL_TIM_ConfigClockSource+0x15a>
 8005f54:	2b10      	cmp	r3, #16
 8005f56:	d05a      	beq.n	800600e <HAL_TIM_ConfigClockSource+0x15a>
 8005f58:	e062      	b.n	8006020 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6818      	ldr	r0, [r3, #0]
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	6899      	ldr	r1, [r3, #8]
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	685a      	ldr	r2, [r3, #4]
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	f000 f98d 	bl	8006288 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005f7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68ba      	ldr	r2, [r7, #8]
 8005f84:	609a      	str	r2, [r3, #8]
      break;
 8005f86:	e04f      	b.n	8006028 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6818      	ldr	r0, [r3, #0]
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	6899      	ldr	r1, [r3, #8]
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	685a      	ldr	r2, [r3, #4]
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	f000 f976 	bl	8006288 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	689a      	ldr	r2, [r3, #8]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005faa:	609a      	str	r2, [r3, #8]
      break;
 8005fac:	e03c      	b.n	8006028 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6818      	ldr	r0, [r3, #0]
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	6859      	ldr	r1, [r3, #4]
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	461a      	mov	r2, r3
 8005fbc:	f000 f8ea 	bl	8006194 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2150      	movs	r1, #80	@ 0x50
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f000 f943 	bl	8006252 <TIM_ITRx_SetConfig>
      break;
 8005fcc:	e02c      	b.n	8006028 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6818      	ldr	r0, [r3, #0]
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	6859      	ldr	r1, [r3, #4]
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	461a      	mov	r2, r3
 8005fdc:	f000 f909 	bl	80061f2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2160      	movs	r1, #96	@ 0x60
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f000 f933 	bl	8006252 <TIM_ITRx_SetConfig>
      break;
 8005fec:	e01c      	b.n	8006028 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6818      	ldr	r0, [r3, #0]
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	6859      	ldr	r1, [r3, #4]
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	f000 f8ca 	bl	8006194 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2140      	movs	r1, #64	@ 0x40
 8006006:	4618      	mov	r0, r3
 8006008:	f000 f923 	bl	8006252 <TIM_ITRx_SetConfig>
      break;
 800600c:	e00c      	b.n	8006028 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4619      	mov	r1, r3
 8006018:	4610      	mov	r0, r2
 800601a:	f000 f91a 	bl	8006252 <TIM_ITRx_SetConfig>
      break;
 800601e:	e003      	b.n	8006028 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	73fb      	strb	r3, [r7, #15]
      break;
 8006024:	e000      	b.n	8006028 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006026:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006038:	7bfb      	ldrb	r3, [r7, #15]
}
 800603a:	4618      	mov	r0, r3
 800603c:	3710      	adds	r7, #16
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006042:	b480      	push	{r7}
 8006044:	b083      	sub	sp, #12
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800604a:	bf00      	nop
 800604c:	370c      	adds	r7, #12
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr

08006056 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006056:	b480      	push	{r7}
 8006058:	b083      	sub	sp, #12
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800605e:	bf00      	nop
 8006060:	370c      	adds	r7, #12
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr

0800606a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800606a:	b480      	push	{r7}
 800606c:	b083      	sub	sp, #12
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006072:	bf00      	nop
 8006074:	370c      	adds	r7, #12
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr

0800607e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800607e:	b480      	push	{r7}
 8006080:	b083      	sub	sp, #12
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006086:	bf00      	nop
 8006088:	370c      	adds	r7, #12
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
	...

08006094 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006094:	b480      	push	{r7}
 8006096:	b085      	sub	sp, #20
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a34      	ldr	r2, [pc, #208]	@ (8006178 <TIM_Base_SetConfig+0xe4>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d00f      	beq.n	80060cc <TIM_Base_SetConfig+0x38>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060b2:	d00b      	beq.n	80060cc <TIM_Base_SetConfig+0x38>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a31      	ldr	r2, [pc, #196]	@ (800617c <TIM_Base_SetConfig+0xe8>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d007      	beq.n	80060cc <TIM_Base_SetConfig+0x38>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4a30      	ldr	r2, [pc, #192]	@ (8006180 <TIM_Base_SetConfig+0xec>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d003      	beq.n	80060cc <TIM_Base_SetConfig+0x38>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a2f      	ldr	r2, [pc, #188]	@ (8006184 <TIM_Base_SetConfig+0xf0>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d108      	bne.n	80060de <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	4313      	orrs	r3, r2
 80060dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a25      	ldr	r2, [pc, #148]	@ (8006178 <TIM_Base_SetConfig+0xe4>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d01b      	beq.n	800611e <TIM_Base_SetConfig+0x8a>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060ec:	d017      	beq.n	800611e <TIM_Base_SetConfig+0x8a>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4a22      	ldr	r2, [pc, #136]	@ (800617c <TIM_Base_SetConfig+0xe8>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d013      	beq.n	800611e <TIM_Base_SetConfig+0x8a>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4a21      	ldr	r2, [pc, #132]	@ (8006180 <TIM_Base_SetConfig+0xec>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d00f      	beq.n	800611e <TIM_Base_SetConfig+0x8a>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4a20      	ldr	r2, [pc, #128]	@ (8006184 <TIM_Base_SetConfig+0xf0>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d00b      	beq.n	800611e <TIM_Base_SetConfig+0x8a>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a1f      	ldr	r2, [pc, #124]	@ (8006188 <TIM_Base_SetConfig+0xf4>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d007      	beq.n	800611e <TIM_Base_SetConfig+0x8a>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4a1e      	ldr	r2, [pc, #120]	@ (800618c <TIM_Base_SetConfig+0xf8>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d003      	beq.n	800611e <TIM_Base_SetConfig+0x8a>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a1d      	ldr	r2, [pc, #116]	@ (8006190 <TIM_Base_SetConfig+0xfc>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d108      	bne.n	8006130 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006124:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	4313      	orrs	r3, r2
 800612e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	695b      	ldr	r3, [r3, #20]
 800613a:	4313      	orrs	r3, r2
 800613c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	689a      	ldr	r2, [r3, #8]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a08      	ldr	r2, [pc, #32]	@ (8006178 <TIM_Base_SetConfig+0xe4>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d103      	bne.n	8006164 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	691a      	ldr	r2, [r3, #16]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	615a      	str	r2, [r3, #20]
}
 800616a:	bf00      	nop
 800616c:	3714      	adds	r7, #20
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr
 8006176:	bf00      	nop
 8006178:	40010000 	.word	0x40010000
 800617c:	40000400 	.word	0x40000400
 8006180:	40000800 	.word	0x40000800
 8006184:	40000c00 	.word	0x40000c00
 8006188:	40014000 	.word	0x40014000
 800618c:	40014400 	.word	0x40014400
 8006190:	40014800 	.word	0x40014800

08006194 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006194:	b480      	push	{r7}
 8006196:	b087      	sub	sp, #28
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6a1b      	ldr	r3, [r3, #32]
 80061a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	f023 0201 	bic.w	r2, r3, #1
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	699b      	ldr	r3, [r3, #24]
 80061b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80061be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	011b      	lsls	r3, r3, #4
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	f023 030a 	bic.w	r3, r3, #10
 80061d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061d2:	697a      	ldr	r2, [r7, #20]
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	693a      	ldr	r2, [r7, #16]
 80061de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	697a      	ldr	r2, [r7, #20]
 80061e4:	621a      	str	r2, [r3, #32]
}
 80061e6:	bf00      	nop
 80061e8:	371c      	adds	r7, #28
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr

080061f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061f2:	b480      	push	{r7}
 80061f4:	b087      	sub	sp, #28
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	60f8      	str	r0, [r7, #12]
 80061fa:	60b9      	str	r1, [r7, #8]
 80061fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	f023 0210 	bic.w	r2, r3, #16
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6a1b      	ldr	r3, [r3, #32]
 8006214:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800621c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	031b      	lsls	r3, r3, #12
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	4313      	orrs	r3, r2
 8006226:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800622e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	011b      	lsls	r3, r3, #4
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	4313      	orrs	r3, r2
 8006238:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	693a      	ldr	r2, [r7, #16]
 8006244:	621a      	str	r2, [r3, #32]
}
 8006246:	bf00      	nop
 8006248:	371c      	adds	r7, #28
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr

08006252 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006252:	b480      	push	{r7}
 8006254:	b085      	sub	sp, #20
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
 800625a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006268:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800626a:	683a      	ldr	r2, [r7, #0]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	4313      	orrs	r3, r2
 8006270:	f043 0307 	orr.w	r3, r3, #7
 8006274:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	609a      	str	r2, [r3, #8]
}
 800627c:	bf00      	nop
 800627e:	3714      	adds	r7, #20
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006288:	b480      	push	{r7}
 800628a:	b087      	sub	sp, #28
 800628c:	af00      	add	r7, sp, #0
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	60b9      	str	r1, [r7, #8]
 8006292:	607a      	str	r2, [r7, #4]
 8006294:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80062a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	021a      	lsls	r2, r3, #8
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	431a      	orrs	r2, r3
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	697a      	ldr	r2, [r7, #20]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	697a      	ldr	r2, [r7, #20]
 80062ba:	609a      	str	r2, [r3, #8]
}
 80062bc:	bf00      	nop
 80062be:	371c      	adds	r7, #28
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b085      	sub	sp, #20
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d101      	bne.n	80062e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062dc:	2302      	movs	r3, #2
 80062de:	e050      	b.n	8006382 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2202      	movs	r2, #2
 80062ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006306:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68fa      	ldr	r2, [r7, #12]
 800630e:	4313      	orrs	r3, r2
 8006310:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a1c      	ldr	r2, [pc, #112]	@ (8006390 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d018      	beq.n	8006356 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800632c:	d013      	beq.n	8006356 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a18      	ldr	r2, [pc, #96]	@ (8006394 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d00e      	beq.n	8006356 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a16      	ldr	r2, [pc, #88]	@ (8006398 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d009      	beq.n	8006356 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a15      	ldr	r2, [pc, #84]	@ (800639c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d004      	beq.n	8006356 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a13      	ldr	r2, [pc, #76]	@ (80063a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d10c      	bne.n	8006370 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800635c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	68ba      	ldr	r2, [r7, #8]
 8006364:	4313      	orrs	r3, r2
 8006366:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	68ba      	ldr	r2, [r7, #8]
 800636e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3714      	adds	r7, #20
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	40010000 	.word	0x40010000
 8006394:	40000400 	.word	0x40000400
 8006398:	40000800 	.word	0x40000800
 800639c:	40000c00 	.word	0x40000c00
 80063a0:	40014000 	.word	0x40014000

080063a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063ac:	bf00      	nop
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063c0:	bf00      	nop
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b082      	sub	sp, #8
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d101      	bne.n	80063de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e03f      	b.n	800645e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d106      	bne.n	80063f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f7fb fb9c 	bl	8001b30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2224      	movs	r2, #36	@ 0x24
 80063fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68da      	ldr	r2, [r3, #12]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800640e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 fed1 	bl	80071b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	691a      	ldr	r2, [r3, #16]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006424:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	695a      	ldr	r2, [r3, #20]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006434:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	68da      	ldr	r2, [r3, #12]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006444:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2220      	movs	r2, #32
 8006450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2220      	movs	r2, #32
 8006458:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800645c:	2300      	movs	r3, #0
}
 800645e:	4618      	mov	r0, r3
 8006460:	3708      	adds	r7, #8
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}

08006466 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006466:	b580      	push	{r7, lr}
 8006468:	b08a      	sub	sp, #40	@ 0x28
 800646a:	af02      	add	r7, sp, #8
 800646c:	60f8      	str	r0, [r7, #12]
 800646e:	60b9      	str	r1, [r7, #8]
 8006470:	603b      	str	r3, [r7, #0]
 8006472:	4613      	mov	r3, r2
 8006474:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006476:	2300      	movs	r3, #0
 8006478:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006480:	b2db      	uxtb	r3, r3
 8006482:	2b20      	cmp	r3, #32
 8006484:	d17c      	bne.n	8006580 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d002      	beq.n	8006492 <HAL_UART_Transmit+0x2c>
 800648c:	88fb      	ldrh	r3, [r7, #6]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d101      	bne.n	8006496 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e075      	b.n	8006582 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800649c:	2b01      	cmp	r3, #1
 800649e:	d101      	bne.n	80064a4 <HAL_UART_Transmit+0x3e>
 80064a0:	2302      	movs	r3, #2
 80064a2:	e06e      	b.n	8006582 <HAL_UART_Transmit+0x11c>
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2200      	movs	r2, #0
 80064b0:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2221      	movs	r2, #33	@ 0x21
 80064b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80064ba:	f7fb fd85 	bl	8001fc8 <HAL_GetTick>
 80064be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	88fa      	ldrh	r2, [r7, #6]
 80064c4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	88fa      	ldrh	r2, [r7, #6]
 80064ca:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064d4:	d108      	bne.n	80064e8 <HAL_UART_Transmit+0x82>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d104      	bne.n	80064e8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80064de:	2300      	movs	r3, #0
 80064e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	61bb      	str	r3, [r7, #24]
 80064e6:	e003      	b.n	80064f0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064ec:	2300      	movs	r3, #0
 80064ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 80064f8:	e02a      	b.n	8006550 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	9300      	str	r3, [sp, #0]
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	2200      	movs	r2, #0
 8006502:	2180      	movs	r1, #128	@ 0x80
 8006504:	68f8      	ldr	r0, [r7, #12]
 8006506:	f000 fc26 	bl	8006d56 <UART_WaitOnFlagUntilTimeout>
 800650a:	4603      	mov	r3, r0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d001      	beq.n	8006514 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006510:	2303      	movs	r3, #3
 8006512:	e036      	b.n	8006582 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d10b      	bne.n	8006532 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	881b      	ldrh	r3, [r3, #0]
 800651e:	461a      	mov	r2, r3
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006528:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	3302      	adds	r3, #2
 800652e:	61bb      	str	r3, [r7, #24]
 8006530:	e007      	b.n	8006542 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	781a      	ldrb	r2, [r3, #0]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	3301      	adds	r3, #1
 8006540:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006546:	b29b      	uxth	r3, r3
 8006548:	3b01      	subs	r3, #1
 800654a:	b29a      	uxth	r2, r3
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006554:	b29b      	uxth	r3, r3
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1cf      	bne.n	80064fa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	9300      	str	r3, [sp, #0]
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	2200      	movs	r2, #0
 8006562:	2140      	movs	r1, #64	@ 0x40
 8006564:	68f8      	ldr	r0, [r7, #12]
 8006566:	f000 fbf6 	bl	8006d56 <UART_WaitOnFlagUntilTimeout>
 800656a:	4603      	mov	r3, r0
 800656c:	2b00      	cmp	r3, #0
 800656e:	d001      	beq.n	8006574 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006570:	2303      	movs	r3, #3
 8006572:	e006      	b.n	8006582 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2220      	movs	r2, #32
 8006578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800657c:	2300      	movs	r3, #0
 800657e:	e000      	b.n	8006582 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006580:	2302      	movs	r3, #2
  }
}
 8006582:	4618      	mov	r0, r3
 8006584:	3720      	adds	r7, #32
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
	...

0800658c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b08c      	sub	sp, #48	@ 0x30
 8006590:	af00      	add	r7, sp, #0
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	60b9      	str	r1, [r7, #8]
 8006596:	4613      	mov	r3, r2
 8006598:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	2b20      	cmp	r3, #32
 80065a4:	d165      	bne.n	8006672 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d002      	beq.n	80065b2 <HAL_UART_Transmit_DMA+0x26>
 80065ac:	88fb      	ldrh	r3, [r7, #6]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d101      	bne.n	80065b6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e05e      	b.n	8006674 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d101      	bne.n	80065c4 <HAL_UART_Transmit_DMA+0x38>
 80065c0:	2302      	movs	r3, #2
 80065c2:	e057      	b.n	8006674 <HAL_UART_Transmit_DMA+0xe8>
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2201      	movs	r2, #1
 80065c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 80065cc:	68ba      	ldr	r2, [r7, #8]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	88fa      	ldrh	r2, [r7, #6]
 80065d6:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	88fa      	ldrh	r2, [r7, #6]
 80065dc:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2200      	movs	r2, #0
 80065e2:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2221      	movs	r2, #33	@ 0x21
 80065e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065f0:	4a22      	ldr	r2, [pc, #136]	@ (800667c <HAL_UART_Transmit_DMA+0xf0>)
 80065f2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065f8:	4a21      	ldr	r2, [pc, #132]	@ (8006680 <HAL_UART_Transmit_DMA+0xf4>)
 80065fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006600:	4a20      	ldr	r2, [pc, #128]	@ (8006684 <HAL_UART_Transmit_DMA+0xf8>)
 8006602:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006608:	2200      	movs	r2, #0
 800660a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800660c:	f107 0308 	add.w	r3, r7, #8
 8006610:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8006616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006618:	6819      	ldr	r1, [r3, #0]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	3304      	adds	r3, #4
 8006620:	461a      	mov	r2, r3
 8006622:	88fb      	ldrh	r3, [r7, #6]
 8006624:	f7fb fec0 	bl	80023a8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006630:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	3314      	adds	r3, #20
 8006640:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	e853 3f00 	ldrex	r3, [r3]
 8006648:	617b      	str	r3, [r7, #20]
   return(result);
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006650:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	3314      	adds	r3, #20
 8006658:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800665a:	627a      	str	r2, [r7, #36]	@ 0x24
 800665c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665e:	6a39      	ldr	r1, [r7, #32]
 8006660:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006662:	e841 2300 	strex	r3, r2, [r1]
 8006666:	61fb      	str	r3, [r7, #28]
   return(result);
 8006668:	69fb      	ldr	r3, [r7, #28]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d1e5      	bne.n	800663a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800666e:	2300      	movs	r3, #0
 8006670:	e000      	b.n	8006674 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8006672:	2302      	movs	r3, #2
  }
}
 8006674:	4618      	mov	r0, r3
 8006676:	3730      	adds	r7, #48	@ 0x30
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}
 800667c:	08006c0d 	.word	0x08006c0d
 8006680:	08006ca7 	.word	0x08006ca7
 8006684:	08006cc3 	.word	0x08006cc3

08006688 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b0ba      	sub	sp, #232	@ 0xe8
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	695b      	ldr	r3, [r3, #20]
 80066aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80066ae:	2300      	movs	r3, #0
 80066b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80066b4:	2300      	movs	r3, #0
 80066b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80066ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066be:	f003 030f 	and.w	r3, r3, #15
 80066c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80066c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d10f      	bne.n	80066ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80066ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066d2:	f003 0320 	and.w	r3, r3, #32
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d009      	beq.n	80066ee <HAL_UART_IRQHandler+0x66>
 80066da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066de:	f003 0320 	and.w	r3, r3, #32
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d003      	beq.n	80066ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 fcaa 	bl	8007040 <UART_Receive_IT>
      return;
 80066ec:	e256      	b.n	8006b9c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80066ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	f000 80de 	beq.w	80068b4 <HAL_UART_IRQHandler+0x22c>
 80066f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066fc:	f003 0301 	and.w	r3, r3, #1
 8006700:	2b00      	cmp	r3, #0
 8006702:	d106      	bne.n	8006712 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006708:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800670c:	2b00      	cmp	r3, #0
 800670e:	f000 80d1 	beq.w	80068b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006716:	f003 0301 	and.w	r3, r3, #1
 800671a:	2b00      	cmp	r3, #0
 800671c:	d00b      	beq.n	8006736 <HAL_UART_IRQHandler+0xae>
 800671e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006722:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006726:	2b00      	cmp	r3, #0
 8006728:	d005      	beq.n	8006736 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800672e:	f043 0201 	orr.w	r2, r3, #1
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800673a:	f003 0304 	and.w	r3, r3, #4
 800673e:	2b00      	cmp	r3, #0
 8006740:	d00b      	beq.n	800675a <HAL_UART_IRQHandler+0xd2>
 8006742:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006746:	f003 0301 	and.w	r3, r3, #1
 800674a:	2b00      	cmp	r3, #0
 800674c:	d005      	beq.n	800675a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006752:	f043 0202 	orr.w	r2, r3, #2
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800675a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800675e:	f003 0302 	and.w	r3, r3, #2
 8006762:	2b00      	cmp	r3, #0
 8006764:	d00b      	beq.n	800677e <HAL_UART_IRQHandler+0xf6>
 8006766:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800676a:	f003 0301 	and.w	r3, r3, #1
 800676e:	2b00      	cmp	r3, #0
 8006770:	d005      	beq.n	800677e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006776:	f043 0204 	orr.w	r2, r3, #4
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800677e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006782:	f003 0308 	and.w	r3, r3, #8
 8006786:	2b00      	cmp	r3, #0
 8006788:	d011      	beq.n	80067ae <HAL_UART_IRQHandler+0x126>
 800678a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800678e:	f003 0320 	and.w	r3, r3, #32
 8006792:	2b00      	cmp	r3, #0
 8006794:	d105      	bne.n	80067a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006796:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800679a:	f003 0301 	and.w	r3, r3, #1
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d005      	beq.n	80067ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067a6:	f043 0208 	orr.w	r2, r3, #8
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	f000 81ed 	beq.w	8006b92 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80067b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067bc:	f003 0320 	and.w	r3, r3, #32
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d008      	beq.n	80067d6 <HAL_UART_IRQHandler+0x14e>
 80067c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067c8:	f003 0320 	and.w	r3, r3, #32
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d002      	beq.n	80067d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f000 fc35 	bl	8007040 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	695b      	ldr	r3, [r3, #20]
 80067dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067e0:	2b40      	cmp	r3, #64	@ 0x40
 80067e2:	bf0c      	ite	eq
 80067e4:	2301      	moveq	r3, #1
 80067e6:	2300      	movne	r3, #0
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067f2:	f003 0308 	and.w	r3, r3, #8
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d103      	bne.n	8006802 <HAL_UART_IRQHandler+0x17a>
 80067fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d04f      	beq.n	80068a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 fb3d 	bl	8006e82 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	695b      	ldr	r3, [r3, #20]
 800680e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006812:	2b40      	cmp	r3, #64	@ 0x40
 8006814:	d141      	bne.n	800689a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	3314      	adds	r3, #20
 800681c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006820:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006824:	e853 3f00 	ldrex	r3, [r3]
 8006828:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800682c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006830:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006834:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	3314      	adds	r3, #20
 800683e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006842:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006846:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800684a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800684e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006852:	e841 2300 	strex	r3, r2, [r1]
 8006856:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800685a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d1d9      	bne.n	8006816 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006866:	2b00      	cmp	r3, #0
 8006868:	d013      	beq.n	8006892 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800686e:	4a7d      	ldr	r2, [pc, #500]	@ (8006a64 <HAL_UART_IRQHandler+0x3dc>)
 8006870:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006876:	4618      	mov	r0, r3
 8006878:	f7fb fe5e 	bl	8002538 <HAL_DMA_Abort_IT>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d016      	beq.n	80068b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006886:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800688c:	4610      	mov	r0, r2
 800688e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006890:	e00e      	b.n	80068b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 f9a4 	bl	8006be0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006898:	e00a      	b.n	80068b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 f9a0 	bl	8006be0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068a0:	e006      	b.n	80068b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 f99c 	bl	8006be0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 80068ae:	e170      	b.n	8006b92 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068b0:	bf00      	nop
    return;
 80068b2:	e16e      	b.n	8006b92 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	f040 814a 	bne.w	8006b52 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80068be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068c2:	f003 0310 	and.w	r3, r3, #16
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	f000 8143 	beq.w	8006b52 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80068cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068d0:	f003 0310 	and.w	r3, r3, #16
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	f000 813c 	beq.w	8006b52 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80068da:	2300      	movs	r3, #0
 80068dc:	60bb      	str	r3, [r7, #8]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	60bb      	str	r3, [r7, #8]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	60bb      	str	r3, [r7, #8]
 80068ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	695b      	ldr	r3, [r3, #20]
 80068f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068fa:	2b40      	cmp	r3, #64	@ 0x40
 80068fc:	f040 80b4 	bne.w	8006a68 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800690c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006910:	2b00      	cmp	r3, #0
 8006912:	f000 8140 	beq.w	8006b96 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800691a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800691e:	429a      	cmp	r2, r3
 8006920:	f080 8139 	bcs.w	8006b96 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800692a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006930:	69db      	ldr	r3, [r3, #28]
 8006932:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006936:	f000 8088 	beq.w	8006a4a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	330c      	adds	r3, #12
 8006940:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006944:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006948:	e853 3f00 	ldrex	r3, [r3]
 800694c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006950:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006954:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006958:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	330c      	adds	r3, #12
 8006962:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006966:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800696a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800696e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006972:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006976:	e841 2300 	strex	r3, r2, [r1]
 800697a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800697e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006982:	2b00      	cmp	r3, #0
 8006984:	d1d9      	bne.n	800693a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	3314      	adds	r3, #20
 800698c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006990:	e853 3f00 	ldrex	r3, [r3]
 8006994:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006996:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006998:	f023 0301 	bic.w	r3, r3, #1
 800699c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	3314      	adds	r3, #20
 80069a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80069aa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80069ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80069b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80069b6:	e841 2300 	strex	r3, r2, [r1]
 80069ba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80069bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d1e1      	bne.n	8006986 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	3314      	adds	r3, #20
 80069c8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80069cc:	e853 3f00 	ldrex	r3, [r3]
 80069d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80069d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80069d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	3314      	adds	r3, #20
 80069e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80069e6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80069e8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80069ec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80069ee:	e841 2300 	strex	r3, r2, [r1]
 80069f2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80069f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d1e3      	bne.n	80069c2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2220      	movs	r2, #32
 80069fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	330c      	adds	r3, #12
 8006a0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a12:	e853 3f00 	ldrex	r3, [r3]
 8006a16:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006a18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a1a:	f023 0310 	bic.w	r3, r3, #16
 8006a1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	330c      	adds	r3, #12
 8006a28:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006a2c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006a2e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a30:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006a32:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006a34:	e841 2300 	strex	r3, r2, [r1]
 8006a38:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006a3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d1e3      	bne.n	8006a08 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a44:	4618      	mov	r0, r3
 8006a46:	f7fb fd07 	bl	8002458 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	1ad3      	subs	r3, r2, r3
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	4619      	mov	r1, r3
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 f8ca 	bl	8006bf4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a60:	e099      	b.n	8006b96 <HAL_UART_IRQHandler+0x50e>
 8006a62:	bf00      	nop
 8006a64:	08006f49 	.word	0x08006f49
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	1ad3      	subs	r3, r2, r3
 8006a74:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	f000 808b 	beq.w	8006b9a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006a84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	f000 8086 	beq.w	8006b9a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	330c      	adds	r3, #12
 8006a94:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a98:	e853 3f00 	ldrex	r3, [r3]
 8006a9c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aa0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006aa4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	330c      	adds	r3, #12
 8006aae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006ab2:	647a      	str	r2, [r7, #68]	@ 0x44
 8006ab4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ab8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006aba:	e841 2300 	strex	r3, r2, [r1]
 8006abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ac0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d1e3      	bne.n	8006a8e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	3314      	adds	r3, #20
 8006acc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad0:	e853 3f00 	ldrex	r3, [r3]
 8006ad4:	623b      	str	r3, [r7, #32]
   return(result);
 8006ad6:	6a3b      	ldr	r3, [r7, #32]
 8006ad8:	f023 0301 	bic.w	r3, r3, #1
 8006adc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	3314      	adds	r3, #20
 8006ae6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006aea:	633a      	str	r2, [r7, #48]	@ 0x30
 8006aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006af0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006af2:	e841 2300 	strex	r3, r2, [r1]
 8006af6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d1e3      	bne.n	8006ac6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2220      	movs	r2, #32
 8006b02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	330c      	adds	r3, #12
 8006b12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	e853 3f00 	ldrex	r3, [r3]
 8006b1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f023 0310 	bic.w	r3, r3, #16
 8006b22:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	330c      	adds	r3, #12
 8006b2c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006b30:	61fa      	str	r2, [r7, #28]
 8006b32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b34:	69b9      	ldr	r1, [r7, #24]
 8006b36:	69fa      	ldr	r2, [r7, #28]
 8006b38:	e841 2300 	strex	r3, r2, [r1]
 8006b3c:	617b      	str	r3, [r7, #20]
   return(result);
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d1e3      	bne.n	8006b0c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006b48:	4619      	mov	r1, r3
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 f852 	bl	8006bf4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b50:	e023      	b.n	8006b9a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d009      	beq.n	8006b72 <HAL_UART_IRQHandler+0x4ea>
 8006b5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d003      	beq.n	8006b72 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 fa00 	bl	8006f70 <UART_Transmit_IT>
    return;
 8006b70:	e014      	b.n	8006b9c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00e      	beq.n	8006b9c <HAL_UART_IRQHandler+0x514>
 8006b7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d008      	beq.n	8006b9c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 fa40 	bl	8007010 <UART_EndTransmit_IT>
    return;
 8006b90:	e004      	b.n	8006b9c <HAL_UART_IRQHandler+0x514>
    return;
 8006b92:	bf00      	nop
 8006b94:	e002      	b.n	8006b9c <HAL_UART_IRQHandler+0x514>
      return;
 8006b96:	bf00      	nop
 8006b98:	e000      	b.n	8006b9c <HAL_UART_IRQHandler+0x514>
      return;
 8006b9a:	bf00      	nop
  }
}
 8006b9c:	37e8      	adds	r7, #232	@ 0xe8
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
 8006ba2:	bf00      	nop

08006ba4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006bac:	bf00      	nop
 8006bae:	370c      	adds	r7, #12
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006bc0:	bf00      	nop
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006bd4:	bf00      	nop
 8006bd6:	370c      	adds	r7, #12
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr

08006be0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006be8:	bf00      	nop
 8006bea:	370c      	adds	r7, #12
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	460b      	mov	r3, r1
 8006bfe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c00:	bf00      	nop
 8006c02:	370c      	adds	r7, #12
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr

08006c0c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b090      	sub	sp, #64	@ 0x40
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c18:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d137      	bne.n	8006c98 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006c28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006c2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	3314      	adds	r3, #20
 8006c34:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c38:	e853 3f00 	ldrex	r3, [r3]
 8006c3c:	623b      	str	r3, [r7, #32]
   return(result);
 8006c3e:	6a3b      	ldr	r3, [r7, #32]
 8006c40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c44:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	3314      	adds	r3, #20
 8006c4c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c4e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c56:	e841 2300 	strex	r3, r2, [r1]
 8006c5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d1e5      	bne.n	8006c2e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	330c      	adds	r3, #12
 8006c68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	e853 3f00 	ldrex	r3, [r3]
 8006c70:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c78:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	330c      	adds	r3, #12
 8006c80:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006c82:	61fa      	str	r2, [r7, #28]
 8006c84:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c86:	69b9      	ldr	r1, [r7, #24]
 8006c88:	69fa      	ldr	r2, [r7, #28]
 8006c8a:	e841 2300 	strex	r3, r2, [r1]
 8006c8e:	617b      	str	r3, [r7, #20]
   return(result);
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d1e5      	bne.n	8006c62 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006c96:	e002      	b.n	8006c9e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006c98:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006c9a:	f7ff ff83 	bl	8006ba4 <HAL_UART_TxCpltCallback>
}
 8006c9e:	bf00      	nop
 8006ca0:	3740      	adds	r7, #64	@ 0x40
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b084      	sub	sp, #16
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cb2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006cb4:	68f8      	ldr	r0, [r7, #12]
 8006cb6:	f7ff ff7f 	bl	8006bb8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cba:	bf00      	nop
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}

08006cc2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b084      	sub	sp, #16
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cd2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	695b      	ldr	r3, [r3, #20]
 8006cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cde:	2b80      	cmp	r3, #128	@ 0x80
 8006ce0:	bf0c      	ite	eq
 8006ce2:	2301      	moveq	r3, #1
 8006ce4:	2300      	movne	r3, #0
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	2b21      	cmp	r3, #33	@ 0x21
 8006cf4:	d108      	bne.n	8006d08 <UART_DMAError+0x46>
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d005      	beq.n	8006d08 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006d02:	68b8      	ldr	r0, [r7, #8]
 8006d04:	f000 f895 	bl	8006e32 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	695b      	ldr	r3, [r3, #20]
 8006d0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d12:	2b40      	cmp	r3, #64	@ 0x40
 8006d14:	bf0c      	ite	eq
 8006d16:	2301      	moveq	r3, #1
 8006d18:	2300      	movne	r3, #0
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	2b22      	cmp	r3, #34	@ 0x22
 8006d28:	d108      	bne.n	8006d3c <UART_DMAError+0x7a>
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d005      	beq.n	8006d3c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	2200      	movs	r2, #0
 8006d34:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006d36:	68b8      	ldr	r0, [r7, #8]
 8006d38:	f000 f8a3 	bl	8006e82 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d40:	f043 0210 	orr.w	r2, r3, #16
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d48:	68b8      	ldr	r0, [r7, #8]
 8006d4a:	f7ff ff49 	bl	8006be0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d4e:	bf00      	nop
 8006d50:	3710      	adds	r7, #16
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}

08006d56 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006d56:	b580      	push	{r7, lr}
 8006d58:	b090      	sub	sp, #64	@ 0x40
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	60f8      	str	r0, [r7, #12]
 8006d5e:	60b9      	str	r1, [r7, #8]
 8006d60:	603b      	str	r3, [r7, #0]
 8006d62:	4613      	mov	r3, r2
 8006d64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d66:	e050      	b.n	8006e0a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d6e:	d04c      	beq.n	8006e0a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006d70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d007      	beq.n	8006d86 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d76:	f7fb f927 	bl	8001fc8 <HAL_GetTick>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	1ad3      	subs	r3, r2, r3
 8006d80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d241      	bcs.n	8006e0a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	330c      	adds	r3, #12
 8006d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d90:	e853 3f00 	ldrex	r3, [r3]
 8006d94:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d98:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	330c      	adds	r3, #12
 8006da4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006da6:	637a      	str	r2, [r7, #52]	@ 0x34
 8006da8:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006daa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006dac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006dae:	e841 2300 	strex	r3, r2, [r1]
 8006db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d1e5      	bne.n	8006d86 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	3314      	adds	r3, #20
 8006dc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	e853 3f00 	ldrex	r3, [r3]
 8006dc8:	613b      	str	r3, [r7, #16]
   return(result);
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	f023 0301 	bic.w	r3, r3, #1
 8006dd0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	3314      	adds	r3, #20
 8006dd8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006dda:	623a      	str	r2, [r7, #32]
 8006ddc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dde:	69f9      	ldr	r1, [r7, #28]
 8006de0:	6a3a      	ldr	r2, [r7, #32]
 8006de2:	e841 2300 	strex	r3, r2, [r1]
 8006de6:	61bb      	str	r3, [r7, #24]
   return(result);
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d1e5      	bne.n	8006dba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2220      	movs	r2, #32
 8006df2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2220      	movs	r2, #32
 8006dfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2200      	movs	r2, #0
 8006e02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8006e06:	2303      	movs	r3, #3
 8006e08:	e00f      	b.n	8006e2a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	4013      	ands	r3, r2
 8006e14:	68ba      	ldr	r2, [r7, #8]
 8006e16:	429a      	cmp	r2, r3
 8006e18:	bf0c      	ite	eq
 8006e1a:	2301      	moveq	r3, #1
 8006e1c:	2300      	movne	r3, #0
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	461a      	mov	r2, r3
 8006e22:	79fb      	ldrb	r3, [r7, #7]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d09f      	beq.n	8006d68 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3740      	adds	r7, #64	@ 0x40
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}

08006e32 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006e32:	b480      	push	{r7}
 8006e34:	b089      	sub	sp, #36	@ 0x24
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	330c      	adds	r3, #12
 8006e40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	e853 3f00 	ldrex	r3, [r3]
 8006e48:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006e50:	61fb      	str	r3, [r7, #28]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	330c      	adds	r3, #12
 8006e58:	69fa      	ldr	r2, [r7, #28]
 8006e5a:	61ba      	str	r2, [r7, #24]
 8006e5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5e:	6979      	ldr	r1, [r7, #20]
 8006e60:	69ba      	ldr	r2, [r7, #24]
 8006e62:	e841 2300 	strex	r3, r2, [r1]
 8006e66:	613b      	str	r3, [r7, #16]
   return(result);
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d1e5      	bne.n	8006e3a <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2220      	movs	r2, #32
 8006e72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 8006e76:	bf00      	nop
 8006e78:	3724      	adds	r7, #36	@ 0x24
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr

08006e82 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e82:	b480      	push	{r7}
 8006e84:	b095      	sub	sp, #84	@ 0x54
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	330c      	adds	r3, #12
 8006e90:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e94:	e853 3f00 	ldrex	r3, [r3]
 8006e98:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ea0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	330c      	adds	r3, #12
 8006ea8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006eaa:	643a      	str	r2, [r7, #64]	@ 0x40
 8006eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006eb0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006eb2:	e841 2300 	strex	r3, r2, [r1]
 8006eb6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d1e5      	bne.n	8006e8a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	3314      	adds	r3, #20
 8006ec4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec6:	6a3b      	ldr	r3, [r7, #32]
 8006ec8:	e853 3f00 	ldrex	r3, [r3]
 8006ecc:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ece:	69fb      	ldr	r3, [r7, #28]
 8006ed0:	f023 0301 	bic.w	r3, r3, #1
 8006ed4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	3314      	adds	r3, #20
 8006edc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ede:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ee0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ee4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ee6:	e841 2300 	strex	r3, r2, [r1]
 8006eea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d1e5      	bne.n	8006ebe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d119      	bne.n	8006f2e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	330c      	adds	r3, #12
 8006f00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	e853 3f00 	ldrex	r3, [r3]
 8006f08:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	f023 0310 	bic.w	r3, r3, #16
 8006f10:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	330c      	adds	r3, #12
 8006f18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f1a:	61ba      	str	r2, [r7, #24]
 8006f1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1e:	6979      	ldr	r1, [r7, #20]
 8006f20:	69ba      	ldr	r2, [r7, #24]
 8006f22:	e841 2300 	strex	r3, r2, [r1]
 8006f26:	613b      	str	r3, [r7, #16]
   return(result);
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d1e5      	bne.n	8006efa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2220      	movs	r2, #32
 8006f32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006f3c:	bf00      	nop
 8006f3e:	3754      	adds	r7, #84	@ 0x54
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f54:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f62:	68f8      	ldr	r0, [r7, #12]
 8006f64:	f7ff fe3c 	bl	8006be0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f68:	bf00      	nop
 8006f6a:	3710      	adds	r7, #16
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b085      	sub	sp, #20
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	2b21      	cmp	r3, #33	@ 0x21
 8006f82:	d13e      	bne.n	8007002 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f8c:	d114      	bne.n	8006fb8 <UART_Transmit_IT+0x48>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d110      	bne.n	8006fb8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6a1b      	ldr	r3, [r3, #32]
 8006f9a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	881b      	ldrh	r3, [r3, #0]
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006faa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6a1b      	ldr	r3, [r3, #32]
 8006fb0:	1c9a      	adds	r2, r3, #2
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	621a      	str	r2, [r3, #32]
 8006fb6:	e008      	b.n	8006fca <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6a1b      	ldr	r3, [r3, #32]
 8006fbc:	1c59      	adds	r1, r3, #1
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	6211      	str	r1, [r2, #32]
 8006fc2:	781a      	ldrb	r2, [r3, #0]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d10f      	bne.n	8006ffe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	68da      	ldr	r2, [r3, #12]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006fec:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	68da      	ldr	r2, [r3, #12]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ffc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006ffe:	2300      	movs	r3, #0
 8007000:	e000      	b.n	8007004 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007002:	2302      	movs	r3, #2
  }
}
 8007004:	4618      	mov	r0, r3
 8007006:	3714      	adds	r7, #20
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b082      	sub	sp, #8
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	68da      	ldr	r2, [r3, #12]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007026:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2220      	movs	r2, #32
 800702c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f7ff fdb7 	bl	8006ba4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007036:	2300      	movs	r3, #0
}
 8007038:	4618      	mov	r0, r3
 800703a:	3708      	adds	r7, #8
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b08c      	sub	sp, #48	@ 0x30
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800704e:	b2db      	uxtb	r3, r3
 8007050:	2b22      	cmp	r3, #34	@ 0x22
 8007052:	f040 80ab 	bne.w	80071ac <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800705e:	d117      	bne.n	8007090 <UART_Receive_IT+0x50>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	691b      	ldr	r3, [r3, #16]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d113      	bne.n	8007090 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007068:	2300      	movs	r3, #0
 800706a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007070:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	b29b      	uxth	r3, r3
 800707a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800707e:	b29a      	uxth	r2, r3
 8007080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007082:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007088:	1c9a      	adds	r2, r3, #2
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	629a      	str	r2, [r3, #40]	@ 0x28
 800708e:	e026      	b.n	80070de <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007094:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007096:	2300      	movs	r3, #0
 8007098:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070a2:	d007      	beq.n	80070b4 <UART_Receive_IT+0x74>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d10a      	bne.n	80070c2 <UART_Receive_IT+0x82>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	691b      	ldr	r3, [r3, #16]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d106      	bne.n	80070c2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	b2da      	uxtb	r2, r3
 80070bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070be:	701a      	strb	r2, [r3, #0]
 80070c0:	e008      	b.n	80070d4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070ce:	b2da      	uxtb	r2, r3
 80070d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070d2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070d8:	1c5a      	adds	r2, r3, #1
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	3b01      	subs	r3, #1
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	4619      	mov	r1, r3
 80070ec:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d15a      	bne.n	80071a8 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	68da      	ldr	r2, [r3, #12]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f022 0220 	bic.w	r2, r2, #32
 8007100:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	68da      	ldr	r2, [r3, #12]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007110:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	695a      	ldr	r2, [r3, #20]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f022 0201 	bic.w	r2, r2, #1
 8007120:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2220      	movs	r2, #32
 8007126:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800712e:	2b01      	cmp	r3, #1
 8007130:	d135      	bne.n	800719e <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	330c      	adds	r3, #12
 800713e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	e853 3f00 	ldrex	r3, [r3]
 8007146:	613b      	str	r3, [r7, #16]
   return(result);
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	f023 0310 	bic.w	r3, r3, #16
 800714e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	330c      	adds	r3, #12
 8007156:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007158:	623a      	str	r2, [r7, #32]
 800715a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715c:	69f9      	ldr	r1, [r7, #28]
 800715e:	6a3a      	ldr	r2, [r7, #32]
 8007160:	e841 2300 	strex	r3, r2, [r1]
 8007164:	61bb      	str	r3, [r7, #24]
   return(result);
 8007166:	69bb      	ldr	r3, [r7, #24]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d1e5      	bne.n	8007138 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f003 0310 	and.w	r3, r3, #16
 8007176:	2b10      	cmp	r3, #16
 8007178:	d10a      	bne.n	8007190 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800717a:	2300      	movs	r3, #0
 800717c:	60fb      	str	r3, [r7, #12]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	60fb      	str	r3, [r7, #12]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	60fb      	str	r3, [r7, #12]
 800718e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007194:	4619      	mov	r1, r3
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f7ff fd2c 	bl	8006bf4 <HAL_UARTEx_RxEventCallback>
 800719c:	e002      	b.n	80071a4 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f7ff fd14 	bl	8006bcc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80071a4:	2300      	movs	r3, #0
 80071a6:	e002      	b.n	80071ae <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80071a8:	2300      	movs	r3, #0
 80071aa:	e000      	b.n	80071ae <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80071ac:	2302      	movs	r3, #2
  }
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3730      	adds	r7, #48	@ 0x30
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
	...

080071b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071bc:	b0c0      	sub	sp, #256	@ 0x100
 80071be:	af00      	add	r7, sp, #0
 80071c0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80071d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071d4:	68d9      	ldr	r1, [r3, #12]
 80071d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	ea40 0301 	orr.w	r3, r0, r1
 80071e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80071e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071e6:	689a      	ldr	r2, [r3, #8]
 80071e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071ec:	691b      	ldr	r3, [r3, #16]
 80071ee:	431a      	orrs	r2, r3
 80071f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071f4:	695b      	ldr	r3, [r3, #20]
 80071f6:	431a      	orrs	r2, r3
 80071f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071fc:	69db      	ldr	r3, [r3, #28]
 80071fe:	4313      	orrs	r3, r2
 8007200:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007210:	f021 010c 	bic.w	r1, r1, #12
 8007214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800721e:	430b      	orrs	r3, r1
 8007220:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	695b      	ldr	r3, [r3, #20]
 800722a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800722e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007232:	6999      	ldr	r1, [r3, #24]
 8007234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	ea40 0301 	orr.w	r3, r0, r1
 800723e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	4b8f      	ldr	r3, [pc, #572]	@ (8007484 <UART_SetConfig+0x2cc>)
 8007248:	429a      	cmp	r2, r3
 800724a:	d005      	beq.n	8007258 <UART_SetConfig+0xa0>
 800724c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	4b8d      	ldr	r3, [pc, #564]	@ (8007488 <UART_SetConfig+0x2d0>)
 8007254:	429a      	cmp	r2, r3
 8007256:	d104      	bne.n	8007262 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007258:	f7fe fc5e 	bl	8005b18 <HAL_RCC_GetPCLK2Freq>
 800725c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007260:	e003      	b.n	800726a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007262:	f7fe fc45 	bl	8005af0 <HAL_RCC_GetPCLK1Freq>
 8007266:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800726a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800726e:	69db      	ldr	r3, [r3, #28]
 8007270:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007274:	f040 810c 	bne.w	8007490 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007278:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800727c:	2200      	movs	r2, #0
 800727e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007282:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007286:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800728a:	4622      	mov	r2, r4
 800728c:	462b      	mov	r3, r5
 800728e:	1891      	adds	r1, r2, r2
 8007290:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007292:	415b      	adcs	r3, r3
 8007294:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007296:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800729a:	4621      	mov	r1, r4
 800729c:	eb12 0801 	adds.w	r8, r2, r1
 80072a0:	4629      	mov	r1, r5
 80072a2:	eb43 0901 	adc.w	r9, r3, r1
 80072a6:	f04f 0200 	mov.w	r2, #0
 80072aa:	f04f 0300 	mov.w	r3, #0
 80072ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80072b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80072b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80072ba:	4690      	mov	r8, r2
 80072bc:	4699      	mov	r9, r3
 80072be:	4623      	mov	r3, r4
 80072c0:	eb18 0303 	adds.w	r3, r8, r3
 80072c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80072c8:	462b      	mov	r3, r5
 80072ca:	eb49 0303 	adc.w	r3, r9, r3
 80072ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80072d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80072de:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80072e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80072e6:	460b      	mov	r3, r1
 80072e8:	18db      	adds	r3, r3, r3
 80072ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80072ec:	4613      	mov	r3, r2
 80072ee:	eb42 0303 	adc.w	r3, r2, r3
 80072f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80072f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80072f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80072fc:	f7f9 fcac 	bl	8000c58 <__aeabi_uldivmod>
 8007300:	4602      	mov	r2, r0
 8007302:	460b      	mov	r3, r1
 8007304:	4b61      	ldr	r3, [pc, #388]	@ (800748c <UART_SetConfig+0x2d4>)
 8007306:	fba3 2302 	umull	r2, r3, r3, r2
 800730a:	095b      	lsrs	r3, r3, #5
 800730c:	011c      	lsls	r4, r3, #4
 800730e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007312:	2200      	movs	r2, #0
 8007314:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007318:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800731c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007320:	4642      	mov	r2, r8
 8007322:	464b      	mov	r3, r9
 8007324:	1891      	adds	r1, r2, r2
 8007326:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007328:	415b      	adcs	r3, r3
 800732a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800732c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007330:	4641      	mov	r1, r8
 8007332:	eb12 0a01 	adds.w	sl, r2, r1
 8007336:	4649      	mov	r1, r9
 8007338:	eb43 0b01 	adc.w	fp, r3, r1
 800733c:	f04f 0200 	mov.w	r2, #0
 8007340:	f04f 0300 	mov.w	r3, #0
 8007344:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007348:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800734c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007350:	4692      	mov	sl, r2
 8007352:	469b      	mov	fp, r3
 8007354:	4643      	mov	r3, r8
 8007356:	eb1a 0303 	adds.w	r3, sl, r3
 800735a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800735e:	464b      	mov	r3, r9
 8007360:	eb4b 0303 	adc.w	r3, fp, r3
 8007364:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007374:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007378:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800737c:	460b      	mov	r3, r1
 800737e:	18db      	adds	r3, r3, r3
 8007380:	643b      	str	r3, [r7, #64]	@ 0x40
 8007382:	4613      	mov	r3, r2
 8007384:	eb42 0303 	adc.w	r3, r2, r3
 8007388:	647b      	str	r3, [r7, #68]	@ 0x44
 800738a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800738e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007392:	f7f9 fc61 	bl	8000c58 <__aeabi_uldivmod>
 8007396:	4602      	mov	r2, r0
 8007398:	460b      	mov	r3, r1
 800739a:	4611      	mov	r1, r2
 800739c:	4b3b      	ldr	r3, [pc, #236]	@ (800748c <UART_SetConfig+0x2d4>)
 800739e:	fba3 2301 	umull	r2, r3, r3, r1
 80073a2:	095b      	lsrs	r3, r3, #5
 80073a4:	2264      	movs	r2, #100	@ 0x64
 80073a6:	fb02 f303 	mul.w	r3, r2, r3
 80073aa:	1acb      	subs	r3, r1, r3
 80073ac:	00db      	lsls	r3, r3, #3
 80073ae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80073b2:	4b36      	ldr	r3, [pc, #216]	@ (800748c <UART_SetConfig+0x2d4>)
 80073b4:	fba3 2302 	umull	r2, r3, r3, r2
 80073b8:	095b      	lsrs	r3, r3, #5
 80073ba:	005b      	lsls	r3, r3, #1
 80073bc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80073c0:	441c      	add	r4, r3
 80073c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073c6:	2200      	movs	r2, #0
 80073c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80073cc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80073d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80073d4:	4642      	mov	r2, r8
 80073d6:	464b      	mov	r3, r9
 80073d8:	1891      	adds	r1, r2, r2
 80073da:	63b9      	str	r1, [r7, #56]	@ 0x38
 80073dc:	415b      	adcs	r3, r3
 80073de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80073e4:	4641      	mov	r1, r8
 80073e6:	1851      	adds	r1, r2, r1
 80073e8:	6339      	str	r1, [r7, #48]	@ 0x30
 80073ea:	4649      	mov	r1, r9
 80073ec:	414b      	adcs	r3, r1
 80073ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80073f0:	f04f 0200 	mov.w	r2, #0
 80073f4:	f04f 0300 	mov.w	r3, #0
 80073f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80073fc:	4659      	mov	r1, fp
 80073fe:	00cb      	lsls	r3, r1, #3
 8007400:	4651      	mov	r1, sl
 8007402:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007406:	4651      	mov	r1, sl
 8007408:	00ca      	lsls	r2, r1, #3
 800740a:	4610      	mov	r0, r2
 800740c:	4619      	mov	r1, r3
 800740e:	4603      	mov	r3, r0
 8007410:	4642      	mov	r2, r8
 8007412:	189b      	adds	r3, r3, r2
 8007414:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007418:	464b      	mov	r3, r9
 800741a:	460a      	mov	r2, r1
 800741c:	eb42 0303 	adc.w	r3, r2, r3
 8007420:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	2200      	movs	r2, #0
 800742c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007430:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007434:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007438:	460b      	mov	r3, r1
 800743a:	18db      	adds	r3, r3, r3
 800743c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800743e:	4613      	mov	r3, r2
 8007440:	eb42 0303 	adc.w	r3, r2, r3
 8007444:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007446:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800744a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800744e:	f7f9 fc03 	bl	8000c58 <__aeabi_uldivmod>
 8007452:	4602      	mov	r2, r0
 8007454:	460b      	mov	r3, r1
 8007456:	4b0d      	ldr	r3, [pc, #52]	@ (800748c <UART_SetConfig+0x2d4>)
 8007458:	fba3 1302 	umull	r1, r3, r3, r2
 800745c:	095b      	lsrs	r3, r3, #5
 800745e:	2164      	movs	r1, #100	@ 0x64
 8007460:	fb01 f303 	mul.w	r3, r1, r3
 8007464:	1ad3      	subs	r3, r2, r3
 8007466:	00db      	lsls	r3, r3, #3
 8007468:	3332      	adds	r3, #50	@ 0x32
 800746a:	4a08      	ldr	r2, [pc, #32]	@ (800748c <UART_SetConfig+0x2d4>)
 800746c:	fba2 2303 	umull	r2, r3, r2, r3
 8007470:	095b      	lsrs	r3, r3, #5
 8007472:	f003 0207 	and.w	r2, r3, #7
 8007476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4422      	add	r2, r4
 800747e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007480:	e106      	b.n	8007690 <UART_SetConfig+0x4d8>
 8007482:	bf00      	nop
 8007484:	40011000 	.word	0x40011000
 8007488:	40011400 	.word	0x40011400
 800748c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007490:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007494:	2200      	movs	r2, #0
 8007496:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800749a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800749e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80074a2:	4642      	mov	r2, r8
 80074a4:	464b      	mov	r3, r9
 80074a6:	1891      	adds	r1, r2, r2
 80074a8:	6239      	str	r1, [r7, #32]
 80074aa:	415b      	adcs	r3, r3
 80074ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80074ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80074b2:	4641      	mov	r1, r8
 80074b4:	1854      	adds	r4, r2, r1
 80074b6:	4649      	mov	r1, r9
 80074b8:	eb43 0501 	adc.w	r5, r3, r1
 80074bc:	f04f 0200 	mov.w	r2, #0
 80074c0:	f04f 0300 	mov.w	r3, #0
 80074c4:	00eb      	lsls	r3, r5, #3
 80074c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80074ca:	00e2      	lsls	r2, r4, #3
 80074cc:	4614      	mov	r4, r2
 80074ce:	461d      	mov	r5, r3
 80074d0:	4643      	mov	r3, r8
 80074d2:	18e3      	adds	r3, r4, r3
 80074d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80074d8:	464b      	mov	r3, r9
 80074da:	eb45 0303 	adc.w	r3, r5, r3
 80074de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80074e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80074ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80074f2:	f04f 0200 	mov.w	r2, #0
 80074f6:	f04f 0300 	mov.w	r3, #0
 80074fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80074fe:	4629      	mov	r1, r5
 8007500:	008b      	lsls	r3, r1, #2
 8007502:	4621      	mov	r1, r4
 8007504:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007508:	4621      	mov	r1, r4
 800750a:	008a      	lsls	r2, r1, #2
 800750c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007510:	f7f9 fba2 	bl	8000c58 <__aeabi_uldivmod>
 8007514:	4602      	mov	r2, r0
 8007516:	460b      	mov	r3, r1
 8007518:	4b60      	ldr	r3, [pc, #384]	@ (800769c <UART_SetConfig+0x4e4>)
 800751a:	fba3 2302 	umull	r2, r3, r3, r2
 800751e:	095b      	lsrs	r3, r3, #5
 8007520:	011c      	lsls	r4, r3, #4
 8007522:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007526:	2200      	movs	r2, #0
 8007528:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800752c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007530:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007534:	4642      	mov	r2, r8
 8007536:	464b      	mov	r3, r9
 8007538:	1891      	adds	r1, r2, r2
 800753a:	61b9      	str	r1, [r7, #24]
 800753c:	415b      	adcs	r3, r3
 800753e:	61fb      	str	r3, [r7, #28]
 8007540:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007544:	4641      	mov	r1, r8
 8007546:	1851      	adds	r1, r2, r1
 8007548:	6139      	str	r1, [r7, #16]
 800754a:	4649      	mov	r1, r9
 800754c:	414b      	adcs	r3, r1
 800754e:	617b      	str	r3, [r7, #20]
 8007550:	f04f 0200 	mov.w	r2, #0
 8007554:	f04f 0300 	mov.w	r3, #0
 8007558:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800755c:	4659      	mov	r1, fp
 800755e:	00cb      	lsls	r3, r1, #3
 8007560:	4651      	mov	r1, sl
 8007562:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007566:	4651      	mov	r1, sl
 8007568:	00ca      	lsls	r2, r1, #3
 800756a:	4610      	mov	r0, r2
 800756c:	4619      	mov	r1, r3
 800756e:	4603      	mov	r3, r0
 8007570:	4642      	mov	r2, r8
 8007572:	189b      	adds	r3, r3, r2
 8007574:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007578:	464b      	mov	r3, r9
 800757a:	460a      	mov	r2, r1
 800757c:	eb42 0303 	adc.w	r3, r2, r3
 8007580:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800758e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007590:	f04f 0200 	mov.w	r2, #0
 8007594:	f04f 0300 	mov.w	r3, #0
 8007598:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800759c:	4649      	mov	r1, r9
 800759e:	008b      	lsls	r3, r1, #2
 80075a0:	4641      	mov	r1, r8
 80075a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075a6:	4641      	mov	r1, r8
 80075a8:	008a      	lsls	r2, r1, #2
 80075aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80075ae:	f7f9 fb53 	bl	8000c58 <__aeabi_uldivmod>
 80075b2:	4602      	mov	r2, r0
 80075b4:	460b      	mov	r3, r1
 80075b6:	4611      	mov	r1, r2
 80075b8:	4b38      	ldr	r3, [pc, #224]	@ (800769c <UART_SetConfig+0x4e4>)
 80075ba:	fba3 2301 	umull	r2, r3, r3, r1
 80075be:	095b      	lsrs	r3, r3, #5
 80075c0:	2264      	movs	r2, #100	@ 0x64
 80075c2:	fb02 f303 	mul.w	r3, r2, r3
 80075c6:	1acb      	subs	r3, r1, r3
 80075c8:	011b      	lsls	r3, r3, #4
 80075ca:	3332      	adds	r3, #50	@ 0x32
 80075cc:	4a33      	ldr	r2, [pc, #204]	@ (800769c <UART_SetConfig+0x4e4>)
 80075ce:	fba2 2303 	umull	r2, r3, r2, r3
 80075d2:	095b      	lsrs	r3, r3, #5
 80075d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80075d8:	441c      	add	r4, r3
 80075da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075de:	2200      	movs	r2, #0
 80075e0:	673b      	str	r3, [r7, #112]	@ 0x70
 80075e2:	677a      	str	r2, [r7, #116]	@ 0x74
 80075e4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80075e8:	4642      	mov	r2, r8
 80075ea:	464b      	mov	r3, r9
 80075ec:	1891      	adds	r1, r2, r2
 80075ee:	60b9      	str	r1, [r7, #8]
 80075f0:	415b      	adcs	r3, r3
 80075f2:	60fb      	str	r3, [r7, #12]
 80075f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80075f8:	4641      	mov	r1, r8
 80075fa:	1851      	adds	r1, r2, r1
 80075fc:	6039      	str	r1, [r7, #0]
 80075fe:	4649      	mov	r1, r9
 8007600:	414b      	adcs	r3, r1
 8007602:	607b      	str	r3, [r7, #4]
 8007604:	f04f 0200 	mov.w	r2, #0
 8007608:	f04f 0300 	mov.w	r3, #0
 800760c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007610:	4659      	mov	r1, fp
 8007612:	00cb      	lsls	r3, r1, #3
 8007614:	4651      	mov	r1, sl
 8007616:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800761a:	4651      	mov	r1, sl
 800761c:	00ca      	lsls	r2, r1, #3
 800761e:	4610      	mov	r0, r2
 8007620:	4619      	mov	r1, r3
 8007622:	4603      	mov	r3, r0
 8007624:	4642      	mov	r2, r8
 8007626:	189b      	adds	r3, r3, r2
 8007628:	66bb      	str	r3, [r7, #104]	@ 0x68
 800762a:	464b      	mov	r3, r9
 800762c:	460a      	mov	r2, r1
 800762e:	eb42 0303 	adc.w	r3, r2, r3
 8007632:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	2200      	movs	r2, #0
 800763c:	663b      	str	r3, [r7, #96]	@ 0x60
 800763e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007640:	f04f 0200 	mov.w	r2, #0
 8007644:	f04f 0300 	mov.w	r3, #0
 8007648:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800764c:	4649      	mov	r1, r9
 800764e:	008b      	lsls	r3, r1, #2
 8007650:	4641      	mov	r1, r8
 8007652:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007656:	4641      	mov	r1, r8
 8007658:	008a      	lsls	r2, r1, #2
 800765a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800765e:	f7f9 fafb 	bl	8000c58 <__aeabi_uldivmod>
 8007662:	4602      	mov	r2, r0
 8007664:	460b      	mov	r3, r1
 8007666:	4b0d      	ldr	r3, [pc, #52]	@ (800769c <UART_SetConfig+0x4e4>)
 8007668:	fba3 1302 	umull	r1, r3, r3, r2
 800766c:	095b      	lsrs	r3, r3, #5
 800766e:	2164      	movs	r1, #100	@ 0x64
 8007670:	fb01 f303 	mul.w	r3, r1, r3
 8007674:	1ad3      	subs	r3, r2, r3
 8007676:	011b      	lsls	r3, r3, #4
 8007678:	3332      	adds	r3, #50	@ 0x32
 800767a:	4a08      	ldr	r2, [pc, #32]	@ (800769c <UART_SetConfig+0x4e4>)
 800767c:	fba2 2303 	umull	r2, r3, r2, r3
 8007680:	095b      	lsrs	r3, r3, #5
 8007682:	f003 020f 	and.w	r2, r3, #15
 8007686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4422      	add	r2, r4
 800768e:	609a      	str	r2, [r3, #8]
}
 8007690:	bf00      	nop
 8007692:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007696:	46bd      	mov	sp, r7
 8007698:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800769c:	51eb851f 	.word	0x51eb851f

080076a0 <__cvt>:
 80076a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076a4:	ec57 6b10 	vmov	r6, r7, d0
 80076a8:	2f00      	cmp	r7, #0
 80076aa:	460c      	mov	r4, r1
 80076ac:	4619      	mov	r1, r3
 80076ae:	463b      	mov	r3, r7
 80076b0:	bfbb      	ittet	lt
 80076b2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80076b6:	461f      	movlt	r7, r3
 80076b8:	2300      	movge	r3, #0
 80076ba:	232d      	movlt	r3, #45	@ 0x2d
 80076bc:	700b      	strb	r3, [r1, #0]
 80076be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80076c0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80076c4:	4691      	mov	r9, r2
 80076c6:	f023 0820 	bic.w	r8, r3, #32
 80076ca:	bfbc      	itt	lt
 80076cc:	4632      	movlt	r2, r6
 80076ce:	4616      	movlt	r6, r2
 80076d0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80076d4:	d005      	beq.n	80076e2 <__cvt+0x42>
 80076d6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80076da:	d100      	bne.n	80076de <__cvt+0x3e>
 80076dc:	3401      	adds	r4, #1
 80076de:	2102      	movs	r1, #2
 80076e0:	e000      	b.n	80076e4 <__cvt+0x44>
 80076e2:	2103      	movs	r1, #3
 80076e4:	ab03      	add	r3, sp, #12
 80076e6:	9301      	str	r3, [sp, #4]
 80076e8:	ab02      	add	r3, sp, #8
 80076ea:	9300      	str	r3, [sp, #0]
 80076ec:	ec47 6b10 	vmov	d0, r6, r7
 80076f0:	4653      	mov	r3, sl
 80076f2:	4622      	mov	r2, r4
 80076f4:	f000 fe70 	bl	80083d8 <_dtoa_r>
 80076f8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80076fc:	4605      	mov	r5, r0
 80076fe:	d119      	bne.n	8007734 <__cvt+0x94>
 8007700:	f019 0f01 	tst.w	r9, #1
 8007704:	d00e      	beq.n	8007724 <__cvt+0x84>
 8007706:	eb00 0904 	add.w	r9, r0, r4
 800770a:	2200      	movs	r2, #0
 800770c:	2300      	movs	r3, #0
 800770e:	4630      	mov	r0, r6
 8007710:	4639      	mov	r1, r7
 8007712:	f7f9 f9e1 	bl	8000ad8 <__aeabi_dcmpeq>
 8007716:	b108      	cbz	r0, 800771c <__cvt+0x7c>
 8007718:	f8cd 900c 	str.w	r9, [sp, #12]
 800771c:	2230      	movs	r2, #48	@ 0x30
 800771e:	9b03      	ldr	r3, [sp, #12]
 8007720:	454b      	cmp	r3, r9
 8007722:	d31e      	bcc.n	8007762 <__cvt+0xc2>
 8007724:	9b03      	ldr	r3, [sp, #12]
 8007726:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007728:	1b5b      	subs	r3, r3, r5
 800772a:	4628      	mov	r0, r5
 800772c:	6013      	str	r3, [r2, #0]
 800772e:	b004      	add	sp, #16
 8007730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007734:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007738:	eb00 0904 	add.w	r9, r0, r4
 800773c:	d1e5      	bne.n	800770a <__cvt+0x6a>
 800773e:	7803      	ldrb	r3, [r0, #0]
 8007740:	2b30      	cmp	r3, #48	@ 0x30
 8007742:	d10a      	bne.n	800775a <__cvt+0xba>
 8007744:	2200      	movs	r2, #0
 8007746:	2300      	movs	r3, #0
 8007748:	4630      	mov	r0, r6
 800774a:	4639      	mov	r1, r7
 800774c:	f7f9 f9c4 	bl	8000ad8 <__aeabi_dcmpeq>
 8007750:	b918      	cbnz	r0, 800775a <__cvt+0xba>
 8007752:	f1c4 0401 	rsb	r4, r4, #1
 8007756:	f8ca 4000 	str.w	r4, [sl]
 800775a:	f8da 3000 	ldr.w	r3, [sl]
 800775e:	4499      	add	r9, r3
 8007760:	e7d3      	b.n	800770a <__cvt+0x6a>
 8007762:	1c59      	adds	r1, r3, #1
 8007764:	9103      	str	r1, [sp, #12]
 8007766:	701a      	strb	r2, [r3, #0]
 8007768:	e7d9      	b.n	800771e <__cvt+0x7e>

0800776a <__exponent>:
 800776a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800776c:	2900      	cmp	r1, #0
 800776e:	bfba      	itte	lt
 8007770:	4249      	neglt	r1, r1
 8007772:	232d      	movlt	r3, #45	@ 0x2d
 8007774:	232b      	movge	r3, #43	@ 0x2b
 8007776:	2909      	cmp	r1, #9
 8007778:	7002      	strb	r2, [r0, #0]
 800777a:	7043      	strb	r3, [r0, #1]
 800777c:	dd29      	ble.n	80077d2 <__exponent+0x68>
 800777e:	f10d 0307 	add.w	r3, sp, #7
 8007782:	461d      	mov	r5, r3
 8007784:	270a      	movs	r7, #10
 8007786:	461a      	mov	r2, r3
 8007788:	fbb1 f6f7 	udiv	r6, r1, r7
 800778c:	fb07 1416 	mls	r4, r7, r6, r1
 8007790:	3430      	adds	r4, #48	@ 0x30
 8007792:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007796:	460c      	mov	r4, r1
 8007798:	2c63      	cmp	r4, #99	@ 0x63
 800779a:	f103 33ff 	add.w	r3, r3, #4294967295
 800779e:	4631      	mov	r1, r6
 80077a0:	dcf1      	bgt.n	8007786 <__exponent+0x1c>
 80077a2:	3130      	adds	r1, #48	@ 0x30
 80077a4:	1e94      	subs	r4, r2, #2
 80077a6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80077aa:	1c41      	adds	r1, r0, #1
 80077ac:	4623      	mov	r3, r4
 80077ae:	42ab      	cmp	r3, r5
 80077b0:	d30a      	bcc.n	80077c8 <__exponent+0x5e>
 80077b2:	f10d 0309 	add.w	r3, sp, #9
 80077b6:	1a9b      	subs	r3, r3, r2
 80077b8:	42ac      	cmp	r4, r5
 80077ba:	bf88      	it	hi
 80077bc:	2300      	movhi	r3, #0
 80077be:	3302      	adds	r3, #2
 80077c0:	4403      	add	r3, r0
 80077c2:	1a18      	subs	r0, r3, r0
 80077c4:	b003      	add	sp, #12
 80077c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077c8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80077cc:	f801 6f01 	strb.w	r6, [r1, #1]!
 80077d0:	e7ed      	b.n	80077ae <__exponent+0x44>
 80077d2:	2330      	movs	r3, #48	@ 0x30
 80077d4:	3130      	adds	r1, #48	@ 0x30
 80077d6:	7083      	strb	r3, [r0, #2]
 80077d8:	70c1      	strb	r1, [r0, #3]
 80077da:	1d03      	adds	r3, r0, #4
 80077dc:	e7f1      	b.n	80077c2 <__exponent+0x58>
	...

080077e0 <_printf_float>:
 80077e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077e4:	b08d      	sub	sp, #52	@ 0x34
 80077e6:	460c      	mov	r4, r1
 80077e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80077ec:	4616      	mov	r6, r2
 80077ee:	461f      	mov	r7, r3
 80077f0:	4605      	mov	r5, r0
 80077f2:	f000 fcef 	bl	80081d4 <_localeconv_r>
 80077f6:	6803      	ldr	r3, [r0, #0]
 80077f8:	9304      	str	r3, [sp, #16]
 80077fa:	4618      	mov	r0, r3
 80077fc:	f7f8 fd40 	bl	8000280 <strlen>
 8007800:	2300      	movs	r3, #0
 8007802:	930a      	str	r3, [sp, #40]	@ 0x28
 8007804:	f8d8 3000 	ldr.w	r3, [r8]
 8007808:	9005      	str	r0, [sp, #20]
 800780a:	3307      	adds	r3, #7
 800780c:	f023 0307 	bic.w	r3, r3, #7
 8007810:	f103 0208 	add.w	r2, r3, #8
 8007814:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007818:	f8d4 b000 	ldr.w	fp, [r4]
 800781c:	f8c8 2000 	str.w	r2, [r8]
 8007820:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007824:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007828:	9307      	str	r3, [sp, #28]
 800782a:	f8cd 8018 	str.w	r8, [sp, #24]
 800782e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007832:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007836:	4b9c      	ldr	r3, [pc, #624]	@ (8007aa8 <_printf_float+0x2c8>)
 8007838:	f04f 32ff 	mov.w	r2, #4294967295
 800783c:	f7f9 f97e 	bl	8000b3c <__aeabi_dcmpun>
 8007840:	bb70      	cbnz	r0, 80078a0 <_printf_float+0xc0>
 8007842:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007846:	4b98      	ldr	r3, [pc, #608]	@ (8007aa8 <_printf_float+0x2c8>)
 8007848:	f04f 32ff 	mov.w	r2, #4294967295
 800784c:	f7f9 f958 	bl	8000b00 <__aeabi_dcmple>
 8007850:	bb30      	cbnz	r0, 80078a0 <_printf_float+0xc0>
 8007852:	2200      	movs	r2, #0
 8007854:	2300      	movs	r3, #0
 8007856:	4640      	mov	r0, r8
 8007858:	4649      	mov	r1, r9
 800785a:	f7f9 f947 	bl	8000aec <__aeabi_dcmplt>
 800785e:	b110      	cbz	r0, 8007866 <_printf_float+0x86>
 8007860:	232d      	movs	r3, #45	@ 0x2d
 8007862:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007866:	4a91      	ldr	r2, [pc, #580]	@ (8007aac <_printf_float+0x2cc>)
 8007868:	4b91      	ldr	r3, [pc, #580]	@ (8007ab0 <_printf_float+0x2d0>)
 800786a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800786e:	bf94      	ite	ls
 8007870:	4690      	movls	r8, r2
 8007872:	4698      	movhi	r8, r3
 8007874:	2303      	movs	r3, #3
 8007876:	6123      	str	r3, [r4, #16]
 8007878:	f02b 0304 	bic.w	r3, fp, #4
 800787c:	6023      	str	r3, [r4, #0]
 800787e:	f04f 0900 	mov.w	r9, #0
 8007882:	9700      	str	r7, [sp, #0]
 8007884:	4633      	mov	r3, r6
 8007886:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007888:	4621      	mov	r1, r4
 800788a:	4628      	mov	r0, r5
 800788c:	f000 f9d2 	bl	8007c34 <_printf_common>
 8007890:	3001      	adds	r0, #1
 8007892:	f040 808d 	bne.w	80079b0 <_printf_float+0x1d0>
 8007896:	f04f 30ff 	mov.w	r0, #4294967295
 800789a:	b00d      	add	sp, #52	@ 0x34
 800789c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078a0:	4642      	mov	r2, r8
 80078a2:	464b      	mov	r3, r9
 80078a4:	4640      	mov	r0, r8
 80078a6:	4649      	mov	r1, r9
 80078a8:	f7f9 f948 	bl	8000b3c <__aeabi_dcmpun>
 80078ac:	b140      	cbz	r0, 80078c0 <_printf_float+0xe0>
 80078ae:	464b      	mov	r3, r9
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	bfbc      	itt	lt
 80078b4:	232d      	movlt	r3, #45	@ 0x2d
 80078b6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80078ba:	4a7e      	ldr	r2, [pc, #504]	@ (8007ab4 <_printf_float+0x2d4>)
 80078bc:	4b7e      	ldr	r3, [pc, #504]	@ (8007ab8 <_printf_float+0x2d8>)
 80078be:	e7d4      	b.n	800786a <_printf_float+0x8a>
 80078c0:	6863      	ldr	r3, [r4, #4]
 80078c2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80078c6:	9206      	str	r2, [sp, #24]
 80078c8:	1c5a      	adds	r2, r3, #1
 80078ca:	d13b      	bne.n	8007944 <_printf_float+0x164>
 80078cc:	2306      	movs	r3, #6
 80078ce:	6063      	str	r3, [r4, #4]
 80078d0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80078d4:	2300      	movs	r3, #0
 80078d6:	6022      	str	r2, [r4, #0]
 80078d8:	9303      	str	r3, [sp, #12]
 80078da:	ab0a      	add	r3, sp, #40	@ 0x28
 80078dc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80078e0:	ab09      	add	r3, sp, #36	@ 0x24
 80078e2:	9300      	str	r3, [sp, #0]
 80078e4:	6861      	ldr	r1, [r4, #4]
 80078e6:	ec49 8b10 	vmov	d0, r8, r9
 80078ea:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80078ee:	4628      	mov	r0, r5
 80078f0:	f7ff fed6 	bl	80076a0 <__cvt>
 80078f4:	9b06      	ldr	r3, [sp, #24]
 80078f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80078f8:	2b47      	cmp	r3, #71	@ 0x47
 80078fa:	4680      	mov	r8, r0
 80078fc:	d129      	bne.n	8007952 <_printf_float+0x172>
 80078fe:	1cc8      	adds	r0, r1, #3
 8007900:	db02      	blt.n	8007908 <_printf_float+0x128>
 8007902:	6863      	ldr	r3, [r4, #4]
 8007904:	4299      	cmp	r1, r3
 8007906:	dd41      	ble.n	800798c <_printf_float+0x1ac>
 8007908:	f1aa 0a02 	sub.w	sl, sl, #2
 800790c:	fa5f fa8a 	uxtb.w	sl, sl
 8007910:	3901      	subs	r1, #1
 8007912:	4652      	mov	r2, sl
 8007914:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007918:	9109      	str	r1, [sp, #36]	@ 0x24
 800791a:	f7ff ff26 	bl	800776a <__exponent>
 800791e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007920:	1813      	adds	r3, r2, r0
 8007922:	2a01      	cmp	r2, #1
 8007924:	4681      	mov	r9, r0
 8007926:	6123      	str	r3, [r4, #16]
 8007928:	dc02      	bgt.n	8007930 <_printf_float+0x150>
 800792a:	6822      	ldr	r2, [r4, #0]
 800792c:	07d2      	lsls	r2, r2, #31
 800792e:	d501      	bpl.n	8007934 <_printf_float+0x154>
 8007930:	3301      	adds	r3, #1
 8007932:	6123      	str	r3, [r4, #16]
 8007934:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007938:	2b00      	cmp	r3, #0
 800793a:	d0a2      	beq.n	8007882 <_printf_float+0xa2>
 800793c:	232d      	movs	r3, #45	@ 0x2d
 800793e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007942:	e79e      	b.n	8007882 <_printf_float+0xa2>
 8007944:	9a06      	ldr	r2, [sp, #24]
 8007946:	2a47      	cmp	r2, #71	@ 0x47
 8007948:	d1c2      	bne.n	80078d0 <_printf_float+0xf0>
 800794a:	2b00      	cmp	r3, #0
 800794c:	d1c0      	bne.n	80078d0 <_printf_float+0xf0>
 800794e:	2301      	movs	r3, #1
 8007950:	e7bd      	b.n	80078ce <_printf_float+0xee>
 8007952:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007956:	d9db      	bls.n	8007910 <_printf_float+0x130>
 8007958:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800795c:	d118      	bne.n	8007990 <_printf_float+0x1b0>
 800795e:	2900      	cmp	r1, #0
 8007960:	6863      	ldr	r3, [r4, #4]
 8007962:	dd0b      	ble.n	800797c <_printf_float+0x19c>
 8007964:	6121      	str	r1, [r4, #16]
 8007966:	b913      	cbnz	r3, 800796e <_printf_float+0x18e>
 8007968:	6822      	ldr	r2, [r4, #0]
 800796a:	07d0      	lsls	r0, r2, #31
 800796c:	d502      	bpl.n	8007974 <_printf_float+0x194>
 800796e:	3301      	adds	r3, #1
 8007970:	440b      	add	r3, r1
 8007972:	6123      	str	r3, [r4, #16]
 8007974:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007976:	f04f 0900 	mov.w	r9, #0
 800797a:	e7db      	b.n	8007934 <_printf_float+0x154>
 800797c:	b913      	cbnz	r3, 8007984 <_printf_float+0x1a4>
 800797e:	6822      	ldr	r2, [r4, #0]
 8007980:	07d2      	lsls	r2, r2, #31
 8007982:	d501      	bpl.n	8007988 <_printf_float+0x1a8>
 8007984:	3302      	adds	r3, #2
 8007986:	e7f4      	b.n	8007972 <_printf_float+0x192>
 8007988:	2301      	movs	r3, #1
 800798a:	e7f2      	b.n	8007972 <_printf_float+0x192>
 800798c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007990:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007992:	4299      	cmp	r1, r3
 8007994:	db05      	blt.n	80079a2 <_printf_float+0x1c2>
 8007996:	6823      	ldr	r3, [r4, #0]
 8007998:	6121      	str	r1, [r4, #16]
 800799a:	07d8      	lsls	r0, r3, #31
 800799c:	d5ea      	bpl.n	8007974 <_printf_float+0x194>
 800799e:	1c4b      	adds	r3, r1, #1
 80079a0:	e7e7      	b.n	8007972 <_printf_float+0x192>
 80079a2:	2900      	cmp	r1, #0
 80079a4:	bfd4      	ite	le
 80079a6:	f1c1 0202 	rsble	r2, r1, #2
 80079aa:	2201      	movgt	r2, #1
 80079ac:	4413      	add	r3, r2
 80079ae:	e7e0      	b.n	8007972 <_printf_float+0x192>
 80079b0:	6823      	ldr	r3, [r4, #0]
 80079b2:	055a      	lsls	r2, r3, #21
 80079b4:	d407      	bmi.n	80079c6 <_printf_float+0x1e6>
 80079b6:	6923      	ldr	r3, [r4, #16]
 80079b8:	4642      	mov	r2, r8
 80079ba:	4631      	mov	r1, r6
 80079bc:	4628      	mov	r0, r5
 80079be:	47b8      	blx	r7
 80079c0:	3001      	adds	r0, #1
 80079c2:	d12b      	bne.n	8007a1c <_printf_float+0x23c>
 80079c4:	e767      	b.n	8007896 <_printf_float+0xb6>
 80079c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80079ca:	f240 80dd 	bls.w	8007b88 <_printf_float+0x3a8>
 80079ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80079d2:	2200      	movs	r2, #0
 80079d4:	2300      	movs	r3, #0
 80079d6:	f7f9 f87f 	bl	8000ad8 <__aeabi_dcmpeq>
 80079da:	2800      	cmp	r0, #0
 80079dc:	d033      	beq.n	8007a46 <_printf_float+0x266>
 80079de:	4a37      	ldr	r2, [pc, #220]	@ (8007abc <_printf_float+0x2dc>)
 80079e0:	2301      	movs	r3, #1
 80079e2:	4631      	mov	r1, r6
 80079e4:	4628      	mov	r0, r5
 80079e6:	47b8      	blx	r7
 80079e8:	3001      	adds	r0, #1
 80079ea:	f43f af54 	beq.w	8007896 <_printf_float+0xb6>
 80079ee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80079f2:	4543      	cmp	r3, r8
 80079f4:	db02      	blt.n	80079fc <_printf_float+0x21c>
 80079f6:	6823      	ldr	r3, [r4, #0]
 80079f8:	07d8      	lsls	r0, r3, #31
 80079fa:	d50f      	bpl.n	8007a1c <_printf_float+0x23c>
 80079fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a00:	4631      	mov	r1, r6
 8007a02:	4628      	mov	r0, r5
 8007a04:	47b8      	blx	r7
 8007a06:	3001      	adds	r0, #1
 8007a08:	f43f af45 	beq.w	8007896 <_printf_float+0xb6>
 8007a0c:	f04f 0900 	mov.w	r9, #0
 8007a10:	f108 38ff 	add.w	r8, r8, #4294967295
 8007a14:	f104 0a1a 	add.w	sl, r4, #26
 8007a18:	45c8      	cmp	r8, r9
 8007a1a:	dc09      	bgt.n	8007a30 <_printf_float+0x250>
 8007a1c:	6823      	ldr	r3, [r4, #0]
 8007a1e:	079b      	lsls	r3, r3, #30
 8007a20:	f100 8103 	bmi.w	8007c2a <_printf_float+0x44a>
 8007a24:	68e0      	ldr	r0, [r4, #12]
 8007a26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a28:	4298      	cmp	r0, r3
 8007a2a:	bfb8      	it	lt
 8007a2c:	4618      	movlt	r0, r3
 8007a2e:	e734      	b.n	800789a <_printf_float+0xba>
 8007a30:	2301      	movs	r3, #1
 8007a32:	4652      	mov	r2, sl
 8007a34:	4631      	mov	r1, r6
 8007a36:	4628      	mov	r0, r5
 8007a38:	47b8      	blx	r7
 8007a3a:	3001      	adds	r0, #1
 8007a3c:	f43f af2b 	beq.w	8007896 <_printf_float+0xb6>
 8007a40:	f109 0901 	add.w	r9, r9, #1
 8007a44:	e7e8      	b.n	8007a18 <_printf_float+0x238>
 8007a46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	dc39      	bgt.n	8007ac0 <_printf_float+0x2e0>
 8007a4c:	4a1b      	ldr	r2, [pc, #108]	@ (8007abc <_printf_float+0x2dc>)
 8007a4e:	2301      	movs	r3, #1
 8007a50:	4631      	mov	r1, r6
 8007a52:	4628      	mov	r0, r5
 8007a54:	47b8      	blx	r7
 8007a56:	3001      	adds	r0, #1
 8007a58:	f43f af1d 	beq.w	8007896 <_printf_float+0xb6>
 8007a5c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007a60:	ea59 0303 	orrs.w	r3, r9, r3
 8007a64:	d102      	bne.n	8007a6c <_printf_float+0x28c>
 8007a66:	6823      	ldr	r3, [r4, #0]
 8007a68:	07d9      	lsls	r1, r3, #31
 8007a6a:	d5d7      	bpl.n	8007a1c <_printf_float+0x23c>
 8007a6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a70:	4631      	mov	r1, r6
 8007a72:	4628      	mov	r0, r5
 8007a74:	47b8      	blx	r7
 8007a76:	3001      	adds	r0, #1
 8007a78:	f43f af0d 	beq.w	8007896 <_printf_float+0xb6>
 8007a7c:	f04f 0a00 	mov.w	sl, #0
 8007a80:	f104 0b1a 	add.w	fp, r4, #26
 8007a84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a86:	425b      	negs	r3, r3
 8007a88:	4553      	cmp	r3, sl
 8007a8a:	dc01      	bgt.n	8007a90 <_printf_float+0x2b0>
 8007a8c:	464b      	mov	r3, r9
 8007a8e:	e793      	b.n	80079b8 <_printf_float+0x1d8>
 8007a90:	2301      	movs	r3, #1
 8007a92:	465a      	mov	r2, fp
 8007a94:	4631      	mov	r1, r6
 8007a96:	4628      	mov	r0, r5
 8007a98:	47b8      	blx	r7
 8007a9a:	3001      	adds	r0, #1
 8007a9c:	f43f aefb 	beq.w	8007896 <_printf_float+0xb6>
 8007aa0:	f10a 0a01 	add.w	sl, sl, #1
 8007aa4:	e7ee      	b.n	8007a84 <_printf_float+0x2a4>
 8007aa6:	bf00      	nop
 8007aa8:	7fefffff 	.word	0x7fefffff
 8007aac:	0800a3f0 	.word	0x0800a3f0
 8007ab0:	0800a3f4 	.word	0x0800a3f4
 8007ab4:	0800a3f8 	.word	0x0800a3f8
 8007ab8:	0800a3fc 	.word	0x0800a3fc
 8007abc:	0800a400 	.word	0x0800a400
 8007ac0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007ac2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007ac6:	4553      	cmp	r3, sl
 8007ac8:	bfa8      	it	ge
 8007aca:	4653      	movge	r3, sl
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	4699      	mov	r9, r3
 8007ad0:	dc36      	bgt.n	8007b40 <_printf_float+0x360>
 8007ad2:	f04f 0b00 	mov.w	fp, #0
 8007ad6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ada:	f104 021a 	add.w	r2, r4, #26
 8007ade:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007ae0:	9306      	str	r3, [sp, #24]
 8007ae2:	eba3 0309 	sub.w	r3, r3, r9
 8007ae6:	455b      	cmp	r3, fp
 8007ae8:	dc31      	bgt.n	8007b4e <_printf_float+0x36e>
 8007aea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007aec:	459a      	cmp	sl, r3
 8007aee:	dc3a      	bgt.n	8007b66 <_printf_float+0x386>
 8007af0:	6823      	ldr	r3, [r4, #0]
 8007af2:	07da      	lsls	r2, r3, #31
 8007af4:	d437      	bmi.n	8007b66 <_printf_float+0x386>
 8007af6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007af8:	ebaa 0903 	sub.w	r9, sl, r3
 8007afc:	9b06      	ldr	r3, [sp, #24]
 8007afe:	ebaa 0303 	sub.w	r3, sl, r3
 8007b02:	4599      	cmp	r9, r3
 8007b04:	bfa8      	it	ge
 8007b06:	4699      	movge	r9, r3
 8007b08:	f1b9 0f00 	cmp.w	r9, #0
 8007b0c:	dc33      	bgt.n	8007b76 <_printf_float+0x396>
 8007b0e:	f04f 0800 	mov.w	r8, #0
 8007b12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b16:	f104 0b1a 	add.w	fp, r4, #26
 8007b1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b1c:	ebaa 0303 	sub.w	r3, sl, r3
 8007b20:	eba3 0309 	sub.w	r3, r3, r9
 8007b24:	4543      	cmp	r3, r8
 8007b26:	f77f af79 	ble.w	8007a1c <_printf_float+0x23c>
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	465a      	mov	r2, fp
 8007b2e:	4631      	mov	r1, r6
 8007b30:	4628      	mov	r0, r5
 8007b32:	47b8      	blx	r7
 8007b34:	3001      	adds	r0, #1
 8007b36:	f43f aeae 	beq.w	8007896 <_printf_float+0xb6>
 8007b3a:	f108 0801 	add.w	r8, r8, #1
 8007b3e:	e7ec      	b.n	8007b1a <_printf_float+0x33a>
 8007b40:	4642      	mov	r2, r8
 8007b42:	4631      	mov	r1, r6
 8007b44:	4628      	mov	r0, r5
 8007b46:	47b8      	blx	r7
 8007b48:	3001      	adds	r0, #1
 8007b4a:	d1c2      	bne.n	8007ad2 <_printf_float+0x2f2>
 8007b4c:	e6a3      	b.n	8007896 <_printf_float+0xb6>
 8007b4e:	2301      	movs	r3, #1
 8007b50:	4631      	mov	r1, r6
 8007b52:	4628      	mov	r0, r5
 8007b54:	9206      	str	r2, [sp, #24]
 8007b56:	47b8      	blx	r7
 8007b58:	3001      	adds	r0, #1
 8007b5a:	f43f ae9c 	beq.w	8007896 <_printf_float+0xb6>
 8007b5e:	9a06      	ldr	r2, [sp, #24]
 8007b60:	f10b 0b01 	add.w	fp, fp, #1
 8007b64:	e7bb      	b.n	8007ade <_printf_float+0x2fe>
 8007b66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b6a:	4631      	mov	r1, r6
 8007b6c:	4628      	mov	r0, r5
 8007b6e:	47b8      	blx	r7
 8007b70:	3001      	adds	r0, #1
 8007b72:	d1c0      	bne.n	8007af6 <_printf_float+0x316>
 8007b74:	e68f      	b.n	8007896 <_printf_float+0xb6>
 8007b76:	9a06      	ldr	r2, [sp, #24]
 8007b78:	464b      	mov	r3, r9
 8007b7a:	4442      	add	r2, r8
 8007b7c:	4631      	mov	r1, r6
 8007b7e:	4628      	mov	r0, r5
 8007b80:	47b8      	blx	r7
 8007b82:	3001      	adds	r0, #1
 8007b84:	d1c3      	bne.n	8007b0e <_printf_float+0x32e>
 8007b86:	e686      	b.n	8007896 <_printf_float+0xb6>
 8007b88:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007b8c:	f1ba 0f01 	cmp.w	sl, #1
 8007b90:	dc01      	bgt.n	8007b96 <_printf_float+0x3b6>
 8007b92:	07db      	lsls	r3, r3, #31
 8007b94:	d536      	bpl.n	8007c04 <_printf_float+0x424>
 8007b96:	2301      	movs	r3, #1
 8007b98:	4642      	mov	r2, r8
 8007b9a:	4631      	mov	r1, r6
 8007b9c:	4628      	mov	r0, r5
 8007b9e:	47b8      	blx	r7
 8007ba0:	3001      	adds	r0, #1
 8007ba2:	f43f ae78 	beq.w	8007896 <_printf_float+0xb6>
 8007ba6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007baa:	4631      	mov	r1, r6
 8007bac:	4628      	mov	r0, r5
 8007bae:	47b8      	blx	r7
 8007bb0:	3001      	adds	r0, #1
 8007bb2:	f43f ae70 	beq.w	8007896 <_printf_float+0xb6>
 8007bb6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007bba:	2200      	movs	r2, #0
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007bc2:	f7f8 ff89 	bl	8000ad8 <__aeabi_dcmpeq>
 8007bc6:	b9c0      	cbnz	r0, 8007bfa <_printf_float+0x41a>
 8007bc8:	4653      	mov	r3, sl
 8007bca:	f108 0201 	add.w	r2, r8, #1
 8007bce:	4631      	mov	r1, r6
 8007bd0:	4628      	mov	r0, r5
 8007bd2:	47b8      	blx	r7
 8007bd4:	3001      	adds	r0, #1
 8007bd6:	d10c      	bne.n	8007bf2 <_printf_float+0x412>
 8007bd8:	e65d      	b.n	8007896 <_printf_float+0xb6>
 8007bda:	2301      	movs	r3, #1
 8007bdc:	465a      	mov	r2, fp
 8007bde:	4631      	mov	r1, r6
 8007be0:	4628      	mov	r0, r5
 8007be2:	47b8      	blx	r7
 8007be4:	3001      	adds	r0, #1
 8007be6:	f43f ae56 	beq.w	8007896 <_printf_float+0xb6>
 8007bea:	f108 0801 	add.w	r8, r8, #1
 8007bee:	45d0      	cmp	r8, sl
 8007bf0:	dbf3      	blt.n	8007bda <_printf_float+0x3fa>
 8007bf2:	464b      	mov	r3, r9
 8007bf4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007bf8:	e6df      	b.n	80079ba <_printf_float+0x1da>
 8007bfa:	f04f 0800 	mov.w	r8, #0
 8007bfe:	f104 0b1a 	add.w	fp, r4, #26
 8007c02:	e7f4      	b.n	8007bee <_printf_float+0x40e>
 8007c04:	2301      	movs	r3, #1
 8007c06:	4642      	mov	r2, r8
 8007c08:	e7e1      	b.n	8007bce <_printf_float+0x3ee>
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	464a      	mov	r2, r9
 8007c0e:	4631      	mov	r1, r6
 8007c10:	4628      	mov	r0, r5
 8007c12:	47b8      	blx	r7
 8007c14:	3001      	adds	r0, #1
 8007c16:	f43f ae3e 	beq.w	8007896 <_printf_float+0xb6>
 8007c1a:	f108 0801 	add.w	r8, r8, #1
 8007c1e:	68e3      	ldr	r3, [r4, #12]
 8007c20:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007c22:	1a5b      	subs	r3, r3, r1
 8007c24:	4543      	cmp	r3, r8
 8007c26:	dcf0      	bgt.n	8007c0a <_printf_float+0x42a>
 8007c28:	e6fc      	b.n	8007a24 <_printf_float+0x244>
 8007c2a:	f04f 0800 	mov.w	r8, #0
 8007c2e:	f104 0919 	add.w	r9, r4, #25
 8007c32:	e7f4      	b.n	8007c1e <_printf_float+0x43e>

08007c34 <_printf_common>:
 8007c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c38:	4616      	mov	r6, r2
 8007c3a:	4698      	mov	r8, r3
 8007c3c:	688a      	ldr	r2, [r1, #8]
 8007c3e:	690b      	ldr	r3, [r1, #16]
 8007c40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007c44:	4293      	cmp	r3, r2
 8007c46:	bfb8      	it	lt
 8007c48:	4613      	movlt	r3, r2
 8007c4a:	6033      	str	r3, [r6, #0]
 8007c4c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007c50:	4607      	mov	r7, r0
 8007c52:	460c      	mov	r4, r1
 8007c54:	b10a      	cbz	r2, 8007c5a <_printf_common+0x26>
 8007c56:	3301      	adds	r3, #1
 8007c58:	6033      	str	r3, [r6, #0]
 8007c5a:	6823      	ldr	r3, [r4, #0]
 8007c5c:	0699      	lsls	r1, r3, #26
 8007c5e:	bf42      	ittt	mi
 8007c60:	6833      	ldrmi	r3, [r6, #0]
 8007c62:	3302      	addmi	r3, #2
 8007c64:	6033      	strmi	r3, [r6, #0]
 8007c66:	6825      	ldr	r5, [r4, #0]
 8007c68:	f015 0506 	ands.w	r5, r5, #6
 8007c6c:	d106      	bne.n	8007c7c <_printf_common+0x48>
 8007c6e:	f104 0a19 	add.w	sl, r4, #25
 8007c72:	68e3      	ldr	r3, [r4, #12]
 8007c74:	6832      	ldr	r2, [r6, #0]
 8007c76:	1a9b      	subs	r3, r3, r2
 8007c78:	42ab      	cmp	r3, r5
 8007c7a:	dc26      	bgt.n	8007cca <_printf_common+0x96>
 8007c7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007c80:	6822      	ldr	r2, [r4, #0]
 8007c82:	3b00      	subs	r3, #0
 8007c84:	bf18      	it	ne
 8007c86:	2301      	movne	r3, #1
 8007c88:	0692      	lsls	r2, r2, #26
 8007c8a:	d42b      	bmi.n	8007ce4 <_printf_common+0xb0>
 8007c8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007c90:	4641      	mov	r1, r8
 8007c92:	4638      	mov	r0, r7
 8007c94:	47c8      	blx	r9
 8007c96:	3001      	adds	r0, #1
 8007c98:	d01e      	beq.n	8007cd8 <_printf_common+0xa4>
 8007c9a:	6823      	ldr	r3, [r4, #0]
 8007c9c:	6922      	ldr	r2, [r4, #16]
 8007c9e:	f003 0306 	and.w	r3, r3, #6
 8007ca2:	2b04      	cmp	r3, #4
 8007ca4:	bf02      	ittt	eq
 8007ca6:	68e5      	ldreq	r5, [r4, #12]
 8007ca8:	6833      	ldreq	r3, [r6, #0]
 8007caa:	1aed      	subeq	r5, r5, r3
 8007cac:	68a3      	ldr	r3, [r4, #8]
 8007cae:	bf0c      	ite	eq
 8007cb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007cb4:	2500      	movne	r5, #0
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	bfc4      	itt	gt
 8007cba:	1a9b      	subgt	r3, r3, r2
 8007cbc:	18ed      	addgt	r5, r5, r3
 8007cbe:	2600      	movs	r6, #0
 8007cc0:	341a      	adds	r4, #26
 8007cc2:	42b5      	cmp	r5, r6
 8007cc4:	d11a      	bne.n	8007cfc <_printf_common+0xc8>
 8007cc6:	2000      	movs	r0, #0
 8007cc8:	e008      	b.n	8007cdc <_printf_common+0xa8>
 8007cca:	2301      	movs	r3, #1
 8007ccc:	4652      	mov	r2, sl
 8007cce:	4641      	mov	r1, r8
 8007cd0:	4638      	mov	r0, r7
 8007cd2:	47c8      	blx	r9
 8007cd4:	3001      	adds	r0, #1
 8007cd6:	d103      	bne.n	8007ce0 <_printf_common+0xac>
 8007cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8007cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ce0:	3501      	adds	r5, #1
 8007ce2:	e7c6      	b.n	8007c72 <_printf_common+0x3e>
 8007ce4:	18e1      	adds	r1, r4, r3
 8007ce6:	1c5a      	adds	r2, r3, #1
 8007ce8:	2030      	movs	r0, #48	@ 0x30
 8007cea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007cee:	4422      	add	r2, r4
 8007cf0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007cf4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007cf8:	3302      	adds	r3, #2
 8007cfa:	e7c7      	b.n	8007c8c <_printf_common+0x58>
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	4622      	mov	r2, r4
 8007d00:	4641      	mov	r1, r8
 8007d02:	4638      	mov	r0, r7
 8007d04:	47c8      	blx	r9
 8007d06:	3001      	adds	r0, #1
 8007d08:	d0e6      	beq.n	8007cd8 <_printf_common+0xa4>
 8007d0a:	3601      	adds	r6, #1
 8007d0c:	e7d9      	b.n	8007cc2 <_printf_common+0x8e>
	...

08007d10 <_printf_i>:
 8007d10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d14:	7e0f      	ldrb	r7, [r1, #24]
 8007d16:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007d18:	2f78      	cmp	r7, #120	@ 0x78
 8007d1a:	4691      	mov	r9, r2
 8007d1c:	4680      	mov	r8, r0
 8007d1e:	460c      	mov	r4, r1
 8007d20:	469a      	mov	sl, r3
 8007d22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007d26:	d807      	bhi.n	8007d38 <_printf_i+0x28>
 8007d28:	2f62      	cmp	r7, #98	@ 0x62
 8007d2a:	d80a      	bhi.n	8007d42 <_printf_i+0x32>
 8007d2c:	2f00      	cmp	r7, #0
 8007d2e:	f000 80d2 	beq.w	8007ed6 <_printf_i+0x1c6>
 8007d32:	2f58      	cmp	r7, #88	@ 0x58
 8007d34:	f000 80b9 	beq.w	8007eaa <_printf_i+0x19a>
 8007d38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007d40:	e03a      	b.n	8007db8 <_printf_i+0xa8>
 8007d42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007d46:	2b15      	cmp	r3, #21
 8007d48:	d8f6      	bhi.n	8007d38 <_printf_i+0x28>
 8007d4a:	a101      	add	r1, pc, #4	@ (adr r1, 8007d50 <_printf_i+0x40>)
 8007d4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d50:	08007da9 	.word	0x08007da9
 8007d54:	08007dbd 	.word	0x08007dbd
 8007d58:	08007d39 	.word	0x08007d39
 8007d5c:	08007d39 	.word	0x08007d39
 8007d60:	08007d39 	.word	0x08007d39
 8007d64:	08007d39 	.word	0x08007d39
 8007d68:	08007dbd 	.word	0x08007dbd
 8007d6c:	08007d39 	.word	0x08007d39
 8007d70:	08007d39 	.word	0x08007d39
 8007d74:	08007d39 	.word	0x08007d39
 8007d78:	08007d39 	.word	0x08007d39
 8007d7c:	08007ebd 	.word	0x08007ebd
 8007d80:	08007de7 	.word	0x08007de7
 8007d84:	08007e77 	.word	0x08007e77
 8007d88:	08007d39 	.word	0x08007d39
 8007d8c:	08007d39 	.word	0x08007d39
 8007d90:	08007edf 	.word	0x08007edf
 8007d94:	08007d39 	.word	0x08007d39
 8007d98:	08007de7 	.word	0x08007de7
 8007d9c:	08007d39 	.word	0x08007d39
 8007da0:	08007d39 	.word	0x08007d39
 8007da4:	08007e7f 	.word	0x08007e7f
 8007da8:	6833      	ldr	r3, [r6, #0]
 8007daa:	1d1a      	adds	r2, r3, #4
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	6032      	str	r2, [r6, #0]
 8007db0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007db4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007db8:	2301      	movs	r3, #1
 8007dba:	e09d      	b.n	8007ef8 <_printf_i+0x1e8>
 8007dbc:	6833      	ldr	r3, [r6, #0]
 8007dbe:	6820      	ldr	r0, [r4, #0]
 8007dc0:	1d19      	adds	r1, r3, #4
 8007dc2:	6031      	str	r1, [r6, #0]
 8007dc4:	0606      	lsls	r6, r0, #24
 8007dc6:	d501      	bpl.n	8007dcc <_printf_i+0xbc>
 8007dc8:	681d      	ldr	r5, [r3, #0]
 8007dca:	e003      	b.n	8007dd4 <_printf_i+0xc4>
 8007dcc:	0645      	lsls	r5, r0, #25
 8007dce:	d5fb      	bpl.n	8007dc8 <_printf_i+0xb8>
 8007dd0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007dd4:	2d00      	cmp	r5, #0
 8007dd6:	da03      	bge.n	8007de0 <_printf_i+0xd0>
 8007dd8:	232d      	movs	r3, #45	@ 0x2d
 8007dda:	426d      	negs	r5, r5
 8007ddc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007de0:	4859      	ldr	r0, [pc, #356]	@ (8007f48 <_printf_i+0x238>)
 8007de2:	230a      	movs	r3, #10
 8007de4:	e011      	b.n	8007e0a <_printf_i+0xfa>
 8007de6:	6821      	ldr	r1, [r4, #0]
 8007de8:	6833      	ldr	r3, [r6, #0]
 8007dea:	0608      	lsls	r0, r1, #24
 8007dec:	f853 5b04 	ldr.w	r5, [r3], #4
 8007df0:	d402      	bmi.n	8007df8 <_printf_i+0xe8>
 8007df2:	0649      	lsls	r1, r1, #25
 8007df4:	bf48      	it	mi
 8007df6:	b2ad      	uxthmi	r5, r5
 8007df8:	2f6f      	cmp	r7, #111	@ 0x6f
 8007dfa:	4853      	ldr	r0, [pc, #332]	@ (8007f48 <_printf_i+0x238>)
 8007dfc:	6033      	str	r3, [r6, #0]
 8007dfe:	bf14      	ite	ne
 8007e00:	230a      	movne	r3, #10
 8007e02:	2308      	moveq	r3, #8
 8007e04:	2100      	movs	r1, #0
 8007e06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007e0a:	6866      	ldr	r6, [r4, #4]
 8007e0c:	60a6      	str	r6, [r4, #8]
 8007e0e:	2e00      	cmp	r6, #0
 8007e10:	bfa2      	ittt	ge
 8007e12:	6821      	ldrge	r1, [r4, #0]
 8007e14:	f021 0104 	bicge.w	r1, r1, #4
 8007e18:	6021      	strge	r1, [r4, #0]
 8007e1a:	b90d      	cbnz	r5, 8007e20 <_printf_i+0x110>
 8007e1c:	2e00      	cmp	r6, #0
 8007e1e:	d04b      	beq.n	8007eb8 <_printf_i+0x1a8>
 8007e20:	4616      	mov	r6, r2
 8007e22:	fbb5 f1f3 	udiv	r1, r5, r3
 8007e26:	fb03 5711 	mls	r7, r3, r1, r5
 8007e2a:	5dc7      	ldrb	r7, [r0, r7]
 8007e2c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007e30:	462f      	mov	r7, r5
 8007e32:	42bb      	cmp	r3, r7
 8007e34:	460d      	mov	r5, r1
 8007e36:	d9f4      	bls.n	8007e22 <_printf_i+0x112>
 8007e38:	2b08      	cmp	r3, #8
 8007e3a:	d10b      	bne.n	8007e54 <_printf_i+0x144>
 8007e3c:	6823      	ldr	r3, [r4, #0]
 8007e3e:	07df      	lsls	r7, r3, #31
 8007e40:	d508      	bpl.n	8007e54 <_printf_i+0x144>
 8007e42:	6923      	ldr	r3, [r4, #16]
 8007e44:	6861      	ldr	r1, [r4, #4]
 8007e46:	4299      	cmp	r1, r3
 8007e48:	bfde      	ittt	le
 8007e4a:	2330      	movle	r3, #48	@ 0x30
 8007e4c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007e50:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007e54:	1b92      	subs	r2, r2, r6
 8007e56:	6122      	str	r2, [r4, #16]
 8007e58:	f8cd a000 	str.w	sl, [sp]
 8007e5c:	464b      	mov	r3, r9
 8007e5e:	aa03      	add	r2, sp, #12
 8007e60:	4621      	mov	r1, r4
 8007e62:	4640      	mov	r0, r8
 8007e64:	f7ff fee6 	bl	8007c34 <_printf_common>
 8007e68:	3001      	adds	r0, #1
 8007e6a:	d14a      	bne.n	8007f02 <_printf_i+0x1f2>
 8007e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e70:	b004      	add	sp, #16
 8007e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e76:	6823      	ldr	r3, [r4, #0]
 8007e78:	f043 0320 	orr.w	r3, r3, #32
 8007e7c:	6023      	str	r3, [r4, #0]
 8007e7e:	4833      	ldr	r0, [pc, #204]	@ (8007f4c <_printf_i+0x23c>)
 8007e80:	2778      	movs	r7, #120	@ 0x78
 8007e82:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007e86:	6823      	ldr	r3, [r4, #0]
 8007e88:	6831      	ldr	r1, [r6, #0]
 8007e8a:	061f      	lsls	r7, r3, #24
 8007e8c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007e90:	d402      	bmi.n	8007e98 <_printf_i+0x188>
 8007e92:	065f      	lsls	r7, r3, #25
 8007e94:	bf48      	it	mi
 8007e96:	b2ad      	uxthmi	r5, r5
 8007e98:	6031      	str	r1, [r6, #0]
 8007e9a:	07d9      	lsls	r1, r3, #31
 8007e9c:	bf44      	itt	mi
 8007e9e:	f043 0320 	orrmi.w	r3, r3, #32
 8007ea2:	6023      	strmi	r3, [r4, #0]
 8007ea4:	b11d      	cbz	r5, 8007eae <_printf_i+0x19e>
 8007ea6:	2310      	movs	r3, #16
 8007ea8:	e7ac      	b.n	8007e04 <_printf_i+0xf4>
 8007eaa:	4827      	ldr	r0, [pc, #156]	@ (8007f48 <_printf_i+0x238>)
 8007eac:	e7e9      	b.n	8007e82 <_printf_i+0x172>
 8007eae:	6823      	ldr	r3, [r4, #0]
 8007eb0:	f023 0320 	bic.w	r3, r3, #32
 8007eb4:	6023      	str	r3, [r4, #0]
 8007eb6:	e7f6      	b.n	8007ea6 <_printf_i+0x196>
 8007eb8:	4616      	mov	r6, r2
 8007eba:	e7bd      	b.n	8007e38 <_printf_i+0x128>
 8007ebc:	6833      	ldr	r3, [r6, #0]
 8007ebe:	6825      	ldr	r5, [r4, #0]
 8007ec0:	6961      	ldr	r1, [r4, #20]
 8007ec2:	1d18      	adds	r0, r3, #4
 8007ec4:	6030      	str	r0, [r6, #0]
 8007ec6:	062e      	lsls	r6, r5, #24
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	d501      	bpl.n	8007ed0 <_printf_i+0x1c0>
 8007ecc:	6019      	str	r1, [r3, #0]
 8007ece:	e002      	b.n	8007ed6 <_printf_i+0x1c6>
 8007ed0:	0668      	lsls	r0, r5, #25
 8007ed2:	d5fb      	bpl.n	8007ecc <_printf_i+0x1bc>
 8007ed4:	8019      	strh	r1, [r3, #0]
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	6123      	str	r3, [r4, #16]
 8007eda:	4616      	mov	r6, r2
 8007edc:	e7bc      	b.n	8007e58 <_printf_i+0x148>
 8007ede:	6833      	ldr	r3, [r6, #0]
 8007ee0:	1d1a      	adds	r2, r3, #4
 8007ee2:	6032      	str	r2, [r6, #0]
 8007ee4:	681e      	ldr	r6, [r3, #0]
 8007ee6:	6862      	ldr	r2, [r4, #4]
 8007ee8:	2100      	movs	r1, #0
 8007eea:	4630      	mov	r0, r6
 8007eec:	f7f8 f978 	bl	80001e0 <memchr>
 8007ef0:	b108      	cbz	r0, 8007ef6 <_printf_i+0x1e6>
 8007ef2:	1b80      	subs	r0, r0, r6
 8007ef4:	6060      	str	r0, [r4, #4]
 8007ef6:	6863      	ldr	r3, [r4, #4]
 8007ef8:	6123      	str	r3, [r4, #16]
 8007efa:	2300      	movs	r3, #0
 8007efc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f00:	e7aa      	b.n	8007e58 <_printf_i+0x148>
 8007f02:	6923      	ldr	r3, [r4, #16]
 8007f04:	4632      	mov	r2, r6
 8007f06:	4649      	mov	r1, r9
 8007f08:	4640      	mov	r0, r8
 8007f0a:	47d0      	blx	sl
 8007f0c:	3001      	adds	r0, #1
 8007f0e:	d0ad      	beq.n	8007e6c <_printf_i+0x15c>
 8007f10:	6823      	ldr	r3, [r4, #0]
 8007f12:	079b      	lsls	r3, r3, #30
 8007f14:	d413      	bmi.n	8007f3e <_printf_i+0x22e>
 8007f16:	68e0      	ldr	r0, [r4, #12]
 8007f18:	9b03      	ldr	r3, [sp, #12]
 8007f1a:	4298      	cmp	r0, r3
 8007f1c:	bfb8      	it	lt
 8007f1e:	4618      	movlt	r0, r3
 8007f20:	e7a6      	b.n	8007e70 <_printf_i+0x160>
 8007f22:	2301      	movs	r3, #1
 8007f24:	4632      	mov	r2, r6
 8007f26:	4649      	mov	r1, r9
 8007f28:	4640      	mov	r0, r8
 8007f2a:	47d0      	blx	sl
 8007f2c:	3001      	adds	r0, #1
 8007f2e:	d09d      	beq.n	8007e6c <_printf_i+0x15c>
 8007f30:	3501      	adds	r5, #1
 8007f32:	68e3      	ldr	r3, [r4, #12]
 8007f34:	9903      	ldr	r1, [sp, #12]
 8007f36:	1a5b      	subs	r3, r3, r1
 8007f38:	42ab      	cmp	r3, r5
 8007f3a:	dcf2      	bgt.n	8007f22 <_printf_i+0x212>
 8007f3c:	e7eb      	b.n	8007f16 <_printf_i+0x206>
 8007f3e:	2500      	movs	r5, #0
 8007f40:	f104 0619 	add.w	r6, r4, #25
 8007f44:	e7f5      	b.n	8007f32 <_printf_i+0x222>
 8007f46:	bf00      	nop
 8007f48:	0800a402 	.word	0x0800a402
 8007f4c:	0800a413 	.word	0x0800a413

08007f50 <std>:
 8007f50:	2300      	movs	r3, #0
 8007f52:	b510      	push	{r4, lr}
 8007f54:	4604      	mov	r4, r0
 8007f56:	e9c0 3300 	strd	r3, r3, [r0]
 8007f5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f5e:	6083      	str	r3, [r0, #8]
 8007f60:	8181      	strh	r1, [r0, #12]
 8007f62:	6643      	str	r3, [r0, #100]	@ 0x64
 8007f64:	81c2      	strh	r2, [r0, #14]
 8007f66:	6183      	str	r3, [r0, #24]
 8007f68:	4619      	mov	r1, r3
 8007f6a:	2208      	movs	r2, #8
 8007f6c:	305c      	adds	r0, #92	@ 0x5c
 8007f6e:	f000 f928 	bl	80081c2 <memset>
 8007f72:	4b0d      	ldr	r3, [pc, #52]	@ (8007fa8 <std+0x58>)
 8007f74:	6263      	str	r3, [r4, #36]	@ 0x24
 8007f76:	4b0d      	ldr	r3, [pc, #52]	@ (8007fac <std+0x5c>)
 8007f78:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8007fb0 <std+0x60>)
 8007f7c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8007fb4 <std+0x64>)
 8007f80:	6323      	str	r3, [r4, #48]	@ 0x30
 8007f82:	4b0d      	ldr	r3, [pc, #52]	@ (8007fb8 <std+0x68>)
 8007f84:	6224      	str	r4, [r4, #32]
 8007f86:	429c      	cmp	r4, r3
 8007f88:	d006      	beq.n	8007f98 <std+0x48>
 8007f8a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007f8e:	4294      	cmp	r4, r2
 8007f90:	d002      	beq.n	8007f98 <std+0x48>
 8007f92:	33d0      	adds	r3, #208	@ 0xd0
 8007f94:	429c      	cmp	r4, r3
 8007f96:	d105      	bne.n	8007fa4 <std+0x54>
 8007f98:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fa0:	f000 b98c 	b.w	80082bc <__retarget_lock_init_recursive>
 8007fa4:	bd10      	pop	{r4, pc}
 8007fa6:	bf00      	nop
 8007fa8:	0800813d 	.word	0x0800813d
 8007fac:	0800815f 	.word	0x0800815f
 8007fb0:	08008197 	.word	0x08008197
 8007fb4:	080081bb 	.word	0x080081bb
 8007fb8:	200003e4 	.word	0x200003e4

08007fbc <stdio_exit_handler>:
 8007fbc:	4a02      	ldr	r2, [pc, #8]	@ (8007fc8 <stdio_exit_handler+0xc>)
 8007fbe:	4903      	ldr	r1, [pc, #12]	@ (8007fcc <stdio_exit_handler+0x10>)
 8007fc0:	4803      	ldr	r0, [pc, #12]	@ (8007fd0 <stdio_exit_handler+0x14>)
 8007fc2:	f000 b869 	b.w	8008098 <_fwalk_sglue>
 8007fc6:	bf00      	nop
 8007fc8:	20000038 	.word	0x20000038
 8007fcc:	08009c1d 	.word	0x08009c1d
 8007fd0:	20000048 	.word	0x20000048

08007fd4 <cleanup_stdio>:
 8007fd4:	6841      	ldr	r1, [r0, #4]
 8007fd6:	4b0c      	ldr	r3, [pc, #48]	@ (8008008 <cleanup_stdio+0x34>)
 8007fd8:	4299      	cmp	r1, r3
 8007fda:	b510      	push	{r4, lr}
 8007fdc:	4604      	mov	r4, r0
 8007fde:	d001      	beq.n	8007fe4 <cleanup_stdio+0x10>
 8007fe0:	f001 fe1c 	bl	8009c1c <_fflush_r>
 8007fe4:	68a1      	ldr	r1, [r4, #8]
 8007fe6:	4b09      	ldr	r3, [pc, #36]	@ (800800c <cleanup_stdio+0x38>)
 8007fe8:	4299      	cmp	r1, r3
 8007fea:	d002      	beq.n	8007ff2 <cleanup_stdio+0x1e>
 8007fec:	4620      	mov	r0, r4
 8007fee:	f001 fe15 	bl	8009c1c <_fflush_r>
 8007ff2:	68e1      	ldr	r1, [r4, #12]
 8007ff4:	4b06      	ldr	r3, [pc, #24]	@ (8008010 <cleanup_stdio+0x3c>)
 8007ff6:	4299      	cmp	r1, r3
 8007ff8:	d004      	beq.n	8008004 <cleanup_stdio+0x30>
 8007ffa:	4620      	mov	r0, r4
 8007ffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008000:	f001 be0c 	b.w	8009c1c <_fflush_r>
 8008004:	bd10      	pop	{r4, pc}
 8008006:	bf00      	nop
 8008008:	200003e4 	.word	0x200003e4
 800800c:	2000044c 	.word	0x2000044c
 8008010:	200004b4 	.word	0x200004b4

08008014 <global_stdio_init.part.0>:
 8008014:	b510      	push	{r4, lr}
 8008016:	4b0b      	ldr	r3, [pc, #44]	@ (8008044 <global_stdio_init.part.0+0x30>)
 8008018:	4c0b      	ldr	r4, [pc, #44]	@ (8008048 <global_stdio_init.part.0+0x34>)
 800801a:	4a0c      	ldr	r2, [pc, #48]	@ (800804c <global_stdio_init.part.0+0x38>)
 800801c:	601a      	str	r2, [r3, #0]
 800801e:	4620      	mov	r0, r4
 8008020:	2200      	movs	r2, #0
 8008022:	2104      	movs	r1, #4
 8008024:	f7ff ff94 	bl	8007f50 <std>
 8008028:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800802c:	2201      	movs	r2, #1
 800802e:	2109      	movs	r1, #9
 8008030:	f7ff ff8e 	bl	8007f50 <std>
 8008034:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008038:	2202      	movs	r2, #2
 800803a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800803e:	2112      	movs	r1, #18
 8008040:	f7ff bf86 	b.w	8007f50 <std>
 8008044:	2000051c 	.word	0x2000051c
 8008048:	200003e4 	.word	0x200003e4
 800804c:	08007fbd 	.word	0x08007fbd

08008050 <__sfp_lock_acquire>:
 8008050:	4801      	ldr	r0, [pc, #4]	@ (8008058 <__sfp_lock_acquire+0x8>)
 8008052:	f000 b934 	b.w	80082be <__retarget_lock_acquire_recursive>
 8008056:	bf00      	nop
 8008058:	20000525 	.word	0x20000525

0800805c <__sfp_lock_release>:
 800805c:	4801      	ldr	r0, [pc, #4]	@ (8008064 <__sfp_lock_release+0x8>)
 800805e:	f000 b92f 	b.w	80082c0 <__retarget_lock_release_recursive>
 8008062:	bf00      	nop
 8008064:	20000525 	.word	0x20000525

08008068 <__sinit>:
 8008068:	b510      	push	{r4, lr}
 800806a:	4604      	mov	r4, r0
 800806c:	f7ff fff0 	bl	8008050 <__sfp_lock_acquire>
 8008070:	6a23      	ldr	r3, [r4, #32]
 8008072:	b11b      	cbz	r3, 800807c <__sinit+0x14>
 8008074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008078:	f7ff bff0 	b.w	800805c <__sfp_lock_release>
 800807c:	4b04      	ldr	r3, [pc, #16]	@ (8008090 <__sinit+0x28>)
 800807e:	6223      	str	r3, [r4, #32]
 8008080:	4b04      	ldr	r3, [pc, #16]	@ (8008094 <__sinit+0x2c>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d1f5      	bne.n	8008074 <__sinit+0xc>
 8008088:	f7ff ffc4 	bl	8008014 <global_stdio_init.part.0>
 800808c:	e7f2      	b.n	8008074 <__sinit+0xc>
 800808e:	bf00      	nop
 8008090:	08007fd5 	.word	0x08007fd5
 8008094:	2000051c 	.word	0x2000051c

08008098 <_fwalk_sglue>:
 8008098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800809c:	4607      	mov	r7, r0
 800809e:	4688      	mov	r8, r1
 80080a0:	4614      	mov	r4, r2
 80080a2:	2600      	movs	r6, #0
 80080a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80080a8:	f1b9 0901 	subs.w	r9, r9, #1
 80080ac:	d505      	bpl.n	80080ba <_fwalk_sglue+0x22>
 80080ae:	6824      	ldr	r4, [r4, #0]
 80080b0:	2c00      	cmp	r4, #0
 80080b2:	d1f7      	bne.n	80080a4 <_fwalk_sglue+0xc>
 80080b4:	4630      	mov	r0, r6
 80080b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080ba:	89ab      	ldrh	r3, [r5, #12]
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d907      	bls.n	80080d0 <_fwalk_sglue+0x38>
 80080c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80080c4:	3301      	adds	r3, #1
 80080c6:	d003      	beq.n	80080d0 <_fwalk_sglue+0x38>
 80080c8:	4629      	mov	r1, r5
 80080ca:	4638      	mov	r0, r7
 80080cc:	47c0      	blx	r8
 80080ce:	4306      	orrs	r6, r0
 80080d0:	3568      	adds	r5, #104	@ 0x68
 80080d2:	e7e9      	b.n	80080a8 <_fwalk_sglue+0x10>

080080d4 <sniprintf>:
 80080d4:	b40c      	push	{r2, r3}
 80080d6:	b530      	push	{r4, r5, lr}
 80080d8:	4b17      	ldr	r3, [pc, #92]	@ (8008138 <sniprintf+0x64>)
 80080da:	1e0c      	subs	r4, r1, #0
 80080dc:	681d      	ldr	r5, [r3, #0]
 80080de:	b09d      	sub	sp, #116	@ 0x74
 80080e0:	da08      	bge.n	80080f4 <sniprintf+0x20>
 80080e2:	238b      	movs	r3, #139	@ 0x8b
 80080e4:	602b      	str	r3, [r5, #0]
 80080e6:	f04f 30ff 	mov.w	r0, #4294967295
 80080ea:	b01d      	add	sp, #116	@ 0x74
 80080ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80080f0:	b002      	add	sp, #8
 80080f2:	4770      	bx	lr
 80080f4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80080f8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80080fc:	bf14      	ite	ne
 80080fe:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008102:	4623      	moveq	r3, r4
 8008104:	9304      	str	r3, [sp, #16]
 8008106:	9307      	str	r3, [sp, #28]
 8008108:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800810c:	9002      	str	r0, [sp, #8]
 800810e:	9006      	str	r0, [sp, #24]
 8008110:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008114:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008116:	ab21      	add	r3, sp, #132	@ 0x84
 8008118:	a902      	add	r1, sp, #8
 800811a:	4628      	mov	r0, r5
 800811c:	9301      	str	r3, [sp, #4]
 800811e:	f001 fbfd 	bl	800991c <_svfiprintf_r>
 8008122:	1c43      	adds	r3, r0, #1
 8008124:	bfbc      	itt	lt
 8008126:	238b      	movlt	r3, #139	@ 0x8b
 8008128:	602b      	strlt	r3, [r5, #0]
 800812a:	2c00      	cmp	r4, #0
 800812c:	d0dd      	beq.n	80080ea <sniprintf+0x16>
 800812e:	9b02      	ldr	r3, [sp, #8]
 8008130:	2200      	movs	r2, #0
 8008132:	701a      	strb	r2, [r3, #0]
 8008134:	e7d9      	b.n	80080ea <sniprintf+0x16>
 8008136:	bf00      	nop
 8008138:	20000044 	.word	0x20000044

0800813c <__sread>:
 800813c:	b510      	push	{r4, lr}
 800813e:	460c      	mov	r4, r1
 8008140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008144:	f000 f86c 	bl	8008220 <_read_r>
 8008148:	2800      	cmp	r0, #0
 800814a:	bfab      	itete	ge
 800814c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800814e:	89a3      	ldrhlt	r3, [r4, #12]
 8008150:	181b      	addge	r3, r3, r0
 8008152:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008156:	bfac      	ite	ge
 8008158:	6563      	strge	r3, [r4, #84]	@ 0x54
 800815a:	81a3      	strhlt	r3, [r4, #12]
 800815c:	bd10      	pop	{r4, pc}

0800815e <__swrite>:
 800815e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008162:	461f      	mov	r7, r3
 8008164:	898b      	ldrh	r3, [r1, #12]
 8008166:	05db      	lsls	r3, r3, #23
 8008168:	4605      	mov	r5, r0
 800816a:	460c      	mov	r4, r1
 800816c:	4616      	mov	r6, r2
 800816e:	d505      	bpl.n	800817c <__swrite+0x1e>
 8008170:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008174:	2302      	movs	r3, #2
 8008176:	2200      	movs	r2, #0
 8008178:	f000 f840 	bl	80081fc <_lseek_r>
 800817c:	89a3      	ldrh	r3, [r4, #12]
 800817e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008182:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008186:	81a3      	strh	r3, [r4, #12]
 8008188:	4632      	mov	r2, r6
 800818a:	463b      	mov	r3, r7
 800818c:	4628      	mov	r0, r5
 800818e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008192:	f000 b857 	b.w	8008244 <_write_r>

08008196 <__sseek>:
 8008196:	b510      	push	{r4, lr}
 8008198:	460c      	mov	r4, r1
 800819a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800819e:	f000 f82d 	bl	80081fc <_lseek_r>
 80081a2:	1c43      	adds	r3, r0, #1
 80081a4:	89a3      	ldrh	r3, [r4, #12]
 80081a6:	bf15      	itete	ne
 80081a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80081aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80081ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80081b2:	81a3      	strheq	r3, [r4, #12]
 80081b4:	bf18      	it	ne
 80081b6:	81a3      	strhne	r3, [r4, #12]
 80081b8:	bd10      	pop	{r4, pc}

080081ba <__sclose>:
 80081ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081be:	f000 b80d 	b.w	80081dc <_close_r>

080081c2 <memset>:
 80081c2:	4402      	add	r2, r0
 80081c4:	4603      	mov	r3, r0
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d100      	bne.n	80081cc <memset+0xa>
 80081ca:	4770      	bx	lr
 80081cc:	f803 1b01 	strb.w	r1, [r3], #1
 80081d0:	e7f9      	b.n	80081c6 <memset+0x4>
	...

080081d4 <_localeconv_r>:
 80081d4:	4800      	ldr	r0, [pc, #0]	@ (80081d8 <_localeconv_r+0x4>)
 80081d6:	4770      	bx	lr
 80081d8:	20000184 	.word	0x20000184

080081dc <_close_r>:
 80081dc:	b538      	push	{r3, r4, r5, lr}
 80081de:	4d06      	ldr	r5, [pc, #24]	@ (80081f8 <_close_r+0x1c>)
 80081e0:	2300      	movs	r3, #0
 80081e2:	4604      	mov	r4, r0
 80081e4:	4608      	mov	r0, r1
 80081e6:	602b      	str	r3, [r5, #0]
 80081e8:	f7f9 fde2 	bl	8001db0 <_close>
 80081ec:	1c43      	adds	r3, r0, #1
 80081ee:	d102      	bne.n	80081f6 <_close_r+0x1a>
 80081f0:	682b      	ldr	r3, [r5, #0]
 80081f2:	b103      	cbz	r3, 80081f6 <_close_r+0x1a>
 80081f4:	6023      	str	r3, [r4, #0]
 80081f6:	bd38      	pop	{r3, r4, r5, pc}
 80081f8:	20000520 	.word	0x20000520

080081fc <_lseek_r>:
 80081fc:	b538      	push	{r3, r4, r5, lr}
 80081fe:	4d07      	ldr	r5, [pc, #28]	@ (800821c <_lseek_r+0x20>)
 8008200:	4604      	mov	r4, r0
 8008202:	4608      	mov	r0, r1
 8008204:	4611      	mov	r1, r2
 8008206:	2200      	movs	r2, #0
 8008208:	602a      	str	r2, [r5, #0]
 800820a:	461a      	mov	r2, r3
 800820c:	f7f9 fdf7 	bl	8001dfe <_lseek>
 8008210:	1c43      	adds	r3, r0, #1
 8008212:	d102      	bne.n	800821a <_lseek_r+0x1e>
 8008214:	682b      	ldr	r3, [r5, #0]
 8008216:	b103      	cbz	r3, 800821a <_lseek_r+0x1e>
 8008218:	6023      	str	r3, [r4, #0]
 800821a:	bd38      	pop	{r3, r4, r5, pc}
 800821c:	20000520 	.word	0x20000520

08008220 <_read_r>:
 8008220:	b538      	push	{r3, r4, r5, lr}
 8008222:	4d07      	ldr	r5, [pc, #28]	@ (8008240 <_read_r+0x20>)
 8008224:	4604      	mov	r4, r0
 8008226:	4608      	mov	r0, r1
 8008228:	4611      	mov	r1, r2
 800822a:	2200      	movs	r2, #0
 800822c:	602a      	str	r2, [r5, #0]
 800822e:	461a      	mov	r2, r3
 8008230:	f7f9 fd85 	bl	8001d3e <_read>
 8008234:	1c43      	adds	r3, r0, #1
 8008236:	d102      	bne.n	800823e <_read_r+0x1e>
 8008238:	682b      	ldr	r3, [r5, #0]
 800823a:	b103      	cbz	r3, 800823e <_read_r+0x1e>
 800823c:	6023      	str	r3, [r4, #0]
 800823e:	bd38      	pop	{r3, r4, r5, pc}
 8008240:	20000520 	.word	0x20000520

08008244 <_write_r>:
 8008244:	b538      	push	{r3, r4, r5, lr}
 8008246:	4d07      	ldr	r5, [pc, #28]	@ (8008264 <_write_r+0x20>)
 8008248:	4604      	mov	r4, r0
 800824a:	4608      	mov	r0, r1
 800824c:	4611      	mov	r1, r2
 800824e:	2200      	movs	r2, #0
 8008250:	602a      	str	r2, [r5, #0]
 8008252:	461a      	mov	r2, r3
 8008254:	f7f9 fd90 	bl	8001d78 <_write>
 8008258:	1c43      	adds	r3, r0, #1
 800825a:	d102      	bne.n	8008262 <_write_r+0x1e>
 800825c:	682b      	ldr	r3, [r5, #0]
 800825e:	b103      	cbz	r3, 8008262 <_write_r+0x1e>
 8008260:	6023      	str	r3, [r4, #0]
 8008262:	bd38      	pop	{r3, r4, r5, pc}
 8008264:	20000520 	.word	0x20000520

08008268 <__errno>:
 8008268:	4b01      	ldr	r3, [pc, #4]	@ (8008270 <__errno+0x8>)
 800826a:	6818      	ldr	r0, [r3, #0]
 800826c:	4770      	bx	lr
 800826e:	bf00      	nop
 8008270:	20000044 	.word	0x20000044

08008274 <__libc_init_array>:
 8008274:	b570      	push	{r4, r5, r6, lr}
 8008276:	4d0d      	ldr	r5, [pc, #52]	@ (80082ac <__libc_init_array+0x38>)
 8008278:	4c0d      	ldr	r4, [pc, #52]	@ (80082b0 <__libc_init_array+0x3c>)
 800827a:	1b64      	subs	r4, r4, r5
 800827c:	10a4      	asrs	r4, r4, #2
 800827e:	2600      	movs	r6, #0
 8008280:	42a6      	cmp	r6, r4
 8008282:	d109      	bne.n	8008298 <__libc_init_array+0x24>
 8008284:	4d0b      	ldr	r5, [pc, #44]	@ (80082b4 <__libc_init_array+0x40>)
 8008286:	4c0c      	ldr	r4, [pc, #48]	@ (80082b8 <__libc_init_array+0x44>)
 8008288:	f002 f866 	bl	800a358 <_init>
 800828c:	1b64      	subs	r4, r4, r5
 800828e:	10a4      	asrs	r4, r4, #2
 8008290:	2600      	movs	r6, #0
 8008292:	42a6      	cmp	r6, r4
 8008294:	d105      	bne.n	80082a2 <__libc_init_array+0x2e>
 8008296:	bd70      	pop	{r4, r5, r6, pc}
 8008298:	f855 3b04 	ldr.w	r3, [r5], #4
 800829c:	4798      	blx	r3
 800829e:	3601      	adds	r6, #1
 80082a0:	e7ee      	b.n	8008280 <__libc_init_array+0xc>
 80082a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80082a6:	4798      	blx	r3
 80082a8:	3601      	adds	r6, #1
 80082aa:	e7f2      	b.n	8008292 <__libc_init_array+0x1e>
 80082ac:	0800a768 	.word	0x0800a768
 80082b0:	0800a768 	.word	0x0800a768
 80082b4:	0800a768 	.word	0x0800a768
 80082b8:	0800a76c 	.word	0x0800a76c

080082bc <__retarget_lock_init_recursive>:
 80082bc:	4770      	bx	lr

080082be <__retarget_lock_acquire_recursive>:
 80082be:	4770      	bx	lr

080082c0 <__retarget_lock_release_recursive>:
 80082c0:	4770      	bx	lr

080082c2 <quorem>:
 80082c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082c6:	6903      	ldr	r3, [r0, #16]
 80082c8:	690c      	ldr	r4, [r1, #16]
 80082ca:	42a3      	cmp	r3, r4
 80082cc:	4607      	mov	r7, r0
 80082ce:	db7e      	blt.n	80083ce <quorem+0x10c>
 80082d0:	3c01      	subs	r4, #1
 80082d2:	f101 0814 	add.w	r8, r1, #20
 80082d6:	00a3      	lsls	r3, r4, #2
 80082d8:	f100 0514 	add.w	r5, r0, #20
 80082dc:	9300      	str	r3, [sp, #0]
 80082de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80082e2:	9301      	str	r3, [sp, #4]
 80082e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80082e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80082ec:	3301      	adds	r3, #1
 80082ee:	429a      	cmp	r2, r3
 80082f0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80082f4:	fbb2 f6f3 	udiv	r6, r2, r3
 80082f8:	d32e      	bcc.n	8008358 <quorem+0x96>
 80082fa:	f04f 0a00 	mov.w	sl, #0
 80082fe:	46c4      	mov	ip, r8
 8008300:	46ae      	mov	lr, r5
 8008302:	46d3      	mov	fp, sl
 8008304:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008308:	b298      	uxth	r0, r3
 800830a:	fb06 a000 	mla	r0, r6, r0, sl
 800830e:	0c02      	lsrs	r2, r0, #16
 8008310:	0c1b      	lsrs	r3, r3, #16
 8008312:	fb06 2303 	mla	r3, r6, r3, r2
 8008316:	f8de 2000 	ldr.w	r2, [lr]
 800831a:	b280      	uxth	r0, r0
 800831c:	b292      	uxth	r2, r2
 800831e:	1a12      	subs	r2, r2, r0
 8008320:	445a      	add	r2, fp
 8008322:	f8de 0000 	ldr.w	r0, [lr]
 8008326:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800832a:	b29b      	uxth	r3, r3
 800832c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008330:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008334:	b292      	uxth	r2, r2
 8008336:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800833a:	45e1      	cmp	r9, ip
 800833c:	f84e 2b04 	str.w	r2, [lr], #4
 8008340:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008344:	d2de      	bcs.n	8008304 <quorem+0x42>
 8008346:	9b00      	ldr	r3, [sp, #0]
 8008348:	58eb      	ldr	r3, [r5, r3]
 800834a:	b92b      	cbnz	r3, 8008358 <quorem+0x96>
 800834c:	9b01      	ldr	r3, [sp, #4]
 800834e:	3b04      	subs	r3, #4
 8008350:	429d      	cmp	r5, r3
 8008352:	461a      	mov	r2, r3
 8008354:	d32f      	bcc.n	80083b6 <quorem+0xf4>
 8008356:	613c      	str	r4, [r7, #16]
 8008358:	4638      	mov	r0, r7
 800835a:	f001 f97b 	bl	8009654 <__mcmp>
 800835e:	2800      	cmp	r0, #0
 8008360:	db25      	blt.n	80083ae <quorem+0xec>
 8008362:	4629      	mov	r1, r5
 8008364:	2000      	movs	r0, #0
 8008366:	f858 2b04 	ldr.w	r2, [r8], #4
 800836a:	f8d1 c000 	ldr.w	ip, [r1]
 800836e:	fa1f fe82 	uxth.w	lr, r2
 8008372:	fa1f f38c 	uxth.w	r3, ip
 8008376:	eba3 030e 	sub.w	r3, r3, lr
 800837a:	4403      	add	r3, r0
 800837c:	0c12      	lsrs	r2, r2, #16
 800837e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008382:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008386:	b29b      	uxth	r3, r3
 8008388:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800838c:	45c1      	cmp	r9, r8
 800838e:	f841 3b04 	str.w	r3, [r1], #4
 8008392:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008396:	d2e6      	bcs.n	8008366 <quorem+0xa4>
 8008398:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800839c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80083a0:	b922      	cbnz	r2, 80083ac <quorem+0xea>
 80083a2:	3b04      	subs	r3, #4
 80083a4:	429d      	cmp	r5, r3
 80083a6:	461a      	mov	r2, r3
 80083a8:	d30b      	bcc.n	80083c2 <quorem+0x100>
 80083aa:	613c      	str	r4, [r7, #16]
 80083ac:	3601      	adds	r6, #1
 80083ae:	4630      	mov	r0, r6
 80083b0:	b003      	add	sp, #12
 80083b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083b6:	6812      	ldr	r2, [r2, #0]
 80083b8:	3b04      	subs	r3, #4
 80083ba:	2a00      	cmp	r2, #0
 80083bc:	d1cb      	bne.n	8008356 <quorem+0x94>
 80083be:	3c01      	subs	r4, #1
 80083c0:	e7c6      	b.n	8008350 <quorem+0x8e>
 80083c2:	6812      	ldr	r2, [r2, #0]
 80083c4:	3b04      	subs	r3, #4
 80083c6:	2a00      	cmp	r2, #0
 80083c8:	d1ef      	bne.n	80083aa <quorem+0xe8>
 80083ca:	3c01      	subs	r4, #1
 80083cc:	e7ea      	b.n	80083a4 <quorem+0xe2>
 80083ce:	2000      	movs	r0, #0
 80083d0:	e7ee      	b.n	80083b0 <quorem+0xee>
 80083d2:	0000      	movs	r0, r0
 80083d4:	0000      	movs	r0, r0
	...

080083d8 <_dtoa_r>:
 80083d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083dc:	69c7      	ldr	r7, [r0, #28]
 80083de:	b099      	sub	sp, #100	@ 0x64
 80083e0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80083e4:	ec55 4b10 	vmov	r4, r5, d0
 80083e8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80083ea:	9109      	str	r1, [sp, #36]	@ 0x24
 80083ec:	4683      	mov	fp, r0
 80083ee:	920e      	str	r2, [sp, #56]	@ 0x38
 80083f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80083f2:	b97f      	cbnz	r7, 8008414 <_dtoa_r+0x3c>
 80083f4:	2010      	movs	r0, #16
 80083f6:	f000 fdfd 	bl	8008ff4 <malloc>
 80083fa:	4602      	mov	r2, r0
 80083fc:	f8cb 001c 	str.w	r0, [fp, #28]
 8008400:	b920      	cbnz	r0, 800840c <_dtoa_r+0x34>
 8008402:	4ba7      	ldr	r3, [pc, #668]	@ (80086a0 <_dtoa_r+0x2c8>)
 8008404:	21ef      	movs	r1, #239	@ 0xef
 8008406:	48a7      	ldr	r0, [pc, #668]	@ (80086a4 <_dtoa_r+0x2cc>)
 8008408:	f001 fc68 	bl	8009cdc <__assert_func>
 800840c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008410:	6007      	str	r7, [r0, #0]
 8008412:	60c7      	str	r7, [r0, #12]
 8008414:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008418:	6819      	ldr	r1, [r3, #0]
 800841a:	b159      	cbz	r1, 8008434 <_dtoa_r+0x5c>
 800841c:	685a      	ldr	r2, [r3, #4]
 800841e:	604a      	str	r2, [r1, #4]
 8008420:	2301      	movs	r3, #1
 8008422:	4093      	lsls	r3, r2
 8008424:	608b      	str	r3, [r1, #8]
 8008426:	4658      	mov	r0, fp
 8008428:	f000 feda 	bl	80091e0 <_Bfree>
 800842c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008430:	2200      	movs	r2, #0
 8008432:	601a      	str	r2, [r3, #0]
 8008434:	1e2b      	subs	r3, r5, #0
 8008436:	bfb9      	ittee	lt
 8008438:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800843c:	9303      	strlt	r3, [sp, #12]
 800843e:	2300      	movge	r3, #0
 8008440:	6033      	strge	r3, [r6, #0]
 8008442:	9f03      	ldr	r7, [sp, #12]
 8008444:	4b98      	ldr	r3, [pc, #608]	@ (80086a8 <_dtoa_r+0x2d0>)
 8008446:	bfbc      	itt	lt
 8008448:	2201      	movlt	r2, #1
 800844a:	6032      	strlt	r2, [r6, #0]
 800844c:	43bb      	bics	r3, r7
 800844e:	d112      	bne.n	8008476 <_dtoa_r+0x9e>
 8008450:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008452:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008456:	6013      	str	r3, [r2, #0]
 8008458:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800845c:	4323      	orrs	r3, r4
 800845e:	f000 854d 	beq.w	8008efc <_dtoa_r+0xb24>
 8008462:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008464:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80086bc <_dtoa_r+0x2e4>
 8008468:	2b00      	cmp	r3, #0
 800846a:	f000 854f 	beq.w	8008f0c <_dtoa_r+0xb34>
 800846e:	f10a 0303 	add.w	r3, sl, #3
 8008472:	f000 bd49 	b.w	8008f08 <_dtoa_r+0xb30>
 8008476:	ed9d 7b02 	vldr	d7, [sp, #8]
 800847a:	2200      	movs	r2, #0
 800847c:	ec51 0b17 	vmov	r0, r1, d7
 8008480:	2300      	movs	r3, #0
 8008482:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008486:	f7f8 fb27 	bl	8000ad8 <__aeabi_dcmpeq>
 800848a:	4680      	mov	r8, r0
 800848c:	b158      	cbz	r0, 80084a6 <_dtoa_r+0xce>
 800848e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008490:	2301      	movs	r3, #1
 8008492:	6013      	str	r3, [r2, #0]
 8008494:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008496:	b113      	cbz	r3, 800849e <_dtoa_r+0xc6>
 8008498:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800849a:	4b84      	ldr	r3, [pc, #528]	@ (80086ac <_dtoa_r+0x2d4>)
 800849c:	6013      	str	r3, [r2, #0]
 800849e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80086c0 <_dtoa_r+0x2e8>
 80084a2:	f000 bd33 	b.w	8008f0c <_dtoa_r+0xb34>
 80084a6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80084aa:	aa16      	add	r2, sp, #88	@ 0x58
 80084ac:	a917      	add	r1, sp, #92	@ 0x5c
 80084ae:	4658      	mov	r0, fp
 80084b0:	f001 f980 	bl	80097b4 <__d2b>
 80084b4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80084b8:	4681      	mov	r9, r0
 80084ba:	2e00      	cmp	r6, #0
 80084bc:	d077      	beq.n	80085ae <_dtoa_r+0x1d6>
 80084be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80084c0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80084c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80084c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80084cc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80084d0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80084d4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80084d8:	4619      	mov	r1, r3
 80084da:	2200      	movs	r2, #0
 80084dc:	4b74      	ldr	r3, [pc, #464]	@ (80086b0 <_dtoa_r+0x2d8>)
 80084de:	f7f7 fedb 	bl	8000298 <__aeabi_dsub>
 80084e2:	a369      	add	r3, pc, #420	@ (adr r3, 8008688 <_dtoa_r+0x2b0>)
 80084e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e8:	f7f8 f88e 	bl	8000608 <__aeabi_dmul>
 80084ec:	a368      	add	r3, pc, #416	@ (adr r3, 8008690 <_dtoa_r+0x2b8>)
 80084ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f2:	f7f7 fed3 	bl	800029c <__adddf3>
 80084f6:	4604      	mov	r4, r0
 80084f8:	4630      	mov	r0, r6
 80084fa:	460d      	mov	r5, r1
 80084fc:	f7f8 f81a 	bl	8000534 <__aeabi_i2d>
 8008500:	a365      	add	r3, pc, #404	@ (adr r3, 8008698 <_dtoa_r+0x2c0>)
 8008502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008506:	f7f8 f87f 	bl	8000608 <__aeabi_dmul>
 800850a:	4602      	mov	r2, r0
 800850c:	460b      	mov	r3, r1
 800850e:	4620      	mov	r0, r4
 8008510:	4629      	mov	r1, r5
 8008512:	f7f7 fec3 	bl	800029c <__adddf3>
 8008516:	4604      	mov	r4, r0
 8008518:	460d      	mov	r5, r1
 800851a:	f7f8 fb25 	bl	8000b68 <__aeabi_d2iz>
 800851e:	2200      	movs	r2, #0
 8008520:	4607      	mov	r7, r0
 8008522:	2300      	movs	r3, #0
 8008524:	4620      	mov	r0, r4
 8008526:	4629      	mov	r1, r5
 8008528:	f7f8 fae0 	bl	8000aec <__aeabi_dcmplt>
 800852c:	b140      	cbz	r0, 8008540 <_dtoa_r+0x168>
 800852e:	4638      	mov	r0, r7
 8008530:	f7f8 f800 	bl	8000534 <__aeabi_i2d>
 8008534:	4622      	mov	r2, r4
 8008536:	462b      	mov	r3, r5
 8008538:	f7f8 face 	bl	8000ad8 <__aeabi_dcmpeq>
 800853c:	b900      	cbnz	r0, 8008540 <_dtoa_r+0x168>
 800853e:	3f01      	subs	r7, #1
 8008540:	2f16      	cmp	r7, #22
 8008542:	d851      	bhi.n	80085e8 <_dtoa_r+0x210>
 8008544:	4b5b      	ldr	r3, [pc, #364]	@ (80086b4 <_dtoa_r+0x2dc>)
 8008546:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800854a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800854e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008552:	f7f8 facb 	bl	8000aec <__aeabi_dcmplt>
 8008556:	2800      	cmp	r0, #0
 8008558:	d048      	beq.n	80085ec <_dtoa_r+0x214>
 800855a:	3f01      	subs	r7, #1
 800855c:	2300      	movs	r3, #0
 800855e:	9312      	str	r3, [sp, #72]	@ 0x48
 8008560:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008562:	1b9b      	subs	r3, r3, r6
 8008564:	1e5a      	subs	r2, r3, #1
 8008566:	bf44      	itt	mi
 8008568:	f1c3 0801 	rsbmi	r8, r3, #1
 800856c:	2300      	movmi	r3, #0
 800856e:	9208      	str	r2, [sp, #32]
 8008570:	bf54      	ite	pl
 8008572:	f04f 0800 	movpl.w	r8, #0
 8008576:	9308      	strmi	r3, [sp, #32]
 8008578:	2f00      	cmp	r7, #0
 800857a:	db39      	blt.n	80085f0 <_dtoa_r+0x218>
 800857c:	9b08      	ldr	r3, [sp, #32]
 800857e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008580:	443b      	add	r3, r7
 8008582:	9308      	str	r3, [sp, #32]
 8008584:	2300      	movs	r3, #0
 8008586:	930a      	str	r3, [sp, #40]	@ 0x28
 8008588:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800858a:	2b09      	cmp	r3, #9
 800858c:	d864      	bhi.n	8008658 <_dtoa_r+0x280>
 800858e:	2b05      	cmp	r3, #5
 8008590:	bfc4      	itt	gt
 8008592:	3b04      	subgt	r3, #4
 8008594:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008596:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008598:	f1a3 0302 	sub.w	r3, r3, #2
 800859c:	bfcc      	ite	gt
 800859e:	2400      	movgt	r4, #0
 80085a0:	2401      	movle	r4, #1
 80085a2:	2b03      	cmp	r3, #3
 80085a4:	d863      	bhi.n	800866e <_dtoa_r+0x296>
 80085a6:	e8df f003 	tbb	[pc, r3]
 80085aa:	372a      	.short	0x372a
 80085ac:	5535      	.short	0x5535
 80085ae:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80085b2:	441e      	add	r6, r3
 80085b4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80085b8:	2b20      	cmp	r3, #32
 80085ba:	bfc1      	itttt	gt
 80085bc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80085c0:	409f      	lslgt	r7, r3
 80085c2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80085c6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80085ca:	bfd6      	itet	le
 80085cc:	f1c3 0320 	rsble	r3, r3, #32
 80085d0:	ea47 0003 	orrgt.w	r0, r7, r3
 80085d4:	fa04 f003 	lslle.w	r0, r4, r3
 80085d8:	f7f7 ff9c 	bl	8000514 <__aeabi_ui2d>
 80085dc:	2201      	movs	r2, #1
 80085de:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80085e2:	3e01      	subs	r6, #1
 80085e4:	9214      	str	r2, [sp, #80]	@ 0x50
 80085e6:	e777      	b.n	80084d8 <_dtoa_r+0x100>
 80085e8:	2301      	movs	r3, #1
 80085ea:	e7b8      	b.n	800855e <_dtoa_r+0x186>
 80085ec:	9012      	str	r0, [sp, #72]	@ 0x48
 80085ee:	e7b7      	b.n	8008560 <_dtoa_r+0x188>
 80085f0:	427b      	negs	r3, r7
 80085f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80085f4:	2300      	movs	r3, #0
 80085f6:	eba8 0807 	sub.w	r8, r8, r7
 80085fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80085fc:	e7c4      	b.n	8008588 <_dtoa_r+0x1b0>
 80085fe:	2300      	movs	r3, #0
 8008600:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008602:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008604:	2b00      	cmp	r3, #0
 8008606:	dc35      	bgt.n	8008674 <_dtoa_r+0x29c>
 8008608:	2301      	movs	r3, #1
 800860a:	9300      	str	r3, [sp, #0]
 800860c:	9307      	str	r3, [sp, #28]
 800860e:	461a      	mov	r2, r3
 8008610:	920e      	str	r2, [sp, #56]	@ 0x38
 8008612:	e00b      	b.n	800862c <_dtoa_r+0x254>
 8008614:	2301      	movs	r3, #1
 8008616:	e7f3      	b.n	8008600 <_dtoa_r+0x228>
 8008618:	2300      	movs	r3, #0
 800861a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800861c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800861e:	18fb      	adds	r3, r7, r3
 8008620:	9300      	str	r3, [sp, #0]
 8008622:	3301      	adds	r3, #1
 8008624:	2b01      	cmp	r3, #1
 8008626:	9307      	str	r3, [sp, #28]
 8008628:	bfb8      	it	lt
 800862a:	2301      	movlt	r3, #1
 800862c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008630:	2100      	movs	r1, #0
 8008632:	2204      	movs	r2, #4
 8008634:	f102 0514 	add.w	r5, r2, #20
 8008638:	429d      	cmp	r5, r3
 800863a:	d91f      	bls.n	800867c <_dtoa_r+0x2a4>
 800863c:	6041      	str	r1, [r0, #4]
 800863e:	4658      	mov	r0, fp
 8008640:	f000 fd8e 	bl	8009160 <_Balloc>
 8008644:	4682      	mov	sl, r0
 8008646:	2800      	cmp	r0, #0
 8008648:	d13c      	bne.n	80086c4 <_dtoa_r+0x2ec>
 800864a:	4b1b      	ldr	r3, [pc, #108]	@ (80086b8 <_dtoa_r+0x2e0>)
 800864c:	4602      	mov	r2, r0
 800864e:	f240 11af 	movw	r1, #431	@ 0x1af
 8008652:	e6d8      	b.n	8008406 <_dtoa_r+0x2e>
 8008654:	2301      	movs	r3, #1
 8008656:	e7e0      	b.n	800861a <_dtoa_r+0x242>
 8008658:	2401      	movs	r4, #1
 800865a:	2300      	movs	r3, #0
 800865c:	9309      	str	r3, [sp, #36]	@ 0x24
 800865e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008660:	f04f 33ff 	mov.w	r3, #4294967295
 8008664:	9300      	str	r3, [sp, #0]
 8008666:	9307      	str	r3, [sp, #28]
 8008668:	2200      	movs	r2, #0
 800866a:	2312      	movs	r3, #18
 800866c:	e7d0      	b.n	8008610 <_dtoa_r+0x238>
 800866e:	2301      	movs	r3, #1
 8008670:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008672:	e7f5      	b.n	8008660 <_dtoa_r+0x288>
 8008674:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008676:	9300      	str	r3, [sp, #0]
 8008678:	9307      	str	r3, [sp, #28]
 800867a:	e7d7      	b.n	800862c <_dtoa_r+0x254>
 800867c:	3101      	adds	r1, #1
 800867e:	0052      	lsls	r2, r2, #1
 8008680:	e7d8      	b.n	8008634 <_dtoa_r+0x25c>
 8008682:	bf00      	nop
 8008684:	f3af 8000 	nop.w
 8008688:	636f4361 	.word	0x636f4361
 800868c:	3fd287a7 	.word	0x3fd287a7
 8008690:	8b60c8b3 	.word	0x8b60c8b3
 8008694:	3fc68a28 	.word	0x3fc68a28
 8008698:	509f79fb 	.word	0x509f79fb
 800869c:	3fd34413 	.word	0x3fd34413
 80086a0:	0800a431 	.word	0x0800a431
 80086a4:	0800a448 	.word	0x0800a448
 80086a8:	7ff00000 	.word	0x7ff00000
 80086ac:	0800a401 	.word	0x0800a401
 80086b0:	3ff80000 	.word	0x3ff80000
 80086b4:	0800a540 	.word	0x0800a540
 80086b8:	0800a4a0 	.word	0x0800a4a0
 80086bc:	0800a42d 	.word	0x0800a42d
 80086c0:	0800a400 	.word	0x0800a400
 80086c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80086c8:	6018      	str	r0, [r3, #0]
 80086ca:	9b07      	ldr	r3, [sp, #28]
 80086cc:	2b0e      	cmp	r3, #14
 80086ce:	f200 80a4 	bhi.w	800881a <_dtoa_r+0x442>
 80086d2:	2c00      	cmp	r4, #0
 80086d4:	f000 80a1 	beq.w	800881a <_dtoa_r+0x442>
 80086d8:	2f00      	cmp	r7, #0
 80086da:	dd33      	ble.n	8008744 <_dtoa_r+0x36c>
 80086dc:	4bad      	ldr	r3, [pc, #692]	@ (8008994 <_dtoa_r+0x5bc>)
 80086de:	f007 020f 	and.w	r2, r7, #15
 80086e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086e6:	ed93 7b00 	vldr	d7, [r3]
 80086ea:	05f8      	lsls	r0, r7, #23
 80086ec:	ed8d 7b04 	vstr	d7, [sp, #16]
 80086f0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80086f4:	d516      	bpl.n	8008724 <_dtoa_r+0x34c>
 80086f6:	4ba8      	ldr	r3, [pc, #672]	@ (8008998 <_dtoa_r+0x5c0>)
 80086f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80086fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008700:	f7f8 f8ac 	bl	800085c <__aeabi_ddiv>
 8008704:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008708:	f004 040f 	and.w	r4, r4, #15
 800870c:	2603      	movs	r6, #3
 800870e:	4da2      	ldr	r5, [pc, #648]	@ (8008998 <_dtoa_r+0x5c0>)
 8008710:	b954      	cbnz	r4, 8008728 <_dtoa_r+0x350>
 8008712:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008716:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800871a:	f7f8 f89f 	bl	800085c <__aeabi_ddiv>
 800871e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008722:	e028      	b.n	8008776 <_dtoa_r+0x39e>
 8008724:	2602      	movs	r6, #2
 8008726:	e7f2      	b.n	800870e <_dtoa_r+0x336>
 8008728:	07e1      	lsls	r1, r4, #31
 800872a:	d508      	bpl.n	800873e <_dtoa_r+0x366>
 800872c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008730:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008734:	f7f7 ff68 	bl	8000608 <__aeabi_dmul>
 8008738:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800873c:	3601      	adds	r6, #1
 800873e:	1064      	asrs	r4, r4, #1
 8008740:	3508      	adds	r5, #8
 8008742:	e7e5      	b.n	8008710 <_dtoa_r+0x338>
 8008744:	f000 80d2 	beq.w	80088ec <_dtoa_r+0x514>
 8008748:	427c      	negs	r4, r7
 800874a:	4b92      	ldr	r3, [pc, #584]	@ (8008994 <_dtoa_r+0x5bc>)
 800874c:	4d92      	ldr	r5, [pc, #584]	@ (8008998 <_dtoa_r+0x5c0>)
 800874e:	f004 020f 	and.w	r2, r4, #15
 8008752:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800875e:	f7f7 ff53 	bl	8000608 <__aeabi_dmul>
 8008762:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008766:	1124      	asrs	r4, r4, #4
 8008768:	2300      	movs	r3, #0
 800876a:	2602      	movs	r6, #2
 800876c:	2c00      	cmp	r4, #0
 800876e:	f040 80b2 	bne.w	80088d6 <_dtoa_r+0x4fe>
 8008772:	2b00      	cmp	r3, #0
 8008774:	d1d3      	bne.n	800871e <_dtoa_r+0x346>
 8008776:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008778:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800877c:	2b00      	cmp	r3, #0
 800877e:	f000 80b7 	beq.w	80088f0 <_dtoa_r+0x518>
 8008782:	4b86      	ldr	r3, [pc, #536]	@ (800899c <_dtoa_r+0x5c4>)
 8008784:	2200      	movs	r2, #0
 8008786:	4620      	mov	r0, r4
 8008788:	4629      	mov	r1, r5
 800878a:	f7f8 f9af 	bl	8000aec <__aeabi_dcmplt>
 800878e:	2800      	cmp	r0, #0
 8008790:	f000 80ae 	beq.w	80088f0 <_dtoa_r+0x518>
 8008794:	9b07      	ldr	r3, [sp, #28]
 8008796:	2b00      	cmp	r3, #0
 8008798:	f000 80aa 	beq.w	80088f0 <_dtoa_r+0x518>
 800879c:	9b00      	ldr	r3, [sp, #0]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	dd37      	ble.n	8008812 <_dtoa_r+0x43a>
 80087a2:	1e7b      	subs	r3, r7, #1
 80087a4:	9304      	str	r3, [sp, #16]
 80087a6:	4620      	mov	r0, r4
 80087a8:	4b7d      	ldr	r3, [pc, #500]	@ (80089a0 <_dtoa_r+0x5c8>)
 80087aa:	2200      	movs	r2, #0
 80087ac:	4629      	mov	r1, r5
 80087ae:	f7f7 ff2b 	bl	8000608 <__aeabi_dmul>
 80087b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087b6:	9c00      	ldr	r4, [sp, #0]
 80087b8:	3601      	adds	r6, #1
 80087ba:	4630      	mov	r0, r6
 80087bc:	f7f7 feba 	bl	8000534 <__aeabi_i2d>
 80087c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80087c4:	f7f7 ff20 	bl	8000608 <__aeabi_dmul>
 80087c8:	4b76      	ldr	r3, [pc, #472]	@ (80089a4 <_dtoa_r+0x5cc>)
 80087ca:	2200      	movs	r2, #0
 80087cc:	f7f7 fd66 	bl	800029c <__adddf3>
 80087d0:	4605      	mov	r5, r0
 80087d2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80087d6:	2c00      	cmp	r4, #0
 80087d8:	f040 808d 	bne.w	80088f6 <_dtoa_r+0x51e>
 80087dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087e0:	4b71      	ldr	r3, [pc, #452]	@ (80089a8 <_dtoa_r+0x5d0>)
 80087e2:	2200      	movs	r2, #0
 80087e4:	f7f7 fd58 	bl	8000298 <__aeabi_dsub>
 80087e8:	4602      	mov	r2, r0
 80087ea:	460b      	mov	r3, r1
 80087ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80087f0:	462a      	mov	r2, r5
 80087f2:	4633      	mov	r3, r6
 80087f4:	f7f8 f998 	bl	8000b28 <__aeabi_dcmpgt>
 80087f8:	2800      	cmp	r0, #0
 80087fa:	f040 828b 	bne.w	8008d14 <_dtoa_r+0x93c>
 80087fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008802:	462a      	mov	r2, r5
 8008804:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008808:	f7f8 f970 	bl	8000aec <__aeabi_dcmplt>
 800880c:	2800      	cmp	r0, #0
 800880e:	f040 8128 	bne.w	8008a62 <_dtoa_r+0x68a>
 8008812:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008816:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800881a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800881c:	2b00      	cmp	r3, #0
 800881e:	f2c0 815a 	blt.w	8008ad6 <_dtoa_r+0x6fe>
 8008822:	2f0e      	cmp	r7, #14
 8008824:	f300 8157 	bgt.w	8008ad6 <_dtoa_r+0x6fe>
 8008828:	4b5a      	ldr	r3, [pc, #360]	@ (8008994 <_dtoa_r+0x5bc>)
 800882a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800882e:	ed93 7b00 	vldr	d7, [r3]
 8008832:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008834:	2b00      	cmp	r3, #0
 8008836:	ed8d 7b00 	vstr	d7, [sp]
 800883a:	da03      	bge.n	8008844 <_dtoa_r+0x46c>
 800883c:	9b07      	ldr	r3, [sp, #28]
 800883e:	2b00      	cmp	r3, #0
 8008840:	f340 8101 	ble.w	8008a46 <_dtoa_r+0x66e>
 8008844:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008848:	4656      	mov	r6, sl
 800884a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800884e:	4620      	mov	r0, r4
 8008850:	4629      	mov	r1, r5
 8008852:	f7f8 f803 	bl	800085c <__aeabi_ddiv>
 8008856:	f7f8 f987 	bl	8000b68 <__aeabi_d2iz>
 800885a:	4680      	mov	r8, r0
 800885c:	f7f7 fe6a 	bl	8000534 <__aeabi_i2d>
 8008860:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008864:	f7f7 fed0 	bl	8000608 <__aeabi_dmul>
 8008868:	4602      	mov	r2, r0
 800886a:	460b      	mov	r3, r1
 800886c:	4620      	mov	r0, r4
 800886e:	4629      	mov	r1, r5
 8008870:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008874:	f7f7 fd10 	bl	8000298 <__aeabi_dsub>
 8008878:	f806 4b01 	strb.w	r4, [r6], #1
 800887c:	9d07      	ldr	r5, [sp, #28]
 800887e:	eba6 040a 	sub.w	r4, r6, sl
 8008882:	42a5      	cmp	r5, r4
 8008884:	4602      	mov	r2, r0
 8008886:	460b      	mov	r3, r1
 8008888:	f040 8117 	bne.w	8008aba <_dtoa_r+0x6e2>
 800888c:	f7f7 fd06 	bl	800029c <__adddf3>
 8008890:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008894:	4604      	mov	r4, r0
 8008896:	460d      	mov	r5, r1
 8008898:	f7f8 f946 	bl	8000b28 <__aeabi_dcmpgt>
 800889c:	2800      	cmp	r0, #0
 800889e:	f040 80f9 	bne.w	8008a94 <_dtoa_r+0x6bc>
 80088a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80088a6:	4620      	mov	r0, r4
 80088a8:	4629      	mov	r1, r5
 80088aa:	f7f8 f915 	bl	8000ad8 <__aeabi_dcmpeq>
 80088ae:	b118      	cbz	r0, 80088b8 <_dtoa_r+0x4e0>
 80088b0:	f018 0f01 	tst.w	r8, #1
 80088b4:	f040 80ee 	bne.w	8008a94 <_dtoa_r+0x6bc>
 80088b8:	4649      	mov	r1, r9
 80088ba:	4658      	mov	r0, fp
 80088bc:	f000 fc90 	bl	80091e0 <_Bfree>
 80088c0:	2300      	movs	r3, #0
 80088c2:	7033      	strb	r3, [r6, #0]
 80088c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80088c6:	3701      	adds	r7, #1
 80088c8:	601f      	str	r7, [r3, #0]
 80088ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	f000 831d 	beq.w	8008f0c <_dtoa_r+0xb34>
 80088d2:	601e      	str	r6, [r3, #0]
 80088d4:	e31a      	b.n	8008f0c <_dtoa_r+0xb34>
 80088d6:	07e2      	lsls	r2, r4, #31
 80088d8:	d505      	bpl.n	80088e6 <_dtoa_r+0x50e>
 80088da:	e9d5 2300 	ldrd	r2, r3, [r5]
 80088de:	f7f7 fe93 	bl	8000608 <__aeabi_dmul>
 80088e2:	3601      	adds	r6, #1
 80088e4:	2301      	movs	r3, #1
 80088e6:	1064      	asrs	r4, r4, #1
 80088e8:	3508      	adds	r5, #8
 80088ea:	e73f      	b.n	800876c <_dtoa_r+0x394>
 80088ec:	2602      	movs	r6, #2
 80088ee:	e742      	b.n	8008776 <_dtoa_r+0x39e>
 80088f0:	9c07      	ldr	r4, [sp, #28]
 80088f2:	9704      	str	r7, [sp, #16]
 80088f4:	e761      	b.n	80087ba <_dtoa_r+0x3e2>
 80088f6:	4b27      	ldr	r3, [pc, #156]	@ (8008994 <_dtoa_r+0x5bc>)
 80088f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80088fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80088fe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008902:	4454      	add	r4, sl
 8008904:	2900      	cmp	r1, #0
 8008906:	d053      	beq.n	80089b0 <_dtoa_r+0x5d8>
 8008908:	4928      	ldr	r1, [pc, #160]	@ (80089ac <_dtoa_r+0x5d4>)
 800890a:	2000      	movs	r0, #0
 800890c:	f7f7 ffa6 	bl	800085c <__aeabi_ddiv>
 8008910:	4633      	mov	r3, r6
 8008912:	462a      	mov	r2, r5
 8008914:	f7f7 fcc0 	bl	8000298 <__aeabi_dsub>
 8008918:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800891c:	4656      	mov	r6, sl
 800891e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008922:	f7f8 f921 	bl	8000b68 <__aeabi_d2iz>
 8008926:	4605      	mov	r5, r0
 8008928:	f7f7 fe04 	bl	8000534 <__aeabi_i2d>
 800892c:	4602      	mov	r2, r0
 800892e:	460b      	mov	r3, r1
 8008930:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008934:	f7f7 fcb0 	bl	8000298 <__aeabi_dsub>
 8008938:	3530      	adds	r5, #48	@ 0x30
 800893a:	4602      	mov	r2, r0
 800893c:	460b      	mov	r3, r1
 800893e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008942:	f806 5b01 	strb.w	r5, [r6], #1
 8008946:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800894a:	f7f8 f8cf 	bl	8000aec <__aeabi_dcmplt>
 800894e:	2800      	cmp	r0, #0
 8008950:	d171      	bne.n	8008a36 <_dtoa_r+0x65e>
 8008952:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008956:	4911      	ldr	r1, [pc, #68]	@ (800899c <_dtoa_r+0x5c4>)
 8008958:	2000      	movs	r0, #0
 800895a:	f7f7 fc9d 	bl	8000298 <__aeabi_dsub>
 800895e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008962:	f7f8 f8c3 	bl	8000aec <__aeabi_dcmplt>
 8008966:	2800      	cmp	r0, #0
 8008968:	f040 8095 	bne.w	8008a96 <_dtoa_r+0x6be>
 800896c:	42a6      	cmp	r6, r4
 800896e:	f43f af50 	beq.w	8008812 <_dtoa_r+0x43a>
 8008972:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008976:	4b0a      	ldr	r3, [pc, #40]	@ (80089a0 <_dtoa_r+0x5c8>)
 8008978:	2200      	movs	r2, #0
 800897a:	f7f7 fe45 	bl	8000608 <__aeabi_dmul>
 800897e:	4b08      	ldr	r3, [pc, #32]	@ (80089a0 <_dtoa_r+0x5c8>)
 8008980:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008984:	2200      	movs	r2, #0
 8008986:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800898a:	f7f7 fe3d 	bl	8000608 <__aeabi_dmul>
 800898e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008992:	e7c4      	b.n	800891e <_dtoa_r+0x546>
 8008994:	0800a540 	.word	0x0800a540
 8008998:	0800a518 	.word	0x0800a518
 800899c:	3ff00000 	.word	0x3ff00000
 80089a0:	40240000 	.word	0x40240000
 80089a4:	401c0000 	.word	0x401c0000
 80089a8:	40140000 	.word	0x40140000
 80089ac:	3fe00000 	.word	0x3fe00000
 80089b0:	4631      	mov	r1, r6
 80089b2:	4628      	mov	r0, r5
 80089b4:	f7f7 fe28 	bl	8000608 <__aeabi_dmul>
 80089b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80089bc:	9415      	str	r4, [sp, #84]	@ 0x54
 80089be:	4656      	mov	r6, sl
 80089c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089c4:	f7f8 f8d0 	bl	8000b68 <__aeabi_d2iz>
 80089c8:	4605      	mov	r5, r0
 80089ca:	f7f7 fdb3 	bl	8000534 <__aeabi_i2d>
 80089ce:	4602      	mov	r2, r0
 80089d0:	460b      	mov	r3, r1
 80089d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089d6:	f7f7 fc5f 	bl	8000298 <__aeabi_dsub>
 80089da:	3530      	adds	r5, #48	@ 0x30
 80089dc:	f806 5b01 	strb.w	r5, [r6], #1
 80089e0:	4602      	mov	r2, r0
 80089e2:	460b      	mov	r3, r1
 80089e4:	42a6      	cmp	r6, r4
 80089e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80089ea:	f04f 0200 	mov.w	r2, #0
 80089ee:	d124      	bne.n	8008a3a <_dtoa_r+0x662>
 80089f0:	4bac      	ldr	r3, [pc, #688]	@ (8008ca4 <_dtoa_r+0x8cc>)
 80089f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80089f6:	f7f7 fc51 	bl	800029c <__adddf3>
 80089fa:	4602      	mov	r2, r0
 80089fc:	460b      	mov	r3, r1
 80089fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a02:	f7f8 f891 	bl	8000b28 <__aeabi_dcmpgt>
 8008a06:	2800      	cmp	r0, #0
 8008a08:	d145      	bne.n	8008a96 <_dtoa_r+0x6be>
 8008a0a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008a0e:	49a5      	ldr	r1, [pc, #660]	@ (8008ca4 <_dtoa_r+0x8cc>)
 8008a10:	2000      	movs	r0, #0
 8008a12:	f7f7 fc41 	bl	8000298 <__aeabi_dsub>
 8008a16:	4602      	mov	r2, r0
 8008a18:	460b      	mov	r3, r1
 8008a1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a1e:	f7f8 f865 	bl	8000aec <__aeabi_dcmplt>
 8008a22:	2800      	cmp	r0, #0
 8008a24:	f43f aef5 	beq.w	8008812 <_dtoa_r+0x43a>
 8008a28:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008a2a:	1e73      	subs	r3, r6, #1
 8008a2c:	9315      	str	r3, [sp, #84]	@ 0x54
 8008a2e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008a32:	2b30      	cmp	r3, #48	@ 0x30
 8008a34:	d0f8      	beq.n	8008a28 <_dtoa_r+0x650>
 8008a36:	9f04      	ldr	r7, [sp, #16]
 8008a38:	e73e      	b.n	80088b8 <_dtoa_r+0x4e0>
 8008a3a:	4b9b      	ldr	r3, [pc, #620]	@ (8008ca8 <_dtoa_r+0x8d0>)
 8008a3c:	f7f7 fde4 	bl	8000608 <__aeabi_dmul>
 8008a40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a44:	e7bc      	b.n	80089c0 <_dtoa_r+0x5e8>
 8008a46:	d10c      	bne.n	8008a62 <_dtoa_r+0x68a>
 8008a48:	4b98      	ldr	r3, [pc, #608]	@ (8008cac <_dtoa_r+0x8d4>)
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a50:	f7f7 fdda 	bl	8000608 <__aeabi_dmul>
 8008a54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a58:	f7f8 f85c 	bl	8000b14 <__aeabi_dcmpge>
 8008a5c:	2800      	cmp	r0, #0
 8008a5e:	f000 8157 	beq.w	8008d10 <_dtoa_r+0x938>
 8008a62:	2400      	movs	r4, #0
 8008a64:	4625      	mov	r5, r4
 8008a66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a68:	43db      	mvns	r3, r3
 8008a6a:	9304      	str	r3, [sp, #16]
 8008a6c:	4656      	mov	r6, sl
 8008a6e:	2700      	movs	r7, #0
 8008a70:	4621      	mov	r1, r4
 8008a72:	4658      	mov	r0, fp
 8008a74:	f000 fbb4 	bl	80091e0 <_Bfree>
 8008a78:	2d00      	cmp	r5, #0
 8008a7a:	d0dc      	beq.n	8008a36 <_dtoa_r+0x65e>
 8008a7c:	b12f      	cbz	r7, 8008a8a <_dtoa_r+0x6b2>
 8008a7e:	42af      	cmp	r7, r5
 8008a80:	d003      	beq.n	8008a8a <_dtoa_r+0x6b2>
 8008a82:	4639      	mov	r1, r7
 8008a84:	4658      	mov	r0, fp
 8008a86:	f000 fbab 	bl	80091e0 <_Bfree>
 8008a8a:	4629      	mov	r1, r5
 8008a8c:	4658      	mov	r0, fp
 8008a8e:	f000 fba7 	bl	80091e0 <_Bfree>
 8008a92:	e7d0      	b.n	8008a36 <_dtoa_r+0x65e>
 8008a94:	9704      	str	r7, [sp, #16]
 8008a96:	4633      	mov	r3, r6
 8008a98:	461e      	mov	r6, r3
 8008a9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a9e:	2a39      	cmp	r2, #57	@ 0x39
 8008aa0:	d107      	bne.n	8008ab2 <_dtoa_r+0x6da>
 8008aa2:	459a      	cmp	sl, r3
 8008aa4:	d1f8      	bne.n	8008a98 <_dtoa_r+0x6c0>
 8008aa6:	9a04      	ldr	r2, [sp, #16]
 8008aa8:	3201      	adds	r2, #1
 8008aaa:	9204      	str	r2, [sp, #16]
 8008aac:	2230      	movs	r2, #48	@ 0x30
 8008aae:	f88a 2000 	strb.w	r2, [sl]
 8008ab2:	781a      	ldrb	r2, [r3, #0]
 8008ab4:	3201      	adds	r2, #1
 8008ab6:	701a      	strb	r2, [r3, #0]
 8008ab8:	e7bd      	b.n	8008a36 <_dtoa_r+0x65e>
 8008aba:	4b7b      	ldr	r3, [pc, #492]	@ (8008ca8 <_dtoa_r+0x8d0>)
 8008abc:	2200      	movs	r2, #0
 8008abe:	f7f7 fda3 	bl	8000608 <__aeabi_dmul>
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	4604      	mov	r4, r0
 8008ac8:	460d      	mov	r5, r1
 8008aca:	f7f8 f805 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ace:	2800      	cmp	r0, #0
 8008ad0:	f43f aebb 	beq.w	800884a <_dtoa_r+0x472>
 8008ad4:	e6f0      	b.n	80088b8 <_dtoa_r+0x4e0>
 8008ad6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008ad8:	2a00      	cmp	r2, #0
 8008ada:	f000 80db 	beq.w	8008c94 <_dtoa_r+0x8bc>
 8008ade:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ae0:	2a01      	cmp	r2, #1
 8008ae2:	f300 80bf 	bgt.w	8008c64 <_dtoa_r+0x88c>
 8008ae6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008ae8:	2a00      	cmp	r2, #0
 8008aea:	f000 80b7 	beq.w	8008c5c <_dtoa_r+0x884>
 8008aee:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008af2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008af4:	4646      	mov	r6, r8
 8008af6:	9a08      	ldr	r2, [sp, #32]
 8008af8:	2101      	movs	r1, #1
 8008afa:	441a      	add	r2, r3
 8008afc:	4658      	mov	r0, fp
 8008afe:	4498      	add	r8, r3
 8008b00:	9208      	str	r2, [sp, #32]
 8008b02:	f000 fc21 	bl	8009348 <__i2b>
 8008b06:	4605      	mov	r5, r0
 8008b08:	b15e      	cbz	r6, 8008b22 <_dtoa_r+0x74a>
 8008b0a:	9b08      	ldr	r3, [sp, #32]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	dd08      	ble.n	8008b22 <_dtoa_r+0x74a>
 8008b10:	42b3      	cmp	r3, r6
 8008b12:	9a08      	ldr	r2, [sp, #32]
 8008b14:	bfa8      	it	ge
 8008b16:	4633      	movge	r3, r6
 8008b18:	eba8 0803 	sub.w	r8, r8, r3
 8008b1c:	1af6      	subs	r6, r6, r3
 8008b1e:	1ad3      	subs	r3, r2, r3
 8008b20:	9308      	str	r3, [sp, #32]
 8008b22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b24:	b1f3      	cbz	r3, 8008b64 <_dtoa_r+0x78c>
 8008b26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	f000 80b7 	beq.w	8008c9c <_dtoa_r+0x8c4>
 8008b2e:	b18c      	cbz	r4, 8008b54 <_dtoa_r+0x77c>
 8008b30:	4629      	mov	r1, r5
 8008b32:	4622      	mov	r2, r4
 8008b34:	4658      	mov	r0, fp
 8008b36:	f000 fcc7 	bl	80094c8 <__pow5mult>
 8008b3a:	464a      	mov	r2, r9
 8008b3c:	4601      	mov	r1, r0
 8008b3e:	4605      	mov	r5, r0
 8008b40:	4658      	mov	r0, fp
 8008b42:	f000 fc17 	bl	8009374 <__multiply>
 8008b46:	4649      	mov	r1, r9
 8008b48:	9004      	str	r0, [sp, #16]
 8008b4a:	4658      	mov	r0, fp
 8008b4c:	f000 fb48 	bl	80091e0 <_Bfree>
 8008b50:	9b04      	ldr	r3, [sp, #16]
 8008b52:	4699      	mov	r9, r3
 8008b54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b56:	1b1a      	subs	r2, r3, r4
 8008b58:	d004      	beq.n	8008b64 <_dtoa_r+0x78c>
 8008b5a:	4649      	mov	r1, r9
 8008b5c:	4658      	mov	r0, fp
 8008b5e:	f000 fcb3 	bl	80094c8 <__pow5mult>
 8008b62:	4681      	mov	r9, r0
 8008b64:	2101      	movs	r1, #1
 8008b66:	4658      	mov	r0, fp
 8008b68:	f000 fbee 	bl	8009348 <__i2b>
 8008b6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b6e:	4604      	mov	r4, r0
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	f000 81cf 	beq.w	8008f14 <_dtoa_r+0xb3c>
 8008b76:	461a      	mov	r2, r3
 8008b78:	4601      	mov	r1, r0
 8008b7a:	4658      	mov	r0, fp
 8008b7c:	f000 fca4 	bl	80094c8 <__pow5mult>
 8008b80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b82:	2b01      	cmp	r3, #1
 8008b84:	4604      	mov	r4, r0
 8008b86:	f300 8095 	bgt.w	8008cb4 <_dtoa_r+0x8dc>
 8008b8a:	9b02      	ldr	r3, [sp, #8]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	f040 8087 	bne.w	8008ca0 <_dtoa_r+0x8c8>
 8008b92:	9b03      	ldr	r3, [sp, #12]
 8008b94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	f040 8089 	bne.w	8008cb0 <_dtoa_r+0x8d8>
 8008b9e:	9b03      	ldr	r3, [sp, #12]
 8008ba0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008ba4:	0d1b      	lsrs	r3, r3, #20
 8008ba6:	051b      	lsls	r3, r3, #20
 8008ba8:	b12b      	cbz	r3, 8008bb6 <_dtoa_r+0x7de>
 8008baa:	9b08      	ldr	r3, [sp, #32]
 8008bac:	3301      	adds	r3, #1
 8008bae:	9308      	str	r3, [sp, #32]
 8008bb0:	f108 0801 	add.w	r8, r8, #1
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	930a      	str	r3, [sp, #40]	@ 0x28
 8008bb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	f000 81b0 	beq.w	8008f20 <_dtoa_r+0xb48>
 8008bc0:	6923      	ldr	r3, [r4, #16]
 8008bc2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008bc6:	6918      	ldr	r0, [r3, #16]
 8008bc8:	f000 fb72 	bl	80092b0 <__hi0bits>
 8008bcc:	f1c0 0020 	rsb	r0, r0, #32
 8008bd0:	9b08      	ldr	r3, [sp, #32]
 8008bd2:	4418      	add	r0, r3
 8008bd4:	f010 001f 	ands.w	r0, r0, #31
 8008bd8:	d077      	beq.n	8008cca <_dtoa_r+0x8f2>
 8008bda:	f1c0 0320 	rsb	r3, r0, #32
 8008bde:	2b04      	cmp	r3, #4
 8008be0:	dd6b      	ble.n	8008cba <_dtoa_r+0x8e2>
 8008be2:	9b08      	ldr	r3, [sp, #32]
 8008be4:	f1c0 001c 	rsb	r0, r0, #28
 8008be8:	4403      	add	r3, r0
 8008bea:	4480      	add	r8, r0
 8008bec:	4406      	add	r6, r0
 8008bee:	9308      	str	r3, [sp, #32]
 8008bf0:	f1b8 0f00 	cmp.w	r8, #0
 8008bf4:	dd05      	ble.n	8008c02 <_dtoa_r+0x82a>
 8008bf6:	4649      	mov	r1, r9
 8008bf8:	4642      	mov	r2, r8
 8008bfa:	4658      	mov	r0, fp
 8008bfc:	f000 fcbe 	bl	800957c <__lshift>
 8008c00:	4681      	mov	r9, r0
 8008c02:	9b08      	ldr	r3, [sp, #32]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	dd05      	ble.n	8008c14 <_dtoa_r+0x83c>
 8008c08:	4621      	mov	r1, r4
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	4658      	mov	r0, fp
 8008c0e:	f000 fcb5 	bl	800957c <__lshift>
 8008c12:	4604      	mov	r4, r0
 8008c14:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d059      	beq.n	8008cce <_dtoa_r+0x8f6>
 8008c1a:	4621      	mov	r1, r4
 8008c1c:	4648      	mov	r0, r9
 8008c1e:	f000 fd19 	bl	8009654 <__mcmp>
 8008c22:	2800      	cmp	r0, #0
 8008c24:	da53      	bge.n	8008cce <_dtoa_r+0x8f6>
 8008c26:	1e7b      	subs	r3, r7, #1
 8008c28:	9304      	str	r3, [sp, #16]
 8008c2a:	4649      	mov	r1, r9
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	220a      	movs	r2, #10
 8008c30:	4658      	mov	r0, fp
 8008c32:	f000 faf7 	bl	8009224 <__multadd>
 8008c36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c38:	4681      	mov	r9, r0
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	f000 8172 	beq.w	8008f24 <_dtoa_r+0xb4c>
 8008c40:	2300      	movs	r3, #0
 8008c42:	4629      	mov	r1, r5
 8008c44:	220a      	movs	r2, #10
 8008c46:	4658      	mov	r0, fp
 8008c48:	f000 faec 	bl	8009224 <__multadd>
 8008c4c:	9b00      	ldr	r3, [sp, #0]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	4605      	mov	r5, r0
 8008c52:	dc67      	bgt.n	8008d24 <_dtoa_r+0x94c>
 8008c54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c56:	2b02      	cmp	r3, #2
 8008c58:	dc41      	bgt.n	8008cde <_dtoa_r+0x906>
 8008c5a:	e063      	b.n	8008d24 <_dtoa_r+0x94c>
 8008c5c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008c5e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008c62:	e746      	b.n	8008af2 <_dtoa_r+0x71a>
 8008c64:	9b07      	ldr	r3, [sp, #28]
 8008c66:	1e5c      	subs	r4, r3, #1
 8008c68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c6a:	42a3      	cmp	r3, r4
 8008c6c:	bfbf      	itttt	lt
 8008c6e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008c70:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008c72:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008c74:	1ae3      	sublt	r3, r4, r3
 8008c76:	bfb4      	ite	lt
 8008c78:	18d2      	addlt	r2, r2, r3
 8008c7a:	1b1c      	subge	r4, r3, r4
 8008c7c:	9b07      	ldr	r3, [sp, #28]
 8008c7e:	bfbc      	itt	lt
 8008c80:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008c82:	2400      	movlt	r4, #0
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	bfb5      	itete	lt
 8008c88:	eba8 0603 	sublt.w	r6, r8, r3
 8008c8c:	9b07      	ldrge	r3, [sp, #28]
 8008c8e:	2300      	movlt	r3, #0
 8008c90:	4646      	movge	r6, r8
 8008c92:	e730      	b.n	8008af6 <_dtoa_r+0x71e>
 8008c94:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008c96:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008c98:	4646      	mov	r6, r8
 8008c9a:	e735      	b.n	8008b08 <_dtoa_r+0x730>
 8008c9c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008c9e:	e75c      	b.n	8008b5a <_dtoa_r+0x782>
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	e788      	b.n	8008bb6 <_dtoa_r+0x7de>
 8008ca4:	3fe00000 	.word	0x3fe00000
 8008ca8:	40240000 	.word	0x40240000
 8008cac:	40140000 	.word	0x40140000
 8008cb0:	9b02      	ldr	r3, [sp, #8]
 8008cb2:	e780      	b.n	8008bb6 <_dtoa_r+0x7de>
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	930a      	str	r3, [sp, #40]	@ 0x28
 8008cb8:	e782      	b.n	8008bc0 <_dtoa_r+0x7e8>
 8008cba:	d099      	beq.n	8008bf0 <_dtoa_r+0x818>
 8008cbc:	9a08      	ldr	r2, [sp, #32]
 8008cbe:	331c      	adds	r3, #28
 8008cc0:	441a      	add	r2, r3
 8008cc2:	4498      	add	r8, r3
 8008cc4:	441e      	add	r6, r3
 8008cc6:	9208      	str	r2, [sp, #32]
 8008cc8:	e792      	b.n	8008bf0 <_dtoa_r+0x818>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	e7f6      	b.n	8008cbc <_dtoa_r+0x8e4>
 8008cce:	9b07      	ldr	r3, [sp, #28]
 8008cd0:	9704      	str	r7, [sp, #16]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	dc20      	bgt.n	8008d18 <_dtoa_r+0x940>
 8008cd6:	9300      	str	r3, [sp, #0]
 8008cd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cda:	2b02      	cmp	r3, #2
 8008cdc:	dd1e      	ble.n	8008d1c <_dtoa_r+0x944>
 8008cde:	9b00      	ldr	r3, [sp, #0]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	f47f aec0 	bne.w	8008a66 <_dtoa_r+0x68e>
 8008ce6:	4621      	mov	r1, r4
 8008ce8:	2205      	movs	r2, #5
 8008cea:	4658      	mov	r0, fp
 8008cec:	f000 fa9a 	bl	8009224 <__multadd>
 8008cf0:	4601      	mov	r1, r0
 8008cf2:	4604      	mov	r4, r0
 8008cf4:	4648      	mov	r0, r9
 8008cf6:	f000 fcad 	bl	8009654 <__mcmp>
 8008cfa:	2800      	cmp	r0, #0
 8008cfc:	f77f aeb3 	ble.w	8008a66 <_dtoa_r+0x68e>
 8008d00:	4656      	mov	r6, sl
 8008d02:	2331      	movs	r3, #49	@ 0x31
 8008d04:	f806 3b01 	strb.w	r3, [r6], #1
 8008d08:	9b04      	ldr	r3, [sp, #16]
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	9304      	str	r3, [sp, #16]
 8008d0e:	e6ae      	b.n	8008a6e <_dtoa_r+0x696>
 8008d10:	9c07      	ldr	r4, [sp, #28]
 8008d12:	9704      	str	r7, [sp, #16]
 8008d14:	4625      	mov	r5, r4
 8008d16:	e7f3      	b.n	8008d00 <_dtoa_r+0x928>
 8008d18:	9b07      	ldr	r3, [sp, #28]
 8008d1a:	9300      	str	r3, [sp, #0]
 8008d1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	f000 8104 	beq.w	8008f2c <_dtoa_r+0xb54>
 8008d24:	2e00      	cmp	r6, #0
 8008d26:	dd05      	ble.n	8008d34 <_dtoa_r+0x95c>
 8008d28:	4629      	mov	r1, r5
 8008d2a:	4632      	mov	r2, r6
 8008d2c:	4658      	mov	r0, fp
 8008d2e:	f000 fc25 	bl	800957c <__lshift>
 8008d32:	4605      	mov	r5, r0
 8008d34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d05a      	beq.n	8008df0 <_dtoa_r+0xa18>
 8008d3a:	6869      	ldr	r1, [r5, #4]
 8008d3c:	4658      	mov	r0, fp
 8008d3e:	f000 fa0f 	bl	8009160 <_Balloc>
 8008d42:	4606      	mov	r6, r0
 8008d44:	b928      	cbnz	r0, 8008d52 <_dtoa_r+0x97a>
 8008d46:	4b84      	ldr	r3, [pc, #528]	@ (8008f58 <_dtoa_r+0xb80>)
 8008d48:	4602      	mov	r2, r0
 8008d4a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008d4e:	f7ff bb5a 	b.w	8008406 <_dtoa_r+0x2e>
 8008d52:	692a      	ldr	r2, [r5, #16]
 8008d54:	3202      	adds	r2, #2
 8008d56:	0092      	lsls	r2, r2, #2
 8008d58:	f105 010c 	add.w	r1, r5, #12
 8008d5c:	300c      	adds	r0, #12
 8008d5e:	f000 ffaf 	bl	8009cc0 <memcpy>
 8008d62:	2201      	movs	r2, #1
 8008d64:	4631      	mov	r1, r6
 8008d66:	4658      	mov	r0, fp
 8008d68:	f000 fc08 	bl	800957c <__lshift>
 8008d6c:	f10a 0301 	add.w	r3, sl, #1
 8008d70:	9307      	str	r3, [sp, #28]
 8008d72:	9b00      	ldr	r3, [sp, #0]
 8008d74:	4453      	add	r3, sl
 8008d76:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008d78:	9b02      	ldr	r3, [sp, #8]
 8008d7a:	f003 0301 	and.w	r3, r3, #1
 8008d7e:	462f      	mov	r7, r5
 8008d80:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d82:	4605      	mov	r5, r0
 8008d84:	9b07      	ldr	r3, [sp, #28]
 8008d86:	4621      	mov	r1, r4
 8008d88:	3b01      	subs	r3, #1
 8008d8a:	4648      	mov	r0, r9
 8008d8c:	9300      	str	r3, [sp, #0]
 8008d8e:	f7ff fa98 	bl	80082c2 <quorem>
 8008d92:	4639      	mov	r1, r7
 8008d94:	9002      	str	r0, [sp, #8]
 8008d96:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008d9a:	4648      	mov	r0, r9
 8008d9c:	f000 fc5a 	bl	8009654 <__mcmp>
 8008da0:	462a      	mov	r2, r5
 8008da2:	9008      	str	r0, [sp, #32]
 8008da4:	4621      	mov	r1, r4
 8008da6:	4658      	mov	r0, fp
 8008da8:	f000 fc70 	bl	800968c <__mdiff>
 8008dac:	68c2      	ldr	r2, [r0, #12]
 8008dae:	4606      	mov	r6, r0
 8008db0:	bb02      	cbnz	r2, 8008df4 <_dtoa_r+0xa1c>
 8008db2:	4601      	mov	r1, r0
 8008db4:	4648      	mov	r0, r9
 8008db6:	f000 fc4d 	bl	8009654 <__mcmp>
 8008dba:	4602      	mov	r2, r0
 8008dbc:	4631      	mov	r1, r6
 8008dbe:	4658      	mov	r0, fp
 8008dc0:	920e      	str	r2, [sp, #56]	@ 0x38
 8008dc2:	f000 fa0d 	bl	80091e0 <_Bfree>
 8008dc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dc8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008dca:	9e07      	ldr	r6, [sp, #28]
 8008dcc:	ea43 0102 	orr.w	r1, r3, r2
 8008dd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008dd2:	4319      	orrs	r1, r3
 8008dd4:	d110      	bne.n	8008df8 <_dtoa_r+0xa20>
 8008dd6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008dda:	d029      	beq.n	8008e30 <_dtoa_r+0xa58>
 8008ddc:	9b08      	ldr	r3, [sp, #32]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	dd02      	ble.n	8008de8 <_dtoa_r+0xa10>
 8008de2:	9b02      	ldr	r3, [sp, #8]
 8008de4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008de8:	9b00      	ldr	r3, [sp, #0]
 8008dea:	f883 8000 	strb.w	r8, [r3]
 8008dee:	e63f      	b.n	8008a70 <_dtoa_r+0x698>
 8008df0:	4628      	mov	r0, r5
 8008df2:	e7bb      	b.n	8008d6c <_dtoa_r+0x994>
 8008df4:	2201      	movs	r2, #1
 8008df6:	e7e1      	b.n	8008dbc <_dtoa_r+0x9e4>
 8008df8:	9b08      	ldr	r3, [sp, #32]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	db04      	blt.n	8008e08 <_dtoa_r+0xa30>
 8008dfe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008e00:	430b      	orrs	r3, r1
 8008e02:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008e04:	430b      	orrs	r3, r1
 8008e06:	d120      	bne.n	8008e4a <_dtoa_r+0xa72>
 8008e08:	2a00      	cmp	r2, #0
 8008e0a:	dded      	ble.n	8008de8 <_dtoa_r+0xa10>
 8008e0c:	4649      	mov	r1, r9
 8008e0e:	2201      	movs	r2, #1
 8008e10:	4658      	mov	r0, fp
 8008e12:	f000 fbb3 	bl	800957c <__lshift>
 8008e16:	4621      	mov	r1, r4
 8008e18:	4681      	mov	r9, r0
 8008e1a:	f000 fc1b 	bl	8009654 <__mcmp>
 8008e1e:	2800      	cmp	r0, #0
 8008e20:	dc03      	bgt.n	8008e2a <_dtoa_r+0xa52>
 8008e22:	d1e1      	bne.n	8008de8 <_dtoa_r+0xa10>
 8008e24:	f018 0f01 	tst.w	r8, #1
 8008e28:	d0de      	beq.n	8008de8 <_dtoa_r+0xa10>
 8008e2a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008e2e:	d1d8      	bne.n	8008de2 <_dtoa_r+0xa0a>
 8008e30:	9a00      	ldr	r2, [sp, #0]
 8008e32:	2339      	movs	r3, #57	@ 0x39
 8008e34:	7013      	strb	r3, [r2, #0]
 8008e36:	4633      	mov	r3, r6
 8008e38:	461e      	mov	r6, r3
 8008e3a:	3b01      	subs	r3, #1
 8008e3c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008e40:	2a39      	cmp	r2, #57	@ 0x39
 8008e42:	d052      	beq.n	8008eea <_dtoa_r+0xb12>
 8008e44:	3201      	adds	r2, #1
 8008e46:	701a      	strb	r2, [r3, #0]
 8008e48:	e612      	b.n	8008a70 <_dtoa_r+0x698>
 8008e4a:	2a00      	cmp	r2, #0
 8008e4c:	dd07      	ble.n	8008e5e <_dtoa_r+0xa86>
 8008e4e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008e52:	d0ed      	beq.n	8008e30 <_dtoa_r+0xa58>
 8008e54:	9a00      	ldr	r2, [sp, #0]
 8008e56:	f108 0301 	add.w	r3, r8, #1
 8008e5a:	7013      	strb	r3, [r2, #0]
 8008e5c:	e608      	b.n	8008a70 <_dtoa_r+0x698>
 8008e5e:	9b07      	ldr	r3, [sp, #28]
 8008e60:	9a07      	ldr	r2, [sp, #28]
 8008e62:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008e66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d028      	beq.n	8008ebe <_dtoa_r+0xae6>
 8008e6c:	4649      	mov	r1, r9
 8008e6e:	2300      	movs	r3, #0
 8008e70:	220a      	movs	r2, #10
 8008e72:	4658      	mov	r0, fp
 8008e74:	f000 f9d6 	bl	8009224 <__multadd>
 8008e78:	42af      	cmp	r7, r5
 8008e7a:	4681      	mov	r9, r0
 8008e7c:	f04f 0300 	mov.w	r3, #0
 8008e80:	f04f 020a 	mov.w	r2, #10
 8008e84:	4639      	mov	r1, r7
 8008e86:	4658      	mov	r0, fp
 8008e88:	d107      	bne.n	8008e9a <_dtoa_r+0xac2>
 8008e8a:	f000 f9cb 	bl	8009224 <__multadd>
 8008e8e:	4607      	mov	r7, r0
 8008e90:	4605      	mov	r5, r0
 8008e92:	9b07      	ldr	r3, [sp, #28]
 8008e94:	3301      	adds	r3, #1
 8008e96:	9307      	str	r3, [sp, #28]
 8008e98:	e774      	b.n	8008d84 <_dtoa_r+0x9ac>
 8008e9a:	f000 f9c3 	bl	8009224 <__multadd>
 8008e9e:	4629      	mov	r1, r5
 8008ea0:	4607      	mov	r7, r0
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	220a      	movs	r2, #10
 8008ea6:	4658      	mov	r0, fp
 8008ea8:	f000 f9bc 	bl	8009224 <__multadd>
 8008eac:	4605      	mov	r5, r0
 8008eae:	e7f0      	b.n	8008e92 <_dtoa_r+0xaba>
 8008eb0:	9b00      	ldr	r3, [sp, #0]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	bfcc      	ite	gt
 8008eb6:	461e      	movgt	r6, r3
 8008eb8:	2601      	movle	r6, #1
 8008eba:	4456      	add	r6, sl
 8008ebc:	2700      	movs	r7, #0
 8008ebe:	4649      	mov	r1, r9
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	4658      	mov	r0, fp
 8008ec4:	f000 fb5a 	bl	800957c <__lshift>
 8008ec8:	4621      	mov	r1, r4
 8008eca:	4681      	mov	r9, r0
 8008ecc:	f000 fbc2 	bl	8009654 <__mcmp>
 8008ed0:	2800      	cmp	r0, #0
 8008ed2:	dcb0      	bgt.n	8008e36 <_dtoa_r+0xa5e>
 8008ed4:	d102      	bne.n	8008edc <_dtoa_r+0xb04>
 8008ed6:	f018 0f01 	tst.w	r8, #1
 8008eda:	d1ac      	bne.n	8008e36 <_dtoa_r+0xa5e>
 8008edc:	4633      	mov	r3, r6
 8008ede:	461e      	mov	r6, r3
 8008ee0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ee4:	2a30      	cmp	r2, #48	@ 0x30
 8008ee6:	d0fa      	beq.n	8008ede <_dtoa_r+0xb06>
 8008ee8:	e5c2      	b.n	8008a70 <_dtoa_r+0x698>
 8008eea:	459a      	cmp	sl, r3
 8008eec:	d1a4      	bne.n	8008e38 <_dtoa_r+0xa60>
 8008eee:	9b04      	ldr	r3, [sp, #16]
 8008ef0:	3301      	adds	r3, #1
 8008ef2:	9304      	str	r3, [sp, #16]
 8008ef4:	2331      	movs	r3, #49	@ 0x31
 8008ef6:	f88a 3000 	strb.w	r3, [sl]
 8008efa:	e5b9      	b.n	8008a70 <_dtoa_r+0x698>
 8008efc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008efe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008f5c <_dtoa_r+0xb84>
 8008f02:	b11b      	cbz	r3, 8008f0c <_dtoa_r+0xb34>
 8008f04:	f10a 0308 	add.w	r3, sl, #8
 8008f08:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008f0a:	6013      	str	r3, [r2, #0]
 8008f0c:	4650      	mov	r0, sl
 8008f0e:	b019      	add	sp, #100	@ 0x64
 8008f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	f77f ae37 	ble.w	8008b8a <_dtoa_r+0x7b2>
 8008f1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f20:	2001      	movs	r0, #1
 8008f22:	e655      	b.n	8008bd0 <_dtoa_r+0x7f8>
 8008f24:	9b00      	ldr	r3, [sp, #0]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	f77f aed6 	ble.w	8008cd8 <_dtoa_r+0x900>
 8008f2c:	4656      	mov	r6, sl
 8008f2e:	4621      	mov	r1, r4
 8008f30:	4648      	mov	r0, r9
 8008f32:	f7ff f9c6 	bl	80082c2 <quorem>
 8008f36:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008f3a:	f806 8b01 	strb.w	r8, [r6], #1
 8008f3e:	9b00      	ldr	r3, [sp, #0]
 8008f40:	eba6 020a 	sub.w	r2, r6, sl
 8008f44:	4293      	cmp	r3, r2
 8008f46:	ddb3      	ble.n	8008eb0 <_dtoa_r+0xad8>
 8008f48:	4649      	mov	r1, r9
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	220a      	movs	r2, #10
 8008f4e:	4658      	mov	r0, fp
 8008f50:	f000 f968 	bl	8009224 <__multadd>
 8008f54:	4681      	mov	r9, r0
 8008f56:	e7ea      	b.n	8008f2e <_dtoa_r+0xb56>
 8008f58:	0800a4a0 	.word	0x0800a4a0
 8008f5c:	0800a424 	.word	0x0800a424

08008f60 <_free_r>:
 8008f60:	b538      	push	{r3, r4, r5, lr}
 8008f62:	4605      	mov	r5, r0
 8008f64:	2900      	cmp	r1, #0
 8008f66:	d041      	beq.n	8008fec <_free_r+0x8c>
 8008f68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f6c:	1f0c      	subs	r4, r1, #4
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	bfb8      	it	lt
 8008f72:	18e4      	addlt	r4, r4, r3
 8008f74:	f000 f8e8 	bl	8009148 <__malloc_lock>
 8008f78:	4a1d      	ldr	r2, [pc, #116]	@ (8008ff0 <_free_r+0x90>)
 8008f7a:	6813      	ldr	r3, [r2, #0]
 8008f7c:	b933      	cbnz	r3, 8008f8c <_free_r+0x2c>
 8008f7e:	6063      	str	r3, [r4, #4]
 8008f80:	6014      	str	r4, [r2, #0]
 8008f82:	4628      	mov	r0, r5
 8008f84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f88:	f000 b8e4 	b.w	8009154 <__malloc_unlock>
 8008f8c:	42a3      	cmp	r3, r4
 8008f8e:	d908      	bls.n	8008fa2 <_free_r+0x42>
 8008f90:	6820      	ldr	r0, [r4, #0]
 8008f92:	1821      	adds	r1, r4, r0
 8008f94:	428b      	cmp	r3, r1
 8008f96:	bf01      	itttt	eq
 8008f98:	6819      	ldreq	r1, [r3, #0]
 8008f9a:	685b      	ldreq	r3, [r3, #4]
 8008f9c:	1809      	addeq	r1, r1, r0
 8008f9e:	6021      	streq	r1, [r4, #0]
 8008fa0:	e7ed      	b.n	8008f7e <_free_r+0x1e>
 8008fa2:	461a      	mov	r2, r3
 8008fa4:	685b      	ldr	r3, [r3, #4]
 8008fa6:	b10b      	cbz	r3, 8008fac <_free_r+0x4c>
 8008fa8:	42a3      	cmp	r3, r4
 8008faa:	d9fa      	bls.n	8008fa2 <_free_r+0x42>
 8008fac:	6811      	ldr	r1, [r2, #0]
 8008fae:	1850      	adds	r0, r2, r1
 8008fb0:	42a0      	cmp	r0, r4
 8008fb2:	d10b      	bne.n	8008fcc <_free_r+0x6c>
 8008fb4:	6820      	ldr	r0, [r4, #0]
 8008fb6:	4401      	add	r1, r0
 8008fb8:	1850      	adds	r0, r2, r1
 8008fba:	4283      	cmp	r3, r0
 8008fbc:	6011      	str	r1, [r2, #0]
 8008fbe:	d1e0      	bne.n	8008f82 <_free_r+0x22>
 8008fc0:	6818      	ldr	r0, [r3, #0]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	6053      	str	r3, [r2, #4]
 8008fc6:	4408      	add	r0, r1
 8008fc8:	6010      	str	r0, [r2, #0]
 8008fca:	e7da      	b.n	8008f82 <_free_r+0x22>
 8008fcc:	d902      	bls.n	8008fd4 <_free_r+0x74>
 8008fce:	230c      	movs	r3, #12
 8008fd0:	602b      	str	r3, [r5, #0]
 8008fd2:	e7d6      	b.n	8008f82 <_free_r+0x22>
 8008fd4:	6820      	ldr	r0, [r4, #0]
 8008fd6:	1821      	adds	r1, r4, r0
 8008fd8:	428b      	cmp	r3, r1
 8008fda:	bf04      	itt	eq
 8008fdc:	6819      	ldreq	r1, [r3, #0]
 8008fde:	685b      	ldreq	r3, [r3, #4]
 8008fe0:	6063      	str	r3, [r4, #4]
 8008fe2:	bf04      	itt	eq
 8008fe4:	1809      	addeq	r1, r1, r0
 8008fe6:	6021      	streq	r1, [r4, #0]
 8008fe8:	6054      	str	r4, [r2, #4]
 8008fea:	e7ca      	b.n	8008f82 <_free_r+0x22>
 8008fec:	bd38      	pop	{r3, r4, r5, pc}
 8008fee:	bf00      	nop
 8008ff0:	2000052c 	.word	0x2000052c

08008ff4 <malloc>:
 8008ff4:	4b02      	ldr	r3, [pc, #8]	@ (8009000 <malloc+0xc>)
 8008ff6:	4601      	mov	r1, r0
 8008ff8:	6818      	ldr	r0, [r3, #0]
 8008ffa:	f000 b825 	b.w	8009048 <_malloc_r>
 8008ffe:	bf00      	nop
 8009000:	20000044 	.word	0x20000044

08009004 <sbrk_aligned>:
 8009004:	b570      	push	{r4, r5, r6, lr}
 8009006:	4e0f      	ldr	r6, [pc, #60]	@ (8009044 <sbrk_aligned+0x40>)
 8009008:	460c      	mov	r4, r1
 800900a:	6831      	ldr	r1, [r6, #0]
 800900c:	4605      	mov	r5, r0
 800900e:	b911      	cbnz	r1, 8009016 <sbrk_aligned+0x12>
 8009010:	f000 fe46 	bl	8009ca0 <_sbrk_r>
 8009014:	6030      	str	r0, [r6, #0]
 8009016:	4621      	mov	r1, r4
 8009018:	4628      	mov	r0, r5
 800901a:	f000 fe41 	bl	8009ca0 <_sbrk_r>
 800901e:	1c43      	adds	r3, r0, #1
 8009020:	d103      	bne.n	800902a <sbrk_aligned+0x26>
 8009022:	f04f 34ff 	mov.w	r4, #4294967295
 8009026:	4620      	mov	r0, r4
 8009028:	bd70      	pop	{r4, r5, r6, pc}
 800902a:	1cc4      	adds	r4, r0, #3
 800902c:	f024 0403 	bic.w	r4, r4, #3
 8009030:	42a0      	cmp	r0, r4
 8009032:	d0f8      	beq.n	8009026 <sbrk_aligned+0x22>
 8009034:	1a21      	subs	r1, r4, r0
 8009036:	4628      	mov	r0, r5
 8009038:	f000 fe32 	bl	8009ca0 <_sbrk_r>
 800903c:	3001      	adds	r0, #1
 800903e:	d1f2      	bne.n	8009026 <sbrk_aligned+0x22>
 8009040:	e7ef      	b.n	8009022 <sbrk_aligned+0x1e>
 8009042:	bf00      	nop
 8009044:	20000528 	.word	0x20000528

08009048 <_malloc_r>:
 8009048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800904c:	1ccd      	adds	r5, r1, #3
 800904e:	f025 0503 	bic.w	r5, r5, #3
 8009052:	3508      	adds	r5, #8
 8009054:	2d0c      	cmp	r5, #12
 8009056:	bf38      	it	cc
 8009058:	250c      	movcc	r5, #12
 800905a:	2d00      	cmp	r5, #0
 800905c:	4606      	mov	r6, r0
 800905e:	db01      	blt.n	8009064 <_malloc_r+0x1c>
 8009060:	42a9      	cmp	r1, r5
 8009062:	d904      	bls.n	800906e <_malloc_r+0x26>
 8009064:	230c      	movs	r3, #12
 8009066:	6033      	str	r3, [r6, #0]
 8009068:	2000      	movs	r0, #0
 800906a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800906e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009144 <_malloc_r+0xfc>
 8009072:	f000 f869 	bl	8009148 <__malloc_lock>
 8009076:	f8d8 3000 	ldr.w	r3, [r8]
 800907a:	461c      	mov	r4, r3
 800907c:	bb44      	cbnz	r4, 80090d0 <_malloc_r+0x88>
 800907e:	4629      	mov	r1, r5
 8009080:	4630      	mov	r0, r6
 8009082:	f7ff ffbf 	bl	8009004 <sbrk_aligned>
 8009086:	1c43      	adds	r3, r0, #1
 8009088:	4604      	mov	r4, r0
 800908a:	d158      	bne.n	800913e <_malloc_r+0xf6>
 800908c:	f8d8 4000 	ldr.w	r4, [r8]
 8009090:	4627      	mov	r7, r4
 8009092:	2f00      	cmp	r7, #0
 8009094:	d143      	bne.n	800911e <_malloc_r+0xd6>
 8009096:	2c00      	cmp	r4, #0
 8009098:	d04b      	beq.n	8009132 <_malloc_r+0xea>
 800909a:	6823      	ldr	r3, [r4, #0]
 800909c:	4639      	mov	r1, r7
 800909e:	4630      	mov	r0, r6
 80090a0:	eb04 0903 	add.w	r9, r4, r3
 80090a4:	f000 fdfc 	bl	8009ca0 <_sbrk_r>
 80090a8:	4581      	cmp	r9, r0
 80090aa:	d142      	bne.n	8009132 <_malloc_r+0xea>
 80090ac:	6821      	ldr	r1, [r4, #0]
 80090ae:	1a6d      	subs	r5, r5, r1
 80090b0:	4629      	mov	r1, r5
 80090b2:	4630      	mov	r0, r6
 80090b4:	f7ff ffa6 	bl	8009004 <sbrk_aligned>
 80090b8:	3001      	adds	r0, #1
 80090ba:	d03a      	beq.n	8009132 <_malloc_r+0xea>
 80090bc:	6823      	ldr	r3, [r4, #0]
 80090be:	442b      	add	r3, r5
 80090c0:	6023      	str	r3, [r4, #0]
 80090c2:	f8d8 3000 	ldr.w	r3, [r8]
 80090c6:	685a      	ldr	r2, [r3, #4]
 80090c8:	bb62      	cbnz	r2, 8009124 <_malloc_r+0xdc>
 80090ca:	f8c8 7000 	str.w	r7, [r8]
 80090ce:	e00f      	b.n	80090f0 <_malloc_r+0xa8>
 80090d0:	6822      	ldr	r2, [r4, #0]
 80090d2:	1b52      	subs	r2, r2, r5
 80090d4:	d420      	bmi.n	8009118 <_malloc_r+0xd0>
 80090d6:	2a0b      	cmp	r2, #11
 80090d8:	d917      	bls.n	800910a <_malloc_r+0xc2>
 80090da:	1961      	adds	r1, r4, r5
 80090dc:	42a3      	cmp	r3, r4
 80090de:	6025      	str	r5, [r4, #0]
 80090e0:	bf18      	it	ne
 80090e2:	6059      	strne	r1, [r3, #4]
 80090e4:	6863      	ldr	r3, [r4, #4]
 80090e6:	bf08      	it	eq
 80090e8:	f8c8 1000 	streq.w	r1, [r8]
 80090ec:	5162      	str	r2, [r4, r5]
 80090ee:	604b      	str	r3, [r1, #4]
 80090f0:	4630      	mov	r0, r6
 80090f2:	f000 f82f 	bl	8009154 <__malloc_unlock>
 80090f6:	f104 000b 	add.w	r0, r4, #11
 80090fa:	1d23      	adds	r3, r4, #4
 80090fc:	f020 0007 	bic.w	r0, r0, #7
 8009100:	1ac2      	subs	r2, r0, r3
 8009102:	bf1c      	itt	ne
 8009104:	1a1b      	subne	r3, r3, r0
 8009106:	50a3      	strne	r3, [r4, r2]
 8009108:	e7af      	b.n	800906a <_malloc_r+0x22>
 800910a:	6862      	ldr	r2, [r4, #4]
 800910c:	42a3      	cmp	r3, r4
 800910e:	bf0c      	ite	eq
 8009110:	f8c8 2000 	streq.w	r2, [r8]
 8009114:	605a      	strne	r2, [r3, #4]
 8009116:	e7eb      	b.n	80090f0 <_malloc_r+0xa8>
 8009118:	4623      	mov	r3, r4
 800911a:	6864      	ldr	r4, [r4, #4]
 800911c:	e7ae      	b.n	800907c <_malloc_r+0x34>
 800911e:	463c      	mov	r4, r7
 8009120:	687f      	ldr	r7, [r7, #4]
 8009122:	e7b6      	b.n	8009092 <_malloc_r+0x4a>
 8009124:	461a      	mov	r2, r3
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	42a3      	cmp	r3, r4
 800912a:	d1fb      	bne.n	8009124 <_malloc_r+0xdc>
 800912c:	2300      	movs	r3, #0
 800912e:	6053      	str	r3, [r2, #4]
 8009130:	e7de      	b.n	80090f0 <_malloc_r+0xa8>
 8009132:	230c      	movs	r3, #12
 8009134:	6033      	str	r3, [r6, #0]
 8009136:	4630      	mov	r0, r6
 8009138:	f000 f80c 	bl	8009154 <__malloc_unlock>
 800913c:	e794      	b.n	8009068 <_malloc_r+0x20>
 800913e:	6005      	str	r5, [r0, #0]
 8009140:	e7d6      	b.n	80090f0 <_malloc_r+0xa8>
 8009142:	bf00      	nop
 8009144:	2000052c 	.word	0x2000052c

08009148 <__malloc_lock>:
 8009148:	4801      	ldr	r0, [pc, #4]	@ (8009150 <__malloc_lock+0x8>)
 800914a:	f7ff b8b8 	b.w	80082be <__retarget_lock_acquire_recursive>
 800914e:	bf00      	nop
 8009150:	20000524 	.word	0x20000524

08009154 <__malloc_unlock>:
 8009154:	4801      	ldr	r0, [pc, #4]	@ (800915c <__malloc_unlock+0x8>)
 8009156:	f7ff b8b3 	b.w	80082c0 <__retarget_lock_release_recursive>
 800915a:	bf00      	nop
 800915c:	20000524 	.word	0x20000524

08009160 <_Balloc>:
 8009160:	b570      	push	{r4, r5, r6, lr}
 8009162:	69c6      	ldr	r6, [r0, #28]
 8009164:	4604      	mov	r4, r0
 8009166:	460d      	mov	r5, r1
 8009168:	b976      	cbnz	r6, 8009188 <_Balloc+0x28>
 800916a:	2010      	movs	r0, #16
 800916c:	f7ff ff42 	bl	8008ff4 <malloc>
 8009170:	4602      	mov	r2, r0
 8009172:	61e0      	str	r0, [r4, #28]
 8009174:	b920      	cbnz	r0, 8009180 <_Balloc+0x20>
 8009176:	4b18      	ldr	r3, [pc, #96]	@ (80091d8 <_Balloc+0x78>)
 8009178:	4818      	ldr	r0, [pc, #96]	@ (80091dc <_Balloc+0x7c>)
 800917a:	216b      	movs	r1, #107	@ 0x6b
 800917c:	f000 fdae 	bl	8009cdc <__assert_func>
 8009180:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009184:	6006      	str	r6, [r0, #0]
 8009186:	60c6      	str	r6, [r0, #12]
 8009188:	69e6      	ldr	r6, [r4, #28]
 800918a:	68f3      	ldr	r3, [r6, #12]
 800918c:	b183      	cbz	r3, 80091b0 <_Balloc+0x50>
 800918e:	69e3      	ldr	r3, [r4, #28]
 8009190:	68db      	ldr	r3, [r3, #12]
 8009192:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009196:	b9b8      	cbnz	r0, 80091c8 <_Balloc+0x68>
 8009198:	2101      	movs	r1, #1
 800919a:	fa01 f605 	lsl.w	r6, r1, r5
 800919e:	1d72      	adds	r2, r6, #5
 80091a0:	0092      	lsls	r2, r2, #2
 80091a2:	4620      	mov	r0, r4
 80091a4:	f000 fdb8 	bl	8009d18 <_calloc_r>
 80091a8:	b160      	cbz	r0, 80091c4 <_Balloc+0x64>
 80091aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80091ae:	e00e      	b.n	80091ce <_Balloc+0x6e>
 80091b0:	2221      	movs	r2, #33	@ 0x21
 80091b2:	2104      	movs	r1, #4
 80091b4:	4620      	mov	r0, r4
 80091b6:	f000 fdaf 	bl	8009d18 <_calloc_r>
 80091ba:	69e3      	ldr	r3, [r4, #28]
 80091bc:	60f0      	str	r0, [r6, #12]
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d1e4      	bne.n	800918e <_Balloc+0x2e>
 80091c4:	2000      	movs	r0, #0
 80091c6:	bd70      	pop	{r4, r5, r6, pc}
 80091c8:	6802      	ldr	r2, [r0, #0]
 80091ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80091ce:	2300      	movs	r3, #0
 80091d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80091d4:	e7f7      	b.n	80091c6 <_Balloc+0x66>
 80091d6:	bf00      	nop
 80091d8:	0800a431 	.word	0x0800a431
 80091dc:	0800a4b1 	.word	0x0800a4b1

080091e0 <_Bfree>:
 80091e0:	b570      	push	{r4, r5, r6, lr}
 80091e2:	69c6      	ldr	r6, [r0, #28]
 80091e4:	4605      	mov	r5, r0
 80091e6:	460c      	mov	r4, r1
 80091e8:	b976      	cbnz	r6, 8009208 <_Bfree+0x28>
 80091ea:	2010      	movs	r0, #16
 80091ec:	f7ff ff02 	bl	8008ff4 <malloc>
 80091f0:	4602      	mov	r2, r0
 80091f2:	61e8      	str	r0, [r5, #28]
 80091f4:	b920      	cbnz	r0, 8009200 <_Bfree+0x20>
 80091f6:	4b09      	ldr	r3, [pc, #36]	@ (800921c <_Bfree+0x3c>)
 80091f8:	4809      	ldr	r0, [pc, #36]	@ (8009220 <_Bfree+0x40>)
 80091fa:	218f      	movs	r1, #143	@ 0x8f
 80091fc:	f000 fd6e 	bl	8009cdc <__assert_func>
 8009200:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009204:	6006      	str	r6, [r0, #0]
 8009206:	60c6      	str	r6, [r0, #12]
 8009208:	b13c      	cbz	r4, 800921a <_Bfree+0x3a>
 800920a:	69eb      	ldr	r3, [r5, #28]
 800920c:	6862      	ldr	r2, [r4, #4]
 800920e:	68db      	ldr	r3, [r3, #12]
 8009210:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009214:	6021      	str	r1, [r4, #0]
 8009216:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800921a:	bd70      	pop	{r4, r5, r6, pc}
 800921c:	0800a431 	.word	0x0800a431
 8009220:	0800a4b1 	.word	0x0800a4b1

08009224 <__multadd>:
 8009224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009228:	690d      	ldr	r5, [r1, #16]
 800922a:	4607      	mov	r7, r0
 800922c:	460c      	mov	r4, r1
 800922e:	461e      	mov	r6, r3
 8009230:	f101 0c14 	add.w	ip, r1, #20
 8009234:	2000      	movs	r0, #0
 8009236:	f8dc 3000 	ldr.w	r3, [ip]
 800923a:	b299      	uxth	r1, r3
 800923c:	fb02 6101 	mla	r1, r2, r1, r6
 8009240:	0c1e      	lsrs	r6, r3, #16
 8009242:	0c0b      	lsrs	r3, r1, #16
 8009244:	fb02 3306 	mla	r3, r2, r6, r3
 8009248:	b289      	uxth	r1, r1
 800924a:	3001      	adds	r0, #1
 800924c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009250:	4285      	cmp	r5, r0
 8009252:	f84c 1b04 	str.w	r1, [ip], #4
 8009256:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800925a:	dcec      	bgt.n	8009236 <__multadd+0x12>
 800925c:	b30e      	cbz	r6, 80092a2 <__multadd+0x7e>
 800925e:	68a3      	ldr	r3, [r4, #8]
 8009260:	42ab      	cmp	r3, r5
 8009262:	dc19      	bgt.n	8009298 <__multadd+0x74>
 8009264:	6861      	ldr	r1, [r4, #4]
 8009266:	4638      	mov	r0, r7
 8009268:	3101      	adds	r1, #1
 800926a:	f7ff ff79 	bl	8009160 <_Balloc>
 800926e:	4680      	mov	r8, r0
 8009270:	b928      	cbnz	r0, 800927e <__multadd+0x5a>
 8009272:	4602      	mov	r2, r0
 8009274:	4b0c      	ldr	r3, [pc, #48]	@ (80092a8 <__multadd+0x84>)
 8009276:	480d      	ldr	r0, [pc, #52]	@ (80092ac <__multadd+0x88>)
 8009278:	21ba      	movs	r1, #186	@ 0xba
 800927a:	f000 fd2f 	bl	8009cdc <__assert_func>
 800927e:	6922      	ldr	r2, [r4, #16]
 8009280:	3202      	adds	r2, #2
 8009282:	f104 010c 	add.w	r1, r4, #12
 8009286:	0092      	lsls	r2, r2, #2
 8009288:	300c      	adds	r0, #12
 800928a:	f000 fd19 	bl	8009cc0 <memcpy>
 800928e:	4621      	mov	r1, r4
 8009290:	4638      	mov	r0, r7
 8009292:	f7ff ffa5 	bl	80091e0 <_Bfree>
 8009296:	4644      	mov	r4, r8
 8009298:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800929c:	3501      	adds	r5, #1
 800929e:	615e      	str	r6, [r3, #20]
 80092a0:	6125      	str	r5, [r4, #16]
 80092a2:	4620      	mov	r0, r4
 80092a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092a8:	0800a4a0 	.word	0x0800a4a0
 80092ac:	0800a4b1 	.word	0x0800a4b1

080092b0 <__hi0bits>:
 80092b0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80092b4:	4603      	mov	r3, r0
 80092b6:	bf36      	itet	cc
 80092b8:	0403      	lslcc	r3, r0, #16
 80092ba:	2000      	movcs	r0, #0
 80092bc:	2010      	movcc	r0, #16
 80092be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80092c2:	bf3c      	itt	cc
 80092c4:	021b      	lslcc	r3, r3, #8
 80092c6:	3008      	addcc	r0, #8
 80092c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80092cc:	bf3c      	itt	cc
 80092ce:	011b      	lslcc	r3, r3, #4
 80092d0:	3004      	addcc	r0, #4
 80092d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092d6:	bf3c      	itt	cc
 80092d8:	009b      	lslcc	r3, r3, #2
 80092da:	3002      	addcc	r0, #2
 80092dc:	2b00      	cmp	r3, #0
 80092de:	db05      	blt.n	80092ec <__hi0bits+0x3c>
 80092e0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80092e4:	f100 0001 	add.w	r0, r0, #1
 80092e8:	bf08      	it	eq
 80092ea:	2020      	moveq	r0, #32
 80092ec:	4770      	bx	lr

080092ee <__lo0bits>:
 80092ee:	6803      	ldr	r3, [r0, #0]
 80092f0:	4602      	mov	r2, r0
 80092f2:	f013 0007 	ands.w	r0, r3, #7
 80092f6:	d00b      	beq.n	8009310 <__lo0bits+0x22>
 80092f8:	07d9      	lsls	r1, r3, #31
 80092fa:	d421      	bmi.n	8009340 <__lo0bits+0x52>
 80092fc:	0798      	lsls	r0, r3, #30
 80092fe:	bf49      	itett	mi
 8009300:	085b      	lsrmi	r3, r3, #1
 8009302:	089b      	lsrpl	r3, r3, #2
 8009304:	2001      	movmi	r0, #1
 8009306:	6013      	strmi	r3, [r2, #0]
 8009308:	bf5c      	itt	pl
 800930a:	6013      	strpl	r3, [r2, #0]
 800930c:	2002      	movpl	r0, #2
 800930e:	4770      	bx	lr
 8009310:	b299      	uxth	r1, r3
 8009312:	b909      	cbnz	r1, 8009318 <__lo0bits+0x2a>
 8009314:	0c1b      	lsrs	r3, r3, #16
 8009316:	2010      	movs	r0, #16
 8009318:	b2d9      	uxtb	r1, r3
 800931a:	b909      	cbnz	r1, 8009320 <__lo0bits+0x32>
 800931c:	3008      	adds	r0, #8
 800931e:	0a1b      	lsrs	r3, r3, #8
 8009320:	0719      	lsls	r1, r3, #28
 8009322:	bf04      	itt	eq
 8009324:	091b      	lsreq	r3, r3, #4
 8009326:	3004      	addeq	r0, #4
 8009328:	0799      	lsls	r1, r3, #30
 800932a:	bf04      	itt	eq
 800932c:	089b      	lsreq	r3, r3, #2
 800932e:	3002      	addeq	r0, #2
 8009330:	07d9      	lsls	r1, r3, #31
 8009332:	d403      	bmi.n	800933c <__lo0bits+0x4e>
 8009334:	085b      	lsrs	r3, r3, #1
 8009336:	f100 0001 	add.w	r0, r0, #1
 800933a:	d003      	beq.n	8009344 <__lo0bits+0x56>
 800933c:	6013      	str	r3, [r2, #0]
 800933e:	4770      	bx	lr
 8009340:	2000      	movs	r0, #0
 8009342:	4770      	bx	lr
 8009344:	2020      	movs	r0, #32
 8009346:	4770      	bx	lr

08009348 <__i2b>:
 8009348:	b510      	push	{r4, lr}
 800934a:	460c      	mov	r4, r1
 800934c:	2101      	movs	r1, #1
 800934e:	f7ff ff07 	bl	8009160 <_Balloc>
 8009352:	4602      	mov	r2, r0
 8009354:	b928      	cbnz	r0, 8009362 <__i2b+0x1a>
 8009356:	4b05      	ldr	r3, [pc, #20]	@ (800936c <__i2b+0x24>)
 8009358:	4805      	ldr	r0, [pc, #20]	@ (8009370 <__i2b+0x28>)
 800935a:	f240 1145 	movw	r1, #325	@ 0x145
 800935e:	f000 fcbd 	bl	8009cdc <__assert_func>
 8009362:	2301      	movs	r3, #1
 8009364:	6144      	str	r4, [r0, #20]
 8009366:	6103      	str	r3, [r0, #16]
 8009368:	bd10      	pop	{r4, pc}
 800936a:	bf00      	nop
 800936c:	0800a4a0 	.word	0x0800a4a0
 8009370:	0800a4b1 	.word	0x0800a4b1

08009374 <__multiply>:
 8009374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009378:	4614      	mov	r4, r2
 800937a:	690a      	ldr	r2, [r1, #16]
 800937c:	6923      	ldr	r3, [r4, #16]
 800937e:	429a      	cmp	r2, r3
 8009380:	bfa8      	it	ge
 8009382:	4623      	movge	r3, r4
 8009384:	460f      	mov	r7, r1
 8009386:	bfa4      	itt	ge
 8009388:	460c      	movge	r4, r1
 800938a:	461f      	movge	r7, r3
 800938c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009390:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009394:	68a3      	ldr	r3, [r4, #8]
 8009396:	6861      	ldr	r1, [r4, #4]
 8009398:	eb0a 0609 	add.w	r6, sl, r9
 800939c:	42b3      	cmp	r3, r6
 800939e:	b085      	sub	sp, #20
 80093a0:	bfb8      	it	lt
 80093a2:	3101      	addlt	r1, #1
 80093a4:	f7ff fedc 	bl	8009160 <_Balloc>
 80093a8:	b930      	cbnz	r0, 80093b8 <__multiply+0x44>
 80093aa:	4602      	mov	r2, r0
 80093ac:	4b44      	ldr	r3, [pc, #272]	@ (80094c0 <__multiply+0x14c>)
 80093ae:	4845      	ldr	r0, [pc, #276]	@ (80094c4 <__multiply+0x150>)
 80093b0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80093b4:	f000 fc92 	bl	8009cdc <__assert_func>
 80093b8:	f100 0514 	add.w	r5, r0, #20
 80093bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80093c0:	462b      	mov	r3, r5
 80093c2:	2200      	movs	r2, #0
 80093c4:	4543      	cmp	r3, r8
 80093c6:	d321      	bcc.n	800940c <__multiply+0x98>
 80093c8:	f107 0114 	add.w	r1, r7, #20
 80093cc:	f104 0214 	add.w	r2, r4, #20
 80093d0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80093d4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80093d8:	9302      	str	r3, [sp, #8]
 80093da:	1b13      	subs	r3, r2, r4
 80093dc:	3b15      	subs	r3, #21
 80093de:	f023 0303 	bic.w	r3, r3, #3
 80093e2:	3304      	adds	r3, #4
 80093e4:	f104 0715 	add.w	r7, r4, #21
 80093e8:	42ba      	cmp	r2, r7
 80093ea:	bf38      	it	cc
 80093ec:	2304      	movcc	r3, #4
 80093ee:	9301      	str	r3, [sp, #4]
 80093f0:	9b02      	ldr	r3, [sp, #8]
 80093f2:	9103      	str	r1, [sp, #12]
 80093f4:	428b      	cmp	r3, r1
 80093f6:	d80c      	bhi.n	8009412 <__multiply+0x9e>
 80093f8:	2e00      	cmp	r6, #0
 80093fa:	dd03      	ble.n	8009404 <__multiply+0x90>
 80093fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009400:	2b00      	cmp	r3, #0
 8009402:	d05b      	beq.n	80094bc <__multiply+0x148>
 8009404:	6106      	str	r6, [r0, #16]
 8009406:	b005      	add	sp, #20
 8009408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800940c:	f843 2b04 	str.w	r2, [r3], #4
 8009410:	e7d8      	b.n	80093c4 <__multiply+0x50>
 8009412:	f8b1 a000 	ldrh.w	sl, [r1]
 8009416:	f1ba 0f00 	cmp.w	sl, #0
 800941a:	d024      	beq.n	8009466 <__multiply+0xf2>
 800941c:	f104 0e14 	add.w	lr, r4, #20
 8009420:	46a9      	mov	r9, r5
 8009422:	f04f 0c00 	mov.w	ip, #0
 8009426:	f85e 7b04 	ldr.w	r7, [lr], #4
 800942a:	f8d9 3000 	ldr.w	r3, [r9]
 800942e:	fa1f fb87 	uxth.w	fp, r7
 8009432:	b29b      	uxth	r3, r3
 8009434:	fb0a 330b 	mla	r3, sl, fp, r3
 8009438:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800943c:	f8d9 7000 	ldr.w	r7, [r9]
 8009440:	4463      	add	r3, ip
 8009442:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009446:	fb0a c70b 	mla	r7, sl, fp, ip
 800944a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800944e:	b29b      	uxth	r3, r3
 8009450:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009454:	4572      	cmp	r2, lr
 8009456:	f849 3b04 	str.w	r3, [r9], #4
 800945a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800945e:	d8e2      	bhi.n	8009426 <__multiply+0xb2>
 8009460:	9b01      	ldr	r3, [sp, #4]
 8009462:	f845 c003 	str.w	ip, [r5, r3]
 8009466:	9b03      	ldr	r3, [sp, #12]
 8009468:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800946c:	3104      	adds	r1, #4
 800946e:	f1b9 0f00 	cmp.w	r9, #0
 8009472:	d021      	beq.n	80094b8 <__multiply+0x144>
 8009474:	682b      	ldr	r3, [r5, #0]
 8009476:	f104 0c14 	add.w	ip, r4, #20
 800947a:	46ae      	mov	lr, r5
 800947c:	f04f 0a00 	mov.w	sl, #0
 8009480:	f8bc b000 	ldrh.w	fp, [ip]
 8009484:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009488:	fb09 770b 	mla	r7, r9, fp, r7
 800948c:	4457      	add	r7, sl
 800948e:	b29b      	uxth	r3, r3
 8009490:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009494:	f84e 3b04 	str.w	r3, [lr], #4
 8009498:	f85c 3b04 	ldr.w	r3, [ip], #4
 800949c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80094a0:	f8be 3000 	ldrh.w	r3, [lr]
 80094a4:	fb09 330a 	mla	r3, r9, sl, r3
 80094a8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80094ac:	4562      	cmp	r2, ip
 80094ae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80094b2:	d8e5      	bhi.n	8009480 <__multiply+0x10c>
 80094b4:	9f01      	ldr	r7, [sp, #4]
 80094b6:	51eb      	str	r3, [r5, r7]
 80094b8:	3504      	adds	r5, #4
 80094ba:	e799      	b.n	80093f0 <__multiply+0x7c>
 80094bc:	3e01      	subs	r6, #1
 80094be:	e79b      	b.n	80093f8 <__multiply+0x84>
 80094c0:	0800a4a0 	.word	0x0800a4a0
 80094c4:	0800a4b1 	.word	0x0800a4b1

080094c8 <__pow5mult>:
 80094c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094cc:	4615      	mov	r5, r2
 80094ce:	f012 0203 	ands.w	r2, r2, #3
 80094d2:	4607      	mov	r7, r0
 80094d4:	460e      	mov	r6, r1
 80094d6:	d007      	beq.n	80094e8 <__pow5mult+0x20>
 80094d8:	4c25      	ldr	r4, [pc, #148]	@ (8009570 <__pow5mult+0xa8>)
 80094da:	3a01      	subs	r2, #1
 80094dc:	2300      	movs	r3, #0
 80094de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80094e2:	f7ff fe9f 	bl	8009224 <__multadd>
 80094e6:	4606      	mov	r6, r0
 80094e8:	10ad      	asrs	r5, r5, #2
 80094ea:	d03d      	beq.n	8009568 <__pow5mult+0xa0>
 80094ec:	69fc      	ldr	r4, [r7, #28]
 80094ee:	b97c      	cbnz	r4, 8009510 <__pow5mult+0x48>
 80094f0:	2010      	movs	r0, #16
 80094f2:	f7ff fd7f 	bl	8008ff4 <malloc>
 80094f6:	4602      	mov	r2, r0
 80094f8:	61f8      	str	r0, [r7, #28]
 80094fa:	b928      	cbnz	r0, 8009508 <__pow5mult+0x40>
 80094fc:	4b1d      	ldr	r3, [pc, #116]	@ (8009574 <__pow5mult+0xac>)
 80094fe:	481e      	ldr	r0, [pc, #120]	@ (8009578 <__pow5mult+0xb0>)
 8009500:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009504:	f000 fbea 	bl	8009cdc <__assert_func>
 8009508:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800950c:	6004      	str	r4, [r0, #0]
 800950e:	60c4      	str	r4, [r0, #12]
 8009510:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009514:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009518:	b94c      	cbnz	r4, 800952e <__pow5mult+0x66>
 800951a:	f240 2171 	movw	r1, #625	@ 0x271
 800951e:	4638      	mov	r0, r7
 8009520:	f7ff ff12 	bl	8009348 <__i2b>
 8009524:	2300      	movs	r3, #0
 8009526:	f8c8 0008 	str.w	r0, [r8, #8]
 800952a:	4604      	mov	r4, r0
 800952c:	6003      	str	r3, [r0, #0]
 800952e:	f04f 0900 	mov.w	r9, #0
 8009532:	07eb      	lsls	r3, r5, #31
 8009534:	d50a      	bpl.n	800954c <__pow5mult+0x84>
 8009536:	4631      	mov	r1, r6
 8009538:	4622      	mov	r2, r4
 800953a:	4638      	mov	r0, r7
 800953c:	f7ff ff1a 	bl	8009374 <__multiply>
 8009540:	4631      	mov	r1, r6
 8009542:	4680      	mov	r8, r0
 8009544:	4638      	mov	r0, r7
 8009546:	f7ff fe4b 	bl	80091e0 <_Bfree>
 800954a:	4646      	mov	r6, r8
 800954c:	106d      	asrs	r5, r5, #1
 800954e:	d00b      	beq.n	8009568 <__pow5mult+0xa0>
 8009550:	6820      	ldr	r0, [r4, #0]
 8009552:	b938      	cbnz	r0, 8009564 <__pow5mult+0x9c>
 8009554:	4622      	mov	r2, r4
 8009556:	4621      	mov	r1, r4
 8009558:	4638      	mov	r0, r7
 800955a:	f7ff ff0b 	bl	8009374 <__multiply>
 800955e:	6020      	str	r0, [r4, #0]
 8009560:	f8c0 9000 	str.w	r9, [r0]
 8009564:	4604      	mov	r4, r0
 8009566:	e7e4      	b.n	8009532 <__pow5mult+0x6a>
 8009568:	4630      	mov	r0, r6
 800956a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800956e:	bf00      	nop
 8009570:	0800a50c 	.word	0x0800a50c
 8009574:	0800a431 	.word	0x0800a431
 8009578:	0800a4b1 	.word	0x0800a4b1

0800957c <__lshift>:
 800957c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009580:	460c      	mov	r4, r1
 8009582:	6849      	ldr	r1, [r1, #4]
 8009584:	6923      	ldr	r3, [r4, #16]
 8009586:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800958a:	68a3      	ldr	r3, [r4, #8]
 800958c:	4607      	mov	r7, r0
 800958e:	4691      	mov	r9, r2
 8009590:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009594:	f108 0601 	add.w	r6, r8, #1
 8009598:	42b3      	cmp	r3, r6
 800959a:	db0b      	blt.n	80095b4 <__lshift+0x38>
 800959c:	4638      	mov	r0, r7
 800959e:	f7ff fddf 	bl	8009160 <_Balloc>
 80095a2:	4605      	mov	r5, r0
 80095a4:	b948      	cbnz	r0, 80095ba <__lshift+0x3e>
 80095a6:	4602      	mov	r2, r0
 80095a8:	4b28      	ldr	r3, [pc, #160]	@ (800964c <__lshift+0xd0>)
 80095aa:	4829      	ldr	r0, [pc, #164]	@ (8009650 <__lshift+0xd4>)
 80095ac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80095b0:	f000 fb94 	bl	8009cdc <__assert_func>
 80095b4:	3101      	adds	r1, #1
 80095b6:	005b      	lsls	r3, r3, #1
 80095b8:	e7ee      	b.n	8009598 <__lshift+0x1c>
 80095ba:	2300      	movs	r3, #0
 80095bc:	f100 0114 	add.w	r1, r0, #20
 80095c0:	f100 0210 	add.w	r2, r0, #16
 80095c4:	4618      	mov	r0, r3
 80095c6:	4553      	cmp	r3, sl
 80095c8:	db33      	blt.n	8009632 <__lshift+0xb6>
 80095ca:	6920      	ldr	r0, [r4, #16]
 80095cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80095d0:	f104 0314 	add.w	r3, r4, #20
 80095d4:	f019 091f 	ands.w	r9, r9, #31
 80095d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80095dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80095e0:	d02b      	beq.n	800963a <__lshift+0xbe>
 80095e2:	f1c9 0e20 	rsb	lr, r9, #32
 80095e6:	468a      	mov	sl, r1
 80095e8:	2200      	movs	r2, #0
 80095ea:	6818      	ldr	r0, [r3, #0]
 80095ec:	fa00 f009 	lsl.w	r0, r0, r9
 80095f0:	4310      	orrs	r0, r2
 80095f2:	f84a 0b04 	str.w	r0, [sl], #4
 80095f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80095fa:	459c      	cmp	ip, r3
 80095fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8009600:	d8f3      	bhi.n	80095ea <__lshift+0x6e>
 8009602:	ebac 0304 	sub.w	r3, ip, r4
 8009606:	3b15      	subs	r3, #21
 8009608:	f023 0303 	bic.w	r3, r3, #3
 800960c:	3304      	adds	r3, #4
 800960e:	f104 0015 	add.w	r0, r4, #21
 8009612:	4584      	cmp	ip, r0
 8009614:	bf38      	it	cc
 8009616:	2304      	movcc	r3, #4
 8009618:	50ca      	str	r2, [r1, r3]
 800961a:	b10a      	cbz	r2, 8009620 <__lshift+0xa4>
 800961c:	f108 0602 	add.w	r6, r8, #2
 8009620:	3e01      	subs	r6, #1
 8009622:	4638      	mov	r0, r7
 8009624:	612e      	str	r6, [r5, #16]
 8009626:	4621      	mov	r1, r4
 8009628:	f7ff fdda 	bl	80091e0 <_Bfree>
 800962c:	4628      	mov	r0, r5
 800962e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009632:	f842 0f04 	str.w	r0, [r2, #4]!
 8009636:	3301      	adds	r3, #1
 8009638:	e7c5      	b.n	80095c6 <__lshift+0x4a>
 800963a:	3904      	subs	r1, #4
 800963c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009640:	f841 2f04 	str.w	r2, [r1, #4]!
 8009644:	459c      	cmp	ip, r3
 8009646:	d8f9      	bhi.n	800963c <__lshift+0xc0>
 8009648:	e7ea      	b.n	8009620 <__lshift+0xa4>
 800964a:	bf00      	nop
 800964c:	0800a4a0 	.word	0x0800a4a0
 8009650:	0800a4b1 	.word	0x0800a4b1

08009654 <__mcmp>:
 8009654:	690a      	ldr	r2, [r1, #16]
 8009656:	4603      	mov	r3, r0
 8009658:	6900      	ldr	r0, [r0, #16]
 800965a:	1a80      	subs	r0, r0, r2
 800965c:	b530      	push	{r4, r5, lr}
 800965e:	d10e      	bne.n	800967e <__mcmp+0x2a>
 8009660:	3314      	adds	r3, #20
 8009662:	3114      	adds	r1, #20
 8009664:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009668:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800966c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009670:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009674:	4295      	cmp	r5, r2
 8009676:	d003      	beq.n	8009680 <__mcmp+0x2c>
 8009678:	d205      	bcs.n	8009686 <__mcmp+0x32>
 800967a:	f04f 30ff 	mov.w	r0, #4294967295
 800967e:	bd30      	pop	{r4, r5, pc}
 8009680:	42a3      	cmp	r3, r4
 8009682:	d3f3      	bcc.n	800966c <__mcmp+0x18>
 8009684:	e7fb      	b.n	800967e <__mcmp+0x2a>
 8009686:	2001      	movs	r0, #1
 8009688:	e7f9      	b.n	800967e <__mcmp+0x2a>
	...

0800968c <__mdiff>:
 800968c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009690:	4689      	mov	r9, r1
 8009692:	4606      	mov	r6, r0
 8009694:	4611      	mov	r1, r2
 8009696:	4648      	mov	r0, r9
 8009698:	4614      	mov	r4, r2
 800969a:	f7ff ffdb 	bl	8009654 <__mcmp>
 800969e:	1e05      	subs	r5, r0, #0
 80096a0:	d112      	bne.n	80096c8 <__mdiff+0x3c>
 80096a2:	4629      	mov	r1, r5
 80096a4:	4630      	mov	r0, r6
 80096a6:	f7ff fd5b 	bl	8009160 <_Balloc>
 80096aa:	4602      	mov	r2, r0
 80096ac:	b928      	cbnz	r0, 80096ba <__mdiff+0x2e>
 80096ae:	4b3f      	ldr	r3, [pc, #252]	@ (80097ac <__mdiff+0x120>)
 80096b0:	f240 2137 	movw	r1, #567	@ 0x237
 80096b4:	483e      	ldr	r0, [pc, #248]	@ (80097b0 <__mdiff+0x124>)
 80096b6:	f000 fb11 	bl	8009cdc <__assert_func>
 80096ba:	2301      	movs	r3, #1
 80096bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80096c0:	4610      	mov	r0, r2
 80096c2:	b003      	add	sp, #12
 80096c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096c8:	bfbc      	itt	lt
 80096ca:	464b      	movlt	r3, r9
 80096cc:	46a1      	movlt	r9, r4
 80096ce:	4630      	mov	r0, r6
 80096d0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80096d4:	bfba      	itte	lt
 80096d6:	461c      	movlt	r4, r3
 80096d8:	2501      	movlt	r5, #1
 80096da:	2500      	movge	r5, #0
 80096dc:	f7ff fd40 	bl	8009160 <_Balloc>
 80096e0:	4602      	mov	r2, r0
 80096e2:	b918      	cbnz	r0, 80096ec <__mdiff+0x60>
 80096e4:	4b31      	ldr	r3, [pc, #196]	@ (80097ac <__mdiff+0x120>)
 80096e6:	f240 2145 	movw	r1, #581	@ 0x245
 80096ea:	e7e3      	b.n	80096b4 <__mdiff+0x28>
 80096ec:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80096f0:	6926      	ldr	r6, [r4, #16]
 80096f2:	60c5      	str	r5, [r0, #12]
 80096f4:	f109 0310 	add.w	r3, r9, #16
 80096f8:	f109 0514 	add.w	r5, r9, #20
 80096fc:	f104 0e14 	add.w	lr, r4, #20
 8009700:	f100 0b14 	add.w	fp, r0, #20
 8009704:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009708:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800970c:	9301      	str	r3, [sp, #4]
 800970e:	46d9      	mov	r9, fp
 8009710:	f04f 0c00 	mov.w	ip, #0
 8009714:	9b01      	ldr	r3, [sp, #4]
 8009716:	f85e 0b04 	ldr.w	r0, [lr], #4
 800971a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800971e:	9301      	str	r3, [sp, #4]
 8009720:	fa1f f38a 	uxth.w	r3, sl
 8009724:	4619      	mov	r1, r3
 8009726:	b283      	uxth	r3, r0
 8009728:	1acb      	subs	r3, r1, r3
 800972a:	0c00      	lsrs	r0, r0, #16
 800972c:	4463      	add	r3, ip
 800972e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009732:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009736:	b29b      	uxth	r3, r3
 8009738:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800973c:	4576      	cmp	r6, lr
 800973e:	f849 3b04 	str.w	r3, [r9], #4
 8009742:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009746:	d8e5      	bhi.n	8009714 <__mdiff+0x88>
 8009748:	1b33      	subs	r3, r6, r4
 800974a:	3b15      	subs	r3, #21
 800974c:	f023 0303 	bic.w	r3, r3, #3
 8009750:	3415      	adds	r4, #21
 8009752:	3304      	adds	r3, #4
 8009754:	42a6      	cmp	r6, r4
 8009756:	bf38      	it	cc
 8009758:	2304      	movcc	r3, #4
 800975a:	441d      	add	r5, r3
 800975c:	445b      	add	r3, fp
 800975e:	461e      	mov	r6, r3
 8009760:	462c      	mov	r4, r5
 8009762:	4544      	cmp	r4, r8
 8009764:	d30e      	bcc.n	8009784 <__mdiff+0xf8>
 8009766:	f108 0103 	add.w	r1, r8, #3
 800976a:	1b49      	subs	r1, r1, r5
 800976c:	f021 0103 	bic.w	r1, r1, #3
 8009770:	3d03      	subs	r5, #3
 8009772:	45a8      	cmp	r8, r5
 8009774:	bf38      	it	cc
 8009776:	2100      	movcc	r1, #0
 8009778:	440b      	add	r3, r1
 800977a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800977e:	b191      	cbz	r1, 80097a6 <__mdiff+0x11a>
 8009780:	6117      	str	r7, [r2, #16]
 8009782:	e79d      	b.n	80096c0 <__mdiff+0x34>
 8009784:	f854 1b04 	ldr.w	r1, [r4], #4
 8009788:	46e6      	mov	lr, ip
 800978a:	0c08      	lsrs	r0, r1, #16
 800978c:	fa1c fc81 	uxtah	ip, ip, r1
 8009790:	4471      	add	r1, lr
 8009792:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009796:	b289      	uxth	r1, r1
 8009798:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800979c:	f846 1b04 	str.w	r1, [r6], #4
 80097a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80097a4:	e7dd      	b.n	8009762 <__mdiff+0xd6>
 80097a6:	3f01      	subs	r7, #1
 80097a8:	e7e7      	b.n	800977a <__mdiff+0xee>
 80097aa:	bf00      	nop
 80097ac:	0800a4a0 	.word	0x0800a4a0
 80097b0:	0800a4b1 	.word	0x0800a4b1

080097b4 <__d2b>:
 80097b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80097b8:	460f      	mov	r7, r1
 80097ba:	2101      	movs	r1, #1
 80097bc:	ec59 8b10 	vmov	r8, r9, d0
 80097c0:	4616      	mov	r6, r2
 80097c2:	f7ff fccd 	bl	8009160 <_Balloc>
 80097c6:	4604      	mov	r4, r0
 80097c8:	b930      	cbnz	r0, 80097d8 <__d2b+0x24>
 80097ca:	4602      	mov	r2, r0
 80097cc:	4b23      	ldr	r3, [pc, #140]	@ (800985c <__d2b+0xa8>)
 80097ce:	4824      	ldr	r0, [pc, #144]	@ (8009860 <__d2b+0xac>)
 80097d0:	f240 310f 	movw	r1, #783	@ 0x30f
 80097d4:	f000 fa82 	bl	8009cdc <__assert_func>
 80097d8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80097dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80097e0:	b10d      	cbz	r5, 80097e6 <__d2b+0x32>
 80097e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80097e6:	9301      	str	r3, [sp, #4]
 80097e8:	f1b8 0300 	subs.w	r3, r8, #0
 80097ec:	d023      	beq.n	8009836 <__d2b+0x82>
 80097ee:	4668      	mov	r0, sp
 80097f0:	9300      	str	r3, [sp, #0]
 80097f2:	f7ff fd7c 	bl	80092ee <__lo0bits>
 80097f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80097fa:	b1d0      	cbz	r0, 8009832 <__d2b+0x7e>
 80097fc:	f1c0 0320 	rsb	r3, r0, #32
 8009800:	fa02 f303 	lsl.w	r3, r2, r3
 8009804:	430b      	orrs	r3, r1
 8009806:	40c2      	lsrs	r2, r0
 8009808:	6163      	str	r3, [r4, #20]
 800980a:	9201      	str	r2, [sp, #4]
 800980c:	9b01      	ldr	r3, [sp, #4]
 800980e:	61a3      	str	r3, [r4, #24]
 8009810:	2b00      	cmp	r3, #0
 8009812:	bf0c      	ite	eq
 8009814:	2201      	moveq	r2, #1
 8009816:	2202      	movne	r2, #2
 8009818:	6122      	str	r2, [r4, #16]
 800981a:	b1a5      	cbz	r5, 8009846 <__d2b+0x92>
 800981c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009820:	4405      	add	r5, r0
 8009822:	603d      	str	r5, [r7, #0]
 8009824:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009828:	6030      	str	r0, [r6, #0]
 800982a:	4620      	mov	r0, r4
 800982c:	b003      	add	sp, #12
 800982e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009832:	6161      	str	r1, [r4, #20]
 8009834:	e7ea      	b.n	800980c <__d2b+0x58>
 8009836:	a801      	add	r0, sp, #4
 8009838:	f7ff fd59 	bl	80092ee <__lo0bits>
 800983c:	9b01      	ldr	r3, [sp, #4]
 800983e:	6163      	str	r3, [r4, #20]
 8009840:	3020      	adds	r0, #32
 8009842:	2201      	movs	r2, #1
 8009844:	e7e8      	b.n	8009818 <__d2b+0x64>
 8009846:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800984a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800984e:	6038      	str	r0, [r7, #0]
 8009850:	6918      	ldr	r0, [r3, #16]
 8009852:	f7ff fd2d 	bl	80092b0 <__hi0bits>
 8009856:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800985a:	e7e5      	b.n	8009828 <__d2b+0x74>
 800985c:	0800a4a0 	.word	0x0800a4a0
 8009860:	0800a4b1 	.word	0x0800a4b1

08009864 <__ssputs_r>:
 8009864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009868:	688e      	ldr	r6, [r1, #8]
 800986a:	461f      	mov	r7, r3
 800986c:	42be      	cmp	r6, r7
 800986e:	680b      	ldr	r3, [r1, #0]
 8009870:	4682      	mov	sl, r0
 8009872:	460c      	mov	r4, r1
 8009874:	4690      	mov	r8, r2
 8009876:	d82d      	bhi.n	80098d4 <__ssputs_r+0x70>
 8009878:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800987c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009880:	d026      	beq.n	80098d0 <__ssputs_r+0x6c>
 8009882:	6965      	ldr	r5, [r4, #20]
 8009884:	6909      	ldr	r1, [r1, #16]
 8009886:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800988a:	eba3 0901 	sub.w	r9, r3, r1
 800988e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009892:	1c7b      	adds	r3, r7, #1
 8009894:	444b      	add	r3, r9
 8009896:	106d      	asrs	r5, r5, #1
 8009898:	429d      	cmp	r5, r3
 800989a:	bf38      	it	cc
 800989c:	461d      	movcc	r5, r3
 800989e:	0553      	lsls	r3, r2, #21
 80098a0:	d527      	bpl.n	80098f2 <__ssputs_r+0x8e>
 80098a2:	4629      	mov	r1, r5
 80098a4:	f7ff fbd0 	bl	8009048 <_malloc_r>
 80098a8:	4606      	mov	r6, r0
 80098aa:	b360      	cbz	r0, 8009906 <__ssputs_r+0xa2>
 80098ac:	6921      	ldr	r1, [r4, #16]
 80098ae:	464a      	mov	r2, r9
 80098b0:	f000 fa06 	bl	8009cc0 <memcpy>
 80098b4:	89a3      	ldrh	r3, [r4, #12]
 80098b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80098ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098be:	81a3      	strh	r3, [r4, #12]
 80098c0:	6126      	str	r6, [r4, #16]
 80098c2:	6165      	str	r5, [r4, #20]
 80098c4:	444e      	add	r6, r9
 80098c6:	eba5 0509 	sub.w	r5, r5, r9
 80098ca:	6026      	str	r6, [r4, #0]
 80098cc:	60a5      	str	r5, [r4, #8]
 80098ce:	463e      	mov	r6, r7
 80098d0:	42be      	cmp	r6, r7
 80098d2:	d900      	bls.n	80098d6 <__ssputs_r+0x72>
 80098d4:	463e      	mov	r6, r7
 80098d6:	6820      	ldr	r0, [r4, #0]
 80098d8:	4632      	mov	r2, r6
 80098da:	4641      	mov	r1, r8
 80098dc:	f000 f9c6 	bl	8009c6c <memmove>
 80098e0:	68a3      	ldr	r3, [r4, #8]
 80098e2:	1b9b      	subs	r3, r3, r6
 80098e4:	60a3      	str	r3, [r4, #8]
 80098e6:	6823      	ldr	r3, [r4, #0]
 80098e8:	4433      	add	r3, r6
 80098ea:	6023      	str	r3, [r4, #0]
 80098ec:	2000      	movs	r0, #0
 80098ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098f2:	462a      	mov	r2, r5
 80098f4:	f000 fa36 	bl	8009d64 <_realloc_r>
 80098f8:	4606      	mov	r6, r0
 80098fa:	2800      	cmp	r0, #0
 80098fc:	d1e0      	bne.n	80098c0 <__ssputs_r+0x5c>
 80098fe:	6921      	ldr	r1, [r4, #16]
 8009900:	4650      	mov	r0, sl
 8009902:	f7ff fb2d 	bl	8008f60 <_free_r>
 8009906:	230c      	movs	r3, #12
 8009908:	f8ca 3000 	str.w	r3, [sl]
 800990c:	89a3      	ldrh	r3, [r4, #12]
 800990e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009912:	81a3      	strh	r3, [r4, #12]
 8009914:	f04f 30ff 	mov.w	r0, #4294967295
 8009918:	e7e9      	b.n	80098ee <__ssputs_r+0x8a>
	...

0800991c <_svfiprintf_r>:
 800991c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009920:	4698      	mov	r8, r3
 8009922:	898b      	ldrh	r3, [r1, #12]
 8009924:	061b      	lsls	r3, r3, #24
 8009926:	b09d      	sub	sp, #116	@ 0x74
 8009928:	4607      	mov	r7, r0
 800992a:	460d      	mov	r5, r1
 800992c:	4614      	mov	r4, r2
 800992e:	d510      	bpl.n	8009952 <_svfiprintf_r+0x36>
 8009930:	690b      	ldr	r3, [r1, #16]
 8009932:	b973      	cbnz	r3, 8009952 <_svfiprintf_r+0x36>
 8009934:	2140      	movs	r1, #64	@ 0x40
 8009936:	f7ff fb87 	bl	8009048 <_malloc_r>
 800993a:	6028      	str	r0, [r5, #0]
 800993c:	6128      	str	r0, [r5, #16]
 800993e:	b930      	cbnz	r0, 800994e <_svfiprintf_r+0x32>
 8009940:	230c      	movs	r3, #12
 8009942:	603b      	str	r3, [r7, #0]
 8009944:	f04f 30ff 	mov.w	r0, #4294967295
 8009948:	b01d      	add	sp, #116	@ 0x74
 800994a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800994e:	2340      	movs	r3, #64	@ 0x40
 8009950:	616b      	str	r3, [r5, #20]
 8009952:	2300      	movs	r3, #0
 8009954:	9309      	str	r3, [sp, #36]	@ 0x24
 8009956:	2320      	movs	r3, #32
 8009958:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800995c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009960:	2330      	movs	r3, #48	@ 0x30
 8009962:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009b00 <_svfiprintf_r+0x1e4>
 8009966:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800996a:	f04f 0901 	mov.w	r9, #1
 800996e:	4623      	mov	r3, r4
 8009970:	469a      	mov	sl, r3
 8009972:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009976:	b10a      	cbz	r2, 800997c <_svfiprintf_r+0x60>
 8009978:	2a25      	cmp	r2, #37	@ 0x25
 800997a:	d1f9      	bne.n	8009970 <_svfiprintf_r+0x54>
 800997c:	ebba 0b04 	subs.w	fp, sl, r4
 8009980:	d00b      	beq.n	800999a <_svfiprintf_r+0x7e>
 8009982:	465b      	mov	r3, fp
 8009984:	4622      	mov	r2, r4
 8009986:	4629      	mov	r1, r5
 8009988:	4638      	mov	r0, r7
 800998a:	f7ff ff6b 	bl	8009864 <__ssputs_r>
 800998e:	3001      	adds	r0, #1
 8009990:	f000 80a7 	beq.w	8009ae2 <_svfiprintf_r+0x1c6>
 8009994:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009996:	445a      	add	r2, fp
 8009998:	9209      	str	r2, [sp, #36]	@ 0x24
 800999a:	f89a 3000 	ldrb.w	r3, [sl]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	f000 809f 	beq.w	8009ae2 <_svfiprintf_r+0x1c6>
 80099a4:	2300      	movs	r3, #0
 80099a6:	f04f 32ff 	mov.w	r2, #4294967295
 80099aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099ae:	f10a 0a01 	add.w	sl, sl, #1
 80099b2:	9304      	str	r3, [sp, #16]
 80099b4:	9307      	str	r3, [sp, #28]
 80099b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80099ba:	931a      	str	r3, [sp, #104]	@ 0x68
 80099bc:	4654      	mov	r4, sl
 80099be:	2205      	movs	r2, #5
 80099c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099c4:	484e      	ldr	r0, [pc, #312]	@ (8009b00 <_svfiprintf_r+0x1e4>)
 80099c6:	f7f6 fc0b 	bl	80001e0 <memchr>
 80099ca:	9a04      	ldr	r2, [sp, #16]
 80099cc:	b9d8      	cbnz	r0, 8009a06 <_svfiprintf_r+0xea>
 80099ce:	06d0      	lsls	r0, r2, #27
 80099d0:	bf44      	itt	mi
 80099d2:	2320      	movmi	r3, #32
 80099d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80099d8:	0711      	lsls	r1, r2, #28
 80099da:	bf44      	itt	mi
 80099dc:	232b      	movmi	r3, #43	@ 0x2b
 80099de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80099e2:	f89a 3000 	ldrb.w	r3, [sl]
 80099e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80099e8:	d015      	beq.n	8009a16 <_svfiprintf_r+0xfa>
 80099ea:	9a07      	ldr	r2, [sp, #28]
 80099ec:	4654      	mov	r4, sl
 80099ee:	2000      	movs	r0, #0
 80099f0:	f04f 0c0a 	mov.w	ip, #10
 80099f4:	4621      	mov	r1, r4
 80099f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099fa:	3b30      	subs	r3, #48	@ 0x30
 80099fc:	2b09      	cmp	r3, #9
 80099fe:	d94b      	bls.n	8009a98 <_svfiprintf_r+0x17c>
 8009a00:	b1b0      	cbz	r0, 8009a30 <_svfiprintf_r+0x114>
 8009a02:	9207      	str	r2, [sp, #28]
 8009a04:	e014      	b.n	8009a30 <_svfiprintf_r+0x114>
 8009a06:	eba0 0308 	sub.w	r3, r0, r8
 8009a0a:	fa09 f303 	lsl.w	r3, r9, r3
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	9304      	str	r3, [sp, #16]
 8009a12:	46a2      	mov	sl, r4
 8009a14:	e7d2      	b.n	80099bc <_svfiprintf_r+0xa0>
 8009a16:	9b03      	ldr	r3, [sp, #12]
 8009a18:	1d19      	adds	r1, r3, #4
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	9103      	str	r1, [sp, #12]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	bfbb      	ittet	lt
 8009a22:	425b      	neglt	r3, r3
 8009a24:	f042 0202 	orrlt.w	r2, r2, #2
 8009a28:	9307      	strge	r3, [sp, #28]
 8009a2a:	9307      	strlt	r3, [sp, #28]
 8009a2c:	bfb8      	it	lt
 8009a2e:	9204      	strlt	r2, [sp, #16]
 8009a30:	7823      	ldrb	r3, [r4, #0]
 8009a32:	2b2e      	cmp	r3, #46	@ 0x2e
 8009a34:	d10a      	bne.n	8009a4c <_svfiprintf_r+0x130>
 8009a36:	7863      	ldrb	r3, [r4, #1]
 8009a38:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a3a:	d132      	bne.n	8009aa2 <_svfiprintf_r+0x186>
 8009a3c:	9b03      	ldr	r3, [sp, #12]
 8009a3e:	1d1a      	adds	r2, r3, #4
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	9203      	str	r2, [sp, #12]
 8009a44:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009a48:	3402      	adds	r4, #2
 8009a4a:	9305      	str	r3, [sp, #20]
 8009a4c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009b10 <_svfiprintf_r+0x1f4>
 8009a50:	7821      	ldrb	r1, [r4, #0]
 8009a52:	2203      	movs	r2, #3
 8009a54:	4650      	mov	r0, sl
 8009a56:	f7f6 fbc3 	bl	80001e0 <memchr>
 8009a5a:	b138      	cbz	r0, 8009a6c <_svfiprintf_r+0x150>
 8009a5c:	9b04      	ldr	r3, [sp, #16]
 8009a5e:	eba0 000a 	sub.w	r0, r0, sl
 8009a62:	2240      	movs	r2, #64	@ 0x40
 8009a64:	4082      	lsls	r2, r0
 8009a66:	4313      	orrs	r3, r2
 8009a68:	3401      	adds	r4, #1
 8009a6a:	9304      	str	r3, [sp, #16]
 8009a6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a70:	4824      	ldr	r0, [pc, #144]	@ (8009b04 <_svfiprintf_r+0x1e8>)
 8009a72:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009a76:	2206      	movs	r2, #6
 8009a78:	f7f6 fbb2 	bl	80001e0 <memchr>
 8009a7c:	2800      	cmp	r0, #0
 8009a7e:	d036      	beq.n	8009aee <_svfiprintf_r+0x1d2>
 8009a80:	4b21      	ldr	r3, [pc, #132]	@ (8009b08 <_svfiprintf_r+0x1ec>)
 8009a82:	bb1b      	cbnz	r3, 8009acc <_svfiprintf_r+0x1b0>
 8009a84:	9b03      	ldr	r3, [sp, #12]
 8009a86:	3307      	adds	r3, #7
 8009a88:	f023 0307 	bic.w	r3, r3, #7
 8009a8c:	3308      	adds	r3, #8
 8009a8e:	9303      	str	r3, [sp, #12]
 8009a90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a92:	4433      	add	r3, r6
 8009a94:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a96:	e76a      	b.n	800996e <_svfiprintf_r+0x52>
 8009a98:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a9c:	460c      	mov	r4, r1
 8009a9e:	2001      	movs	r0, #1
 8009aa0:	e7a8      	b.n	80099f4 <_svfiprintf_r+0xd8>
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	3401      	adds	r4, #1
 8009aa6:	9305      	str	r3, [sp, #20]
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	f04f 0c0a 	mov.w	ip, #10
 8009aae:	4620      	mov	r0, r4
 8009ab0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ab4:	3a30      	subs	r2, #48	@ 0x30
 8009ab6:	2a09      	cmp	r2, #9
 8009ab8:	d903      	bls.n	8009ac2 <_svfiprintf_r+0x1a6>
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d0c6      	beq.n	8009a4c <_svfiprintf_r+0x130>
 8009abe:	9105      	str	r1, [sp, #20]
 8009ac0:	e7c4      	b.n	8009a4c <_svfiprintf_r+0x130>
 8009ac2:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ac6:	4604      	mov	r4, r0
 8009ac8:	2301      	movs	r3, #1
 8009aca:	e7f0      	b.n	8009aae <_svfiprintf_r+0x192>
 8009acc:	ab03      	add	r3, sp, #12
 8009ace:	9300      	str	r3, [sp, #0]
 8009ad0:	462a      	mov	r2, r5
 8009ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8009b0c <_svfiprintf_r+0x1f0>)
 8009ad4:	a904      	add	r1, sp, #16
 8009ad6:	4638      	mov	r0, r7
 8009ad8:	f7fd fe82 	bl	80077e0 <_printf_float>
 8009adc:	1c42      	adds	r2, r0, #1
 8009ade:	4606      	mov	r6, r0
 8009ae0:	d1d6      	bne.n	8009a90 <_svfiprintf_r+0x174>
 8009ae2:	89ab      	ldrh	r3, [r5, #12]
 8009ae4:	065b      	lsls	r3, r3, #25
 8009ae6:	f53f af2d 	bmi.w	8009944 <_svfiprintf_r+0x28>
 8009aea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009aec:	e72c      	b.n	8009948 <_svfiprintf_r+0x2c>
 8009aee:	ab03      	add	r3, sp, #12
 8009af0:	9300      	str	r3, [sp, #0]
 8009af2:	462a      	mov	r2, r5
 8009af4:	4b05      	ldr	r3, [pc, #20]	@ (8009b0c <_svfiprintf_r+0x1f0>)
 8009af6:	a904      	add	r1, sp, #16
 8009af8:	4638      	mov	r0, r7
 8009afa:	f7fe f909 	bl	8007d10 <_printf_i>
 8009afe:	e7ed      	b.n	8009adc <_svfiprintf_r+0x1c0>
 8009b00:	0800a608 	.word	0x0800a608
 8009b04:	0800a612 	.word	0x0800a612
 8009b08:	080077e1 	.word	0x080077e1
 8009b0c:	08009865 	.word	0x08009865
 8009b10:	0800a60e 	.word	0x0800a60e

08009b14 <__sflush_r>:
 8009b14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b1c:	0716      	lsls	r6, r2, #28
 8009b1e:	4605      	mov	r5, r0
 8009b20:	460c      	mov	r4, r1
 8009b22:	d454      	bmi.n	8009bce <__sflush_r+0xba>
 8009b24:	684b      	ldr	r3, [r1, #4]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	dc02      	bgt.n	8009b30 <__sflush_r+0x1c>
 8009b2a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	dd48      	ble.n	8009bc2 <__sflush_r+0xae>
 8009b30:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009b32:	2e00      	cmp	r6, #0
 8009b34:	d045      	beq.n	8009bc2 <__sflush_r+0xae>
 8009b36:	2300      	movs	r3, #0
 8009b38:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009b3c:	682f      	ldr	r7, [r5, #0]
 8009b3e:	6a21      	ldr	r1, [r4, #32]
 8009b40:	602b      	str	r3, [r5, #0]
 8009b42:	d030      	beq.n	8009ba6 <__sflush_r+0x92>
 8009b44:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009b46:	89a3      	ldrh	r3, [r4, #12]
 8009b48:	0759      	lsls	r1, r3, #29
 8009b4a:	d505      	bpl.n	8009b58 <__sflush_r+0x44>
 8009b4c:	6863      	ldr	r3, [r4, #4]
 8009b4e:	1ad2      	subs	r2, r2, r3
 8009b50:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009b52:	b10b      	cbz	r3, 8009b58 <__sflush_r+0x44>
 8009b54:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009b56:	1ad2      	subs	r2, r2, r3
 8009b58:	2300      	movs	r3, #0
 8009b5a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009b5c:	6a21      	ldr	r1, [r4, #32]
 8009b5e:	4628      	mov	r0, r5
 8009b60:	47b0      	blx	r6
 8009b62:	1c43      	adds	r3, r0, #1
 8009b64:	89a3      	ldrh	r3, [r4, #12]
 8009b66:	d106      	bne.n	8009b76 <__sflush_r+0x62>
 8009b68:	6829      	ldr	r1, [r5, #0]
 8009b6a:	291d      	cmp	r1, #29
 8009b6c:	d82b      	bhi.n	8009bc6 <__sflush_r+0xb2>
 8009b6e:	4a2a      	ldr	r2, [pc, #168]	@ (8009c18 <__sflush_r+0x104>)
 8009b70:	410a      	asrs	r2, r1
 8009b72:	07d6      	lsls	r6, r2, #31
 8009b74:	d427      	bmi.n	8009bc6 <__sflush_r+0xb2>
 8009b76:	2200      	movs	r2, #0
 8009b78:	6062      	str	r2, [r4, #4]
 8009b7a:	04d9      	lsls	r1, r3, #19
 8009b7c:	6922      	ldr	r2, [r4, #16]
 8009b7e:	6022      	str	r2, [r4, #0]
 8009b80:	d504      	bpl.n	8009b8c <__sflush_r+0x78>
 8009b82:	1c42      	adds	r2, r0, #1
 8009b84:	d101      	bne.n	8009b8a <__sflush_r+0x76>
 8009b86:	682b      	ldr	r3, [r5, #0]
 8009b88:	b903      	cbnz	r3, 8009b8c <__sflush_r+0x78>
 8009b8a:	6560      	str	r0, [r4, #84]	@ 0x54
 8009b8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009b8e:	602f      	str	r7, [r5, #0]
 8009b90:	b1b9      	cbz	r1, 8009bc2 <__sflush_r+0xae>
 8009b92:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009b96:	4299      	cmp	r1, r3
 8009b98:	d002      	beq.n	8009ba0 <__sflush_r+0x8c>
 8009b9a:	4628      	mov	r0, r5
 8009b9c:	f7ff f9e0 	bl	8008f60 <_free_r>
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	6363      	str	r3, [r4, #52]	@ 0x34
 8009ba4:	e00d      	b.n	8009bc2 <__sflush_r+0xae>
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	4628      	mov	r0, r5
 8009baa:	47b0      	blx	r6
 8009bac:	4602      	mov	r2, r0
 8009bae:	1c50      	adds	r0, r2, #1
 8009bb0:	d1c9      	bne.n	8009b46 <__sflush_r+0x32>
 8009bb2:	682b      	ldr	r3, [r5, #0]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d0c6      	beq.n	8009b46 <__sflush_r+0x32>
 8009bb8:	2b1d      	cmp	r3, #29
 8009bba:	d001      	beq.n	8009bc0 <__sflush_r+0xac>
 8009bbc:	2b16      	cmp	r3, #22
 8009bbe:	d11e      	bne.n	8009bfe <__sflush_r+0xea>
 8009bc0:	602f      	str	r7, [r5, #0]
 8009bc2:	2000      	movs	r0, #0
 8009bc4:	e022      	b.n	8009c0c <__sflush_r+0xf8>
 8009bc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009bca:	b21b      	sxth	r3, r3
 8009bcc:	e01b      	b.n	8009c06 <__sflush_r+0xf2>
 8009bce:	690f      	ldr	r7, [r1, #16]
 8009bd0:	2f00      	cmp	r7, #0
 8009bd2:	d0f6      	beq.n	8009bc2 <__sflush_r+0xae>
 8009bd4:	0793      	lsls	r3, r2, #30
 8009bd6:	680e      	ldr	r6, [r1, #0]
 8009bd8:	bf08      	it	eq
 8009bda:	694b      	ldreq	r3, [r1, #20]
 8009bdc:	600f      	str	r7, [r1, #0]
 8009bde:	bf18      	it	ne
 8009be0:	2300      	movne	r3, #0
 8009be2:	eba6 0807 	sub.w	r8, r6, r7
 8009be6:	608b      	str	r3, [r1, #8]
 8009be8:	f1b8 0f00 	cmp.w	r8, #0
 8009bec:	dde9      	ble.n	8009bc2 <__sflush_r+0xae>
 8009bee:	6a21      	ldr	r1, [r4, #32]
 8009bf0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009bf2:	4643      	mov	r3, r8
 8009bf4:	463a      	mov	r2, r7
 8009bf6:	4628      	mov	r0, r5
 8009bf8:	47b0      	blx	r6
 8009bfa:	2800      	cmp	r0, #0
 8009bfc:	dc08      	bgt.n	8009c10 <__sflush_r+0xfc>
 8009bfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c06:	81a3      	strh	r3, [r4, #12]
 8009c08:	f04f 30ff 	mov.w	r0, #4294967295
 8009c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c10:	4407      	add	r7, r0
 8009c12:	eba8 0800 	sub.w	r8, r8, r0
 8009c16:	e7e7      	b.n	8009be8 <__sflush_r+0xd4>
 8009c18:	dfbffffe 	.word	0xdfbffffe

08009c1c <_fflush_r>:
 8009c1c:	b538      	push	{r3, r4, r5, lr}
 8009c1e:	690b      	ldr	r3, [r1, #16]
 8009c20:	4605      	mov	r5, r0
 8009c22:	460c      	mov	r4, r1
 8009c24:	b913      	cbnz	r3, 8009c2c <_fflush_r+0x10>
 8009c26:	2500      	movs	r5, #0
 8009c28:	4628      	mov	r0, r5
 8009c2a:	bd38      	pop	{r3, r4, r5, pc}
 8009c2c:	b118      	cbz	r0, 8009c36 <_fflush_r+0x1a>
 8009c2e:	6a03      	ldr	r3, [r0, #32]
 8009c30:	b90b      	cbnz	r3, 8009c36 <_fflush_r+0x1a>
 8009c32:	f7fe fa19 	bl	8008068 <__sinit>
 8009c36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d0f3      	beq.n	8009c26 <_fflush_r+0xa>
 8009c3e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009c40:	07d0      	lsls	r0, r2, #31
 8009c42:	d404      	bmi.n	8009c4e <_fflush_r+0x32>
 8009c44:	0599      	lsls	r1, r3, #22
 8009c46:	d402      	bmi.n	8009c4e <_fflush_r+0x32>
 8009c48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009c4a:	f7fe fb38 	bl	80082be <__retarget_lock_acquire_recursive>
 8009c4e:	4628      	mov	r0, r5
 8009c50:	4621      	mov	r1, r4
 8009c52:	f7ff ff5f 	bl	8009b14 <__sflush_r>
 8009c56:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009c58:	07da      	lsls	r2, r3, #31
 8009c5a:	4605      	mov	r5, r0
 8009c5c:	d4e4      	bmi.n	8009c28 <_fflush_r+0xc>
 8009c5e:	89a3      	ldrh	r3, [r4, #12]
 8009c60:	059b      	lsls	r3, r3, #22
 8009c62:	d4e1      	bmi.n	8009c28 <_fflush_r+0xc>
 8009c64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009c66:	f7fe fb2b 	bl	80082c0 <__retarget_lock_release_recursive>
 8009c6a:	e7dd      	b.n	8009c28 <_fflush_r+0xc>

08009c6c <memmove>:
 8009c6c:	4288      	cmp	r0, r1
 8009c6e:	b510      	push	{r4, lr}
 8009c70:	eb01 0402 	add.w	r4, r1, r2
 8009c74:	d902      	bls.n	8009c7c <memmove+0x10>
 8009c76:	4284      	cmp	r4, r0
 8009c78:	4623      	mov	r3, r4
 8009c7a:	d807      	bhi.n	8009c8c <memmove+0x20>
 8009c7c:	1e43      	subs	r3, r0, #1
 8009c7e:	42a1      	cmp	r1, r4
 8009c80:	d008      	beq.n	8009c94 <memmove+0x28>
 8009c82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c8a:	e7f8      	b.n	8009c7e <memmove+0x12>
 8009c8c:	4402      	add	r2, r0
 8009c8e:	4601      	mov	r1, r0
 8009c90:	428a      	cmp	r2, r1
 8009c92:	d100      	bne.n	8009c96 <memmove+0x2a>
 8009c94:	bd10      	pop	{r4, pc}
 8009c96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c9e:	e7f7      	b.n	8009c90 <memmove+0x24>

08009ca0 <_sbrk_r>:
 8009ca0:	b538      	push	{r3, r4, r5, lr}
 8009ca2:	4d06      	ldr	r5, [pc, #24]	@ (8009cbc <_sbrk_r+0x1c>)
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	4604      	mov	r4, r0
 8009ca8:	4608      	mov	r0, r1
 8009caa:	602b      	str	r3, [r5, #0]
 8009cac:	f7f8 f8b4 	bl	8001e18 <_sbrk>
 8009cb0:	1c43      	adds	r3, r0, #1
 8009cb2:	d102      	bne.n	8009cba <_sbrk_r+0x1a>
 8009cb4:	682b      	ldr	r3, [r5, #0]
 8009cb6:	b103      	cbz	r3, 8009cba <_sbrk_r+0x1a>
 8009cb8:	6023      	str	r3, [r4, #0]
 8009cba:	bd38      	pop	{r3, r4, r5, pc}
 8009cbc:	20000520 	.word	0x20000520

08009cc0 <memcpy>:
 8009cc0:	440a      	add	r2, r1
 8009cc2:	4291      	cmp	r1, r2
 8009cc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8009cc8:	d100      	bne.n	8009ccc <memcpy+0xc>
 8009cca:	4770      	bx	lr
 8009ccc:	b510      	push	{r4, lr}
 8009cce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009cd6:	4291      	cmp	r1, r2
 8009cd8:	d1f9      	bne.n	8009cce <memcpy+0xe>
 8009cda:	bd10      	pop	{r4, pc}

08009cdc <__assert_func>:
 8009cdc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009cde:	4614      	mov	r4, r2
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	4b09      	ldr	r3, [pc, #36]	@ (8009d08 <__assert_func+0x2c>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	4605      	mov	r5, r0
 8009ce8:	68d8      	ldr	r0, [r3, #12]
 8009cea:	b954      	cbnz	r4, 8009d02 <__assert_func+0x26>
 8009cec:	4b07      	ldr	r3, [pc, #28]	@ (8009d0c <__assert_func+0x30>)
 8009cee:	461c      	mov	r4, r3
 8009cf0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009cf4:	9100      	str	r1, [sp, #0]
 8009cf6:	462b      	mov	r3, r5
 8009cf8:	4905      	ldr	r1, [pc, #20]	@ (8009d10 <__assert_func+0x34>)
 8009cfa:	f000 f86f 	bl	8009ddc <fiprintf>
 8009cfe:	f000 f87f 	bl	8009e00 <abort>
 8009d02:	4b04      	ldr	r3, [pc, #16]	@ (8009d14 <__assert_func+0x38>)
 8009d04:	e7f4      	b.n	8009cf0 <__assert_func+0x14>
 8009d06:	bf00      	nop
 8009d08:	20000044 	.word	0x20000044
 8009d0c:	0800a65e 	.word	0x0800a65e
 8009d10:	0800a630 	.word	0x0800a630
 8009d14:	0800a623 	.word	0x0800a623

08009d18 <_calloc_r>:
 8009d18:	b570      	push	{r4, r5, r6, lr}
 8009d1a:	fba1 5402 	umull	r5, r4, r1, r2
 8009d1e:	b93c      	cbnz	r4, 8009d30 <_calloc_r+0x18>
 8009d20:	4629      	mov	r1, r5
 8009d22:	f7ff f991 	bl	8009048 <_malloc_r>
 8009d26:	4606      	mov	r6, r0
 8009d28:	b928      	cbnz	r0, 8009d36 <_calloc_r+0x1e>
 8009d2a:	2600      	movs	r6, #0
 8009d2c:	4630      	mov	r0, r6
 8009d2e:	bd70      	pop	{r4, r5, r6, pc}
 8009d30:	220c      	movs	r2, #12
 8009d32:	6002      	str	r2, [r0, #0]
 8009d34:	e7f9      	b.n	8009d2a <_calloc_r+0x12>
 8009d36:	462a      	mov	r2, r5
 8009d38:	4621      	mov	r1, r4
 8009d3a:	f7fe fa42 	bl	80081c2 <memset>
 8009d3e:	e7f5      	b.n	8009d2c <_calloc_r+0x14>

08009d40 <__ascii_mbtowc>:
 8009d40:	b082      	sub	sp, #8
 8009d42:	b901      	cbnz	r1, 8009d46 <__ascii_mbtowc+0x6>
 8009d44:	a901      	add	r1, sp, #4
 8009d46:	b142      	cbz	r2, 8009d5a <__ascii_mbtowc+0x1a>
 8009d48:	b14b      	cbz	r3, 8009d5e <__ascii_mbtowc+0x1e>
 8009d4a:	7813      	ldrb	r3, [r2, #0]
 8009d4c:	600b      	str	r3, [r1, #0]
 8009d4e:	7812      	ldrb	r2, [r2, #0]
 8009d50:	1e10      	subs	r0, r2, #0
 8009d52:	bf18      	it	ne
 8009d54:	2001      	movne	r0, #1
 8009d56:	b002      	add	sp, #8
 8009d58:	4770      	bx	lr
 8009d5a:	4610      	mov	r0, r2
 8009d5c:	e7fb      	b.n	8009d56 <__ascii_mbtowc+0x16>
 8009d5e:	f06f 0001 	mvn.w	r0, #1
 8009d62:	e7f8      	b.n	8009d56 <__ascii_mbtowc+0x16>

08009d64 <_realloc_r>:
 8009d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d68:	4680      	mov	r8, r0
 8009d6a:	4615      	mov	r5, r2
 8009d6c:	460c      	mov	r4, r1
 8009d6e:	b921      	cbnz	r1, 8009d7a <_realloc_r+0x16>
 8009d70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d74:	4611      	mov	r1, r2
 8009d76:	f7ff b967 	b.w	8009048 <_malloc_r>
 8009d7a:	b92a      	cbnz	r2, 8009d88 <_realloc_r+0x24>
 8009d7c:	f7ff f8f0 	bl	8008f60 <_free_r>
 8009d80:	2400      	movs	r4, #0
 8009d82:	4620      	mov	r0, r4
 8009d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d88:	f000 f841 	bl	8009e0e <_malloc_usable_size_r>
 8009d8c:	4285      	cmp	r5, r0
 8009d8e:	4606      	mov	r6, r0
 8009d90:	d802      	bhi.n	8009d98 <_realloc_r+0x34>
 8009d92:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009d96:	d8f4      	bhi.n	8009d82 <_realloc_r+0x1e>
 8009d98:	4629      	mov	r1, r5
 8009d9a:	4640      	mov	r0, r8
 8009d9c:	f7ff f954 	bl	8009048 <_malloc_r>
 8009da0:	4607      	mov	r7, r0
 8009da2:	2800      	cmp	r0, #0
 8009da4:	d0ec      	beq.n	8009d80 <_realloc_r+0x1c>
 8009da6:	42b5      	cmp	r5, r6
 8009da8:	462a      	mov	r2, r5
 8009daa:	4621      	mov	r1, r4
 8009dac:	bf28      	it	cs
 8009dae:	4632      	movcs	r2, r6
 8009db0:	f7ff ff86 	bl	8009cc0 <memcpy>
 8009db4:	4621      	mov	r1, r4
 8009db6:	4640      	mov	r0, r8
 8009db8:	f7ff f8d2 	bl	8008f60 <_free_r>
 8009dbc:	463c      	mov	r4, r7
 8009dbe:	e7e0      	b.n	8009d82 <_realloc_r+0x1e>

08009dc0 <__ascii_wctomb>:
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	4608      	mov	r0, r1
 8009dc4:	b141      	cbz	r1, 8009dd8 <__ascii_wctomb+0x18>
 8009dc6:	2aff      	cmp	r2, #255	@ 0xff
 8009dc8:	d904      	bls.n	8009dd4 <__ascii_wctomb+0x14>
 8009dca:	228a      	movs	r2, #138	@ 0x8a
 8009dcc:	601a      	str	r2, [r3, #0]
 8009dce:	f04f 30ff 	mov.w	r0, #4294967295
 8009dd2:	4770      	bx	lr
 8009dd4:	700a      	strb	r2, [r1, #0]
 8009dd6:	2001      	movs	r0, #1
 8009dd8:	4770      	bx	lr
	...

08009ddc <fiprintf>:
 8009ddc:	b40e      	push	{r1, r2, r3}
 8009dde:	b503      	push	{r0, r1, lr}
 8009de0:	4601      	mov	r1, r0
 8009de2:	ab03      	add	r3, sp, #12
 8009de4:	4805      	ldr	r0, [pc, #20]	@ (8009dfc <fiprintf+0x20>)
 8009de6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dea:	6800      	ldr	r0, [r0, #0]
 8009dec:	9301      	str	r3, [sp, #4]
 8009dee:	f000 f83f 	bl	8009e70 <_vfiprintf_r>
 8009df2:	b002      	add	sp, #8
 8009df4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009df8:	b003      	add	sp, #12
 8009dfa:	4770      	bx	lr
 8009dfc:	20000044 	.word	0x20000044

08009e00 <abort>:
 8009e00:	b508      	push	{r3, lr}
 8009e02:	2006      	movs	r0, #6
 8009e04:	f000 fa08 	bl	800a218 <raise>
 8009e08:	2001      	movs	r0, #1
 8009e0a:	f7f7 ff8d 	bl	8001d28 <_exit>

08009e0e <_malloc_usable_size_r>:
 8009e0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e12:	1f18      	subs	r0, r3, #4
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	bfbc      	itt	lt
 8009e18:	580b      	ldrlt	r3, [r1, r0]
 8009e1a:	18c0      	addlt	r0, r0, r3
 8009e1c:	4770      	bx	lr

08009e1e <__sfputc_r>:
 8009e1e:	6893      	ldr	r3, [r2, #8]
 8009e20:	3b01      	subs	r3, #1
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	b410      	push	{r4}
 8009e26:	6093      	str	r3, [r2, #8]
 8009e28:	da08      	bge.n	8009e3c <__sfputc_r+0x1e>
 8009e2a:	6994      	ldr	r4, [r2, #24]
 8009e2c:	42a3      	cmp	r3, r4
 8009e2e:	db01      	blt.n	8009e34 <__sfputc_r+0x16>
 8009e30:	290a      	cmp	r1, #10
 8009e32:	d103      	bne.n	8009e3c <__sfputc_r+0x1e>
 8009e34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e38:	f000 b932 	b.w	800a0a0 <__swbuf_r>
 8009e3c:	6813      	ldr	r3, [r2, #0]
 8009e3e:	1c58      	adds	r0, r3, #1
 8009e40:	6010      	str	r0, [r2, #0]
 8009e42:	7019      	strb	r1, [r3, #0]
 8009e44:	4608      	mov	r0, r1
 8009e46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e4a:	4770      	bx	lr

08009e4c <__sfputs_r>:
 8009e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e4e:	4606      	mov	r6, r0
 8009e50:	460f      	mov	r7, r1
 8009e52:	4614      	mov	r4, r2
 8009e54:	18d5      	adds	r5, r2, r3
 8009e56:	42ac      	cmp	r4, r5
 8009e58:	d101      	bne.n	8009e5e <__sfputs_r+0x12>
 8009e5a:	2000      	movs	r0, #0
 8009e5c:	e007      	b.n	8009e6e <__sfputs_r+0x22>
 8009e5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e62:	463a      	mov	r2, r7
 8009e64:	4630      	mov	r0, r6
 8009e66:	f7ff ffda 	bl	8009e1e <__sfputc_r>
 8009e6a:	1c43      	adds	r3, r0, #1
 8009e6c:	d1f3      	bne.n	8009e56 <__sfputs_r+0xa>
 8009e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009e70 <_vfiprintf_r>:
 8009e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e74:	460d      	mov	r5, r1
 8009e76:	b09d      	sub	sp, #116	@ 0x74
 8009e78:	4614      	mov	r4, r2
 8009e7a:	4698      	mov	r8, r3
 8009e7c:	4606      	mov	r6, r0
 8009e7e:	b118      	cbz	r0, 8009e88 <_vfiprintf_r+0x18>
 8009e80:	6a03      	ldr	r3, [r0, #32]
 8009e82:	b90b      	cbnz	r3, 8009e88 <_vfiprintf_r+0x18>
 8009e84:	f7fe f8f0 	bl	8008068 <__sinit>
 8009e88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009e8a:	07d9      	lsls	r1, r3, #31
 8009e8c:	d405      	bmi.n	8009e9a <_vfiprintf_r+0x2a>
 8009e8e:	89ab      	ldrh	r3, [r5, #12]
 8009e90:	059a      	lsls	r2, r3, #22
 8009e92:	d402      	bmi.n	8009e9a <_vfiprintf_r+0x2a>
 8009e94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e96:	f7fe fa12 	bl	80082be <__retarget_lock_acquire_recursive>
 8009e9a:	89ab      	ldrh	r3, [r5, #12]
 8009e9c:	071b      	lsls	r3, r3, #28
 8009e9e:	d501      	bpl.n	8009ea4 <_vfiprintf_r+0x34>
 8009ea0:	692b      	ldr	r3, [r5, #16]
 8009ea2:	b99b      	cbnz	r3, 8009ecc <_vfiprintf_r+0x5c>
 8009ea4:	4629      	mov	r1, r5
 8009ea6:	4630      	mov	r0, r6
 8009ea8:	f000 f938 	bl	800a11c <__swsetup_r>
 8009eac:	b170      	cbz	r0, 8009ecc <_vfiprintf_r+0x5c>
 8009eae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009eb0:	07dc      	lsls	r4, r3, #31
 8009eb2:	d504      	bpl.n	8009ebe <_vfiprintf_r+0x4e>
 8009eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8009eb8:	b01d      	add	sp, #116	@ 0x74
 8009eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ebe:	89ab      	ldrh	r3, [r5, #12]
 8009ec0:	0598      	lsls	r0, r3, #22
 8009ec2:	d4f7      	bmi.n	8009eb4 <_vfiprintf_r+0x44>
 8009ec4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009ec6:	f7fe f9fb 	bl	80082c0 <__retarget_lock_release_recursive>
 8009eca:	e7f3      	b.n	8009eb4 <_vfiprintf_r+0x44>
 8009ecc:	2300      	movs	r3, #0
 8009ece:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ed0:	2320      	movs	r3, #32
 8009ed2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009ed6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009eda:	2330      	movs	r3, #48	@ 0x30
 8009edc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a08c <_vfiprintf_r+0x21c>
 8009ee0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009ee4:	f04f 0901 	mov.w	r9, #1
 8009ee8:	4623      	mov	r3, r4
 8009eea:	469a      	mov	sl, r3
 8009eec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ef0:	b10a      	cbz	r2, 8009ef6 <_vfiprintf_r+0x86>
 8009ef2:	2a25      	cmp	r2, #37	@ 0x25
 8009ef4:	d1f9      	bne.n	8009eea <_vfiprintf_r+0x7a>
 8009ef6:	ebba 0b04 	subs.w	fp, sl, r4
 8009efa:	d00b      	beq.n	8009f14 <_vfiprintf_r+0xa4>
 8009efc:	465b      	mov	r3, fp
 8009efe:	4622      	mov	r2, r4
 8009f00:	4629      	mov	r1, r5
 8009f02:	4630      	mov	r0, r6
 8009f04:	f7ff ffa2 	bl	8009e4c <__sfputs_r>
 8009f08:	3001      	adds	r0, #1
 8009f0a:	f000 80a7 	beq.w	800a05c <_vfiprintf_r+0x1ec>
 8009f0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f10:	445a      	add	r2, fp
 8009f12:	9209      	str	r2, [sp, #36]	@ 0x24
 8009f14:	f89a 3000 	ldrb.w	r3, [sl]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	f000 809f 	beq.w	800a05c <_vfiprintf_r+0x1ec>
 8009f1e:	2300      	movs	r3, #0
 8009f20:	f04f 32ff 	mov.w	r2, #4294967295
 8009f24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f28:	f10a 0a01 	add.w	sl, sl, #1
 8009f2c:	9304      	str	r3, [sp, #16]
 8009f2e:	9307      	str	r3, [sp, #28]
 8009f30:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009f34:	931a      	str	r3, [sp, #104]	@ 0x68
 8009f36:	4654      	mov	r4, sl
 8009f38:	2205      	movs	r2, #5
 8009f3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f3e:	4853      	ldr	r0, [pc, #332]	@ (800a08c <_vfiprintf_r+0x21c>)
 8009f40:	f7f6 f94e 	bl	80001e0 <memchr>
 8009f44:	9a04      	ldr	r2, [sp, #16]
 8009f46:	b9d8      	cbnz	r0, 8009f80 <_vfiprintf_r+0x110>
 8009f48:	06d1      	lsls	r1, r2, #27
 8009f4a:	bf44      	itt	mi
 8009f4c:	2320      	movmi	r3, #32
 8009f4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f52:	0713      	lsls	r3, r2, #28
 8009f54:	bf44      	itt	mi
 8009f56:	232b      	movmi	r3, #43	@ 0x2b
 8009f58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f5c:	f89a 3000 	ldrb.w	r3, [sl]
 8009f60:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f62:	d015      	beq.n	8009f90 <_vfiprintf_r+0x120>
 8009f64:	9a07      	ldr	r2, [sp, #28]
 8009f66:	4654      	mov	r4, sl
 8009f68:	2000      	movs	r0, #0
 8009f6a:	f04f 0c0a 	mov.w	ip, #10
 8009f6e:	4621      	mov	r1, r4
 8009f70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f74:	3b30      	subs	r3, #48	@ 0x30
 8009f76:	2b09      	cmp	r3, #9
 8009f78:	d94b      	bls.n	800a012 <_vfiprintf_r+0x1a2>
 8009f7a:	b1b0      	cbz	r0, 8009faa <_vfiprintf_r+0x13a>
 8009f7c:	9207      	str	r2, [sp, #28]
 8009f7e:	e014      	b.n	8009faa <_vfiprintf_r+0x13a>
 8009f80:	eba0 0308 	sub.w	r3, r0, r8
 8009f84:	fa09 f303 	lsl.w	r3, r9, r3
 8009f88:	4313      	orrs	r3, r2
 8009f8a:	9304      	str	r3, [sp, #16]
 8009f8c:	46a2      	mov	sl, r4
 8009f8e:	e7d2      	b.n	8009f36 <_vfiprintf_r+0xc6>
 8009f90:	9b03      	ldr	r3, [sp, #12]
 8009f92:	1d19      	adds	r1, r3, #4
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	9103      	str	r1, [sp, #12]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	bfbb      	ittet	lt
 8009f9c:	425b      	neglt	r3, r3
 8009f9e:	f042 0202 	orrlt.w	r2, r2, #2
 8009fa2:	9307      	strge	r3, [sp, #28]
 8009fa4:	9307      	strlt	r3, [sp, #28]
 8009fa6:	bfb8      	it	lt
 8009fa8:	9204      	strlt	r2, [sp, #16]
 8009faa:	7823      	ldrb	r3, [r4, #0]
 8009fac:	2b2e      	cmp	r3, #46	@ 0x2e
 8009fae:	d10a      	bne.n	8009fc6 <_vfiprintf_r+0x156>
 8009fb0:	7863      	ldrb	r3, [r4, #1]
 8009fb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8009fb4:	d132      	bne.n	800a01c <_vfiprintf_r+0x1ac>
 8009fb6:	9b03      	ldr	r3, [sp, #12]
 8009fb8:	1d1a      	adds	r2, r3, #4
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	9203      	str	r2, [sp, #12]
 8009fbe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009fc2:	3402      	adds	r4, #2
 8009fc4:	9305      	str	r3, [sp, #20]
 8009fc6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a09c <_vfiprintf_r+0x22c>
 8009fca:	7821      	ldrb	r1, [r4, #0]
 8009fcc:	2203      	movs	r2, #3
 8009fce:	4650      	mov	r0, sl
 8009fd0:	f7f6 f906 	bl	80001e0 <memchr>
 8009fd4:	b138      	cbz	r0, 8009fe6 <_vfiprintf_r+0x176>
 8009fd6:	9b04      	ldr	r3, [sp, #16]
 8009fd8:	eba0 000a 	sub.w	r0, r0, sl
 8009fdc:	2240      	movs	r2, #64	@ 0x40
 8009fde:	4082      	lsls	r2, r0
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	3401      	adds	r4, #1
 8009fe4:	9304      	str	r3, [sp, #16]
 8009fe6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fea:	4829      	ldr	r0, [pc, #164]	@ (800a090 <_vfiprintf_r+0x220>)
 8009fec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009ff0:	2206      	movs	r2, #6
 8009ff2:	f7f6 f8f5 	bl	80001e0 <memchr>
 8009ff6:	2800      	cmp	r0, #0
 8009ff8:	d03f      	beq.n	800a07a <_vfiprintf_r+0x20a>
 8009ffa:	4b26      	ldr	r3, [pc, #152]	@ (800a094 <_vfiprintf_r+0x224>)
 8009ffc:	bb1b      	cbnz	r3, 800a046 <_vfiprintf_r+0x1d6>
 8009ffe:	9b03      	ldr	r3, [sp, #12]
 800a000:	3307      	adds	r3, #7
 800a002:	f023 0307 	bic.w	r3, r3, #7
 800a006:	3308      	adds	r3, #8
 800a008:	9303      	str	r3, [sp, #12]
 800a00a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a00c:	443b      	add	r3, r7
 800a00e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a010:	e76a      	b.n	8009ee8 <_vfiprintf_r+0x78>
 800a012:	fb0c 3202 	mla	r2, ip, r2, r3
 800a016:	460c      	mov	r4, r1
 800a018:	2001      	movs	r0, #1
 800a01a:	e7a8      	b.n	8009f6e <_vfiprintf_r+0xfe>
 800a01c:	2300      	movs	r3, #0
 800a01e:	3401      	adds	r4, #1
 800a020:	9305      	str	r3, [sp, #20]
 800a022:	4619      	mov	r1, r3
 800a024:	f04f 0c0a 	mov.w	ip, #10
 800a028:	4620      	mov	r0, r4
 800a02a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a02e:	3a30      	subs	r2, #48	@ 0x30
 800a030:	2a09      	cmp	r2, #9
 800a032:	d903      	bls.n	800a03c <_vfiprintf_r+0x1cc>
 800a034:	2b00      	cmp	r3, #0
 800a036:	d0c6      	beq.n	8009fc6 <_vfiprintf_r+0x156>
 800a038:	9105      	str	r1, [sp, #20]
 800a03a:	e7c4      	b.n	8009fc6 <_vfiprintf_r+0x156>
 800a03c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a040:	4604      	mov	r4, r0
 800a042:	2301      	movs	r3, #1
 800a044:	e7f0      	b.n	800a028 <_vfiprintf_r+0x1b8>
 800a046:	ab03      	add	r3, sp, #12
 800a048:	9300      	str	r3, [sp, #0]
 800a04a:	462a      	mov	r2, r5
 800a04c:	4b12      	ldr	r3, [pc, #72]	@ (800a098 <_vfiprintf_r+0x228>)
 800a04e:	a904      	add	r1, sp, #16
 800a050:	4630      	mov	r0, r6
 800a052:	f7fd fbc5 	bl	80077e0 <_printf_float>
 800a056:	4607      	mov	r7, r0
 800a058:	1c78      	adds	r0, r7, #1
 800a05a:	d1d6      	bne.n	800a00a <_vfiprintf_r+0x19a>
 800a05c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a05e:	07d9      	lsls	r1, r3, #31
 800a060:	d405      	bmi.n	800a06e <_vfiprintf_r+0x1fe>
 800a062:	89ab      	ldrh	r3, [r5, #12]
 800a064:	059a      	lsls	r2, r3, #22
 800a066:	d402      	bmi.n	800a06e <_vfiprintf_r+0x1fe>
 800a068:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a06a:	f7fe f929 	bl	80082c0 <__retarget_lock_release_recursive>
 800a06e:	89ab      	ldrh	r3, [r5, #12]
 800a070:	065b      	lsls	r3, r3, #25
 800a072:	f53f af1f 	bmi.w	8009eb4 <_vfiprintf_r+0x44>
 800a076:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a078:	e71e      	b.n	8009eb8 <_vfiprintf_r+0x48>
 800a07a:	ab03      	add	r3, sp, #12
 800a07c:	9300      	str	r3, [sp, #0]
 800a07e:	462a      	mov	r2, r5
 800a080:	4b05      	ldr	r3, [pc, #20]	@ (800a098 <_vfiprintf_r+0x228>)
 800a082:	a904      	add	r1, sp, #16
 800a084:	4630      	mov	r0, r6
 800a086:	f7fd fe43 	bl	8007d10 <_printf_i>
 800a08a:	e7e4      	b.n	800a056 <_vfiprintf_r+0x1e6>
 800a08c:	0800a608 	.word	0x0800a608
 800a090:	0800a612 	.word	0x0800a612
 800a094:	080077e1 	.word	0x080077e1
 800a098:	08009e4d 	.word	0x08009e4d
 800a09c:	0800a60e 	.word	0x0800a60e

0800a0a0 <__swbuf_r>:
 800a0a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0a2:	460e      	mov	r6, r1
 800a0a4:	4614      	mov	r4, r2
 800a0a6:	4605      	mov	r5, r0
 800a0a8:	b118      	cbz	r0, 800a0b2 <__swbuf_r+0x12>
 800a0aa:	6a03      	ldr	r3, [r0, #32]
 800a0ac:	b90b      	cbnz	r3, 800a0b2 <__swbuf_r+0x12>
 800a0ae:	f7fd ffdb 	bl	8008068 <__sinit>
 800a0b2:	69a3      	ldr	r3, [r4, #24]
 800a0b4:	60a3      	str	r3, [r4, #8]
 800a0b6:	89a3      	ldrh	r3, [r4, #12]
 800a0b8:	071a      	lsls	r2, r3, #28
 800a0ba:	d501      	bpl.n	800a0c0 <__swbuf_r+0x20>
 800a0bc:	6923      	ldr	r3, [r4, #16]
 800a0be:	b943      	cbnz	r3, 800a0d2 <__swbuf_r+0x32>
 800a0c0:	4621      	mov	r1, r4
 800a0c2:	4628      	mov	r0, r5
 800a0c4:	f000 f82a 	bl	800a11c <__swsetup_r>
 800a0c8:	b118      	cbz	r0, 800a0d2 <__swbuf_r+0x32>
 800a0ca:	f04f 37ff 	mov.w	r7, #4294967295
 800a0ce:	4638      	mov	r0, r7
 800a0d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0d2:	6823      	ldr	r3, [r4, #0]
 800a0d4:	6922      	ldr	r2, [r4, #16]
 800a0d6:	1a98      	subs	r0, r3, r2
 800a0d8:	6963      	ldr	r3, [r4, #20]
 800a0da:	b2f6      	uxtb	r6, r6
 800a0dc:	4283      	cmp	r3, r0
 800a0de:	4637      	mov	r7, r6
 800a0e0:	dc05      	bgt.n	800a0ee <__swbuf_r+0x4e>
 800a0e2:	4621      	mov	r1, r4
 800a0e4:	4628      	mov	r0, r5
 800a0e6:	f7ff fd99 	bl	8009c1c <_fflush_r>
 800a0ea:	2800      	cmp	r0, #0
 800a0ec:	d1ed      	bne.n	800a0ca <__swbuf_r+0x2a>
 800a0ee:	68a3      	ldr	r3, [r4, #8]
 800a0f0:	3b01      	subs	r3, #1
 800a0f2:	60a3      	str	r3, [r4, #8]
 800a0f4:	6823      	ldr	r3, [r4, #0]
 800a0f6:	1c5a      	adds	r2, r3, #1
 800a0f8:	6022      	str	r2, [r4, #0]
 800a0fa:	701e      	strb	r6, [r3, #0]
 800a0fc:	6962      	ldr	r2, [r4, #20]
 800a0fe:	1c43      	adds	r3, r0, #1
 800a100:	429a      	cmp	r2, r3
 800a102:	d004      	beq.n	800a10e <__swbuf_r+0x6e>
 800a104:	89a3      	ldrh	r3, [r4, #12]
 800a106:	07db      	lsls	r3, r3, #31
 800a108:	d5e1      	bpl.n	800a0ce <__swbuf_r+0x2e>
 800a10a:	2e0a      	cmp	r6, #10
 800a10c:	d1df      	bne.n	800a0ce <__swbuf_r+0x2e>
 800a10e:	4621      	mov	r1, r4
 800a110:	4628      	mov	r0, r5
 800a112:	f7ff fd83 	bl	8009c1c <_fflush_r>
 800a116:	2800      	cmp	r0, #0
 800a118:	d0d9      	beq.n	800a0ce <__swbuf_r+0x2e>
 800a11a:	e7d6      	b.n	800a0ca <__swbuf_r+0x2a>

0800a11c <__swsetup_r>:
 800a11c:	b538      	push	{r3, r4, r5, lr}
 800a11e:	4b29      	ldr	r3, [pc, #164]	@ (800a1c4 <__swsetup_r+0xa8>)
 800a120:	4605      	mov	r5, r0
 800a122:	6818      	ldr	r0, [r3, #0]
 800a124:	460c      	mov	r4, r1
 800a126:	b118      	cbz	r0, 800a130 <__swsetup_r+0x14>
 800a128:	6a03      	ldr	r3, [r0, #32]
 800a12a:	b90b      	cbnz	r3, 800a130 <__swsetup_r+0x14>
 800a12c:	f7fd ff9c 	bl	8008068 <__sinit>
 800a130:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a134:	0719      	lsls	r1, r3, #28
 800a136:	d422      	bmi.n	800a17e <__swsetup_r+0x62>
 800a138:	06da      	lsls	r2, r3, #27
 800a13a:	d407      	bmi.n	800a14c <__swsetup_r+0x30>
 800a13c:	2209      	movs	r2, #9
 800a13e:	602a      	str	r2, [r5, #0]
 800a140:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a144:	81a3      	strh	r3, [r4, #12]
 800a146:	f04f 30ff 	mov.w	r0, #4294967295
 800a14a:	e033      	b.n	800a1b4 <__swsetup_r+0x98>
 800a14c:	0758      	lsls	r0, r3, #29
 800a14e:	d512      	bpl.n	800a176 <__swsetup_r+0x5a>
 800a150:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a152:	b141      	cbz	r1, 800a166 <__swsetup_r+0x4a>
 800a154:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a158:	4299      	cmp	r1, r3
 800a15a:	d002      	beq.n	800a162 <__swsetup_r+0x46>
 800a15c:	4628      	mov	r0, r5
 800a15e:	f7fe feff 	bl	8008f60 <_free_r>
 800a162:	2300      	movs	r3, #0
 800a164:	6363      	str	r3, [r4, #52]	@ 0x34
 800a166:	89a3      	ldrh	r3, [r4, #12]
 800a168:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a16c:	81a3      	strh	r3, [r4, #12]
 800a16e:	2300      	movs	r3, #0
 800a170:	6063      	str	r3, [r4, #4]
 800a172:	6923      	ldr	r3, [r4, #16]
 800a174:	6023      	str	r3, [r4, #0]
 800a176:	89a3      	ldrh	r3, [r4, #12]
 800a178:	f043 0308 	orr.w	r3, r3, #8
 800a17c:	81a3      	strh	r3, [r4, #12]
 800a17e:	6923      	ldr	r3, [r4, #16]
 800a180:	b94b      	cbnz	r3, 800a196 <__swsetup_r+0x7a>
 800a182:	89a3      	ldrh	r3, [r4, #12]
 800a184:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a188:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a18c:	d003      	beq.n	800a196 <__swsetup_r+0x7a>
 800a18e:	4621      	mov	r1, r4
 800a190:	4628      	mov	r0, r5
 800a192:	f000 f883 	bl	800a29c <__smakebuf_r>
 800a196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a19a:	f013 0201 	ands.w	r2, r3, #1
 800a19e:	d00a      	beq.n	800a1b6 <__swsetup_r+0x9a>
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	60a2      	str	r2, [r4, #8]
 800a1a4:	6962      	ldr	r2, [r4, #20]
 800a1a6:	4252      	negs	r2, r2
 800a1a8:	61a2      	str	r2, [r4, #24]
 800a1aa:	6922      	ldr	r2, [r4, #16]
 800a1ac:	b942      	cbnz	r2, 800a1c0 <__swsetup_r+0xa4>
 800a1ae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a1b2:	d1c5      	bne.n	800a140 <__swsetup_r+0x24>
 800a1b4:	bd38      	pop	{r3, r4, r5, pc}
 800a1b6:	0799      	lsls	r1, r3, #30
 800a1b8:	bf58      	it	pl
 800a1ba:	6962      	ldrpl	r2, [r4, #20]
 800a1bc:	60a2      	str	r2, [r4, #8]
 800a1be:	e7f4      	b.n	800a1aa <__swsetup_r+0x8e>
 800a1c0:	2000      	movs	r0, #0
 800a1c2:	e7f7      	b.n	800a1b4 <__swsetup_r+0x98>
 800a1c4:	20000044 	.word	0x20000044

0800a1c8 <_raise_r>:
 800a1c8:	291f      	cmp	r1, #31
 800a1ca:	b538      	push	{r3, r4, r5, lr}
 800a1cc:	4605      	mov	r5, r0
 800a1ce:	460c      	mov	r4, r1
 800a1d0:	d904      	bls.n	800a1dc <_raise_r+0x14>
 800a1d2:	2316      	movs	r3, #22
 800a1d4:	6003      	str	r3, [r0, #0]
 800a1d6:	f04f 30ff 	mov.w	r0, #4294967295
 800a1da:	bd38      	pop	{r3, r4, r5, pc}
 800a1dc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a1de:	b112      	cbz	r2, 800a1e6 <_raise_r+0x1e>
 800a1e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a1e4:	b94b      	cbnz	r3, 800a1fa <_raise_r+0x32>
 800a1e6:	4628      	mov	r0, r5
 800a1e8:	f000 f830 	bl	800a24c <_getpid_r>
 800a1ec:	4622      	mov	r2, r4
 800a1ee:	4601      	mov	r1, r0
 800a1f0:	4628      	mov	r0, r5
 800a1f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1f6:	f000 b817 	b.w	800a228 <_kill_r>
 800a1fa:	2b01      	cmp	r3, #1
 800a1fc:	d00a      	beq.n	800a214 <_raise_r+0x4c>
 800a1fe:	1c59      	adds	r1, r3, #1
 800a200:	d103      	bne.n	800a20a <_raise_r+0x42>
 800a202:	2316      	movs	r3, #22
 800a204:	6003      	str	r3, [r0, #0]
 800a206:	2001      	movs	r0, #1
 800a208:	e7e7      	b.n	800a1da <_raise_r+0x12>
 800a20a:	2100      	movs	r1, #0
 800a20c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a210:	4620      	mov	r0, r4
 800a212:	4798      	blx	r3
 800a214:	2000      	movs	r0, #0
 800a216:	e7e0      	b.n	800a1da <_raise_r+0x12>

0800a218 <raise>:
 800a218:	4b02      	ldr	r3, [pc, #8]	@ (800a224 <raise+0xc>)
 800a21a:	4601      	mov	r1, r0
 800a21c:	6818      	ldr	r0, [r3, #0]
 800a21e:	f7ff bfd3 	b.w	800a1c8 <_raise_r>
 800a222:	bf00      	nop
 800a224:	20000044 	.word	0x20000044

0800a228 <_kill_r>:
 800a228:	b538      	push	{r3, r4, r5, lr}
 800a22a:	4d07      	ldr	r5, [pc, #28]	@ (800a248 <_kill_r+0x20>)
 800a22c:	2300      	movs	r3, #0
 800a22e:	4604      	mov	r4, r0
 800a230:	4608      	mov	r0, r1
 800a232:	4611      	mov	r1, r2
 800a234:	602b      	str	r3, [r5, #0]
 800a236:	f7f7 fd67 	bl	8001d08 <_kill>
 800a23a:	1c43      	adds	r3, r0, #1
 800a23c:	d102      	bne.n	800a244 <_kill_r+0x1c>
 800a23e:	682b      	ldr	r3, [r5, #0]
 800a240:	b103      	cbz	r3, 800a244 <_kill_r+0x1c>
 800a242:	6023      	str	r3, [r4, #0]
 800a244:	bd38      	pop	{r3, r4, r5, pc}
 800a246:	bf00      	nop
 800a248:	20000520 	.word	0x20000520

0800a24c <_getpid_r>:
 800a24c:	f7f7 bd54 	b.w	8001cf8 <_getpid>

0800a250 <__swhatbuf_r>:
 800a250:	b570      	push	{r4, r5, r6, lr}
 800a252:	460c      	mov	r4, r1
 800a254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a258:	2900      	cmp	r1, #0
 800a25a:	b096      	sub	sp, #88	@ 0x58
 800a25c:	4615      	mov	r5, r2
 800a25e:	461e      	mov	r6, r3
 800a260:	da0d      	bge.n	800a27e <__swhatbuf_r+0x2e>
 800a262:	89a3      	ldrh	r3, [r4, #12]
 800a264:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a268:	f04f 0100 	mov.w	r1, #0
 800a26c:	bf14      	ite	ne
 800a26e:	2340      	movne	r3, #64	@ 0x40
 800a270:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a274:	2000      	movs	r0, #0
 800a276:	6031      	str	r1, [r6, #0]
 800a278:	602b      	str	r3, [r5, #0]
 800a27a:	b016      	add	sp, #88	@ 0x58
 800a27c:	bd70      	pop	{r4, r5, r6, pc}
 800a27e:	466a      	mov	r2, sp
 800a280:	f000 f848 	bl	800a314 <_fstat_r>
 800a284:	2800      	cmp	r0, #0
 800a286:	dbec      	blt.n	800a262 <__swhatbuf_r+0x12>
 800a288:	9901      	ldr	r1, [sp, #4]
 800a28a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a28e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a292:	4259      	negs	r1, r3
 800a294:	4159      	adcs	r1, r3
 800a296:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a29a:	e7eb      	b.n	800a274 <__swhatbuf_r+0x24>

0800a29c <__smakebuf_r>:
 800a29c:	898b      	ldrh	r3, [r1, #12]
 800a29e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a2a0:	079d      	lsls	r5, r3, #30
 800a2a2:	4606      	mov	r6, r0
 800a2a4:	460c      	mov	r4, r1
 800a2a6:	d507      	bpl.n	800a2b8 <__smakebuf_r+0x1c>
 800a2a8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a2ac:	6023      	str	r3, [r4, #0]
 800a2ae:	6123      	str	r3, [r4, #16]
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	6163      	str	r3, [r4, #20]
 800a2b4:	b003      	add	sp, #12
 800a2b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2b8:	ab01      	add	r3, sp, #4
 800a2ba:	466a      	mov	r2, sp
 800a2bc:	f7ff ffc8 	bl	800a250 <__swhatbuf_r>
 800a2c0:	9f00      	ldr	r7, [sp, #0]
 800a2c2:	4605      	mov	r5, r0
 800a2c4:	4639      	mov	r1, r7
 800a2c6:	4630      	mov	r0, r6
 800a2c8:	f7fe febe 	bl	8009048 <_malloc_r>
 800a2cc:	b948      	cbnz	r0, 800a2e2 <__smakebuf_r+0x46>
 800a2ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2d2:	059a      	lsls	r2, r3, #22
 800a2d4:	d4ee      	bmi.n	800a2b4 <__smakebuf_r+0x18>
 800a2d6:	f023 0303 	bic.w	r3, r3, #3
 800a2da:	f043 0302 	orr.w	r3, r3, #2
 800a2de:	81a3      	strh	r3, [r4, #12]
 800a2e0:	e7e2      	b.n	800a2a8 <__smakebuf_r+0xc>
 800a2e2:	89a3      	ldrh	r3, [r4, #12]
 800a2e4:	6020      	str	r0, [r4, #0]
 800a2e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2ea:	81a3      	strh	r3, [r4, #12]
 800a2ec:	9b01      	ldr	r3, [sp, #4]
 800a2ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a2f2:	b15b      	cbz	r3, 800a30c <__smakebuf_r+0x70>
 800a2f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2f8:	4630      	mov	r0, r6
 800a2fa:	f000 f81d 	bl	800a338 <_isatty_r>
 800a2fe:	b128      	cbz	r0, 800a30c <__smakebuf_r+0x70>
 800a300:	89a3      	ldrh	r3, [r4, #12]
 800a302:	f023 0303 	bic.w	r3, r3, #3
 800a306:	f043 0301 	orr.w	r3, r3, #1
 800a30a:	81a3      	strh	r3, [r4, #12]
 800a30c:	89a3      	ldrh	r3, [r4, #12]
 800a30e:	431d      	orrs	r5, r3
 800a310:	81a5      	strh	r5, [r4, #12]
 800a312:	e7cf      	b.n	800a2b4 <__smakebuf_r+0x18>

0800a314 <_fstat_r>:
 800a314:	b538      	push	{r3, r4, r5, lr}
 800a316:	4d07      	ldr	r5, [pc, #28]	@ (800a334 <_fstat_r+0x20>)
 800a318:	2300      	movs	r3, #0
 800a31a:	4604      	mov	r4, r0
 800a31c:	4608      	mov	r0, r1
 800a31e:	4611      	mov	r1, r2
 800a320:	602b      	str	r3, [r5, #0]
 800a322:	f7f7 fd51 	bl	8001dc8 <_fstat>
 800a326:	1c43      	adds	r3, r0, #1
 800a328:	d102      	bne.n	800a330 <_fstat_r+0x1c>
 800a32a:	682b      	ldr	r3, [r5, #0]
 800a32c:	b103      	cbz	r3, 800a330 <_fstat_r+0x1c>
 800a32e:	6023      	str	r3, [r4, #0]
 800a330:	bd38      	pop	{r3, r4, r5, pc}
 800a332:	bf00      	nop
 800a334:	20000520 	.word	0x20000520

0800a338 <_isatty_r>:
 800a338:	b538      	push	{r3, r4, r5, lr}
 800a33a:	4d06      	ldr	r5, [pc, #24]	@ (800a354 <_isatty_r+0x1c>)
 800a33c:	2300      	movs	r3, #0
 800a33e:	4604      	mov	r4, r0
 800a340:	4608      	mov	r0, r1
 800a342:	602b      	str	r3, [r5, #0]
 800a344:	f7f7 fd50 	bl	8001de8 <_isatty>
 800a348:	1c43      	adds	r3, r0, #1
 800a34a:	d102      	bne.n	800a352 <_isatty_r+0x1a>
 800a34c:	682b      	ldr	r3, [r5, #0]
 800a34e:	b103      	cbz	r3, 800a352 <_isatty_r+0x1a>
 800a350:	6023      	str	r3, [r4, #0]
 800a352:	bd38      	pop	{r3, r4, r5, pc}
 800a354:	20000520 	.word	0x20000520

0800a358 <_init>:
 800a358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a35a:	bf00      	nop
 800a35c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a35e:	bc08      	pop	{r3}
 800a360:	469e      	mov	lr, r3
 800a362:	4770      	bx	lr

0800a364 <_fini>:
 800a364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a366:	bf00      	nop
 800a368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a36a:	bc08      	pop	{r3}
 800a36c:	469e      	mov	lr, r3
 800a36e:	4770      	bx	lr
