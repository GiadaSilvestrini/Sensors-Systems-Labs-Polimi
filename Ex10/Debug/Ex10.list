
Ex10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a10  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004bb0  08004bb0  00005bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c38  08004c38  00006064  2**0
                  CONTENTS
  4 .ARM          00000008  08004c38  08004c38  00005c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c40  08004c40  00006064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c40  08004c40  00005c40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c44  08004c44  00005c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08004c48  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  20000064  08004cac  00006064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000368  08004cac  00006368  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c6a3  00000000  00000000  00006094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b33  00000000  00000000  00012737  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf0  00000000  00000000  00014270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000962  00000000  00000000  00014e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000157ca  00000000  00000000  000157c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d5ea  00000000  00000000  0002af8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b56b  00000000  00000000  00038576  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c3ae1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000377c  00000000  00000000  000c3b24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  000c72a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004b98 	.word	0x08004b98

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08004b98 	.word	0x08004b98

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <setFrequency>:
volatile int state_j = 0;
volatile int column = 0;
int column_index=0;

static void setFrequency(char* note)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b098      	sub	sp, #96	@ 0x60
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000598:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005a6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]
 80005c0:	615a      	str	r2, [r3, #20]
 80005c2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80005c4:	f107 030c 	add.w	r3, r7, #12
 80005c8:	2220      	movs	r2, #32
 80005ca:	2100      	movs	r1, #0
 80005cc:	4618      	mov	r0, r3
 80005ce:	f003 fe63 	bl	8004298 <memset>

  htim1.Instance = TIM1;
 80005d2:	4b44      	ldr	r3, [pc, #272]	@ (80006e4 <setFrequency+0x154>)
 80005d4:	4a44      	ldr	r2, [pc, #272]	@ (80006e8 <setFrequency+0x158>)
 80005d6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100;
 80005d8:	4b42      	ldr	r3, [pc, #264]	@ (80006e4 <setFrequency+0x154>)
 80005da:	2264      	movs	r2, #100	@ 0x64
 80005dc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005de:	4b41      	ldr	r3, [pc, #260]	@ (80006e4 <setFrequency+0x154>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = getPeriod(note)-1;
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	f000 f881 	bl	80006ec <getPeriod>
 80005ea:	4603      	mov	r3, r0
 80005ec:	3b01      	subs	r3, #1
 80005ee:	461a      	mov	r2, r3
 80005f0:	4b3c      	ldr	r3, [pc, #240]	@ (80006e4 <setFrequency+0x154>)
 80005f2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005f4:	4b3b      	ldr	r3, [pc, #236]	@ (80006e4 <setFrequency+0x154>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005fa:	4b3a      	ldr	r3, [pc, #232]	@ (80006e4 <setFrequency+0x154>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000600:	4b38      	ldr	r3, [pc, #224]	@ (80006e4 <setFrequency+0x154>)
 8000602:	2200      	movs	r2, #0
 8000604:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000606:	4837      	ldr	r0, [pc, #220]	@ (80006e4 <setFrequency+0x154>)
 8000608:	f002 f8d8 	bl	80027bc <HAL_TIM_Base_Init>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <setFrequency+0x86>
  {
    Error_Handler();
 8000612:	f000 feb3 	bl	800137c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000616:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800061a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800061c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000620:	4619      	mov	r1, r3
 8000622:	4830      	ldr	r0, [pc, #192]	@ (80006e4 <setFrequency+0x154>)
 8000624:	f002 fdb2 	bl	800318c <HAL_TIM_ConfigClockSource>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <setFrequency+0xa2>
  {
    Error_Handler();
 800062e:	f000 fea5 	bl	800137c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000632:	482c      	ldr	r0, [pc, #176]	@ (80006e4 <setFrequency+0x154>)
 8000634:	f002 f974 	bl	8002920 <HAL_TIM_PWM_Init>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <setFrequency+0xb2>
  {
    Error_Handler();
 800063e:	f000 fe9d 	bl	800137c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000642:	2300      	movs	r3, #0
 8000644:	64bb      	str	r3, [r7, #72]	@ 0x48
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000646:	2300      	movs	r3, #0
 8000648:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800064a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800064e:	4619      	mov	r1, r3
 8000650:	4824      	ldr	r0, [pc, #144]	@ (80006e4 <setFrequency+0x154>)
 8000652:	f003 f957 	bl	8003904 <HAL_TIMEx_MasterConfigSynchronization>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <setFrequency+0xd0>
  {
    Error_Handler();
 800065c:	f000 fe8e 	bl	800137c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000660:	2360      	movs	r3, #96	@ 0x60
 8000662:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = (int)getPeriod(note)/2 -1;
 8000664:	6878      	ldr	r0, [r7, #4]
 8000666:	f000 f841 	bl	80006ec <getPeriod>
 800066a:	4603      	mov	r3, r0
 800066c:	0fda      	lsrs	r2, r3, #31
 800066e:	4413      	add	r3, r2
 8000670:	105b      	asrs	r3, r3, #1
 8000672:	3b01      	subs	r3, #1
 8000674:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000676:	2300      	movs	r3, #0
 8000678:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800067a:	2300      	movs	r3, #0
 800067c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800067e:	2300      	movs	r3, #0
 8000680:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000682:	2300      	movs	r3, #0
 8000684:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000686:	2300      	movs	r3, #0
 8000688:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800068a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800068e:	2204      	movs	r2, #4
 8000690:	4619      	mov	r1, r3
 8000692:	4814      	ldr	r0, [pc, #80]	@ (80006e4 <setFrequency+0x154>)
 8000694:	f002 fcb8 	bl	8003008 <HAL_TIM_PWM_ConfigChannel>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <setFrequency+0x112>
  {
    Error_Handler();
 800069e:	f000 fe6d 	bl	800137c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006a2:	2300      	movs	r3, #0
 80006a4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006a6:	2300      	movs	r3, #0
 80006a8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006aa:	2300      	movs	r3, #0
 80006ac:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.DeadTime = 0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006ba:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006bc:	2300      	movs	r3, #0
 80006be:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80006c0:	f107 030c 	add.w	r3, r7, #12
 80006c4:	4619      	mov	r1, r3
 80006c6:	4807      	ldr	r0, [pc, #28]	@ (80006e4 <setFrequency+0x154>)
 80006c8:	f003 f98a 	bl	80039e0 <HAL_TIMEx_ConfigBreakDeadTime>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <setFrequency+0x146>
  {
    Error_Handler();
 80006d2:	f000 fe53 	bl	800137c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 80006d6:	4803      	ldr	r0, [pc, #12]	@ (80006e4 <setFrequency+0x154>)
 80006d8:	f000 ff08 	bl	80014ec <HAL_TIM_MspPostInit>
}
 80006dc:	bf00      	nop
 80006de:	3760      	adds	r7, #96	@ 0x60
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000080 	.word	0x20000080
 80006e8:	40010000 	.word	0x40010000

080006ec <getPeriod>:

int getPeriod(char* note){
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
	if(strcmp(note, "la")==0)
 80006f4:	4942      	ldr	r1, [pc, #264]	@ (8000800 <getPeriod+0x114>)
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f7ff fd72 	bl	80001e0 <strcmp>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d102      	bne.n	8000708 <getPeriod+0x1c>
		return 1909;
 8000702:	f240 7375 	movw	r3, #1909	@ 0x775
 8000706:	e077      	b.n	80007f8 <getPeriod+0x10c>
	else if (strcmp(note, "la#")==0)
 8000708:	493e      	ldr	r1, [pc, #248]	@ (8000804 <getPeriod+0x118>)
 800070a:	6878      	ldr	r0, [r7, #4]
 800070c:	f7ff fd68 	bl	80001e0 <strcmp>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d102      	bne.n	800071c <getPeriod+0x30>
			return 1802;
 8000716:	f240 730a 	movw	r3, #1802	@ 0x70a
 800071a:	e06d      	b.n	80007f8 <getPeriod+0x10c>
	else if (strcmp(note, "si")==0)
 800071c:	493a      	ldr	r1, [pc, #232]	@ (8000808 <getPeriod+0x11c>)
 800071e:	6878      	ldr	r0, [r7, #4]
 8000720:	f7ff fd5e 	bl	80001e0 <strcmp>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d102      	bne.n	8000730 <getPeriod+0x44>
			return 1700;
 800072a:	f240 63a4 	movw	r3, #1700	@ 0x6a4
 800072e:	e063      	b.n	80007f8 <getPeriod+0x10c>
	else if (strcmp(note, "do")==0)
 8000730:	4936      	ldr	r1, [pc, #216]	@ (800080c <getPeriod+0x120>)
 8000732:	6878      	ldr	r0, [r7, #4]
 8000734:	f7ff fd54 	bl	80001e0 <strcmp>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d102      	bne.n	8000744 <getPeriod+0x58>
			return 3206;
 800073e:	f640 4386 	movw	r3, #3206	@ 0xc86
 8000742:	e059      	b.n	80007f8 <getPeriod+0x10c>
	else if (strcmp(note, "do#")==0)
 8000744:	4932      	ldr	r1, [pc, #200]	@ (8000810 <getPeriod+0x124>)
 8000746:	6878      	ldr	r0, [r7, #4]
 8000748:	f7ff fd4a 	bl	80001e0 <strcmp>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d102      	bne.n	8000758 <getPeriod+0x6c>
			return 3032;
 8000752:	f640 33d8 	movw	r3, #3032	@ 0xbd8
 8000756:	e04f      	b.n	80007f8 <getPeriod+0x10c>
	else if (strcmp(note, "re")==0)
 8000758:	492e      	ldr	r1, [pc, #184]	@ (8000814 <getPeriod+0x128>)
 800075a:	6878      	ldr	r0, [r7, #4]
 800075c:	f7ff fd40 	bl	80001e0 <strcmp>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d102      	bne.n	800076c <getPeriod+0x80>
			return 2857;
 8000766:	f640 3329 	movw	r3, #2857	@ 0xb29
 800076a:	e045      	b.n	80007f8 <getPeriod+0x10c>
	else if (strcmp(note, "re5")==0)
 800076c:	492a      	ldr	r1, [pc, #168]	@ (8000818 <getPeriod+0x12c>)
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f7ff fd36 	bl	80001e0 <strcmp>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d102      	bne.n	8000780 <getPeriod+0x94>
				return 1431;
 800077a:	f240 5397 	movw	r3, #1431	@ 0x597
 800077e:	e03b      	b.n	80007f8 <getPeriod+0x10c>
	else if (strcmp(note, "re#")==0)
 8000780:	4926      	ldr	r1, [pc, #152]	@ (800081c <getPeriod+0x130>)
 8000782:	6878      	ldr	r0, [r7, #4]
 8000784:	f7ff fd2c 	bl	80001e0 <strcmp>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d102      	bne.n	8000794 <getPeriod+0xa8>
			return 2700;
 800078e:	f640 238c 	movw	r3, #2700	@ 0xa8c
 8000792:	e031      	b.n	80007f8 <getPeriod+0x10c>
	else if (strcmp(note, "mi")==0)
 8000794:	4922      	ldr	r1, [pc, #136]	@ (8000820 <getPeriod+0x134>)
 8000796:	6878      	ldr	r0, [r7, #4]
 8000798:	f7ff fd22 	bl	80001e0 <strcmp>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d102      	bne.n	80007a8 <getPeriod+0xbc>
			return 2545;
 80007a2:	f640 13f1 	movw	r3, #2545	@ 0x9f1
 80007a6:	e027      	b.n	80007f8 <getPeriod+0x10c>
	else if (strcmp(note, "fa")==0)
 80007a8:	491e      	ldr	r1, [pc, #120]	@ (8000824 <getPeriod+0x138>)
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	f7ff fd18 	bl	80001e0 <strcmp>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d102      	bne.n	80007bc <getPeriod+0xd0>
			return 2406;
 80007b6:	f640 1366 	movw	r3, #2406	@ 0x966
 80007ba:	e01d      	b.n	80007f8 <getPeriod+0x10c>
	else if (strcmp(note, "fa#")==0)
 80007bc:	491a      	ldr	r1, [pc, #104]	@ (8000828 <getPeriod+0x13c>)
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f7ff fd0e 	bl	80001e0 <strcmp>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d102      	bne.n	80007d0 <getPeriod+0xe4>
			return 2270;
 80007ca:	f640 03de 	movw	r3, #2270	@ 0x8de
 80007ce:	e013      	b.n	80007f8 <getPeriod+0x10c>
	else if (strcmp(note, "sol")==0)
 80007d0:	4916      	ldr	r1, [pc, #88]	@ (800082c <getPeriod+0x140>)
 80007d2:	6878      	ldr	r0, [r7, #4]
 80007d4:	f7ff fd04 	bl	80001e0 <strcmp>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d102      	bne.n	80007e4 <getPeriod+0xf8>
			return 2142;
 80007de:	f640 035e 	movw	r3, #2142	@ 0x85e
 80007e2:	e009      	b.n	80007f8 <getPeriod+0x10c>
	else if (strcmp(note, "sol#")==0)
 80007e4:	4912      	ldr	r1, [pc, #72]	@ (8000830 <getPeriod+0x144>)
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f7ff fcfa 	bl	80001e0 <strcmp>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d102      	bne.n	80007f8 <getPeriod+0x10c>
			return 2024;
 80007f2:	f44f 63fd 	mov.w	r3, #2024	@ 0x7e8
 80007f6:	e7ff      	b.n	80007f8 <getPeriod+0x10c>
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	08004bb0 	.word	0x08004bb0
 8000804:	08004bb4 	.word	0x08004bb4
 8000808:	08004bb8 	.word	0x08004bb8
 800080c:	08004bbc 	.word	0x08004bbc
 8000810:	08004bc0 	.word	0x08004bc0
 8000814:	08004bc4 	.word	0x08004bc4
 8000818:	08004bc8 	.word	0x08004bc8
 800081c:	08004bcc 	.word	0x08004bcc
 8000820:	08004bd0 	.word	0x08004bd0
 8000824:	08004bd4 	.word	0x08004bd4
 8000828:	08004bd8 	.word	0x08004bd8
 800082c:	08004bdc 	.word	0x08004bdc
 8000830:	08004be0 	.word	0x08004be0

08000834 <setNote>:
void setNote (char* note, int delay){
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	6039      	str	r1, [r7, #0]
	setFrequency(note);
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f7ff fea6 	bl	8000590 <setFrequency>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000844:	2104      	movs	r1, #4
 8000846:	4807      	ldr	r0, [pc, #28]	@ (8000864 <setNote+0x30>)
 8000848:	f002 f8c4 	bl	80029d4 <HAL_TIM_PWM_Start>
	HAL_Delay(delay);
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	4618      	mov	r0, r3
 8000850:	f001 f830 	bl	80018b4 <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000854:	2104      	movs	r1, #4
 8000856:	4803      	ldr	r0, [pc, #12]	@ (8000864 <setNote+0x30>)
 8000858:	f002 f96c 	bl	8002b34 <HAL_TIM_PWM_Stop>
}
 800085c:	bf00      	nop
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	20000080 	.word	0x20000080

08000868 <play_zero>:
void play_zero(){
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
	 setNote("sol", (int)TIME_UNIT * 3/8);
 800086c:	f240 1177 	movw	r1, #375	@ 0x177
 8000870:	4802      	ldr	r0, [pc, #8]	@ (800087c <play_zero+0x14>)
 8000872:	f7ff ffdf 	bl	8000834 <setNote>
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	08004bdc 	.word	0x08004bdc

08000880 <play_three>:
void play_three(){
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
	 setNote("la", (int)TIME_UNIT * 3/8);
 8000884:	f240 1177 	movw	r1, #375	@ 0x177
 8000888:	4802      	ldr	r0, [pc, #8]	@ (8000894 <play_three+0x14>)
 800088a:	f7ff ffd3 	bl	8000834 <setNote>
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	08004bb0 	.word	0x08004bb0

08000898 <play_c>:
void play_c(){
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
	 setNote("si", (int)TIME_UNIT * 3/8);
 800089c:	f240 1177 	movw	r1, #375	@ 0x177
 80008a0:	4802      	ldr	r0, [pc, #8]	@ (80008ac <play_c+0x14>)
 80008a2:	f7ff ffc7 	bl	8000834 <setNote>
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	08004bb8 	.word	0x08004bb8

080008b0 <play_f>:
void play_f(){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	 setNote("do", (int)TIME_UNIT * 3/8);
 80008b4:	f240 1177 	movw	r1, #375	@ 0x177
 80008b8:	4802      	ldr	r0, [pc, #8]	@ (80008c4 <play_f+0x14>)
 80008ba:	f7ff ffbb 	bl	8000834 <setNote>
}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	08004bbc 	.word	0x08004bbc

080008c8 <HAL_TIM_PeriodElapsedCallback>:
static void MX_TIM11_Init(void);
static void MX_TIM10_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	if(htim==&htim10)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	4a09      	ldr	r2, [pc, #36]	@ (80008f8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d102      	bne.n	80008de <HAL_TIM_PeriodElapsedCallback+0x16>
		activate = 1;
 80008d8:	4b08      	ldr	r3, [pc, #32]	@ (80008fc <HAL_TIM_PeriodElapsedCallback+0x34>)
 80008da:	2201      	movs	r2, #1
 80008dc:	601a      	str	r2, [r3, #0]
	if (htim==&htim11)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4a07      	ldr	r2, [pc, #28]	@ (8000900 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d103      	bne.n	80008ee <HAL_TIM_PeriodElapsedCallback+0x26>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 80008e6:	2108      	movs	r1, #8
 80008e8:	4806      	ldr	r0, [pc, #24]	@ (8000904 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80008ea:	f002 f923 	bl	8002b34 <HAL_TIM_PWM_Stop>
}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	20000110 	.word	0x20000110
 80008fc:	200001e4 	.word	0x200001e4
 8000900:	20000158 	.word	0x20000158
 8000904:	200000c8 	.word	0x200000c8

08000908 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000908:	b5b0      	push	{r4, r5, r7, lr}
 800090a:	b0b6      	sub	sp, #216	@ 0xd8
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800090e:	f000 ff5f 	bl	80017d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000912:	f000 fad1 	bl	8000eb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000916:	f000 fcc3 	bl	80012a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800091a:	f000 fc97 	bl	800124c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800091e:	f000 fb37 	bl	8000f90 <MX_TIM1_Init>
  MX_TIM11_Init();
 8000922:	f000 fc6f 	bl	8001204 <MX_TIM11_Init>
  MX_TIM10_Init();
 8000926:	f000 fc49 	bl	80011bc <MX_TIM10_Init>
  MX_TIM3_Init();
 800092a:	f000 fbd1 	bl	80010d0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  keyboard_t data[4][4];
  for(int i = 0; i < 4; i++) {
 800092e:	2300      	movs	r3, #0
 8000930:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000934:	e05d      	b.n	80009f2 <main+0xea>
    for(int j = 0; j < 4; j++) {
 8000936:	2300      	movs	r3, #0
 8000938:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800093c:	e050      	b.n	80009e0 <main+0xd8>
	    data[i][j].state = GPIO_PIN_SET;
 800093e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000942:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 8000946:	461a      	mov	r2, r3
 8000948:	0052      	lsls	r2, r2, #1
 800094a:	441a      	add	r2, r3
 800094c:	0093      	lsls	r3, r2, #2
 800094e:	461a      	mov	r2, r3
 8000950:	460b      	mov	r3, r1
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	440b      	add	r3, r1
 8000956:	011b      	lsls	r3, r3, #4
 8000958:	4413      	add	r3, r2
 800095a:	33d8      	adds	r3, #216	@ 0xd8
 800095c:	443b      	add	r3, r7
 800095e:	3bd6      	subs	r3, #214	@ 0xd6
 8000960:	2201      	movs	r2, #1
 8000962:	701a      	strb	r2, [r3, #0]
	    data[i][j].value[1] = '\0';
 8000964:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000968:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 800096c:	461a      	mov	r2, r3
 800096e:	0052      	lsls	r2, r2, #1
 8000970:	441a      	add	r2, r3
 8000972:	0093      	lsls	r3, r2, #2
 8000974:	461a      	mov	r2, r3
 8000976:	460b      	mov	r3, r1
 8000978:	005b      	lsls	r3, r3, #1
 800097a:	440b      	add	r3, r1
 800097c:	011b      	lsls	r3, r3, #4
 800097e:	4413      	add	r3, r2
 8000980:	33d8      	adds	r3, #216	@ 0xd8
 8000982:	443b      	add	r3, r7
 8000984:	3bd7      	subs	r3, #215	@ 0xd7
 8000986:	2200      	movs	r2, #0
 8000988:	701a      	strb	r2, [r3, #0]
	    data[i][j].pressed = 0;
 800098a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800098e:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 8000992:	461a      	mov	r2, r3
 8000994:	0052      	lsls	r2, r2, #1
 8000996:	441a      	add	r2, r3
 8000998:	0093      	lsls	r3, r2, #2
 800099a:	461a      	mov	r2, r3
 800099c:	460b      	mov	r3, r1
 800099e:	005b      	lsls	r3, r3, #1
 80009a0:	440b      	add	r3, r1
 80009a2:	011b      	lsls	r3, r3, #4
 80009a4:	4413      	add	r3, r2
 80009a6:	33d8      	adds	r3, #216	@ 0xd8
 80009a8:	443b      	add	r3, r7
 80009aa:	3bd4      	subs	r3, #212	@ 0xd4
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
	    data[i][j].printed = 0;
 80009b0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80009b4:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 80009b8:	461a      	mov	r2, r3
 80009ba:	0052      	lsls	r2, r2, #1
 80009bc:	441a      	add	r2, r3
 80009be:	0093      	lsls	r3, r2, #2
 80009c0:	461a      	mov	r2, r3
 80009c2:	460b      	mov	r3, r1
 80009c4:	005b      	lsls	r3, r3, #1
 80009c6:	440b      	add	r3, r1
 80009c8:	011b      	lsls	r3, r3, #4
 80009ca:	4413      	add	r3, r2
 80009cc:	33d8      	adds	r3, #216	@ 0xd8
 80009ce:	443b      	add	r3, r7
 80009d0:	3bd0      	subs	r3, #208	@ 0xd0
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
    for(int j = 0; j < 4; j++) {
 80009d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80009da:	3301      	adds	r3, #1
 80009dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80009e0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80009e4:	2b03      	cmp	r3, #3
 80009e6:	ddaa      	ble.n	800093e <main+0x36>
  for(int i = 0; i < 4; i++) {
 80009e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80009ec:	3301      	adds	r3, #1
 80009ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80009f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80009f6:	2b03      	cmp	r3, #3
 80009f8:	dd9d      	ble.n	8000936 <main+0x2e>
    }
  }

  data[0][0].value[0] = '0';
 80009fa:	2330      	movs	r3, #48	@ 0x30
 80009fc:	703b      	strb	r3, [r7, #0]
  data[0][1].value[0] = '1';
 80009fe:	2331      	movs	r3, #49	@ 0x31
 8000a00:	733b      	strb	r3, [r7, #12]
  data[0][2].value[0] = '2';
 8000a02:	2332      	movs	r3, #50	@ 0x32
 8000a04:	763b      	strb	r3, [r7, #24]
  data[0][3].value[0] = '3';
 8000a06:	2333      	movs	r3, #51	@ 0x33
 8000a08:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  data[1][0].value[0] = '4';
 8000a0c:	2334      	movs	r3, #52	@ 0x34
 8000a0e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  data[1][1].value[0] = '5';
 8000a12:	2335      	movs	r3, #53	@ 0x35
 8000a14:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  data[1][2].value[0] = '6';
 8000a18:	2336      	movs	r3, #54	@ 0x36
 8000a1a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  data[1][3].value[0] = '7';
 8000a1e:	2337      	movs	r3, #55	@ 0x37
 8000a20:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  data[2][0].value[0] = '8';
 8000a24:	2338      	movs	r3, #56	@ 0x38
 8000a26:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
  data[2][1].value[0] = '9';
 8000a2a:	2339      	movs	r3, #57	@ 0x39
 8000a2c:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  data[2][2].value[0] = 'A';
 8000a30:	2341      	movs	r3, #65	@ 0x41
 8000a32:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
  data[2][3].value[0] = 'B';
 8000a36:	2342      	movs	r3, #66	@ 0x42
 8000a38:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
  data[3][0].value[0] = 'C';
 8000a3c:	2343      	movs	r3, #67	@ 0x43
 8000a3e:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
  data[3][1].value[0] = 'D';
 8000a42:	2344      	movs	r3, #68	@ 0x44
 8000a44:	f887 309c 	strb.w	r3, [r7, #156]	@ 0x9c
  data[3][2].value[0] = 'E';
 8000a48:	2345      	movs	r3, #69	@ 0x45
 8000a4a:	f887 30a8 	strb.w	r3, [r7, #168]	@ 0xa8
  data[3][3].value[0] = 'F';
 8000a4e:	2346      	movs	r3, #70	@ 0x46
 8000a50:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000a54:	2200      	movs	r2, #0
 8000a56:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a5a:	4892      	ldr	r0, [pc, #584]	@ (8000ca4 <main+0x39c>)
 8000a5c:	f001 f9fc 	bl	8001e58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8000a60:	2200      	movs	r2, #0
 8000a62:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a66:	488f      	ldr	r0, [pc, #572]	@ (8000ca4 <main+0x39c>)
 8000a68:	f001 f9f6 	bl	8001e58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a72:	488c      	ldr	r0, [pc, #560]	@ (8000ca4 <main+0x39c>)
 8000a74:	f001 f9f0 	bl	8001e58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a7e:	4889      	ldr	r0, [pc, #548]	@ (8000ca4 <main+0x39c>)
 8000a80:	f001 f9ea 	bl	8001e58 <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start_IT(&htim10);
 8000a84:	4888      	ldr	r0, [pc, #544]	@ (8000ca8 <main+0x3a0>)
 8000a86:	f001 fee9 	bl	800285c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 8000a8a:	4888      	ldr	r0, [pc, #544]	@ (8000cac <main+0x3a4>)
 8000a8c:	f001 fee6 	bl	800285c <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	HAL_GPIO_WritePin(GPIOC, COLUMN_PIN[column], GPIO_PIN_SET);
 8000a90:	4b87      	ldr	r3, [pc, #540]	@ (8000cb0 <main+0x3a8>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a87      	ldr	r2, [pc, #540]	@ (8000cb4 <main+0x3ac>)
 8000a96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a9a:	b29b      	uxth	r3, r3
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4880      	ldr	r0, [pc, #512]	@ (8000ca4 <main+0x39c>)
 8000aa2:	f001 f9d9 	bl	8001e58 <HAL_GPIO_WritePin>

	  	if(activate) {
 8000aa6:	4b84      	ldr	r3, [pc, #528]	@ (8000cb8 <main+0x3b0>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d0f0      	beq.n	8000a90 <main+0x188>
	  		activate = 0;
 8000aae:	4b82      	ldr	r3, [pc, #520]	@ (8000cb8 <main+0x3b0>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
			data[state_i][state_j].state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12);
 8000ab4:	4b81      	ldr	r3, [pc, #516]	@ (8000cbc <main+0x3b4>)
 8000ab6:	681c      	ldr	r4, [r3, #0]
 8000ab8:	4b81      	ldr	r3, [pc, #516]	@ (8000cc0 <main+0x3b8>)
 8000aba:	681d      	ldr	r5, [r3, #0]
 8000abc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ac0:	4878      	ldr	r0, [pc, #480]	@ (8000ca4 <main+0x39c>)
 8000ac2:	f001 f9b1 	bl	8001e28 <HAL_GPIO_ReadPin>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	4619      	mov	r1, r3
 8000aca:	462a      	mov	r2, r5
 8000acc:	0052      	lsls	r2, r2, #1
 8000ace:	442a      	add	r2, r5
 8000ad0:	0093      	lsls	r3, r2, #2
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	4623      	mov	r3, r4
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	4423      	add	r3, r4
 8000ada:	011b      	lsls	r3, r3, #4
 8000adc:	4413      	add	r3, r2
 8000ade:	33d8      	adds	r3, #216	@ 0xd8
 8000ae0:	443b      	add	r3, r7
 8000ae2:	3bd6      	subs	r3, #214	@ 0xd6
 8000ae4:	460a      	mov	r2, r1
 8000ae6:	701a      	strb	r2, [r3, #0]
			state_i++;
 8000ae8:	4b74      	ldr	r3, [pc, #464]	@ (8000cbc <main+0x3b4>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	3301      	adds	r3, #1
 8000aee:	4a73      	ldr	r2, [pc, #460]	@ (8000cbc <main+0x3b4>)
 8000af0:	6013      	str	r3, [r2, #0]
			data[state_i][state_j].state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000af2:	4b72      	ldr	r3, [pc, #456]	@ (8000cbc <main+0x3b4>)
 8000af4:	681c      	ldr	r4, [r3, #0]
 8000af6:	4b72      	ldr	r3, [pc, #456]	@ (8000cc0 <main+0x3b8>)
 8000af8:	681d      	ldr	r5, [r3, #0]
 8000afa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000afe:	4869      	ldr	r0, [pc, #420]	@ (8000ca4 <main+0x39c>)
 8000b00:	f001 f992 	bl	8001e28 <HAL_GPIO_ReadPin>
 8000b04:	4603      	mov	r3, r0
 8000b06:	4619      	mov	r1, r3
 8000b08:	462a      	mov	r2, r5
 8000b0a:	0052      	lsls	r2, r2, #1
 8000b0c:	442a      	add	r2, r5
 8000b0e:	0093      	lsls	r3, r2, #2
 8000b10:	461a      	mov	r2, r3
 8000b12:	4623      	mov	r3, r4
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	4423      	add	r3, r4
 8000b18:	011b      	lsls	r3, r3, #4
 8000b1a:	4413      	add	r3, r2
 8000b1c:	33d8      	adds	r3, #216	@ 0xd8
 8000b1e:	443b      	add	r3, r7
 8000b20:	3bd6      	subs	r3, #214	@ 0xd6
 8000b22:	460a      	mov	r2, r1
 8000b24:	701a      	strb	r2, [r3, #0]
			state_i++;
 8000b26:	4b65      	ldr	r3, [pc, #404]	@ (8000cbc <main+0x3b4>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	4a63      	ldr	r2, [pc, #396]	@ (8000cbc <main+0x3b4>)
 8000b2e:	6013      	str	r3, [r2, #0]
			data[state_i][state_j].state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);
 8000b30:	4b62      	ldr	r3, [pc, #392]	@ (8000cbc <main+0x3b4>)
 8000b32:	681c      	ldr	r4, [r3, #0]
 8000b34:	4b62      	ldr	r3, [pc, #392]	@ (8000cc0 <main+0x3b8>)
 8000b36:	681d      	ldr	r5, [r3, #0]
 8000b38:	2104      	movs	r1, #4
 8000b3a:	485a      	ldr	r0, [pc, #360]	@ (8000ca4 <main+0x39c>)
 8000b3c:	f001 f974 	bl	8001e28 <HAL_GPIO_ReadPin>
 8000b40:	4603      	mov	r3, r0
 8000b42:	4619      	mov	r1, r3
 8000b44:	462a      	mov	r2, r5
 8000b46:	0052      	lsls	r2, r2, #1
 8000b48:	442a      	add	r2, r5
 8000b4a:	0093      	lsls	r3, r2, #2
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	4623      	mov	r3, r4
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	4423      	add	r3, r4
 8000b54:	011b      	lsls	r3, r3, #4
 8000b56:	4413      	add	r3, r2
 8000b58:	33d8      	adds	r3, #216	@ 0xd8
 8000b5a:	443b      	add	r3, r7
 8000b5c:	3bd6      	subs	r3, #214	@ 0xd6
 8000b5e:	460a      	mov	r2, r1
 8000b60:	701a      	strb	r2, [r3, #0]
			state_i++;
 8000b62:	4b56      	ldr	r3, [pc, #344]	@ (8000cbc <main+0x3b4>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	3301      	adds	r3, #1
 8000b68:	4a54      	ldr	r2, [pc, #336]	@ (8000cbc <main+0x3b4>)
 8000b6a:	6013      	str	r3, [r2, #0]
			data[state_i][state_j].state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3);
 8000b6c:	4b53      	ldr	r3, [pc, #332]	@ (8000cbc <main+0x3b4>)
 8000b6e:	681c      	ldr	r4, [r3, #0]
 8000b70:	4b53      	ldr	r3, [pc, #332]	@ (8000cc0 <main+0x3b8>)
 8000b72:	681d      	ldr	r5, [r3, #0]
 8000b74:	2108      	movs	r1, #8
 8000b76:	484b      	ldr	r0, [pc, #300]	@ (8000ca4 <main+0x39c>)
 8000b78:	f001 f956 	bl	8001e28 <HAL_GPIO_ReadPin>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	4619      	mov	r1, r3
 8000b80:	462a      	mov	r2, r5
 8000b82:	0052      	lsls	r2, r2, #1
 8000b84:	442a      	add	r2, r5
 8000b86:	0093      	lsls	r3, r2, #2
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4623      	mov	r3, r4
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	4423      	add	r3, r4
 8000b90:	011b      	lsls	r3, r3, #4
 8000b92:	4413      	add	r3, r2
 8000b94:	33d8      	adds	r3, #216	@ 0xd8
 8000b96:	443b      	add	r3, r7
 8000b98:	3bd6      	subs	r3, #214	@ 0xd6
 8000b9a:	460a      	mov	r2, r1
 8000b9c:	701a      	strb	r2, [r3, #0]
			state_i = 0;
 8000b9e:	4b47      	ldr	r3, [pc, #284]	@ (8000cbc <main+0x3b4>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, COLUMN_PIN[column], GPIO_PIN_RESET);
 8000ba4:	4b42      	ldr	r3, [pc, #264]	@ (8000cb0 <main+0x3a8>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a42      	ldr	r2, [pc, #264]	@ (8000cb4 <main+0x3ac>)
 8000baa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bae:	b29b      	uxth	r3, r3
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	483b      	ldr	r0, [pc, #236]	@ (8000ca4 <main+0x39c>)
 8000bb6:	f001 f94f 	bl	8001e58 <HAL_GPIO_WritePin>

			column++;
 8000bba:	4b3d      	ldr	r3, [pc, #244]	@ (8000cb0 <main+0x3a8>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	4a3b      	ldr	r2, [pc, #236]	@ (8000cb0 <main+0x3a8>)
 8000bc2:	6013      	str	r3, [r2, #0]
			if(column > 3) {
 8000bc4:	4b3a      	ldr	r3, [pc, #232]	@ (8000cb0 <main+0x3a8>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2b03      	cmp	r3, #3
 8000bca:	dd02      	ble.n	8000bd2 <main+0x2ca>
				column = 0;
 8000bcc:	4b38      	ldr	r3, [pc, #224]	@ (8000cb0 <main+0x3a8>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
			}

			state_j++;
 8000bd2:	4b3b      	ldr	r3, [pc, #236]	@ (8000cc0 <main+0x3b8>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	4a39      	ldr	r2, [pc, #228]	@ (8000cc0 <main+0x3b8>)
 8000bda:	6013      	str	r3, [r2, #0]
			if(state_j > 3) {
 8000bdc:	4b38      	ldr	r3, [pc, #224]	@ (8000cc0 <main+0x3b8>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2b03      	cmp	r3, #3
 8000be2:	dd02      	ble.n	8000bea <main+0x2e2>
				state_j = 0;
 8000be4:	4b36      	ldr	r3, [pc, #216]	@ (8000cc0 <main+0x3b8>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
			}

			for(int i = 0; i < 4; i++) {
 8000bea:	2300      	movs	r3, #0
 8000bec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000bf0:	e04b      	b.n	8000c8a <main+0x382>
				for(int j = 0; j < 4; j++) {
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8000bf8:	e03e      	b.n	8000c78 <main+0x370>
					if(data[i][j].state == GPIO_PIN_SET) {
 8000bfa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000bfe:	f8d7 10cc 	ldr.w	r1, [r7, #204]	@ 0xcc
 8000c02:	461a      	mov	r2, r3
 8000c04:	0052      	lsls	r2, r2, #1
 8000c06:	441a      	add	r2, r3
 8000c08:	0093      	lsls	r3, r2, #2
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	460b      	mov	r3, r1
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	440b      	add	r3, r1
 8000c12:	011b      	lsls	r3, r3, #4
 8000c14:	4413      	add	r3, r2
 8000c16:	33d8      	adds	r3, #216	@ 0xd8
 8000c18:	443b      	add	r3, r7
 8000c1a:	3bd6      	subs	r3, #214	@ 0xd6
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d125      	bne.n	8000c6e <main+0x366>
						data[i][j].pressed = 0;
 8000c22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000c26:	f8d7 10cc 	ldr.w	r1, [r7, #204]	@ 0xcc
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	0052      	lsls	r2, r2, #1
 8000c2e:	441a      	add	r2, r3
 8000c30:	0093      	lsls	r3, r2, #2
 8000c32:	461a      	mov	r2, r3
 8000c34:	460b      	mov	r3, r1
 8000c36:	005b      	lsls	r3, r3, #1
 8000c38:	440b      	add	r3, r1
 8000c3a:	011b      	lsls	r3, r3, #4
 8000c3c:	4413      	add	r3, r2
 8000c3e:	33d8      	adds	r3, #216	@ 0xd8
 8000c40:	443b      	add	r3, r7
 8000c42:	3bd4      	subs	r3, #212	@ 0xd4
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
						data[i][j].printed = 0;
 8000c48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000c4c:	f8d7 10cc 	ldr.w	r1, [r7, #204]	@ 0xcc
 8000c50:	461a      	mov	r2, r3
 8000c52:	0052      	lsls	r2, r2, #1
 8000c54:	441a      	add	r2, r3
 8000c56:	0093      	lsls	r3, r2, #2
 8000c58:	461a      	mov	r2, r3
 8000c5a:	460b      	mov	r3, r1
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	440b      	add	r3, r1
 8000c60:	011b      	lsls	r3, r3, #4
 8000c62:	4413      	add	r3, r2
 8000c64:	33d8      	adds	r3, #216	@ 0xd8
 8000c66:	443b      	add	r3, r7
 8000c68:	3bd0      	subs	r3, #208	@ 0xd0
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
				for(int j = 0; j < 4; j++) {
 8000c6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000c72:	3301      	adds	r3, #1
 8000c74:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8000c78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000c7c:	2b03      	cmp	r3, #3
 8000c7e:	ddbc      	ble.n	8000bfa <main+0x2f2>
			for(int i = 0; i < 4; i++) {
 8000c80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000c84:	3301      	adds	r3, #1
 8000c86:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000c8a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000c8e:	2b03      	cmp	r3, #3
 8000c90:	ddaf      	ble.n	8000bf2 <main+0x2ea>
					}
				}
			}

			for(int i = 0; i < 4; i++) {
 8000c92:	2300      	movs	r3, #0
 8000c94:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000c98:	e0fd      	b.n	8000e96 <main+0x58e>
				for(int j = 0; j < 4; j++) {
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8000ca0:	e0ef      	b.n	8000e82 <main+0x57a>
 8000ca2:	bf00      	nop
 8000ca4:	40020800 	.word	0x40020800
 8000ca8:	20000110 	.word	0x20000110
 8000cac:	20000158 	.word	0x20000158
 8000cb0:	200001f0 	.word	0x200001f0
 8000cb4:	20000000 	.word	0x20000000
 8000cb8:	200001e4 	.word	0x200001e4
 8000cbc:	200001e8 	.word	0x200001e8
 8000cc0:	200001ec 	.word	0x200001ec
					if(data[i][j].state == GPIO_PIN_RESET) {
 8000cc4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000cc8:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 8000ccc:	461a      	mov	r2, r3
 8000cce:	0052      	lsls	r2, r2, #1
 8000cd0:	441a      	add	r2, r3
 8000cd2:	0093      	lsls	r3, r2, #2
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	460b      	mov	r3, r1
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	440b      	add	r3, r1
 8000cdc:	011b      	lsls	r3, r3, #4
 8000cde:	4413      	add	r3, r2
 8000ce0:	33d8      	adds	r3, #216	@ 0xd8
 8000ce2:	443b      	add	r3, r7
 8000ce4:	3bd6      	subs	r3, #214	@ 0xd6
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d12a      	bne.n	8000d42 <main+0x43a>
						length = snprintf(message, 32, "%s ", data[i][j].value);
 8000cec:	4638      	mov	r0, r7
 8000cee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	0052      	lsls	r2, r2, #1
 8000cf6:	441a      	add	r2, r3
 8000cf8:	0093      	lsls	r3, r2, #2
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 8000d00:	460b      	mov	r3, r1
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	440b      	add	r3, r1
 8000d06:	011b      	lsls	r3, r3, #4
 8000d08:	4413      	add	r3, r2
 8000d0a:	4403      	add	r3, r0
 8000d0c:	4a65      	ldr	r2, [pc, #404]	@ (8000ea4 <main+0x59c>)
 8000d0e:	2120      	movs	r1, #32
 8000d10:	4865      	ldr	r0, [pc, #404]	@ (8000ea8 <main+0x5a0>)
 8000d12:	f003 fa8d 	bl	8004230 <sniprintf>
 8000d16:	4603      	mov	r3, r0
 8000d18:	4a64      	ldr	r2, [pc, #400]	@ (8000eac <main+0x5a4>)
 8000d1a:	6013      	str	r3, [r2, #0]
						data[i][j].pressed = 1;
 8000d1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000d20:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 8000d24:	461a      	mov	r2, r3
 8000d26:	0052      	lsls	r2, r2, #1
 8000d28:	441a      	add	r2, r3
 8000d2a:	0093      	lsls	r3, r2, #2
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	460b      	mov	r3, r1
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	440b      	add	r3, r1
 8000d34:	011b      	lsls	r3, r3, #4
 8000d36:	4413      	add	r3, r2
 8000d38:	33d8      	adds	r3, #216	@ 0xd8
 8000d3a:	443b      	add	r3, r7
 8000d3c:	3bd4      	subs	r3, #212	@ 0xd4
 8000d3e:	2201      	movs	r2, #1
 8000d40:	601a      	str	r2, [r3, #0]
					}

					if(data[i][j].pressed && !data[i][j].printed){
 8000d42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000d46:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	0052      	lsls	r2, r2, #1
 8000d4e:	441a      	add	r2, r3
 8000d50:	0093      	lsls	r3, r2, #2
 8000d52:	461a      	mov	r2, r3
 8000d54:	460b      	mov	r3, r1
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	440b      	add	r3, r1
 8000d5a:	011b      	lsls	r3, r3, #4
 8000d5c:	4413      	add	r3, r2
 8000d5e:	33d8      	adds	r3, #216	@ 0xd8
 8000d60:	443b      	add	r3, r7
 8000d62:	3bd4      	subs	r3, #212	@ 0xd4
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	f000 8086 	beq.w	8000e78 <main+0x570>
 8000d6c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000d70:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 8000d74:	461a      	mov	r2, r3
 8000d76:	0052      	lsls	r2, r2, #1
 8000d78:	441a      	add	r2, r3
 8000d7a:	0093      	lsls	r3, r2, #2
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	460b      	mov	r3, r1
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	440b      	add	r3, r1
 8000d84:	011b      	lsls	r3, r3, #4
 8000d86:	4413      	add	r3, r2
 8000d88:	33d8      	adds	r3, #216	@ 0xd8
 8000d8a:	443b      	add	r3, r7
 8000d8c:	3bd0      	subs	r3, #208	@ 0xd0
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d171      	bne.n	8000e78 <main+0x570>
						HAL_UART_Transmit(&huart2, message, length, 50);
 8000d94:	4b45      	ldr	r3, [pc, #276]	@ (8000eac <main+0x5a4>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	b29a      	uxth	r2, r3
 8000d9a:	2332      	movs	r3, #50	@ 0x32
 8000d9c:	4942      	ldr	r1, [pc, #264]	@ (8000ea8 <main+0x5a0>)
 8000d9e:	4844      	ldr	r0, [pc, #272]	@ (8000eb0 <main+0x5a8>)
 8000da0:	f002 fed1 	bl	8003b46 <HAL_UART_Transmit>
						data[i][j].printed = 1;
 8000da4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000da8:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 8000dac:	461a      	mov	r2, r3
 8000dae:	0052      	lsls	r2, r2, #1
 8000db0:	441a      	add	r2, r3
 8000db2:	0093      	lsls	r3, r2, #2
 8000db4:	461a      	mov	r2, r3
 8000db6:	460b      	mov	r3, r1
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	440b      	add	r3, r1
 8000dbc:	011b      	lsls	r3, r3, #4
 8000dbe:	4413      	add	r3, r2
 8000dc0:	33d8      	adds	r3, #216	@ 0xd8
 8000dc2:	443b      	add	r3, r7
 8000dc4:	3bd0      	subs	r3, #208	@ 0xd0
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	601a      	str	r2, [r3, #0]
						switch (data[i][j].value[0]){
 8000dca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000dce:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	0052      	lsls	r2, r2, #1
 8000dd6:	441a      	add	r2, r3
 8000dd8:	0093      	lsls	r3, r2, #2
 8000dda:	461a      	mov	r2, r3
 8000ddc:	460b      	mov	r3, r1
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	440b      	add	r3, r1
 8000de2:	011b      	lsls	r3, r3, #4
 8000de4:	4413      	add	r3, r2
 8000de6:	33d8      	adds	r3, #216	@ 0xd8
 8000de8:	443b      	add	r3, r7
 8000dea:	3bd8      	subs	r3, #216	@ 0xd8
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	3b30      	subs	r3, #48	@ 0x30
 8000df0:	2b16      	cmp	r3, #22
 8000df2:	d83d      	bhi.n	8000e70 <main+0x568>
 8000df4:	a201      	add	r2, pc, #4	@ (adr r2, 8000dfc <main+0x4f4>)
 8000df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dfa:	bf00      	nop
 8000dfc:	08000e59 	.word	0x08000e59
 8000e00:	08000e71 	.word	0x08000e71
 8000e04:	08000e71 	.word	0x08000e71
 8000e08:	08000e5f 	.word	0x08000e5f
 8000e0c:	08000e71 	.word	0x08000e71
 8000e10:	08000e71 	.word	0x08000e71
 8000e14:	08000e71 	.word	0x08000e71
 8000e18:	08000e71 	.word	0x08000e71
 8000e1c:	08000e71 	.word	0x08000e71
 8000e20:	08000e71 	.word	0x08000e71
 8000e24:	08000e71 	.word	0x08000e71
 8000e28:	08000e71 	.word	0x08000e71
 8000e2c:	08000e71 	.word	0x08000e71
 8000e30:	08000e71 	.word	0x08000e71
 8000e34:	08000e71 	.word	0x08000e71
 8000e38:	08000e71 	.word	0x08000e71
 8000e3c:	08000e71 	.word	0x08000e71
 8000e40:	08000e71 	.word	0x08000e71
 8000e44:	08000e71 	.word	0x08000e71
 8000e48:	08000e65 	.word	0x08000e65
 8000e4c:	08000e71 	.word	0x08000e71
 8000e50:	08000e71 	.word	0x08000e71
 8000e54:	08000e6b 	.word	0x08000e6b
							case '0': play_zero();
 8000e58:	f7ff fd06 	bl	8000868 <play_zero>
								break;
 8000e5c:	e00c      	b.n	8000e78 <main+0x570>
							case '3': play_three();
 8000e5e:	f7ff fd0f 	bl	8000880 <play_three>
								break;
 8000e62:	e009      	b.n	8000e78 <main+0x570>
							case 'C': play_c();
 8000e64:	f7ff fd18 	bl	8000898 <play_c>
								break;
 8000e68:	e006      	b.n	8000e78 <main+0x570>
							case 'F': play_f();
 8000e6a:	f7ff fd21 	bl	80008b0 <play_f>
								break;
 8000e6e:	e003      	b.n	8000e78 <main+0x570>
							default:
								HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_3);
 8000e70:	2108      	movs	r1, #8
 8000e72:	4810      	ldr	r0, [pc, #64]	@ (8000eb4 <main+0x5ac>)
 8000e74:	f001 fec2 	bl	8002bfc <HAL_TIM_PWM_Start_IT>
				for(int j = 0; j < 4; j++) {
 8000e78:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8000e82:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000e86:	2b03      	cmp	r3, #3
 8000e88:	f77f af1c 	ble.w	8000cc4 <main+0x3bc>
			for(int i = 0; i < 4; i++) {
 8000e8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000e90:	3301      	adds	r3, #1
 8000e92:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000e96:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000e9a:	2b03      	cmp	r3, #3
 8000e9c:	f77f aefd 	ble.w	8000c9a <main+0x392>
	  	HAL_GPIO_WritePin(GPIOC, COLUMN_PIN[column], GPIO_PIN_SET);
 8000ea0:	e5f6      	b.n	8000a90 <main+0x188>
 8000ea2:	bf00      	nop
 8000ea4:	08004be8 	.word	0x08004be8
 8000ea8:	200001f4 	.word	0x200001f4
 8000eac:	20000214 	.word	0x20000214
 8000eb0:	200001a0 	.word	0x200001a0
 8000eb4:	200000c8 	.word	0x200000c8

08000eb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b094      	sub	sp, #80	@ 0x50
 8000ebc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ebe:	f107 0320 	add.w	r3, r7, #32
 8000ec2:	2230      	movs	r2, #48	@ 0x30
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f003 f9e6 	bl	8004298 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ecc:	f107 030c 	add.w	r3, r7, #12
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000edc:	2300      	movs	r3, #0
 8000ede:	60bb      	str	r3, [r7, #8]
 8000ee0:	4b29      	ldr	r3, [pc, #164]	@ (8000f88 <SystemClock_Config+0xd0>)
 8000ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee4:	4a28      	ldr	r2, [pc, #160]	@ (8000f88 <SystemClock_Config+0xd0>)
 8000ee6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eea:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eec:	4b26      	ldr	r3, [pc, #152]	@ (8000f88 <SystemClock_Config+0xd0>)
 8000eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ef4:	60bb      	str	r3, [r7, #8]
 8000ef6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ef8:	2300      	movs	r3, #0
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	4b23      	ldr	r3, [pc, #140]	@ (8000f8c <SystemClock_Config+0xd4>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000f04:	4a21      	ldr	r2, [pc, #132]	@ (8000f8c <SystemClock_Config+0xd4>)
 8000f06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f0a:	6013      	str	r3, [r2, #0]
 8000f0c:	4b1f      	ldr	r3, [pc, #124]	@ (8000f8c <SystemClock_Config+0xd4>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f14:	607b      	str	r3, [r7, #4]
 8000f16:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f20:	2310      	movs	r3, #16
 8000f22:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f24:	2302      	movs	r3, #2
 8000f26:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f2c:	2310      	movs	r3, #16
 8000f2e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f30:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000f34:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f36:	2304      	movs	r3, #4
 8000f38:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f3a:	2307      	movs	r3, #7
 8000f3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f3e:	f107 0320 	add.w	r3, r7, #32
 8000f42:	4618      	mov	r0, r3
 8000f44:	f000 ffa2 	bl	8001e8c <HAL_RCC_OscConfig>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000f4e:	f000 fa15 	bl	800137c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f52:	230f      	movs	r3, #15
 8000f54:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f56:	2302      	movs	r3, #2
 8000f58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f62:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f64:	2300      	movs	r3, #0
 8000f66:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f68:	f107 030c 	add.w	r3, r7, #12
 8000f6c:	2102      	movs	r1, #2
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f001 fa04 	bl	800237c <HAL_RCC_ClockConfig>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000f7a:	f000 f9ff 	bl	800137c <Error_Handler>
  }
}
 8000f7e:	bf00      	nop
 8000f80:	3750      	adds	r7, #80	@ 0x50
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40007000 	.word	0x40007000

08000f90 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b096      	sub	sp, #88	@ 0x58
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f96:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fa4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
 8000fba:	60da      	str	r2, [r3, #12]
 8000fbc:	611a      	str	r2, [r3, #16]
 8000fbe:	615a      	str	r2, [r3, #20]
 8000fc0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	2220      	movs	r2, #32
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f003 f965 	bl	8004298 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fce:	4b3e      	ldr	r3, [pc, #248]	@ (80010c8 <MX_TIM1_Init+0x138>)
 8000fd0:	4a3e      	ldr	r2, [pc, #248]	@ (80010cc <MX_TIM1_Init+0x13c>)
 8000fd2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8400-1;
 8000fd4:	4b3c      	ldr	r3, [pc, #240]	@ (80010c8 <MX_TIM1_Init+0x138>)
 8000fd6:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000fda:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fdc:	4b3a      	ldr	r3, [pc, #232]	@ (80010c8 <MX_TIM1_Init+0x138>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10-1;
 8000fe2:	4b39      	ldr	r3, [pc, #228]	@ (80010c8 <MX_TIM1_Init+0x138>)
 8000fe4:	2209      	movs	r2, #9
 8000fe6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fe8:	4b37      	ldr	r3, [pc, #220]	@ (80010c8 <MX_TIM1_Init+0x138>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fee:	4b36      	ldr	r3, [pc, #216]	@ (80010c8 <MX_TIM1_Init+0x138>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff4:	4b34      	ldr	r3, [pc, #208]	@ (80010c8 <MX_TIM1_Init+0x138>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ffa:	4833      	ldr	r0, [pc, #204]	@ (80010c8 <MX_TIM1_Init+0x138>)
 8000ffc:	f001 fbde 	bl	80027bc <HAL_TIM_Base_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001006:	f000 f9b9 	bl	800137c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800100a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800100e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001010:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001014:	4619      	mov	r1, r3
 8001016:	482c      	ldr	r0, [pc, #176]	@ (80010c8 <MX_TIM1_Init+0x138>)
 8001018:	f002 f8b8 	bl	800318c <HAL_TIM_ConfigClockSource>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001022:	f000 f9ab 	bl	800137c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001026:	4828      	ldr	r0, [pc, #160]	@ (80010c8 <MX_TIM1_Init+0x138>)
 8001028:	f001 fc7a 	bl	8002920 <HAL_TIM_PWM_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001032:	f000 f9a3 	bl	800137c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001036:	2320      	movs	r3, #32
 8001038:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800103a:	2300      	movs	r3, #0
 800103c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800103e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001042:	4619      	mov	r1, r3
 8001044:	4820      	ldr	r0, [pc, #128]	@ (80010c8 <MX_TIM1_Init+0x138>)
 8001046:	f002 fc5d 	bl	8003904 <HAL_TIMEx_MasterConfigSynchronization>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001050:	f000 f994 	bl	800137c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001054:	2360      	movs	r3, #96	@ 0x60
 8001056:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001058:	2300      	movs	r3, #0
 800105a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800105c:	2300      	movs	r3, #0
 800105e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001060:	2300      	movs	r3, #0
 8001062:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001064:	2300      	movs	r3, #0
 8001066:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001068:	2300      	movs	r3, #0
 800106a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800106c:	2300      	movs	r3, #0
 800106e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001070:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001074:	2204      	movs	r2, #4
 8001076:	4619      	mov	r1, r3
 8001078:	4813      	ldr	r0, [pc, #76]	@ (80010c8 <MX_TIM1_Init+0x138>)
 800107a:	f001 ffc5 	bl	8003008 <HAL_TIM_PWM_ConfigChannel>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001084:	f000 f97a 	bl	800137c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001088:	2300      	movs	r3, #0
 800108a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800108c:	2300      	movs	r3, #0
 800108e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001090:	2300      	movs	r3, #0
 8001092:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800109c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010a0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010a2:	2300      	movs	r3, #0
 80010a4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010a6:	1d3b      	adds	r3, r7, #4
 80010a8:	4619      	mov	r1, r3
 80010aa:	4807      	ldr	r0, [pc, #28]	@ (80010c8 <MX_TIM1_Init+0x138>)
 80010ac:	f002 fc98 	bl	80039e0 <HAL_TIMEx_ConfigBreakDeadTime>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80010b6:	f000 f961 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010ba:	4803      	ldr	r0, [pc, #12]	@ (80010c8 <MX_TIM1_Init+0x138>)
 80010bc:	f000 fa16 	bl	80014ec <HAL_TIM_MspPostInit>

}
 80010c0:	bf00      	nop
 80010c2:	3758      	adds	r7, #88	@ 0x58
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20000080 	.word	0x20000080
 80010cc:	40010000 	.word	0x40010000

080010d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08e      	sub	sp, #56	@ 0x38
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	609a      	str	r2, [r3, #8]
 80010e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e4:	f107 0320 	add.w	r3, r7, #32
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010ee:	1d3b      	adds	r3, r7, #4
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
 80010fc:	615a      	str	r2, [r3, #20]
 80010fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001100:	4b2c      	ldr	r3, [pc, #176]	@ (80011b4 <MX_TIM3_Init+0xe4>)
 8001102:	4a2d      	ldr	r2, [pc, #180]	@ (80011b8 <MX_TIM3_Init+0xe8>)
 8001104:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000-1;
 8001106:	4b2b      	ldr	r3, [pc, #172]	@ (80011b4 <MX_TIM3_Init+0xe4>)
 8001108:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800110c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800110e:	4b29      	ldr	r3, [pc, #164]	@ (80011b4 <MX_TIM3_Init+0xe4>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 197-1;
 8001114:	4b27      	ldr	r3, [pc, #156]	@ (80011b4 <MX_TIM3_Init+0xe4>)
 8001116:	22c4      	movs	r2, #196	@ 0xc4
 8001118:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800111a:	4b26      	ldr	r3, [pc, #152]	@ (80011b4 <MX_TIM3_Init+0xe4>)
 800111c:	2200      	movs	r2, #0
 800111e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001120:	4b24      	ldr	r3, [pc, #144]	@ (80011b4 <MX_TIM3_Init+0xe4>)
 8001122:	2200      	movs	r2, #0
 8001124:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001126:	4823      	ldr	r0, [pc, #140]	@ (80011b4 <MX_TIM3_Init+0xe4>)
 8001128:	f001 fb48 	bl	80027bc <HAL_TIM_Base_Init>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001132:	f000 f923 	bl	800137c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001136:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800113a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800113c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001140:	4619      	mov	r1, r3
 8001142:	481c      	ldr	r0, [pc, #112]	@ (80011b4 <MX_TIM3_Init+0xe4>)
 8001144:	f002 f822 	bl	800318c <HAL_TIM_ConfigClockSource>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800114e:	f000 f915 	bl	800137c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001152:	4818      	ldr	r0, [pc, #96]	@ (80011b4 <MX_TIM3_Init+0xe4>)
 8001154:	f001 fbe4 	bl	8002920 <HAL_TIM_PWM_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800115e:	f000 f90d 	bl	800137c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001162:	2300      	movs	r3, #0
 8001164:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001166:	2300      	movs	r3, #0
 8001168:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800116a:	f107 0320 	add.w	r3, r7, #32
 800116e:	4619      	mov	r1, r3
 8001170:	4810      	ldr	r0, [pc, #64]	@ (80011b4 <MX_TIM3_Init+0xe4>)
 8001172:	f002 fbc7 	bl	8003904 <HAL_TIMEx_MasterConfigSynchronization>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800117c:	f000 f8fe 	bl	800137c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001180:	2360      	movs	r3, #96	@ 0x60
 8001182:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 95;
 8001184:	235f      	movs	r3, #95	@ 0x5f
 8001186:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001188:	2300      	movs	r3, #0
 800118a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001190:	1d3b      	adds	r3, r7, #4
 8001192:	2208      	movs	r2, #8
 8001194:	4619      	mov	r1, r3
 8001196:	4807      	ldr	r0, [pc, #28]	@ (80011b4 <MX_TIM3_Init+0xe4>)
 8001198:	f001 ff36 	bl	8003008 <HAL_TIM_PWM_ConfigChannel>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80011a2:	f000 f8eb 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80011a6:	4803      	ldr	r0, [pc, #12]	@ (80011b4 <MX_TIM3_Init+0xe4>)
 80011a8:	f000 f9a0 	bl	80014ec <HAL_TIM_MspPostInit>

}
 80011ac:	bf00      	nop
 80011ae:	3738      	adds	r7, #56	@ 0x38
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	200000c8 	.word	0x200000c8
 80011b8:	40000400 	.word	0x40000400

080011bc <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80011c0:	4b0e      	ldr	r3, [pc, #56]	@ (80011fc <MX_TIM10_Init+0x40>)
 80011c2:	4a0f      	ldr	r2, [pc, #60]	@ (8001200 <MX_TIM10_Init+0x44>)
 80011c4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 8400-1;
 80011c6:	4b0d      	ldr	r3, [pc, #52]	@ (80011fc <MX_TIM10_Init+0x40>)
 80011c8:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80011cc:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ce:	4b0b      	ldr	r3, [pc, #44]	@ (80011fc <MX_TIM10_Init+0x40>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10-1;
 80011d4:	4b09      	ldr	r3, [pc, #36]	@ (80011fc <MX_TIM10_Init+0x40>)
 80011d6:	2209      	movs	r2, #9
 80011d8:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011da:	4b08      	ldr	r3, [pc, #32]	@ (80011fc <MX_TIM10_Init+0x40>)
 80011dc:	2200      	movs	r2, #0
 80011de:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e0:	4b06      	ldr	r3, [pc, #24]	@ (80011fc <MX_TIM10_Init+0x40>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80011e6:	4805      	ldr	r0, [pc, #20]	@ (80011fc <MX_TIM10_Init+0x40>)
 80011e8:	f001 fae8 	bl	80027bc <HAL_TIM_Base_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80011f2:	f000 f8c3 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000110 	.word	0x20000110
 8001200:	40014400 	.word	0x40014400

08001204 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001208:	4b0e      	ldr	r3, [pc, #56]	@ (8001244 <MX_TIM11_Init+0x40>)
 800120a:	4a0f      	ldr	r2, [pc, #60]	@ (8001248 <MX_TIM11_Init+0x44>)
 800120c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 8400-1;
 800120e:	4b0d      	ldr	r3, [pc, #52]	@ (8001244 <MX_TIM11_Init+0x40>)
 8001210:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001214:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001216:	4b0b      	ldr	r3, [pc, #44]	@ (8001244 <MX_TIM11_Init+0x40>)
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 5000-1;
 800121c:	4b09      	ldr	r3, [pc, #36]	@ (8001244 <MX_TIM11_Init+0x40>)
 800121e:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001222:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001224:	4b07      	ldr	r3, [pc, #28]	@ (8001244 <MX_TIM11_Init+0x40>)
 8001226:	2200      	movs	r2, #0
 8001228:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800122a:	4b06      	ldr	r3, [pc, #24]	@ (8001244 <MX_TIM11_Init+0x40>)
 800122c:	2200      	movs	r2, #0
 800122e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001230:	4804      	ldr	r0, [pc, #16]	@ (8001244 <MX_TIM11_Init+0x40>)
 8001232:	f001 fac3 	bl	80027bc <HAL_TIM_Base_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 800123c:	f000 f89e 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20000158 	.word	0x20000158
 8001248:	40014800 	.word	0x40014800

0800124c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001250:	4b11      	ldr	r3, [pc, #68]	@ (8001298 <MX_USART2_UART_Init+0x4c>)
 8001252:	4a12      	ldr	r2, [pc, #72]	@ (800129c <MX_USART2_UART_Init+0x50>)
 8001254:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001256:	4b10      	ldr	r3, [pc, #64]	@ (8001298 <MX_USART2_UART_Init+0x4c>)
 8001258:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800125c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800125e:	4b0e      	ldr	r3, [pc, #56]	@ (8001298 <MX_USART2_UART_Init+0x4c>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001264:	4b0c      	ldr	r3, [pc, #48]	@ (8001298 <MX_USART2_UART_Init+0x4c>)
 8001266:	2200      	movs	r2, #0
 8001268:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800126a:	4b0b      	ldr	r3, [pc, #44]	@ (8001298 <MX_USART2_UART_Init+0x4c>)
 800126c:	2200      	movs	r2, #0
 800126e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001270:	4b09      	ldr	r3, [pc, #36]	@ (8001298 <MX_USART2_UART_Init+0x4c>)
 8001272:	220c      	movs	r2, #12
 8001274:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001276:	4b08      	ldr	r3, [pc, #32]	@ (8001298 <MX_USART2_UART_Init+0x4c>)
 8001278:	2200      	movs	r2, #0
 800127a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800127c:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <MX_USART2_UART_Init+0x4c>)
 800127e:	2200      	movs	r2, #0
 8001280:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001282:	4805      	ldr	r0, [pc, #20]	@ (8001298 <MX_USART2_UART_Init+0x4c>)
 8001284:	f002 fc12 	bl	8003aac <HAL_UART_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800128e:	f000 f875 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	200001a0 	.word	0x200001a0
 800129c:	40004400 	.word	0x40004400

080012a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08a      	sub	sp, #40	@ 0x28
 80012a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a6:	f107 0314 	add.w	r3, r7, #20
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
 80012b2:	60da      	str	r2, [r3, #12]
 80012b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	613b      	str	r3, [r7, #16]
 80012ba:	4b2e      	ldr	r3, [pc, #184]	@ (8001374 <MX_GPIO_Init+0xd4>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012be:	4a2d      	ldr	r2, [pc, #180]	@ (8001374 <MX_GPIO_Init+0xd4>)
 80012c0:	f043 0304 	orr.w	r3, r3, #4
 80012c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001374 <MX_GPIO_Init+0xd4>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ca:	f003 0304 	and.w	r3, r3, #4
 80012ce:	613b      	str	r3, [r7, #16]
 80012d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	4b27      	ldr	r3, [pc, #156]	@ (8001374 <MX_GPIO_Init+0xd4>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012da:	4a26      	ldr	r2, [pc, #152]	@ (8001374 <MX_GPIO_Init+0xd4>)
 80012dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012e2:	4b24      	ldr	r3, [pc, #144]	@ (8001374 <MX_GPIO_Init+0xd4>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]
 80012f2:	4b20      	ldr	r3, [pc, #128]	@ (8001374 <MX_GPIO_Init+0xd4>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f6:	4a1f      	ldr	r2, [pc, #124]	@ (8001374 <MX_GPIO_Init+0xd4>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001374 <MX_GPIO_Init+0xd4>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	607b      	str	r3, [r7, #4]
 800130e:	4b19      	ldr	r3, [pc, #100]	@ (8001374 <MX_GPIO_Init+0xd4>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001312:	4a18      	ldr	r2, [pc, #96]	@ (8001374 <MX_GPIO_Init+0xd4>)
 8001314:	f043 0302 	orr.w	r3, r3, #2
 8001318:	6313      	str	r3, [r2, #48]	@ 0x30
 800131a:	4b16      	ldr	r3, [pc, #88]	@ (8001374 <MX_GPIO_Init+0xd4>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8001326:	2200      	movs	r2, #0
 8001328:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 800132c:	4812      	ldr	r0, [pc, #72]	@ (8001378 <MX_GPIO_Init+0xd8>)
 800132e:	f000 fd93 	bl	8001e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_12;
 8001332:	f243 030c 	movw	r3, #12300	@ 0x300c
 8001336:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001338:	2300      	movs	r3, #0
 800133a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	4619      	mov	r1, r3
 8001346:	480c      	ldr	r0, [pc, #48]	@ (8001378 <MX_GPIO_Init+0xd8>)
 8001348:	f000 fbea 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800134c:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001350:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001352:	2301      	movs	r3, #1
 8001354:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135a:	2300      	movs	r3, #0
 800135c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	4619      	mov	r1, r3
 8001364:	4804      	ldr	r0, [pc, #16]	@ (8001378 <MX_GPIO_Init+0xd8>)
 8001366:	f000 fbdb 	bl	8001b20 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800136a:	bf00      	nop
 800136c:	3728      	adds	r7, #40	@ 0x28
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40023800 	.word	0x40023800
 8001378:	40020800 	.word	0x40020800

0800137c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001380:	b672      	cpsid	i
}
 8001382:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001384:	bf00      	nop
 8001386:	e7fd      	b.n	8001384 <Error_Handler+0x8>

08001388 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	607b      	str	r3, [r7, #4]
 8001392:	4b10      	ldr	r3, [pc, #64]	@ (80013d4 <HAL_MspInit+0x4c>)
 8001394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001396:	4a0f      	ldr	r2, [pc, #60]	@ (80013d4 <HAL_MspInit+0x4c>)
 8001398:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800139c:	6453      	str	r3, [r2, #68]	@ 0x44
 800139e:	4b0d      	ldr	r3, [pc, #52]	@ (80013d4 <HAL_MspInit+0x4c>)
 80013a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013a6:	607b      	str	r3, [r7, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	603b      	str	r3, [r7, #0]
 80013ae:	4b09      	ldr	r3, [pc, #36]	@ (80013d4 <HAL_MspInit+0x4c>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b2:	4a08      	ldr	r2, [pc, #32]	@ (80013d4 <HAL_MspInit+0x4c>)
 80013b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ba:	4b06      	ldr	r3, [pc, #24]	@ (80013d4 <HAL_MspInit+0x4c>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013c2:	603b      	str	r3, [r7, #0]
 80013c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013c6:	2007      	movs	r0, #7
 80013c8:	f000 fb68 	bl	8001a9c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013cc:	bf00      	nop
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40023800 	.word	0x40023800

080013d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a3c      	ldr	r2, [pc, #240]	@ (80014d8 <HAL_TIM_Base_MspInit+0x100>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d11e      	bne.n	8001428 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	617b      	str	r3, [r7, #20]
 80013ee:	4b3b      	ldr	r3, [pc, #236]	@ (80014dc <HAL_TIM_Base_MspInit+0x104>)
 80013f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f2:	4a3a      	ldr	r2, [pc, #232]	@ (80014dc <HAL_TIM_Base_MspInit+0x104>)
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80013fa:	4b38      	ldr	r3, [pc, #224]	@ (80014dc <HAL_TIM_Base_MspInit+0x104>)
 80013fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	617b      	str	r3, [r7, #20]
 8001404:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001406:	2200      	movs	r2, #0
 8001408:	2100      	movs	r1, #0
 800140a:	2019      	movs	r0, #25
 800140c:	f000 fb51 	bl	8001ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001410:	2019      	movs	r0, #25
 8001412:	f000 fb6a 	bl	8001aea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001416:	2200      	movs	r2, #0
 8001418:	2100      	movs	r1, #0
 800141a:	201a      	movs	r0, #26
 800141c:	f000 fb49 	bl	8001ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001420:	201a      	movs	r0, #26
 8001422:	f000 fb62 	bl	8001aea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001426:	e052      	b.n	80014ce <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM3)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a2c      	ldr	r2, [pc, #176]	@ (80014e0 <HAL_TIM_Base_MspInit+0x108>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d116      	bne.n	8001460 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	613b      	str	r3, [r7, #16]
 8001436:	4b29      	ldr	r3, [pc, #164]	@ (80014dc <HAL_TIM_Base_MspInit+0x104>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800143a:	4a28      	ldr	r2, [pc, #160]	@ (80014dc <HAL_TIM_Base_MspInit+0x104>)
 800143c:	f043 0302 	orr.w	r3, r3, #2
 8001440:	6413      	str	r3, [r2, #64]	@ 0x40
 8001442:	4b26      	ldr	r3, [pc, #152]	@ (80014dc <HAL_TIM_Base_MspInit+0x104>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	613b      	str	r3, [r7, #16]
 800144c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800144e:	2200      	movs	r2, #0
 8001450:	2100      	movs	r1, #0
 8001452:	201d      	movs	r0, #29
 8001454:	f000 fb2d 	bl	8001ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001458:	201d      	movs	r0, #29
 800145a:	f000 fb46 	bl	8001aea <HAL_NVIC_EnableIRQ>
}
 800145e:	e036      	b.n	80014ce <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM10)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a1f      	ldr	r2, [pc, #124]	@ (80014e4 <HAL_TIM_Base_MspInit+0x10c>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d116      	bne.n	8001498 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	4b1b      	ldr	r3, [pc, #108]	@ (80014dc <HAL_TIM_Base_MspInit+0x104>)
 8001470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001472:	4a1a      	ldr	r2, [pc, #104]	@ (80014dc <HAL_TIM_Base_MspInit+0x104>)
 8001474:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001478:	6453      	str	r3, [r2, #68]	@ 0x44
 800147a:	4b18      	ldr	r3, [pc, #96]	@ (80014dc <HAL_TIM_Base_MspInit+0x104>)
 800147c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800147e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001486:	2200      	movs	r2, #0
 8001488:	2100      	movs	r1, #0
 800148a:	2019      	movs	r0, #25
 800148c:	f000 fb11 	bl	8001ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001490:	2019      	movs	r0, #25
 8001492:	f000 fb2a 	bl	8001aea <HAL_NVIC_EnableIRQ>
}
 8001496:	e01a      	b.n	80014ce <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM11)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a12      	ldr	r2, [pc, #72]	@ (80014e8 <HAL_TIM_Base_MspInit+0x110>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d115      	bne.n	80014ce <HAL_TIM_Base_MspInit+0xf6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	60bb      	str	r3, [r7, #8]
 80014a6:	4b0d      	ldr	r3, [pc, #52]	@ (80014dc <HAL_TIM_Base_MspInit+0x104>)
 80014a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014aa:	4a0c      	ldr	r2, [pc, #48]	@ (80014dc <HAL_TIM_Base_MspInit+0x104>)
 80014ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014b2:	4b0a      	ldr	r3, [pc, #40]	@ (80014dc <HAL_TIM_Base_MspInit+0x104>)
 80014b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80014be:	2200      	movs	r2, #0
 80014c0:	2100      	movs	r1, #0
 80014c2:	201a      	movs	r0, #26
 80014c4:	f000 faf5 	bl	8001ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80014c8:	201a      	movs	r0, #26
 80014ca:	f000 fb0e 	bl	8001aea <HAL_NVIC_EnableIRQ>
}
 80014ce:	bf00      	nop
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40010000 	.word	0x40010000
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40000400 	.word	0x40000400
 80014e4:	40014400 	.word	0x40014400
 80014e8:	40014800 	.word	0x40014800

080014ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08a      	sub	sp, #40	@ 0x28
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a24      	ldr	r2, [pc, #144]	@ (800159c <HAL_TIM_MspPostInit+0xb0>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d11f      	bne.n	800154e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	613b      	str	r3, [r7, #16]
 8001512:	4b23      	ldr	r3, [pc, #140]	@ (80015a0 <HAL_TIM_MspPostInit+0xb4>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001516:	4a22      	ldr	r2, [pc, #136]	@ (80015a0 <HAL_TIM_MspPostInit+0xb4>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	6313      	str	r3, [r2, #48]	@ 0x30
 800151e:	4b20      	ldr	r3, [pc, #128]	@ (80015a0 <HAL_TIM_MspPostInit+0xb4>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	613b      	str	r3, [r7, #16]
 8001528:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800152a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800152e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001530:	2302      	movs	r3, #2
 8001532:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001538:	2300      	movs	r3, #0
 800153a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800153c:	2301      	movs	r3, #1
 800153e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	4619      	mov	r1, r3
 8001546:	4817      	ldr	r0, [pc, #92]	@ (80015a4 <HAL_TIM_MspPostInit+0xb8>)
 8001548:	f000 faea 	bl	8001b20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800154c:	e022      	b.n	8001594 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a15      	ldr	r2, [pc, #84]	@ (80015a8 <HAL_TIM_MspPostInit+0xbc>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d11d      	bne.n	8001594 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001558:	2300      	movs	r3, #0
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	4b10      	ldr	r3, [pc, #64]	@ (80015a0 <HAL_TIM_MspPostInit+0xb4>)
 800155e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001560:	4a0f      	ldr	r2, [pc, #60]	@ (80015a0 <HAL_TIM_MspPostInit+0xb4>)
 8001562:	f043 0302 	orr.w	r3, r3, #2
 8001566:	6313      	str	r3, [r2, #48]	@ 0x30
 8001568:	4b0d      	ldr	r3, [pc, #52]	@ (80015a0 <HAL_TIM_MspPostInit+0xb4>)
 800156a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001574:	2301      	movs	r3, #1
 8001576:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001578:	2302      	movs	r3, #2
 800157a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001580:	2300      	movs	r3, #0
 8001582:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001584:	2302      	movs	r3, #2
 8001586:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	4619      	mov	r1, r3
 800158e:	4807      	ldr	r0, [pc, #28]	@ (80015ac <HAL_TIM_MspPostInit+0xc0>)
 8001590:	f000 fac6 	bl	8001b20 <HAL_GPIO_Init>
}
 8001594:	bf00      	nop
 8001596:	3728      	adds	r7, #40	@ 0x28
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40010000 	.word	0x40010000
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40020000 	.word	0x40020000
 80015a8:	40000400 	.word	0x40000400
 80015ac:	40020400 	.word	0x40020400

080015b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08a      	sub	sp, #40	@ 0x28
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a19      	ldr	r2, [pc, #100]	@ (8001634 <HAL_UART_MspInit+0x84>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d12b      	bne.n	800162a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	613b      	str	r3, [r7, #16]
 80015d6:	4b18      	ldr	r3, [pc, #96]	@ (8001638 <HAL_UART_MspInit+0x88>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015da:	4a17      	ldr	r2, [pc, #92]	@ (8001638 <HAL_UART_MspInit+0x88>)
 80015dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80015e2:	4b15      	ldr	r3, [pc, #84]	@ (8001638 <HAL_UART_MspInit+0x88>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ea:	613b      	str	r3, [r7, #16]
 80015ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	4b11      	ldr	r3, [pc, #68]	@ (8001638 <HAL_UART_MspInit+0x88>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f6:	4a10      	ldr	r2, [pc, #64]	@ (8001638 <HAL_UART_MspInit+0x88>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001638 <HAL_UART_MspInit+0x88>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800160a:	230c      	movs	r3, #12
 800160c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160e:	2302      	movs	r3, #2
 8001610:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001616:	2300      	movs	r3, #0
 8001618:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800161a:	2307      	movs	r3, #7
 800161c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161e:	f107 0314 	add.w	r3, r7, #20
 8001622:	4619      	mov	r1, r3
 8001624:	4805      	ldr	r0, [pc, #20]	@ (800163c <HAL_UART_MspInit+0x8c>)
 8001626:	f000 fa7b 	bl	8001b20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800162a:	bf00      	nop
 800162c:	3728      	adds	r7, #40	@ 0x28
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40004400 	.word	0x40004400
 8001638:	40023800 	.word	0x40023800
 800163c:	40020000 	.word	0x40020000

08001640 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001644:	bf00      	nop
 8001646:	e7fd      	b.n	8001644 <NMI_Handler+0x4>

08001648 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800164c:	bf00      	nop
 800164e:	e7fd      	b.n	800164c <HardFault_Handler+0x4>

08001650 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001654:	bf00      	nop
 8001656:	e7fd      	b.n	8001654 <MemManage_Handler+0x4>

08001658 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800165c:	bf00      	nop
 800165e:	e7fd      	b.n	800165c <BusFault_Handler+0x4>

08001660 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001664:	bf00      	nop
 8001666:	e7fd      	b.n	8001664 <UsageFault_Handler+0x4>

08001668 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001696:	f000 f8ed 	bl	8001874 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
	...

080016a0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016a4:	4803      	ldr	r0, [pc, #12]	@ (80016b4 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80016a6:	f001 fba7 	bl	8002df8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80016aa:	4803      	ldr	r0, [pc, #12]	@ (80016b8 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80016ac:	f001 fba4 	bl	8002df8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80016b0:	bf00      	nop
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20000080 	.word	0x20000080
 80016b8:	20000110 	.word	0x20000110

080016bc <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016c0:	4803      	ldr	r0, [pc, #12]	@ (80016d0 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80016c2:	f001 fb99 	bl	8002df8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80016c6:	4803      	ldr	r0, [pc, #12]	@ (80016d4 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80016c8:	f001 fb96 	bl	8002df8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80016cc:	bf00      	nop
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20000080 	.word	0x20000080
 80016d4:	20000158 	.word	0x20000158

080016d8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80016dc:	4802      	ldr	r0, [pc, #8]	@ (80016e8 <TIM3_IRQHandler+0x10>)
 80016de:	f001 fb8b 	bl	8002df8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	200000c8 	.word	0x200000c8

080016ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016f4:	4a14      	ldr	r2, [pc, #80]	@ (8001748 <_sbrk+0x5c>)
 80016f6:	4b15      	ldr	r3, [pc, #84]	@ (800174c <_sbrk+0x60>)
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001700:	4b13      	ldr	r3, [pc, #76]	@ (8001750 <_sbrk+0x64>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d102      	bne.n	800170e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001708:	4b11      	ldr	r3, [pc, #68]	@ (8001750 <_sbrk+0x64>)
 800170a:	4a12      	ldr	r2, [pc, #72]	@ (8001754 <_sbrk+0x68>)
 800170c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800170e:	4b10      	ldr	r3, [pc, #64]	@ (8001750 <_sbrk+0x64>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4413      	add	r3, r2
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	429a      	cmp	r2, r3
 800171a:	d207      	bcs.n	800172c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800171c:	f002 fdc4 	bl	80042a8 <__errno>
 8001720:	4603      	mov	r3, r0
 8001722:	220c      	movs	r2, #12
 8001724:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001726:	f04f 33ff 	mov.w	r3, #4294967295
 800172a:	e009      	b.n	8001740 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800172c:	4b08      	ldr	r3, [pc, #32]	@ (8001750 <_sbrk+0x64>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001732:	4b07      	ldr	r3, [pc, #28]	@ (8001750 <_sbrk+0x64>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4413      	add	r3, r2
 800173a:	4a05      	ldr	r2, [pc, #20]	@ (8001750 <_sbrk+0x64>)
 800173c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800173e:	68fb      	ldr	r3, [r7, #12]
}
 8001740:	4618      	mov	r0, r3
 8001742:	3718      	adds	r7, #24
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20018000 	.word	0x20018000
 800174c:	00000400 	.word	0x00000400
 8001750:	20000218 	.word	0x20000218
 8001754:	20000368 	.word	0x20000368

08001758 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800175c:	4b06      	ldr	r3, [pc, #24]	@ (8001778 <SystemInit+0x20>)
 800175e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001762:	4a05      	ldr	r2, [pc, #20]	@ (8001778 <SystemInit+0x20>)
 8001764:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001768:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800177c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001780:	480d      	ldr	r0, [pc, #52]	@ (80017b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001782:	490e      	ldr	r1, [pc, #56]	@ (80017bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001784:	4a0e      	ldr	r2, [pc, #56]	@ (80017c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001786:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001788:	e002      	b.n	8001790 <LoopCopyDataInit>

0800178a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800178a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800178c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800178e:	3304      	adds	r3, #4

08001790 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001790:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001792:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001794:	d3f9      	bcc.n	800178a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001796:	4a0b      	ldr	r2, [pc, #44]	@ (80017c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001798:	4c0b      	ldr	r4, [pc, #44]	@ (80017c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800179a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800179c:	e001      	b.n	80017a2 <LoopFillZerobss>

0800179e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800179e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017a0:	3204      	adds	r2, #4

080017a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017a4:	d3fb      	bcc.n	800179e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017a6:	f7ff ffd7 	bl	8001758 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017aa:	f002 fd83 	bl	80042b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ae:	f7ff f8ab 	bl	8000908 <main>
  bx  lr    
 80017b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80017b4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80017b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017bc:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80017c0:	08004c48 	.word	0x08004c48
  ldr r2, =_sbss
 80017c4:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80017c8:	20000368 	.word	0x20000368

080017cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017cc:	e7fe      	b.n	80017cc <ADC_IRQHandler>
	...

080017d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001810 <HAL_Init+0x40>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001810 <HAL_Init+0x40>)
 80017da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001810 <HAL_Init+0x40>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001810 <HAL_Init+0x40>)
 80017e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017ec:	4b08      	ldr	r3, [pc, #32]	@ (8001810 <HAL_Init+0x40>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a07      	ldr	r2, [pc, #28]	@ (8001810 <HAL_Init+0x40>)
 80017f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017f8:	2003      	movs	r0, #3
 80017fa:	f000 f94f 	bl	8001a9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017fe:	2000      	movs	r0, #0
 8001800:	f000 f808 	bl	8001814 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001804:	f7ff fdc0 	bl	8001388 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40023c00 	.word	0x40023c00

08001814 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800181c:	4b12      	ldr	r3, [pc, #72]	@ (8001868 <HAL_InitTick+0x54>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	4b12      	ldr	r3, [pc, #72]	@ (800186c <HAL_InitTick+0x58>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	4619      	mov	r1, r3
 8001826:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800182a:	fbb3 f3f1 	udiv	r3, r3, r1
 800182e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001832:	4618      	mov	r0, r3
 8001834:	f000 f967 	bl	8001b06 <HAL_SYSTICK_Config>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e00e      	b.n	8001860 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2b0f      	cmp	r3, #15
 8001846:	d80a      	bhi.n	800185e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001848:	2200      	movs	r2, #0
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	f04f 30ff 	mov.w	r0, #4294967295
 8001850:	f000 f92f 	bl	8001ab2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001854:	4a06      	ldr	r2, [pc, #24]	@ (8001870 <HAL_InitTick+0x5c>)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800185a:	2300      	movs	r3, #0
 800185c:	e000      	b.n	8001860 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
}
 8001860:	4618      	mov	r0, r3
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20000008 	.word	0x20000008
 800186c:	20000010 	.word	0x20000010
 8001870:	2000000c 	.word	0x2000000c

08001874 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001878:	4b06      	ldr	r3, [pc, #24]	@ (8001894 <HAL_IncTick+0x20>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	461a      	mov	r2, r3
 800187e:	4b06      	ldr	r3, [pc, #24]	@ (8001898 <HAL_IncTick+0x24>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4413      	add	r3, r2
 8001884:	4a04      	ldr	r2, [pc, #16]	@ (8001898 <HAL_IncTick+0x24>)
 8001886:	6013      	str	r3, [r2, #0]
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	20000010 	.word	0x20000010
 8001898:	2000021c 	.word	0x2000021c

0800189c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  return uwTick;
 80018a0:	4b03      	ldr	r3, [pc, #12]	@ (80018b0 <HAL_GetTick+0x14>)
 80018a2:	681b      	ldr	r3, [r3, #0]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	2000021c 	.word	0x2000021c

080018b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018bc:	f7ff ffee 	bl	800189c <HAL_GetTick>
 80018c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018cc:	d005      	beq.n	80018da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ce:	4b0a      	ldr	r3, [pc, #40]	@ (80018f8 <HAL_Delay+0x44>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	461a      	mov	r2, r3
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	4413      	add	r3, r2
 80018d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018da:	bf00      	nop
 80018dc:	f7ff ffde 	bl	800189c <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d8f7      	bhi.n	80018dc <HAL_Delay+0x28>
  {
  }
}
 80018ec:	bf00      	nop
 80018ee:	bf00      	nop
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000010 	.word	0x20000010

080018fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800190c:	4b0c      	ldr	r3, [pc, #48]	@ (8001940 <__NVIC_SetPriorityGrouping+0x44>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001912:	68ba      	ldr	r2, [r7, #8]
 8001914:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001918:	4013      	ands	r3, r2
 800191a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001924:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001928:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800192c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800192e:	4a04      	ldr	r2, [pc, #16]	@ (8001940 <__NVIC_SetPriorityGrouping+0x44>)
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	60d3      	str	r3, [r2, #12]
}
 8001934:	bf00      	nop
 8001936:	3714      	adds	r7, #20
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001948:	4b04      	ldr	r3, [pc, #16]	@ (800195c <__NVIC_GetPriorityGrouping+0x18>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	0a1b      	lsrs	r3, r3, #8
 800194e:	f003 0307 	and.w	r3, r3, #7
}
 8001952:	4618      	mov	r0, r3
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	e000ed00 	.word	0xe000ed00

08001960 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800196a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196e:	2b00      	cmp	r3, #0
 8001970:	db0b      	blt.n	800198a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	f003 021f 	and.w	r2, r3, #31
 8001978:	4907      	ldr	r1, [pc, #28]	@ (8001998 <__NVIC_EnableIRQ+0x38>)
 800197a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197e:	095b      	lsrs	r3, r3, #5
 8001980:	2001      	movs	r0, #1
 8001982:	fa00 f202 	lsl.w	r2, r0, r2
 8001986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	e000e100 	.word	0xe000e100

0800199c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	6039      	str	r1, [r7, #0]
 80019a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	db0a      	blt.n	80019c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	490c      	ldr	r1, [pc, #48]	@ (80019e8 <__NVIC_SetPriority+0x4c>)
 80019b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ba:	0112      	lsls	r2, r2, #4
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	440b      	add	r3, r1
 80019c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c4:	e00a      	b.n	80019dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	4908      	ldr	r1, [pc, #32]	@ (80019ec <__NVIC_SetPriority+0x50>)
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	f003 030f 	and.w	r3, r3, #15
 80019d2:	3b04      	subs	r3, #4
 80019d4:	0112      	lsls	r2, r2, #4
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	440b      	add	r3, r1
 80019da:	761a      	strb	r2, [r3, #24]
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	e000e100 	.word	0xe000e100
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b089      	sub	sp, #36	@ 0x24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	f1c3 0307 	rsb	r3, r3, #7
 8001a0a:	2b04      	cmp	r3, #4
 8001a0c:	bf28      	it	cs
 8001a0e:	2304      	movcs	r3, #4
 8001a10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3304      	adds	r3, #4
 8001a16:	2b06      	cmp	r3, #6
 8001a18:	d902      	bls.n	8001a20 <NVIC_EncodePriority+0x30>
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	3b03      	subs	r3, #3
 8001a1e:	e000      	b.n	8001a22 <NVIC_EncodePriority+0x32>
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a24:	f04f 32ff 	mov.w	r2, #4294967295
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43da      	mvns	r2, r3
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	401a      	ands	r2, r3
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a38:	f04f 31ff 	mov.w	r1, #4294967295
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a42:	43d9      	mvns	r1, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a48:	4313      	orrs	r3, r2
         );
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3724      	adds	r7, #36	@ 0x24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
	...

08001a58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	3b01      	subs	r3, #1
 8001a64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a68:	d301      	bcc.n	8001a6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e00f      	b.n	8001a8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a6e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a98 <SysTick_Config+0x40>)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3b01      	subs	r3, #1
 8001a74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a76:	210f      	movs	r1, #15
 8001a78:	f04f 30ff 	mov.w	r0, #4294967295
 8001a7c:	f7ff ff8e 	bl	800199c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a80:	4b05      	ldr	r3, [pc, #20]	@ (8001a98 <SysTick_Config+0x40>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a86:	4b04      	ldr	r3, [pc, #16]	@ (8001a98 <SysTick_Config+0x40>)
 8001a88:	2207      	movs	r2, #7
 8001a8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	e000e010 	.word	0xe000e010

08001a9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7ff ff29 	bl	80018fc <__NVIC_SetPriorityGrouping>
}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b086      	sub	sp, #24
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	4603      	mov	r3, r0
 8001aba:	60b9      	str	r1, [r7, #8]
 8001abc:	607a      	str	r2, [r7, #4]
 8001abe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac4:	f7ff ff3e 	bl	8001944 <__NVIC_GetPriorityGrouping>
 8001ac8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	68b9      	ldr	r1, [r7, #8]
 8001ace:	6978      	ldr	r0, [r7, #20]
 8001ad0:	f7ff ff8e 	bl	80019f0 <NVIC_EncodePriority>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ada:	4611      	mov	r1, r2
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff ff5d 	bl	800199c <__NVIC_SetPriority>
}
 8001ae2:	bf00      	nop
 8001ae4:	3718      	adds	r7, #24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	4603      	mov	r3, r0
 8001af2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff ff31 	bl	8001960 <__NVIC_EnableIRQ>
}
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b082      	sub	sp, #8
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f7ff ffa2 	bl	8001a58 <SysTick_Config>
 8001b14:	4603      	mov	r3, r0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
	...

08001b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b089      	sub	sp, #36	@ 0x24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b36:	2300      	movs	r3, #0
 8001b38:	61fb      	str	r3, [r7, #28]
 8001b3a:	e159      	b.n	8001df0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	697a      	ldr	r2, [r7, #20]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	f040 8148 	bne.w	8001dea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f003 0303 	and.w	r3, r3, #3
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d005      	beq.n	8001b72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d130      	bne.n	8001bd4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	2203      	movs	r2, #3
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	43db      	mvns	r3, r3
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	4013      	ands	r3, r2
 8001b88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	68da      	ldr	r2, [r3, #12]
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ba8:	2201      	movs	r2, #1
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	091b      	lsrs	r3, r3, #4
 8001bbe:	f003 0201 	and.w	r2, r3, #1
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 0303 	and.w	r3, r3, #3
 8001bdc:	2b03      	cmp	r3, #3
 8001bde:	d017      	beq.n	8001c10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	2203      	movs	r2, #3
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	689a      	ldr	r2, [r3, #8]
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f003 0303 	and.w	r3, r3, #3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d123      	bne.n	8001c64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	08da      	lsrs	r2, r3, #3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3208      	adds	r2, #8
 8001c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	f003 0307 	and.w	r3, r3, #7
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	220f      	movs	r2, #15
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	691a      	ldr	r2, [r3, #16]
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	f003 0307 	and.w	r3, r3, #7
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	08da      	lsrs	r2, r3, #3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	3208      	adds	r2, #8
 8001c5e:	69b9      	ldr	r1, [r7, #24]
 8001c60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	2203      	movs	r2, #3
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	43db      	mvns	r3, r3
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f003 0203 	and.w	r2, r3, #3
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	f000 80a2 	beq.w	8001dea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	4b57      	ldr	r3, [pc, #348]	@ (8001e08 <HAL_GPIO_Init+0x2e8>)
 8001cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cae:	4a56      	ldr	r2, [pc, #344]	@ (8001e08 <HAL_GPIO_Init+0x2e8>)
 8001cb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cb6:	4b54      	ldr	r3, [pc, #336]	@ (8001e08 <HAL_GPIO_Init+0x2e8>)
 8001cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cc2:	4a52      	ldr	r2, [pc, #328]	@ (8001e0c <HAL_GPIO_Init+0x2ec>)
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	089b      	lsrs	r3, r3, #2
 8001cc8:	3302      	adds	r3, #2
 8001cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	f003 0303 	and.w	r3, r3, #3
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	220f      	movs	r2, #15
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a49      	ldr	r2, [pc, #292]	@ (8001e10 <HAL_GPIO_Init+0x2f0>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d019      	beq.n	8001d22 <HAL_GPIO_Init+0x202>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a48      	ldr	r2, [pc, #288]	@ (8001e14 <HAL_GPIO_Init+0x2f4>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d013      	beq.n	8001d1e <HAL_GPIO_Init+0x1fe>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a47      	ldr	r2, [pc, #284]	@ (8001e18 <HAL_GPIO_Init+0x2f8>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d00d      	beq.n	8001d1a <HAL_GPIO_Init+0x1fa>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a46      	ldr	r2, [pc, #280]	@ (8001e1c <HAL_GPIO_Init+0x2fc>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d007      	beq.n	8001d16 <HAL_GPIO_Init+0x1f6>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a45      	ldr	r2, [pc, #276]	@ (8001e20 <HAL_GPIO_Init+0x300>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d101      	bne.n	8001d12 <HAL_GPIO_Init+0x1f2>
 8001d0e:	2304      	movs	r3, #4
 8001d10:	e008      	b.n	8001d24 <HAL_GPIO_Init+0x204>
 8001d12:	2307      	movs	r3, #7
 8001d14:	e006      	b.n	8001d24 <HAL_GPIO_Init+0x204>
 8001d16:	2303      	movs	r3, #3
 8001d18:	e004      	b.n	8001d24 <HAL_GPIO_Init+0x204>
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	e002      	b.n	8001d24 <HAL_GPIO_Init+0x204>
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e000      	b.n	8001d24 <HAL_GPIO_Init+0x204>
 8001d22:	2300      	movs	r3, #0
 8001d24:	69fa      	ldr	r2, [r7, #28]
 8001d26:	f002 0203 	and.w	r2, r2, #3
 8001d2a:	0092      	lsls	r2, r2, #2
 8001d2c:	4093      	lsls	r3, r2
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d34:	4935      	ldr	r1, [pc, #212]	@ (8001e0c <HAL_GPIO_Init+0x2ec>)
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	089b      	lsrs	r3, r3, #2
 8001d3a:	3302      	adds	r3, #2
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d42:	4b38      	ldr	r3, [pc, #224]	@ (8001e24 <HAL_GPIO_Init+0x304>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d66:	4a2f      	ldr	r2, [pc, #188]	@ (8001e24 <HAL_GPIO_Init+0x304>)
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d6c:	4b2d      	ldr	r3, [pc, #180]	@ (8001e24 <HAL_GPIO_Init+0x304>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	43db      	mvns	r3, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d003      	beq.n	8001d90 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d90:	4a24      	ldr	r2, [pc, #144]	@ (8001e24 <HAL_GPIO_Init+0x304>)
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d96:	4b23      	ldr	r3, [pc, #140]	@ (8001e24 <HAL_GPIO_Init+0x304>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	4013      	ands	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dba:	4a1a      	ldr	r2, [pc, #104]	@ (8001e24 <HAL_GPIO_Init+0x304>)
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dc0:	4b18      	ldr	r3, [pc, #96]	@ (8001e24 <HAL_GPIO_Init+0x304>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d003      	beq.n	8001de4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001de4:	4a0f      	ldr	r2, [pc, #60]	@ (8001e24 <HAL_GPIO_Init+0x304>)
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	3301      	adds	r3, #1
 8001dee:	61fb      	str	r3, [r7, #28]
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	2b0f      	cmp	r3, #15
 8001df4:	f67f aea2 	bls.w	8001b3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001df8:	bf00      	nop
 8001dfa:	bf00      	nop
 8001dfc:	3724      	adds	r7, #36	@ 0x24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	40013800 	.word	0x40013800
 8001e10:	40020000 	.word	0x40020000
 8001e14:	40020400 	.word	0x40020400
 8001e18:	40020800 	.word	0x40020800
 8001e1c:	40020c00 	.word	0x40020c00
 8001e20:	40021000 	.word	0x40021000
 8001e24:	40013c00 	.word	0x40013c00

08001e28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	460b      	mov	r3, r1
 8001e32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	691a      	ldr	r2, [r3, #16]
 8001e38:	887b      	ldrh	r3, [r7, #2]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d002      	beq.n	8001e46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e40:	2301      	movs	r3, #1
 8001e42:	73fb      	strb	r3, [r7, #15]
 8001e44:	e001      	b.n	8001e4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e46:	2300      	movs	r3, #0
 8001e48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3714      	adds	r7, #20
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	460b      	mov	r3, r1
 8001e62:	807b      	strh	r3, [r7, #2]
 8001e64:	4613      	mov	r3, r2
 8001e66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e68:	787b      	ldrb	r3, [r7, #1]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d003      	beq.n	8001e76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e6e:	887a      	ldrh	r2, [r7, #2]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e74:	e003      	b.n	8001e7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e76:	887b      	ldrh	r3, [r7, #2]
 8001e78:	041a      	lsls	r2, r3, #16
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	619a      	str	r2, [r3, #24]
}
 8001e7e:	bf00      	nop
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
	...

08001e8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e267      	b.n	800236e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d075      	beq.n	8001f96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eaa:	4b88      	ldr	r3, [pc, #544]	@ (80020cc <HAL_RCC_OscConfig+0x240>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f003 030c 	and.w	r3, r3, #12
 8001eb2:	2b04      	cmp	r3, #4
 8001eb4:	d00c      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eb6:	4b85      	ldr	r3, [pc, #532]	@ (80020cc <HAL_RCC_OscConfig+0x240>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ebe:	2b08      	cmp	r3, #8
 8001ec0:	d112      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ec2:	4b82      	ldr	r3, [pc, #520]	@ (80020cc <HAL_RCC_OscConfig+0x240>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001eca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ece:	d10b      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed0:	4b7e      	ldr	r3, [pc, #504]	@ (80020cc <HAL_RCC_OscConfig+0x240>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d05b      	beq.n	8001f94 <HAL_RCC_OscConfig+0x108>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d157      	bne.n	8001f94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e242      	b.n	800236e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ef0:	d106      	bne.n	8001f00 <HAL_RCC_OscConfig+0x74>
 8001ef2:	4b76      	ldr	r3, [pc, #472]	@ (80020cc <HAL_RCC_OscConfig+0x240>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a75      	ldr	r2, [pc, #468]	@ (80020cc <HAL_RCC_OscConfig+0x240>)
 8001ef8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001efc:	6013      	str	r3, [r2, #0]
 8001efe:	e01d      	b.n	8001f3c <HAL_RCC_OscConfig+0xb0>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f08:	d10c      	bne.n	8001f24 <HAL_RCC_OscConfig+0x98>
 8001f0a:	4b70      	ldr	r3, [pc, #448]	@ (80020cc <HAL_RCC_OscConfig+0x240>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a6f      	ldr	r2, [pc, #444]	@ (80020cc <HAL_RCC_OscConfig+0x240>)
 8001f10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f14:	6013      	str	r3, [r2, #0]
 8001f16:	4b6d      	ldr	r3, [pc, #436]	@ (80020cc <HAL_RCC_OscConfig+0x240>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a6c      	ldr	r2, [pc, #432]	@ (80020cc <HAL_RCC_OscConfig+0x240>)
 8001f1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f20:	6013      	str	r3, [r2, #0]
 8001f22:	e00b      	b.n	8001f3c <HAL_RCC_OscConfig+0xb0>
 8001f24:	4b69      	ldr	r3, [pc, #420]	@ (80020cc <HAL_RCC_OscConfig+0x240>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a68      	ldr	r2, [pc, #416]	@ (80020cc <HAL_RCC_OscConfig+0x240>)
 8001f2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f2e:	6013      	str	r3, [r2, #0]
 8001f30:	4b66      	ldr	r3, [pc, #408]	@ (80020cc <HAL_RCC_OscConfig+0x240>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a65      	ldr	r2, [pc, #404]	@ (80020cc <HAL_RCC_OscConfig+0x240>)
 8001f36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d013      	beq.n	8001f6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f44:	f7ff fcaa 	bl	800189c <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f4c:	f7ff fca6 	bl	800189c <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b64      	cmp	r3, #100	@ 0x64
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e207      	b.n	800236e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f5e:	4b5b      	ldr	r3, [pc, #364]	@ (80020cc <HAL_RCC_OscConfig+0x240>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d0f0      	beq.n	8001f4c <HAL_RCC_OscConfig+0xc0>
 8001f6a:	e014      	b.n	8001f96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6c:	f7ff fc96 	bl	800189c <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f74:	f7ff fc92 	bl	800189c <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b64      	cmp	r3, #100	@ 0x64
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e1f3      	b.n	800236e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f86:	4b51      	ldr	r3, [pc, #324]	@ (80020cc <HAL_RCC_OscConfig+0x240>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1f0      	bne.n	8001f74 <HAL_RCC_OscConfig+0xe8>
 8001f92:	e000      	b.n	8001f96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d063      	beq.n	800206a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fa2:	4b4a      	ldr	r3, [pc, #296]	@ (80020cc <HAL_RCC_OscConfig+0x240>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f003 030c 	and.w	r3, r3, #12
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00b      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fae:	4b47      	ldr	r3, [pc, #284]	@ (80020cc <HAL_RCC_OscConfig+0x240>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fb6:	2b08      	cmp	r3, #8
 8001fb8:	d11c      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fba:	4b44      	ldr	r3, [pc, #272]	@ (80020cc <HAL_RCC_OscConfig+0x240>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d116      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fc6:	4b41      	ldr	r3, [pc, #260]	@ (80020cc <HAL_RCC_OscConfig+0x240>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d005      	beq.n	8001fde <HAL_RCC_OscConfig+0x152>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d001      	beq.n	8001fde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e1c7      	b.n	800236e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fde:	4b3b      	ldr	r3, [pc, #236]	@ (80020cc <HAL_RCC_OscConfig+0x240>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	4937      	ldr	r1, [pc, #220]	@ (80020cc <HAL_RCC_OscConfig+0x240>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ff2:	e03a      	b.n	800206a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d020      	beq.n	800203e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ffc:	4b34      	ldr	r3, [pc, #208]	@ (80020d0 <HAL_RCC_OscConfig+0x244>)
 8001ffe:	2201      	movs	r2, #1
 8002000:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002002:	f7ff fc4b 	bl	800189c <HAL_GetTick>
 8002006:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002008:	e008      	b.n	800201c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800200a:	f7ff fc47 	bl	800189c <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d901      	bls.n	800201c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e1a8      	b.n	800236e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800201c:	4b2b      	ldr	r3, [pc, #172]	@ (80020cc <HAL_RCC_OscConfig+0x240>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d0f0      	beq.n	800200a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002028:	4b28      	ldr	r3, [pc, #160]	@ (80020cc <HAL_RCC_OscConfig+0x240>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	4925      	ldr	r1, [pc, #148]	@ (80020cc <HAL_RCC_OscConfig+0x240>)
 8002038:	4313      	orrs	r3, r2
 800203a:	600b      	str	r3, [r1, #0]
 800203c:	e015      	b.n	800206a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800203e:	4b24      	ldr	r3, [pc, #144]	@ (80020d0 <HAL_RCC_OscConfig+0x244>)
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002044:	f7ff fc2a 	bl	800189c <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800204c:	f7ff fc26 	bl	800189c <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e187      	b.n	800236e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800205e:	4b1b      	ldr	r3, [pc, #108]	@ (80020cc <HAL_RCC_OscConfig+0x240>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1f0      	bne.n	800204c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0308 	and.w	r3, r3, #8
 8002072:	2b00      	cmp	r3, #0
 8002074:	d036      	beq.n	80020e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d016      	beq.n	80020ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800207e:	4b15      	ldr	r3, [pc, #84]	@ (80020d4 <HAL_RCC_OscConfig+0x248>)
 8002080:	2201      	movs	r2, #1
 8002082:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002084:	f7ff fc0a 	bl	800189c <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800208c:	f7ff fc06 	bl	800189c <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e167      	b.n	800236e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800209e:	4b0b      	ldr	r3, [pc, #44]	@ (80020cc <HAL_RCC_OscConfig+0x240>)
 80020a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d0f0      	beq.n	800208c <HAL_RCC_OscConfig+0x200>
 80020aa:	e01b      	b.n	80020e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020ac:	4b09      	ldr	r3, [pc, #36]	@ (80020d4 <HAL_RCC_OscConfig+0x248>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b2:	f7ff fbf3 	bl	800189c <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020b8:	e00e      	b.n	80020d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020ba:	f7ff fbef 	bl	800189c <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d907      	bls.n	80020d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e150      	b.n	800236e <HAL_RCC_OscConfig+0x4e2>
 80020cc:	40023800 	.word	0x40023800
 80020d0:	42470000 	.word	0x42470000
 80020d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d8:	4b88      	ldr	r3, [pc, #544]	@ (80022fc <HAL_RCC_OscConfig+0x470>)
 80020da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1ea      	bne.n	80020ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0304 	and.w	r3, r3, #4
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f000 8097 	beq.w	8002220 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020f2:	2300      	movs	r3, #0
 80020f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020f6:	4b81      	ldr	r3, [pc, #516]	@ (80022fc <HAL_RCC_OscConfig+0x470>)
 80020f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10f      	bne.n	8002122 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	60bb      	str	r3, [r7, #8]
 8002106:	4b7d      	ldr	r3, [pc, #500]	@ (80022fc <HAL_RCC_OscConfig+0x470>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210a:	4a7c      	ldr	r2, [pc, #496]	@ (80022fc <HAL_RCC_OscConfig+0x470>)
 800210c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002110:	6413      	str	r3, [r2, #64]	@ 0x40
 8002112:	4b7a      	ldr	r3, [pc, #488]	@ (80022fc <HAL_RCC_OscConfig+0x470>)
 8002114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002116:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800211a:	60bb      	str	r3, [r7, #8]
 800211c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800211e:	2301      	movs	r3, #1
 8002120:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002122:	4b77      	ldr	r3, [pc, #476]	@ (8002300 <HAL_RCC_OscConfig+0x474>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800212a:	2b00      	cmp	r3, #0
 800212c:	d118      	bne.n	8002160 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800212e:	4b74      	ldr	r3, [pc, #464]	@ (8002300 <HAL_RCC_OscConfig+0x474>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a73      	ldr	r2, [pc, #460]	@ (8002300 <HAL_RCC_OscConfig+0x474>)
 8002134:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002138:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800213a:	f7ff fbaf 	bl	800189c <HAL_GetTick>
 800213e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002140:	e008      	b.n	8002154 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002142:	f7ff fbab 	bl	800189c <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d901      	bls.n	8002154 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e10c      	b.n	800236e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002154:	4b6a      	ldr	r3, [pc, #424]	@ (8002300 <HAL_RCC_OscConfig+0x474>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800215c:	2b00      	cmp	r3, #0
 800215e:	d0f0      	beq.n	8002142 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d106      	bne.n	8002176 <HAL_RCC_OscConfig+0x2ea>
 8002168:	4b64      	ldr	r3, [pc, #400]	@ (80022fc <HAL_RCC_OscConfig+0x470>)
 800216a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800216c:	4a63      	ldr	r2, [pc, #396]	@ (80022fc <HAL_RCC_OscConfig+0x470>)
 800216e:	f043 0301 	orr.w	r3, r3, #1
 8002172:	6713      	str	r3, [r2, #112]	@ 0x70
 8002174:	e01c      	b.n	80021b0 <HAL_RCC_OscConfig+0x324>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	2b05      	cmp	r3, #5
 800217c:	d10c      	bne.n	8002198 <HAL_RCC_OscConfig+0x30c>
 800217e:	4b5f      	ldr	r3, [pc, #380]	@ (80022fc <HAL_RCC_OscConfig+0x470>)
 8002180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002182:	4a5e      	ldr	r2, [pc, #376]	@ (80022fc <HAL_RCC_OscConfig+0x470>)
 8002184:	f043 0304 	orr.w	r3, r3, #4
 8002188:	6713      	str	r3, [r2, #112]	@ 0x70
 800218a:	4b5c      	ldr	r3, [pc, #368]	@ (80022fc <HAL_RCC_OscConfig+0x470>)
 800218c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800218e:	4a5b      	ldr	r2, [pc, #364]	@ (80022fc <HAL_RCC_OscConfig+0x470>)
 8002190:	f043 0301 	orr.w	r3, r3, #1
 8002194:	6713      	str	r3, [r2, #112]	@ 0x70
 8002196:	e00b      	b.n	80021b0 <HAL_RCC_OscConfig+0x324>
 8002198:	4b58      	ldr	r3, [pc, #352]	@ (80022fc <HAL_RCC_OscConfig+0x470>)
 800219a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800219c:	4a57      	ldr	r2, [pc, #348]	@ (80022fc <HAL_RCC_OscConfig+0x470>)
 800219e:	f023 0301 	bic.w	r3, r3, #1
 80021a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80021a4:	4b55      	ldr	r3, [pc, #340]	@ (80022fc <HAL_RCC_OscConfig+0x470>)
 80021a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021a8:	4a54      	ldr	r2, [pc, #336]	@ (80022fc <HAL_RCC_OscConfig+0x470>)
 80021aa:	f023 0304 	bic.w	r3, r3, #4
 80021ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d015      	beq.n	80021e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b8:	f7ff fb70 	bl	800189c <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021be:	e00a      	b.n	80021d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021c0:	f7ff fb6c 	bl	800189c <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e0cb      	b.n	800236e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d6:	4b49      	ldr	r3, [pc, #292]	@ (80022fc <HAL_RCC_OscConfig+0x470>)
 80021d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d0ee      	beq.n	80021c0 <HAL_RCC_OscConfig+0x334>
 80021e2:	e014      	b.n	800220e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e4:	f7ff fb5a 	bl	800189c <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ea:	e00a      	b.n	8002202 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021ec:	f7ff fb56 	bl	800189c <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e0b5      	b.n	800236e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002202:	4b3e      	ldr	r3, [pc, #248]	@ (80022fc <HAL_RCC_OscConfig+0x470>)
 8002204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1ee      	bne.n	80021ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800220e:	7dfb      	ldrb	r3, [r7, #23]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d105      	bne.n	8002220 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002214:	4b39      	ldr	r3, [pc, #228]	@ (80022fc <HAL_RCC_OscConfig+0x470>)
 8002216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002218:	4a38      	ldr	r2, [pc, #224]	@ (80022fc <HAL_RCC_OscConfig+0x470>)
 800221a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800221e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	2b00      	cmp	r3, #0
 8002226:	f000 80a1 	beq.w	800236c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800222a:	4b34      	ldr	r3, [pc, #208]	@ (80022fc <HAL_RCC_OscConfig+0x470>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 030c 	and.w	r3, r3, #12
 8002232:	2b08      	cmp	r3, #8
 8002234:	d05c      	beq.n	80022f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	2b02      	cmp	r3, #2
 800223c:	d141      	bne.n	80022c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800223e:	4b31      	ldr	r3, [pc, #196]	@ (8002304 <HAL_RCC_OscConfig+0x478>)
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002244:	f7ff fb2a 	bl	800189c <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800224c:	f7ff fb26 	bl	800189c <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e087      	b.n	800236e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800225e:	4b27      	ldr	r3, [pc, #156]	@ (80022fc <HAL_RCC_OscConfig+0x470>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1f0      	bne.n	800224c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	69da      	ldr	r2, [r3, #28]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a1b      	ldr	r3, [r3, #32]
 8002272:	431a      	orrs	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002278:	019b      	lsls	r3, r3, #6
 800227a:	431a      	orrs	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002280:	085b      	lsrs	r3, r3, #1
 8002282:	3b01      	subs	r3, #1
 8002284:	041b      	lsls	r3, r3, #16
 8002286:	431a      	orrs	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800228c:	061b      	lsls	r3, r3, #24
 800228e:	491b      	ldr	r1, [pc, #108]	@ (80022fc <HAL_RCC_OscConfig+0x470>)
 8002290:	4313      	orrs	r3, r2
 8002292:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002294:	4b1b      	ldr	r3, [pc, #108]	@ (8002304 <HAL_RCC_OscConfig+0x478>)
 8002296:	2201      	movs	r2, #1
 8002298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229a:	f7ff faff 	bl	800189c <HAL_GetTick>
 800229e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022a0:	e008      	b.n	80022b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022a2:	f7ff fafb 	bl	800189c <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e05c      	b.n	800236e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022b4:	4b11      	ldr	r3, [pc, #68]	@ (80022fc <HAL_RCC_OscConfig+0x470>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d0f0      	beq.n	80022a2 <HAL_RCC_OscConfig+0x416>
 80022c0:	e054      	b.n	800236c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022c2:	4b10      	ldr	r3, [pc, #64]	@ (8002304 <HAL_RCC_OscConfig+0x478>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c8:	f7ff fae8 	bl	800189c <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022d0:	f7ff fae4 	bl	800189c <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e045      	b.n	800236e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022e2:	4b06      	ldr	r3, [pc, #24]	@ (80022fc <HAL_RCC_OscConfig+0x470>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1f0      	bne.n	80022d0 <HAL_RCC_OscConfig+0x444>
 80022ee:	e03d      	b.n	800236c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d107      	bne.n	8002308 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e038      	b.n	800236e <HAL_RCC_OscConfig+0x4e2>
 80022fc:	40023800 	.word	0x40023800
 8002300:	40007000 	.word	0x40007000
 8002304:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002308:	4b1b      	ldr	r3, [pc, #108]	@ (8002378 <HAL_RCC_OscConfig+0x4ec>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d028      	beq.n	8002368 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002320:	429a      	cmp	r2, r3
 8002322:	d121      	bne.n	8002368 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800232e:	429a      	cmp	r2, r3
 8002330:	d11a      	bne.n	8002368 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002338:	4013      	ands	r3, r2
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800233e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002340:	4293      	cmp	r3, r2
 8002342:	d111      	bne.n	8002368 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800234e:	085b      	lsrs	r3, r3, #1
 8002350:	3b01      	subs	r3, #1
 8002352:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002354:	429a      	cmp	r2, r3
 8002356:	d107      	bne.n	8002368 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002362:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002364:	429a      	cmp	r2, r3
 8002366:	d001      	beq.n	800236c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e000      	b.n	800236e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3718      	adds	r7, #24
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	40023800 	.word	0x40023800

0800237c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d101      	bne.n	8002390 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e0cc      	b.n	800252a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002390:	4b68      	ldr	r3, [pc, #416]	@ (8002534 <HAL_RCC_ClockConfig+0x1b8>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0307 	and.w	r3, r3, #7
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	429a      	cmp	r2, r3
 800239c:	d90c      	bls.n	80023b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800239e:	4b65      	ldr	r3, [pc, #404]	@ (8002534 <HAL_RCC_ClockConfig+0x1b8>)
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	b2d2      	uxtb	r2, r2
 80023a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a6:	4b63      	ldr	r3, [pc, #396]	@ (8002534 <HAL_RCC_ClockConfig+0x1b8>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d001      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e0b8      	b.n	800252a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d020      	beq.n	8002406 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0304 	and.w	r3, r3, #4
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d005      	beq.n	80023dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023d0:	4b59      	ldr	r3, [pc, #356]	@ (8002538 <HAL_RCC_ClockConfig+0x1bc>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	4a58      	ldr	r2, [pc, #352]	@ (8002538 <HAL_RCC_ClockConfig+0x1bc>)
 80023d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80023da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0308 	and.w	r3, r3, #8
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d005      	beq.n	80023f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023e8:	4b53      	ldr	r3, [pc, #332]	@ (8002538 <HAL_RCC_ClockConfig+0x1bc>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	4a52      	ldr	r2, [pc, #328]	@ (8002538 <HAL_RCC_ClockConfig+0x1bc>)
 80023ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80023f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023f4:	4b50      	ldr	r3, [pc, #320]	@ (8002538 <HAL_RCC_ClockConfig+0x1bc>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	494d      	ldr	r1, [pc, #308]	@ (8002538 <HAL_RCC_ClockConfig+0x1bc>)
 8002402:	4313      	orrs	r3, r2
 8002404:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d044      	beq.n	800249c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d107      	bne.n	800242a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800241a:	4b47      	ldr	r3, [pc, #284]	@ (8002538 <HAL_RCC_ClockConfig+0x1bc>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d119      	bne.n	800245a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e07f      	b.n	800252a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	2b02      	cmp	r3, #2
 8002430:	d003      	beq.n	800243a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002436:	2b03      	cmp	r3, #3
 8002438:	d107      	bne.n	800244a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800243a:	4b3f      	ldr	r3, [pc, #252]	@ (8002538 <HAL_RCC_ClockConfig+0x1bc>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d109      	bne.n	800245a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e06f      	b.n	800252a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800244a:	4b3b      	ldr	r3, [pc, #236]	@ (8002538 <HAL_RCC_ClockConfig+0x1bc>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e067      	b.n	800252a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800245a:	4b37      	ldr	r3, [pc, #220]	@ (8002538 <HAL_RCC_ClockConfig+0x1bc>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f023 0203 	bic.w	r2, r3, #3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	4934      	ldr	r1, [pc, #208]	@ (8002538 <HAL_RCC_ClockConfig+0x1bc>)
 8002468:	4313      	orrs	r3, r2
 800246a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800246c:	f7ff fa16 	bl	800189c <HAL_GetTick>
 8002470:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002472:	e00a      	b.n	800248a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002474:	f7ff fa12 	bl	800189c <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002482:	4293      	cmp	r3, r2
 8002484:	d901      	bls.n	800248a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e04f      	b.n	800252a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800248a:	4b2b      	ldr	r3, [pc, #172]	@ (8002538 <HAL_RCC_ClockConfig+0x1bc>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f003 020c 	and.w	r2, r3, #12
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	429a      	cmp	r2, r3
 800249a:	d1eb      	bne.n	8002474 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800249c:	4b25      	ldr	r3, [pc, #148]	@ (8002534 <HAL_RCC_ClockConfig+0x1b8>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0307 	and.w	r3, r3, #7
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d20c      	bcs.n	80024c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024aa:	4b22      	ldr	r3, [pc, #136]	@ (8002534 <HAL_RCC_ClockConfig+0x1b8>)
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	b2d2      	uxtb	r2, r2
 80024b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024b2:	4b20      	ldr	r3, [pc, #128]	@ (8002534 <HAL_RCC_ClockConfig+0x1b8>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d001      	beq.n	80024c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e032      	b.n	800252a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0304 	and.w	r3, r3, #4
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d008      	beq.n	80024e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024d0:	4b19      	ldr	r3, [pc, #100]	@ (8002538 <HAL_RCC_ClockConfig+0x1bc>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	4916      	ldr	r1, [pc, #88]	@ (8002538 <HAL_RCC_ClockConfig+0x1bc>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0308 	and.w	r3, r3, #8
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d009      	beq.n	8002502 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024ee:	4b12      	ldr	r3, [pc, #72]	@ (8002538 <HAL_RCC_ClockConfig+0x1bc>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	490e      	ldr	r1, [pc, #56]	@ (8002538 <HAL_RCC_ClockConfig+0x1bc>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002502:	f000 f821 	bl	8002548 <HAL_RCC_GetSysClockFreq>
 8002506:	4602      	mov	r2, r0
 8002508:	4b0b      	ldr	r3, [pc, #44]	@ (8002538 <HAL_RCC_ClockConfig+0x1bc>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	091b      	lsrs	r3, r3, #4
 800250e:	f003 030f 	and.w	r3, r3, #15
 8002512:	490a      	ldr	r1, [pc, #40]	@ (800253c <HAL_RCC_ClockConfig+0x1c0>)
 8002514:	5ccb      	ldrb	r3, [r1, r3]
 8002516:	fa22 f303 	lsr.w	r3, r2, r3
 800251a:	4a09      	ldr	r2, [pc, #36]	@ (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 800251c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800251e:	4b09      	ldr	r3, [pc, #36]	@ (8002544 <HAL_RCC_ClockConfig+0x1c8>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff f976 	bl	8001814 <HAL_InitTick>

  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40023c00 	.word	0x40023c00
 8002538:	40023800 	.word	0x40023800
 800253c:	08004bec 	.word	0x08004bec
 8002540:	20000008 	.word	0x20000008
 8002544:	2000000c 	.word	0x2000000c

08002548 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002548:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800254c:	b094      	sub	sp, #80	@ 0x50
 800254e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002550:	2300      	movs	r3, #0
 8002552:	647b      	str	r3, [r7, #68]	@ 0x44
 8002554:	2300      	movs	r3, #0
 8002556:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002558:	2300      	movs	r3, #0
 800255a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800255c:	2300      	movs	r3, #0
 800255e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002560:	4b79      	ldr	r3, [pc, #484]	@ (8002748 <HAL_RCC_GetSysClockFreq+0x200>)
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f003 030c 	and.w	r3, r3, #12
 8002568:	2b08      	cmp	r3, #8
 800256a:	d00d      	beq.n	8002588 <HAL_RCC_GetSysClockFreq+0x40>
 800256c:	2b08      	cmp	r3, #8
 800256e:	f200 80e1 	bhi.w	8002734 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002572:	2b00      	cmp	r3, #0
 8002574:	d002      	beq.n	800257c <HAL_RCC_GetSysClockFreq+0x34>
 8002576:	2b04      	cmp	r3, #4
 8002578:	d003      	beq.n	8002582 <HAL_RCC_GetSysClockFreq+0x3a>
 800257a:	e0db      	b.n	8002734 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800257c:	4b73      	ldr	r3, [pc, #460]	@ (800274c <HAL_RCC_GetSysClockFreq+0x204>)
 800257e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002580:	e0db      	b.n	800273a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002582:	4b73      	ldr	r3, [pc, #460]	@ (8002750 <HAL_RCC_GetSysClockFreq+0x208>)
 8002584:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002586:	e0d8      	b.n	800273a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002588:	4b6f      	ldr	r3, [pc, #444]	@ (8002748 <HAL_RCC_GetSysClockFreq+0x200>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002590:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002592:	4b6d      	ldr	r3, [pc, #436]	@ (8002748 <HAL_RCC_GetSysClockFreq+0x200>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d063      	beq.n	8002666 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800259e:	4b6a      	ldr	r3, [pc, #424]	@ (8002748 <HAL_RCC_GetSysClockFreq+0x200>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	099b      	lsrs	r3, r3, #6
 80025a4:	2200      	movs	r2, #0
 80025a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80025a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80025aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80025b2:	2300      	movs	r3, #0
 80025b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80025b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80025ba:	4622      	mov	r2, r4
 80025bc:	462b      	mov	r3, r5
 80025be:	f04f 0000 	mov.w	r0, #0
 80025c2:	f04f 0100 	mov.w	r1, #0
 80025c6:	0159      	lsls	r1, r3, #5
 80025c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025cc:	0150      	lsls	r0, r2, #5
 80025ce:	4602      	mov	r2, r0
 80025d0:	460b      	mov	r3, r1
 80025d2:	4621      	mov	r1, r4
 80025d4:	1a51      	subs	r1, r2, r1
 80025d6:	6139      	str	r1, [r7, #16]
 80025d8:	4629      	mov	r1, r5
 80025da:	eb63 0301 	sbc.w	r3, r3, r1
 80025de:	617b      	str	r3, [r7, #20]
 80025e0:	f04f 0200 	mov.w	r2, #0
 80025e4:	f04f 0300 	mov.w	r3, #0
 80025e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025ec:	4659      	mov	r1, fp
 80025ee:	018b      	lsls	r3, r1, #6
 80025f0:	4651      	mov	r1, sl
 80025f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025f6:	4651      	mov	r1, sl
 80025f8:	018a      	lsls	r2, r1, #6
 80025fa:	4651      	mov	r1, sl
 80025fc:	ebb2 0801 	subs.w	r8, r2, r1
 8002600:	4659      	mov	r1, fp
 8002602:	eb63 0901 	sbc.w	r9, r3, r1
 8002606:	f04f 0200 	mov.w	r2, #0
 800260a:	f04f 0300 	mov.w	r3, #0
 800260e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002612:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002616:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800261a:	4690      	mov	r8, r2
 800261c:	4699      	mov	r9, r3
 800261e:	4623      	mov	r3, r4
 8002620:	eb18 0303 	adds.w	r3, r8, r3
 8002624:	60bb      	str	r3, [r7, #8]
 8002626:	462b      	mov	r3, r5
 8002628:	eb49 0303 	adc.w	r3, r9, r3
 800262c:	60fb      	str	r3, [r7, #12]
 800262e:	f04f 0200 	mov.w	r2, #0
 8002632:	f04f 0300 	mov.w	r3, #0
 8002636:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800263a:	4629      	mov	r1, r5
 800263c:	024b      	lsls	r3, r1, #9
 800263e:	4621      	mov	r1, r4
 8002640:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002644:	4621      	mov	r1, r4
 8002646:	024a      	lsls	r2, r1, #9
 8002648:	4610      	mov	r0, r2
 800264a:	4619      	mov	r1, r3
 800264c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800264e:	2200      	movs	r2, #0
 8002650:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002652:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002654:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002658:	f7fd fe22 	bl	80002a0 <__aeabi_uldivmod>
 800265c:	4602      	mov	r2, r0
 800265e:	460b      	mov	r3, r1
 8002660:	4613      	mov	r3, r2
 8002662:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002664:	e058      	b.n	8002718 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002666:	4b38      	ldr	r3, [pc, #224]	@ (8002748 <HAL_RCC_GetSysClockFreq+0x200>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	099b      	lsrs	r3, r3, #6
 800266c:	2200      	movs	r2, #0
 800266e:	4618      	mov	r0, r3
 8002670:	4611      	mov	r1, r2
 8002672:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002676:	623b      	str	r3, [r7, #32]
 8002678:	2300      	movs	r3, #0
 800267a:	627b      	str	r3, [r7, #36]	@ 0x24
 800267c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002680:	4642      	mov	r2, r8
 8002682:	464b      	mov	r3, r9
 8002684:	f04f 0000 	mov.w	r0, #0
 8002688:	f04f 0100 	mov.w	r1, #0
 800268c:	0159      	lsls	r1, r3, #5
 800268e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002692:	0150      	lsls	r0, r2, #5
 8002694:	4602      	mov	r2, r0
 8002696:	460b      	mov	r3, r1
 8002698:	4641      	mov	r1, r8
 800269a:	ebb2 0a01 	subs.w	sl, r2, r1
 800269e:	4649      	mov	r1, r9
 80026a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80026a4:	f04f 0200 	mov.w	r2, #0
 80026a8:	f04f 0300 	mov.w	r3, #0
 80026ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026b8:	ebb2 040a 	subs.w	r4, r2, sl
 80026bc:	eb63 050b 	sbc.w	r5, r3, fp
 80026c0:	f04f 0200 	mov.w	r2, #0
 80026c4:	f04f 0300 	mov.w	r3, #0
 80026c8:	00eb      	lsls	r3, r5, #3
 80026ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026ce:	00e2      	lsls	r2, r4, #3
 80026d0:	4614      	mov	r4, r2
 80026d2:	461d      	mov	r5, r3
 80026d4:	4643      	mov	r3, r8
 80026d6:	18e3      	adds	r3, r4, r3
 80026d8:	603b      	str	r3, [r7, #0]
 80026da:	464b      	mov	r3, r9
 80026dc:	eb45 0303 	adc.w	r3, r5, r3
 80026e0:	607b      	str	r3, [r7, #4]
 80026e2:	f04f 0200 	mov.w	r2, #0
 80026e6:	f04f 0300 	mov.w	r3, #0
 80026ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026ee:	4629      	mov	r1, r5
 80026f0:	028b      	lsls	r3, r1, #10
 80026f2:	4621      	mov	r1, r4
 80026f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026f8:	4621      	mov	r1, r4
 80026fa:	028a      	lsls	r2, r1, #10
 80026fc:	4610      	mov	r0, r2
 80026fe:	4619      	mov	r1, r3
 8002700:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002702:	2200      	movs	r2, #0
 8002704:	61bb      	str	r3, [r7, #24]
 8002706:	61fa      	str	r2, [r7, #28]
 8002708:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800270c:	f7fd fdc8 	bl	80002a0 <__aeabi_uldivmod>
 8002710:	4602      	mov	r2, r0
 8002712:	460b      	mov	r3, r1
 8002714:	4613      	mov	r3, r2
 8002716:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002718:	4b0b      	ldr	r3, [pc, #44]	@ (8002748 <HAL_RCC_GetSysClockFreq+0x200>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	0c1b      	lsrs	r3, r3, #16
 800271e:	f003 0303 	and.w	r3, r3, #3
 8002722:	3301      	adds	r3, #1
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002728:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800272a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800272c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002730:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002732:	e002      	b.n	800273a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002734:	4b05      	ldr	r3, [pc, #20]	@ (800274c <HAL_RCC_GetSysClockFreq+0x204>)
 8002736:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002738:	bf00      	nop
    }
  }
  return sysclockfreq;
 800273a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800273c:	4618      	mov	r0, r3
 800273e:	3750      	adds	r7, #80	@ 0x50
 8002740:	46bd      	mov	sp, r7
 8002742:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002746:	bf00      	nop
 8002748:	40023800 	.word	0x40023800
 800274c:	00f42400 	.word	0x00f42400
 8002750:	007a1200 	.word	0x007a1200

08002754 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002758:	4b03      	ldr	r3, [pc, #12]	@ (8002768 <HAL_RCC_GetHCLKFreq+0x14>)
 800275a:	681b      	ldr	r3, [r3, #0]
}
 800275c:	4618      	mov	r0, r3
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	20000008 	.word	0x20000008

0800276c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002770:	f7ff fff0 	bl	8002754 <HAL_RCC_GetHCLKFreq>
 8002774:	4602      	mov	r2, r0
 8002776:	4b05      	ldr	r3, [pc, #20]	@ (800278c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	0a9b      	lsrs	r3, r3, #10
 800277c:	f003 0307 	and.w	r3, r3, #7
 8002780:	4903      	ldr	r1, [pc, #12]	@ (8002790 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002782:	5ccb      	ldrb	r3, [r1, r3]
 8002784:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002788:	4618      	mov	r0, r3
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40023800 	.word	0x40023800
 8002790:	08004bfc 	.word	0x08004bfc

08002794 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002798:	f7ff ffdc 	bl	8002754 <HAL_RCC_GetHCLKFreq>
 800279c:	4602      	mov	r2, r0
 800279e:	4b05      	ldr	r3, [pc, #20]	@ (80027b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	0b5b      	lsrs	r3, r3, #13
 80027a4:	f003 0307 	and.w	r3, r3, #7
 80027a8:	4903      	ldr	r1, [pc, #12]	@ (80027b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027aa:	5ccb      	ldrb	r3, [r1, r3]
 80027ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40023800 	.word	0x40023800
 80027b8:	08004bfc 	.word	0x08004bfc

080027bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e041      	b.n	8002852 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d106      	bne.n	80027e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f7fe fdf8 	bl	80013d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2202      	movs	r2, #2
 80027ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3304      	adds	r3, #4
 80027f8:	4619      	mov	r1, r3
 80027fa:	4610      	mov	r0, r2
 80027fc:	f000 fdb6 	bl	800336c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
	...

0800285c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2b01      	cmp	r3, #1
 800286e:	d001      	beq.n	8002874 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e044      	b.n	80028fe <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2202      	movs	r2, #2
 8002878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68da      	ldr	r2, [r3, #12]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f042 0201 	orr.w	r2, r2, #1
 800288a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a1e      	ldr	r2, [pc, #120]	@ (800290c <HAL_TIM_Base_Start_IT+0xb0>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d018      	beq.n	80028c8 <HAL_TIM_Base_Start_IT+0x6c>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800289e:	d013      	beq.n	80028c8 <HAL_TIM_Base_Start_IT+0x6c>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a1a      	ldr	r2, [pc, #104]	@ (8002910 <HAL_TIM_Base_Start_IT+0xb4>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d00e      	beq.n	80028c8 <HAL_TIM_Base_Start_IT+0x6c>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a19      	ldr	r2, [pc, #100]	@ (8002914 <HAL_TIM_Base_Start_IT+0xb8>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d009      	beq.n	80028c8 <HAL_TIM_Base_Start_IT+0x6c>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a17      	ldr	r2, [pc, #92]	@ (8002918 <HAL_TIM_Base_Start_IT+0xbc>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d004      	beq.n	80028c8 <HAL_TIM_Base_Start_IT+0x6c>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a16      	ldr	r2, [pc, #88]	@ (800291c <HAL_TIM_Base_Start_IT+0xc0>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d111      	bne.n	80028ec <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 0307 	and.w	r3, r3, #7
 80028d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2b06      	cmp	r3, #6
 80028d8:	d010      	beq.n	80028fc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f042 0201 	orr.w	r2, r2, #1
 80028e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ea:	e007      	b.n	80028fc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f042 0201 	orr.w	r2, r2, #1
 80028fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3714      	adds	r7, #20
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	40010000 	.word	0x40010000
 8002910:	40000400 	.word	0x40000400
 8002914:	40000800 	.word	0x40000800
 8002918:	40000c00 	.word	0x40000c00
 800291c:	40014000 	.word	0x40014000

08002920 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e041      	b.n	80029b6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d106      	bne.n	800294c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 f839 	bl	80029be <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2202      	movs	r2, #2
 8002950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3304      	adds	r3, #4
 800295c:	4619      	mov	r1, r3
 800295e:	4610      	mov	r0, r2
 8002960:	f000 fd04 	bl	800336c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80029be:	b480      	push	{r7}
 80029c0:	b083      	sub	sp, #12
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
	...

080029d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d109      	bne.n	80029f8 <HAL_TIM_PWM_Start+0x24>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	bf14      	ite	ne
 80029f0:	2301      	movne	r3, #1
 80029f2:	2300      	moveq	r3, #0
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	e022      	b.n	8002a3e <HAL_TIM_PWM_Start+0x6a>
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	d109      	bne.n	8002a12 <HAL_TIM_PWM_Start+0x3e>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	bf14      	ite	ne
 8002a0a:	2301      	movne	r3, #1
 8002a0c:	2300      	moveq	r3, #0
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	e015      	b.n	8002a3e <HAL_TIM_PWM_Start+0x6a>
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	2b08      	cmp	r3, #8
 8002a16:	d109      	bne.n	8002a2c <HAL_TIM_PWM_Start+0x58>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	bf14      	ite	ne
 8002a24:	2301      	movne	r3, #1
 8002a26:	2300      	moveq	r3, #0
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	e008      	b.n	8002a3e <HAL_TIM_PWM_Start+0x6a>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	bf14      	ite	ne
 8002a38:	2301      	movne	r3, #1
 8002a3a:	2300      	moveq	r3, #0
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e068      	b.n	8002b18 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d104      	bne.n	8002a56 <HAL_TIM_PWM_Start+0x82>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2202      	movs	r2, #2
 8002a50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a54:	e013      	b.n	8002a7e <HAL_TIM_PWM_Start+0xaa>
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	d104      	bne.n	8002a66 <HAL_TIM_PWM_Start+0x92>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2202      	movs	r2, #2
 8002a60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a64:	e00b      	b.n	8002a7e <HAL_TIM_PWM_Start+0xaa>
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	d104      	bne.n	8002a76 <HAL_TIM_PWM_Start+0xa2>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2202      	movs	r2, #2
 8002a70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a74:	e003      	b.n	8002a7e <HAL_TIM_PWM_Start+0xaa>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2202      	movs	r2, #2
 8002a7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2201      	movs	r2, #1
 8002a84:	6839      	ldr	r1, [r7, #0]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f000 ff16 	bl	80038b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a23      	ldr	r2, [pc, #140]	@ (8002b20 <HAL_TIM_PWM_Start+0x14c>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d107      	bne.n	8002aa6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002aa4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a1d      	ldr	r2, [pc, #116]	@ (8002b20 <HAL_TIM_PWM_Start+0x14c>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d018      	beq.n	8002ae2 <HAL_TIM_PWM_Start+0x10e>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ab8:	d013      	beq.n	8002ae2 <HAL_TIM_PWM_Start+0x10e>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a19      	ldr	r2, [pc, #100]	@ (8002b24 <HAL_TIM_PWM_Start+0x150>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d00e      	beq.n	8002ae2 <HAL_TIM_PWM_Start+0x10e>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a17      	ldr	r2, [pc, #92]	@ (8002b28 <HAL_TIM_PWM_Start+0x154>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d009      	beq.n	8002ae2 <HAL_TIM_PWM_Start+0x10e>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a16      	ldr	r2, [pc, #88]	@ (8002b2c <HAL_TIM_PWM_Start+0x158>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d004      	beq.n	8002ae2 <HAL_TIM_PWM_Start+0x10e>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a14      	ldr	r2, [pc, #80]	@ (8002b30 <HAL_TIM_PWM_Start+0x15c>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d111      	bne.n	8002b06 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f003 0307 	and.w	r3, r3, #7
 8002aec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2b06      	cmp	r3, #6
 8002af2:	d010      	beq.n	8002b16 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f042 0201 	orr.w	r2, r2, #1
 8002b02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b04:	e007      	b.n	8002b16 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f042 0201 	orr.w	r2, r2, #1
 8002b14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	40010000 	.word	0x40010000
 8002b24:	40000400 	.word	0x40000400
 8002b28:	40000800 	.word	0x40000800
 8002b2c:	40000c00 	.word	0x40000c00
 8002b30:	40014000 	.word	0x40014000

08002b34 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2200      	movs	r2, #0
 8002b44:	6839      	ldr	r1, [r7, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f000 feb6 	bl	80038b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a29      	ldr	r2, [pc, #164]	@ (8002bf8 <HAL_TIM_PWM_Stop+0xc4>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d117      	bne.n	8002b86 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	6a1a      	ldr	r2, [r3, #32]
 8002b5c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002b60:	4013      	ands	r3, r2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10f      	bne.n	8002b86 <HAL_TIM_PWM_Stop+0x52>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6a1a      	ldr	r2, [r3, #32]
 8002b6c:	f240 4344 	movw	r3, #1092	@ 0x444
 8002b70:	4013      	ands	r3, r2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d107      	bne.n	8002b86 <HAL_TIM_PWM_Stop+0x52>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b84:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	6a1a      	ldr	r2, [r3, #32]
 8002b8c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002b90:	4013      	ands	r3, r2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10f      	bne.n	8002bb6 <HAL_TIM_PWM_Stop+0x82>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	6a1a      	ldr	r2, [r3, #32]
 8002b9c:	f240 4344 	movw	r3, #1092	@ 0x444
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d107      	bne.n	8002bb6 <HAL_TIM_PWM_Stop+0x82>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f022 0201 	bic.w	r2, r2, #1
 8002bb4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d104      	bne.n	8002bc6 <HAL_TIM_PWM_Stop+0x92>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002bc4:	e013      	b.n	8002bee <HAL_TIM_PWM_Stop+0xba>
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	2b04      	cmp	r3, #4
 8002bca:	d104      	bne.n	8002bd6 <HAL_TIM_PWM_Stop+0xa2>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002bd4:	e00b      	b.n	8002bee <HAL_TIM_PWM_Stop+0xba>
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	2b08      	cmp	r3, #8
 8002bda:	d104      	bne.n	8002be6 <HAL_TIM_PWM_Stop+0xb2>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002be4:	e003      	b.n	8002bee <HAL_TIM_PWM_Stop+0xba>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	40010000 	.word	0x40010000

08002bfc <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c06:	2300      	movs	r3, #0
 8002c08:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d109      	bne.n	8002c24 <HAL_TIM_PWM_Start_IT+0x28>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	bf14      	ite	ne
 8002c1c:	2301      	movne	r3, #1
 8002c1e:	2300      	moveq	r3, #0
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	e022      	b.n	8002c6a <HAL_TIM_PWM_Start_IT+0x6e>
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	d109      	bne.n	8002c3e <HAL_TIM_PWM_Start_IT+0x42>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	bf14      	ite	ne
 8002c36:	2301      	movne	r3, #1
 8002c38:	2300      	moveq	r3, #0
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	e015      	b.n	8002c6a <HAL_TIM_PWM_Start_IT+0x6e>
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	2b08      	cmp	r3, #8
 8002c42:	d109      	bne.n	8002c58 <HAL_TIM_PWM_Start_IT+0x5c>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	bf14      	ite	ne
 8002c50:	2301      	movne	r3, #1
 8002c52:	2300      	moveq	r3, #0
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	e008      	b.n	8002c6a <HAL_TIM_PWM_Start_IT+0x6e>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	bf14      	ite	ne
 8002c64:	2301      	movne	r3, #1
 8002c66:	2300      	moveq	r3, #0
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e0b3      	b.n	8002dda <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d104      	bne.n	8002c82 <HAL_TIM_PWM_Start_IT+0x86>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c80:	e013      	b.n	8002caa <HAL_TIM_PWM_Start_IT+0xae>
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	2b04      	cmp	r3, #4
 8002c86:	d104      	bne.n	8002c92 <HAL_TIM_PWM_Start_IT+0x96>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c90:	e00b      	b.n	8002caa <HAL_TIM_PWM_Start_IT+0xae>
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	2b08      	cmp	r3, #8
 8002c96:	d104      	bne.n	8002ca2 <HAL_TIM_PWM_Start_IT+0xa6>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ca0:	e003      	b.n	8002caa <HAL_TIM_PWM_Start_IT+0xae>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2202      	movs	r2, #2
 8002ca6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	2b0c      	cmp	r3, #12
 8002cae:	d841      	bhi.n	8002d34 <HAL_TIM_PWM_Start_IT+0x138>
 8002cb0:	a201      	add	r2, pc, #4	@ (adr r2, 8002cb8 <HAL_TIM_PWM_Start_IT+0xbc>)
 8002cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb6:	bf00      	nop
 8002cb8:	08002ced 	.word	0x08002ced
 8002cbc:	08002d35 	.word	0x08002d35
 8002cc0:	08002d35 	.word	0x08002d35
 8002cc4:	08002d35 	.word	0x08002d35
 8002cc8:	08002cff 	.word	0x08002cff
 8002ccc:	08002d35 	.word	0x08002d35
 8002cd0:	08002d35 	.word	0x08002d35
 8002cd4:	08002d35 	.word	0x08002d35
 8002cd8:	08002d11 	.word	0x08002d11
 8002cdc:	08002d35 	.word	0x08002d35
 8002ce0:	08002d35 	.word	0x08002d35
 8002ce4:	08002d35 	.word	0x08002d35
 8002ce8:	08002d23 	.word	0x08002d23
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68da      	ldr	r2, [r3, #12]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f042 0202 	orr.w	r2, r2, #2
 8002cfa:	60da      	str	r2, [r3, #12]
      break;
 8002cfc:	e01d      	b.n	8002d3a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68da      	ldr	r2, [r3, #12]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f042 0204 	orr.w	r2, r2, #4
 8002d0c:	60da      	str	r2, [r3, #12]
      break;
 8002d0e:	e014      	b.n	8002d3a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68da      	ldr	r2, [r3, #12]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f042 0208 	orr.w	r2, r2, #8
 8002d1e:	60da      	str	r2, [r3, #12]
      break;
 8002d20:	e00b      	b.n	8002d3a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68da      	ldr	r2, [r3, #12]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f042 0210 	orr.w	r2, r2, #16
 8002d30:	60da      	str	r2, [r3, #12]
      break;
 8002d32:	e002      	b.n	8002d3a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	73fb      	strb	r3, [r7, #15]
      break;
 8002d38:	bf00      	nop
  }

  if (status == HAL_OK)
 8002d3a:	7bfb      	ldrb	r3, [r7, #15]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d14b      	bne.n	8002dd8 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2201      	movs	r2, #1
 8002d46:	6839      	ldr	r1, [r7, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f000 fdb5 	bl	80038b8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a24      	ldr	r2, [pc, #144]	@ (8002de4 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d107      	bne.n	8002d68 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d66:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a1d      	ldr	r2, [pc, #116]	@ (8002de4 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d018      	beq.n	8002da4 <HAL_TIM_PWM_Start_IT+0x1a8>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d7a:	d013      	beq.n	8002da4 <HAL_TIM_PWM_Start_IT+0x1a8>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a19      	ldr	r2, [pc, #100]	@ (8002de8 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d00e      	beq.n	8002da4 <HAL_TIM_PWM_Start_IT+0x1a8>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a18      	ldr	r2, [pc, #96]	@ (8002dec <HAL_TIM_PWM_Start_IT+0x1f0>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d009      	beq.n	8002da4 <HAL_TIM_PWM_Start_IT+0x1a8>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a16      	ldr	r2, [pc, #88]	@ (8002df0 <HAL_TIM_PWM_Start_IT+0x1f4>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d004      	beq.n	8002da4 <HAL_TIM_PWM_Start_IT+0x1a8>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a15      	ldr	r2, [pc, #84]	@ (8002df4 <HAL_TIM_PWM_Start_IT+0x1f8>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d111      	bne.n	8002dc8 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f003 0307 	and.w	r3, r3, #7
 8002dae:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	2b06      	cmp	r3, #6
 8002db4:	d010      	beq.n	8002dd8 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f042 0201 	orr.w	r2, r2, #1
 8002dc4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dc6:	e007      	b.n	8002dd8 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f042 0201 	orr.w	r2, r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	40010000 	.word	0x40010000
 8002de8:	40000400 	.word	0x40000400
 8002dec:	40000800 	.word	0x40000800
 8002df0:	40000c00 	.word	0x40000c00
 8002df4:	40014000 	.word	0x40014000

08002df8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d122      	bne.n	8002e54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d11b      	bne.n	8002e54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f06f 0202 	mvn.w	r2, #2
 8002e24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	f003 0303 	and.w	r3, r3, #3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d003      	beq.n	8002e42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 fa77 	bl	800332e <HAL_TIM_IC_CaptureCallback>
 8002e40:	e005      	b.n	8002e4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 fa69 	bl	800331a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 fa7a 	bl	8003342 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	f003 0304 	and.w	r3, r3, #4
 8002e5e:	2b04      	cmp	r3, #4
 8002e60:	d122      	bne.n	8002ea8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	f003 0304 	and.w	r3, r3, #4
 8002e6c:	2b04      	cmp	r3, #4
 8002e6e:	d11b      	bne.n	8002ea8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f06f 0204 	mvn.w	r2, #4
 8002e78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2202      	movs	r2, #2
 8002e7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 fa4d 	bl	800332e <HAL_TIM_IC_CaptureCallback>
 8002e94:	e005      	b.n	8002ea2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 fa3f 	bl	800331a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f000 fa50 	bl	8003342 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	f003 0308 	and.w	r3, r3, #8
 8002eb2:	2b08      	cmp	r3, #8
 8002eb4:	d122      	bne.n	8002efc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	f003 0308 	and.w	r3, r3, #8
 8002ec0:	2b08      	cmp	r3, #8
 8002ec2:	d11b      	bne.n	8002efc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f06f 0208 	mvn.w	r2, #8
 8002ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2204      	movs	r2, #4
 8002ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	69db      	ldr	r3, [r3, #28]
 8002eda:	f003 0303 	and.w	r3, r3, #3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d003      	beq.n	8002eea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 fa23 	bl	800332e <HAL_TIM_IC_CaptureCallback>
 8002ee8:	e005      	b.n	8002ef6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 fa15 	bl	800331a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 fa26 	bl	8003342 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	f003 0310 	and.w	r3, r3, #16
 8002f06:	2b10      	cmp	r3, #16
 8002f08:	d122      	bne.n	8002f50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	f003 0310 	and.w	r3, r3, #16
 8002f14:	2b10      	cmp	r3, #16
 8002f16:	d11b      	bne.n	8002f50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f06f 0210 	mvn.w	r2, #16
 8002f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2208      	movs	r2, #8
 8002f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 f9f9 	bl	800332e <HAL_TIM_IC_CaptureCallback>
 8002f3c:	e005      	b.n	8002f4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 f9eb 	bl	800331a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 f9fc 	bl	8003342 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d10e      	bne.n	8002f7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	f003 0301 	and.w	r3, r3, #1
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d107      	bne.n	8002f7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f06f 0201 	mvn.w	r2, #1
 8002f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f7fd fca6 	bl	80008c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f86:	2b80      	cmp	r3, #128	@ 0x80
 8002f88:	d10e      	bne.n	8002fa8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f94:	2b80      	cmp	r3, #128	@ 0x80
 8002f96:	d107      	bne.n	8002fa8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 fd78 	bl	8003a98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fb2:	2b40      	cmp	r3, #64	@ 0x40
 8002fb4:	d10e      	bne.n	8002fd4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fc0:	2b40      	cmp	r3, #64	@ 0x40
 8002fc2:	d107      	bne.n	8002fd4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 f9c1 	bl	8003356 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	f003 0320 	and.w	r3, r3, #32
 8002fde:	2b20      	cmp	r3, #32
 8002fe0:	d10e      	bne.n	8003000 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	f003 0320 	and.w	r3, r3, #32
 8002fec:	2b20      	cmp	r3, #32
 8002fee:	d107      	bne.n	8003000 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f06f 0220 	mvn.w	r2, #32
 8002ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 fd42 	bl	8003a84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003000:	bf00      	nop
 8003002:	3708      	adds	r7, #8
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b086      	sub	sp, #24
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003014:	2300      	movs	r3, #0
 8003016:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800301e:	2b01      	cmp	r3, #1
 8003020:	d101      	bne.n	8003026 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003022:	2302      	movs	r3, #2
 8003024:	e0ae      	b.n	8003184 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2b0c      	cmp	r3, #12
 8003032:	f200 809f 	bhi.w	8003174 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003036:	a201      	add	r2, pc, #4	@ (adr r2, 800303c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800303c:	08003071 	.word	0x08003071
 8003040:	08003175 	.word	0x08003175
 8003044:	08003175 	.word	0x08003175
 8003048:	08003175 	.word	0x08003175
 800304c:	080030b1 	.word	0x080030b1
 8003050:	08003175 	.word	0x08003175
 8003054:	08003175 	.word	0x08003175
 8003058:	08003175 	.word	0x08003175
 800305c:	080030f3 	.word	0x080030f3
 8003060:	08003175 	.word	0x08003175
 8003064:	08003175 	.word	0x08003175
 8003068:	08003175 	.word	0x08003175
 800306c:	08003133 	.word	0x08003133
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68b9      	ldr	r1, [r7, #8]
 8003076:	4618      	mov	r0, r3
 8003078:	f000 f9f8 	bl	800346c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	699a      	ldr	r2, [r3, #24]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f042 0208 	orr.w	r2, r2, #8
 800308a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	699a      	ldr	r2, [r3, #24]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 0204 	bic.w	r2, r2, #4
 800309a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6999      	ldr	r1, [r3, #24]
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	691a      	ldr	r2, [r3, #16]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	619a      	str	r2, [r3, #24]
      break;
 80030ae:	e064      	b.n	800317a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68b9      	ldr	r1, [r7, #8]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f000 fa3e 	bl	8003538 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	699a      	ldr	r2, [r3, #24]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	699a      	ldr	r2, [r3, #24]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6999      	ldr	r1, [r3, #24]
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	021a      	lsls	r2, r3, #8
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	430a      	orrs	r2, r1
 80030ee:	619a      	str	r2, [r3, #24]
      break;
 80030f0:	e043      	b.n	800317a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68b9      	ldr	r1, [r7, #8]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f000 fa89 	bl	8003610 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	69da      	ldr	r2, [r3, #28]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f042 0208 	orr.w	r2, r2, #8
 800310c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	69da      	ldr	r2, [r3, #28]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 0204 	bic.w	r2, r2, #4
 800311c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	69d9      	ldr	r1, [r3, #28]
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	691a      	ldr	r2, [r3, #16]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	430a      	orrs	r2, r1
 800312e:	61da      	str	r2, [r3, #28]
      break;
 8003130:	e023      	b.n	800317a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68b9      	ldr	r1, [r7, #8]
 8003138:	4618      	mov	r0, r3
 800313a:	f000 fad3 	bl	80036e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	69da      	ldr	r2, [r3, #28]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800314c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	69da      	ldr	r2, [r3, #28]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800315c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	69d9      	ldr	r1, [r3, #28]
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	021a      	lsls	r2, r3, #8
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	430a      	orrs	r2, r1
 8003170:	61da      	str	r2, [r3, #28]
      break;
 8003172:	e002      	b.n	800317a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	75fb      	strb	r3, [r7, #23]
      break;
 8003178:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003182:	7dfb      	ldrb	r3, [r7, #23]
}
 8003184:	4618      	mov	r0, r3
 8003186:	3718      	adds	r7, #24
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003196:	2300      	movs	r3, #0
 8003198:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d101      	bne.n	80031a8 <HAL_TIM_ConfigClockSource+0x1c>
 80031a4:	2302      	movs	r3, #2
 80031a6:	e0b4      	b.n	8003312 <HAL_TIM_ConfigClockSource+0x186>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2202      	movs	r2, #2
 80031b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80031c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80031ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68ba      	ldr	r2, [r7, #8]
 80031d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031e0:	d03e      	beq.n	8003260 <HAL_TIM_ConfigClockSource+0xd4>
 80031e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031e6:	f200 8087 	bhi.w	80032f8 <HAL_TIM_ConfigClockSource+0x16c>
 80031ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031ee:	f000 8086 	beq.w	80032fe <HAL_TIM_ConfigClockSource+0x172>
 80031f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031f6:	d87f      	bhi.n	80032f8 <HAL_TIM_ConfigClockSource+0x16c>
 80031f8:	2b70      	cmp	r3, #112	@ 0x70
 80031fa:	d01a      	beq.n	8003232 <HAL_TIM_ConfigClockSource+0xa6>
 80031fc:	2b70      	cmp	r3, #112	@ 0x70
 80031fe:	d87b      	bhi.n	80032f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003200:	2b60      	cmp	r3, #96	@ 0x60
 8003202:	d050      	beq.n	80032a6 <HAL_TIM_ConfigClockSource+0x11a>
 8003204:	2b60      	cmp	r3, #96	@ 0x60
 8003206:	d877      	bhi.n	80032f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003208:	2b50      	cmp	r3, #80	@ 0x50
 800320a:	d03c      	beq.n	8003286 <HAL_TIM_ConfigClockSource+0xfa>
 800320c:	2b50      	cmp	r3, #80	@ 0x50
 800320e:	d873      	bhi.n	80032f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003210:	2b40      	cmp	r3, #64	@ 0x40
 8003212:	d058      	beq.n	80032c6 <HAL_TIM_ConfigClockSource+0x13a>
 8003214:	2b40      	cmp	r3, #64	@ 0x40
 8003216:	d86f      	bhi.n	80032f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003218:	2b30      	cmp	r3, #48	@ 0x30
 800321a:	d064      	beq.n	80032e6 <HAL_TIM_ConfigClockSource+0x15a>
 800321c:	2b30      	cmp	r3, #48	@ 0x30
 800321e:	d86b      	bhi.n	80032f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003220:	2b20      	cmp	r3, #32
 8003222:	d060      	beq.n	80032e6 <HAL_TIM_ConfigClockSource+0x15a>
 8003224:	2b20      	cmp	r3, #32
 8003226:	d867      	bhi.n	80032f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003228:	2b00      	cmp	r3, #0
 800322a:	d05c      	beq.n	80032e6 <HAL_TIM_ConfigClockSource+0x15a>
 800322c:	2b10      	cmp	r3, #16
 800322e:	d05a      	beq.n	80032e6 <HAL_TIM_ConfigClockSource+0x15a>
 8003230:	e062      	b.n	80032f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6818      	ldr	r0, [r3, #0]
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	6899      	ldr	r1, [r3, #8]
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685a      	ldr	r2, [r3, #4]
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	f000 fb19 	bl	8003878 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003254:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	609a      	str	r2, [r3, #8]
      break;
 800325e:	e04f      	b.n	8003300 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6818      	ldr	r0, [r3, #0]
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	6899      	ldr	r1, [r3, #8]
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685a      	ldr	r2, [r3, #4]
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	f000 fb02 	bl	8003878 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	689a      	ldr	r2, [r3, #8]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003282:	609a      	str	r2, [r3, #8]
      break;
 8003284:	e03c      	b.n	8003300 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6818      	ldr	r0, [r3, #0]
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	6859      	ldr	r1, [r3, #4]
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	461a      	mov	r2, r3
 8003294:	f000 fa76 	bl	8003784 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2150      	movs	r1, #80	@ 0x50
 800329e:	4618      	mov	r0, r3
 80032a0:	f000 facf 	bl	8003842 <TIM_ITRx_SetConfig>
      break;
 80032a4:	e02c      	b.n	8003300 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6818      	ldr	r0, [r3, #0]
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	6859      	ldr	r1, [r3, #4]
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	461a      	mov	r2, r3
 80032b4:	f000 fa95 	bl	80037e2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2160      	movs	r1, #96	@ 0x60
 80032be:	4618      	mov	r0, r3
 80032c0:	f000 fabf 	bl	8003842 <TIM_ITRx_SetConfig>
      break;
 80032c4:	e01c      	b.n	8003300 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6818      	ldr	r0, [r3, #0]
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	6859      	ldr	r1, [r3, #4]
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	461a      	mov	r2, r3
 80032d4:	f000 fa56 	bl	8003784 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2140      	movs	r1, #64	@ 0x40
 80032de:	4618      	mov	r0, r3
 80032e0:	f000 faaf 	bl	8003842 <TIM_ITRx_SetConfig>
      break;
 80032e4:	e00c      	b.n	8003300 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4619      	mov	r1, r3
 80032f0:	4610      	mov	r0, r2
 80032f2:	f000 faa6 	bl	8003842 <TIM_ITRx_SetConfig>
      break;
 80032f6:	e003      	b.n	8003300 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	73fb      	strb	r3, [r7, #15]
      break;
 80032fc:	e000      	b.n	8003300 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80032fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003310:	7bfb      	ldrb	r3, [r7, #15]
}
 8003312:	4618      	mov	r0, r3
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800331a:	b480      	push	{r7}
 800331c:	b083      	sub	sp, #12
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003322:	bf00      	nop
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr

0800332e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800332e:	b480      	push	{r7}
 8003330:	b083      	sub	sp, #12
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003336:	bf00      	nop
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr

08003342 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003342:	b480      	push	{r7}
 8003344:	b083      	sub	sp, #12
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800334a:	bf00      	nop
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr

08003356 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003356:	b480      	push	{r7}
 8003358:	b083      	sub	sp, #12
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800335e:	bf00      	nop
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
	...

0800336c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800336c:	b480      	push	{r7}
 800336e:	b085      	sub	sp, #20
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a34      	ldr	r2, [pc, #208]	@ (8003450 <TIM_Base_SetConfig+0xe4>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d00f      	beq.n	80033a4 <TIM_Base_SetConfig+0x38>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800338a:	d00b      	beq.n	80033a4 <TIM_Base_SetConfig+0x38>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a31      	ldr	r2, [pc, #196]	@ (8003454 <TIM_Base_SetConfig+0xe8>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d007      	beq.n	80033a4 <TIM_Base_SetConfig+0x38>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a30      	ldr	r2, [pc, #192]	@ (8003458 <TIM_Base_SetConfig+0xec>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d003      	beq.n	80033a4 <TIM_Base_SetConfig+0x38>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a2f      	ldr	r2, [pc, #188]	@ (800345c <TIM_Base_SetConfig+0xf0>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d108      	bne.n	80033b6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a25      	ldr	r2, [pc, #148]	@ (8003450 <TIM_Base_SetConfig+0xe4>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d01b      	beq.n	80033f6 <TIM_Base_SetConfig+0x8a>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033c4:	d017      	beq.n	80033f6 <TIM_Base_SetConfig+0x8a>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a22      	ldr	r2, [pc, #136]	@ (8003454 <TIM_Base_SetConfig+0xe8>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d013      	beq.n	80033f6 <TIM_Base_SetConfig+0x8a>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a21      	ldr	r2, [pc, #132]	@ (8003458 <TIM_Base_SetConfig+0xec>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d00f      	beq.n	80033f6 <TIM_Base_SetConfig+0x8a>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a20      	ldr	r2, [pc, #128]	@ (800345c <TIM_Base_SetConfig+0xf0>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d00b      	beq.n	80033f6 <TIM_Base_SetConfig+0x8a>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a1f      	ldr	r2, [pc, #124]	@ (8003460 <TIM_Base_SetConfig+0xf4>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d007      	beq.n	80033f6 <TIM_Base_SetConfig+0x8a>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a1e      	ldr	r2, [pc, #120]	@ (8003464 <TIM_Base_SetConfig+0xf8>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d003      	beq.n	80033f6 <TIM_Base_SetConfig+0x8a>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a1d      	ldr	r2, [pc, #116]	@ (8003468 <TIM_Base_SetConfig+0xfc>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d108      	bne.n	8003408 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	4313      	orrs	r3, r2
 8003406:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	4313      	orrs	r3, r2
 8003414:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	689a      	ldr	r2, [r3, #8]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a08      	ldr	r2, [pc, #32]	@ (8003450 <TIM_Base_SetConfig+0xe4>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d103      	bne.n	800343c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	691a      	ldr	r2, [r3, #16]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	615a      	str	r2, [r3, #20]
}
 8003442:	bf00      	nop
 8003444:	3714      	adds	r7, #20
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	40010000 	.word	0x40010000
 8003454:	40000400 	.word	0x40000400
 8003458:	40000800 	.word	0x40000800
 800345c:	40000c00 	.word	0x40000c00
 8003460:	40014000 	.word	0x40014000
 8003464:	40014400 	.word	0x40014400
 8003468:	40014800 	.word	0x40014800

0800346c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800346c:	b480      	push	{r7}
 800346e:	b087      	sub	sp, #28
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a1b      	ldr	r3, [r3, #32]
 800347a:	f023 0201 	bic.w	r2, r3, #1
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800349a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f023 0303 	bic.w	r3, r3, #3
 80034a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	f023 0302 	bic.w	r3, r3, #2
 80034b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	4313      	orrs	r3, r2
 80034be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a1c      	ldr	r2, [pc, #112]	@ (8003534 <TIM_OC1_SetConfig+0xc8>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d10c      	bne.n	80034e2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	f023 0308 	bic.w	r3, r3, #8
 80034ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f023 0304 	bic.w	r3, r3, #4
 80034e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a13      	ldr	r2, [pc, #76]	@ (8003534 <TIM_OC1_SetConfig+0xc8>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d111      	bne.n	800350e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80034f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	4313      	orrs	r3, r2
 8003502:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	4313      	orrs	r3, r2
 800350c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	697a      	ldr	r2, [r7, #20]
 8003526:	621a      	str	r2, [r3, #32]
}
 8003528:	bf00      	nop
 800352a:	371c      	adds	r7, #28
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr
 8003534:	40010000 	.word	0x40010000

08003538 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003538:	b480      	push	{r7}
 800353a:	b087      	sub	sp, #28
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	f023 0210 	bic.w	r2, r3, #16
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800356e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	021b      	lsls	r3, r3, #8
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	4313      	orrs	r3, r2
 800357a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	f023 0320 	bic.w	r3, r3, #32
 8003582:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	011b      	lsls	r3, r3, #4
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	4313      	orrs	r3, r2
 800358e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a1e      	ldr	r2, [pc, #120]	@ (800360c <TIM_OC2_SetConfig+0xd4>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d10d      	bne.n	80035b4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800359e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	011b      	lsls	r3, r3, #4
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80035b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a15      	ldr	r2, [pc, #84]	@ (800360c <TIM_OC2_SetConfig+0xd4>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d113      	bne.n	80035e4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80035c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80035ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	695b      	ldr	r3, [r3, #20]
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	621a      	str	r2, [r3, #32]
}
 80035fe:	bf00      	nop
 8003600:	371c      	adds	r7, #28
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	40010000 	.word	0x40010000

08003610 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003610:	b480      	push	{r7}
 8003612:	b087      	sub	sp, #28
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800363e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f023 0303 	bic.w	r3, r3, #3
 8003646:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	4313      	orrs	r3, r2
 8003650:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003658:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	021b      	lsls	r3, r3, #8
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	4313      	orrs	r3, r2
 8003664:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a1d      	ldr	r2, [pc, #116]	@ (80036e0 <TIM_OC3_SetConfig+0xd0>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d10d      	bne.n	800368a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003674:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	021b      	lsls	r3, r3, #8
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	4313      	orrs	r3, r2
 8003680:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003688:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a14      	ldr	r2, [pc, #80]	@ (80036e0 <TIM_OC3_SetConfig+0xd0>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d113      	bne.n	80036ba <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003698:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80036a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	011b      	lsls	r3, r3, #4
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	011b      	lsls	r3, r3, #4
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685a      	ldr	r2, [r3, #4]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	697a      	ldr	r2, [r7, #20]
 80036d2:	621a      	str	r2, [r3, #32]
}
 80036d4:	bf00      	nop
 80036d6:	371c      	adds	r7, #28
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr
 80036e0:	40010000 	.word	0x40010000

080036e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b087      	sub	sp, #28
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003712:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800371a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	021b      	lsls	r3, r3, #8
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	4313      	orrs	r3, r2
 8003726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800372e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	031b      	lsls	r3, r3, #12
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	4313      	orrs	r3, r2
 800373a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a10      	ldr	r2, [pc, #64]	@ (8003780 <TIM_OC4_SetConfig+0x9c>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d109      	bne.n	8003758 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800374a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	019b      	lsls	r3, r3, #6
 8003752:	697a      	ldr	r2, [r7, #20]
 8003754:	4313      	orrs	r3, r2
 8003756:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	621a      	str	r2, [r3, #32]
}
 8003772:	bf00      	nop
 8003774:	371c      	adds	r7, #28
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	40010000 	.word	0x40010000

08003784 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003784:	b480      	push	{r7}
 8003786:	b087      	sub	sp, #28
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6a1b      	ldr	r3, [r3, #32]
 8003794:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	f023 0201 	bic.w	r2, r3, #1
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	011b      	lsls	r3, r3, #4
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	f023 030a 	bic.w	r3, r3, #10
 80037c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	621a      	str	r2, [r3, #32]
}
 80037d6:	bf00      	nop
 80037d8:	371c      	adds	r7, #28
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr

080037e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037e2:	b480      	push	{r7}
 80037e4:	b087      	sub	sp, #28
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	60f8      	str	r0, [r7, #12]
 80037ea:	60b9      	str	r1, [r7, #8]
 80037ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	f023 0210 	bic.w	r2, r3, #16
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800380c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	031b      	lsls	r3, r3, #12
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	4313      	orrs	r3, r2
 8003816:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800381e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	011b      	lsls	r3, r3, #4
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	4313      	orrs	r3, r2
 8003828:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	621a      	str	r2, [r3, #32]
}
 8003836:	bf00      	nop
 8003838:	371c      	adds	r7, #28
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr

08003842 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003842:	b480      	push	{r7}
 8003844:	b085      	sub	sp, #20
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
 800384a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003858:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	4313      	orrs	r3, r2
 8003860:	f043 0307 	orr.w	r3, r3, #7
 8003864:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	609a      	str	r2, [r3, #8]
}
 800386c:	bf00      	nop
 800386e:	3714      	adds	r7, #20
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003878:	b480      	push	{r7}
 800387a:	b087      	sub	sp, #28
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
 8003884:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003892:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	021a      	lsls	r2, r3, #8
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	431a      	orrs	r2, r3
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	4313      	orrs	r3, r2
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	609a      	str	r2, [r3, #8]
}
 80038ac:	bf00      	nop
 80038ae:	371c      	adds	r7, #28
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b087      	sub	sp, #28
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	f003 031f 	and.w	r3, r3, #31
 80038ca:	2201      	movs	r2, #1
 80038cc:	fa02 f303 	lsl.w	r3, r2, r3
 80038d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6a1a      	ldr	r2, [r3, #32]
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	43db      	mvns	r3, r3
 80038da:	401a      	ands	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6a1a      	ldr	r2, [r3, #32]
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	f003 031f 	and.w	r3, r3, #31
 80038ea:	6879      	ldr	r1, [r7, #4]
 80038ec:	fa01 f303 	lsl.w	r3, r1, r3
 80038f0:	431a      	orrs	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	621a      	str	r2, [r3, #32]
}
 80038f6:	bf00      	nop
 80038f8:	371c      	adds	r7, #28
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
	...

08003904 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003914:	2b01      	cmp	r3, #1
 8003916:	d101      	bne.n	800391c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003918:	2302      	movs	r3, #2
 800391a:	e050      	b.n	80039be <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2202      	movs	r2, #2
 8003928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003942:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	4313      	orrs	r3, r2
 800394c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a1c      	ldr	r2, [pc, #112]	@ (80039cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d018      	beq.n	8003992 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003968:	d013      	beq.n	8003992 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a18      	ldr	r2, [pc, #96]	@ (80039d0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d00e      	beq.n	8003992 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a16      	ldr	r2, [pc, #88]	@ (80039d4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d009      	beq.n	8003992 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a15      	ldr	r2, [pc, #84]	@ (80039d8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d004      	beq.n	8003992 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a13      	ldr	r2, [pc, #76]	@ (80039dc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d10c      	bne.n	80039ac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003998:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	68ba      	ldr	r2, [r7, #8]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68ba      	ldr	r2, [r7, #8]
 80039aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3714      	adds	r7, #20
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	40010000 	.word	0x40010000
 80039d0:	40000400 	.word	0x40000400
 80039d4:	40000800 	.word	0x40000800
 80039d8:	40000c00 	.word	0x40000c00
 80039dc:	40014000 	.word	0x40014000

080039e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b085      	sub	sp, #20
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80039ea:	2300      	movs	r3, #0
 80039ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d101      	bne.n	80039fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80039f8:	2302      	movs	r3, #2
 80039fa:	e03d      	b.n	8003a78 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	695b      	ldr	r3, [r3, #20]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	69db      	ldr	r3, [r3, #28]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3714      	adds	r7, #20
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e03f      	b.n	8003b3e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d106      	bne.n	8003ad8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f7fd fd6c 	bl	80015b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2224      	movs	r2, #36	@ 0x24
 8003adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68da      	ldr	r2, [r3, #12]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003aee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 f929 	bl	8003d48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	691a      	ldr	r2, [r3, #16]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	695a      	ldr	r2, [r3, #20]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003b14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68da      	ldr	r2, [r3, #12]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2220      	movs	r2, #32
 8003b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2220      	movs	r2, #32
 8003b38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3708      	adds	r7, #8
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b08a      	sub	sp, #40	@ 0x28
 8003b4a:	af02      	add	r7, sp, #8
 8003b4c:	60f8      	str	r0, [r7, #12]
 8003b4e:	60b9      	str	r1, [r7, #8]
 8003b50:	603b      	str	r3, [r7, #0]
 8003b52:	4613      	mov	r3, r2
 8003b54:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b56:	2300      	movs	r3, #0
 8003b58:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b20      	cmp	r3, #32
 8003b64:	d17c      	bne.n	8003c60 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d002      	beq.n	8003b72 <HAL_UART_Transmit+0x2c>
 8003b6c:	88fb      	ldrh	r3, [r7, #6]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e075      	b.n	8003c62 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d101      	bne.n	8003b84 <HAL_UART_Transmit+0x3e>
 8003b80:	2302      	movs	r3, #2
 8003b82:	e06e      	b.n	8003c62 <HAL_UART_Transmit+0x11c>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2221      	movs	r2, #33	@ 0x21
 8003b96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b9a:	f7fd fe7f 	bl	800189c <HAL_GetTick>
 8003b9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	88fa      	ldrh	r2, [r7, #6]
 8003ba4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	88fa      	ldrh	r2, [r7, #6]
 8003baa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bb4:	d108      	bne.n	8003bc8 <HAL_UART_Transmit+0x82>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d104      	bne.n	8003bc8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	61bb      	str	r3, [r7, #24]
 8003bc6:	e003      	b.n	8003bd0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8003bd8:	e02a      	b.n	8003c30 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	9300      	str	r3, [sp, #0]
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	2200      	movs	r2, #0
 8003be2:	2180      	movs	r1, #128	@ 0x80
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f000 f840 	bl	8003c6a <UART_WaitOnFlagUntilTimeout>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d001      	beq.n	8003bf4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e036      	b.n	8003c62 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10b      	bne.n	8003c12 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	881b      	ldrh	r3, [r3, #0]
 8003bfe:	461a      	mov	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c08:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	3302      	adds	r3, #2
 8003c0e:	61bb      	str	r3, [r7, #24]
 8003c10:	e007      	b.n	8003c22 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	781a      	ldrb	r2, [r3, #0]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	3301      	adds	r3, #1
 8003c20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1cf      	bne.n	8003bda <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	9300      	str	r3, [sp, #0]
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	2200      	movs	r2, #0
 8003c42:	2140      	movs	r1, #64	@ 0x40
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f000 f810 	bl	8003c6a <UART_WaitOnFlagUntilTimeout>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d001      	beq.n	8003c54 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e006      	b.n	8003c62 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2220      	movs	r2, #32
 8003c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	e000      	b.n	8003c62 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003c60:	2302      	movs	r3, #2
  }
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3720      	adds	r7, #32
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b090      	sub	sp, #64	@ 0x40
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	60f8      	str	r0, [r7, #12]
 8003c72:	60b9      	str	r1, [r7, #8]
 8003c74:	603b      	str	r3, [r7, #0]
 8003c76:	4613      	mov	r3, r2
 8003c78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c7a:	e050      	b.n	8003d1e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c82:	d04c      	beq.n	8003d1e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d007      	beq.n	8003c9a <UART_WaitOnFlagUntilTimeout+0x30>
 8003c8a:	f7fd fe07 	bl	800189c <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d241      	bcs.n	8003d1e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	330c      	adds	r3, #12
 8003ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ca4:	e853 3f00 	ldrex	r3, [r3]
 8003ca8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cac:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003cb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	330c      	adds	r3, #12
 8003cb8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003cba:	637a      	str	r2, [r7, #52]	@ 0x34
 8003cbc:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cbe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003cc0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003cc2:	e841 2300 	strex	r3, r2, [r1]
 8003cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1e5      	bne.n	8003c9a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	3314      	adds	r3, #20
 8003cd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	e853 3f00 	ldrex	r3, [r3]
 8003cdc:	613b      	str	r3, [r7, #16]
   return(result);
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	f023 0301 	bic.w	r3, r3, #1
 8003ce4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	3314      	adds	r3, #20
 8003cec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003cee:	623a      	str	r2, [r7, #32]
 8003cf0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf2:	69f9      	ldr	r1, [r7, #28]
 8003cf4:	6a3a      	ldr	r2, [r7, #32]
 8003cf6:	e841 2300 	strex	r3, r2, [r1]
 8003cfa:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1e5      	bne.n	8003cce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2220      	movs	r2, #32
 8003d06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2220      	movs	r2, #32
 8003d0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e00f      	b.n	8003d3e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	4013      	ands	r3, r2
 8003d28:	68ba      	ldr	r2, [r7, #8]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	bf0c      	ite	eq
 8003d2e:	2301      	moveq	r3, #1
 8003d30:	2300      	movne	r3, #0
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	461a      	mov	r2, r3
 8003d36:	79fb      	ldrb	r3, [r7, #7]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d09f      	beq.n	8003c7c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3740      	adds	r7, #64	@ 0x40
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
	...

08003d48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d4c:	b0c0      	sub	sp, #256	@ 0x100
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d64:	68d9      	ldr	r1, [r3, #12]
 8003d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	ea40 0301 	orr.w	r3, r0, r1
 8003d70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d76:	689a      	ldr	r2, [r3, #8]
 8003d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	431a      	orrs	r2, r3
 8003d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d8c:	69db      	ldr	r3, [r3, #28]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003da0:	f021 010c 	bic.w	r1, r1, #12
 8003da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003dae:	430b      	orrs	r3, r1
 8003db0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc2:	6999      	ldr	r1, [r3, #24]
 8003dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	ea40 0301 	orr.w	r3, r0, r1
 8003dce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	4b8f      	ldr	r3, [pc, #572]	@ (8004014 <UART_SetConfig+0x2cc>)
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d005      	beq.n	8003de8 <UART_SetConfig+0xa0>
 8003ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	4b8d      	ldr	r3, [pc, #564]	@ (8004018 <UART_SetConfig+0x2d0>)
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d104      	bne.n	8003df2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003de8:	f7fe fcd4 	bl	8002794 <HAL_RCC_GetPCLK2Freq>
 8003dec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003df0:	e003      	b.n	8003dfa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003df2:	f7fe fcbb 	bl	800276c <HAL_RCC_GetPCLK1Freq>
 8003df6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dfe:	69db      	ldr	r3, [r3, #28]
 8003e00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e04:	f040 810c 	bne.w	8004020 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e12:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003e16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003e1a:	4622      	mov	r2, r4
 8003e1c:	462b      	mov	r3, r5
 8003e1e:	1891      	adds	r1, r2, r2
 8003e20:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003e22:	415b      	adcs	r3, r3
 8003e24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003e2a:	4621      	mov	r1, r4
 8003e2c:	eb12 0801 	adds.w	r8, r2, r1
 8003e30:	4629      	mov	r1, r5
 8003e32:	eb43 0901 	adc.w	r9, r3, r1
 8003e36:	f04f 0200 	mov.w	r2, #0
 8003e3a:	f04f 0300 	mov.w	r3, #0
 8003e3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e4a:	4690      	mov	r8, r2
 8003e4c:	4699      	mov	r9, r3
 8003e4e:	4623      	mov	r3, r4
 8003e50:	eb18 0303 	adds.w	r3, r8, r3
 8003e54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003e58:	462b      	mov	r3, r5
 8003e5a:	eb49 0303 	adc.w	r3, r9, r3
 8003e5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e6e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003e72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003e76:	460b      	mov	r3, r1
 8003e78:	18db      	adds	r3, r3, r3
 8003e7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	eb42 0303 	adc.w	r3, r2, r3
 8003e82:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003e88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003e8c:	f7fc fa08 	bl	80002a0 <__aeabi_uldivmod>
 8003e90:	4602      	mov	r2, r0
 8003e92:	460b      	mov	r3, r1
 8003e94:	4b61      	ldr	r3, [pc, #388]	@ (800401c <UART_SetConfig+0x2d4>)
 8003e96:	fba3 2302 	umull	r2, r3, r3, r2
 8003e9a:	095b      	lsrs	r3, r3, #5
 8003e9c:	011c      	lsls	r4, r3, #4
 8003e9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ea8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003eac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003eb0:	4642      	mov	r2, r8
 8003eb2:	464b      	mov	r3, r9
 8003eb4:	1891      	adds	r1, r2, r2
 8003eb6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003eb8:	415b      	adcs	r3, r3
 8003eba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ebc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003ec0:	4641      	mov	r1, r8
 8003ec2:	eb12 0a01 	adds.w	sl, r2, r1
 8003ec6:	4649      	mov	r1, r9
 8003ec8:	eb43 0b01 	adc.w	fp, r3, r1
 8003ecc:	f04f 0200 	mov.w	r2, #0
 8003ed0:	f04f 0300 	mov.w	r3, #0
 8003ed4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ed8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003edc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ee0:	4692      	mov	sl, r2
 8003ee2:	469b      	mov	fp, r3
 8003ee4:	4643      	mov	r3, r8
 8003ee6:	eb1a 0303 	adds.w	r3, sl, r3
 8003eea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003eee:	464b      	mov	r3, r9
 8003ef0:	eb4b 0303 	adc.w	r3, fp, r3
 8003ef4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f04:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003f08:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	18db      	adds	r3, r3, r3
 8003f10:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f12:	4613      	mov	r3, r2
 8003f14:	eb42 0303 	adc.w	r3, r2, r3
 8003f18:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003f1e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003f22:	f7fc f9bd 	bl	80002a0 <__aeabi_uldivmod>
 8003f26:	4602      	mov	r2, r0
 8003f28:	460b      	mov	r3, r1
 8003f2a:	4611      	mov	r1, r2
 8003f2c:	4b3b      	ldr	r3, [pc, #236]	@ (800401c <UART_SetConfig+0x2d4>)
 8003f2e:	fba3 2301 	umull	r2, r3, r3, r1
 8003f32:	095b      	lsrs	r3, r3, #5
 8003f34:	2264      	movs	r2, #100	@ 0x64
 8003f36:	fb02 f303 	mul.w	r3, r2, r3
 8003f3a:	1acb      	subs	r3, r1, r3
 8003f3c:	00db      	lsls	r3, r3, #3
 8003f3e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003f42:	4b36      	ldr	r3, [pc, #216]	@ (800401c <UART_SetConfig+0x2d4>)
 8003f44:	fba3 2302 	umull	r2, r3, r3, r2
 8003f48:	095b      	lsrs	r3, r3, #5
 8003f4a:	005b      	lsls	r3, r3, #1
 8003f4c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003f50:	441c      	add	r4, r3
 8003f52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f56:	2200      	movs	r2, #0
 8003f58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f5c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003f60:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003f64:	4642      	mov	r2, r8
 8003f66:	464b      	mov	r3, r9
 8003f68:	1891      	adds	r1, r2, r2
 8003f6a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003f6c:	415b      	adcs	r3, r3
 8003f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003f74:	4641      	mov	r1, r8
 8003f76:	1851      	adds	r1, r2, r1
 8003f78:	6339      	str	r1, [r7, #48]	@ 0x30
 8003f7a:	4649      	mov	r1, r9
 8003f7c:	414b      	adcs	r3, r1
 8003f7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f80:	f04f 0200 	mov.w	r2, #0
 8003f84:	f04f 0300 	mov.w	r3, #0
 8003f88:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003f8c:	4659      	mov	r1, fp
 8003f8e:	00cb      	lsls	r3, r1, #3
 8003f90:	4651      	mov	r1, sl
 8003f92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f96:	4651      	mov	r1, sl
 8003f98:	00ca      	lsls	r2, r1, #3
 8003f9a:	4610      	mov	r0, r2
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	4642      	mov	r2, r8
 8003fa2:	189b      	adds	r3, r3, r2
 8003fa4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003fa8:	464b      	mov	r3, r9
 8003faa:	460a      	mov	r2, r1
 8003fac:	eb42 0303 	adc.w	r3, r2, r3
 8003fb0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003fc0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003fc4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003fc8:	460b      	mov	r3, r1
 8003fca:	18db      	adds	r3, r3, r3
 8003fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fce:	4613      	mov	r3, r2
 8003fd0:	eb42 0303 	adc.w	r3, r2, r3
 8003fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fd6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003fda:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003fde:	f7fc f95f 	bl	80002a0 <__aeabi_uldivmod>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800401c <UART_SetConfig+0x2d4>)
 8003fe8:	fba3 1302 	umull	r1, r3, r3, r2
 8003fec:	095b      	lsrs	r3, r3, #5
 8003fee:	2164      	movs	r1, #100	@ 0x64
 8003ff0:	fb01 f303 	mul.w	r3, r1, r3
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	00db      	lsls	r3, r3, #3
 8003ff8:	3332      	adds	r3, #50	@ 0x32
 8003ffa:	4a08      	ldr	r2, [pc, #32]	@ (800401c <UART_SetConfig+0x2d4>)
 8003ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8004000:	095b      	lsrs	r3, r3, #5
 8004002:	f003 0207 	and.w	r2, r3, #7
 8004006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4422      	add	r2, r4
 800400e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004010:	e106      	b.n	8004220 <UART_SetConfig+0x4d8>
 8004012:	bf00      	nop
 8004014:	40011000 	.word	0x40011000
 8004018:	40011400 	.word	0x40011400
 800401c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004020:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004024:	2200      	movs	r2, #0
 8004026:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800402a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800402e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004032:	4642      	mov	r2, r8
 8004034:	464b      	mov	r3, r9
 8004036:	1891      	adds	r1, r2, r2
 8004038:	6239      	str	r1, [r7, #32]
 800403a:	415b      	adcs	r3, r3
 800403c:	627b      	str	r3, [r7, #36]	@ 0x24
 800403e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004042:	4641      	mov	r1, r8
 8004044:	1854      	adds	r4, r2, r1
 8004046:	4649      	mov	r1, r9
 8004048:	eb43 0501 	adc.w	r5, r3, r1
 800404c:	f04f 0200 	mov.w	r2, #0
 8004050:	f04f 0300 	mov.w	r3, #0
 8004054:	00eb      	lsls	r3, r5, #3
 8004056:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800405a:	00e2      	lsls	r2, r4, #3
 800405c:	4614      	mov	r4, r2
 800405e:	461d      	mov	r5, r3
 8004060:	4643      	mov	r3, r8
 8004062:	18e3      	adds	r3, r4, r3
 8004064:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004068:	464b      	mov	r3, r9
 800406a:	eb45 0303 	adc.w	r3, r5, r3
 800406e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800407e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004082:	f04f 0200 	mov.w	r2, #0
 8004086:	f04f 0300 	mov.w	r3, #0
 800408a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800408e:	4629      	mov	r1, r5
 8004090:	008b      	lsls	r3, r1, #2
 8004092:	4621      	mov	r1, r4
 8004094:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004098:	4621      	mov	r1, r4
 800409a:	008a      	lsls	r2, r1, #2
 800409c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80040a0:	f7fc f8fe 	bl	80002a0 <__aeabi_uldivmod>
 80040a4:	4602      	mov	r2, r0
 80040a6:	460b      	mov	r3, r1
 80040a8:	4b60      	ldr	r3, [pc, #384]	@ (800422c <UART_SetConfig+0x4e4>)
 80040aa:	fba3 2302 	umull	r2, r3, r3, r2
 80040ae:	095b      	lsrs	r3, r3, #5
 80040b0:	011c      	lsls	r4, r3, #4
 80040b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040b6:	2200      	movs	r2, #0
 80040b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80040bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80040c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80040c4:	4642      	mov	r2, r8
 80040c6:	464b      	mov	r3, r9
 80040c8:	1891      	adds	r1, r2, r2
 80040ca:	61b9      	str	r1, [r7, #24]
 80040cc:	415b      	adcs	r3, r3
 80040ce:	61fb      	str	r3, [r7, #28]
 80040d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040d4:	4641      	mov	r1, r8
 80040d6:	1851      	adds	r1, r2, r1
 80040d8:	6139      	str	r1, [r7, #16]
 80040da:	4649      	mov	r1, r9
 80040dc:	414b      	adcs	r3, r1
 80040de:	617b      	str	r3, [r7, #20]
 80040e0:	f04f 0200 	mov.w	r2, #0
 80040e4:	f04f 0300 	mov.w	r3, #0
 80040e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040ec:	4659      	mov	r1, fp
 80040ee:	00cb      	lsls	r3, r1, #3
 80040f0:	4651      	mov	r1, sl
 80040f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040f6:	4651      	mov	r1, sl
 80040f8:	00ca      	lsls	r2, r1, #3
 80040fa:	4610      	mov	r0, r2
 80040fc:	4619      	mov	r1, r3
 80040fe:	4603      	mov	r3, r0
 8004100:	4642      	mov	r2, r8
 8004102:	189b      	adds	r3, r3, r2
 8004104:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004108:	464b      	mov	r3, r9
 800410a:	460a      	mov	r2, r1
 800410c:	eb42 0303 	adc.w	r3, r2, r3
 8004110:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800411e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004120:	f04f 0200 	mov.w	r2, #0
 8004124:	f04f 0300 	mov.w	r3, #0
 8004128:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800412c:	4649      	mov	r1, r9
 800412e:	008b      	lsls	r3, r1, #2
 8004130:	4641      	mov	r1, r8
 8004132:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004136:	4641      	mov	r1, r8
 8004138:	008a      	lsls	r2, r1, #2
 800413a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800413e:	f7fc f8af 	bl	80002a0 <__aeabi_uldivmod>
 8004142:	4602      	mov	r2, r0
 8004144:	460b      	mov	r3, r1
 8004146:	4611      	mov	r1, r2
 8004148:	4b38      	ldr	r3, [pc, #224]	@ (800422c <UART_SetConfig+0x4e4>)
 800414a:	fba3 2301 	umull	r2, r3, r3, r1
 800414e:	095b      	lsrs	r3, r3, #5
 8004150:	2264      	movs	r2, #100	@ 0x64
 8004152:	fb02 f303 	mul.w	r3, r2, r3
 8004156:	1acb      	subs	r3, r1, r3
 8004158:	011b      	lsls	r3, r3, #4
 800415a:	3332      	adds	r3, #50	@ 0x32
 800415c:	4a33      	ldr	r2, [pc, #204]	@ (800422c <UART_SetConfig+0x4e4>)
 800415e:	fba2 2303 	umull	r2, r3, r2, r3
 8004162:	095b      	lsrs	r3, r3, #5
 8004164:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004168:	441c      	add	r4, r3
 800416a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800416e:	2200      	movs	r2, #0
 8004170:	673b      	str	r3, [r7, #112]	@ 0x70
 8004172:	677a      	str	r2, [r7, #116]	@ 0x74
 8004174:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004178:	4642      	mov	r2, r8
 800417a:	464b      	mov	r3, r9
 800417c:	1891      	adds	r1, r2, r2
 800417e:	60b9      	str	r1, [r7, #8]
 8004180:	415b      	adcs	r3, r3
 8004182:	60fb      	str	r3, [r7, #12]
 8004184:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004188:	4641      	mov	r1, r8
 800418a:	1851      	adds	r1, r2, r1
 800418c:	6039      	str	r1, [r7, #0]
 800418e:	4649      	mov	r1, r9
 8004190:	414b      	adcs	r3, r1
 8004192:	607b      	str	r3, [r7, #4]
 8004194:	f04f 0200 	mov.w	r2, #0
 8004198:	f04f 0300 	mov.w	r3, #0
 800419c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80041a0:	4659      	mov	r1, fp
 80041a2:	00cb      	lsls	r3, r1, #3
 80041a4:	4651      	mov	r1, sl
 80041a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041aa:	4651      	mov	r1, sl
 80041ac:	00ca      	lsls	r2, r1, #3
 80041ae:	4610      	mov	r0, r2
 80041b0:	4619      	mov	r1, r3
 80041b2:	4603      	mov	r3, r0
 80041b4:	4642      	mov	r2, r8
 80041b6:	189b      	adds	r3, r3, r2
 80041b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041ba:	464b      	mov	r3, r9
 80041bc:	460a      	mov	r2, r1
 80041be:	eb42 0303 	adc.w	r3, r2, r3
 80041c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80041c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80041ce:	667a      	str	r2, [r7, #100]	@ 0x64
 80041d0:	f04f 0200 	mov.w	r2, #0
 80041d4:	f04f 0300 	mov.w	r3, #0
 80041d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80041dc:	4649      	mov	r1, r9
 80041de:	008b      	lsls	r3, r1, #2
 80041e0:	4641      	mov	r1, r8
 80041e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041e6:	4641      	mov	r1, r8
 80041e8:	008a      	lsls	r2, r1, #2
 80041ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80041ee:	f7fc f857 	bl	80002a0 <__aeabi_uldivmod>
 80041f2:	4602      	mov	r2, r0
 80041f4:	460b      	mov	r3, r1
 80041f6:	4b0d      	ldr	r3, [pc, #52]	@ (800422c <UART_SetConfig+0x4e4>)
 80041f8:	fba3 1302 	umull	r1, r3, r3, r2
 80041fc:	095b      	lsrs	r3, r3, #5
 80041fe:	2164      	movs	r1, #100	@ 0x64
 8004200:	fb01 f303 	mul.w	r3, r1, r3
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	011b      	lsls	r3, r3, #4
 8004208:	3332      	adds	r3, #50	@ 0x32
 800420a:	4a08      	ldr	r2, [pc, #32]	@ (800422c <UART_SetConfig+0x4e4>)
 800420c:	fba2 2303 	umull	r2, r3, r2, r3
 8004210:	095b      	lsrs	r3, r3, #5
 8004212:	f003 020f 	and.w	r2, r3, #15
 8004216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4422      	add	r2, r4
 800421e:	609a      	str	r2, [r3, #8]
}
 8004220:	bf00      	nop
 8004222:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004226:	46bd      	mov	sp, r7
 8004228:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800422c:	51eb851f 	.word	0x51eb851f

08004230 <sniprintf>:
 8004230:	b40c      	push	{r2, r3}
 8004232:	b530      	push	{r4, r5, lr}
 8004234:	4b17      	ldr	r3, [pc, #92]	@ (8004294 <sniprintf+0x64>)
 8004236:	1e0c      	subs	r4, r1, #0
 8004238:	681d      	ldr	r5, [r3, #0]
 800423a:	b09d      	sub	sp, #116	@ 0x74
 800423c:	da08      	bge.n	8004250 <sniprintf+0x20>
 800423e:	238b      	movs	r3, #139	@ 0x8b
 8004240:	602b      	str	r3, [r5, #0]
 8004242:	f04f 30ff 	mov.w	r0, #4294967295
 8004246:	b01d      	add	sp, #116	@ 0x74
 8004248:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800424c:	b002      	add	sp, #8
 800424e:	4770      	bx	lr
 8004250:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004254:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004258:	bf14      	ite	ne
 800425a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800425e:	4623      	moveq	r3, r4
 8004260:	9304      	str	r3, [sp, #16]
 8004262:	9307      	str	r3, [sp, #28]
 8004264:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004268:	9002      	str	r0, [sp, #8]
 800426a:	9006      	str	r0, [sp, #24]
 800426c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004270:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004272:	ab21      	add	r3, sp, #132	@ 0x84
 8004274:	a902      	add	r1, sp, #8
 8004276:	4628      	mov	r0, r5
 8004278:	9301      	str	r3, [sp, #4]
 800427a:	f000 f995 	bl	80045a8 <_svfiprintf_r>
 800427e:	1c43      	adds	r3, r0, #1
 8004280:	bfbc      	itt	lt
 8004282:	238b      	movlt	r3, #139	@ 0x8b
 8004284:	602b      	strlt	r3, [r5, #0]
 8004286:	2c00      	cmp	r4, #0
 8004288:	d0dd      	beq.n	8004246 <sniprintf+0x16>
 800428a:	9b02      	ldr	r3, [sp, #8]
 800428c:	2200      	movs	r2, #0
 800428e:	701a      	strb	r2, [r3, #0]
 8004290:	e7d9      	b.n	8004246 <sniprintf+0x16>
 8004292:	bf00      	nop
 8004294:	20000014 	.word	0x20000014

08004298 <memset>:
 8004298:	4402      	add	r2, r0
 800429a:	4603      	mov	r3, r0
 800429c:	4293      	cmp	r3, r2
 800429e:	d100      	bne.n	80042a2 <memset+0xa>
 80042a0:	4770      	bx	lr
 80042a2:	f803 1b01 	strb.w	r1, [r3], #1
 80042a6:	e7f9      	b.n	800429c <memset+0x4>

080042a8 <__errno>:
 80042a8:	4b01      	ldr	r3, [pc, #4]	@ (80042b0 <__errno+0x8>)
 80042aa:	6818      	ldr	r0, [r3, #0]
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	20000014 	.word	0x20000014

080042b4 <__libc_init_array>:
 80042b4:	b570      	push	{r4, r5, r6, lr}
 80042b6:	4d0d      	ldr	r5, [pc, #52]	@ (80042ec <__libc_init_array+0x38>)
 80042b8:	4c0d      	ldr	r4, [pc, #52]	@ (80042f0 <__libc_init_array+0x3c>)
 80042ba:	1b64      	subs	r4, r4, r5
 80042bc:	10a4      	asrs	r4, r4, #2
 80042be:	2600      	movs	r6, #0
 80042c0:	42a6      	cmp	r6, r4
 80042c2:	d109      	bne.n	80042d8 <__libc_init_array+0x24>
 80042c4:	4d0b      	ldr	r5, [pc, #44]	@ (80042f4 <__libc_init_array+0x40>)
 80042c6:	4c0c      	ldr	r4, [pc, #48]	@ (80042f8 <__libc_init_array+0x44>)
 80042c8:	f000 fc66 	bl	8004b98 <_init>
 80042cc:	1b64      	subs	r4, r4, r5
 80042ce:	10a4      	asrs	r4, r4, #2
 80042d0:	2600      	movs	r6, #0
 80042d2:	42a6      	cmp	r6, r4
 80042d4:	d105      	bne.n	80042e2 <__libc_init_array+0x2e>
 80042d6:	bd70      	pop	{r4, r5, r6, pc}
 80042d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80042dc:	4798      	blx	r3
 80042de:	3601      	adds	r6, #1
 80042e0:	e7ee      	b.n	80042c0 <__libc_init_array+0xc>
 80042e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80042e6:	4798      	blx	r3
 80042e8:	3601      	adds	r6, #1
 80042ea:	e7f2      	b.n	80042d2 <__libc_init_array+0x1e>
 80042ec:	08004c40 	.word	0x08004c40
 80042f0:	08004c40 	.word	0x08004c40
 80042f4:	08004c40 	.word	0x08004c40
 80042f8:	08004c44 	.word	0x08004c44

080042fc <__retarget_lock_acquire_recursive>:
 80042fc:	4770      	bx	lr

080042fe <__retarget_lock_release_recursive>:
 80042fe:	4770      	bx	lr

08004300 <_free_r>:
 8004300:	b538      	push	{r3, r4, r5, lr}
 8004302:	4605      	mov	r5, r0
 8004304:	2900      	cmp	r1, #0
 8004306:	d041      	beq.n	800438c <_free_r+0x8c>
 8004308:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800430c:	1f0c      	subs	r4, r1, #4
 800430e:	2b00      	cmp	r3, #0
 8004310:	bfb8      	it	lt
 8004312:	18e4      	addlt	r4, r4, r3
 8004314:	f000 f8e0 	bl	80044d8 <__malloc_lock>
 8004318:	4a1d      	ldr	r2, [pc, #116]	@ (8004390 <_free_r+0x90>)
 800431a:	6813      	ldr	r3, [r2, #0]
 800431c:	b933      	cbnz	r3, 800432c <_free_r+0x2c>
 800431e:	6063      	str	r3, [r4, #4]
 8004320:	6014      	str	r4, [r2, #0]
 8004322:	4628      	mov	r0, r5
 8004324:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004328:	f000 b8dc 	b.w	80044e4 <__malloc_unlock>
 800432c:	42a3      	cmp	r3, r4
 800432e:	d908      	bls.n	8004342 <_free_r+0x42>
 8004330:	6820      	ldr	r0, [r4, #0]
 8004332:	1821      	adds	r1, r4, r0
 8004334:	428b      	cmp	r3, r1
 8004336:	bf01      	itttt	eq
 8004338:	6819      	ldreq	r1, [r3, #0]
 800433a:	685b      	ldreq	r3, [r3, #4]
 800433c:	1809      	addeq	r1, r1, r0
 800433e:	6021      	streq	r1, [r4, #0]
 8004340:	e7ed      	b.n	800431e <_free_r+0x1e>
 8004342:	461a      	mov	r2, r3
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	b10b      	cbz	r3, 800434c <_free_r+0x4c>
 8004348:	42a3      	cmp	r3, r4
 800434a:	d9fa      	bls.n	8004342 <_free_r+0x42>
 800434c:	6811      	ldr	r1, [r2, #0]
 800434e:	1850      	adds	r0, r2, r1
 8004350:	42a0      	cmp	r0, r4
 8004352:	d10b      	bne.n	800436c <_free_r+0x6c>
 8004354:	6820      	ldr	r0, [r4, #0]
 8004356:	4401      	add	r1, r0
 8004358:	1850      	adds	r0, r2, r1
 800435a:	4283      	cmp	r3, r0
 800435c:	6011      	str	r1, [r2, #0]
 800435e:	d1e0      	bne.n	8004322 <_free_r+0x22>
 8004360:	6818      	ldr	r0, [r3, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	6053      	str	r3, [r2, #4]
 8004366:	4408      	add	r0, r1
 8004368:	6010      	str	r0, [r2, #0]
 800436a:	e7da      	b.n	8004322 <_free_r+0x22>
 800436c:	d902      	bls.n	8004374 <_free_r+0x74>
 800436e:	230c      	movs	r3, #12
 8004370:	602b      	str	r3, [r5, #0]
 8004372:	e7d6      	b.n	8004322 <_free_r+0x22>
 8004374:	6820      	ldr	r0, [r4, #0]
 8004376:	1821      	adds	r1, r4, r0
 8004378:	428b      	cmp	r3, r1
 800437a:	bf04      	itt	eq
 800437c:	6819      	ldreq	r1, [r3, #0]
 800437e:	685b      	ldreq	r3, [r3, #4]
 8004380:	6063      	str	r3, [r4, #4]
 8004382:	bf04      	itt	eq
 8004384:	1809      	addeq	r1, r1, r0
 8004386:	6021      	streq	r1, [r4, #0]
 8004388:	6054      	str	r4, [r2, #4]
 800438a:	e7ca      	b.n	8004322 <_free_r+0x22>
 800438c:	bd38      	pop	{r3, r4, r5, pc}
 800438e:	bf00      	nop
 8004390:	20000364 	.word	0x20000364

08004394 <sbrk_aligned>:
 8004394:	b570      	push	{r4, r5, r6, lr}
 8004396:	4e0f      	ldr	r6, [pc, #60]	@ (80043d4 <sbrk_aligned+0x40>)
 8004398:	460c      	mov	r4, r1
 800439a:	6831      	ldr	r1, [r6, #0]
 800439c:	4605      	mov	r5, r0
 800439e:	b911      	cbnz	r1, 80043a6 <sbrk_aligned+0x12>
 80043a0:	f000 fba6 	bl	8004af0 <_sbrk_r>
 80043a4:	6030      	str	r0, [r6, #0]
 80043a6:	4621      	mov	r1, r4
 80043a8:	4628      	mov	r0, r5
 80043aa:	f000 fba1 	bl	8004af0 <_sbrk_r>
 80043ae:	1c43      	adds	r3, r0, #1
 80043b0:	d103      	bne.n	80043ba <sbrk_aligned+0x26>
 80043b2:	f04f 34ff 	mov.w	r4, #4294967295
 80043b6:	4620      	mov	r0, r4
 80043b8:	bd70      	pop	{r4, r5, r6, pc}
 80043ba:	1cc4      	adds	r4, r0, #3
 80043bc:	f024 0403 	bic.w	r4, r4, #3
 80043c0:	42a0      	cmp	r0, r4
 80043c2:	d0f8      	beq.n	80043b6 <sbrk_aligned+0x22>
 80043c4:	1a21      	subs	r1, r4, r0
 80043c6:	4628      	mov	r0, r5
 80043c8:	f000 fb92 	bl	8004af0 <_sbrk_r>
 80043cc:	3001      	adds	r0, #1
 80043ce:	d1f2      	bne.n	80043b6 <sbrk_aligned+0x22>
 80043d0:	e7ef      	b.n	80043b2 <sbrk_aligned+0x1e>
 80043d2:	bf00      	nop
 80043d4:	20000360 	.word	0x20000360

080043d8 <_malloc_r>:
 80043d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043dc:	1ccd      	adds	r5, r1, #3
 80043de:	f025 0503 	bic.w	r5, r5, #3
 80043e2:	3508      	adds	r5, #8
 80043e4:	2d0c      	cmp	r5, #12
 80043e6:	bf38      	it	cc
 80043e8:	250c      	movcc	r5, #12
 80043ea:	2d00      	cmp	r5, #0
 80043ec:	4606      	mov	r6, r0
 80043ee:	db01      	blt.n	80043f4 <_malloc_r+0x1c>
 80043f0:	42a9      	cmp	r1, r5
 80043f2:	d904      	bls.n	80043fe <_malloc_r+0x26>
 80043f4:	230c      	movs	r3, #12
 80043f6:	6033      	str	r3, [r6, #0]
 80043f8:	2000      	movs	r0, #0
 80043fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80044d4 <_malloc_r+0xfc>
 8004402:	f000 f869 	bl	80044d8 <__malloc_lock>
 8004406:	f8d8 3000 	ldr.w	r3, [r8]
 800440a:	461c      	mov	r4, r3
 800440c:	bb44      	cbnz	r4, 8004460 <_malloc_r+0x88>
 800440e:	4629      	mov	r1, r5
 8004410:	4630      	mov	r0, r6
 8004412:	f7ff ffbf 	bl	8004394 <sbrk_aligned>
 8004416:	1c43      	adds	r3, r0, #1
 8004418:	4604      	mov	r4, r0
 800441a:	d158      	bne.n	80044ce <_malloc_r+0xf6>
 800441c:	f8d8 4000 	ldr.w	r4, [r8]
 8004420:	4627      	mov	r7, r4
 8004422:	2f00      	cmp	r7, #0
 8004424:	d143      	bne.n	80044ae <_malloc_r+0xd6>
 8004426:	2c00      	cmp	r4, #0
 8004428:	d04b      	beq.n	80044c2 <_malloc_r+0xea>
 800442a:	6823      	ldr	r3, [r4, #0]
 800442c:	4639      	mov	r1, r7
 800442e:	4630      	mov	r0, r6
 8004430:	eb04 0903 	add.w	r9, r4, r3
 8004434:	f000 fb5c 	bl	8004af0 <_sbrk_r>
 8004438:	4581      	cmp	r9, r0
 800443a:	d142      	bne.n	80044c2 <_malloc_r+0xea>
 800443c:	6821      	ldr	r1, [r4, #0]
 800443e:	1a6d      	subs	r5, r5, r1
 8004440:	4629      	mov	r1, r5
 8004442:	4630      	mov	r0, r6
 8004444:	f7ff ffa6 	bl	8004394 <sbrk_aligned>
 8004448:	3001      	adds	r0, #1
 800444a:	d03a      	beq.n	80044c2 <_malloc_r+0xea>
 800444c:	6823      	ldr	r3, [r4, #0]
 800444e:	442b      	add	r3, r5
 8004450:	6023      	str	r3, [r4, #0]
 8004452:	f8d8 3000 	ldr.w	r3, [r8]
 8004456:	685a      	ldr	r2, [r3, #4]
 8004458:	bb62      	cbnz	r2, 80044b4 <_malloc_r+0xdc>
 800445a:	f8c8 7000 	str.w	r7, [r8]
 800445e:	e00f      	b.n	8004480 <_malloc_r+0xa8>
 8004460:	6822      	ldr	r2, [r4, #0]
 8004462:	1b52      	subs	r2, r2, r5
 8004464:	d420      	bmi.n	80044a8 <_malloc_r+0xd0>
 8004466:	2a0b      	cmp	r2, #11
 8004468:	d917      	bls.n	800449a <_malloc_r+0xc2>
 800446a:	1961      	adds	r1, r4, r5
 800446c:	42a3      	cmp	r3, r4
 800446e:	6025      	str	r5, [r4, #0]
 8004470:	bf18      	it	ne
 8004472:	6059      	strne	r1, [r3, #4]
 8004474:	6863      	ldr	r3, [r4, #4]
 8004476:	bf08      	it	eq
 8004478:	f8c8 1000 	streq.w	r1, [r8]
 800447c:	5162      	str	r2, [r4, r5]
 800447e:	604b      	str	r3, [r1, #4]
 8004480:	4630      	mov	r0, r6
 8004482:	f000 f82f 	bl	80044e4 <__malloc_unlock>
 8004486:	f104 000b 	add.w	r0, r4, #11
 800448a:	1d23      	adds	r3, r4, #4
 800448c:	f020 0007 	bic.w	r0, r0, #7
 8004490:	1ac2      	subs	r2, r0, r3
 8004492:	bf1c      	itt	ne
 8004494:	1a1b      	subne	r3, r3, r0
 8004496:	50a3      	strne	r3, [r4, r2]
 8004498:	e7af      	b.n	80043fa <_malloc_r+0x22>
 800449a:	6862      	ldr	r2, [r4, #4]
 800449c:	42a3      	cmp	r3, r4
 800449e:	bf0c      	ite	eq
 80044a0:	f8c8 2000 	streq.w	r2, [r8]
 80044a4:	605a      	strne	r2, [r3, #4]
 80044a6:	e7eb      	b.n	8004480 <_malloc_r+0xa8>
 80044a8:	4623      	mov	r3, r4
 80044aa:	6864      	ldr	r4, [r4, #4]
 80044ac:	e7ae      	b.n	800440c <_malloc_r+0x34>
 80044ae:	463c      	mov	r4, r7
 80044b0:	687f      	ldr	r7, [r7, #4]
 80044b2:	e7b6      	b.n	8004422 <_malloc_r+0x4a>
 80044b4:	461a      	mov	r2, r3
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	42a3      	cmp	r3, r4
 80044ba:	d1fb      	bne.n	80044b4 <_malloc_r+0xdc>
 80044bc:	2300      	movs	r3, #0
 80044be:	6053      	str	r3, [r2, #4]
 80044c0:	e7de      	b.n	8004480 <_malloc_r+0xa8>
 80044c2:	230c      	movs	r3, #12
 80044c4:	6033      	str	r3, [r6, #0]
 80044c6:	4630      	mov	r0, r6
 80044c8:	f000 f80c 	bl	80044e4 <__malloc_unlock>
 80044cc:	e794      	b.n	80043f8 <_malloc_r+0x20>
 80044ce:	6005      	str	r5, [r0, #0]
 80044d0:	e7d6      	b.n	8004480 <_malloc_r+0xa8>
 80044d2:	bf00      	nop
 80044d4:	20000364 	.word	0x20000364

080044d8 <__malloc_lock>:
 80044d8:	4801      	ldr	r0, [pc, #4]	@ (80044e0 <__malloc_lock+0x8>)
 80044da:	f7ff bf0f 	b.w	80042fc <__retarget_lock_acquire_recursive>
 80044de:	bf00      	nop
 80044e0:	2000035c 	.word	0x2000035c

080044e4 <__malloc_unlock>:
 80044e4:	4801      	ldr	r0, [pc, #4]	@ (80044ec <__malloc_unlock+0x8>)
 80044e6:	f7ff bf0a 	b.w	80042fe <__retarget_lock_release_recursive>
 80044ea:	bf00      	nop
 80044ec:	2000035c 	.word	0x2000035c

080044f0 <__ssputs_r>:
 80044f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044f4:	688e      	ldr	r6, [r1, #8]
 80044f6:	461f      	mov	r7, r3
 80044f8:	42be      	cmp	r6, r7
 80044fa:	680b      	ldr	r3, [r1, #0]
 80044fc:	4682      	mov	sl, r0
 80044fe:	460c      	mov	r4, r1
 8004500:	4690      	mov	r8, r2
 8004502:	d82d      	bhi.n	8004560 <__ssputs_r+0x70>
 8004504:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004508:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800450c:	d026      	beq.n	800455c <__ssputs_r+0x6c>
 800450e:	6965      	ldr	r5, [r4, #20]
 8004510:	6909      	ldr	r1, [r1, #16]
 8004512:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004516:	eba3 0901 	sub.w	r9, r3, r1
 800451a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800451e:	1c7b      	adds	r3, r7, #1
 8004520:	444b      	add	r3, r9
 8004522:	106d      	asrs	r5, r5, #1
 8004524:	429d      	cmp	r5, r3
 8004526:	bf38      	it	cc
 8004528:	461d      	movcc	r5, r3
 800452a:	0553      	lsls	r3, r2, #21
 800452c:	d527      	bpl.n	800457e <__ssputs_r+0x8e>
 800452e:	4629      	mov	r1, r5
 8004530:	f7ff ff52 	bl	80043d8 <_malloc_r>
 8004534:	4606      	mov	r6, r0
 8004536:	b360      	cbz	r0, 8004592 <__ssputs_r+0xa2>
 8004538:	6921      	ldr	r1, [r4, #16]
 800453a:	464a      	mov	r2, r9
 800453c:	f000 fae8 	bl	8004b10 <memcpy>
 8004540:	89a3      	ldrh	r3, [r4, #12]
 8004542:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004546:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800454a:	81a3      	strh	r3, [r4, #12]
 800454c:	6126      	str	r6, [r4, #16]
 800454e:	6165      	str	r5, [r4, #20]
 8004550:	444e      	add	r6, r9
 8004552:	eba5 0509 	sub.w	r5, r5, r9
 8004556:	6026      	str	r6, [r4, #0]
 8004558:	60a5      	str	r5, [r4, #8]
 800455a:	463e      	mov	r6, r7
 800455c:	42be      	cmp	r6, r7
 800455e:	d900      	bls.n	8004562 <__ssputs_r+0x72>
 8004560:	463e      	mov	r6, r7
 8004562:	6820      	ldr	r0, [r4, #0]
 8004564:	4632      	mov	r2, r6
 8004566:	4641      	mov	r1, r8
 8004568:	f000 faa8 	bl	8004abc <memmove>
 800456c:	68a3      	ldr	r3, [r4, #8]
 800456e:	1b9b      	subs	r3, r3, r6
 8004570:	60a3      	str	r3, [r4, #8]
 8004572:	6823      	ldr	r3, [r4, #0]
 8004574:	4433      	add	r3, r6
 8004576:	6023      	str	r3, [r4, #0]
 8004578:	2000      	movs	r0, #0
 800457a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800457e:	462a      	mov	r2, r5
 8004580:	f000 fad4 	bl	8004b2c <_realloc_r>
 8004584:	4606      	mov	r6, r0
 8004586:	2800      	cmp	r0, #0
 8004588:	d1e0      	bne.n	800454c <__ssputs_r+0x5c>
 800458a:	6921      	ldr	r1, [r4, #16]
 800458c:	4650      	mov	r0, sl
 800458e:	f7ff feb7 	bl	8004300 <_free_r>
 8004592:	230c      	movs	r3, #12
 8004594:	f8ca 3000 	str.w	r3, [sl]
 8004598:	89a3      	ldrh	r3, [r4, #12]
 800459a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800459e:	81a3      	strh	r3, [r4, #12]
 80045a0:	f04f 30ff 	mov.w	r0, #4294967295
 80045a4:	e7e9      	b.n	800457a <__ssputs_r+0x8a>
	...

080045a8 <_svfiprintf_r>:
 80045a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045ac:	4698      	mov	r8, r3
 80045ae:	898b      	ldrh	r3, [r1, #12]
 80045b0:	061b      	lsls	r3, r3, #24
 80045b2:	b09d      	sub	sp, #116	@ 0x74
 80045b4:	4607      	mov	r7, r0
 80045b6:	460d      	mov	r5, r1
 80045b8:	4614      	mov	r4, r2
 80045ba:	d510      	bpl.n	80045de <_svfiprintf_r+0x36>
 80045bc:	690b      	ldr	r3, [r1, #16]
 80045be:	b973      	cbnz	r3, 80045de <_svfiprintf_r+0x36>
 80045c0:	2140      	movs	r1, #64	@ 0x40
 80045c2:	f7ff ff09 	bl	80043d8 <_malloc_r>
 80045c6:	6028      	str	r0, [r5, #0]
 80045c8:	6128      	str	r0, [r5, #16]
 80045ca:	b930      	cbnz	r0, 80045da <_svfiprintf_r+0x32>
 80045cc:	230c      	movs	r3, #12
 80045ce:	603b      	str	r3, [r7, #0]
 80045d0:	f04f 30ff 	mov.w	r0, #4294967295
 80045d4:	b01d      	add	sp, #116	@ 0x74
 80045d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045da:	2340      	movs	r3, #64	@ 0x40
 80045dc:	616b      	str	r3, [r5, #20]
 80045de:	2300      	movs	r3, #0
 80045e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80045e2:	2320      	movs	r3, #32
 80045e4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80045e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80045ec:	2330      	movs	r3, #48	@ 0x30
 80045ee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800478c <_svfiprintf_r+0x1e4>
 80045f2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80045f6:	f04f 0901 	mov.w	r9, #1
 80045fa:	4623      	mov	r3, r4
 80045fc:	469a      	mov	sl, r3
 80045fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004602:	b10a      	cbz	r2, 8004608 <_svfiprintf_r+0x60>
 8004604:	2a25      	cmp	r2, #37	@ 0x25
 8004606:	d1f9      	bne.n	80045fc <_svfiprintf_r+0x54>
 8004608:	ebba 0b04 	subs.w	fp, sl, r4
 800460c:	d00b      	beq.n	8004626 <_svfiprintf_r+0x7e>
 800460e:	465b      	mov	r3, fp
 8004610:	4622      	mov	r2, r4
 8004612:	4629      	mov	r1, r5
 8004614:	4638      	mov	r0, r7
 8004616:	f7ff ff6b 	bl	80044f0 <__ssputs_r>
 800461a:	3001      	adds	r0, #1
 800461c:	f000 80a7 	beq.w	800476e <_svfiprintf_r+0x1c6>
 8004620:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004622:	445a      	add	r2, fp
 8004624:	9209      	str	r2, [sp, #36]	@ 0x24
 8004626:	f89a 3000 	ldrb.w	r3, [sl]
 800462a:	2b00      	cmp	r3, #0
 800462c:	f000 809f 	beq.w	800476e <_svfiprintf_r+0x1c6>
 8004630:	2300      	movs	r3, #0
 8004632:	f04f 32ff 	mov.w	r2, #4294967295
 8004636:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800463a:	f10a 0a01 	add.w	sl, sl, #1
 800463e:	9304      	str	r3, [sp, #16]
 8004640:	9307      	str	r3, [sp, #28]
 8004642:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004646:	931a      	str	r3, [sp, #104]	@ 0x68
 8004648:	4654      	mov	r4, sl
 800464a:	2205      	movs	r2, #5
 800464c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004650:	484e      	ldr	r0, [pc, #312]	@ (800478c <_svfiprintf_r+0x1e4>)
 8004652:	f7fb fdd5 	bl	8000200 <memchr>
 8004656:	9a04      	ldr	r2, [sp, #16]
 8004658:	b9d8      	cbnz	r0, 8004692 <_svfiprintf_r+0xea>
 800465a:	06d0      	lsls	r0, r2, #27
 800465c:	bf44      	itt	mi
 800465e:	2320      	movmi	r3, #32
 8004660:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004664:	0711      	lsls	r1, r2, #28
 8004666:	bf44      	itt	mi
 8004668:	232b      	movmi	r3, #43	@ 0x2b
 800466a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800466e:	f89a 3000 	ldrb.w	r3, [sl]
 8004672:	2b2a      	cmp	r3, #42	@ 0x2a
 8004674:	d015      	beq.n	80046a2 <_svfiprintf_r+0xfa>
 8004676:	9a07      	ldr	r2, [sp, #28]
 8004678:	4654      	mov	r4, sl
 800467a:	2000      	movs	r0, #0
 800467c:	f04f 0c0a 	mov.w	ip, #10
 8004680:	4621      	mov	r1, r4
 8004682:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004686:	3b30      	subs	r3, #48	@ 0x30
 8004688:	2b09      	cmp	r3, #9
 800468a:	d94b      	bls.n	8004724 <_svfiprintf_r+0x17c>
 800468c:	b1b0      	cbz	r0, 80046bc <_svfiprintf_r+0x114>
 800468e:	9207      	str	r2, [sp, #28]
 8004690:	e014      	b.n	80046bc <_svfiprintf_r+0x114>
 8004692:	eba0 0308 	sub.w	r3, r0, r8
 8004696:	fa09 f303 	lsl.w	r3, r9, r3
 800469a:	4313      	orrs	r3, r2
 800469c:	9304      	str	r3, [sp, #16]
 800469e:	46a2      	mov	sl, r4
 80046a0:	e7d2      	b.n	8004648 <_svfiprintf_r+0xa0>
 80046a2:	9b03      	ldr	r3, [sp, #12]
 80046a4:	1d19      	adds	r1, r3, #4
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	9103      	str	r1, [sp, #12]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	bfbb      	ittet	lt
 80046ae:	425b      	neglt	r3, r3
 80046b0:	f042 0202 	orrlt.w	r2, r2, #2
 80046b4:	9307      	strge	r3, [sp, #28]
 80046b6:	9307      	strlt	r3, [sp, #28]
 80046b8:	bfb8      	it	lt
 80046ba:	9204      	strlt	r2, [sp, #16]
 80046bc:	7823      	ldrb	r3, [r4, #0]
 80046be:	2b2e      	cmp	r3, #46	@ 0x2e
 80046c0:	d10a      	bne.n	80046d8 <_svfiprintf_r+0x130>
 80046c2:	7863      	ldrb	r3, [r4, #1]
 80046c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80046c6:	d132      	bne.n	800472e <_svfiprintf_r+0x186>
 80046c8:	9b03      	ldr	r3, [sp, #12]
 80046ca:	1d1a      	adds	r2, r3, #4
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	9203      	str	r2, [sp, #12]
 80046d0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80046d4:	3402      	adds	r4, #2
 80046d6:	9305      	str	r3, [sp, #20]
 80046d8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800479c <_svfiprintf_r+0x1f4>
 80046dc:	7821      	ldrb	r1, [r4, #0]
 80046de:	2203      	movs	r2, #3
 80046e0:	4650      	mov	r0, sl
 80046e2:	f7fb fd8d 	bl	8000200 <memchr>
 80046e6:	b138      	cbz	r0, 80046f8 <_svfiprintf_r+0x150>
 80046e8:	9b04      	ldr	r3, [sp, #16]
 80046ea:	eba0 000a 	sub.w	r0, r0, sl
 80046ee:	2240      	movs	r2, #64	@ 0x40
 80046f0:	4082      	lsls	r2, r0
 80046f2:	4313      	orrs	r3, r2
 80046f4:	3401      	adds	r4, #1
 80046f6:	9304      	str	r3, [sp, #16]
 80046f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046fc:	4824      	ldr	r0, [pc, #144]	@ (8004790 <_svfiprintf_r+0x1e8>)
 80046fe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004702:	2206      	movs	r2, #6
 8004704:	f7fb fd7c 	bl	8000200 <memchr>
 8004708:	2800      	cmp	r0, #0
 800470a:	d036      	beq.n	800477a <_svfiprintf_r+0x1d2>
 800470c:	4b21      	ldr	r3, [pc, #132]	@ (8004794 <_svfiprintf_r+0x1ec>)
 800470e:	bb1b      	cbnz	r3, 8004758 <_svfiprintf_r+0x1b0>
 8004710:	9b03      	ldr	r3, [sp, #12]
 8004712:	3307      	adds	r3, #7
 8004714:	f023 0307 	bic.w	r3, r3, #7
 8004718:	3308      	adds	r3, #8
 800471a:	9303      	str	r3, [sp, #12]
 800471c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800471e:	4433      	add	r3, r6
 8004720:	9309      	str	r3, [sp, #36]	@ 0x24
 8004722:	e76a      	b.n	80045fa <_svfiprintf_r+0x52>
 8004724:	fb0c 3202 	mla	r2, ip, r2, r3
 8004728:	460c      	mov	r4, r1
 800472a:	2001      	movs	r0, #1
 800472c:	e7a8      	b.n	8004680 <_svfiprintf_r+0xd8>
 800472e:	2300      	movs	r3, #0
 8004730:	3401      	adds	r4, #1
 8004732:	9305      	str	r3, [sp, #20]
 8004734:	4619      	mov	r1, r3
 8004736:	f04f 0c0a 	mov.w	ip, #10
 800473a:	4620      	mov	r0, r4
 800473c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004740:	3a30      	subs	r2, #48	@ 0x30
 8004742:	2a09      	cmp	r2, #9
 8004744:	d903      	bls.n	800474e <_svfiprintf_r+0x1a6>
 8004746:	2b00      	cmp	r3, #0
 8004748:	d0c6      	beq.n	80046d8 <_svfiprintf_r+0x130>
 800474a:	9105      	str	r1, [sp, #20]
 800474c:	e7c4      	b.n	80046d8 <_svfiprintf_r+0x130>
 800474e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004752:	4604      	mov	r4, r0
 8004754:	2301      	movs	r3, #1
 8004756:	e7f0      	b.n	800473a <_svfiprintf_r+0x192>
 8004758:	ab03      	add	r3, sp, #12
 800475a:	9300      	str	r3, [sp, #0]
 800475c:	462a      	mov	r2, r5
 800475e:	4b0e      	ldr	r3, [pc, #56]	@ (8004798 <_svfiprintf_r+0x1f0>)
 8004760:	a904      	add	r1, sp, #16
 8004762:	4638      	mov	r0, r7
 8004764:	f3af 8000 	nop.w
 8004768:	1c42      	adds	r2, r0, #1
 800476a:	4606      	mov	r6, r0
 800476c:	d1d6      	bne.n	800471c <_svfiprintf_r+0x174>
 800476e:	89ab      	ldrh	r3, [r5, #12]
 8004770:	065b      	lsls	r3, r3, #25
 8004772:	f53f af2d 	bmi.w	80045d0 <_svfiprintf_r+0x28>
 8004776:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004778:	e72c      	b.n	80045d4 <_svfiprintf_r+0x2c>
 800477a:	ab03      	add	r3, sp, #12
 800477c:	9300      	str	r3, [sp, #0]
 800477e:	462a      	mov	r2, r5
 8004780:	4b05      	ldr	r3, [pc, #20]	@ (8004798 <_svfiprintf_r+0x1f0>)
 8004782:	a904      	add	r1, sp, #16
 8004784:	4638      	mov	r0, r7
 8004786:	f000 f879 	bl	800487c <_printf_i>
 800478a:	e7ed      	b.n	8004768 <_svfiprintf_r+0x1c0>
 800478c:	08004c04 	.word	0x08004c04
 8004790:	08004c0e 	.word	0x08004c0e
 8004794:	00000000 	.word	0x00000000
 8004798:	080044f1 	.word	0x080044f1
 800479c:	08004c0a 	.word	0x08004c0a

080047a0 <_printf_common>:
 80047a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047a4:	4616      	mov	r6, r2
 80047a6:	4698      	mov	r8, r3
 80047a8:	688a      	ldr	r2, [r1, #8]
 80047aa:	690b      	ldr	r3, [r1, #16]
 80047ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80047b0:	4293      	cmp	r3, r2
 80047b2:	bfb8      	it	lt
 80047b4:	4613      	movlt	r3, r2
 80047b6:	6033      	str	r3, [r6, #0]
 80047b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80047bc:	4607      	mov	r7, r0
 80047be:	460c      	mov	r4, r1
 80047c0:	b10a      	cbz	r2, 80047c6 <_printf_common+0x26>
 80047c2:	3301      	adds	r3, #1
 80047c4:	6033      	str	r3, [r6, #0]
 80047c6:	6823      	ldr	r3, [r4, #0]
 80047c8:	0699      	lsls	r1, r3, #26
 80047ca:	bf42      	ittt	mi
 80047cc:	6833      	ldrmi	r3, [r6, #0]
 80047ce:	3302      	addmi	r3, #2
 80047d0:	6033      	strmi	r3, [r6, #0]
 80047d2:	6825      	ldr	r5, [r4, #0]
 80047d4:	f015 0506 	ands.w	r5, r5, #6
 80047d8:	d106      	bne.n	80047e8 <_printf_common+0x48>
 80047da:	f104 0a19 	add.w	sl, r4, #25
 80047de:	68e3      	ldr	r3, [r4, #12]
 80047e0:	6832      	ldr	r2, [r6, #0]
 80047e2:	1a9b      	subs	r3, r3, r2
 80047e4:	42ab      	cmp	r3, r5
 80047e6:	dc26      	bgt.n	8004836 <_printf_common+0x96>
 80047e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80047ec:	6822      	ldr	r2, [r4, #0]
 80047ee:	3b00      	subs	r3, #0
 80047f0:	bf18      	it	ne
 80047f2:	2301      	movne	r3, #1
 80047f4:	0692      	lsls	r2, r2, #26
 80047f6:	d42b      	bmi.n	8004850 <_printf_common+0xb0>
 80047f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80047fc:	4641      	mov	r1, r8
 80047fe:	4638      	mov	r0, r7
 8004800:	47c8      	blx	r9
 8004802:	3001      	adds	r0, #1
 8004804:	d01e      	beq.n	8004844 <_printf_common+0xa4>
 8004806:	6823      	ldr	r3, [r4, #0]
 8004808:	6922      	ldr	r2, [r4, #16]
 800480a:	f003 0306 	and.w	r3, r3, #6
 800480e:	2b04      	cmp	r3, #4
 8004810:	bf02      	ittt	eq
 8004812:	68e5      	ldreq	r5, [r4, #12]
 8004814:	6833      	ldreq	r3, [r6, #0]
 8004816:	1aed      	subeq	r5, r5, r3
 8004818:	68a3      	ldr	r3, [r4, #8]
 800481a:	bf0c      	ite	eq
 800481c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004820:	2500      	movne	r5, #0
 8004822:	4293      	cmp	r3, r2
 8004824:	bfc4      	itt	gt
 8004826:	1a9b      	subgt	r3, r3, r2
 8004828:	18ed      	addgt	r5, r5, r3
 800482a:	2600      	movs	r6, #0
 800482c:	341a      	adds	r4, #26
 800482e:	42b5      	cmp	r5, r6
 8004830:	d11a      	bne.n	8004868 <_printf_common+0xc8>
 8004832:	2000      	movs	r0, #0
 8004834:	e008      	b.n	8004848 <_printf_common+0xa8>
 8004836:	2301      	movs	r3, #1
 8004838:	4652      	mov	r2, sl
 800483a:	4641      	mov	r1, r8
 800483c:	4638      	mov	r0, r7
 800483e:	47c8      	blx	r9
 8004840:	3001      	adds	r0, #1
 8004842:	d103      	bne.n	800484c <_printf_common+0xac>
 8004844:	f04f 30ff 	mov.w	r0, #4294967295
 8004848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800484c:	3501      	adds	r5, #1
 800484e:	e7c6      	b.n	80047de <_printf_common+0x3e>
 8004850:	18e1      	adds	r1, r4, r3
 8004852:	1c5a      	adds	r2, r3, #1
 8004854:	2030      	movs	r0, #48	@ 0x30
 8004856:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800485a:	4422      	add	r2, r4
 800485c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004860:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004864:	3302      	adds	r3, #2
 8004866:	e7c7      	b.n	80047f8 <_printf_common+0x58>
 8004868:	2301      	movs	r3, #1
 800486a:	4622      	mov	r2, r4
 800486c:	4641      	mov	r1, r8
 800486e:	4638      	mov	r0, r7
 8004870:	47c8      	blx	r9
 8004872:	3001      	adds	r0, #1
 8004874:	d0e6      	beq.n	8004844 <_printf_common+0xa4>
 8004876:	3601      	adds	r6, #1
 8004878:	e7d9      	b.n	800482e <_printf_common+0x8e>
	...

0800487c <_printf_i>:
 800487c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004880:	7e0f      	ldrb	r7, [r1, #24]
 8004882:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004884:	2f78      	cmp	r7, #120	@ 0x78
 8004886:	4691      	mov	r9, r2
 8004888:	4680      	mov	r8, r0
 800488a:	460c      	mov	r4, r1
 800488c:	469a      	mov	sl, r3
 800488e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004892:	d807      	bhi.n	80048a4 <_printf_i+0x28>
 8004894:	2f62      	cmp	r7, #98	@ 0x62
 8004896:	d80a      	bhi.n	80048ae <_printf_i+0x32>
 8004898:	2f00      	cmp	r7, #0
 800489a:	f000 80d2 	beq.w	8004a42 <_printf_i+0x1c6>
 800489e:	2f58      	cmp	r7, #88	@ 0x58
 80048a0:	f000 80b9 	beq.w	8004a16 <_printf_i+0x19a>
 80048a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80048a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80048ac:	e03a      	b.n	8004924 <_printf_i+0xa8>
 80048ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80048b2:	2b15      	cmp	r3, #21
 80048b4:	d8f6      	bhi.n	80048a4 <_printf_i+0x28>
 80048b6:	a101      	add	r1, pc, #4	@ (adr r1, 80048bc <_printf_i+0x40>)
 80048b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80048bc:	08004915 	.word	0x08004915
 80048c0:	08004929 	.word	0x08004929
 80048c4:	080048a5 	.word	0x080048a5
 80048c8:	080048a5 	.word	0x080048a5
 80048cc:	080048a5 	.word	0x080048a5
 80048d0:	080048a5 	.word	0x080048a5
 80048d4:	08004929 	.word	0x08004929
 80048d8:	080048a5 	.word	0x080048a5
 80048dc:	080048a5 	.word	0x080048a5
 80048e0:	080048a5 	.word	0x080048a5
 80048e4:	080048a5 	.word	0x080048a5
 80048e8:	08004a29 	.word	0x08004a29
 80048ec:	08004953 	.word	0x08004953
 80048f0:	080049e3 	.word	0x080049e3
 80048f4:	080048a5 	.word	0x080048a5
 80048f8:	080048a5 	.word	0x080048a5
 80048fc:	08004a4b 	.word	0x08004a4b
 8004900:	080048a5 	.word	0x080048a5
 8004904:	08004953 	.word	0x08004953
 8004908:	080048a5 	.word	0x080048a5
 800490c:	080048a5 	.word	0x080048a5
 8004910:	080049eb 	.word	0x080049eb
 8004914:	6833      	ldr	r3, [r6, #0]
 8004916:	1d1a      	adds	r2, r3, #4
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	6032      	str	r2, [r6, #0]
 800491c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004920:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004924:	2301      	movs	r3, #1
 8004926:	e09d      	b.n	8004a64 <_printf_i+0x1e8>
 8004928:	6833      	ldr	r3, [r6, #0]
 800492a:	6820      	ldr	r0, [r4, #0]
 800492c:	1d19      	adds	r1, r3, #4
 800492e:	6031      	str	r1, [r6, #0]
 8004930:	0606      	lsls	r6, r0, #24
 8004932:	d501      	bpl.n	8004938 <_printf_i+0xbc>
 8004934:	681d      	ldr	r5, [r3, #0]
 8004936:	e003      	b.n	8004940 <_printf_i+0xc4>
 8004938:	0645      	lsls	r5, r0, #25
 800493a:	d5fb      	bpl.n	8004934 <_printf_i+0xb8>
 800493c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004940:	2d00      	cmp	r5, #0
 8004942:	da03      	bge.n	800494c <_printf_i+0xd0>
 8004944:	232d      	movs	r3, #45	@ 0x2d
 8004946:	426d      	negs	r5, r5
 8004948:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800494c:	4859      	ldr	r0, [pc, #356]	@ (8004ab4 <_printf_i+0x238>)
 800494e:	230a      	movs	r3, #10
 8004950:	e011      	b.n	8004976 <_printf_i+0xfa>
 8004952:	6821      	ldr	r1, [r4, #0]
 8004954:	6833      	ldr	r3, [r6, #0]
 8004956:	0608      	lsls	r0, r1, #24
 8004958:	f853 5b04 	ldr.w	r5, [r3], #4
 800495c:	d402      	bmi.n	8004964 <_printf_i+0xe8>
 800495e:	0649      	lsls	r1, r1, #25
 8004960:	bf48      	it	mi
 8004962:	b2ad      	uxthmi	r5, r5
 8004964:	2f6f      	cmp	r7, #111	@ 0x6f
 8004966:	4853      	ldr	r0, [pc, #332]	@ (8004ab4 <_printf_i+0x238>)
 8004968:	6033      	str	r3, [r6, #0]
 800496a:	bf14      	ite	ne
 800496c:	230a      	movne	r3, #10
 800496e:	2308      	moveq	r3, #8
 8004970:	2100      	movs	r1, #0
 8004972:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004976:	6866      	ldr	r6, [r4, #4]
 8004978:	60a6      	str	r6, [r4, #8]
 800497a:	2e00      	cmp	r6, #0
 800497c:	bfa2      	ittt	ge
 800497e:	6821      	ldrge	r1, [r4, #0]
 8004980:	f021 0104 	bicge.w	r1, r1, #4
 8004984:	6021      	strge	r1, [r4, #0]
 8004986:	b90d      	cbnz	r5, 800498c <_printf_i+0x110>
 8004988:	2e00      	cmp	r6, #0
 800498a:	d04b      	beq.n	8004a24 <_printf_i+0x1a8>
 800498c:	4616      	mov	r6, r2
 800498e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004992:	fb03 5711 	mls	r7, r3, r1, r5
 8004996:	5dc7      	ldrb	r7, [r0, r7]
 8004998:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800499c:	462f      	mov	r7, r5
 800499e:	42bb      	cmp	r3, r7
 80049a0:	460d      	mov	r5, r1
 80049a2:	d9f4      	bls.n	800498e <_printf_i+0x112>
 80049a4:	2b08      	cmp	r3, #8
 80049a6:	d10b      	bne.n	80049c0 <_printf_i+0x144>
 80049a8:	6823      	ldr	r3, [r4, #0]
 80049aa:	07df      	lsls	r7, r3, #31
 80049ac:	d508      	bpl.n	80049c0 <_printf_i+0x144>
 80049ae:	6923      	ldr	r3, [r4, #16]
 80049b0:	6861      	ldr	r1, [r4, #4]
 80049b2:	4299      	cmp	r1, r3
 80049b4:	bfde      	ittt	le
 80049b6:	2330      	movle	r3, #48	@ 0x30
 80049b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80049bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80049c0:	1b92      	subs	r2, r2, r6
 80049c2:	6122      	str	r2, [r4, #16]
 80049c4:	f8cd a000 	str.w	sl, [sp]
 80049c8:	464b      	mov	r3, r9
 80049ca:	aa03      	add	r2, sp, #12
 80049cc:	4621      	mov	r1, r4
 80049ce:	4640      	mov	r0, r8
 80049d0:	f7ff fee6 	bl	80047a0 <_printf_common>
 80049d4:	3001      	adds	r0, #1
 80049d6:	d14a      	bne.n	8004a6e <_printf_i+0x1f2>
 80049d8:	f04f 30ff 	mov.w	r0, #4294967295
 80049dc:	b004      	add	sp, #16
 80049de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049e2:	6823      	ldr	r3, [r4, #0]
 80049e4:	f043 0320 	orr.w	r3, r3, #32
 80049e8:	6023      	str	r3, [r4, #0]
 80049ea:	4833      	ldr	r0, [pc, #204]	@ (8004ab8 <_printf_i+0x23c>)
 80049ec:	2778      	movs	r7, #120	@ 0x78
 80049ee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80049f2:	6823      	ldr	r3, [r4, #0]
 80049f4:	6831      	ldr	r1, [r6, #0]
 80049f6:	061f      	lsls	r7, r3, #24
 80049f8:	f851 5b04 	ldr.w	r5, [r1], #4
 80049fc:	d402      	bmi.n	8004a04 <_printf_i+0x188>
 80049fe:	065f      	lsls	r7, r3, #25
 8004a00:	bf48      	it	mi
 8004a02:	b2ad      	uxthmi	r5, r5
 8004a04:	6031      	str	r1, [r6, #0]
 8004a06:	07d9      	lsls	r1, r3, #31
 8004a08:	bf44      	itt	mi
 8004a0a:	f043 0320 	orrmi.w	r3, r3, #32
 8004a0e:	6023      	strmi	r3, [r4, #0]
 8004a10:	b11d      	cbz	r5, 8004a1a <_printf_i+0x19e>
 8004a12:	2310      	movs	r3, #16
 8004a14:	e7ac      	b.n	8004970 <_printf_i+0xf4>
 8004a16:	4827      	ldr	r0, [pc, #156]	@ (8004ab4 <_printf_i+0x238>)
 8004a18:	e7e9      	b.n	80049ee <_printf_i+0x172>
 8004a1a:	6823      	ldr	r3, [r4, #0]
 8004a1c:	f023 0320 	bic.w	r3, r3, #32
 8004a20:	6023      	str	r3, [r4, #0]
 8004a22:	e7f6      	b.n	8004a12 <_printf_i+0x196>
 8004a24:	4616      	mov	r6, r2
 8004a26:	e7bd      	b.n	80049a4 <_printf_i+0x128>
 8004a28:	6833      	ldr	r3, [r6, #0]
 8004a2a:	6825      	ldr	r5, [r4, #0]
 8004a2c:	6961      	ldr	r1, [r4, #20]
 8004a2e:	1d18      	adds	r0, r3, #4
 8004a30:	6030      	str	r0, [r6, #0]
 8004a32:	062e      	lsls	r6, r5, #24
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	d501      	bpl.n	8004a3c <_printf_i+0x1c0>
 8004a38:	6019      	str	r1, [r3, #0]
 8004a3a:	e002      	b.n	8004a42 <_printf_i+0x1c6>
 8004a3c:	0668      	lsls	r0, r5, #25
 8004a3e:	d5fb      	bpl.n	8004a38 <_printf_i+0x1bc>
 8004a40:	8019      	strh	r1, [r3, #0]
 8004a42:	2300      	movs	r3, #0
 8004a44:	6123      	str	r3, [r4, #16]
 8004a46:	4616      	mov	r6, r2
 8004a48:	e7bc      	b.n	80049c4 <_printf_i+0x148>
 8004a4a:	6833      	ldr	r3, [r6, #0]
 8004a4c:	1d1a      	adds	r2, r3, #4
 8004a4e:	6032      	str	r2, [r6, #0]
 8004a50:	681e      	ldr	r6, [r3, #0]
 8004a52:	6862      	ldr	r2, [r4, #4]
 8004a54:	2100      	movs	r1, #0
 8004a56:	4630      	mov	r0, r6
 8004a58:	f7fb fbd2 	bl	8000200 <memchr>
 8004a5c:	b108      	cbz	r0, 8004a62 <_printf_i+0x1e6>
 8004a5e:	1b80      	subs	r0, r0, r6
 8004a60:	6060      	str	r0, [r4, #4]
 8004a62:	6863      	ldr	r3, [r4, #4]
 8004a64:	6123      	str	r3, [r4, #16]
 8004a66:	2300      	movs	r3, #0
 8004a68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a6c:	e7aa      	b.n	80049c4 <_printf_i+0x148>
 8004a6e:	6923      	ldr	r3, [r4, #16]
 8004a70:	4632      	mov	r2, r6
 8004a72:	4649      	mov	r1, r9
 8004a74:	4640      	mov	r0, r8
 8004a76:	47d0      	blx	sl
 8004a78:	3001      	adds	r0, #1
 8004a7a:	d0ad      	beq.n	80049d8 <_printf_i+0x15c>
 8004a7c:	6823      	ldr	r3, [r4, #0]
 8004a7e:	079b      	lsls	r3, r3, #30
 8004a80:	d413      	bmi.n	8004aaa <_printf_i+0x22e>
 8004a82:	68e0      	ldr	r0, [r4, #12]
 8004a84:	9b03      	ldr	r3, [sp, #12]
 8004a86:	4298      	cmp	r0, r3
 8004a88:	bfb8      	it	lt
 8004a8a:	4618      	movlt	r0, r3
 8004a8c:	e7a6      	b.n	80049dc <_printf_i+0x160>
 8004a8e:	2301      	movs	r3, #1
 8004a90:	4632      	mov	r2, r6
 8004a92:	4649      	mov	r1, r9
 8004a94:	4640      	mov	r0, r8
 8004a96:	47d0      	blx	sl
 8004a98:	3001      	adds	r0, #1
 8004a9a:	d09d      	beq.n	80049d8 <_printf_i+0x15c>
 8004a9c:	3501      	adds	r5, #1
 8004a9e:	68e3      	ldr	r3, [r4, #12]
 8004aa0:	9903      	ldr	r1, [sp, #12]
 8004aa2:	1a5b      	subs	r3, r3, r1
 8004aa4:	42ab      	cmp	r3, r5
 8004aa6:	dcf2      	bgt.n	8004a8e <_printf_i+0x212>
 8004aa8:	e7eb      	b.n	8004a82 <_printf_i+0x206>
 8004aaa:	2500      	movs	r5, #0
 8004aac:	f104 0619 	add.w	r6, r4, #25
 8004ab0:	e7f5      	b.n	8004a9e <_printf_i+0x222>
 8004ab2:	bf00      	nop
 8004ab4:	08004c15 	.word	0x08004c15
 8004ab8:	08004c26 	.word	0x08004c26

08004abc <memmove>:
 8004abc:	4288      	cmp	r0, r1
 8004abe:	b510      	push	{r4, lr}
 8004ac0:	eb01 0402 	add.w	r4, r1, r2
 8004ac4:	d902      	bls.n	8004acc <memmove+0x10>
 8004ac6:	4284      	cmp	r4, r0
 8004ac8:	4623      	mov	r3, r4
 8004aca:	d807      	bhi.n	8004adc <memmove+0x20>
 8004acc:	1e43      	subs	r3, r0, #1
 8004ace:	42a1      	cmp	r1, r4
 8004ad0:	d008      	beq.n	8004ae4 <memmove+0x28>
 8004ad2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ad6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004ada:	e7f8      	b.n	8004ace <memmove+0x12>
 8004adc:	4402      	add	r2, r0
 8004ade:	4601      	mov	r1, r0
 8004ae0:	428a      	cmp	r2, r1
 8004ae2:	d100      	bne.n	8004ae6 <memmove+0x2a>
 8004ae4:	bd10      	pop	{r4, pc}
 8004ae6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004aea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004aee:	e7f7      	b.n	8004ae0 <memmove+0x24>

08004af0 <_sbrk_r>:
 8004af0:	b538      	push	{r3, r4, r5, lr}
 8004af2:	4d06      	ldr	r5, [pc, #24]	@ (8004b0c <_sbrk_r+0x1c>)
 8004af4:	2300      	movs	r3, #0
 8004af6:	4604      	mov	r4, r0
 8004af8:	4608      	mov	r0, r1
 8004afa:	602b      	str	r3, [r5, #0]
 8004afc:	f7fc fdf6 	bl	80016ec <_sbrk>
 8004b00:	1c43      	adds	r3, r0, #1
 8004b02:	d102      	bne.n	8004b0a <_sbrk_r+0x1a>
 8004b04:	682b      	ldr	r3, [r5, #0]
 8004b06:	b103      	cbz	r3, 8004b0a <_sbrk_r+0x1a>
 8004b08:	6023      	str	r3, [r4, #0]
 8004b0a:	bd38      	pop	{r3, r4, r5, pc}
 8004b0c:	20000358 	.word	0x20000358

08004b10 <memcpy>:
 8004b10:	440a      	add	r2, r1
 8004b12:	4291      	cmp	r1, r2
 8004b14:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b18:	d100      	bne.n	8004b1c <memcpy+0xc>
 8004b1a:	4770      	bx	lr
 8004b1c:	b510      	push	{r4, lr}
 8004b1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b26:	4291      	cmp	r1, r2
 8004b28:	d1f9      	bne.n	8004b1e <memcpy+0xe>
 8004b2a:	bd10      	pop	{r4, pc}

08004b2c <_realloc_r>:
 8004b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b30:	4680      	mov	r8, r0
 8004b32:	4615      	mov	r5, r2
 8004b34:	460c      	mov	r4, r1
 8004b36:	b921      	cbnz	r1, 8004b42 <_realloc_r+0x16>
 8004b38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b3c:	4611      	mov	r1, r2
 8004b3e:	f7ff bc4b 	b.w	80043d8 <_malloc_r>
 8004b42:	b92a      	cbnz	r2, 8004b50 <_realloc_r+0x24>
 8004b44:	f7ff fbdc 	bl	8004300 <_free_r>
 8004b48:	2400      	movs	r4, #0
 8004b4a:	4620      	mov	r0, r4
 8004b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b50:	f000 f81a 	bl	8004b88 <_malloc_usable_size_r>
 8004b54:	4285      	cmp	r5, r0
 8004b56:	4606      	mov	r6, r0
 8004b58:	d802      	bhi.n	8004b60 <_realloc_r+0x34>
 8004b5a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004b5e:	d8f4      	bhi.n	8004b4a <_realloc_r+0x1e>
 8004b60:	4629      	mov	r1, r5
 8004b62:	4640      	mov	r0, r8
 8004b64:	f7ff fc38 	bl	80043d8 <_malloc_r>
 8004b68:	4607      	mov	r7, r0
 8004b6a:	2800      	cmp	r0, #0
 8004b6c:	d0ec      	beq.n	8004b48 <_realloc_r+0x1c>
 8004b6e:	42b5      	cmp	r5, r6
 8004b70:	462a      	mov	r2, r5
 8004b72:	4621      	mov	r1, r4
 8004b74:	bf28      	it	cs
 8004b76:	4632      	movcs	r2, r6
 8004b78:	f7ff ffca 	bl	8004b10 <memcpy>
 8004b7c:	4621      	mov	r1, r4
 8004b7e:	4640      	mov	r0, r8
 8004b80:	f7ff fbbe 	bl	8004300 <_free_r>
 8004b84:	463c      	mov	r4, r7
 8004b86:	e7e0      	b.n	8004b4a <_realloc_r+0x1e>

08004b88 <_malloc_usable_size_r>:
 8004b88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b8c:	1f18      	subs	r0, r3, #4
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	bfbc      	itt	lt
 8004b92:	580b      	ldrlt	r3, [r1, r0]
 8004b94:	18c0      	addlt	r0, r0, r3
 8004b96:	4770      	bx	lr

08004b98 <_init>:
 8004b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b9a:	bf00      	nop
 8004b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b9e:	bc08      	pop	{r3}
 8004ba0:	469e      	mov	lr, r3
 8004ba2:	4770      	bx	lr

08004ba4 <_fini>:
 8004ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ba6:	bf00      	nop
 8004ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004baa:	bc08      	pop	{r3}
 8004bac:	469e      	mov	lr, r3
 8004bae:	4770      	bx	lr
