
Ex5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005728  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080058c8  080058c8  000068c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005958  08005958  0000710c  2**0
                  CONTENTS
  4 .ARM          00000008  08005958  08005958  00006958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005960  08005960  0000710c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005960  08005960  00006960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005964  08005964  00006964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  08005968  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c0  2000010c  08005a74  0000710c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004cc  08005a74  000074cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000710c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef8b  00000000  00000000  0000713c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002031  00000000  00000000  000160c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e80  00000000  00000000  000180f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b65  00000000  00000000  00018f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015e28  00000000  00000000  00019add  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000104ba  00000000  00000000  0002f905  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d531  00000000  00000000  0003fdbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cd2f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042b8  00000000  00000000  000cd334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  000d15ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000010c 	.word	0x2000010c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080058b0 	.word	0x080058b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000110 	.word	0x20000110
 80001dc:	080058b0 	.word	0x080058b0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <setFrequency>:
		{73, 2},
		{62, 1}
};

static void setFrequency(char* note)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b098      	sub	sp, #96	@ 0x60
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000598:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005a6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]
 80005c0:	615a      	str	r2, [r3, #20]
 80005c2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80005c4:	f107 030c 	add.w	r3, r7, #12
 80005c8:	2220      	movs	r2, #32
 80005ca:	2100      	movs	r1, #0
 80005cc:	4618      	mov	r0, r3
 80005ce:	f004 fcef 	bl	8004fb0 <memset>

  htim1.Instance = TIM1;
 80005d2:	4b44      	ldr	r3, [pc, #272]	@ (80006e4 <setFrequency+0x154>)
 80005d4:	4a44      	ldr	r2, [pc, #272]	@ (80006e8 <setFrequency+0x158>)
 80005d6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100;
 80005d8:	4b42      	ldr	r3, [pc, #264]	@ (80006e4 <setFrequency+0x154>)
 80005da:	2264      	movs	r2, #100	@ 0x64
 80005dc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005de:	4b41      	ldr	r3, [pc, #260]	@ (80006e4 <setFrequency+0x154>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = getPeriod(note)-1;
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	f000 f881 	bl	80006ec <getPeriod>
 80005ea:	4603      	mov	r3, r0
 80005ec:	3b01      	subs	r3, #1
 80005ee:	461a      	mov	r2, r3
 80005f0:	4b3c      	ldr	r3, [pc, #240]	@ (80006e4 <setFrequency+0x154>)
 80005f2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005f4:	4b3b      	ldr	r3, [pc, #236]	@ (80006e4 <setFrequency+0x154>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005fa:	4b3a      	ldr	r3, [pc, #232]	@ (80006e4 <setFrequency+0x154>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000600:	4b38      	ldr	r3, [pc, #224]	@ (80006e4 <setFrequency+0x154>)
 8000602:	2200      	movs	r2, #0
 8000604:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000606:	4837      	ldr	r0, [pc, #220]	@ (80006e4 <setFrequency+0x154>)
 8000608:	f003 f862 	bl	80036d0 <HAL_TIM_Base_Init>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <setFrequency+0x86>
  {
    Error_Handler();
 8000612:	f000 ffd1 	bl	80015b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000616:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800061a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800061c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000620:	4619      	mov	r1, r3
 8000622:	4830      	ldr	r0, [pc, #192]	@ (80006e4 <setFrequency+0x154>)
 8000624:	f003 fc3e 	bl	8003ea4 <HAL_TIM_ConfigClockSource>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <setFrequency+0xa2>
  {
    Error_Handler();
 800062e:	f000 ffc3 	bl	80015b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000632:	482c      	ldr	r0, [pc, #176]	@ (80006e4 <setFrequency+0x154>)
 8000634:	f003 f8fe 	bl	8003834 <HAL_TIM_PWM_Init>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <setFrequency+0xb2>
  {
    Error_Handler();
 800063e:	f000 ffbb 	bl	80015b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000642:	2300      	movs	r3, #0
 8000644:	64bb      	str	r3, [r7, #72]	@ 0x48
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000646:	2300      	movs	r3, #0
 8000648:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800064a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800064e:	4619      	mov	r1, r3
 8000650:	4824      	ldr	r0, [pc, #144]	@ (80006e4 <setFrequency+0x154>)
 8000652:	f003 ffe3 	bl	800461c <HAL_TIMEx_MasterConfigSynchronization>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <setFrequency+0xd0>
  {
    Error_Handler();
 800065c:	f000 ffac 	bl	80015b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000660:	2360      	movs	r3, #96	@ 0x60
 8000662:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = (int)getPeriod(note)/2 -1;
 8000664:	6878      	ldr	r0, [r7, #4]
 8000666:	f000 f841 	bl	80006ec <getPeriod>
 800066a:	4603      	mov	r3, r0
 800066c:	0fda      	lsrs	r2, r3, #31
 800066e:	4413      	add	r3, r2
 8000670:	105b      	asrs	r3, r3, #1
 8000672:	3b01      	subs	r3, #1
 8000674:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000676:	2300      	movs	r3, #0
 8000678:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800067a:	2300      	movs	r3, #0
 800067c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800067e:	2300      	movs	r3, #0
 8000680:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000682:	2300      	movs	r3, #0
 8000684:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000686:	2300      	movs	r3, #0
 8000688:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800068a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800068e:	2204      	movs	r2, #4
 8000690:	4619      	mov	r1, r3
 8000692:	4814      	ldr	r0, [pc, #80]	@ (80006e4 <setFrequency+0x154>)
 8000694:	f003 fb44 	bl	8003d20 <HAL_TIM_PWM_ConfigChannel>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <setFrequency+0x112>
  {
    Error_Handler();
 800069e:	f000 ff8b 	bl	80015b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006a2:	2300      	movs	r3, #0
 80006a4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006a6:	2300      	movs	r3, #0
 80006a8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006aa:	2300      	movs	r3, #0
 80006ac:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.DeadTime = 0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006ba:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006bc:	2300      	movs	r3, #0
 80006be:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80006c0:	f107 030c 	add.w	r3, r7, #12
 80006c4:	4619      	mov	r1, r3
 80006c6:	4807      	ldr	r0, [pc, #28]	@ (80006e4 <setFrequency+0x154>)
 80006c8:	f004 f816 	bl	80046f8 <HAL_TIMEx_ConfigBreakDeadTime>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <setFrequency+0x146>
  {
    Error_Handler();
 80006d2:	f000 ff71 	bl	80015b8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 80006d6:	4803      	ldr	r0, [pc, #12]	@ (80006e4 <setFrequency+0x154>)
 80006d8:	f001 f8a0 	bl	800181c <HAL_TIM_MspPostInit>
}
 80006dc:	bf00      	nop
 80006de:	3760      	adds	r7, #96	@ 0x60
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	200001e0 	.word	0x200001e0
 80006e8:	40010000 	.word	0x40010000

080006ec <getPeriod>:

int getPeriod(char* note){
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
	if(strcmp(note, "la")==0)
 80006f4:	4942      	ldr	r1, [pc, #264]	@ (8000800 <getPeriod+0x114>)
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f7ff fd72 	bl	80001e0 <strcmp>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d102      	bne.n	8000708 <getPeriod+0x1c>
		return 1909;
 8000702:	f240 7375 	movw	r3, #1909	@ 0x775
 8000706:	e077      	b.n	80007f8 <getPeriod+0x10c>
	else if (strcmp(note, "la#")==0)
 8000708:	493e      	ldr	r1, [pc, #248]	@ (8000804 <getPeriod+0x118>)
 800070a:	6878      	ldr	r0, [r7, #4]
 800070c:	f7ff fd68 	bl	80001e0 <strcmp>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d102      	bne.n	800071c <getPeriod+0x30>
			return 1802;
 8000716:	f240 730a 	movw	r3, #1802	@ 0x70a
 800071a:	e06d      	b.n	80007f8 <getPeriod+0x10c>
	else if (strcmp(note, "si")==0)
 800071c:	493a      	ldr	r1, [pc, #232]	@ (8000808 <getPeriod+0x11c>)
 800071e:	6878      	ldr	r0, [r7, #4]
 8000720:	f7ff fd5e 	bl	80001e0 <strcmp>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d102      	bne.n	8000730 <getPeriod+0x44>
			return 1700;
 800072a:	f240 63a4 	movw	r3, #1700	@ 0x6a4
 800072e:	e063      	b.n	80007f8 <getPeriod+0x10c>
	else if (strcmp(note, "do")==0)
 8000730:	4936      	ldr	r1, [pc, #216]	@ (800080c <getPeriod+0x120>)
 8000732:	6878      	ldr	r0, [r7, #4]
 8000734:	f7ff fd54 	bl	80001e0 <strcmp>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d102      	bne.n	8000744 <getPeriod+0x58>
			return 3206;
 800073e:	f640 4386 	movw	r3, #3206	@ 0xc86
 8000742:	e059      	b.n	80007f8 <getPeriod+0x10c>
	else if (strcmp(note, "do#")==0)
 8000744:	4932      	ldr	r1, [pc, #200]	@ (8000810 <getPeriod+0x124>)
 8000746:	6878      	ldr	r0, [r7, #4]
 8000748:	f7ff fd4a 	bl	80001e0 <strcmp>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d102      	bne.n	8000758 <getPeriod+0x6c>
			return 3032;
 8000752:	f640 33d8 	movw	r3, #3032	@ 0xbd8
 8000756:	e04f      	b.n	80007f8 <getPeriod+0x10c>
	else if (strcmp(note, "re")==0)
 8000758:	492e      	ldr	r1, [pc, #184]	@ (8000814 <getPeriod+0x128>)
 800075a:	6878      	ldr	r0, [r7, #4]
 800075c:	f7ff fd40 	bl	80001e0 <strcmp>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d102      	bne.n	800076c <getPeriod+0x80>
			return 2857;
 8000766:	f640 3329 	movw	r3, #2857	@ 0xb29
 800076a:	e045      	b.n	80007f8 <getPeriod+0x10c>
	else if (strcmp(note, "re5")==0)
 800076c:	492a      	ldr	r1, [pc, #168]	@ (8000818 <getPeriod+0x12c>)
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f7ff fd36 	bl	80001e0 <strcmp>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d102      	bne.n	8000780 <getPeriod+0x94>
				return 1431;
 800077a:	f240 5397 	movw	r3, #1431	@ 0x597
 800077e:	e03b      	b.n	80007f8 <getPeriod+0x10c>
	else if (strcmp(note, "re#")==0)
 8000780:	4926      	ldr	r1, [pc, #152]	@ (800081c <getPeriod+0x130>)
 8000782:	6878      	ldr	r0, [r7, #4]
 8000784:	f7ff fd2c 	bl	80001e0 <strcmp>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d102      	bne.n	8000794 <getPeriod+0xa8>
			return 2700;
 800078e:	f640 238c 	movw	r3, #2700	@ 0xa8c
 8000792:	e031      	b.n	80007f8 <getPeriod+0x10c>
	else if (strcmp(note, "mi")==0)
 8000794:	4922      	ldr	r1, [pc, #136]	@ (8000820 <getPeriod+0x134>)
 8000796:	6878      	ldr	r0, [r7, #4]
 8000798:	f7ff fd22 	bl	80001e0 <strcmp>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d102      	bne.n	80007a8 <getPeriod+0xbc>
			return 2545;
 80007a2:	f640 13f1 	movw	r3, #2545	@ 0x9f1
 80007a6:	e027      	b.n	80007f8 <getPeriod+0x10c>
	else if (strcmp(note, "fa")==0)
 80007a8:	491e      	ldr	r1, [pc, #120]	@ (8000824 <getPeriod+0x138>)
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	f7ff fd18 	bl	80001e0 <strcmp>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d102      	bne.n	80007bc <getPeriod+0xd0>
			return 2406;
 80007b6:	f640 1366 	movw	r3, #2406	@ 0x966
 80007ba:	e01d      	b.n	80007f8 <getPeriod+0x10c>
	else if (strcmp(note, "fa#")==0)
 80007bc:	491a      	ldr	r1, [pc, #104]	@ (8000828 <getPeriod+0x13c>)
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f7ff fd0e 	bl	80001e0 <strcmp>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d102      	bne.n	80007d0 <getPeriod+0xe4>
			return 2270;
 80007ca:	f640 03de 	movw	r3, #2270	@ 0x8de
 80007ce:	e013      	b.n	80007f8 <getPeriod+0x10c>
	else if (strcmp(note, "sol")==0)
 80007d0:	4916      	ldr	r1, [pc, #88]	@ (800082c <getPeriod+0x140>)
 80007d2:	6878      	ldr	r0, [r7, #4]
 80007d4:	f7ff fd04 	bl	80001e0 <strcmp>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d102      	bne.n	80007e4 <getPeriod+0xf8>
			return 2142;
 80007de:	f640 035e 	movw	r3, #2142	@ 0x85e
 80007e2:	e009      	b.n	80007f8 <getPeriod+0x10c>
	else if (strcmp(note, "sol#")==0)
 80007e4:	4912      	ldr	r1, [pc, #72]	@ (8000830 <getPeriod+0x144>)
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f7ff fcfa 	bl	80001e0 <strcmp>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d102      	bne.n	80007f8 <getPeriod+0x10c>
			return 2024;
 80007f2:	f44f 63fd 	mov.w	r3, #2024	@ 0x7e8
 80007f6:	e7ff      	b.n	80007f8 <getPeriod+0x10c>
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	080058c8 	.word	0x080058c8
 8000804:	080058cc 	.word	0x080058cc
 8000808:	080058d0 	.word	0x080058d0
 800080c:	080058d4 	.word	0x080058d4
 8000810:	080058d8 	.word	0x080058d8
 8000814:	080058dc 	.word	0x080058dc
 8000818:	080058e0 	.word	0x080058e0
 800081c:	080058e4 	.word	0x080058e4
 8000820:	080058e8 	.word	0x080058e8
 8000824:	080058ec 	.word	0x080058ec
 8000828:	080058f0 	.word	0x080058f0
 800082c:	080058f4 	.word	0x080058f4
 8000830:	080058f8 	.word	0x080058f8

08000834 <setNote>:
void setNote (char* note, int delay){
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	6039      	str	r1, [r7, #0]
	setFrequency(note);
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f7ff fea6 	bl	8000590 <setFrequency>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000844:	2104      	movs	r1, #4
 8000846:	4807      	ldr	r0, [pc, #28]	@ (8000864 <setNote+0x30>)
 8000848:	f003 f84e 	bl	80038e8 <HAL_TIM_PWM_Start>
	HAL_Delay(delay);
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	4618      	mov	r0, r3
 8000850:	f001 f9aa 	bl	8001ba8 <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000854:	2104      	movs	r1, #4
 8000856:	4803      	ldr	r0, [pc, #12]	@ (8000864 <setNote+0x30>)
 8000858:	f003 f8f6 	bl	8003a48 <HAL_TIM_PWM_Stop>
}
 800085c:	bf00      	nop
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	200001e0 	.word	0x200001e0

08000868 <play_zero>:
void play_zero(){
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
	 setNote("sol", (int)TIME_UNIT * 3/8);
 800086c:	f240 1177 	movw	r1, #375	@ 0x177
 8000870:	4802      	ldr	r0, [pc, #8]	@ (800087c <play_zero+0x14>)
 8000872:	f7ff ffdf 	bl	8000834 <setNote>
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	080058f4 	.word	0x080058f4

08000880 <play_three>:
void play_three(){
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
	 setNote("la", (int)TIME_UNIT * 3/8);
 8000884:	f240 1177 	movw	r1, #375	@ 0x177
 8000888:	4802      	ldr	r0, [pc, #8]	@ (8000894 <play_three+0x14>)
 800088a:	f7ff ffd3 	bl	8000834 <setNote>
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	080058c8 	.word	0x080058c8

08000898 <play_c>:
void play_c(){
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
	 setNote("si", (int)TIME_UNIT * 3/8);
 800089c:	f240 1177 	movw	r1, #375	@ 0x177
 80008a0:	4802      	ldr	r0, [pc, #8]	@ (80008ac <play_c+0x14>)
 80008a2:	f7ff ffc7 	bl	8000834 <setNote>
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	080058d0 	.word	0x080058d0

080008b0 <play_f>:
void play_f(){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	 setNote("do", (int)TIME_UNIT * 3/8);
 80008b4:	f240 1177 	movw	r1, #375	@ 0x177
 80008b8:	4802      	ldr	r0, [pc, #8]	@ (80008c4 <play_f+0x14>)
 80008ba:	f7ff ffbb 	bl	8000834 <setNote>
}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	080058d4 	.word	0x080058d4

080008c8 <HAL_TIM_PeriodElapsedCallback>:
static void MX_TIM11_Init(void);
static void MX_TIM10_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	if(htim==&htim11)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	4a10      	ldr	r2, [pc, #64]	@ (8000914 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d109      	bne.n	80008ec <HAL_TIM_PeriodElapsedCallback+0x24>
		HAL_SPI_Transmit_DMA(&hspi1, matrix[column_index], 2);
 80008d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000918 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	4a0f      	ldr	r2, [pc, #60]	@ (800091c <HAL_TIM_PeriodElapsedCallback+0x54>)
 80008e0:	4413      	add	r3, r2
 80008e2:	2202      	movs	r2, #2
 80008e4:	4619      	mov	r1, r3
 80008e6:	480e      	ldr	r0, [pc, #56]	@ (8000920 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80008e8:	f002 fcdc 	bl	80032a4 <HAL_SPI_Transmit_DMA>
	if(htim==&htim10)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	4a0d      	ldr	r2, [pc, #52]	@ (8000924 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d102      	bne.n	80008fa <HAL_TIM_PeriodElapsedCallback+0x32>
		activate = 1;
 80008f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000928 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	601a      	str	r2, [r3, #0]
	if (htim==&htim3)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4a0b      	ldr	r2, [pc, #44]	@ (800092c <HAL_TIM_PeriodElapsedCallback+0x64>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d104      	bne.n	800090c <HAL_TIM_PeriodElapsedCallback+0x44>
		memcpy(matrix, matrix_void, sizeof(matrix));
 8000902:	4b06      	ldr	r3, [pc, #24]	@ (800091c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000904:	4a0a      	ldr	r2, [pc, #40]	@ (8000930 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000906:	ca07      	ldmia	r2, {r0, r1, r2}
 8000908:	c303      	stmia	r3!, {r0, r1}
 800090a:	801a      	strh	r2, [r3, #0]
}
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	200002b8 	.word	0x200002b8
 8000918:	20000354 	.word	0x20000354
 800091c:	20000000 	.word	0x20000000
 8000920:	20000128 	.word	0x20000128
 8000924:	20000270 	.word	0x20000270
 8000928:	20000344 	.word	0x20000344
 800092c:	20000228 	.word	0x20000228
 8000930:	2000000c 	.word	0x2000000c

08000934 <HAL_SPI_TxCpltCallback>:
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi){
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
	if(hspi==&hspi1){
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	4a0e      	ldr	r2, [pc, #56]	@ (8000978 <HAL_SPI_TxCpltCallback+0x44>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d115      	bne.n	8000970 <HAL_SPI_TxCpltCallback+0x3c>
		HAL_GPIO_WritePin(RCLK_PIN, GPIO_PIN_SET);
 8000944:	2201      	movs	r2, #1
 8000946:	2140      	movs	r1, #64	@ 0x40
 8000948:	480c      	ldr	r0, [pc, #48]	@ (800097c <HAL_SPI_TxCpltCallback+0x48>)
 800094a:	f001 ff6f 	bl	800282c <HAL_GPIO_WritePin>
		if(++column_index>4)
 800094e:	4b0c      	ldr	r3, [pc, #48]	@ (8000980 <HAL_SPI_TxCpltCallback+0x4c>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	3301      	adds	r3, #1
 8000954:	4a0a      	ldr	r2, [pc, #40]	@ (8000980 <HAL_SPI_TxCpltCallback+0x4c>)
 8000956:	6013      	str	r3, [r2, #0]
 8000958:	4b09      	ldr	r3, [pc, #36]	@ (8000980 <HAL_SPI_TxCpltCallback+0x4c>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2b04      	cmp	r3, #4
 800095e:	dd02      	ble.n	8000966 <HAL_SPI_TxCpltCallback+0x32>
			column_index=0;
 8000960:	4b07      	ldr	r3, [pc, #28]	@ (8000980 <HAL_SPI_TxCpltCallback+0x4c>)
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(RCLK_PIN, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	2140      	movs	r1, #64	@ 0x40
 800096a:	4804      	ldr	r0, [pc, #16]	@ (800097c <HAL_SPI_TxCpltCallback+0x48>)
 800096c:	f001 ff5e 	bl	800282c <HAL_GPIO_WritePin>
	}
}
 8000970:	bf00      	nop
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000128 	.word	0x20000128
 800097c:	40020400 	.word	0x40020400
 8000980:	20000354 	.word	0x20000354

08000984 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000984:	b5b0      	push	{r4, r5, r7, lr}
 8000986:	b0b6      	sub	sp, #216	@ 0xd8
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800098a:	f001 f89b 	bl	8001ac4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800098e:	f000 fb6f 	bl	8001070 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000992:	f000 fd8f 	bl	80014b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000996:	f000 fd6d 	bl	8001474 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800099a:	f000 fd41 	bl	8001420 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800099e:	f000 fc09 	bl	80011b4 <MX_TIM1_Init>
  MX_SPI1_Init();
 80009a2:	f000 fbd1 	bl	8001148 <MX_SPI1_Init>
  MX_TIM11_Init();
 80009a6:	f000 fd17 	bl	80013d8 <MX_TIM11_Init>
  MX_TIM10_Init();
 80009aa:	f000 fcf1 	bl	8001390 <MX_TIM10_Init>
  MX_TIM3_Init();
 80009ae:	f000 fca1 	bl	80012f4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  keyboard_t data[4][4];
  for(int i = 0; i < 4; i++) {
 80009b2:	2300      	movs	r3, #0
 80009b4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80009b8:	e05d      	b.n	8000a76 <main+0xf2>
    for(int j = 0; j < 4; j++) {
 80009ba:	2300      	movs	r3, #0
 80009bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80009c0:	e050      	b.n	8000a64 <main+0xe0>
	    data[i][j].state = GPIO_PIN_SET;
 80009c2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80009c6:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 80009ca:	461a      	mov	r2, r3
 80009cc:	0052      	lsls	r2, r2, #1
 80009ce:	441a      	add	r2, r3
 80009d0:	0093      	lsls	r3, r2, #2
 80009d2:	461a      	mov	r2, r3
 80009d4:	460b      	mov	r3, r1
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	440b      	add	r3, r1
 80009da:	011b      	lsls	r3, r3, #4
 80009dc:	4413      	add	r3, r2
 80009de:	33d8      	adds	r3, #216	@ 0xd8
 80009e0:	443b      	add	r3, r7
 80009e2:	3bd6      	subs	r3, #214	@ 0xd6
 80009e4:	2201      	movs	r2, #1
 80009e6:	701a      	strb	r2, [r3, #0]
	    data[i][j].value[1] = '\0';
 80009e8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80009ec:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 80009f0:	461a      	mov	r2, r3
 80009f2:	0052      	lsls	r2, r2, #1
 80009f4:	441a      	add	r2, r3
 80009f6:	0093      	lsls	r3, r2, #2
 80009f8:	461a      	mov	r2, r3
 80009fa:	460b      	mov	r3, r1
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	440b      	add	r3, r1
 8000a00:	011b      	lsls	r3, r3, #4
 8000a02:	4413      	add	r3, r2
 8000a04:	33d8      	adds	r3, #216	@ 0xd8
 8000a06:	443b      	add	r3, r7
 8000a08:	3bd7      	subs	r3, #215	@ 0xd7
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	701a      	strb	r2, [r3, #0]
	    data[i][j].pressed = 0;
 8000a0e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000a12:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 8000a16:	461a      	mov	r2, r3
 8000a18:	0052      	lsls	r2, r2, #1
 8000a1a:	441a      	add	r2, r3
 8000a1c:	0093      	lsls	r3, r2, #2
 8000a1e:	461a      	mov	r2, r3
 8000a20:	460b      	mov	r3, r1
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	440b      	add	r3, r1
 8000a26:	011b      	lsls	r3, r3, #4
 8000a28:	4413      	add	r3, r2
 8000a2a:	33d8      	adds	r3, #216	@ 0xd8
 8000a2c:	443b      	add	r3, r7
 8000a2e:	3bd4      	subs	r3, #212	@ 0xd4
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
	    data[i][j].printed = 0;
 8000a34:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000a38:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	0052      	lsls	r2, r2, #1
 8000a40:	441a      	add	r2, r3
 8000a42:	0093      	lsls	r3, r2, #2
 8000a44:	461a      	mov	r2, r3
 8000a46:	460b      	mov	r3, r1
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	440b      	add	r3, r1
 8000a4c:	011b      	lsls	r3, r3, #4
 8000a4e:	4413      	add	r3, r2
 8000a50:	33d8      	adds	r3, #216	@ 0xd8
 8000a52:	443b      	add	r3, r7
 8000a54:	3bd0      	subs	r3, #208	@ 0xd0
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
    for(int j = 0; j < 4; j++) {
 8000a5a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000a5e:	3301      	adds	r3, #1
 8000a60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8000a64:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000a68:	2b03      	cmp	r3, #3
 8000a6a:	ddaa      	ble.n	80009c2 <main+0x3e>
  for(int i = 0; i < 4; i++) {
 8000a6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000a70:	3301      	adds	r3, #1
 8000a72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000a76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000a7a:	2b03      	cmp	r3, #3
 8000a7c:	dd9d      	ble.n	80009ba <main+0x36>
    }
  }

  data[0][0].value[0] = '0';
 8000a7e:	2330      	movs	r3, #48	@ 0x30
 8000a80:	703b      	strb	r3, [r7, #0]
  data[0][1].value[0] = '1';
 8000a82:	2331      	movs	r3, #49	@ 0x31
 8000a84:	733b      	strb	r3, [r7, #12]
  data[0][2].value[0] = '2';
 8000a86:	2332      	movs	r3, #50	@ 0x32
 8000a88:	763b      	strb	r3, [r7, #24]
  data[0][3].value[0] = '3';
 8000a8a:	2333      	movs	r3, #51	@ 0x33
 8000a8c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  data[1][0].value[0] = '4';
 8000a90:	2334      	movs	r3, #52	@ 0x34
 8000a92:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  data[1][1].value[0] = '5';
 8000a96:	2335      	movs	r3, #53	@ 0x35
 8000a98:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  data[1][2].value[0] = '6';
 8000a9c:	2336      	movs	r3, #54	@ 0x36
 8000a9e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  data[1][3].value[0] = '7';
 8000aa2:	2337      	movs	r3, #55	@ 0x37
 8000aa4:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  data[2][0].value[0] = '8';
 8000aa8:	2338      	movs	r3, #56	@ 0x38
 8000aaa:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
  data[2][1].value[0] = '9';
 8000aae:	2339      	movs	r3, #57	@ 0x39
 8000ab0:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  data[2][2].value[0] = 'A';
 8000ab4:	2341      	movs	r3, #65	@ 0x41
 8000ab6:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
  data[2][3].value[0] = 'B';
 8000aba:	2342      	movs	r3, #66	@ 0x42
 8000abc:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
  data[3][0].value[0] = 'C';
 8000ac0:	2343      	movs	r3, #67	@ 0x43
 8000ac2:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
  data[3][1].value[0] = 'D';
 8000ac6:	2344      	movs	r3, #68	@ 0x44
 8000ac8:	f887 309c 	strb.w	r3, [r7, #156]	@ 0x9c
  data[3][2].value[0] = 'E';
 8000acc:	2345      	movs	r3, #69	@ 0x45
 8000ace:	f887 30a8 	strb.w	r3, [r7, #168]	@ 0xa8
  data[3][3].value[0] = 'F';
 8000ad2:	2346      	movs	r3, #70	@ 0x46
 8000ad4:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ade:	4892      	ldr	r0, [pc, #584]	@ (8000d28 <main+0x3a4>)
 8000ae0:	f001 fea4 	bl	800282c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000aea:	488f      	ldr	r0, [pc, #572]	@ (8000d28 <main+0x3a4>)
 8000aec:	f001 fe9e 	bl	800282c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8000af0:	2200      	movs	r2, #0
 8000af2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000af6:	488c      	ldr	r0, [pc, #560]	@ (8000d28 <main+0x3a4>)
 8000af8:	f001 fe98 	bl	800282c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8000afc:	2200      	movs	r2, #0
 8000afe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b02:	4889      	ldr	r0, [pc, #548]	@ (8000d28 <main+0x3a4>)
 8000b04:	f001 fe92 	bl	800282c <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start_IT(&htim10);
 8000b08:	4888      	ldr	r0, [pc, #544]	@ (8000d2c <main+0x3a8>)
 8000b0a:	f002 fe31 	bl	8003770 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 8000b0e:	4888      	ldr	r0, [pc, #544]	@ (8000d30 <main+0x3ac>)
 8000b10:	f002 fe2e 	bl	8003770 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	HAL_GPIO_WritePin(GPIOC, COLUMN_PIN[column], GPIO_PIN_SET);
 8000b14:	4b87      	ldr	r3, [pc, #540]	@ (8000d34 <main+0x3b0>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a87      	ldr	r2, [pc, #540]	@ (8000d38 <main+0x3b4>)
 8000b1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b1e:	b29b      	uxth	r3, r3
 8000b20:	2201      	movs	r2, #1
 8000b22:	4619      	mov	r1, r3
 8000b24:	4880      	ldr	r0, [pc, #512]	@ (8000d28 <main+0x3a4>)
 8000b26:	f001 fe81 	bl	800282c <HAL_GPIO_WritePin>

	  	if(activate) {
 8000b2a:	4b84      	ldr	r3, [pc, #528]	@ (8000d3c <main+0x3b8>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d0f0      	beq.n	8000b14 <main+0x190>
	  		activate = 0;
 8000b32:	4b82      	ldr	r3, [pc, #520]	@ (8000d3c <main+0x3b8>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
			data[state_i][state_j].state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12);
 8000b38:	4b81      	ldr	r3, [pc, #516]	@ (8000d40 <main+0x3bc>)
 8000b3a:	681c      	ldr	r4, [r3, #0]
 8000b3c:	4b81      	ldr	r3, [pc, #516]	@ (8000d44 <main+0x3c0>)
 8000b3e:	681d      	ldr	r5, [r3, #0]
 8000b40:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b44:	4878      	ldr	r0, [pc, #480]	@ (8000d28 <main+0x3a4>)
 8000b46:	f001 fe59 	bl	80027fc <HAL_GPIO_ReadPin>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	462a      	mov	r2, r5
 8000b50:	0052      	lsls	r2, r2, #1
 8000b52:	442a      	add	r2, r5
 8000b54:	0093      	lsls	r3, r2, #2
 8000b56:	461a      	mov	r2, r3
 8000b58:	4623      	mov	r3, r4
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	4423      	add	r3, r4
 8000b5e:	011b      	lsls	r3, r3, #4
 8000b60:	4413      	add	r3, r2
 8000b62:	33d8      	adds	r3, #216	@ 0xd8
 8000b64:	443b      	add	r3, r7
 8000b66:	3bd6      	subs	r3, #214	@ 0xd6
 8000b68:	460a      	mov	r2, r1
 8000b6a:	701a      	strb	r2, [r3, #0]
			state_i++;
 8000b6c:	4b74      	ldr	r3, [pc, #464]	@ (8000d40 <main+0x3bc>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	3301      	adds	r3, #1
 8000b72:	4a73      	ldr	r2, [pc, #460]	@ (8000d40 <main+0x3bc>)
 8000b74:	6013      	str	r3, [r2, #0]
			data[state_i][state_j].state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000b76:	4b72      	ldr	r3, [pc, #456]	@ (8000d40 <main+0x3bc>)
 8000b78:	681c      	ldr	r4, [r3, #0]
 8000b7a:	4b72      	ldr	r3, [pc, #456]	@ (8000d44 <main+0x3c0>)
 8000b7c:	681d      	ldr	r5, [r3, #0]
 8000b7e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b82:	4869      	ldr	r0, [pc, #420]	@ (8000d28 <main+0x3a4>)
 8000b84:	f001 fe3a 	bl	80027fc <HAL_GPIO_ReadPin>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	462a      	mov	r2, r5
 8000b8e:	0052      	lsls	r2, r2, #1
 8000b90:	442a      	add	r2, r5
 8000b92:	0093      	lsls	r3, r2, #2
 8000b94:	461a      	mov	r2, r3
 8000b96:	4623      	mov	r3, r4
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	4423      	add	r3, r4
 8000b9c:	011b      	lsls	r3, r3, #4
 8000b9e:	4413      	add	r3, r2
 8000ba0:	33d8      	adds	r3, #216	@ 0xd8
 8000ba2:	443b      	add	r3, r7
 8000ba4:	3bd6      	subs	r3, #214	@ 0xd6
 8000ba6:	460a      	mov	r2, r1
 8000ba8:	701a      	strb	r2, [r3, #0]
			state_i++;
 8000baa:	4b65      	ldr	r3, [pc, #404]	@ (8000d40 <main+0x3bc>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	4a63      	ldr	r2, [pc, #396]	@ (8000d40 <main+0x3bc>)
 8000bb2:	6013      	str	r3, [r2, #0]
			data[state_i][state_j].state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);
 8000bb4:	4b62      	ldr	r3, [pc, #392]	@ (8000d40 <main+0x3bc>)
 8000bb6:	681c      	ldr	r4, [r3, #0]
 8000bb8:	4b62      	ldr	r3, [pc, #392]	@ (8000d44 <main+0x3c0>)
 8000bba:	681d      	ldr	r5, [r3, #0]
 8000bbc:	2104      	movs	r1, #4
 8000bbe:	485a      	ldr	r0, [pc, #360]	@ (8000d28 <main+0x3a4>)
 8000bc0:	f001 fe1c 	bl	80027fc <HAL_GPIO_ReadPin>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	462a      	mov	r2, r5
 8000bca:	0052      	lsls	r2, r2, #1
 8000bcc:	442a      	add	r2, r5
 8000bce:	0093      	lsls	r3, r2, #2
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	4623      	mov	r3, r4
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	4423      	add	r3, r4
 8000bd8:	011b      	lsls	r3, r3, #4
 8000bda:	4413      	add	r3, r2
 8000bdc:	33d8      	adds	r3, #216	@ 0xd8
 8000bde:	443b      	add	r3, r7
 8000be0:	3bd6      	subs	r3, #214	@ 0xd6
 8000be2:	460a      	mov	r2, r1
 8000be4:	701a      	strb	r2, [r3, #0]
			state_i++;
 8000be6:	4b56      	ldr	r3, [pc, #344]	@ (8000d40 <main+0x3bc>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	3301      	adds	r3, #1
 8000bec:	4a54      	ldr	r2, [pc, #336]	@ (8000d40 <main+0x3bc>)
 8000bee:	6013      	str	r3, [r2, #0]
			data[state_i][state_j].state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3);
 8000bf0:	4b53      	ldr	r3, [pc, #332]	@ (8000d40 <main+0x3bc>)
 8000bf2:	681c      	ldr	r4, [r3, #0]
 8000bf4:	4b53      	ldr	r3, [pc, #332]	@ (8000d44 <main+0x3c0>)
 8000bf6:	681d      	ldr	r5, [r3, #0]
 8000bf8:	2108      	movs	r1, #8
 8000bfa:	484b      	ldr	r0, [pc, #300]	@ (8000d28 <main+0x3a4>)
 8000bfc:	f001 fdfe 	bl	80027fc <HAL_GPIO_ReadPin>
 8000c00:	4603      	mov	r3, r0
 8000c02:	4619      	mov	r1, r3
 8000c04:	462a      	mov	r2, r5
 8000c06:	0052      	lsls	r2, r2, #1
 8000c08:	442a      	add	r2, r5
 8000c0a:	0093      	lsls	r3, r2, #2
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4623      	mov	r3, r4
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	4423      	add	r3, r4
 8000c14:	011b      	lsls	r3, r3, #4
 8000c16:	4413      	add	r3, r2
 8000c18:	33d8      	adds	r3, #216	@ 0xd8
 8000c1a:	443b      	add	r3, r7
 8000c1c:	3bd6      	subs	r3, #214	@ 0xd6
 8000c1e:	460a      	mov	r2, r1
 8000c20:	701a      	strb	r2, [r3, #0]
			state_i = 0;
 8000c22:	4b47      	ldr	r3, [pc, #284]	@ (8000d40 <main+0x3bc>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, COLUMN_PIN[column], GPIO_PIN_RESET);
 8000c28:	4b42      	ldr	r3, [pc, #264]	@ (8000d34 <main+0x3b0>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a42      	ldr	r2, [pc, #264]	@ (8000d38 <main+0x3b4>)
 8000c2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	2200      	movs	r2, #0
 8000c36:	4619      	mov	r1, r3
 8000c38:	483b      	ldr	r0, [pc, #236]	@ (8000d28 <main+0x3a4>)
 8000c3a:	f001 fdf7 	bl	800282c <HAL_GPIO_WritePin>

			column++;
 8000c3e:	4b3d      	ldr	r3, [pc, #244]	@ (8000d34 <main+0x3b0>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	3301      	adds	r3, #1
 8000c44:	4a3b      	ldr	r2, [pc, #236]	@ (8000d34 <main+0x3b0>)
 8000c46:	6013      	str	r3, [r2, #0]
			if(column > 3) {
 8000c48:	4b3a      	ldr	r3, [pc, #232]	@ (8000d34 <main+0x3b0>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2b03      	cmp	r3, #3
 8000c4e:	dd02      	ble.n	8000c56 <main+0x2d2>
				column = 0;
 8000c50:	4b38      	ldr	r3, [pc, #224]	@ (8000d34 <main+0x3b0>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
			}

			state_j++;
 8000c56:	4b3b      	ldr	r3, [pc, #236]	@ (8000d44 <main+0x3c0>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	4a39      	ldr	r2, [pc, #228]	@ (8000d44 <main+0x3c0>)
 8000c5e:	6013      	str	r3, [r2, #0]
			if(state_j > 3) {
 8000c60:	4b38      	ldr	r3, [pc, #224]	@ (8000d44 <main+0x3c0>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2b03      	cmp	r3, #3
 8000c66:	dd02      	ble.n	8000c6e <main+0x2ea>
				state_j = 0;
 8000c68:	4b36      	ldr	r3, [pc, #216]	@ (8000d44 <main+0x3c0>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
			}

			for(int i = 0; i < 4; i++) {
 8000c6e:	2300      	movs	r3, #0
 8000c70:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000c74:	e04b      	b.n	8000d0e <main+0x38a>
				for(int j = 0; j < 4; j++) {
 8000c76:	2300      	movs	r3, #0
 8000c78:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8000c7c:	e03e      	b.n	8000cfc <main+0x378>
					if(data[i][j].state == GPIO_PIN_SET) {
 8000c7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000c82:	f8d7 10cc 	ldr.w	r1, [r7, #204]	@ 0xcc
 8000c86:	461a      	mov	r2, r3
 8000c88:	0052      	lsls	r2, r2, #1
 8000c8a:	441a      	add	r2, r3
 8000c8c:	0093      	lsls	r3, r2, #2
 8000c8e:	461a      	mov	r2, r3
 8000c90:	460b      	mov	r3, r1
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	440b      	add	r3, r1
 8000c96:	011b      	lsls	r3, r3, #4
 8000c98:	4413      	add	r3, r2
 8000c9a:	33d8      	adds	r3, #216	@ 0xd8
 8000c9c:	443b      	add	r3, r7
 8000c9e:	3bd6      	subs	r3, #214	@ 0xd6
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d125      	bne.n	8000cf2 <main+0x36e>
						data[i][j].pressed = 0;
 8000ca6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000caa:	f8d7 10cc 	ldr.w	r1, [r7, #204]	@ 0xcc
 8000cae:	461a      	mov	r2, r3
 8000cb0:	0052      	lsls	r2, r2, #1
 8000cb2:	441a      	add	r2, r3
 8000cb4:	0093      	lsls	r3, r2, #2
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	460b      	mov	r3, r1
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	440b      	add	r3, r1
 8000cbe:	011b      	lsls	r3, r3, #4
 8000cc0:	4413      	add	r3, r2
 8000cc2:	33d8      	adds	r3, #216	@ 0xd8
 8000cc4:	443b      	add	r3, r7
 8000cc6:	3bd4      	subs	r3, #212	@ 0xd4
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
						data[i][j].printed = 0;
 8000ccc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000cd0:	f8d7 10cc 	ldr.w	r1, [r7, #204]	@ 0xcc
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	0052      	lsls	r2, r2, #1
 8000cd8:	441a      	add	r2, r3
 8000cda:	0093      	lsls	r3, r2, #2
 8000cdc:	461a      	mov	r2, r3
 8000cde:	460b      	mov	r3, r1
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	440b      	add	r3, r1
 8000ce4:	011b      	lsls	r3, r3, #4
 8000ce6:	4413      	add	r3, r2
 8000ce8:	33d8      	adds	r3, #216	@ 0xd8
 8000cea:	443b      	add	r3, r7
 8000cec:	3bd0      	subs	r3, #208	@ 0xd0
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
				for(int j = 0; j < 4; j++) {
 8000cf2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8000cfc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000d00:	2b03      	cmp	r3, #3
 8000d02:	ddbc      	ble.n	8000c7e <main+0x2fa>
			for(int i = 0; i < 4; i++) {
 8000d04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000d08:	3301      	adds	r3, #1
 8000d0a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000d0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000d12:	2b03      	cmp	r3, #3
 8000d14:	ddaf      	ble.n	8000c76 <main+0x2f2>
					}
				}
			}

			for(int i = 0; i < 4; i++) {
 8000d16:	2300      	movs	r3, #0
 8000d18:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000d1c:	e17b      	b.n	8001016 <main+0x692>
				for(int j = 0; j < 4; j++) {
 8000d1e:	2300      	movs	r3, #0
 8000d20:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8000d24:	e16d      	b.n	8001002 <main+0x67e>
 8000d26:	bf00      	nop
 8000d28:	40020800 	.word	0x40020800
 8000d2c:	20000270 	.word	0x20000270
 8000d30:	200002b8 	.word	0x200002b8
 8000d34:	20000350 	.word	0x20000350
 8000d38:	200000a8 	.word	0x200000a8
 8000d3c:	20000344 	.word	0x20000344
 8000d40:	20000348 	.word	0x20000348
 8000d44:	2000034c 	.word	0x2000034c
					if(data[i][j].state == GPIO_PIN_RESET) {
 8000d48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000d4c:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 8000d50:	461a      	mov	r2, r3
 8000d52:	0052      	lsls	r2, r2, #1
 8000d54:	441a      	add	r2, r3
 8000d56:	0093      	lsls	r3, r2, #2
 8000d58:	461a      	mov	r2, r3
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	440b      	add	r3, r1
 8000d60:	011b      	lsls	r3, r3, #4
 8000d62:	4413      	add	r3, r2
 8000d64:	33d8      	adds	r3, #216	@ 0xd8
 8000d66:	443b      	add	r3, r7
 8000d68:	3bd6      	subs	r3, #214	@ 0xd6
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d12a      	bne.n	8000dc6 <main+0x442>
						length = snprintf(message, 32, "%s ", data[i][j].value);
 8000d70:	4638      	mov	r0, r7
 8000d72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000d76:	461a      	mov	r2, r3
 8000d78:	0052      	lsls	r2, r2, #1
 8000d7a:	441a      	add	r2, r3
 8000d7c:	0093      	lsls	r3, r2, #2
 8000d7e:	461a      	mov	r2, r3
 8000d80:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 8000d84:	460b      	mov	r3, r1
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	440b      	add	r3, r1
 8000d8a:	011b      	lsls	r3, r3, #4
 8000d8c:	4413      	add	r3, r2
 8000d8e:	4403      	add	r3, r0
 8000d90:	4aa4      	ldr	r2, [pc, #656]	@ (8001024 <main+0x6a0>)
 8000d92:	2120      	movs	r1, #32
 8000d94:	48a4      	ldr	r0, [pc, #656]	@ (8001028 <main+0x6a4>)
 8000d96:	f004 f8d7 	bl	8004f48 <sniprintf>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	4aa3      	ldr	r2, [pc, #652]	@ (800102c <main+0x6a8>)
 8000d9e:	6013      	str	r3, [r2, #0]
						data[i][j].pressed = 1;
 8000da0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000da4:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 8000da8:	461a      	mov	r2, r3
 8000daa:	0052      	lsls	r2, r2, #1
 8000dac:	441a      	add	r2, r3
 8000dae:	0093      	lsls	r3, r2, #2
 8000db0:	461a      	mov	r2, r3
 8000db2:	460b      	mov	r3, r1
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	440b      	add	r3, r1
 8000db8:	011b      	lsls	r3, r3, #4
 8000dba:	4413      	add	r3, r2
 8000dbc:	33d8      	adds	r3, #216	@ 0xd8
 8000dbe:	443b      	add	r3, r7
 8000dc0:	3bd4      	subs	r3, #212	@ 0xd4
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	601a      	str	r2, [r3, #0]
					}

					if(data[i][j].pressed && !data[i][j].printed){
 8000dc6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000dca:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 8000dce:	461a      	mov	r2, r3
 8000dd0:	0052      	lsls	r2, r2, #1
 8000dd2:	441a      	add	r2, r3
 8000dd4:	0093      	lsls	r3, r2, #2
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	460b      	mov	r3, r1
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	440b      	add	r3, r1
 8000dde:	011b      	lsls	r3, r3, #4
 8000de0:	4413      	add	r3, r2
 8000de2:	33d8      	adds	r3, #216	@ 0xd8
 8000de4:	443b      	add	r3, r7
 8000de6:	3bd4      	subs	r3, #212	@ 0xd4
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	f000 8104 	beq.w	8000ff8 <main+0x674>
 8000df0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000df4:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 8000df8:	461a      	mov	r2, r3
 8000dfa:	0052      	lsls	r2, r2, #1
 8000dfc:	441a      	add	r2, r3
 8000dfe:	0093      	lsls	r3, r2, #2
 8000e00:	461a      	mov	r2, r3
 8000e02:	460b      	mov	r3, r1
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	440b      	add	r3, r1
 8000e08:	011b      	lsls	r3, r3, #4
 8000e0a:	4413      	add	r3, r2
 8000e0c:	33d8      	adds	r3, #216	@ 0xd8
 8000e0e:	443b      	add	r3, r7
 8000e10:	3bd0      	subs	r3, #208	@ 0xd0
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	f040 80ef 	bne.w	8000ff8 <main+0x674>
						HAL_UART_Transmit(&huart2, message, length, 50);
 8000e1a:	4b84      	ldr	r3, [pc, #528]	@ (800102c <main+0x6a8>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	b29a      	uxth	r2, r3
 8000e20:	2332      	movs	r3, #50	@ 0x32
 8000e22:	4981      	ldr	r1, [pc, #516]	@ (8001028 <main+0x6a4>)
 8000e24:	4882      	ldr	r0, [pc, #520]	@ (8001030 <main+0x6ac>)
 8000e26:	f003 fd1a 	bl	800485e <HAL_UART_Transmit>
						data[i][j].printed = 1;
 8000e2a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000e2e:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 8000e32:	461a      	mov	r2, r3
 8000e34:	0052      	lsls	r2, r2, #1
 8000e36:	441a      	add	r2, r3
 8000e38:	0093      	lsls	r3, r2, #2
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	440b      	add	r3, r1
 8000e42:	011b      	lsls	r3, r3, #4
 8000e44:	4413      	add	r3, r2
 8000e46:	33d8      	adds	r3, #216	@ 0xd8
 8000e48:	443b      	add	r3, r7
 8000e4a:	3bd0      	subs	r3, #208	@ 0xd0
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	601a      	str	r2, [r3, #0]
						switch (data[i][j].value[0]){
 8000e50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000e54:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 8000e58:	461a      	mov	r2, r3
 8000e5a:	0052      	lsls	r2, r2, #1
 8000e5c:	441a      	add	r2, r3
 8000e5e:	0093      	lsls	r3, r2, #2
 8000e60:	461a      	mov	r2, r3
 8000e62:	460b      	mov	r3, r1
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	440b      	add	r3, r1
 8000e68:	011b      	lsls	r3, r3, #4
 8000e6a:	4413      	add	r3, r2
 8000e6c:	33d8      	adds	r3, #216	@ 0xd8
 8000e6e:	443b      	add	r3, r7
 8000e70:	3bd8      	subs	r3, #216	@ 0xd8
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	3b30      	subs	r3, #48	@ 0x30
 8000e76:	2b16      	cmp	r3, #22
 8000e78:	f200 80be 	bhi.w	8000ff8 <main+0x674>
 8000e7c:	a201      	add	r2, pc, #4	@ (adr r2, 8000e84 <main+0x500>)
 8000e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e82:	bf00      	nop
 8000e84:	08000ee1 	.word	0x08000ee1
 8000e88:	08000ef1 	.word	0x08000ef1
 8000e8c:	08000f03 	.word	0x08000f03
 8000e90:	08000f15 	.word	0x08000f15
 8000e94:	08000f25 	.word	0x08000f25
 8000e98:	08000f37 	.word	0x08000f37
 8000e9c:	08000f49 	.word	0x08000f49
 8000ea0:	08000f5b 	.word	0x08000f5b
 8000ea4:	08000f6d 	.word	0x08000f6d
 8000ea8:	08000f7f 	.word	0x08000f7f
 8000eac:	08000ff9 	.word	0x08000ff9
 8000eb0:	08000ff9 	.word	0x08000ff9
 8000eb4:	08000ff9 	.word	0x08000ff9
 8000eb8:	08000ff9 	.word	0x08000ff9
 8000ebc:	08000ff9 	.word	0x08000ff9
 8000ec0:	08000ff9 	.word	0x08000ff9
 8000ec4:	08000ff9 	.word	0x08000ff9
 8000ec8:	08000f91 	.word	0x08000f91
 8000ecc:	08000fa3 	.word	0x08000fa3
 8000ed0:	08000fb5 	.word	0x08000fb5
 8000ed4:	08000fc5 	.word	0x08000fc5
 8000ed8:	08000fd7 	.word	0x08000fd7
 8000edc:	08000fe9 	.word	0x08000fe9
							case '0':
								memcpy(matrix, matrix_void, sizeof(matrix));
 8000ee0:	4b54      	ldr	r3, [pc, #336]	@ (8001034 <main+0x6b0>)
 8000ee2:	4a55      	ldr	r2, [pc, #340]	@ (8001038 <main+0x6b4>)
 8000ee4:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ee6:	c303      	stmia	r3!, {r0, r1}
 8000ee8:	801a      	strh	r2, [r3, #0]
								play_zero();
 8000eea:	f7ff fcbd 	bl	8000868 <play_zero>
								break;
 8000eee:	e083      	b.n	8000ff8 <main+0x674>
							case '1':
								memcpy(matrix, matrix_1, sizeof(matrix));
 8000ef0:	4b50      	ldr	r3, [pc, #320]	@ (8001034 <main+0x6b0>)
 8000ef2:	4a52      	ldr	r2, [pc, #328]	@ (800103c <main+0x6b8>)
 8000ef4:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ef6:	c303      	stmia	r3!, {r0, r1}
 8000ef8:	801a      	strh	r2, [r3, #0]
								HAL_TIM_Base_Start_IT(&htim3);
 8000efa:	4851      	ldr	r0, [pc, #324]	@ (8001040 <main+0x6bc>)
 8000efc:	f002 fc38 	bl	8003770 <HAL_TIM_Base_Start_IT>
								break;
 8000f00:	e07a      	b.n	8000ff8 <main+0x674>
							case '2':
								memcpy(matrix, matrix_2, sizeof(matrix));
 8000f02:	4b4c      	ldr	r3, [pc, #304]	@ (8001034 <main+0x6b0>)
 8000f04:	4a4f      	ldr	r2, [pc, #316]	@ (8001044 <main+0x6c0>)
 8000f06:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f08:	c303      	stmia	r3!, {r0, r1}
 8000f0a:	801a      	strh	r2, [r3, #0]
								HAL_TIM_Base_Start_IT(&htim3);
 8000f0c:	484c      	ldr	r0, [pc, #304]	@ (8001040 <main+0x6bc>)
 8000f0e:	f002 fc2f 	bl	8003770 <HAL_TIM_Base_Start_IT>
								break;
 8000f12:	e071      	b.n	8000ff8 <main+0x674>
							case '3':
								memcpy(matrix, matrix_void, sizeof(matrix));
 8000f14:	4b47      	ldr	r3, [pc, #284]	@ (8001034 <main+0x6b0>)
 8000f16:	4a48      	ldr	r2, [pc, #288]	@ (8001038 <main+0x6b4>)
 8000f18:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f1a:	c303      	stmia	r3!, {r0, r1}
 8000f1c:	801a      	strh	r2, [r3, #0]
								play_three();
 8000f1e:	f7ff fcaf 	bl	8000880 <play_three>
								break;
 8000f22:	e069      	b.n	8000ff8 <main+0x674>
							case '4':
								memcpy(matrix, matrix_4, sizeof(matrix));
 8000f24:	4b43      	ldr	r3, [pc, #268]	@ (8001034 <main+0x6b0>)
 8000f26:	4a48      	ldr	r2, [pc, #288]	@ (8001048 <main+0x6c4>)
 8000f28:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f2a:	c303      	stmia	r3!, {r0, r1}
 8000f2c:	801a      	strh	r2, [r3, #0]
								HAL_TIM_Base_Start_IT(&htim3);
 8000f2e:	4844      	ldr	r0, [pc, #272]	@ (8001040 <main+0x6bc>)
 8000f30:	f002 fc1e 	bl	8003770 <HAL_TIM_Base_Start_IT>
								break;
 8000f34:	e060      	b.n	8000ff8 <main+0x674>
							case '5':
								memcpy(matrix, matrix_5, sizeof(matrix));
 8000f36:	4b3f      	ldr	r3, [pc, #252]	@ (8001034 <main+0x6b0>)
 8000f38:	4a44      	ldr	r2, [pc, #272]	@ (800104c <main+0x6c8>)
 8000f3a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f3c:	c303      	stmia	r3!, {r0, r1}
 8000f3e:	801a      	strh	r2, [r3, #0]
								HAL_TIM_Base_Start_IT(&htim3);
 8000f40:	483f      	ldr	r0, [pc, #252]	@ (8001040 <main+0x6bc>)
 8000f42:	f002 fc15 	bl	8003770 <HAL_TIM_Base_Start_IT>
								break;
 8000f46:	e057      	b.n	8000ff8 <main+0x674>
							case '6':
								memcpy(matrix, matrix_6, sizeof(matrix));
 8000f48:	4b3a      	ldr	r3, [pc, #232]	@ (8001034 <main+0x6b0>)
 8000f4a:	4a41      	ldr	r2, [pc, #260]	@ (8001050 <main+0x6cc>)
 8000f4c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f4e:	c303      	stmia	r3!, {r0, r1}
 8000f50:	801a      	strh	r2, [r3, #0]
								HAL_TIM_Base_Start_IT(&htim3);
 8000f52:	483b      	ldr	r0, [pc, #236]	@ (8001040 <main+0x6bc>)
 8000f54:	f002 fc0c 	bl	8003770 <HAL_TIM_Base_Start_IT>
								break;
 8000f58:	e04e      	b.n	8000ff8 <main+0x674>
							case '7':
								memcpy(matrix, matrix_7, sizeof(matrix));
 8000f5a:	4b36      	ldr	r3, [pc, #216]	@ (8001034 <main+0x6b0>)
 8000f5c:	4a3d      	ldr	r2, [pc, #244]	@ (8001054 <main+0x6d0>)
 8000f5e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f60:	c303      	stmia	r3!, {r0, r1}
 8000f62:	801a      	strh	r2, [r3, #0]
								HAL_TIM_Base_Start_IT(&htim3);
 8000f64:	4836      	ldr	r0, [pc, #216]	@ (8001040 <main+0x6bc>)
 8000f66:	f002 fc03 	bl	8003770 <HAL_TIM_Base_Start_IT>
								break;
 8000f6a:	e045      	b.n	8000ff8 <main+0x674>
							case '8':
								memcpy(matrix, matrix_8, sizeof(matrix));
 8000f6c:	4b31      	ldr	r3, [pc, #196]	@ (8001034 <main+0x6b0>)
 8000f6e:	4a3a      	ldr	r2, [pc, #232]	@ (8001058 <main+0x6d4>)
 8000f70:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f72:	c303      	stmia	r3!, {r0, r1}
 8000f74:	801a      	strh	r2, [r3, #0]
								HAL_TIM_Base_Start_IT(&htim3);
 8000f76:	4832      	ldr	r0, [pc, #200]	@ (8001040 <main+0x6bc>)
 8000f78:	f002 fbfa 	bl	8003770 <HAL_TIM_Base_Start_IT>
								break;
 8000f7c:	e03c      	b.n	8000ff8 <main+0x674>
							case '9':
								memcpy(matrix, matrix_9, sizeof(matrix));
 8000f7e:	4b2d      	ldr	r3, [pc, #180]	@ (8001034 <main+0x6b0>)
 8000f80:	4a36      	ldr	r2, [pc, #216]	@ (800105c <main+0x6d8>)
 8000f82:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f84:	c303      	stmia	r3!, {r0, r1}
 8000f86:	801a      	strh	r2, [r3, #0]
								HAL_TIM_Base_Start_IT(&htim3);
 8000f88:	482d      	ldr	r0, [pc, #180]	@ (8001040 <main+0x6bc>)
 8000f8a:	f002 fbf1 	bl	8003770 <HAL_TIM_Base_Start_IT>
								break;
 8000f8e:	e033      	b.n	8000ff8 <main+0x674>
							case 'A':
								memcpy(matrix, matrix_A, sizeof(matrix));
 8000f90:	4b28      	ldr	r3, [pc, #160]	@ (8001034 <main+0x6b0>)
 8000f92:	4a33      	ldr	r2, [pc, #204]	@ (8001060 <main+0x6dc>)
 8000f94:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f96:	c303      	stmia	r3!, {r0, r1}
 8000f98:	801a      	strh	r2, [r3, #0]
								HAL_TIM_Base_Start_IT(&htim3);
 8000f9a:	4829      	ldr	r0, [pc, #164]	@ (8001040 <main+0x6bc>)
 8000f9c:	f002 fbe8 	bl	8003770 <HAL_TIM_Base_Start_IT>
								break;
 8000fa0:	e02a      	b.n	8000ff8 <main+0x674>
							case 'B':
								memcpy(matrix, matrix_B, sizeof(matrix));
 8000fa2:	4b24      	ldr	r3, [pc, #144]	@ (8001034 <main+0x6b0>)
 8000fa4:	4a2f      	ldr	r2, [pc, #188]	@ (8001064 <main+0x6e0>)
 8000fa6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fa8:	c303      	stmia	r3!, {r0, r1}
 8000faa:	801a      	strh	r2, [r3, #0]
								HAL_TIM_Base_Start_IT(&htim3);
 8000fac:	4824      	ldr	r0, [pc, #144]	@ (8001040 <main+0x6bc>)
 8000fae:	f002 fbdf 	bl	8003770 <HAL_TIM_Base_Start_IT>
								break;
 8000fb2:	e021      	b.n	8000ff8 <main+0x674>
							case 'C':
								memcpy(matrix, matrix_void, sizeof(matrix));
 8000fb4:	4b1f      	ldr	r3, [pc, #124]	@ (8001034 <main+0x6b0>)
 8000fb6:	4a20      	ldr	r2, [pc, #128]	@ (8001038 <main+0x6b4>)
 8000fb8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fba:	c303      	stmia	r3!, {r0, r1}
 8000fbc:	801a      	strh	r2, [r3, #0]
								play_c();
 8000fbe:	f7ff fc6b 	bl	8000898 <play_c>
								break;
 8000fc2:	e019      	b.n	8000ff8 <main+0x674>
							case 'D':
								memcpy(matrix, matrix_D, sizeof(matrix));
 8000fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8001034 <main+0x6b0>)
 8000fc6:	4a28      	ldr	r2, [pc, #160]	@ (8001068 <main+0x6e4>)
 8000fc8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fca:	c303      	stmia	r3!, {r0, r1}
 8000fcc:	801a      	strh	r2, [r3, #0]
								HAL_TIM_Base_Start_IT(&htim3);
 8000fce:	481c      	ldr	r0, [pc, #112]	@ (8001040 <main+0x6bc>)
 8000fd0:	f002 fbce 	bl	8003770 <HAL_TIM_Base_Start_IT>
								break;
 8000fd4:	e010      	b.n	8000ff8 <main+0x674>
							case 'E':
								memcpy(matrix, matrix_E, sizeof(matrix));
 8000fd6:	4b17      	ldr	r3, [pc, #92]	@ (8001034 <main+0x6b0>)
 8000fd8:	4a24      	ldr	r2, [pc, #144]	@ (800106c <main+0x6e8>)
 8000fda:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fdc:	c303      	stmia	r3!, {r0, r1}
 8000fde:	801a      	strh	r2, [r3, #0]
								HAL_TIM_Base_Start_IT(&htim3);
 8000fe0:	4817      	ldr	r0, [pc, #92]	@ (8001040 <main+0x6bc>)
 8000fe2:	f002 fbc5 	bl	8003770 <HAL_TIM_Base_Start_IT>
								break;
 8000fe6:	e007      	b.n	8000ff8 <main+0x674>
							case 'F':
								memcpy(matrix, matrix_void, sizeof(matrix));
 8000fe8:	4b12      	ldr	r3, [pc, #72]	@ (8001034 <main+0x6b0>)
 8000fea:	4a13      	ldr	r2, [pc, #76]	@ (8001038 <main+0x6b4>)
 8000fec:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fee:	c303      	stmia	r3!, {r0, r1}
 8000ff0:	801a      	strh	r2, [r3, #0]
								play_f();
 8000ff2:	f7ff fc5d 	bl	80008b0 <play_f>
								break;
 8000ff6:	bf00      	nop
				for(int j = 0; j < 4; j++) {
 8000ff8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001002:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001006:	2b03      	cmp	r3, #3
 8001008:	f77f ae9e 	ble.w	8000d48 <main+0x3c4>
			for(int i = 0; i < 4; i++) {
 800100c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001010:	3301      	adds	r3, #1
 8001012:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001016:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800101a:	2b03      	cmp	r3, #3
 800101c:	f77f ae7f 	ble.w	8000d1e <main+0x39a>
	  	HAL_GPIO_WritePin(GPIOC, COLUMN_PIN[column], GPIO_PIN_SET);
 8001020:	e578      	b.n	8000b14 <main+0x190>
 8001022:	bf00      	nop
 8001024:	08005900 	.word	0x08005900
 8001028:	20000358 	.word	0x20000358
 800102c:	20000378 	.word	0x20000378
 8001030:	20000300 	.word	0x20000300
 8001034:	20000000 	.word	0x20000000
 8001038:	2000000c 	.word	0x2000000c
 800103c:	20000048 	.word	0x20000048
 8001040:	20000228 	.word	0x20000228
 8001044:	20000054 	.word	0x20000054
 8001048:	20000060 	.word	0x20000060
 800104c:	2000006c 	.word	0x2000006c
 8001050:	20000078 	.word	0x20000078
 8001054:	20000084 	.word	0x20000084
 8001058:	20000090 	.word	0x20000090
 800105c:	2000009c 	.word	0x2000009c
 8001060:	20000018 	.word	0x20000018
 8001064:	20000024 	.word	0x20000024
 8001068:	20000030 	.word	0x20000030
 800106c:	2000003c 	.word	0x2000003c

08001070 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b094      	sub	sp, #80	@ 0x50
 8001074:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001076:	f107 0320 	add.w	r3, r7, #32
 800107a:	2230      	movs	r2, #48	@ 0x30
 800107c:	2100      	movs	r1, #0
 800107e:	4618      	mov	r0, r3
 8001080:	f003 ff96 	bl	8004fb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001084:	f107 030c 	add.w	r3, r7, #12
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001094:	2300      	movs	r3, #0
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	4b29      	ldr	r3, [pc, #164]	@ (8001140 <SystemClock_Config+0xd0>)
 800109a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109c:	4a28      	ldr	r2, [pc, #160]	@ (8001140 <SystemClock_Config+0xd0>)
 800109e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80010a4:	4b26      	ldr	r3, [pc, #152]	@ (8001140 <SystemClock_Config+0xd0>)
 80010a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80010b0:	2300      	movs	r3, #0
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	4b23      	ldr	r3, [pc, #140]	@ (8001144 <SystemClock_Config+0xd4>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80010bc:	4a21      	ldr	r2, [pc, #132]	@ (8001144 <SystemClock_Config+0xd4>)
 80010be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80010c2:	6013      	str	r3, [r2, #0]
 80010c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001144 <SystemClock_Config+0xd4>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010cc:	607b      	str	r3, [r7, #4]
 80010ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010d0:	2302      	movs	r3, #2
 80010d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010d4:	2301      	movs	r3, #1
 80010d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010d8:	2310      	movs	r3, #16
 80010da:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010dc:	2302      	movs	r3, #2
 80010de:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010e0:	2300      	movs	r3, #0
 80010e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80010e4:	2310      	movs	r3, #16
 80010e6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010e8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80010ec:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010ee:	2304      	movs	r3, #4
 80010f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010f2:	2307      	movs	r3, #7
 80010f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f6:	f107 0320 	add.w	r3, r7, #32
 80010fa:	4618      	mov	r0, r3
 80010fc:	f001 fbb0 	bl	8002860 <HAL_RCC_OscConfig>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001106:	f000 fa57 	bl	80015b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800110a:	230f      	movs	r3, #15
 800110c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800110e:	2302      	movs	r3, #2
 8001110:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001116:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800111a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800111c:	2300      	movs	r3, #0
 800111e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001120:	f107 030c 	add.w	r3, r7, #12
 8001124:	2102      	movs	r1, #2
 8001126:	4618      	mov	r0, r3
 8001128:	f001 fe12 	bl	8002d50 <HAL_RCC_ClockConfig>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001132:	f000 fa41 	bl	80015b8 <Error_Handler>
  }
}
 8001136:	bf00      	nop
 8001138:	3750      	adds	r7, #80	@ 0x50
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40023800 	.word	0x40023800
 8001144:	40007000 	.word	0x40007000

08001148 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800114c:	4b17      	ldr	r3, [pc, #92]	@ (80011ac <MX_SPI1_Init+0x64>)
 800114e:	4a18      	ldr	r2, [pc, #96]	@ (80011b0 <MX_SPI1_Init+0x68>)
 8001150:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001152:	4b16      	ldr	r3, [pc, #88]	@ (80011ac <MX_SPI1_Init+0x64>)
 8001154:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001158:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800115a:	4b14      	ldr	r3, [pc, #80]	@ (80011ac <MX_SPI1_Init+0x64>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001160:	4b12      	ldr	r3, [pc, #72]	@ (80011ac <MX_SPI1_Init+0x64>)
 8001162:	2200      	movs	r2, #0
 8001164:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001166:	4b11      	ldr	r3, [pc, #68]	@ (80011ac <MX_SPI1_Init+0x64>)
 8001168:	2200      	movs	r2, #0
 800116a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800116c:	4b0f      	ldr	r3, [pc, #60]	@ (80011ac <MX_SPI1_Init+0x64>)
 800116e:	2200      	movs	r2, #0
 8001170:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001172:	4b0e      	ldr	r3, [pc, #56]	@ (80011ac <MX_SPI1_Init+0x64>)
 8001174:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001178:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800117a:	4b0c      	ldr	r3, [pc, #48]	@ (80011ac <MX_SPI1_Init+0x64>)
 800117c:	2208      	movs	r2, #8
 800117e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001180:	4b0a      	ldr	r3, [pc, #40]	@ (80011ac <MX_SPI1_Init+0x64>)
 8001182:	2200      	movs	r2, #0
 8001184:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001186:	4b09      	ldr	r3, [pc, #36]	@ (80011ac <MX_SPI1_Init+0x64>)
 8001188:	2200      	movs	r2, #0
 800118a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800118c:	4b07      	ldr	r3, [pc, #28]	@ (80011ac <MX_SPI1_Init+0x64>)
 800118e:	2200      	movs	r2, #0
 8001190:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001192:	4b06      	ldr	r3, [pc, #24]	@ (80011ac <MX_SPI1_Init+0x64>)
 8001194:	220a      	movs	r2, #10
 8001196:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001198:	4804      	ldr	r0, [pc, #16]	@ (80011ac <MX_SPI1_Init+0x64>)
 800119a:	f001 fff9 	bl	8003190 <HAL_SPI_Init>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011a4:	f000 fa08 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000128 	.word	0x20000128
 80011b0:	40013000 	.word	0x40013000

080011b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b096      	sub	sp, #88	@ 0x58
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ba:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	609a      	str	r2, [r3, #8]
 80011de:	60da      	str	r2, [r3, #12]
 80011e0:	611a      	str	r2, [r3, #16]
 80011e2:	615a      	str	r2, [r3, #20]
 80011e4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011e6:	1d3b      	adds	r3, r7, #4
 80011e8:	2220      	movs	r2, #32
 80011ea:	2100      	movs	r1, #0
 80011ec:	4618      	mov	r0, r3
 80011ee:	f003 fedf 	bl	8004fb0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011f2:	4b3e      	ldr	r3, [pc, #248]	@ (80012ec <MX_TIM1_Init+0x138>)
 80011f4:	4a3e      	ldr	r2, [pc, #248]	@ (80012f0 <MX_TIM1_Init+0x13c>)
 80011f6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8400-1;
 80011f8:	4b3c      	ldr	r3, [pc, #240]	@ (80012ec <MX_TIM1_Init+0x138>)
 80011fa:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80011fe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001200:	4b3a      	ldr	r3, [pc, #232]	@ (80012ec <MX_TIM1_Init+0x138>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10-1;
 8001206:	4b39      	ldr	r3, [pc, #228]	@ (80012ec <MX_TIM1_Init+0x138>)
 8001208:	2209      	movs	r2, #9
 800120a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800120c:	4b37      	ldr	r3, [pc, #220]	@ (80012ec <MX_TIM1_Init+0x138>)
 800120e:	2200      	movs	r2, #0
 8001210:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001212:	4b36      	ldr	r3, [pc, #216]	@ (80012ec <MX_TIM1_Init+0x138>)
 8001214:	2200      	movs	r2, #0
 8001216:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001218:	4b34      	ldr	r3, [pc, #208]	@ (80012ec <MX_TIM1_Init+0x138>)
 800121a:	2200      	movs	r2, #0
 800121c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800121e:	4833      	ldr	r0, [pc, #204]	@ (80012ec <MX_TIM1_Init+0x138>)
 8001220:	f002 fa56 	bl	80036d0 <HAL_TIM_Base_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800122a:	f000 f9c5 	bl	80015b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800122e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001232:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001234:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001238:	4619      	mov	r1, r3
 800123a:	482c      	ldr	r0, [pc, #176]	@ (80012ec <MX_TIM1_Init+0x138>)
 800123c:	f002 fe32 	bl	8003ea4 <HAL_TIM_ConfigClockSource>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001246:	f000 f9b7 	bl	80015b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800124a:	4828      	ldr	r0, [pc, #160]	@ (80012ec <MX_TIM1_Init+0x138>)
 800124c:	f002 faf2 	bl	8003834 <HAL_TIM_PWM_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001256:	f000 f9af 	bl	80015b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800125a:	2320      	movs	r3, #32
 800125c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800125e:	2300      	movs	r3, #0
 8001260:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001262:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001266:	4619      	mov	r1, r3
 8001268:	4820      	ldr	r0, [pc, #128]	@ (80012ec <MX_TIM1_Init+0x138>)
 800126a:	f003 f9d7 	bl	800461c <HAL_TIMEx_MasterConfigSynchronization>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001274:	f000 f9a0 	bl	80015b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001278:	2360      	movs	r3, #96	@ 0x60
 800127a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800127c:	2300      	movs	r3, #0
 800127e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001280:	2300      	movs	r3, #0
 8001282:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001284:	2300      	movs	r3, #0
 8001286:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001288:	2300      	movs	r3, #0
 800128a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800128c:	2300      	movs	r3, #0
 800128e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001290:	2300      	movs	r3, #0
 8001292:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001294:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001298:	2204      	movs	r2, #4
 800129a:	4619      	mov	r1, r3
 800129c:	4813      	ldr	r0, [pc, #76]	@ (80012ec <MX_TIM1_Init+0x138>)
 800129e:	f002 fd3f 	bl	8003d20 <HAL_TIM_PWM_ConfigChannel>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80012a8:	f000 f986 	bl	80015b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012ac:	2300      	movs	r3, #0
 80012ae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012b4:	2300      	movs	r3, #0
 80012b6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012c4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012c6:	2300      	movs	r3, #0
 80012c8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012ca:	1d3b      	adds	r3, r7, #4
 80012cc:	4619      	mov	r1, r3
 80012ce:	4807      	ldr	r0, [pc, #28]	@ (80012ec <MX_TIM1_Init+0x138>)
 80012d0:	f003 fa12 	bl	80046f8 <HAL_TIMEx_ConfigBreakDeadTime>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80012da:	f000 f96d 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012de:	4803      	ldr	r0, [pc, #12]	@ (80012ec <MX_TIM1_Init+0x138>)
 80012e0:	f000 fa9c 	bl	800181c <HAL_TIM_MspPostInit>

}
 80012e4:	bf00      	nop
 80012e6:	3758      	adds	r7, #88	@ 0x58
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	200001e0 	.word	0x200001e0
 80012f0:	40010000 	.word	0x40010000

080012f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012fa:	f107 0308 	add.w	r3, r7, #8
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]
 8001306:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001308:	463b      	mov	r3, r7
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001310:	4b1d      	ldr	r3, [pc, #116]	@ (8001388 <MX_TIM3_Init+0x94>)
 8001312:	4a1e      	ldr	r2, [pc, #120]	@ (800138c <MX_TIM3_Init+0x98>)
 8001314:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 8001316:	4b1c      	ldr	r3, [pc, #112]	@ (8001388 <MX_TIM3_Init+0x94>)
 8001318:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 800131c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800131e:	4b1a      	ldr	r3, [pc, #104]	@ (8001388 <MX_TIM3_Init+0x94>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8001324:	4b18      	ldr	r3, [pc, #96]	@ (8001388 <MX_TIM3_Init+0x94>)
 8001326:	f242 720f 	movw	r2, #9999	@ 0x270f
 800132a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800132c:	4b16      	ldr	r3, [pc, #88]	@ (8001388 <MX_TIM3_Init+0x94>)
 800132e:	2200      	movs	r2, #0
 8001330:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001332:	4b15      	ldr	r3, [pc, #84]	@ (8001388 <MX_TIM3_Init+0x94>)
 8001334:	2200      	movs	r2, #0
 8001336:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001338:	4813      	ldr	r0, [pc, #76]	@ (8001388 <MX_TIM3_Init+0x94>)
 800133a:	f002 f9c9 	bl	80036d0 <HAL_TIM_Base_Init>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001344:	f000 f938 	bl	80015b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001348:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800134c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800134e:	f107 0308 	add.w	r3, r7, #8
 8001352:	4619      	mov	r1, r3
 8001354:	480c      	ldr	r0, [pc, #48]	@ (8001388 <MX_TIM3_Init+0x94>)
 8001356:	f002 fda5 	bl	8003ea4 <HAL_TIM_ConfigClockSource>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001360:	f000 f92a 	bl	80015b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001364:	2300      	movs	r3, #0
 8001366:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001368:	2300      	movs	r3, #0
 800136a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800136c:	463b      	mov	r3, r7
 800136e:	4619      	mov	r1, r3
 8001370:	4805      	ldr	r0, [pc, #20]	@ (8001388 <MX_TIM3_Init+0x94>)
 8001372:	f003 f953 	bl	800461c <HAL_TIMEx_MasterConfigSynchronization>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800137c:	f000 f91c 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001380:	bf00      	nop
 8001382:	3718      	adds	r7, #24
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000228 	.word	0x20000228
 800138c:	40000400 	.word	0x40000400

08001390 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001394:	4b0e      	ldr	r3, [pc, #56]	@ (80013d0 <MX_TIM10_Init+0x40>)
 8001396:	4a0f      	ldr	r2, [pc, #60]	@ (80013d4 <MX_TIM10_Init+0x44>)
 8001398:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 8400-1;
 800139a:	4b0d      	ldr	r3, [pc, #52]	@ (80013d0 <MX_TIM10_Init+0x40>)
 800139c:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80013a0:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a2:	4b0b      	ldr	r3, [pc, #44]	@ (80013d0 <MX_TIM10_Init+0x40>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10-1;
 80013a8:	4b09      	ldr	r3, [pc, #36]	@ (80013d0 <MX_TIM10_Init+0x40>)
 80013aa:	2209      	movs	r2, #9
 80013ac:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ae:	4b08      	ldr	r3, [pc, #32]	@ (80013d0 <MX_TIM10_Init+0x40>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b4:	4b06      	ldr	r3, [pc, #24]	@ (80013d0 <MX_TIM10_Init+0x40>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80013ba:	4805      	ldr	r0, [pc, #20]	@ (80013d0 <MX_TIM10_Init+0x40>)
 80013bc:	f002 f988 	bl	80036d0 <HAL_TIM_Base_Init>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80013c6:	f000 f8f7 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000270 	.word	0x20000270
 80013d4:	40014400 	.word	0x40014400

080013d8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80013dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001418 <MX_TIM11_Init+0x40>)
 80013de:	4a0f      	ldr	r2, [pc, #60]	@ (800141c <MX_TIM11_Init+0x44>)
 80013e0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 84-1;
 80013e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001418 <MX_TIM11_Init+0x40>)
 80013e4:	2253      	movs	r2, #83	@ 0x53
 80013e6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001418 <MX_TIM11_Init+0x40>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 4000-1;
 80013ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001418 <MX_TIM11_Init+0x40>)
 80013f0:	f640 729f 	movw	r2, #3999	@ 0xf9f
 80013f4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f6:	4b08      	ldr	r3, [pc, #32]	@ (8001418 <MX_TIM11_Init+0x40>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013fc:	4b06      	ldr	r3, [pc, #24]	@ (8001418 <MX_TIM11_Init+0x40>)
 80013fe:	2200      	movs	r2, #0
 8001400:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001402:	4805      	ldr	r0, [pc, #20]	@ (8001418 <MX_TIM11_Init+0x40>)
 8001404:	f002 f964 	bl	80036d0 <HAL_TIM_Base_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800140e:	f000 f8d3 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	200002b8 	.word	0x200002b8
 800141c:	40014800 	.word	0x40014800

08001420 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001424:	4b11      	ldr	r3, [pc, #68]	@ (800146c <MX_USART2_UART_Init+0x4c>)
 8001426:	4a12      	ldr	r2, [pc, #72]	@ (8001470 <MX_USART2_UART_Init+0x50>)
 8001428:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800142a:	4b10      	ldr	r3, [pc, #64]	@ (800146c <MX_USART2_UART_Init+0x4c>)
 800142c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001430:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001432:	4b0e      	ldr	r3, [pc, #56]	@ (800146c <MX_USART2_UART_Init+0x4c>)
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001438:	4b0c      	ldr	r3, [pc, #48]	@ (800146c <MX_USART2_UART_Init+0x4c>)
 800143a:	2200      	movs	r2, #0
 800143c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800143e:	4b0b      	ldr	r3, [pc, #44]	@ (800146c <MX_USART2_UART_Init+0x4c>)
 8001440:	2200      	movs	r2, #0
 8001442:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001444:	4b09      	ldr	r3, [pc, #36]	@ (800146c <MX_USART2_UART_Init+0x4c>)
 8001446:	220c      	movs	r2, #12
 8001448:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800144a:	4b08      	ldr	r3, [pc, #32]	@ (800146c <MX_USART2_UART_Init+0x4c>)
 800144c:	2200      	movs	r2, #0
 800144e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001450:	4b06      	ldr	r3, [pc, #24]	@ (800146c <MX_USART2_UART_Init+0x4c>)
 8001452:	2200      	movs	r2, #0
 8001454:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001456:	4805      	ldr	r0, [pc, #20]	@ (800146c <MX_USART2_UART_Init+0x4c>)
 8001458:	f003 f9b4 	bl	80047c4 <HAL_UART_Init>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001462:	f000 f8a9 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000300 	.word	0x20000300
 8001470:	40004400 	.word	0x40004400

08001474 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	607b      	str	r3, [r7, #4]
 800147e:	4b0c      	ldr	r3, [pc, #48]	@ (80014b0 <MX_DMA_Init+0x3c>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001482:	4a0b      	ldr	r2, [pc, #44]	@ (80014b0 <MX_DMA_Init+0x3c>)
 8001484:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001488:	6313      	str	r3, [r2, #48]	@ 0x30
 800148a:	4b09      	ldr	r3, [pc, #36]	@ (80014b0 <MX_DMA_Init+0x3c>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001492:	607b      	str	r3, [r7, #4]
 8001494:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001496:	2200      	movs	r2, #0
 8001498:	2100      	movs	r1, #0
 800149a:	203b      	movs	r0, #59	@ 0x3b
 800149c:	f000 fc83 	bl	8001da6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80014a0:	203b      	movs	r0, #59	@ 0x3b
 80014a2:	f000 fc9c 	bl	8001dde <HAL_NVIC_EnableIRQ>

}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40023800 	.word	0x40023800

080014b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08a      	sub	sp, #40	@ 0x28
 80014b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ba:	f107 0314 	add.w	r3, r7, #20
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	60da      	str	r2, [r3, #12]
 80014c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	613b      	str	r3, [r7, #16]
 80014ce:	4b37      	ldr	r3, [pc, #220]	@ (80015ac <MX_GPIO_Init+0xf8>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d2:	4a36      	ldr	r2, [pc, #216]	@ (80015ac <MX_GPIO_Init+0xf8>)
 80014d4:	f043 0304 	orr.w	r3, r3, #4
 80014d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014da:	4b34      	ldr	r3, [pc, #208]	@ (80015ac <MX_GPIO_Init+0xf8>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014de:	f003 0304 	and.w	r3, r3, #4
 80014e2:	613b      	str	r3, [r7, #16]
 80014e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	4b30      	ldr	r3, [pc, #192]	@ (80015ac <MX_GPIO_Init+0xf8>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ee:	4a2f      	ldr	r2, [pc, #188]	@ (80015ac <MX_GPIO_Init+0xf8>)
 80014f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f6:	4b2d      	ldr	r3, [pc, #180]	@ (80015ac <MX_GPIO_Init+0xf8>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60bb      	str	r3, [r7, #8]
 8001506:	4b29      	ldr	r3, [pc, #164]	@ (80015ac <MX_GPIO_Init+0xf8>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150a:	4a28      	ldr	r2, [pc, #160]	@ (80015ac <MX_GPIO_Init+0xf8>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	6313      	str	r3, [r2, #48]	@ 0x30
 8001512:	4b26      	ldr	r3, [pc, #152]	@ (80015ac <MX_GPIO_Init+0xf8>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	607b      	str	r3, [r7, #4]
 8001522:	4b22      	ldr	r3, [pc, #136]	@ (80015ac <MX_GPIO_Init+0xf8>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001526:	4a21      	ldr	r2, [pc, #132]	@ (80015ac <MX_GPIO_Init+0xf8>)
 8001528:	f043 0302 	orr.w	r3, r3, #2
 800152c:	6313      	str	r3, [r2, #48]	@ 0x30
 800152e:	4b1f      	ldr	r3, [pc, #124]	@ (80015ac <MX_GPIO_Init+0xf8>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 800153a:	2200      	movs	r2, #0
 800153c:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 8001540:	481b      	ldr	r0, [pc, #108]	@ (80015b0 <MX_GPIO_Init+0xfc>)
 8001542:	f001 f973 	bl	800282c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001546:	2200      	movs	r2, #0
 8001548:	2140      	movs	r1, #64	@ 0x40
 800154a:	481a      	ldr	r0, [pc, #104]	@ (80015b4 <MX_GPIO_Init+0x100>)
 800154c:	f001 f96e 	bl	800282c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_12;
 8001550:	f243 030c 	movw	r3, #12300	@ 0x300c
 8001554:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001556:	2300      	movs	r3, #0
 8001558:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800155e:	f107 0314 	add.w	r3, r7, #20
 8001562:	4619      	mov	r1, r3
 8001564:	4812      	ldr	r0, [pc, #72]	@ (80015b0 <MX_GPIO_Init+0xfc>)
 8001566:	f000 ffc5 	bl	80024f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800156a:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800156e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001570:	2301      	movs	r3, #1
 8001572:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001578:	2300      	movs	r3, #0
 800157a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	4619      	mov	r1, r3
 8001582:	480b      	ldr	r0, [pc, #44]	@ (80015b0 <MX_GPIO_Init+0xfc>)
 8001584:	f000 ffb6 	bl	80024f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001588:	2340      	movs	r3, #64	@ 0x40
 800158a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800158c:	2301      	movs	r3, #1
 800158e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001594:	2300      	movs	r3, #0
 8001596:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	4619      	mov	r1, r3
 800159e:	4805      	ldr	r0, [pc, #20]	@ (80015b4 <MX_GPIO_Init+0x100>)
 80015a0:	f000 ffa8 	bl	80024f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015a4:	bf00      	nop
 80015a6:	3728      	adds	r7, #40	@ 0x28
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40023800 	.word	0x40023800
 80015b0:	40020800 	.word	0x40020800
 80015b4:	40020400 	.word	0x40020400

080015b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015bc:	b672      	cpsid	i
}
 80015be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015c0:	bf00      	nop
 80015c2:	e7fd      	b.n	80015c0 <Error_Handler+0x8>

080015c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	607b      	str	r3, [r7, #4]
 80015ce:	4b10      	ldr	r3, [pc, #64]	@ (8001610 <HAL_MspInit+0x4c>)
 80015d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d2:	4a0f      	ldr	r2, [pc, #60]	@ (8001610 <HAL_MspInit+0x4c>)
 80015d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80015da:	4b0d      	ldr	r3, [pc, #52]	@ (8001610 <HAL_MspInit+0x4c>)
 80015dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015e2:	607b      	str	r3, [r7, #4]
 80015e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	603b      	str	r3, [r7, #0]
 80015ea:	4b09      	ldr	r3, [pc, #36]	@ (8001610 <HAL_MspInit+0x4c>)
 80015ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ee:	4a08      	ldr	r2, [pc, #32]	@ (8001610 <HAL_MspInit+0x4c>)
 80015f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015f6:	4b06      	ldr	r3, [pc, #24]	@ (8001610 <HAL_MspInit+0x4c>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015fe:	603b      	str	r3, [r7, #0]
 8001600:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001602:	2007      	movs	r0, #7
 8001604:	f000 fbc4 	bl	8001d90 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001608:	bf00      	nop
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40023800 	.word	0x40023800

08001614 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b08a      	sub	sp, #40	@ 0x28
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a30      	ldr	r2, [pc, #192]	@ (80016f4 <HAL_SPI_MspInit+0xe0>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d159      	bne.n	80016ea <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
 800163a:	4b2f      	ldr	r3, [pc, #188]	@ (80016f8 <HAL_SPI_MspInit+0xe4>)
 800163c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800163e:	4a2e      	ldr	r2, [pc, #184]	@ (80016f8 <HAL_SPI_MspInit+0xe4>)
 8001640:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001644:	6453      	str	r3, [r2, #68]	@ 0x44
 8001646:	4b2c      	ldr	r3, [pc, #176]	@ (80016f8 <HAL_SPI_MspInit+0xe4>)
 8001648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800164a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800164e:	613b      	str	r3, [r7, #16]
 8001650:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	4b28      	ldr	r3, [pc, #160]	@ (80016f8 <HAL_SPI_MspInit+0xe4>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165a:	4a27      	ldr	r2, [pc, #156]	@ (80016f8 <HAL_SPI_MspInit+0xe4>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	6313      	str	r3, [r2, #48]	@ 0x30
 8001662:	4b25      	ldr	r3, [pc, #148]	@ (80016f8 <HAL_SPI_MspInit+0xe4>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800166e:	23e0      	movs	r3, #224	@ 0xe0
 8001670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001672:	2302      	movs	r3, #2
 8001674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167a:	2303      	movs	r3, #3
 800167c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800167e:	2305      	movs	r3, #5
 8001680:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001682:	f107 0314 	add.w	r3, r7, #20
 8001686:	4619      	mov	r1, r3
 8001688:	481c      	ldr	r0, [pc, #112]	@ (80016fc <HAL_SPI_MspInit+0xe8>)
 800168a:	f000 ff33 	bl	80024f4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800168e:	4b1c      	ldr	r3, [pc, #112]	@ (8001700 <HAL_SPI_MspInit+0xec>)
 8001690:	4a1c      	ldr	r2, [pc, #112]	@ (8001704 <HAL_SPI_MspInit+0xf0>)
 8001692:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001694:	4b1a      	ldr	r3, [pc, #104]	@ (8001700 <HAL_SPI_MspInit+0xec>)
 8001696:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800169a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800169c:	4b18      	ldr	r3, [pc, #96]	@ (8001700 <HAL_SPI_MspInit+0xec>)
 800169e:	2240      	movs	r2, #64	@ 0x40
 80016a0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016a2:	4b17      	ldr	r3, [pc, #92]	@ (8001700 <HAL_SPI_MspInit+0xec>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016a8:	4b15      	ldr	r3, [pc, #84]	@ (8001700 <HAL_SPI_MspInit+0xec>)
 80016aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016ae:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016b0:	4b13      	ldr	r3, [pc, #76]	@ (8001700 <HAL_SPI_MspInit+0xec>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016b6:	4b12      	ldr	r3, [pc, #72]	@ (8001700 <HAL_SPI_MspInit+0xec>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80016bc:	4b10      	ldr	r3, [pc, #64]	@ (8001700 <HAL_SPI_MspInit+0xec>)
 80016be:	2200      	movs	r2, #0
 80016c0:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001700 <HAL_SPI_MspInit+0xec>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001700 <HAL_SPI_MspInit+0xec>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80016ce:	480c      	ldr	r0, [pc, #48]	@ (8001700 <HAL_SPI_MspInit+0xec>)
 80016d0:	f000 fba0 	bl	8001e14 <HAL_DMA_Init>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 80016da:	f7ff ff6d 	bl	80015b8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a07      	ldr	r2, [pc, #28]	@ (8001700 <HAL_SPI_MspInit+0xec>)
 80016e2:	649a      	str	r2, [r3, #72]	@ 0x48
 80016e4:	4a06      	ldr	r2, [pc, #24]	@ (8001700 <HAL_SPI_MspInit+0xec>)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80016ea:	bf00      	nop
 80016ec:	3728      	adds	r7, #40	@ 0x28
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40013000 	.word	0x40013000
 80016f8:	40023800 	.word	0x40023800
 80016fc:	40020000 	.word	0x40020000
 8001700:	20000180 	.word	0x20000180
 8001704:	40026458 	.word	0x40026458

08001708 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a3c      	ldr	r2, [pc, #240]	@ (8001808 <HAL_TIM_Base_MspInit+0x100>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d11e      	bne.n	8001758 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	617b      	str	r3, [r7, #20]
 800171e:	4b3b      	ldr	r3, [pc, #236]	@ (800180c <HAL_TIM_Base_MspInit+0x104>)
 8001720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001722:	4a3a      	ldr	r2, [pc, #232]	@ (800180c <HAL_TIM_Base_MspInit+0x104>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	6453      	str	r3, [r2, #68]	@ 0x44
 800172a:	4b38      	ldr	r3, [pc, #224]	@ (800180c <HAL_TIM_Base_MspInit+0x104>)
 800172c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	617b      	str	r3, [r7, #20]
 8001734:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001736:	2200      	movs	r2, #0
 8001738:	2100      	movs	r1, #0
 800173a:	2019      	movs	r0, #25
 800173c:	f000 fb33 	bl	8001da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001740:	2019      	movs	r0, #25
 8001742:	f000 fb4c 	bl	8001dde <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001746:	2200      	movs	r2, #0
 8001748:	2100      	movs	r1, #0
 800174a:	201a      	movs	r0, #26
 800174c:	f000 fb2b 	bl	8001da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001750:	201a      	movs	r0, #26
 8001752:	f000 fb44 	bl	8001dde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001756:	e052      	b.n	80017fe <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM3)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a2c      	ldr	r2, [pc, #176]	@ (8001810 <HAL_TIM_Base_MspInit+0x108>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d116      	bne.n	8001790 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	613b      	str	r3, [r7, #16]
 8001766:	4b29      	ldr	r3, [pc, #164]	@ (800180c <HAL_TIM_Base_MspInit+0x104>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176a:	4a28      	ldr	r2, [pc, #160]	@ (800180c <HAL_TIM_Base_MspInit+0x104>)
 800176c:	f043 0302 	orr.w	r3, r3, #2
 8001770:	6413      	str	r3, [r2, #64]	@ 0x40
 8001772:	4b26      	ldr	r3, [pc, #152]	@ (800180c <HAL_TIM_Base_MspInit+0x104>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	613b      	str	r3, [r7, #16]
 800177c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800177e:	2200      	movs	r2, #0
 8001780:	2100      	movs	r1, #0
 8001782:	201d      	movs	r0, #29
 8001784:	f000 fb0f 	bl	8001da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001788:	201d      	movs	r0, #29
 800178a:	f000 fb28 	bl	8001dde <HAL_NVIC_EnableIRQ>
}
 800178e:	e036      	b.n	80017fe <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM10)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a1f      	ldr	r2, [pc, #124]	@ (8001814 <HAL_TIM_Base_MspInit+0x10c>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d116      	bne.n	80017c8 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	4b1b      	ldr	r3, [pc, #108]	@ (800180c <HAL_TIM_Base_MspInit+0x104>)
 80017a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017a2:	4a1a      	ldr	r2, [pc, #104]	@ (800180c <HAL_TIM_Base_MspInit+0x104>)
 80017a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80017aa:	4b18      	ldr	r3, [pc, #96]	@ (800180c <HAL_TIM_Base_MspInit+0x104>)
 80017ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2100      	movs	r1, #0
 80017ba:	2019      	movs	r0, #25
 80017bc:	f000 faf3 	bl	8001da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80017c0:	2019      	movs	r0, #25
 80017c2:	f000 fb0c 	bl	8001dde <HAL_NVIC_EnableIRQ>
}
 80017c6:	e01a      	b.n	80017fe <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM11)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a12      	ldr	r2, [pc, #72]	@ (8001818 <HAL_TIM_Base_MspInit+0x110>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d115      	bne.n	80017fe <HAL_TIM_Base_MspInit+0xf6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	4b0d      	ldr	r3, [pc, #52]	@ (800180c <HAL_TIM_Base_MspInit+0x104>)
 80017d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017da:	4a0c      	ldr	r2, [pc, #48]	@ (800180c <HAL_TIM_Base_MspInit+0x104>)
 80017dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80017e2:	4b0a      	ldr	r3, [pc, #40]	@ (800180c <HAL_TIM_Base_MspInit+0x104>)
 80017e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017ea:	60bb      	str	r3, [r7, #8]
 80017ec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80017ee:	2200      	movs	r2, #0
 80017f0:	2100      	movs	r1, #0
 80017f2:	201a      	movs	r0, #26
 80017f4:	f000 fad7 	bl	8001da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80017f8:	201a      	movs	r0, #26
 80017fa:	f000 faf0 	bl	8001dde <HAL_NVIC_EnableIRQ>
}
 80017fe:	bf00      	nop
 8001800:	3718      	adds	r7, #24
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40010000 	.word	0x40010000
 800180c:	40023800 	.word	0x40023800
 8001810:	40000400 	.word	0x40000400
 8001814:	40014400 	.word	0x40014400
 8001818:	40014800 	.word	0x40014800

0800181c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b088      	sub	sp, #32
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001824:	f107 030c 	add.w	r3, r7, #12
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	60da      	str	r2, [r3, #12]
 8001832:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a12      	ldr	r2, [pc, #72]	@ (8001884 <HAL_TIM_MspPostInit+0x68>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d11e      	bne.n	800187c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	60bb      	str	r3, [r7, #8]
 8001842:	4b11      	ldr	r3, [pc, #68]	@ (8001888 <HAL_TIM_MspPostInit+0x6c>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001846:	4a10      	ldr	r2, [pc, #64]	@ (8001888 <HAL_TIM_MspPostInit+0x6c>)
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	6313      	str	r3, [r2, #48]	@ 0x30
 800184e:	4b0e      	ldr	r3, [pc, #56]	@ (8001888 <HAL_TIM_MspPostInit+0x6c>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	60bb      	str	r3, [r7, #8]
 8001858:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800185a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800185e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001860:	2302      	movs	r3, #2
 8001862:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001868:	2300      	movs	r3, #0
 800186a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800186c:	2301      	movs	r3, #1
 800186e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001870:	f107 030c 	add.w	r3, r7, #12
 8001874:	4619      	mov	r1, r3
 8001876:	4805      	ldr	r0, [pc, #20]	@ (800188c <HAL_TIM_MspPostInit+0x70>)
 8001878:	f000 fe3c 	bl	80024f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800187c:	bf00      	nop
 800187e:	3720      	adds	r7, #32
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40010000 	.word	0x40010000
 8001888:	40023800 	.word	0x40023800
 800188c:	40020000 	.word	0x40020000

08001890 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08a      	sub	sp, #40	@ 0x28
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a19      	ldr	r2, [pc, #100]	@ (8001914 <HAL_UART_MspInit+0x84>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d12b      	bne.n	800190a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	613b      	str	r3, [r7, #16]
 80018b6:	4b18      	ldr	r3, [pc, #96]	@ (8001918 <HAL_UART_MspInit+0x88>)
 80018b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ba:	4a17      	ldr	r2, [pc, #92]	@ (8001918 <HAL_UART_MspInit+0x88>)
 80018bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80018c2:	4b15      	ldr	r3, [pc, #84]	@ (8001918 <HAL_UART_MspInit+0x88>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ca:	613b      	str	r3, [r7, #16]
 80018cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	4b11      	ldr	r3, [pc, #68]	@ (8001918 <HAL_UART_MspInit+0x88>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d6:	4a10      	ldr	r2, [pc, #64]	@ (8001918 <HAL_UART_MspInit+0x88>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018de:	4b0e      	ldr	r3, [pc, #56]	@ (8001918 <HAL_UART_MspInit+0x88>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018ea:	230c      	movs	r3, #12
 80018ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ee:	2302      	movs	r3, #2
 80018f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f6:	2300      	movs	r3, #0
 80018f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018fa:	2307      	movs	r3, #7
 80018fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fe:	f107 0314 	add.w	r3, r7, #20
 8001902:	4619      	mov	r1, r3
 8001904:	4805      	ldr	r0, [pc, #20]	@ (800191c <HAL_UART_MspInit+0x8c>)
 8001906:	f000 fdf5 	bl	80024f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800190a:	bf00      	nop
 800190c:	3728      	adds	r7, #40	@ 0x28
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40004400 	.word	0x40004400
 8001918:	40023800 	.word	0x40023800
 800191c:	40020000 	.word	0x40020000

08001920 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001924:	bf00      	nop
 8001926:	e7fd      	b.n	8001924 <NMI_Handler+0x4>

08001928 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800192c:	bf00      	nop
 800192e:	e7fd      	b.n	800192c <HardFault_Handler+0x4>

08001930 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001934:	bf00      	nop
 8001936:	e7fd      	b.n	8001934 <MemManage_Handler+0x4>

08001938 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800193c:	bf00      	nop
 800193e:	e7fd      	b.n	800193c <BusFault_Handler+0x4>

08001940 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001944:	bf00      	nop
 8001946:	e7fd      	b.n	8001944 <UsageFault_Handler+0x4>

08001948 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800195a:	bf00      	nop
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001976:	f000 f8f7 	bl	8001b68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
	...

08001980 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001984:	4803      	ldr	r0, [pc, #12]	@ (8001994 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8001986:	f002 f8c3 	bl	8003b10 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800198a:	4803      	ldr	r0, [pc, #12]	@ (8001998 <TIM1_UP_TIM10_IRQHandler+0x18>)
 800198c:	f002 f8c0 	bl	8003b10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001990:	bf00      	nop
 8001992:	bd80      	pop	{r7, pc}
 8001994:	200001e0 	.word	0x200001e0
 8001998:	20000270 	.word	0x20000270

0800199c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019a0:	4803      	ldr	r0, [pc, #12]	@ (80019b0 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80019a2:	f002 f8b5 	bl	8003b10 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80019a6:	4803      	ldr	r0, [pc, #12]	@ (80019b4 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80019a8:	f002 f8b2 	bl	8003b10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80019ac:	bf00      	nop
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	200001e0 	.word	0x200001e0
 80019b4:	200002b8 	.word	0x200002b8

080019b8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019bc:	4802      	ldr	r0, [pc, #8]	@ (80019c8 <TIM3_IRQHandler+0x10>)
 80019be:	f002 f8a7 	bl	8003b10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20000228 	.word	0x20000228

080019cc <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80019d0:	4802      	ldr	r0, [pc, #8]	@ (80019dc <DMA2_Stream3_IRQHandler+0x10>)
 80019d2:	f000 fb25 	bl	8002020 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20000180 	.word	0x20000180

080019e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019e8:	4a14      	ldr	r2, [pc, #80]	@ (8001a3c <_sbrk+0x5c>)
 80019ea:	4b15      	ldr	r3, [pc, #84]	@ (8001a40 <_sbrk+0x60>)
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019f4:	4b13      	ldr	r3, [pc, #76]	@ (8001a44 <_sbrk+0x64>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d102      	bne.n	8001a02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019fc:	4b11      	ldr	r3, [pc, #68]	@ (8001a44 <_sbrk+0x64>)
 80019fe:	4a12      	ldr	r2, [pc, #72]	@ (8001a48 <_sbrk+0x68>)
 8001a00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a02:	4b10      	ldr	r3, [pc, #64]	@ (8001a44 <_sbrk+0x64>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4413      	add	r3, r2
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d207      	bcs.n	8001a20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a10:	f003 fad6 	bl	8004fc0 <__errno>
 8001a14:	4603      	mov	r3, r0
 8001a16:	220c      	movs	r2, #12
 8001a18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a1e:	e009      	b.n	8001a34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a20:	4b08      	ldr	r3, [pc, #32]	@ (8001a44 <_sbrk+0x64>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a26:	4b07      	ldr	r3, [pc, #28]	@ (8001a44 <_sbrk+0x64>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	4a05      	ldr	r2, [pc, #20]	@ (8001a44 <_sbrk+0x64>)
 8001a30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a32:	68fb      	ldr	r3, [r7, #12]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3718      	adds	r7, #24
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20018000 	.word	0x20018000
 8001a40:	00000400 	.word	0x00000400
 8001a44:	2000037c 	.word	0x2000037c
 8001a48:	200004d0 	.word	0x200004d0

08001a4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a50:	4b06      	ldr	r3, [pc, #24]	@ (8001a6c <SystemInit+0x20>)
 8001a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a56:	4a05      	ldr	r2, [pc, #20]	@ (8001a6c <SystemInit+0x20>)
 8001a58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	e000ed00 	.word	0xe000ed00

08001a70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001aa8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a74:	480d      	ldr	r0, [pc, #52]	@ (8001aac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a76:	490e      	ldr	r1, [pc, #56]	@ (8001ab0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a78:	4a0e      	ldr	r2, [pc, #56]	@ (8001ab4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a7c:	e002      	b.n	8001a84 <LoopCopyDataInit>

08001a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a82:	3304      	adds	r3, #4

08001a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a88:	d3f9      	bcc.n	8001a7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a8a:	4a0b      	ldr	r2, [pc, #44]	@ (8001ab8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a8c:	4c0b      	ldr	r4, [pc, #44]	@ (8001abc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a90:	e001      	b.n	8001a96 <LoopFillZerobss>

08001a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a94:	3204      	adds	r2, #4

08001a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a98:	d3fb      	bcc.n	8001a92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a9a:	f7ff ffd7 	bl	8001a4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a9e:	f003 fa95 	bl	8004fcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001aa2:	f7fe ff6f 	bl	8000984 <main>
  bx  lr    
 8001aa6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001aa8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001aac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ab0:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8001ab4:	08005968 	.word	0x08005968
  ldr r2, =_sbss
 8001ab8:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 8001abc:	200004cc 	.word	0x200004cc

08001ac0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ac0:	e7fe      	b.n	8001ac0 <ADC_IRQHandler>
	...

08001ac4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ac8:	4b0e      	ldr	r3, [pc, #56]	@ (8001b04 <HAL_Init+0x40>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a0d      	ldr	r2, [pc, #52]	@ (8001b04 <HAL_Init+0x40>)
 8001ace:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ad2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8001b04 <HAL_Init+0x40>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a0a      	ldr	r2, [pc, #40]	@ (8001b04 <HAL_Init+0x40>)
 8001ada:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ade:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ae0:	4b08      	ldr	r3, [pc, #32]	@ (8001b04 <HAL_Init+0x40>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a07      	ldr	r2, [pc, #28]	@ (8001b04 <HAL_Init+0x40>)
 8001ae6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001aea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aec:	2003      	movs	r0, #3
 8001aee:	f000 f94f 	bl	8001d90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001af2:	2000      	movs	r0, #0
 8001af4:	f000 f808 	bl	8001b08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001af8:	f7ff fd64 	bl	80015c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40023c00 	.word	0x40023c00

08001b08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b10:	4b12      	ldr	r3, [pc, #72]	@ (8001b5c <HAL_InitTick+0x54>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	4b12      	ldr	r3, [pc, #72]	@ (8001b60 <HAL_InitTick+0x58>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 f967 	bl	8001dfa <HAL_SYSTICK_Config>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e00e      	b.n	8001b54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2b0f      	cmp	r3, #15
 8001b3a:	d80a      	bhi.n	8001b52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	6879      	ldr	r1, [r7, #4]
 8001b40:	f04f 30ff 	mov.w	r0, #4294967295
 8001b44:	f000 f92f 	bl	8001da6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b48:	4a06      	ldr	r2, [pc, #24]	@ (8001b64 <HAL_InitTick+0x5c>)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	e000      	b.n	8001b54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	200000b0 	.word	0x200000b0
 8001b60:	200000b8 	.word	0x200000b8
 8001b64:	200000b4 	.word	0x200000b4

08001b68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b6c:	4b06      	ldr	r3, [pc, #24]	@ (8001b88 <HAL_IncTick+0x20>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	461a      	mov	r2, r3
 8001b72:	4b06      	ldr	r3, [pc, #24]	@ (8001b8c <HAL_IncTick+0x24>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4413      	add	r3, r2
 8001b78:	4a04      	ldr	r2, [pc, #16]	@ (8001b8c <HAL_IncTick+0x24>)
 8001b7a:	6013      	str	r3, [r2, #0]
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	200000b8 	.word	0x200000b8
 8001b8c:	20000380 	.word	0x20000380

08001b90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  return uwTick;
 8001b94:	4b03      	ldr	r3, [pc, #12]	@ (8001ba4 <HAL_GetTick+0x14>)
 8001b96:	681b      	ldr	r3, [r3, #0]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	20000380 	.word	0x20000380

08001ba8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bb0:	f7ff ffee 	bl	8001b90 <HAL_GetTick>
 8001bb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc0:	d005      	beq.n	8001bce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8001bec <HAL_Delay+0x44>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	4413      	add	r3, r2
 8001bcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bce:	bf00      	nop
 8001bd0:	f7ff ffde 	bl	8001b90 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	68fa      	ldr	r2, [r7, #12]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d8f7      	bhi.n	8001bd0 <HAL_Delay+0x28>
  {
  }
}
 8001be0:	bf00      	nop
 8001be2:	bf00      	nop
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	200000b8 	.word	0x200000b8

08001bf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c00:	4b0c      	ldr	r3, [pc, #48]	@ (8001c34 <__NVIC_SetPriorityGrouping+0x44>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c06:	68ba      	ldr	r2, [r7, #8]
 8001c08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c22:	4a04      	ldr	r2, [pc, #16]	@ (8001c34 <__NVIC_SetPriorityGrouping+0x44>)
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	60d3      	str	r3, [r2, #12]
}
 8001c28:	bf00      	nop
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	e000ed00 	.word	0xe000ed00

08001c38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c3c:	4b04      	ldr	r3, [pc, #16]	@ (8001c50 <__NVIC_GetPriorityGrouping+0x18>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	0a1b      	lsrs	r3, r3, #8
 8001c42:	f003 0307 	and.w	r3, r3, #7
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	e000ed00 	.word	0xe000ed00

08001c54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	db0b      	blt.n	8001c7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c66:	79fb      	ldrb	r3, [r7, #7]
 8001c68:	f003 021f 	and.w	r2, r3, #31
 8001c6c:	4907      	ldr	r1, [pc, #28]	@ (8001c8c <__NVIC_EnableIRQ+0x38>)
 8001c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c72:	095b      	lsrs	r3, r3, #5
 8001c74:	2001      	movs	r0, #1
 8001c76:	fa00 f202 	lsl.w	r2, r0, r2
 8001c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	e000e100 	.word	0xe000e100

08001c90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	6039      	str	r1, [r7, #0]
 8001c9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	db0a      	blt.n	8001cba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	b2da      	uxtb	r2, r3
 8001ca8:	490c      	ldr	r1, [pc, #48]	@ (8001cdc <__NVIC_SetPriority+0x4c>)
 8001caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cae:	0112      	lsls	r2, r2, #4
 8001cb0:	b2d2      	uxtb	r2, r2
 8001cb2:	440b      	add	r3, r1
 8001cb4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cb8:	e00a      	b.n	8001cd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	4908      	ldr	r1, [pc, #32]	@ (8001ce0 <__NVIC_SetPriority+0x50>)
 8001cc0:	79fb      	ldrb	r3, [r7, #7]
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	3b04      	subs	r3, #4
 8001cc8:	0112      	lsls	r2, r2, #4
 8001cca:	b2d2      	uxtb	r2, r2
 8001ccc:	440b      	add	r3, r1
 8001cce:	761a      	strb	r2, [r3, #24]
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	e000e100 	.word	0xe000e100
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b089      	sub	sp, #36	@ 0x24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	f1c3 0307 	rsb	r3, r3, #7
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	bf28      	it	cs
 8001d02:	2304      	movcs	r3, #4
 8001d04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	3304      	adds	r3, #4
 8001d0a:	2b06      	cmp	r3, #6
 8001d0c:	d902      	bls.n	8001d14 <NVIC_EncodePriority+0x30>
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	3b03      	subs	r3, #3
 8001d12:	e000      	b.n	8001d16 <NVIC_EncodePriority+0x32>
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d18:	f04f 32ff 	mov.w	r2, #4294967295
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	43da      	mvns	r2, r3
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	401a      	ands	r2, r3
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	fa01 f303 	lsl.w	r3, r1, r3
 8001d36:	43d9      	mvns	r1, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d3c:	4313      	orrs	r3, r2
         );
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3724      	adds	r7, #36	@ 0x24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
	...

08001d4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3b01      	subs	r3, #1
 8001d58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d5c:	d301      	bcc.n	8001d62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e00f      	b.n	8001d82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d62:	4a0a      	ldr	r2, [pc, #40]	@ (8001d8c <SysTick_Config+0x40>)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3b01      	subs	r3, #1
 8001d68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d6a:	210f      	movs	r1, #15
 8001d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d70:	f7ff ff8e 	bl	8001c90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d74:	4b05      	ldr	r3, [pc, #20]	@ (8001d8c <SysTick_Config+0x40>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d7a:	4b04      	ldr	r3, [pc, #16]	@ (8001d8c <SysTick_Config+0x40>)
 8001d7c:	2207      	movs	r2, #7
 8001d7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	e000e010 	.word	0xe000e010

08001d90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f7ff ff29 	bl	8001bf0 <__NVIC_SetPriorityGrouping>
}
 8001d9e:	bf00      	nop
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b086      	sub	sp, #24
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	4603      	mov	r3, r0
 8001dae:	60b9      	str	r1, [r7, #8]
 8001db0:	607a      	str	r2, [r7, #4]
 8001db2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001db4:	2300      	movs	r3, #0
 8001db6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001db8:	f7ff ff3e 	bl	8001c38 <__NVIC_GetPriorityGrouping>
 8001dbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	68b9      	ldr	r1, [r7, #8]
 8001dc2:	6978      	ldr	r0, [r7, #20]
 8001dc4:	f7ff ff8e 	bl	8001ce4 <NVIC_EncodePriority>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dce:	4611      	mov	r1, r2
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff ff5d 	bl	8001c90 <__NVIC_SetPriority>
}
 8001dd6:	bf00      	nop
 8001dd8:	3718      	adds	r7, #24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b082      	sub	sp, #8
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	4603      	mov	r3, r0
 8001de6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff ff31 	bl	8001c54 <__NVIC_EnableIRQ>
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b082      	sub	sp, #8
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7ff ffa2 	bl	8001d4c <SysTick_Config>
 8001e08:	4603      	mov	r3, r0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
	...

08001e14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e20:	f7ff feb6 	bl	8001b90 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d101      	bne.n	8001e30 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e099      	b.n	8001f64 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2202      	movs	r2, #2
 8001e34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f022 0201 	bic.w	r2, r2, #1
 8001e4e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e50:	e00f      	b.n	8001e72 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e52:	f7ff fe9d 	bl	8001b90 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b05      	cmp	r3, #5
 8001e5e:	d908      	bls.n	8001e72 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2220      	movs	r2, #32
 8001e64:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2203      	movs	r2, #3
 8001e6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e078      	b.n	8001f64 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1e8      	bne.n	8001e52 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	4b38      	ldr	r3, [pc, #224]	@ (8001f6c <HAL_DMA_Init+0x158>)
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685a      	ldr	r2, [r3, #4]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	691b      	ldr	r3, [r3, #16]
 8001ea4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eaa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eb6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a1b      	ldr	r3, [r3, #32]
 8001ebc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ebe:	697a      	ldr	r2, [r7, #20]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec8:	2b04      	cmp	r3, #4
 8001eca:	d107      	bne.n	8001edc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	697a      	ldr	r2, [r7, #20]
 8001ee2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	f023 0307 	bic.w	r3, r3, #7
 8001ef2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef8:	697a      	ldr	r2, [r7, #20]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f02:	2b04      	cmp	r3, #4
 8001f04:	d117      	bne.n	8001f36 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f0a:	697a      	ldr	r2, [r7, #20]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d00e      	beq.n	8001f36 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f000 fa6f 	bl	80023fc <DMA_CheckFifoParam>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d008      	beq.n	8001f36 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2240      	movs	r2, #64	@ 0x40
 8001f28:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001f32:	2301      	movs	r3, #1
 8001f34:	e016      	b.n	8001f64 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	697a      	ldr	r2, [r7, #20]
 8001f3c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 fa26 	bl	8002390 <DMA_CalcBaseAndBitshift>
 8001f44:	4603      	mov	r3, r0
 8001f46:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f4c:	223f      	movs	r2, #63	@ 0x3f
 8001f4e:	409a      	lsls	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3718      	adds	r7, #24
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	f010803f 	.word	0xf010803f

08001f70 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
 8001f7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f86:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d101      	bne.n	8001f96 <HAL_DMA_Start_IT+0x26>
 8001f92:	2302      	movs	r3, #2
 8001f94:	e040      	b.n	8002018 <HAL_DMA_Start_IT+0xa8>
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d12f      	bne.n	800200a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2202      	movs	r2, #2
 8001fae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	68b9      	ldr	r1, [r7, #8]
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	f000 f9b8 	bl	8002334 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fc8:	223f      	movs	r2, #63	@ 0x3f
 8001fca:	409a      	lsls	r2, r3
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f042 0216 	orr.w	r2, r2, #22
 8001fde:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d007      	beq.n	8001ff8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f042 0208 	orr.w	r2, r2, #8
 8001ff6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f042 0201 	orr.w	r2, r2, #1
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	e005      	b.n	8002016 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002012:	2302      	movs	r3, #2
 8002014:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002016:	7dfb      	ldrb	r3, [r7, #23]
}
 8002018:	4618      	mov	r0, r3
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002028:	2300      	movs	r3, #0
 800202a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800202c:	4b8e      	ldr	r3, [pc, #568]	@ (8002268 <HAL_DMA_IRQHandler+0x248>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a8e      	ldr	r2, [pc, #568]	@ (800226c <HAL_DMA_IRQHandler+0x24c>)
 8002032:	fba2 2303 	umull	r2, r3, r2, r3
 8002036:	0a9b      	lsrs	r3, r3, #10
 8002038:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800203e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800204a:	2208      	movs	r2, #8
 800204c:	409a      	lsls	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	4013      	ands	r3, r2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d01a      	beq.n	800208c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	2b00      	cmp	r3, #0
 8002062:	d013      	beq.n	800208c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f022 0204 	bic.w	r2, r2, #4
 8002072:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002078:	2208      	movs	r2, #8
 800207a:	409a      	lsls	r2, r3
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002084:	f043 0201 	orr.w	r2, r3, #1
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002090:	2201      	movs	r2, #1
 8002092:	409a      	lsls	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	4013      	ands	r3, r2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d012      	beq.n	80020c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00b      	beq.n	80020c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ae:	2201      	movs	r2, #1
 80020b0:	409a      	lsls	r2, r3
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ba:	f043 0202 	orr.w	r2, r3, #2
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020c6:	2204      	movs	r2, #4
 80020c8:	409a      	lsls	r2, r3
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	4013      	ands	r3, r2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d012      	beq.n	80020f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d00b      	beq.n	80020f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020e4:	2204      	movs	r2, #4
 80020e6:	409a      	lsls	r2, r3
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020f0:	f043 0204 	orr.w	r2, r3, #4
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020fc:	2210      	movs	r2, #16
 80020fe:	409a      	lsls	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4013      	ands	r3, r2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d043      	beq.n	8002190 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0308 	and.w	r3, r3, #8
 8002112:	2b00      	cmp	r3, #0
 8002114:	d03c      	beq.n	8002190 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800211a:	2210      	movs	r2, #16
 800211c:	409a      	lsls	r2, r3
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d018      	beq.n	8002162 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d108      	bne.n	8002150 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002142:	2b00      	cmp	r3, #0
 8002144:	d024      	beq.n	8002190 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	4798      	blx	r3
 800214e:	e01f      	b.n	8002190 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002154:	2b00      	cmp	r3, #0
 8002156:	d01b      	beq.n	8002190 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	4798      	blx	r3
 8002160:	e016      	b.n	8002190 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800216c:	2b00      	cmp	r3, #0
 800216e:	d107      	bne.n	8002180 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 0208 	bic.w	r2, r2, #8
 800217e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002184:	2b00      	cmp	r3, #0
 8002186:	d003      	beq.n	8002190 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002194:	2220      	movs	r2, #32
 8002196:	409a      	lsls	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	4013      	ands	r3, r2
 800219c:	2b00      	cmp	r3, #0
 800219e:	f000 808f 	beq.w	80022c0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0310 	and.w	r3, r3, #16
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f000 8087 	beq.w	80022c0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021b6:	2220      	movs	r2, #32
 80021b8:	409a      	lsls	r2, r3
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b05      	cmp	r3, #5
 80021c8:	d136      	bne.n	8002238 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 0216 	bic.w	r2, r2, #22
 80021d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	695a      	ldr	r2, [r3, #20]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80021e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d103      	bne.n	80021fa <HAL_DMA_IRQHandler+0x1da>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d007      	beq.n	800220a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 0208 	bic.w	r2, r2, #8
 8002208:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800220e:	223f      	movs	r2, #63	@ 0x3f
 8002210:	409a      	lsls	r2, r3
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2201      	movs	r2, #1
 800221a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800222a:	2b00      	cmp	r3, #0
 800222c:	d07e      	beq.n	800232c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	4798      	blx	r3
        }
        return;
 8002236:	e079      	b.n	800232c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d01d      	beq.n	8002282 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d10d      	bne.n	8002270 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002258:	2b00      	cmp	r3, #0
 800225a:	d031      	beq.n	80022c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	4798      	blx	r3
 8002264:	e02c      	b.n	80022c0 <HAL_DMA_IRQHandler+0x2a0>
 8002266:	bf00      	nop
 8002268:	200000b0 	.word	0x200000b0
 800226c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002274:	2b00      	cmp	r3, #0
 8002276:	d023      	beq.n	80022c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	4798      	blx	r3
 8002280:	e01e      	b.n	80022c0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800228c:	2b00      	cmp	r3, #0
 800228e:	d10f      	bne.n	80022b0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0210 	bic.w	r2, r2, #16
 800229e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d003      	beq.n	80022c0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d032      	beq.n	800232e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d022      	beq.n	800231a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2205      	movs	r2, #5
 80022d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f022 0201 	bic.w	r2, r2, #1
 80022ea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	3301      	adds	r3, #1
 80022f0:	60bb      	str	r3, [r7, #8]
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d307      	bcc.n	8002308 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1f2      	bne.n	80022ec <HAL_DMA_IRQHandler+0x2cc>
 8002306:	e000      	b.n	800230a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002308:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800231e:	2b00      	cmp	r3, #0
 8002320:	d005      	beq.n	800232e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	4798      	blx	r3
 800232a:	e000      	b.n	800232e <HAL_DMA_IRQHandler+0x30e>
        return;
 800232c:	bf00      	nop
    }
  }
}
 800232e:	3718      	adds	r7, #24
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
 8002340:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002350:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	2b40      	cmp	r3, #64	@ 0x40
 8002360:	d108      	bne.n	8002374 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002372:	e007      	b.n	8002384 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	68ba      	ldr	r2, [r7, #8]
 800237a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	60da      	str	r2, [r3, #12]
}
 8002384:	bf00      	nop
 8002386:	3714      	adds	r7, #20
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	b2db      	uxtb	r3, r3
 800239e:	3b10      	subs	r3, #16
 80023a0:	4a14      	ldr	r2, [pc, #80]	@ (80023f4 <DMA_CalcBaseAndBitshift+0x64>)
 80023a2:	fba2 2303 	umull	r2, r3, r2, r3
 80023a6:	091b      	lsrs	r3, r3, #4
 80023a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023aa:	4a13      	ldr	r2, [pc, #76]	@ (80023f8 <DMA_CalcBaseAndBitshift+0x68>)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	4413      	add	r3, r2
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	461a      	mov	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2b03      	cmp	r3, #3
 80023bc:	d909      	bls.n	80023d2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80023c6:	f023 0303 	bic.w	r3, r3, #3
 80023ca:	1d1a      	adds	r2, r3, #4
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	659a      	str	r2, [r3, #88]	@ 0x58
 80023d0:	e007      	b.n	80023e2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80023da:	f023 0303 	bic.w	r3, r3, #3
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3714      	adds	r7, #20
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	aaaaaaab 	.word	0xaaaaaaab
 80023f8:	0800591c 	.word	0x0800591c

080023fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002404:	2300      	movs	r3, #0
 8002406:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800240c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d11f      	bne.n	8002456 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	2b03      	cmp	r3, #3
 800241a:	d856      	bhi.n	80024ca <DMA_CheckFifoParam+0xce>
 800241c:	a201      	add	r2, pc, #4	@ (adr r2, 8002424 <DMA_CheckFifoParam+0x28>)
 800241e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002422:	bf00      	nop
 8002424:	08002435 	.word	0x08002435
 8002428:	08002447 	.word	0x08002447
 800242c:	08002435 	.word	0x08002435
 8002430:	080024cb 	.word	0x080024cb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002438:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d046      	beq.n	80024ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002444:	e043      	b.n	80024ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800244a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800244e:	d140      	bne.n	80024d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002454:	e03d      	b.n	80024d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800245e:	d121      	bne.n	80024a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	2b03      	cmp	r3, #3
 8002464:	d837      	bhi.n	80024d6 <DMA_CheckFifoParam+0xda>
 8002466:	a201      	add	r2, pc, #4	@ (adr r2, 800246c <DMA_CheckFifoParam+0x70>)
 8002468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800246c:	0800247d 	.word	0x0800247d
 8002470:	08002483 	.word	0x08002483
 8002474:	0800247d 	.word	0x0800247d
 8002478:	08002495 	.word	0x08002495
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	73fb      	strb	r3, [r7, #15]
      break;
 8002480:	e030      	b.n	80024e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002486:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d025      	beq.n	80024da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002492:	e022      	b.n	80024da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002498:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800249c:	d11f      	bne.n	80024de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80024a2:	e01c      	b.n	80024de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d903      	bls.n	80024b2 <DMA_CheckFifoParam+0xb6>
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	2b03      	cmp	r3, #3
 80024ae:	d003      	beq.n	80024b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80024b0:	e018      	b.n	80024e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	73fb      	strb	r3, [r7, #15]
      break;
 80024b6:	e015      	b.n	80024e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d00e      	beq.n	80024e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	73fb      	strb	r3, [r7, #15]
      break;
 80024c8:	e00b      	b.n	80024e2 <DMA_CheckFifoParam+0xe6>
      break;
 80024ca:	bf00      	nop
 80024cc:	e00a      	b.n	80024e4 <DMA_CheckFifoParam+0xe8>
      break;
 80024ce:	bf00      	nop
 80024d0:	e008      	b.n	80024e4 <DMA_CheckFifoParam+0xe8>
      break;
 80024d2:	bf00      	nop
 80024d4:	e006      	b.n	80024e4 <DMA_CheckFifoParam+0xe8>
      break;
 80024d6:	bf00      	nop
 80024d8:	e004      	b.n	80024e4 <DMA_CheckFifoParam+0xe8>
      break;
 80024da:	bf00      	nop
 80024dc:	e002      	b.n	80024e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80024de:	bf00      	nop
 80024e0:	e000      	b.n	80024e4 <DMA_CheckFifoParam+0xe8>
      break;
 80024e2:	bf00      	nop
    }
  } 
  
  return status; 
 80024e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3714      	adds	r7, #20
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop

080024f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b089      	sub	sp, #36	@ 0x24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024fe:	2300      	movs	r3, #0
 8002500:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002502:	2300      	movs	r3, #0
 8002504:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002506:	2300      	movs	r3, #0
 8002508:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800250a:	2300      	movs	r3, #0
 800250c:	61fb      	str	r3, [r7, #28]
 800250e:	e159      	b.n	80027c4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002510:	2201      	movs	r2, #1
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	4013      	ands	r3, r2
 8002522:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	429a      	cmp	r2, r3
 800252a:	f040 8148 	bne.w	80027be <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f003 0303 	and.w	r3, r3, #3
 8002536:	2b01      	cmp	r3, #1
 8002538:	d005      	beq.n	8002546 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002542:	2b02      	cmp	r3, #2
 8002544:	d130      	bne.n	80025a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	2203      	movs	r2, #3
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	43db      	mvns	r3, r3
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	4013      	ands	r3, r2
 800255c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	68da      	ldr	r2, [r3, #12]
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	4313      	orrs	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800257c:	2201      	movs	r2, #1
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	43db      	mvns	r3, r3
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4013      	ands	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	091b      	lsrs	r3, r3, #4
 8002592:	f003 0201 	and.w	r2, r3, #1
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	4313      	orrs	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f003 0303 	and.w	r3, r3, #3
 80025b0:	2b03      	cmp	r3, #3
 80025b2:	d017      	beq.n	80025e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	2203      	movs	r2, #3
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	43db      	mvns	r3, r3
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4013      	ands	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	689a      	ldr	r2, [r3, #8]
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	4313      	orrs	r3, r2
 80025dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f003 0303 	and.w	r3, r3, #3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d123      	bne.n	8002638 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	08da      	lsrs	r2, r3, #3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3208      	adds	r2, #8
 80025f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	f003 0307 	and.w	r3, r3, #7
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	220f      	movs	r2, #15
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	43db      	mvns	r3, r3
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4013      	ands	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	691a      	ldr	r2, [r3, #16]
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	f003 0307 	and.w	r3, r3, #7
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4313      	orrs	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	08da      	lsrs	r2, r3, #3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	3208      	adds	r2, #8
 8002632:	69b9      	ldr	r1, [r7, #24]
 8002634:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	2203      	movs	r2, #3
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	43db      	mvns	r3, r3
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	4013      	ands	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f003 0203 	and.w	r2, r3, #3
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	4313      	orrs	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002674:	2b00      	cmp	r3, #0
 8002676:	f000 80a2 	beq.w	80027be <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800267a:	2300      	movs	r3, #0
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	4b57      	ldr	r3, [pc, #348]	@ (80027dc <HAL_GPIO_Init+0x2e8>)
 8002680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002682:	4a56      	ldr	r2, [pc, #344]	@ (80027dc <HAL_GPIO_Init+0x2e8>)
 8002684:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002688:	6453      	str	r3, [r2, #68]	@ 0x44
 800268a:	4b54      	ldr	r3, [pc, #336]	@ (80027dc <HAL_GPIO_Init+0x2e8>)
 800268c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800268e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002696:	4a52      	ldr	r2, [pc, #328]	@ (80027e0 <HAL_GPIO_Init+0x2ec>)
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	089b      	lsrs	r3, r3, #2
 800269c:	3302      	adds	r3, #2
 800269e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	f003 0303 	and.w	r3, r3, #3
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	220f      	movs	r2, #15
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	43db      	mvns	r3, r3
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	4013      	ands	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a49      	ldr	r2, [pc, #292]	@ (80027e4 <HAL_GPIO_Init+0x2f0>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d019      	beq.n	80026f6 <HAL_GPIO_Init+0x202>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a48      	ldr	r2, [pc, #288]	@ (80027e8 <HAL_GPIO_Init+0x2f4>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d013      	beq.n	80026f2 <HAL_GPIO_Init+0x1fe>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a47      	ldr	r2, [pc, #284]	@ (80027ec <HAL_GPIO_Init+0x2f8>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d00d      	beq.n	80026ee <HAL_GPIO_Init+0x1fa>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a46      	ldr	r2, [pc, #280]	@ (80027f0 <HAL_GPIO_Init+0x2fc>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d007      	beq.n	80026ea <HAL_GPIO_Init+0x1f6>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a45      	ldr	r2, [pc, #276]	@ (80027f4 <HAL_GPIO_Init+0x300>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d101      	bne.n	80026e6 <HAL_GPIO_Init+0x1f2>
 80026e2:	2304      	movs	r3, #4
 80026e4:	e008      	b.n	80026f8 <HAL_GPIO_Init+0x204>
 80026e6:	2307      	movs	r3, #7
 80026e8:	e006      	b.n	80026f8 <HAL_GPIO_Init+0x204>
 80026ea:	2303      	movs	r3, #3
 80026ec:	e004      	b.n	80026f8 <HAL_GPIO_Init+0x204>
 80026ee:	2302      	movs	r3, #2
 80026f0:	e002      	b.n	80026f8 <HAL_GPIO_Init+0x204>
 80026f2:	2301      	movs	r3, #1
 80026f4:	e000      	b.n	80026f8 <HAL_GPIO_Init+0x204>
 80026f6:	2300      	movs	r3, #0
 80026f8:	69fa      	ldr	r2, [r7, #28]
 80026fa:	f002 0203 	and.w	r2, r2, #3
 80026fe:	0092      	lsls	r2, r2, #2
 8002700:	4093      	lsls	r3, r2
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	4313      	orrs	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002708:	4935      	ldr	r1, [pc, #212]	@ (80027e0 <HAL_GPIO_Init+0x2ec>)
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	089b      	lsrs	r3, r3, #2
 800270e:	3302      	adds	r3, #2
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002716:	4b38      	ldr	r3, [pc, #224]	@ (80027f8 <HAL_GPIO_Init+0x304>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	43db      	mvns	r3, r3
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	4013      	ands	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d003      	beq.n	800273a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	4313      	orrs	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800273a:	4a2f      	ldr	r2, [pc, #188]	@ (80027f8 <HAL_GPIO_Init+0x304>)
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002740:	4b2d      	ldr	r3, [pc, #180]	@ (80027f8 <HAL_GPIO_Init+0x304>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	43db      	mvns	r3, r3
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	4013      	ands	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d003      	beq.n	8002764 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	4313      	orrs	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002764:	4a24      	ldr	r2, [pc, #144]	@ (80027f8 <HAL_GPIO_Init+0x304>)
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800276a:	4b23      	ldr	r3, [pc, #140]	@ (80027f8 <HAL_GPIO_Init+0x304>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	43db      	mvns	r3, r3
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	4013      	ands	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d003      	beq.n	800278e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	4313      	orrs	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800278e:	4a1a      	ldr	r2, [pc, #104]	@ (80027f8 <HAL_GPIO_Init+0x304>)
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002794:	4b18      	ldr	r3, [pc, #96]	@ (80027f8 <HAL_GPIO_Init+0x304>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	43db      	mvns	r3, r3
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	4013      	ands	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d003      	beq.n	80027b8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027b8:	4a0f      	ldr	r2, [pc, #60]	@ (80027f8 <HAL_GPIO_Init+0x304>)
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	3301      	adds	r3, #1
 80027c2:	61fb      	str	r3, [r7, #28]
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	2b0f      	cmp	r3, #15
 80027c8:	f67f aea2 	bls.w	8002510 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027cc:	bf00      	nop
 80027ce:	bf00      	nop
 80027d0:	3724      	adds	r7, #36	@ 0x24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	40023800 	.word	0x40023800
 80027e0:	40013800 	.word	0x40013800
 80027e4:	40020000 	.word	0x40020000
 80027e8:	40020400 	.word	0x40020400
 80027ec:	40020800 	.word	0x40020800
 80027f0:	40020c00 	.word	0x40020c00
 80027f4:	40021000 	.word	0x40021000
 80027f8:	40013c00 	.word	0x40013c00

080027fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	460b      	mov	r3, r1
 8002806:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	691a      	ldr	r2, [r3, #16]
 800280c:	887b      	ldrh	r3, [r7, #2]
 800280e:	4013      	ands	r3, r2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d002      	beq.n	800281a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002814:	2301      	movs	r3, #1
 8002816:	73fb      	strb	r3, [r7, #15]
 8002818:	e001      	b.n	800281e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800281a:	2300      	movs	r3, #0
 800281c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800281e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002820:	4618      	mov	r0, r3
 8002822:	3714      	adds	r7, #20
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	460b      	mov	r3, r1
 8002836:	807b      	strh	r3, [r7, #2]
 8002838:	4613      	mov	r3, r2
 800283a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800283c:	787b      	ldrb	r3, [r7, #1]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d003      	beq.n	800284a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002842:	887a      	ldrh	r2, [r7, #2]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002848:	e003      	b.n	8002852 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800284a:	887b      	ldrh	r3, [r7, #2]
 800284c:	041a      	lsls	r2, r3, #16
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	619a      	str	r2, [r3, #24]
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
	...

08002860 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e267      	b.n	8002d42 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b00      	cmp	r3, #0
 800287c:	d075      	beq.n	800296a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800287e:	4b88      	ldr	r3, [pc, #544]	@ (8002aa0 <HAL_RCC_OscConfig+0x240>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f003 030c 	and.w	r3, r3, #12
 8002886:	2b04      	cmp	r3, #4
 8002888:	d00c      	beq.n	80028a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800288a:	4b85      	ldr	r3, [pc, #532]	@ (8002aa0 <HAL_RCC_OscConfig+0x240>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002892:	2b08      	cmp	r3, #8
 8002894:	d112      	bne.n	80028bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002896:	4b82      	ldr	r3, [pc, #520]	@ (8002aa0 <HAL_RCC_OscConfig+0x240>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800289e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028a2:	d10b      	bne.n	80028bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a4:	4b7e      	ldr	r3, [pc, #504]	@ (8002aa0 <HAL_RCC_OscConfig+0x240>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d05b      	beq.n	8002968 <HAL_RCC_OscConfig+0x108>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d157      	bne.n	8002968 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e242      	b.n	8002d42 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028c4:	d106      	bne.n	80028d4 <HAL_RCC_OscConfig+0x74>
 80028c6:	4b76      	ldr	r3, [pc, #472]	@ (8002aa0 <HAL_RCC_OscConfig+0x240>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a75      	ldr	r2, [pc, #468]	@ (8002aa0 <HAL_RCC_OscConfig+0x240>)
 80028cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	e01d      	b.n	8002910 <HAL_RCC_OscConfig+0xb0>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028dc:	d10c      	bne.n	80028f8 <HAL_RCC_OscConfig+0x98>
 80028de:	4b70      	ldr	r3, [pc, #448]	@ (8002aa0 <HAL_RCC_OscConfig+0x240>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a6f      	ldr	r2, [pc, #444]	@ (8002aa0 <HAL_RCC_OscConfig+0x240>)
 80028e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028e8:	6013      	str	r3, [r2, #0]
 80028ea:	4b6d      	ldr	r3, [pc, #436]	@ (8002aa0 <HAL_RCC_OscConfig+0x240>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a6c      	ldr	r2, [pc, #432]	@ (8002aa0 <HAL_RCC_OscConfig+0x240>)
 80028f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028f4:	6013      	str	r3, [r2, #0]
 80028f6:	e00b      	b.n	8002910 <HAL_RCC_OscConfig+0xb0>
 80028f8:	4b69      	ldr	r3, [pc, #420]	@ (8002aa0 <HAL_RCC_OscConfig+0x240>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a68      	ldr	r2, [pc, #416]	@ (8002aa0 <HAL_RCC_OscConfig+0x240>)
 80028fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002902:	6013      	str	r3, [r2, #0]
 8002904:	4b66      	ldr	r3, [pc, #408]	@ (8002aa0 <HAL_RCC_OscConfig+0x240>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a65      	ldr	r2, [pc, #404]	@ (8002aa0 <HAL_RCC_OscConfig+0x240>)
 800290a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800290e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d013      	beq.n	8002940 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002918:	f7ff f93a 	bl	8001b90 <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002920:	f7ff f936 	bl	8001b90 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b64      	cmp	r3, #100	@ 0x64
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e207      	b.n	8002d42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002932:	4b5b      	ldr	r3, [pc, #364]	@ (8002aa0 <HAL_RCC_OscConfig+0x240>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0f0      	beq.n	8002920 <HAL_RCC_OscConfig+0xc0>
 800293e:	e014      	b.n	800296a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002940:	f7ff f926 	bl	8001b90 <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002948:	f7ff f922 	bl	8001b90 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b64      	cmp	r3, #100	@ 0x64
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e1f3      	b.n	8002d42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800295a:	4b51      	ldr	r3, [pc, #324]	@ (8002aa0 <HAL_RCC_OscConfig+0x240>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1f0      	bne.n	8002948 <HAL_RCC_OscConfig+0xe8>
 8002966:	e000      	b.n	800296a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002968:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d063      	beq.n	8002a3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002976:	4b4a      	ldr	r3, [pc, #296]	@ (8002aa0 <HAL_RCC_OscConfig+0x240>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f003 030c 	and.w	r3, r3, #12
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00b      	beq.n	800299a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002982:	4b47      	ldr	r3, [pc, #284]	@ (8002aa0 <HAL_RCC_OscConfig+0x240>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800298a:	2b08      	cmp	r3, #8
 800298c:	d11c      	bne.n	80029c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800298e:	4b44      	ldr	r3, [pc, #272]	@ (8002aa0 <HAL_RCC_OscConfig+0x240>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d116      	bne.n	80029c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800299a:	4b41      	ldr	r3, [pc, #260]	@ (8002aa0 <HAL_RCC_OscConfig+0x240>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d005      	beq.n	80029b2 <HAL_RCC_OscConfig+0x152>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d001      	beq.n	80029b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e1c7      	b.n	8002d42 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b2:	4b3b      	ldr	r3, [pc, #236]	@ (8002aa0 <HAL_RCC_OscConfig+0x240>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	4937      	ldr	r1, [pc, #220]	@ (8002aa0 <HAL_RCC_OscConfig+0x240>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029c6:	e03a      	b.n	8002a3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d020      	beq.n	8002a12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029d0:	4b34      	ldr	r3, [pc, #208]	@ (8002aa4 <HAL_RCC_OscConfig+0x244>)
 80029d2:	2201      	movs	r2, #1
 80029d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d6:	f7ff f8db 	bl	8001b90 <HAL_GetTick>
 80029da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029dc:	e008      	b.n	80029f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029de:	f7ff f8d7 	bl	8001b90 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e1a8      	b.n	8002d42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f0:	4b2b      	ldr	r3, [pc, #172]	@ (8002aa0 <HAL_RCC_OscConfig+0x240>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d0f0      	beq.n	80029de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029fc:	4b28      	ldr	r3, [pc, #160]	@ (8002aa0 <HAL_RCC_OscConfig+0x240>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	4925      	ldr	r1, [pc, #148]	@ (8002aa0 <HAL_RCC_OscConfig+0x240>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	600b      	str	r3, [r1, #0]
 8002a10:	e015      	b.n	8002a3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a12:	4b24      	ldr	r3, [pc, #144]	@ (8002aa4 <HAL_RCC_OscConfig+0x244>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a18:	f7ff f8ba 	bl	8001b90 <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a20:	f7ff f8b6 	bl	8001b90 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e187      	b.n	8002d42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a32:	4b1b      	ldr	r3, [pc, #108]	@ (8002aa0 <HAL_RCC_OscConfig+0x240>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1f0      	bne.n	8002a20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0308 	and.w	r3, r3, #8
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d036      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d016      	beq.n	8002a80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a52:	4b15      	ldr	r3, [pc, #84]	@ (8002aa8 <HAL_RCC_OscConfig+0x248>)
 8002a54:	2201      	movs	r2, #1
 8002a56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a58:	f7ff f89a 	bl	8001b90 <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a60:	f7ff f896 	bl	8001b90 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e167      	b.n	8002d42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a72:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa0 <HAL_RCC_OscConfig+0x240>)
 8002a74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d0f0      	beq.n	8002a60 <HAL_RCC_OscConfig+0x200>
 8002a7e:	e01b      	b.n	8002ab8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a80:	4b09      	ldr	r3, [pc, #36]	@ (8002aa8 <HAL_RCC_OscConfig+0x248>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a86:	f7ff f883 	bl	8001b90 <HAL_GetTick>
 8002a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a8c:	e00e      	b.n	8002aac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a8e:	f7ff f87f 	bl	8001b90 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d907      	bls.n	8002aac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e150      	b.n	8002d42 <HAL_RCC_OscConfig+0x4e2>
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	42470000 	.word	0x42470000
 8002aa8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aac:	4b88      	ldr	r3, [pc, #544]	@ (8002cd0 <HAL_RCC_OscConfig+0x470>)
 8002aae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1ea      	bne.n	8002a8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f000 8097 	beq.w	8002bf4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aca:	4b81      	ldr	r3, [pc, #516]	@ (8002cd0 <HAL_RCC_OscConfig+0x470>)
 8002acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10f      	bne.n	8002af6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	60bb      	str	r3, [r7, #8]
 8002ada:	4b7d      	ldr	r3, [pc, #500]	@ (8002cd0 <HAL_RCC_OscConfig+0x470>)
 8002adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ade:	4a7c      	ldr	r2, [pc, #496]	@ (8002cd0 <HAL_RCC_OscConfig+0x470>)
 8002ae0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ae4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ae6:	4b7a      	ldr	r3, [pc, #488]	@ (8002cd0 <HAL_RCC_OscConfig+0x470>)
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aee:	60bb      	str	r3, [r7, #8]
 8002af0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002af2:	2301      	movs	r3, #1
 8002af4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af6:	4b77      	ldr	r3, [pc, #476]	@ (8002cd4 <HAL_RCC_OscConfig+0x474>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d118      	bne.n	8002b34 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b02:	4b74      	ldr	r3, [pc, #464]	@ (8002cd4 <HAL_RCC_OscConfig+0x474>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a73      	ldr	r2, [pc, #460]	@ (8002cd4 <HAL_RCC_OscConfig+0x474>)
 8002b08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b0e:	f7ff f83f 	bl	8001b90 <HAL_GetTick>
 8002b12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b14:	e008      	b.n	8002b28 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b16:	f7ff f83b 	bl	8001b90 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d901      	bls.n	8002b28 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e10c      	b.n	8002d42 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b28:	4b6a      	ldr	r3, [pc, #424]	@ (8002cd4 <HAL_RCC_OscConfig+0x474>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d0f0      	beq.n	8002b16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d106      	bne.n	8002b4a <HAL_RCC_OscConfig+0x2ea>
 8002b3c:	4b64      	ldr	r3, [pc, #400]	@ (8002cd0 <HAL_RCC_OscConfig+0x470>)
 8002b3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b40:	4a63      	ldr	r2, [pc, #396]	@ (8002cd0 <HAL_RCC_OscConfig+0x470>)
 8002b42:	f043 0301 	orr.w	r3, r3, #1
 8002b46:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b48:	e01c      	b.n	8002b84 <HAL_RCC_OscConfig+0x324>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	2b05      	cmp	r3, #5
 8002b50:	d10c      	bne.n	8002b6c <HAL_RCC_OscConfig+0x30c>
 8002b52:	4b5f      	ldr	r3, [pc, #380]	@ (8002cd0 <HAL_RCC_OscConfig+0x470>)
 8002b54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b56:	4a5e      	ldr	r2, [pc, #376]	@ (8002cd0 <HAL_RCC_OscConfig+0x470>)
 8002b58:	f043 0304 	orr.w	r3, r3, #4
 8002b5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b5e:	4b5c      	ldr	r3, [pc, #368]	@ (8002cd0 <HAL_RCC_OscConfig+0x470>)
 8002b60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b62:	4a5b      	ldr	r2, [pc, #364]	@ (8002cd0 <HAL_RCC_OscConfig+0x470>)
 8002b64:	f043 0301 	orr.w	r3, r3, #1
 8002b68:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b6a:	e00b      	b.n	8002b84 <HAL_RCC_OscConfig+0x324>
 8002b6c:	4b58      	ldr	r3, [pc, #352]	@ (8002cd0 <HAL_RCC_OscConfig+0x470>)
 8002b6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b70:	4a57      	ldr	r2, [pc, #348]	@ (8002cd0 <HAL_RCC_OscConfig+0x470>)
 8002b72:	f023 0301 	bic.w	r3, r3, #1
 8002b76:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b78:	4b55      	ldr	r3, [pc, #340]	@ (8002cd0 <HAL_RCC_OscConfig+0x470>)
 8002b7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b7c:	4a54      	ldr	r2, [pc, #336]	@ (8002cd0 <HAL_RCC_OscConfig+0x470>)
 8002b7e:	f023 0304 	bic.w	r3, r3, #4
 8002b82:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d015      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b8c:	f7ff f800 	bl	8001b90 <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b92:	e00a      	b.n	8002baa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b94:	f7fe fffc 	bl	8001b90 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e0cb      	b.n	8002d42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002baa:	4b49      	ldr	r3, [pc, #292]	@ (8002cd0 <HAL_RCC_OscConfig+0x470>)
 8002bac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d0ee      	beq.n	8002b94 <HAL_RCC_OscConfig+0x334>
 8002bb6:	e014      	b.n	8002be2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bb8:	f7fe ffea 	bl	8001b90 <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bbe:	e00a      	b.n	8002bd6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bc0:	f7fe ffe6 	bl	8001b90 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e0b5      	b.n	8002d42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bd6:	4b3e      	ldr	r3, [pc, #248]	@ (8002cd0 <HAL_RCC_OscConfig+0x470>)
 8002bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1ee      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002be2:	7dfb      	ldrb	r3, [r7, #23]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d105      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002be8:	4b39      	ldr	r3, [pc, #228]	@ (8002cd0 <HAL_RCC_OscConfig+0x470>)
 8002bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bec:	4a38      	ldr	r2, [pc, #224]	@ (8002cd0 <HAL_RCC_OscConfig+0x470>)
 8002bee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bf2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f000 80a1 	beq.w	8002d40 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bfe:	4b34      	ldr	r3, [pc, #208]	@ (8002cd0 <HAL_RCC_OscConfig+0x470>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 030c 	and.w	r3, r3, #12
 8002c06:	2b08      	cmp	r3, #8
 8002c08:	d05c      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d141      	bne.n	8002c96 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c12:	4b31      	ldr	r3, [pc, #196]	@ (8002cd8 <HAL_RCC_OscConfig+0x478>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c18:	f7fe ffba 	bl	8001b90 <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c20:	f7fe ffb6 	bl	8001b90 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e087      	b.n	8002d42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c32:	4b27      	ldr	r3, [pc, #156]	@ (8002cd0 <HAL_RCC_OscConfig+0x470>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1f0      	bne.n	8002c20 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	69da      	ldr	r2, [r3, #28]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	431a      	orrs	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c4c:	019b      	lsls	r3, r3, #6
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c54:	085b      	lsrs	r3, r3, #1
 8002c56:	3b01      	subs	r3, #1
 8002c58:	041b      	lsls	r3, r3, #16
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c60:	061b      	lsls	r3, r3, #24
 8002c62:	491b      	ldr	r1, [pc, #108]	@ (8002cd0 <HAL_RCC_OscConfig+0x470>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c68:	4b1b      	ldr	r3, [pc, #108]	@ (8002cd8 <HAL_RCC_OscConfig+0x478>)
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c6e:	f7fe ff8f 	bl	8001b90 <HAL_GetTick>
 8002c72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c74:	e008      	b.n	8002c88 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c76:	f7fe ff8b 	bl	8001b90 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e05c      	b.n	8002d42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c88:	4b11      	ldr	r3, [pc, #68]	@ (8002cd0 <HAL_RCC_OscConfig+0x470>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d0f0      	beq.n	8002c76 <HAL_RCC_OscConfig+0x416>
 8002c94:	e054      	b.n	8002d40 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c96:	4b10      	ldr	r3, [pc, #64]	@ (8002cd8 <HAL_RCC_OscConfig+0x478>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9c:	f7fe ff78 	bl	8001b90 <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ca4:	f7fe ff74 	bl	8001b90 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e045      	b.n	8002d42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cb6:	4b06      	ldr	r3, [pc, #24]	@ (8002cd0 <HAL_RCC_OscConfig+0x470>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1f0      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x444>
 8002cc2:	e03d      	b.n	8002d40 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d107      	bne.n	8002cdc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e038      	b.n	8002d42 <HAL_RCC_OscConfig+0x4e2>
 8002cd0:	40023800 	.word	0x40023800
 8002cd4:	40007000 	.word	0x40007000
 8002cd8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cdc:	4b1b      	ldr	r3, [pc, #108]	@ (8002d4c <HAL_RCC_OscConfig+0x4ec>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d028      	beq.n	8002d3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d121      	bne.n	8002d3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d11a      	bne.n	8002d3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d111      	bne.n	8002d3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d22:	085b      	lsrs	r3, r3, #1
 8002d24:	3b01      	subs	r3, #1
 8002d26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d107      	bne.n	8002d3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d001      	beq.n	8002d40 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e000      	b.n	8002d42 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3718      	adds	r7, #24
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	40023800 	.word	0x40023800

08002d50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d101      	bne.n	8002d64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e0cc      	b.n	8002efe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d64:	4b68      	ldr	r3, [pc, #416]	@ (8002f08 <HAL_RCC_ClockConfig+0x1b8>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0307 	and.w	r3, r3, #7
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d90c      	bls.n	8002d8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d72:	4b65      	ldr	r3, [pc, #404]	@ (8002f08 <HAL_RCC_ClockConfig+0x1b8>)
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d7a:	4b63      	ldr	r3, [pc, #396]	@ (8002f08 <HAL_RCC_ClockConfig+0x1b8>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0307 	and.w	r3, r3, #7
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d001      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e0b8      	b.n	8002efe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d020      	beq.n	8002dda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0304 	and.w	r3, r3, #4
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d005      	beq.n	8002db0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002da4:	4b59      	ldr	r3, [pc, #356]	@ (8002f0c <HAL_RCC_ClockConfig+0x1bc>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	4a58      	ldr	r2, [pc, #352]	@ (8002f0c <HAL_RCC_ClockConfig+0x1bc>)
 8002daa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002dae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0308 	and.w	r3, r3, #8
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d005      	beq.n	8002dc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dbc:	4b53      	ldr	r3, [pc, #332]	@ (8002f0c <HAL_RCC_ClockConfig+0x1bc>)
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	4a52      	ldr	r2, [pc, #328]	@ (8002f0c <HAL_RCC_ClockConfig+0x1bc>)
 8002dc2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002dc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dc8:	4b50      	ldr	r3, [pc, #320]	@ (8002f0c <HAL_RCC_ClockConfig+0x1bc>)
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	494d      	ldr	r1, [pc, #308]	@ (8002f0c <HAL_RCC_ClockConfig+0x1bc>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d044      	beq.n	8002e70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d107      	bne.n	8002dfe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dee:	4b47      	ldr	r3, [pc, #284]	@ (8002f0c <HAL_RCC_ClockConfig+0x1bc>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d119      	bne.n	8002e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e07f      	b.n	8002efe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d003      	beq.n	8002e0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e0a:	2b03      	cmp	r3, #3
 8002e0c:	d107      	bne.n	8002e1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e0e:	4b3f      	ldr	r3, [pc, #252]	@ (8002f0c <HAL_RCC_ClockConfig+0x1bc>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d109      	bne.n	8002e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e06f      	b.n	8002efe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e1e:	4b3b      	ldr	r3, [pc, #236]	@ (8002f0c <HAL_RCC_ClockConfig+0x1bc>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e067      	b.n	8002efe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e2e:	4b37      	ldr	r3, [pc, #220]	@ (8002f0c <HAL_RCC_ClockConfig+0x1bc>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f023 0203 	bic.w	r2, r3, #3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	4934      	ldr	r1, [pc, #208]	@ (8002f0c <HAL_RCC_ClockConfig+0x1bc>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e40:	f7fe fea6 	bl	8001b90 <HAL_GetTick>
 8002e44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e46:	e00a      	b.n	8002e5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e48:	f7fe fea2 	bl	8001b90 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e04f      	b.n	8002efe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e5e:	4b2b      	ldr	r3, [pc, #172]	@ (8002f0c <HAL_RCC_ClockConfig+0x1bc>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f003 020c 	and.w	r2, r3, #12
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d1eb      	bne.n	8002e48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e70:	4b25      	ldr	r3, [pc, #148]	@ (8002f08 <HAL_RCC_ClockConfig+0x1b8>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0307 	and.w	r3, r3, #7
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d20c      	bcs.n	8002e98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e7e:	4b22      	ldr	r3, [pc, #136]	@ (8002f08 <HAL_RCC_ClockConfig+0x1b8>)
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	b2d2      	uxtb	r2, r2
 8002e84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e86:	4b20      	ldr	r3, [pc, #128]	@ (8002f08 <HAL_RCC_ClockConfig+0x1b8>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0307 	and.w	r3, r3, #7
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d001      	beq.n	8002e98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e032      	b.n	8002efe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0304 	and.w	r3, r3, #4
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d008      	beq.n	8002eb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ea4:	4b19      	ldr	r3, [pc, #100]	@ (8002f0c <HAL_RCC_ClockConfig+0x1bc>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	4916      	ldr	r1, [pc, #88]	@ (8002f0c <HAL_RCC_ClockConfig+0x1bc>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0308 	and.w	r3, r3, #8
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d009      	beq.n	8002ed6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ec2:	4b12      	ldr	r3, [pc, #72]	@ (8002f0c <HAL_RCC_ClockConfig+0x1bc>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	490e      	ldr	r1, [pc, #56]	@ (8002f0c <HAL_RCC_ClockConfig+0x1bc>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ed6:	f000 f821 	bl	8002f1c <HAL_RCC_GetSysClockFreq>
 8002eda:	4602      	mov	r2, r0
 8002edc:	4b0b      	ldr	r3, [pc, #44]	@ (8002f0c <HAL_RCC_ClockConfig+0x1bc>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	091b      	lsrs	r3, r3, #4
 8002ee2:	f003 030f 	and.w	r3, r3, #15
 8002ee6:	490a      	ldr	r1, [pc, #40]	@ (8002f10 <HAL_RCC_ClockConfig+0x1c0>)
 8002ee8:	5ccb      	ldrb	r3, [r1, r3]
 8002eea:	fa22 f303 	lsr.w	r3, r2, r3
 8002eee:	4a09      	ldr	r2, [pc, #36]	@ (8002f14 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ef2:	4b09      	ldr	r3, [pc, #36]	@ (8002f18 <HAL_RCC_ClockConfig+0x1c8>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7fe fe06 	bl	8001b08 <HAL_InitTick>

  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	40023c00 	.word	0x40023c00
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	08005904 	.word	0x08005904
 8002f14:	200000b0 	.word	0x200000b0
 8002f18:	200000b4 	.word	0x200000b4

08002f1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f20:	b094      	sub	sp, #80	@ 0x50
 8002f22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f24:	2300      	movs	r3, #0
 8002f26:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f28:	2300      	movs	r3, #0
 8002f2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002f30:	2300      	movs	r3, #0
 8002f32:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f34:	4b79      	ldr	r3, [pc, #484]	@ (800311c <HAL_RCC_GetSysClockFreq+0x200>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f003 030c 	and.w	r3, r3, #12
 8002f3c:	2b08      	cmp	r3, #8
 8002f3e:	d00d      	beq.n	8002f5c <HAL_RCC_GetSysClockFreq+0x40>
 8002f40:	2b08      	cmp	r3, #8
 8002f42:	f200 80e1 	bhi.w	8003108 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d002      	beq.n	8002f50 <HAL_RCC_GetSysClockFreq+0x34>
 8002f4a:	2b04      	cmp	r3, #4
 8002f4c:	d003      	beq.n	8002f56 <HAL_RCC_GetSysClockFreq+0x3a>
 8002f4e:	e0db      	b.n	8003108 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f50:	4b73      	ldr	r3, [pc, #460]	@ (8003120 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f52:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002f54:	e0db      	b.n	800310e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f56:	4b73      	ldr	r3, [pc, #460]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x208>)
 8002f58:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f5a:	e0d8      	b.n	800310e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f5c:	4b6f      	ldr	r3, [pc, #444]	@ (800311c <HAL_RCC_GetSysClockFreq+0x200>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f64:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f66:	4b6d      	ldr	r3, [pc, #436]	@ (800311c <HAL_RCC_GetSysClockFreq+0x200>)
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d063      	beq.n	800303a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f72:	4b6a      	ldr	r3, [pc, #424]	@ (800311c <HAL_RCC_GetSysClockFreq+0x200>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	099b      	lsrs	r3, r3, #6
 8002f78:	2200      	movs	r2, #0
 8002f7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f7c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f84:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f86:	2300      	movs	r3, #0
 8002f88:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f8a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002f8e:	4622      	mov	r2, r4
 8002f90:	462b      	mov	r3, r5
 8002f92:	f04f 0000 	mov.w	r0, #0
 8002f96:	f04f 0100 	mov.w	r1, #0
 8002f9a:	0159      	lsls	r1, r3, #5
 8002f9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fa0:	0150      	lsls	r0, r2, #5
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	4621      	mov	r1, r4
 8002fa8:	1a51      	subs	r1, r2, r1
 8002faa:	6139      	str	r1, [r7, #16]
 8002fac:	4629      	mov	r1, r5
 8002fae:	eb63 0301 	sbc.w	r3, r3, r1
 8002fb2:	617b      	str	r3, [r7, #20]
 8002fb4:	f04f 0200 	mov.w	r2, #0
 8002fb8:	f04f 0300 	mov.w	r3, #0
 8002fbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fc0:	4659      	mov	r1, fp
 8002fc2:	018b      	lsls	r3, r1, #6
 8002fc4:	4651      	mov	r1, sl
 8002fc6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fca:	4651      	mov	r1, sl
 8002fcc:	018a      	lsls	r2, r1, #6
 8002fce:	4651      	mov	r1, sl
 8002fd0:	ebb2 0801 	subs.w	r8, r2, r1
 8002fd4:	4659      	mov	r1, fp
 8002fd6:	eb63 0901 	sbc.w	r9, r3, r1
 8002fda:	f04f 0200 	mov.w	r2, #0
 8002fde:	f04f 0300 	mov.w	r3, #0
 8002fe2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fe6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fee:	4690      	mov	r8, r2
 8002ff0:	4699      	mov	r9, r3
 8002ff2:	4623      	mov	r3, r4
 8002ff4:	eb18 0303 	adds.w	r3, r8, r3
 8002ff8:	60bb      	str	r3, [r7, #8]
 8002ffa:	462b      	mov	r3, r5
 8002ffc:	eb49 0303 	adc.w	r3, r9, r3
 8003000:	60fb      	str	r3, [r7, #12]
 8003002:	f04f 0200 	mov.w	r2, #0
 8003006:	f04f 0300 	mov.w	r3, #0
 800300a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800300e:	4629      	mov	r1, r5
 8003010:	024b      	lsls	r3, r1, #9
 8003012:	4621      	mov	r1, r4
 8003014:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003018:	4621      	mov	r1, r4
 800301a:	024a      	lsls	r2, r1, #9
 800301c:	4610      	mov	r0, r2
 800301e:	4619      	mov	r1, r3
 8003020:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003022:	2200      	movs	r2, #0
 8003024:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003026:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003028:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800302c:	f7fd f938 	bl	80002a0 <__aeabi_uldivmod>
 8003030:	4602      	mov	r2, r0
 8003032:	460b      	mov	r3, r1
 8003034:	4613      	mov	r3, r2
 8003036:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003038:	e058      	b.n	80030ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800303a:	4b38      	ldr	r3, [pc, #224]	@ (800311c <HAL_RCC_GetSysClockFreq+0x200>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	099b      	lsrs	r3, r3, #6
 8003040:	2200      	movs	r2, #0
 8003042:	4618      	mov	r0, r3
 8003044:	4611      	mov	r1, r2
 8003046:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800304a:	623b      	str	r3, [r7, #32]
 800304c:	2300      	movs	r3, #0
 800304e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003050:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003054:	4642      	mov	r2, r8
 8003056:	464b      	mov	r3, r9
 8003058:	f04f 0000 	mov.w	r0, #0
 800305c:	f04f 0100 	mov.w	r1, #0
 8003060:	0159      	lsls	r1, r3, #5
 8003062:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003066:	0150      	lsls	r0, r2, #5
 8003068:	4602      	mov	r2, r0
 800306a:	460b      	mov	r3, r1
 800306c:	4641      	mov	r1, r8
 800306e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003072:	4649      	mov	r1, r9
 8003074:	eb63 0b01 	sbc.w	fp, r3, r1
 8003078:	f04f 0200 	mov.w	r2, #0
 800307c:	f04f 0300 	mov.w	r3, #0
 8003080:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003084:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003088:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800308c:	ebb2 040a 	subs.w	r4, r2, sl
 8003090:	eb63 050b 	sbc.w	r5, r3, fp
 8003094:	f04f 0200 	mov.w	r2, #0
 8003098:	f04f 0300 	mov.w	r3, #0
 800309c:	00eb      	lsls	r3, r5, #3
 800309e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030a2:	00e2      	lsls	r2, r4, #3
 80030a4:	4614      	mov	r4, r2
 80030a6:	461d      	mov	r5, r3
 80030a8:	4643      	mov	r3, r8
 80030aa:	18e3      	adds	r3, r4, r3
 80030ac:	603b      	str	r3, [r7, #0]
 80030ae:	464b      	mov	r3, r9
 80030b0:	eb45 0303 	adc.w	r3, r5, r3
 80030b4:	607b      	str	r3, [r7, #4]
 80030b6:	f04f 0200 	mov.w	r2, #0
 80030ba:	f04f 0300 	mov.w	r3, #0
 80030be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030c2:	4629      	mov	r1, r5
 80030c4:	028b      	lsls	r3, r1, #10
 80030c6:	4621      	mov	r1, r4
 80030c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030cc:	4621      	mov	r1, r4
 80030ce:	028a      	lsls	r2, r1, #10
 80030d0:	4610      	mov	r0, r2
 80030d2:	4619      	mov	r1, r3
 80030d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030d6:	2200      	movs	r2, #0
 80030d8:	61bb      	str	r3, [r7, #24]
 80030da:	61fa      	str	r2, [r7, #28]
 80030dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030e0:	f7fd f8de 	bl	80002a0 <__aeabi_uldivmod>
 80030e4:	4602      	mov	r2, r0
 80030e6:	460b      	mov	r3, r1
 80030e8:	4613      	mov	r3, r2
 80030ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030ec:	4b0b      	ldr	r3, [pc, #44]	@ (800311c <HAL_RCC_GetSysClockFreq+0x200>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	0c1b      	lsrs	r3, r3, #16
 80030f2:	f003 0303 	and.w	r3, r3, #3
 80030f6:	3301      	adds	r3, #1
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80030fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80030fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003100:	fbb2 f3f3 	udiv	r3, r2, r3
 8003104:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003106:	e002      	b.n	800310e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003108:	4b05      	ldr	r3, [pc, #20]	@ (8003120 <HAL_RCC_GetSysClockFreq+0x204>)
 800310a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800310c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800310e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003110:	4618      	mov	r0, r3
 8003112:	3750      	adds	r7, #80	@ 0x50
 8003114:	46bd      	mov	sp, r7
 8003116:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800311a:	bf00      	nop
 800311c:	40023800 	.word	0x40023800
 8003120:	00f42400 	.word	0x00f42400
 8003124:	007a1200 	.word	0x007a1200

08003128 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800312c:	4b03      	ldr	r3, [pc, #12]	@ (800313c <HAL_RCC_GetHCLKFreq+0x14>)
 800312e:	681b      	ldr	r3, [r3, #0]
}
 8003130:	4618      	mov	r0, r3
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	200000b0 	.word	0x200000b0

08003140 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003144:	f7ff fff0 	bl	8003128 <HAL_RCC_GetHCLKFreq>
 8003148:	4602      	mov	r2, r0
 800314a:	4b05      	ldr	r3, [pc, #20]	@ (8003160 <HAL_RCC_GetPCLK1Freq+0x20>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	0a9b      	lsrs	r3, r3, #10
 8003150:	f003 0307 	and.w	r3, r3, #7
 8003154:	4903      	ldr	r1, [pc, #12]	@ (8003164 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003156:	5ccb      	ldrb	r3, [r1, r3]
 8003158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800315c:	4618      	mov	r0, r3
 800315e:	bd80      	pop	{r7, pc}
 8003160:	40023800 	.word	0x40023800
 8003164:	08005914 	.word	0x08005914

08003168 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800316c:	f7ff ffdc 	bl	8003128 <HAL_RCC_GetHCLKFreq>
 8003170:	4602      	mov	r2, r0
 8003172:	4b05      	ldr	r3, [pc, #20]	@ (8003188 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	0b5b      	lsrs	r3, r3, #13
 8003178:	f003 0307 	and.w	r3, r3, #7
 800317c:	4903      	ldr	r1, [pc, #12]	@ (800318c <HAL_RCC_GetPCLK2Freq+0x24>)
 800317e:	5ccb      	ldrb	r3, [r1, r3]
 8003180:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003184:	4618      	mov	r0, r3
 8003186:	bd80      	pop	{r7, pc}
 8003188:	40023800 	.word	0x40023800
 800318c:	08005914 	.word	0x08005914

08003190 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e07b      	b.n	800329a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d108      	bne.n	80031bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031b2:	d009      	beq.n	80031c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	61da      	str	r2, [r3, #28]
 80031ba:	e005      	b.n	80031c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d106      	bne.n	80031e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f7fe fa16 	bl	8001614 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2202      	movs	r2, #2
 80031ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003210:	431a      	orrs	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800321a:	431a      	orrs	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	431a      	orrs	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	431a      	orrs	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003238:	431a      	orrs	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	69db      	ldr	r3, [r3, #28]
 800323e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003242:	431a      	orrs	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a1b      	ldr	r3, [r3, #32]
 8003248:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800324c:	ea42 0103 	orr.w	r1, r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003254:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	430a      	orrs	r2, r1
 800325e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	0c1b      	lsrs	r3, r3, #16
 8003266:	f003 0104 	and.w	r1, r3, #4
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326e:	f003 0210 	and.w	r2, r3, #16
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	430a      	orrs	r2, r1
 8003278:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	69da      	ldr	r2, [r3, #28]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003288:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
	...

080032a4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	4613      	mov	r3, r2
 80032b0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80032b2:	2300      	movs	r3, #0
 80032b4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d101      	bne.n	80032c4 <HAL_SPI_Transmit_DMA+0x20>
 80032c0:	2302      	movs	r3, #2
 80032c2:	e09b      	b.n	80033fc <HAL_SPI_Transmit_DMA+0x158>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d002      	beq.n	80032de <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80032d8:	2302      	movs	r3, #2
 80032da:	75fb      	strb	r3, [r7, #23]
    goto error;
 80032dc:	e089      	b.n	80033f2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d002      	beq.n	80032ea <HAL_SPI_Transmit_DMA+0x46>
 80032e4:	88fb      	ldrh	r3, [r7, #6]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d102      	bne.n	80032f0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	75fb      	strb	r3, [r7, #23]
    goto error;
 80032ee:	e080      	b.n	80033f2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2203      	movs	r2, #3
 80032f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	68ba      	ldr	r2, [r7, #8]
 8003302:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	88fa      	ldrh	r2, [r7, #6]
 8003308:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	88fa      	ldrh	r2, [r7, #6]
 800330e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2200      	movs	r2, #0
 800332c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003336:	d10f      	bne.n	8003358 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003346:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003356:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800335c:	4a29      	ldr	r2, [pc, #164]	@ (8003404 <HAL_SPI_Transmit_DMA+0x160>)
 800335e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003364:	4a28      	ldr	r2, [pc, #160]	@ (8003408 <HAL_SPI_Transmit_DMA+0x164>)
 8003366:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800336c:	4a27      	ldr	r2, [pc, #156]	@ (800340c <HAL_SPI_Transmit_DMA+0x168>)
 800336e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003374:	2200      	movs	r2, #0
 8003376:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003380:	4619      	mov	r1, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	330c      	adds	r3, #12
 8003388:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800338e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003390:	f7fe fdee 	bl	8001f70 <HAL_DMA_Start_IT>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00c      	beq.n	80033b4 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800339e:	f043 0210 	orr.w	r2, r3, #16
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    goto error;
 80033b2:	e01e      	b.n	80033f2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033be:	2b40      	cmp	r3, #64	@ 0x40
 80033c0:	d007      	beq.n	80033d2 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80033d0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f042 0220 	orr.w	r2, r2, #32
 80033e0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f042 0202 	orr.w	r2, r2, #2
 80033f0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80033fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3718      	adds	r7, #24
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	080034e1 	.word	0x080034e1
 8003408:	08003439 	.word	0x08003439
 800340c:	080034fd 	.word	0x080034fd

08003410 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003444:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003446:	f7fe fba3 	bl	8001b90 <HAL_GetTick>
 800344a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003456:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800345a:	d03b      	beq.n	80034d4 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	685a      	ldr	r2, [r3, #4]
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f022 0220 	bic.w	r2, r2, #32
 800346a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 0202 	bic.w	r2, r2, #2
 800347a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	2164      	movs	r1, #100	@ 0x64
 8003480:	6978      	ldr	r0, [r7, #20]
 8003482:	f000 f8e3 	bl	800364c <SPI_EndRxTxTransaction>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d005      	beq.n	8003498 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003490:	f043 0220 	orr.w	r2, r3, #32
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10a      	bne.n	80034b6 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034a0:	2300      	movs	r3, #0
 80034a2:	60fb      	str	r3, [r7, #12]
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	60fb      	str	r3, [r7, #12]
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	60fb      	str	r3, [r7, #12]
 80034b4:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	2200      	movs	r2, #0
 80034ba:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d003      	beq.n	80034d4 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80034cc:	6978      	ldr	r0, [r7, #20]
 80034ce:	f7ff ffa9 	bl	8003424 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80034d2:	e002      	b.n	80034da <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80034d4:	6978      	ldr	r0, [r7, #20]
 80034d6:	f7fd fa2d 	bl	8000934 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80034da:	3718      	adds	r7, #24
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ec:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f7ff ff8e 	bl	8003410 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80034f4:	bf00      	nop
 80034f6:	3710      	adds	r7, #16
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003508:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	685a      	ldr	r2, [r3, #4]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 0203 	bic.w	r2, r2, #3
 8003518:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800351e:	f043 0210 	orr.w	r2, r3, #16
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	f7ff ff78 	bl	8003424 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003534:	bf00      	nop
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b088      	sub	sp, #32
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	603b      	str	r3, [r7, #0]
 8003548:	4613      	mov	r3, r2
 800354a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800354c:	f7fe fb20 	bl	8001b90 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003554:	1a9b      	subs	r3, r3, r2
 8003556:	683a      	ldr	r2, [r7, #0]
 8003558:	4413      	add	r3, r2
 800355a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800355c:	f7fe fb18 	bl	8001b90 <HAL_GetTick>
 8003560:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003562:	4b39      	ldr	r3, [pc, #228]	@ (8003648 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	015b      	lsls	r3, r3, #5
 8003568:	0d1b      	lsrs	r3, r3, #20
 800356a:	69fa      	ldr	r2, [r7, #28]
 800356c:	fb02 f303 	mul.w	r3, r2, r3
 8003570:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003572:	e054      	b.n	800361e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800357a:	d050      	beq.n	800361e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800357c:	f7fe fb08 	bl	8001b90 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	69fa      	ldr	r2, [r7, #28]
 8003588:	429a      	cmp	r2, r3
 800358a:	d902      	bls.n	8003592 <SPI_WaitFlagStateUntilTimeout+0x56>
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d13d      	bne.n	800360e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80035a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035aa:	d111      	bne.n	80035d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035b4:	d004      	beq.n	80035c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035be:	d107      	bne.n	80035d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035d8:	d10f      	bne.n	80035fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80035e8:	601a      	str	r2, [r3, #0]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80035f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e017      	b.n	800363e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d101      	bne.n	8003618 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003614:	2300      	movs	r3, #0
 8003616:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	3b01      	subs	r3, #1
 800361c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	689a      	ldr	r2, [r3, #8]
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	4013      	ands	r3, r2
 8003628:	68ba      	ldr	r2, [r7, #8]
 800362a:	429a      	cmp	r2, r3
 800362c:	bf0c      	ite	eq
 800362e:	2301      	moveq	r3, #1
 8003630:	2300      	movne	r3, #0
 8003632:	b2db      	uxtb	r3, r3
 8003634:	461a      	mov	r2, r3
 8003636:	79fb      	ldrb	r3, [r7, #7]
 8003638:	429a      	cmp	r2, r3
 800363a:	d19b      	bne.n	8003574 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3720      	adds	r7, #32
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	200000b0 	.word	0x200000b0

0800364c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b088      	sub	sp, #32
 8003650:	af02      	add	r7, sp, #8
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003658:	4b1b      	ldr	r3, [pc, #108]	@ (80036c8 <SPI_EndRxTxTransaction+0x7c>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a1b      	ldr	r2, [pc, #108]	@ (80036cc <SPI_EndRxTxTransaction+0x80>)
 800365e:	fba2 2303 	umull	r2, r3, r2, r3
 8003662:	0d5b      	lsrs	r3, r3, #21
 8003664:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003668:	fb02 f303 	mul.w	r3, r2, r3
 800366c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003676:	d112      	bne.n	800369e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	9300      	str	r3, [sp, #0]
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	2200      	movs	r2, #0
 8003680:	2180      	movs	r1, #128	@ 0x80
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f7ff ff5a 	bl	800353c <SPI_WaitFlagStateUntilTimeout>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d016      	beq.n	80036bc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003692:	f043 0220 	orr.w	r2, r3, #32
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e00f      	b.n	80036be <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00a      	beq.n	80036ba <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	3b01      	subs	r3, #1
 80036a8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036b4:	2b80      	cmp	r3, #128	@ 0x80
 80036b6:	d0f2      	beq.n	800369e <SPI_EndRxTxTransaction+0x52>
 80036b8:	e000      	b.n	80036bc <SPI_EndRxTxTransaction+0x70>
        break;
 80036ba:	bf00      	nop
  }

  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3718      	adds	r7, #24
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	200000b0 	.word	0x200000b0
 80036cc:	165e9f81 	.word	0x165e9f81

080036d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e041      	b.n	8003766 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d106      	bne.n	80036fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f7fe f806 	bl	8001708 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2202      	movs	r2, #2
 8003700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	3304      	adds	r3, #4
 800370c:	4619      	mov	r1, r3
 800370e:	4610      	mov	r0, r2
 8003710:	f000 fcb8 	bl	8004084 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
	...

08003770 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800377e:	b2db      	uxtb	r3, r3
 8003780:	2b01      	cmp	r3, #1
 8003782:	d001      	beq.n	8003788 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e044      	b.n	8003812 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2202      	movs	r2, #2
 800378c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68da      	ldr	r2, [r3, #12]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f042 0201 	orr.w	r2, r2, #1
 800379e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a1e      	ldr	r2, [pc, #120]	@ (8003820 <HAL_TIM_Base_Start_IT+0xb0>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d018      	beq.n	80037dc <HAL_TIM_Base_Start_IT+0x6c>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037b2:	d013      	beq.n	80037dc <HAL_TIM_Base_Start_IT+0x6c>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a1a      	ldr	r2, [pc, #104]	@ (8003824 <HAL_TIM_Base_Start_IT+0xb4>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d00e      	beq.n	80037dc <HAL_TIM_Base_Start_IT+0x6c>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a19      	ldr	r2, [pc, #100]	@ (8003828 <HAL_TIM_Base_Start_IT+0xb8>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d009      	beq.n	80037dc <HAL_TIM_Base_Start_IT+0x6c>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a17      	ldr	r2, [pc, #92]	@ (800382c <HAL_TIM_Base_Start_IT+0xbc>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d004      	beq.n	80037dc <HAL_TIM_Base_Start_IT+0x6c>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a16      	ldr	r2, [pc, #88]	@ (8003830 <HAL_TIM_Base_Start_IT+0xc0>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d111      	bne.n	8003800 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 0307 	and.w	r3, r3, #7
 80037e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2b06      	cmp	r3, #6
 80037ec:	d010      	beq.n	8003810 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f042 0201 	orr.w	r2, r2, #1
 80037fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037fe:	e007      	b.n	8003810 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f042 0201 	orr.w	r2, r2, #1
 800380e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3714      	adds	r7, #20
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	40010000 	.word	0x40010000
 8003824:	40000400 	.word	0x40000400
 8003828:	40000800 	.word	0x40000800
 800382c:	40000c00 	.word	0x40000c00
 8003830:	40014000 	.word	0x40014000

08003834 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e041      	b.n	80038ca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d106      	bne.n	8003860 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f839 	bl	80038d2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2202      	movs	r2, #2
 8003864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	3304      	adds	r3, #4
 8003870:	4619      	mov	r1, r3
 8003872:	4610      	mov	r0, r2
 8003874:	f000 fc06 	bl	8004084 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80038d2:	b480      	push	{r7}
 80038d4:	b083      	sub	sp, #12
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80038da:	bf00      	nop
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
	...

080038e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d109      	bne.n	800390c <HAL_TIM_PWM_Start+0x24>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2b01      	cmp	r3, #1
 8003902:	bf14      	ite	ne
 8003904:	2301      	movne	r3, #1
 8003906:	2300      	moveq	r3, #0
 8003908:	b2db      	uxtb	r3, r3
 800390a:	e022      	b.n	8003952 <HAL_TIM_PWM_Start+0x6a>
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	2b04      	cmp	r3, #4
 8003910:	d109      	bne.n	8003926 <HAL_TIM_PWM_Start+0x3e>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b01      	cmp	r3, #1
 800391c:	bf14      	ite	ne
 800391e:	2301      	movne	r3, #1
 8003920:	2300      	moveq	r3, #0
 8003922:	b2db      	uxtb	r3, r3
 8003924:	e015      	b.n	8003952 <HAL_TIM_PWM_Start+0x6a>
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	2b08      	cmp	r3, #8
 800392a:	d109      	bne.n	8003940 <HAL_TIM_PWM_Start+0x58>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003932:	b2db      	uxtb	r3, r3
 8003934:	2b01      	cmp	r3, #1
 8003936:	bf14      	ite	ne
 8003938:	2301      	movne	r3, #1
 800393a:	2300      	moveq	r3, #0
 800393c:	b2db      	uxtb	r3, r3
 800393e:	e008      	b.n	8003952 <HAL_TIM_PWM_Start+0x6a>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003946:	b2db      	uxtb	r3, r3
 8003948:	2b01      	cmp	r3, #1
 800394a:	bf14      	ite	ne
 800394c:	2301      	movne	r3, #1
 800394e:	2300      	moveq	r3, #0
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e068      	b.n	8003a2c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d104      	bne.n	800396a <HAL_TIM_PWM_Start+0x82>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2202      	movs	r2, #2
 8003964:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003968:	e013      	b.n	8003992 <HAL_TIM_PWM_Start+0xaa>
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	2b04      	cmp	r3, #4
 800396e:	d104      	bne.n	800397a <HAL_TIM_PWM_Start+0x92>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2202      	movs	r2, #2
 8003974:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003978:	e00b      	b.n	8003992 <HAL_TIM_PWM_Start+0xaa>
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	2b08      	cmp	r3, #8
 800397e:	d104      	bne.n	800398a <HAL_TIM_PWM_Start+0xa2>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2202      	movs	r2, #2
 8003984:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003988:	e003      	b.n	8003992 <HAL_TIM_PWM_Start+0xaa>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2202      	movs	r2, #2
 800398e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2201      	movs	r2, #1
 8003998:	6839      	ldr	r1, [r7, #0]
 800399a:	4618      	mov	r0, r3
 800399c:	f000 fe18 	bl	80045d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a23      	ldr	r2, [pc, #140]	@ (8003a34 <HAL_TIM_PWM_Start+0x14c>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d107      	bne.n	80039ba <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80039b8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a1d      	ldr	r2, [pc, #116]	@ (8003a34 <HAL_TIM_PWM_Start+0x14c>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d018      	beq.n	80039f6 <HAL_TIM_PWM_Start+0x10e>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039cc:	d013      	beq.n	80039f6 <HAL_TIM_PWM_Start+0x10e>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a19      	ldr	r2, [pc, #100]	@ (8003a38 <HAL_TIM_PWM_Start+0x150>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d00e      	beq.n	80039f6 <HAL_TIM_PWM_Start+0x10e>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a17      	ldr	r2, [pc, #92]	@ (8003a3c <HAL_TIM_PWM_Start+0x154>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d009      	beq.n	80039f6 <HAL_TIM_PWM_Start+0x10e>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a16      	ldr	r2, [pc, #88]	@ (8003a40 <HAL_TIM_PWM_Start+0x158>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d004      	beq.n	80039f6 <HAL_TIM_PWM_Start+0x10e>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a14      	ldr	r2, [pc, #80]	@ (8003a44 <HAL_TIM_PWM_Start+0x15c>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d111      	bne.n	8003a1a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f003 0307 	and.w	r3, r3, #7
 8003a00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2b06      	cmp	r3, #6
 8003a06:	d010      	beq.n	8003a2a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f042 0201 	orr.w	r2, r2, #1
 8003a16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a18:	e007      	b.n	8003a2a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f042 0201 	orr.w	r2, r2, #1
 8003a28:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	40010000 	.word	0x40010000
 8003a38:	40000400 	.word	0x40000400
 8003a3c:	40000800 	.word	0x40000800
 8003a40:	40000c00 	.word	0x40000c00
 8003a44:	40014000 	.word	0x40014000

08003a48 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2200      	movs	r2, #0
 8003a58:	6839      	ldr	r1, [r7, #0]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f000 fdb8 	bl	80045d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a29      	ldr	r2, [pc, #164]	@ (8003b0c <HAL_TIM_PWM_Stop+0xc4>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d117      	bne.n	8003a9a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	6a1a      	ldr	r2, [r3, #32]
 8003a70:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003a74:	4013      	ands	r3, r2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10f      	bne.n	8003a9a <HAL_TIM_PWM_Stop+0x52>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	6a1a      	ldr	r2, [r3, #32]
 8003a80:	f240 4344 	movw	r3, #1092	@ 0x444
 8003a84:	4013      	ands	r3, r2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d107      	bne.n	8003a9a <HAL_TIM_PWM_Stop+0x52>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a98:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	6a1a      	ldr	r2, [r3, #32]
 8003aa0:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10f      	bne.n	8003aca <HAL_TIM_PWM_Stop+0x82>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	6a1a      	ldr	r2, [r3, #32]
 8003ab0:	f240 4344 	movw	r3, #1092	@ 0x444
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d107      	bne.n	8003aca <HAL_TIM_PWM_Stop+0x82>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f022 0201 	bic.w	r2, r2, #1
 8003ac8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d104      	bne.n	8003ada <HAL_TIM_PWM_Stop+0x92>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ad8:	e013      	b.n	8003b02 <HAL_TIM_PWM_Stop+0xba>
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	2b04      	cmp	r3, #4
 8003ade:	d104      	bne.n	8003aea <HAL_TIM_PWM_Stop+0xa2>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ae8:	e00b      	b.n	8003b02 <HAL_TIM_PWM_Stop+0xba>
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	2b08      	cmp	r3, #8
 8003aee:	d104      	bne.n	8003afa <HAL_TIM_PWM_Stop+0xb2>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003af8:	e003      	b.n	8003b02 <HAL_TIM_PWM_Stop+0xba>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2201      	movs	r2, #1
 8003afe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3708      	adds	r7, #8
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	40010000 	.word	0x40010000

08003b10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d122      	bne.n	8003b6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	f003 0302 	and.w	r3, r3, #2
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d11b      	bne.n	8003b6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f06f 0202 	mvn.w	r2, #2
 8003b3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	f003 0303 	and.w	r3, r3, #3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 fa77 	bl	8004046 <HAL_TIM_IC_CaptureCallback>
 8003b58:	e005      	b.n	8003b66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 fa69 	bl	8004032 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 fa7a 	bl	800405a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	f003 0304 	and.w	r3, r3, #4
 8003b76:	2b04      	cmp	r3, #4
 8003b78:	d122      	bne.n	8003bc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	f003 0304 	and.w	r3, r3, #4
 8003b84:	2b04      	cmp	r3, #4
 8003b86:	d11b      	bne.n	8003bc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f06f 0204 	mvn.w	r2, #4
 8003b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2202      	movs	r2, #2
 8003b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d003      	beq.n	8003bae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 fa4d 	bl	8004046 <HAL_TIM_IC_CaptureCallback>
 8003bac:	e005      	b.n	8003bba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 fa3f 	bl	8004032 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 fa50 	bl	800405a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	f003 0308 	and.w	r3, r3, #8
 8003bca:	2b08      	cmp	r3, #8
 8003bcc:	d122      	bne.n	8003c14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	f003 0308 	and.w	r3, r3, #8
 8003bd8:	2b08      	cmp	r3, #8
 8003bda:	d11b      	bne.n	8003c14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f06f 0208 	mvn.w	r2, #8
 8003be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2204      	movs	r2, #4
 8003bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	f003 0303 	and.w	r3, r3, #3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d003      	beq.n	8003c02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 fa23 	bl	8004046 <HAL_TIM_IC_CaptureCallback>
 8003c00:	e005      	b.n	8003c0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 fa15 	bl	8004032 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 fa26 	bl	800405a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	f003 0310 	and.w	r3, r3, #16
 8003c1e:	2b10      	cmp	r3, #16
 8003c20:	d122      	bne.n	8003c68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	f003 0310 	and.w	r3, r3, #16
 8003c2c:	2b10      	cmp	r3, #16
 8003c2e:	d11b      	bne.n	8003c68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f06f 0210 	mvn.w	r2, #16
 8003c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2208      	movs	r2, #8
 8003c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d003      	beq.n	8003c56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f9f9 	bl	8004046 <HAL_TIM_IC_CaptureCallback>
 8003c54:	e005      	b.n	8003c62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f9eb 	bl	8004032 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 f9fc 	bl	800405a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d10e      	bne.n	8003c94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d107      	bne.n	8003c94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f06f 0201 	mvn.w	r2, #1
 8003c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f7fc fe1a 	bl	80008c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c9e:	2b80      	cmp	r3, #128	@ 0x80
 8003ca0:	d10e      	bne.n	8003cc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cac:	2b80      	cmp	r3, #128	@ 0x80
 8003cae:	d107      	bne.n	8003cc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 fd78 	bl	80047b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cca:	2b40      	cmp	r3, #64	@ 0x40
 8003ccc:	d10e      	bne.n	8003cec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cd8:	2b40      	cmp	r3, #64	@ 0x40
 8003cda:	d107      	bne.n	8003cec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 f9c1 	bl	800406e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	f003 0320 	and.w	r3, r3, #32
 8003cf6:	2b20      	cmp	r3, #32
 8003cf8:	d10e      	bne.n	8003d18 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	f003 0320 	and.w	r3, r3, #32
 8003d04:	2b20      	cmp	r3, #32
 8003d06:	d107      	bne.n	8003d18 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f06f 0220 	mvn.w	r2, #32
 8003d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 fd42 	bl	800479c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d18:	bf00      	nop
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b086      	sub	sp, #24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d101      	bne.n	8003d3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	e0ae      	b.n	8003e9c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2b0c      	cmp	r3, #12
 8003d4a:	f200 809f 	bhi.w	8003e8c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003d4e:	a201      	add	r2, pc, #4	@ (adr r2, 8003d54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d54:	08003d89 	.word	0x08003d89
 8003d58:	08003e8d 	.word	0x08003e8d
 8003d5c:	08003e8d 	.word	0x08003e8d
 8003d60:	08003e8d 	.word	0x08003e8d
 8003d64:	08003dc9 	.word	0x08003dc9
 8003d68:	08003e8d 	.word	0x08003e8d
 8003d6c:	08003e8d 	.word	0x08003e8d
 8003d70:	08003e8d 	.word	0x08003e8d
 8003d74:	08003e0b 	.word	0x08003e0b
 8003d78:	08003e8d 	.word	0x08003e8d
 8003d7c:	08003e8d 	.word	0x08003e8d
 8003d80:	08003e8d 	.word	0x08003e8d
 8003d84:	08003e4b 	.word	0x08003e4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68b9      	ldr	r1, [r7, #8]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 f9f8 	bl	8004184 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	699a      	ldr	r2, [r3, #24]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f042 0208 	orr.w	r2, r2, #8
 8003da2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	699a      	ldr	r2, [r3, #24]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f022 0204 	bic.w	r2, r2, #4
 8003db2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6999      	ldr	r1, [r3, #24]
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	691a      	ldr	r2, [r3, #16]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	619a      	str	r2, [r3, #24]
      break;
 8003dc6:	e064      	b.n	8003e92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68b9      	ldr	r1, [r7, #8]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f000 fa3e 	bl	8004250 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	699a      	ldr	r2, [r3, #24]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003de2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	699a      	ldr	r2, [r3, #24]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003df2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6999      	ldr	r1, [r3, #24]
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	021a      	lsls	r2, r3, #8
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	430a      	orrs	r2, r1
 8003e06:	619a      	str	r2, [r3, #24]
      break;
 8003e08:	e043      	b.n	8003e92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68b9      	ldr	r1, [r7, #8]
 8003e10:	4618      	mov	r0, r3
 8003e12:	f000 fa89 	bl	8004328 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	69da      	ldr	r2, [r3, #28]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f042 0208 	orr.w	r2, r2, #8
 8003e24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	69da      	ldr	r2, [r3, #28]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f022 0204 	bic.w	r2, r2, #4
 8003e34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	69d9      	ldr	r1, [r3, #28]
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	691a      	ldr	r2, [r3, #16]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	430a      	orrs	r2, r1
 8003e46:	61da      	str	r2, [r3, #28]
      break;
 8003e48:	e023      	b.n	8003e92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68b9      	ldr	r1, [r7, #8]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 fad3 	bl	80043fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	69da      	ldr	r2, [r3, #28]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	69da      	ldr	r2, [r3, #28]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	69d9      	ldr	r1, [r3, #28]
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	021a      	lsls	r2, r3, #8
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	430a      	orrs	r2, r1
 8003e88:	61da      	str	r2, [r3, #28]
      break;
 8003e8a:	e002      	b.n	8003e92 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	75fb      	strb	r3, [r7, #23]
      break;
 8003e90:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3718      	adds	r7, #24
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d101      	bne.n	8003ec0 <HAL_TIM_ConfigClockSource+0x1c>
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	e0b4      	b.n	800402a <HAL_TIM_ConfigClockSource+0x186>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2202      	movs	r2, #2
 8003ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003ede:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ee6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68ba      	ldr	r2, [r7, #8]
 8003eee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ef8:	d03e      	beq.n	8003f78 <HAL_TIM_ConfigClockSource+0xd4>
 8003efa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003efe:	f200 8087 	bhi.w	8004010 <HAL_TIM_ConfigClockSource+0x16c>
 8003f02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f06:	f000 8086 	beq.w	8004016 <HAL_TIM_ConfigClockSource+0x172>
 8003f0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f0e:	d87f      	bhi.n	8004010 <HAL_TIM_ConfigClockSource+0x16c>
 8003f10:	2b70      	cmp	r3, #112	@ 0x70
 8003f12:	d01a      	beq.n	8003f4a <HAL_TIM_ConfigClockSource+0xa6>
 8003f14:	2b70      	cmp	r3, #112	@ 0x70
 8003f16:	d87b      	bhi.n	8004010 <HAL_TIM_ConfigClockSource+0x16c>
 8003f18:	2b60      	cmp	r3, #96	@ 0x60
 8003f1a:	d050      	beq.n	8003fbe <HAL_TIM_ConfigClockSource+0x11a>
 8003f1c:	2b60      	cmp	r3, #96	@ 0x60
 8003f1e:	d877      	bhi.n	8004010 <HAL_TIM_ConfigClockSource+0x16c>
 8003f20:	2b50      	cmp	r3, #80	@ 0x50
 8003f22:	d03c      	beq.n	8003f9e <HAL_TIM_ConfigClockSource+0xfa>
 8003f24:	2b50      	cmp	r3, #80	@ 0x50
 8003f26:	d873      	bhi.n	8004010 <HAL_TIM_ConfigClockSource+0x16c>
 8003f28:	2b40      	cmp	r3, #64	@ 0x40
 8003f2a:	d058      	beq.n	8003fde <HAL_TIM_ConfigClockSource+0x13a>
 8003f2c:	2b40      	cmp	r3, #64	@ 0x40
 8003f2e:	d86f      	bhi.n	8004010 <HAL_TIM_ConfigClockSource+0x16c>
 8003f30:	2b30      	cmp	r3, #48	@ 0x30
 8003f32:	d064      	beq.n	8003ffe <HAL_TIM_ConfigClockSource+0x15a>
 8003f34:	2b30      	cmp	r3, #48	@ 0x30
 8003f36:	d86b      	bhi.n	8004010 <HAL_TIM_ConfigClockSource+0x16c>
 8003f38:	2b20      	cmp	r3, #32
 8003f3a:	d060      	beq.n	8003ffe <HAL_TIM_ConfigClockSource+0x15a>
 8003f3c:	2b20      	cmp	r3, #32
 8003f3e:	d867      	bhi.n	8004010 <HAL_TIM_ConfigClockSource+0x16c>
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d05c      	beq.n	8003ffe <HAL_TIM_ConfigClockSource+0x15a>
 8003f44:	2b10      	cmp	r3, #16
 8003f46:	d05a      	beq.n	8003ffe <HAL_TIM_ConfigClockSource+0x15a>
 8003f48:	e062      	b.n	8004010 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6818      	ldr	r0, [r3, #0]
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	6899      	ldr	r1, [r3, #8]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	685a      	ldr	r2, [r3, #4]
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	f000 fb19 	bl	8004590 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003f6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68ba      	ldr	r2, [r7, #8]
 8003f74:	609a      	str	r2, [r3, #8]
      break;
 8003f76:	e04f      	b.n	8004018 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6818      	ldr	r0, [r3, #0]
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	6899      	ldr	r1, [r3, #8]
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	685a      	ldr	r2, [r3, #4]
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	f000 fb02 	bl	8004590 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689a      	ldr	r2, [r3, #8]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f9a:	609a      	str	r2, [r3, #8]
      break;
 8003f9c:	e03c      	b.n	8004018 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6818      	ldr	r0, [r3, #0]
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	6859      	ldr	r1, [r3, #4]
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	461a      	mov	r2, r3
 8003fac:	f000 fa76 	bl	800449c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2150      	movs	r1, #80	@ 0x50
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f000 facf 	bl	800455a <TIM_ITRx_SetConfig>
      break;
 8003fbc:	e02c      	b.n	8004018 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6818      	ldr	r0, [r3, #0]
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	6859      	ldr	r1, [r3, #4]
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	f000 fa95 	bl	80044fa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2160      	movs	r1, #96	@ 0x60
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f000 fabf 	bl	800455a <TIM_ITRx_SetConfig>
      break;
 8003fdc:	e01c      	b.n	8004018 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6818      	ldr	r0, [r3, #0]
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	6859      	ldr	r1, [r3, #4]
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	461a      	mov	r2, r3
 8003fec:	f000 fa56 	bl	800449c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2140      	movs	r1, #64	@ 0x40
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 faaf 	bl	800455a <TIM_ITRx_SetConfig>
      break;
 8003ffc:	e00c      	b.n	8004018 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4619      	mov	r1, r3
 8004008:	4610      	mov	r0, r2
 800400a:	f000 faa6 	bl	800455a <TIM_ITRx_SetConfig>
      break;
 800400e:	e003      	b.n	8004018 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	73fb      	strb	r3, [r7, #15]
      break;
 8004014:	e000      	b.n	8004018 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004016:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004028:	7bfb      	ldrb	r3, [r7, #15]
}
 800402a:	4618      	mov	r0, r3
 800402c:	3710      	adds	r7, #16
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004032:	b480      	push	{r7}
 8004034:	b083      	sub	sp, #12
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800403a:	bf00      	nop
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004046:	b480      	push	{r7}
 8004048:	b083      	sub	sp, #12
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800404e:	bf00      	nop
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr

0800405a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800405a:	b480      	push	{r7}
 800405c:	b083      	sub	sp, #12
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004062:	bf00      	nop
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr

0800406e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800406e:	b480      	push	{r7}
 8004070:	b083      	sub	sp, #12
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004076:	bf00      	nop
 8004078:	370c      	adds	r7, #12
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
	...

08004084 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a34      	ldr	r2, [pc, #208]	@ (8004168 <TIM_Base_SetConfig+0xe4>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d00f      	beq.n	80040bc <TIM_Base_SetConfig+0x38>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040a2:	d00b      	beq.n	80040bc <TIM_Base_SetConfig+0x38>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a31      	ldr	r2, [pc, #196]	@ (800416c <TIM_Base_SetConfig+0xe8>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d007      	beq.n	80040bc <TIM_Base_SetConfig+0x38>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a30      	ldr	r2, [pc, #192]	@ (8004170 <TIM_Base_SetConfig+0xec>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d003      	beq.n	80040bc <TIM_Base_SetConfig+0x38>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a2f      	ldr	r2, [pc, #188]	@ (8004174 <TIM_Base_SetConfig+0xf0>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d108      	bne.n	80040ce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a25      	ldr	r2, [pc, #148]	@ (8004168 <TIM_Base_SetConfig+0xe4>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d01b      	beq.n	800410e <TIM_Base_SetConfig+0x8a>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040dc:	d017      	beq.n	800410e <TIM_Base_SetConfig+0x8a>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a22      	ldr	r2, [pc, #136]	@ (800416c <TIM_Base_SetConfig+0xe8>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d013      	beq.n	800410e <TIM_Base_SetConfig+0x8a>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a21      	ldr	r2, [pc, #132]	@ (8004170 <TIM_Base_SetConfig+0xec>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d00f      	beq.n	800410e <TIM_Base_SetConfig+0x8a>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a20      	ldr	r2, [pc, #128]	@ (8004174 <TIM_Base_SetConfig+0xf0>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d00b      	beq.n	800410e <TIM_Base_SetConfig+0x8a>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a1f      	ldr	r2, [pc, #124]	@ (8004178 <TIM_Base_SetConfig+0xf4>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d007      	beq.n	800410e <TIM_Base_SetConfig+0x8a>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a1e      	ldr	r2, [pc, #120]	@ (800417c <TIM_Base_SetConfig+0xf8>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d003      	beq.n	800410e <TIM_Base_SetConfig+0x8a>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a1d      	ldr	r2, [pc, #116]	@ (8004180 <TIM_Base_SetConfig+0xfc>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d108      	bne.n	8004120 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004114:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	4313      	orrs	r3, r2
 800411e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	4313      	orrs	r3, r2
 800412c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	689a      	ldr	r2, [r3, #8]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a08      	ldr	r2, [pc, #32]	@ (8004168 <TIM_Base_SetConfig+0xe4>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d103      	bne.n	8004154 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	691a      	ldr	r2, [r3, #16]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	615a      	str	r2, [r3, #20]
}
 800415a:	bf00      	nop
 800415c:	3714      	adds	r7, #20
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	40010000 	.word	0x40010000
 800416c:	40000400 	.word	0x40000400
 8004170:	40000800 	.word	0x40000800
 8004174:	40000c00 	.word	0x40000c00
 8004178:	40014000 	.word	0x40014000
 800417c:	40014400 	.word	0x40014400
 8004180:	40014800 	.word	0x40014800

08004184 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004184:	b480      	push	{r7}
 8004186:	b087      	sub	sp, #28
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a1b      	ldr	r3, [r3, #32]
 8004192:	f023 0201 	bic.w	r2, r3, #1
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f023 0303 	bic.w	r3, r3, #3
 80041ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	f023 0302 	bic.w	r3, r3, #2
 80041cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a1c      	ldr	r2, [pc, #112]	@ (800424c <TIM_OC1_SetConfig+0xc8>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d10c      	bne.n	80041fa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	f023 0308 	bic.w	r3, r3, #8
 80041e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	697a      	ldr	r2, [r7, #20]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	f023 0304 	bic.w	r3, r3, #4
 80041f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a13      	ldr	r2, [pc, #76]	@ (800424c <TIM_OC1_SetConfig+0xc8>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d111      	bne.n	8004226 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004208:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004210:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	4313      	orrs	r3, r2
 800421a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	4313      	orrs	r3, r2
 8004224:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	693a      	ldr	r2, [r7, #16]
 800422a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	685a      	ldr	r2, [r3, #4]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	621a      	str	r2, [r3, #32]
}
 8004240:	bf00      	nop
 8004242:	371c      	adds	r7, #28
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	40010000 	.word	0x40010000

08004250 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004250:	b480      	push	{r7}
 8004252:	b087      	sub	sp, #28
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	f023 0210 	bic.w	r2, r3, #16
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800427e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004286:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	021b      	lsls	r3, r3, #8
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	4313      	orrs	r3, r2
 8004292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	f023 0320 	bic.w	r3, r3, #32
 800429a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	011b      	lsls	r3, r3, #4
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a1e      	ldr	r2, [pc, #120]	@ (8004324 <TIM_OC2_SetConfig+0xd4>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d10d      	bne.n	80042cc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	011b      	lsls	r3, r3, #4
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a15      	ldr	r2, [pc, #84]	@ (8004324 <TIM_OC2_SetConfig+0xd4>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d113      	bne.n	80042fc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80042da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80042e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	695b      	ldr	r3, [r3, #20]
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	685a      	ldr	r2, [r3, #4]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	697a      	ldr	r2, [r7, #20]
 8004314:	621a      	str	r2, [r3, #32]
}
 8004316:	bf00      	nop
 8004318:	371c      	adds	r7, #28
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	40010000 	.word	0x40010000

08004328 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004328:	b480      	push	{r7}
 800432a:	b087      	sub	sp, #28
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	69db      	ldr	r3, [r3, #28]
 800434e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f023 0303 	bic.w	r3, r3, #3
 800435e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	4313      	orrs	r3, r2
 8004368:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004370:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	021b      	lsls	r3, r3, #8
 8004378:	697a      	ldr	r2, [r7, #20]
 800437a:	4313      	orrs	r3, r2
 800437c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a1d      	ldr	r2, [pc, #116]	@ (80043f8 <TIM_OC3_SetConfig+0xd0>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d10d      	bne.n	80043a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800438c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	021b      	lsls	r3, r3, #8
 8004394:	697a      	ldr	r2, [r7, #20]
 8004396:	4313      	orrs	r3, r2
 8004398:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80043a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a14      	ldr	r2, [pc, #80]	@ (80043f8 <TIM_OC3_SetConfig+0xd0>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d113      	bne.n	80043d2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80043b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80043b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	011b      	lsls	r3, r3, #4
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	011b      	lsls	r3, r3, #4
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	685a      	ldr	r2, [r3, #4]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	621a      	str	r2, [r3, #32]
}
 80043ec:	bf00      	nop
 80043ee:	371c      	adds	r7, #28
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr
 80043f8:	40010000 	.word	0x40010000

080043fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b087      	sub	sp, #28
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	69db      	ldr	r3, [r3, #28]
 8004422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800442a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004432:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	021b      	lsls	r3, r3, #8
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	4313      	orrs	r3, r2
 800443e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004446:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	031b      	lsls	r3, r3, #12
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	4313      	orrs	r3, r2
 8004452:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a10      	ldr	r2, [pc, #64]	@ (8004498 <TIM_OC4_SetConfig+0x9c>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d109      	bne.n	8004470 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004462:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	695b      	ldr	r3, [r3, #20]
 8004468:	019b      	lsls	r3, r3, #6
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	4313      	orrs	r3, r2
 800446e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	621a      	str	r2, [r3, #32]
}
 800448a:	bf00      	nop
 800448c:	371c      	adds	r7, #28
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	40010000 	.word	0x40010000

0800449c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800449c:	b480      	push	{r7}
 800449e:	b087      	sub	sp, #28
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6a1b      	ldr	r3, [r3, #32]
 80044ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	f023 0201 	bic.w	r2, r3, #1
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80044c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	011b      	lsls	r3, r3, #4
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	f023 030a 	bic.w	r3, r3, #10
 80044d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	4313      	orrs	r3, r2
 80044e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	621a      	str	r2, [r3, #32]
}
 80044ee:	bf00      	nop
 80044f0:	371c      	adds	r7, #28
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr

080044fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044fa:	b480      	push	{r7}
 80044fc:	b087      	sub	sp, #28
 80044fe:	af00      	add	r7, sp, #0
 8004500:	60f8      	str	r0, [r7, #12]
 8004502:	60b9      	str	r1, [r7, #8]
 8004504:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	f023 0210 	bic.w	r2, r3, #16
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004524:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	031b      	lsls	r3, r3, #12
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	4313      	orrs	r3, r2
 800452e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004536:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	011b      	lsls	r3, r3, #4
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	4313      	orrs	r3, r2
 8004540:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	697a      	ldr	r2, [r7, #20]
 8004546:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	621a      	str	r2, [r3, #32]
}
 800454e:	bf00      	nop
 8004550:	371c      	adds	r7, #28
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr

0800455a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800455a:	b480      	push	{r7}
 800455c:	b085      	sub	sp, #20
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
 8004562:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004570:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004572:	683a      	ldr	r2, [r7, #0]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	4313      	orrs	r3, r2
 8004578:	f043 0307 	orr.w	r3, r3, #7
 800457c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	609a      	str	r2, [r3, #8]
}
 8004584:	bf00      	nop
 8004586:	3714      	adds	r7, #20
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004590:	b480      	push	{r7}
 8004592:	b087      	sub	sp, #28
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	607a      	str	r2, [r7, #4]
 800459c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80045aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	021a      	lsls	r2, r3, #8
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	431a      	orrs	r2, r3
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	697a      	ldr	r2, [r7, #20]
 80045c2:	609a      	str	r2, [r3, #8]
}
 80045c4:	bf00      	nop
 80045c6:	371c      	adds	r7, #28
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b087      	sub	sp, #28
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	f003 031f 	and.w	r3, r3, #31
 80045e2:	2201      	movs	r2, #1
 80045e4:	fa02 f303 	lsl.w	r3, r2, r3
 80045e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6a1a      	ldr	r2, [r3, #32]
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	43db      	mvns	r3, r3
 80045f2:	401a      	ands	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6a1a      	ldr	r2, [r3, #32]
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	f003 031f 	and.w	r3, r3, #31
 8004602:	6879      	ldr	r1, [r7, #4]
 8004604:	fa01 f303 	lsl.w	r3, r1, r3
 8004608:	431a      	orrs	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	621a      	str	r2, [r3, #32]
}
 800460e:	bf00      	nop
 8004610:	371c      	adds	r7, #28
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
	...

0800461c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800462c:	2b01      	cmp	r3, #1
 800462e:	d101      	bne.n	8004634 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004630:	2302      	movs	r3, #2
 8004632:	e050      	b.n	80046d6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2202      	movs	r2, #2
 8004640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800465a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	4313      	orrs	r3, r2
 8004664:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a1c      	ldr	r2, [pc, #112]	@ (80046e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d018      	beq.n	80046aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004680:	d013      	beq.n	80046aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a18      	ldr	r2, [pc, #96]	@ (80046e8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d00e      	beq.n	80046aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a16      	ldr	r2, [pc, #88]	@ (80046ec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d009      	beq.n	80046aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a15      	ldr	r2, [pc, #84]	@ (80046f0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d004      	beq.n	80046aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a13      	ldr	r2, [pc, #76]	@ (80046f4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d10c      	bne.n	80046c4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	68ba      	ldr	r2, [r7, #8]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68ba      	ldr	r2, [r7, #8]
 80046c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	40010000 	.word	0x40010000
 80046e8:	40000400 	.word	0x40000400
 80046ec:	40000800 	.word	0x40000800
 80046f0:	40000c00 	.word	0x40000c00
 80046f4:	40014000 	.word	0x40014000

080046f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004702:	2300      	movs	r3, #0
 8004704:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800470c:	2b01      	cmp	r3, #1
 800470e:	d101      	bne.n	8004714 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004710:	2302      	movs	r3, #2
 8004712:	e03d      	b.n	8004790 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	4313      	orrs	r3, r2
 8004728:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	4313      	orrs	r3, r2
 8004736:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	4313      	orrs	r3, r2
 8004744:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4313      	orrs	r3, r2
 8004752:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	4313      	orrs	r3, r2
 8004760:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	695b      	ldr	r3, [r3, #20]
 800476c:	4313      	orrs	r3, r2
 800476e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	69db      	ldr	r3, [r3, #28]
 800477a:	4313      	orrs	r3, r2
 800477c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3714      	adds	r7, #20
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e03f      	b.n	8004856 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d106      	bne.n	80047f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f7fd f850 	bl	8001890 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2224      	movs	r2, #36	@ 0x24
 80047f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68da      	ldr	r2, [r3, #12]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004806:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f000 f929 	bl	8004a60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	691a      	ldr	r2, [r3, #16]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800481c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	695a      	ldr	r2, [r3, #20]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800482c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68da      	ldr	r2, [r3, #12]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800483c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2220      	movs	r2, #32
 8004848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2220      	movs	r2, #32
 8004850:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3708      	adds	r7, #8
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}

0800485e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800485e:	b580      	push	{r7, lr}
 8004860:	b08a      	sub	sp, #40	@ 0x28
 8004862:	af02      	add	r7, sp, #8
 8004864:	60f8      	str	r0, [r7, #12]
 8004866:	60b9      	str	r1, [r7, #8]
 8004868:	603b      	str	r3, [r7, #0]
 800486a:	4613      	mov	r3, r2
 800486c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800486e:	2300      	movs	r3, #0
 8004870:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004878:	b2db      	uxtb	r3, r3
 800487a:	2b20      	cmp	r3, #32
 800487c:	d17c      	bne.n	8004978 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d002      	beq.n	800488a <HAL_UART_Transmit+0x2c>
 8004884:	88fb      	ldrh	r3, [r7, #6]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e075      	b.n	800497a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004894:	2b01      	cmp	r3, #1
 8004896:	d101      	bne.n	800489c <HAL_UART_Transmit+0x3e>
 8004898:	2302      	movs	r3, #2
 800489a:	e06e      	b.n	800497a <HAL_UART_Transmit+0x11c>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2221      	movs	r2, #33	@ 0x21
 80048ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048b2:	f7fd f96d 	bl	8001b90 <HAL_GetTick>
 80048b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	88fa      	ldrh	r2, [r7, #6]
 80048bc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	88fa      	ldrh	r2, [r7, #6]
 80048c2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048cc:	d108      	bne.n	80048e0 <HAL_UART_Transmit+0x82>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d104      	bne.n	80048e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80048d6:	2300      	movs	r3, #0
 80048d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	61bb      	str	r3, [r7, #24]
 80048de:	e003      	b.n	80048e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048e4:	2300      	movs	r3, #0
 80048e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 80048f0:	e02a      	b.n	8004948 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	9300      	str	r3, [sp, #0]
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	2200      	movs	r2, #0
 80048fa:	2180      	movs	r1, #128	@ 0x80
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f000 f840 	bl	8004982 <UART_WaitOnFlagUntilTimeout>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d001      	beq.n	800490c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e036      	b.n	800497a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d10b      	bne.n	800492a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	881b      	ldrh	r3, [r3, #0]
 8004916:	461a      	mov	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004920:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	3302      	adds	r3, #2
 8004926:	61bb      	str	r3, [r7, #24]
 8004928:	e007      	b.n	800493a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	781a      	ldrb	r2, [r3, #0]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	3301      	adds	r3, #1
 8004938:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800493e:	b29b      	uxth	r3, r3
 8004940:	3b01      	subs	r3, #1
 8004942:	b29a      	uxth	r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800494c:	b29b      	uxth	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1cf      	bne.n	80048f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	9300      	str	r3, [sp, #0]
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	2200      	movs	r2, #0
 800495a:	2140      	movs	r1, #64	@ 0x40
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f000 f810 	bl	8004982 <UART_WaitOnFlagUntilTimeout>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d001      	beq.n	800496c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e006      	b.n	800497a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2220      	movs	r2, #32
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004974:	2300      	movs	r3, #0
 8004976:	e000      	b.n	800497a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004978:	2302      	movs	r3, #2
  }
}
 800497a:	4618      	mov	r0, r3
 800497c:	3720      	adds	r7, #32
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b090      	sub	sp, #64	@ 0x40
 8004986:	af00      	add	r7, sp, #0
 8004988:	60f8      	str	r0, [r7, #12]
 800498a:	60b9      	str	r1, [r7, #8]
 800498c:	603b      	str	r3, [r7, #0]
 800498e:	4613      	mov	r3, r2
 8004990:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004992:	e050      	b.n	8004a36 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004994:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800499a:	d04c      	beq.n	8004a36 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800499c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d007      	beq.n	80049b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80049a2:	f7fd f8f5 	bl	8001b90 <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d241      	bcs.n	8004a36 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	330c      	adds	r3, #12
 80049b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049bc:	e853 3f00 	ldrex	r3, [r3]
 80049c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80049c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80049c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	330c      	adds	r3, #12
 80049d0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80049d2:	637a      	str	r2, [r7, #52]	@ 0x34
 80049d4:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80049d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80049da:	e841 2300 	strex	r3, r2, [r1]
 80049de:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80049e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1e5      	bne.n	80049b2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	3314      	adds	r3, #20
 80049ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	e853 3f00 	ldrex	r3, [r3]
 80049f4:	613b      	str	r3, [r7, #16]
   return(result);
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	f023 0301 	bic.w	r3, r3, #1
 80049fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	3314      	adds	r3, #20
 8004a04:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004a06:	623a      	str	r2, [r7, #32]
 8004a08:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0a:	69f9      	ldr	r1, [r7, #28]
 8004a0c:	6a3a      	ldr	r2, [r7, #32]
 8004a0e:	e841 2300 	strex	r3, r2, [r1]
 8004a12:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1e5      	bne.n	80049e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2220      	movs	r2, #32
 8004a1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2220      	movs	r2, #32
 8004a26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e00f      	b.n	8004a56 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	4013      	ands	r3, r2
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	bf0c      	ite	eq
 8004a46:	2301      	moveq	r3, #1
 8004a48:	2300      	movne	r3, #0
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	79fb      	ldrb	r3, [r7, #7]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d09f      	beq.n	8004994 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3740      	adds	r7, #64	@ 0x40
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
	...

08004a60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a64:	b0c0      	sub	sp, #256	@ 0x100
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a7c:	68d9      	ldr	r1, [r3, #12]
 8004a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	ea40 0301 	orr.w	r3, r0, r1
 8004a88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a8e:	689a      	ldr	r2, [r3, #8]
 8004a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	431a      	orrs	r2, r3
 8004a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aa4:	69db      	ldr	r3, [r3, #28]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004ab8:	f021 010c 	bic.w	r1, r1, #12
 8004abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004ac6:	430b      	orrs	r3, r1
 8004ac8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ada:	6999      	ldr	r1, [r3, #24]
 8004adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	ea40 0301 	orr.w	r3, r0, r1
 8004ae6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	4b8f      	ldr	r3, [pc, #572]	@ (8004d2c <UART_SetConfig+0x2cc>)
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d005      	beq.n	8004b00 <UART_SetConfig+0xa0>
 8004af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	4b8d      	ldr	r3, [pc, #564]	@ (8004d30 <UART_SetConfig+0x2d0>)
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d104      	bne.n	8004b0a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b00:	f7fe fb32 	bl	8003168 <HAL_RCC_GetPCLK2Freq>
 8004b04:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004b08:	e003      	b.n	8004b12 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b0a:	f7fe fb19 	bl	8003140 <HAL_RCC_GetPCLK1Freq>
 8004b0e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b16:	69db      	ldr	r3, [r3, #28]
 8004b18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b1c:	f040 810c 	bne.w	8004d38 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b24:	2200      	movs	r2, #0
 8004b26:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004b2a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004b2e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004b32:	4622      	mov	r2, r4
 8004b34:	462b      	mov	r3, r5
 8004b36:	1891      	adds	r1, r2, r2
 8004b38:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004b3a:	415b      	adcs	r3, r3
 8004b3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b3e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004b42:	4621      	mov	r1, r4
 8004b44:	eb12 0801 	adds.w	r8, r2, r1
 8004b48:	4629      	mov	r1, r5
 8004b4a:	eb43 0901 	adc.w	r9, r3, r1
 8004b4e:	f04f 0200 	mov.w	r2, #0
 8004b52:	f04f 0300 	mov.w	r3, #0
 8004b56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b62:	4690      	mov	r8, r2
 8004b64:	4699      	mov	r9, r3
 8004b66:	4623      	mov	r3, r4
 8004b68:	eb18 0303 	adds.w	r3, r8, r3
 8004b6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004b70:	462b      	mov	r3, r5
 8004b72:	eb49 0303 	adc.w	r3, r9, r3
 8004b76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004b86:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004b8a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004b8e:	460b      	mov	r3, r1
 8004b90:	18db      	adds	r3, r3, r3
 8004b92:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b94:	4613      	mov	r3, r2
 8004b96:	eb42 0303 	adc.w	r3, r2, r3
 8004b9a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b9c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004ba0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004ba4:	f7fb fb7c 	bl	80002a0 <__aeabi_uldivmod>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	460b      	mov	r3, r1
 8004bac:	4b61      	ldr	r3, [pc, #388]	@ (8004d34 <UART_SetConfig+0x2d4>)
 8004bae:	fba3 2302 	umull	r2, r3, r3, r2
 8004bb2:	095b      	lsrs	r3, r3, #5
 8004bb4:	011c      	lsls	r4, r3, #4
 8004bb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004bc0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004bc4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004bc8:	4642      	mov	r2, r8
 8004bca:	464b      	mov	r3, r9
 8004bcc:	1891      	adds	r1, r2, r2
 8004bce:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004bd0:	415b      	adcs	r3, r3
 8004bd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bd4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004bd8:	4641      	mov	r1, r8
 8004bda:	eb12 0a01 	adds.w	sl, r2, r1
 8004bde:	4649      	mov	r1, r9
 8004be0:	eb43 0b01 	adc.w	fp, r3, r1
 8004be4:	f04f 0200 	mov.w	r2, #0
 8004be8:	f04f 0300 	mov.w	r3, #0
 8004bec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004bf0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004bf4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004bf8:	4692      	mov	sl, r2
 8004bfa:	469b      	mov	fp, r3
 8004bfc:	4643      	mov	r3, r8
 8004bfe:	eb1a 0303 	adds.w	r3, sl, r3
 8004c02:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c06:	464b      	mov	r3, r9
 8004c08:	eb4b 0303 	adc.w	r3, fp, r3
 8004c0c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004c1c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004c20:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004c24:	460b      	mov	r3, r1
 8004c26:	18db      	adds	r3, r3, r3
 8004c28:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	eb42 0303 	adc.w	r3, r2, r3
 8004c30:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c32:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004c36:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004c3a:	f7fb fb31 	bl	80002a0 <__aeabi_uldivmod>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	460b      	mov	r3, r1
 8004c42:	4611      	mov	r1, r2
 8004c44:	4b3b      	ldr	r3, [pc, #236]	@ (8004d34 <UART_SetConfig+0x2d4>)
 8004c46:	fba3 2301 	umull	r2, r3, r3, r1
 8004c4a:	095b      	lsrs	r3, r3, #5
 8004c4c:	2264      	movs	r2, #100	@ 0x64
 8004c4e:	fb02 f303 	mul.w	r3, r2, r3
 8004c52:	1acb      	subs	r3, r1, r3
 8004c54:	00db      	lsls	r3, r3, #3
 8004c56:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004c5a:	4b36      	ldr	r3, [pc, #216]	@ (8004d34 <UART_SetConfig+0x2d4>)
 8004c5c:	fba3 2302 	umull	r2, r3, r3, r2
 8004c60:	095b      	lsrs	r3, r3, #5
 8004c62:	005b      	lsls	r3, r3, #1
 8004c64:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004c68:	441c      	add	r4, r3
 8004c6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004c74:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004c78:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004c7c:	4642      	mov	r2, r8
 8004c7e:	464b      	mov	r3, r9
 8004c80:	1891      	adds	r1, r2, r2
 8004c82:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004c84:	415b      	adcs	r3, r3
 8004c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004c8c:	4641      	mov	r1, r8
 8004c8e:	1851      	adds	r1, r2, r1
 8004c90:	6339      	str	r1, [r7, #48]	@ 0x30
 8004c92:	4649      	mov	r1, r9
 8004c94:	414b      	adcs	r3, r1
 8004c96:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c98:	f04f 0200 	mov.w	r2, #0
 8004c9c:	f04f 0300 	mov.w	r3, #0
 8004ca0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004ca4:	4659      	mov	r1, fp
 8004ca6:	00cb      	lsls	r3, r1, #3
 8004ca8:	4651      	mov	r1, sl
 8004caa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cae:	4651      	mov	r1, sl
 8004cb0:	00ca      	lsls	r2, r1, #3
 8004cb2:	4610      	mov	r0, r2
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	4642      	mov	r2, r8
 8004cba:	189b      	adds	r3, r3, r2
 8004cbc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004cc0:	464b      	mov	r3, r9
 8004cc2:	460a      	mov	r2, r1
 8004cc4:	eb42 0303 	adc.w	r3, r2, r3
 8004cc8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004cd8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004cdc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	18db      	adds	r3, r3, r3
 8004ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	eb42 0303 	adc.w	r3, r2, r3
 8004cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004cf2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004cf6:	f7fb fad3 	bl	80002a0 <__aeabi_uldivmod>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8004d34 <UART_SetConfig+0x2d4>)
 8004d00:	fba3 1302 	umull	r1, r3, r3, r2
 8004d04:	095b      	lsrs	r3, r3, #5
 8004d06:	2164      	movs	r1, #100	@ 0x64
 8004d08:	fb01 f303 	mul.w	r3, r1, r3
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	00db      	lsls	r3, r3, #3
 8004d10:	3332      	adds	r3, #50	@ 0x32
 8004d12:	4a08      	ldr	r2, [pc, #32]	@ (8004d34 <UART_SetConfig+0x2d4>)
 8004d14:	fba2 2303 	umull	r2, r3, r2, r3
 8004d18:	095b      	lsrs	r3, r3, #5
 8004d1a:	f003 0207 	and.w	r2, r3, #7
 8004d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4422      	add	r2, r4
 8004d26:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d28:	e106      	b.n	8004f38 <UART_SetConfig+0x4d8>
 8004d2a:	bf00      	nop
 8004d2c:	40011000 	.word	0x40011000
 8004d30:	40011400 	.word	0x40011400
 8004d34:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004d42:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004d46:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004d4a:	4642      	mov	r2, r8
 8004d4c:	464b      	mov	r3, r9
 8004d4e:	1891      	adds	r1, r2, r2
 8004d50:	6239      	str	r1, [r7, #32]
 8004d52:	415b      	adcs	r3, r3
 8004d54:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d5a:	4641      	mov	r1, r8
 8004d5c:	1854      	adds	r4, r2, r1
 8004d5e:	4649      	mov	r1, r9
 8004d60:	eb43 0501 	adc.w	r5, r3, r1
 8004d64:	f04f 0200 	mov.w	r2, #0
 8004d68:	f04f 0300 	mov.w	r3, #0
 8004d6c:	00eb      	lsls	r3, r5, #3
 8004d6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d72:	00e2      	lsls	r2, r4, #3
 8004d74:	4614      	mov	r4, r2
 8004d76:	461d      	mov	r5, r3
 8004d78:	4643      	mov	r3, r8
 8004d7a:	18e3      	adds	r3, r4, r3
 8004d7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004d80:	464b      	mov	r3, r9
 8004d82:	eb45 0303 	adc.w	r3, r5, r3
 8004d86:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004d96:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004d9a:	f04f 0200 	mov.w	r2, #0
 8004d9e:	f04f 0300 	mov.w	r3, #0
 8004da2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004da6:	4629      	mov	r1, r5
 8004da8:	008b      	lsls	r3, r1, #2
 8004daa:	4621      	mov	r1, r4
 8004dac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004db0:	4621      	mov	r1, r4
 8004db2:	008a      	lsls	r2, r1, #2
 8004db4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004db8:	f7fb fa72 	bl	80002a0 <__aeabi_uldivmod>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	4b60      	ldr	r3, [pc, #384]	@ (8004f44 <UART_SetConfig+0x4e4>)
 8004dc2:	fba3 2302 	umull	r2, r3, r3, r2
 8004dc6:	095b      	lsrs	r3, r3, #5
 8004dc8:	011c      	lsls	r4, r3, #4
 8004dca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004dd4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004dd8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004ddc:	4642      	mov	r2, r8
 8004dde:	464b      	mov	r3, r9
 8004de0:	1891      	adds	r1, r2, r2
 8004de2:	61b9      	str	r1, [r7, #24]
 8004de4:	415b      	adcs	r3, r3
 8004de6:	61fb      	str	r3, [r7, #28]
 8004de8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004dec:	4641      	mov	r1, r8
 8004dee:	1851      	adds	r1, r2, r1
 8004df0:	6139      	str	r1, [r7, #16]
 8004df2:	4649      	mov	r1, r9
 8004df4:	414b      	adcs	r3, r1
 8004df6:	617b      	str	r3, [r7, #20]
 8004df8:	f04f 0200 	mov.w	r2, #0
 8004dfc:	f04f 0300 	mov.w	r3, #0
 8004e00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e04:	4659      	mov	r1, fp
 8004e06:	00cb      	lsls	r3, r1, #3
 8004e08:	4651      	mov	r1, sl
 8004e0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e0e:	4651      	mov	r1, sl
 8004e10:	00ca      	lsls	r2, r1, #3
 8004e12:	4610      	mov	r0, r2
 8004e14:	4619      	mov	r1, r3
 8004e16:	4603      	mov	r3, r0
 8004e18:	4642      	mov	r2, r8
 8004e1a:	189b      	adds	r3, r3, r2
 8004e1c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004e20:	464b      	mov	r3, r9
 8004e22:	460a      	mov	r2, r1
 8004e24:	eb42 0303 	adc.w	r3, r2, r3
 8004e28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004e36:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004e38:	f04f 0200 	mov.w	r2, #0
 8004e3c:	f04f 0300 	mov.w	r3, #0
 8004e40:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004e44:	4649      	mov	r1, r9
 8004e46:	008b      	lsls	r3, r1, #2
 8004e48:	4641      	mov	r1, r8
 8004e4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e4e:	4641      	mov	r1, r8
 8004e50:	008a      	lsls	r2, r1, #2
 8004e52:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004e56:	f7fb fa23 	bl	80002a0 <__aeabi_uldivmod>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	4611      	mov	r1, r2
 8004e60:	4b38      	ldr	r3, [pc, #224]	@ (8004f44 <UART_SetConfig+0x4e4>)
 8004e62:	fba3 2301 	umull	r2, r3, r3, r1
 8004e66:	095b      	lsrs	r3, r3, #5
 8004e68:	2264      	movs	r2, #100	@ 0x64
 8004e6a:	fb02 f303 	mul.w	r3, r2, r3
 8004e6e:	1acb      	subs	r3, r1, r3
 8004e70:	011b      	lsls	r3, r3, #4
 8004e72:	3332      	adds	r3, #50	@ 0x32
 8004e74:	4a33      	ldr	r2, [pc, #204]	@ (8004f44 <UART_SetConfig+0x4e4>)
 8004e76:	fba2 2303 	umull	r2, r3, r2, r3
 8004e7a:	095b      	lsrs	r3, r3, #5
 8004e7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e80:	441c      	add	r4, r3
 8004e82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e86:	2200      	movs	r2, #0
 8004e88:	673b      	str	r3, [r7, #112]	@ 0x70
 8004e8a:	677a      	str	r2, [r7, #116]	@ 0x74
 8004e8c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004e90:	4642      	mov	r2, r8
 8004e92:	464b      	mov	r3, r9
 8004e94:	1891      	adds	r1, r2, r2
 8004e96:	60b9      	str	r1, [r7, #8]
 8004e98:	415b      	adcs	r3, r3
 8004e9a:	60fb      	str	r3, [r7, #12]
 8004e9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ea0:	4641      	mov	r1, r8
 8004ea2:	1851      	adds	r1, r2, r1
 8004ea4:	6039      	str	r1, [r7, #0]
 8004ea6:	4649      	mov	r1, r9
 8004ea8:	414b      	adcs	r3, r1
 8004eaa:	607b      	str	r3, [r7, #4]
 8004eac:	f04f 0200 	mov.w	r2, #0
 8004eb0:	f04f 0300 	mov.w	r3, #0
 8004eb4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004eb8:	4659      	mov	r1, fp
 8004eba:	00cb      	lsls	r3, r1, #3
 8004ebc:	4651      	mov	r1, sl
 8004ebe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ec2:	4651      	mov	r1, sl
 8004ec4:	00ca      	lsls	r2, r1, #3
 8004ec6:	4610      	mov	r0, r2
 8004ec8:	4619      	mov	r1, r3
 8004eca:	4603      	mov	r3, r0
 8004ecc:	4642      	mov	r2, r8
 8004ece:	189b      	adds	r3, r3, r2
 8004ed0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ed2:	464b      	mov	r3, r9
 8004ed4:	460a      	mov	r2, r1
 8004ed6:	eb42 0303 	adc.w	r3, r2, r3
 8004eda:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ee6:	667a      	str	r2, [r7, #100]	@ 0x64
 8004ee8:	f04f 0200 	mov.w	r2, #0
 8004eec:	f04f 0300 	mov.w	r3, #0
 8004ef0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004ef4:	4649      	mov	r1, r9
 8004ef6:	008b      	lsls	r3, r1, #2
 8004ef8:	4641      	mov	r1, r8
 8004efa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004efe:	4641      	mov	r1, r8
 8004f00:	008a      	lsls	r2, r1, #2
 8004f02:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004f06:	f7fb f9cb 	bl	80002a0 <__aeabi_uldivmod>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8004f44 <UART_SetConfig+0x4e4>)
 8004f10:	fba3 1302 	umull	r1, r3, r3, r2
 8004f14:	095b      	lsrs	r3, r3, #5
 8004f16:	2164      	movs	r1, #100	@ 0x64
 8004f18:	fb01 f303 	mul.w	r3, r1, r3
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	011b      	lsls	r3, r3, #4
 8004f20:	3332      	adds	r3, #50	@ 0x32
 8004f22:	4a08      	ldr	r2, [pc, #32]	@ (8004f44 <UART_SetConfig+0x4e4>)
 8004f24:	fba2 2303 	umull	r2, r3, r2, r3
 8004f28:	095b      	lsrs	r3, r3, #5
 8004f2a:	f003 020f 	and.w	r2, r3, #15
 8004f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4422      	add	r2, r4
 8004f36:	609a      	str	r2, [r3, #8]
}
 8004f38:	bf00      	nop
 8004f3a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f44:	51eb851f 	.word	0x51eb851f

08004f48 <sniprintf>:
 8004f48:	b40c      	push	{r2, r3}
 8004f4a:	b530      	push	{r4, r5, lr}
 8004f4c:	4b17      	ldr	r3, [pc, #92]	@ (8004fac <sniprintf+0x64>)
 8004f4e:	1e0c      	subs	r4, r1, #0
 8004f50:	681d      	ldr	r5, [r3, #0]
 8004f52:	b09d      	sub	sp, #116	@ 0x74
 8004f54:	da08      	bge.n	8004f68 <sniprintf+0x20>
 8004f56:	238b      	movs	r3, #139	@ 0x8b
 8004f58:	602b      	str	r3, [r5, #0]
 8004f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f5e:	b01d      	add	sp, #116	@ 0x74
 8004f60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f64:	b002      	add	sp, #8
 8004f66:	4770      	bx	lr
 8004f68:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004f6c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004f70:	bf14      	ite	ne
 8004f72:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004f76:	4623      	moveq	r3, r4
 8004f78:	9304      	str	r3, [sp, #16]
 8004f7a:	9307      	str	r3, [sp, #28]
 8004f7c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004f80:	9002      	str	r0, [sp, #8]
 8004f82:	9006      	str	r0, [sp, #24]
 8004f84:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004f88:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004f8a:	ab21      	add	r3, sp, #132	@ 0x84
 8004f8c:	a902      	add	r1, sp, #8
 8004f8e:	4628      	mov	r0, r5
 8004f90:	9301      	str	r3, [sp, #4]
 8004f92:	f000 f995 	bl	80052c0 <_svfiprintf_r>
 8004f96:	1c43      	adds	r3, r0, #1
 8004f98:	bfbc      	itt	lt
 8004f9a:	238b      	movlt	r3, #139	@ 0x8b
 8004f9c:	602b      	strlt	r3, [r5, #0]
 8004f9e:	2c00      	cmp	r4, #0
 8004fa0:	d0dd      	beq.n	8004f5e <sniprintf+0x16>
 8004fa2:	9b02      	ldr	r3, [sp, #8]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	701a      	strb	r2, [r3, #0]
 8004fa8:	e7d9      	b.n	8004f5e <sniprintf+0x16>
 8004faa:	bf00      	nop
 8004fac:	200000bc 	.word	0x200000bc

08004fb0 <memset>:
 8004fb0:	4402      	add	r2, r0
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d100      	bne.n	8004fba <memset+0xa>
 8004fb8:	4770      	bx	lr
 8004fba:	f803 1b01 	strb.w	r1, [r3], #1
 8004fbe:	e7f9      	b.n	8004fb4 <memset+0x4>

08004fc0 <__errno>:
 8004fc0:	4b01      	ldr	r3, [pc, #4]	@ (8004fc8 <__errno+0x8>)
 8004fc2:	6818      	ldr	r0, [r3, #0]
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	200000bc 	.word	0x200000bc

08004fcc <__libc_init_array>:
 8004fcc:	b570      	push	{r4, r5, r6, lr}
 8004fce:	4d0d      	ldr	r5, [pc, #52]	@ (8005004 <__libc_init_array+0x38>)
 8004fd0:	4c0d      	ldr	r4, [pc, #52]	@ (8005008 <__libc_init_array+0x3c>)
 8004fd2:	1b64      	subs	r4, r4, r5
 8004fd4:	10a4      	asrs	r4, r4, #2
 8004fd6:	2600      	movs	r6, #0
 8004fd8:	42a6      	cmp	r6, r4
 8004fda:	d109      	bne.n	8004ff0 <__libc_init_array+0x24>
 8004fdc:	4d0b      	ldr	r5, [pc, #44]	@ (800500c <__libc_init_array+0x40>)
 8004fde:	4c0c      	ldr	r4, [pc, #48]	@ (8005010 <__libc_init_array+0x44>)
 8004fe0:	f000 fc66 	bl	80058b0 <_init>
 8004fe4:	1b64      	subs	r4, r4, r5
 8004fe6:	10a4      	asrs	r4, r4, #2
 8004fe8:	2600      	movs	r6, #0
 8004fea:	42a6      	cmp	r6, r4
 8004fec:	d105      	bne.n	8004ffa <__libc_init_array+0x2e>
 8004fee:	bd70      	pop	{r4, r5, r6, pc}
 8004ff0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ff4:	4798      	blx	r3
 8004ff6:	3601      	adds	r6, #1
 8004ff8:	e7ee      	b.n	8004fd8 <__libc_init_array+0xc>
 8004ffa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ffe:	4798      	blx	r3
 8005000:	3601      	adds	r6, #1
 8005002:	e7f2      	b.n	8004fea <__libc_init_array+0x1e>
 8005004:	08005960 	.word	0x08005960
 8005008:	08005960 	.word	0x08005960
 800500c:	08005960 	.word	0x08005960
 8005010:	08005964 	.word	0x08005964

08005014 <__retarget_lock_acquire_recursive>:
 8005014:	4770      	bx	lr

08005016 <__retarget_lock_release_recursive>:
 8005016:	4770      	bx	lr

08005018 <_free_r>:
 8005018:	b538      	push	{r3, r4, r5, lr}
 800501a:	4605      	mov	r5, r0
 800501c:	2900      	cmp	r1, #0
 800501e:	d041      	beq.n	80050a4 <_free_r+0x8c>
 8005020:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005024:	1f0c      	subs	r4, r1, #4
 8005026:	2b00      	cmp	r3, #0
 8005028:	bfb8      	it	lt
 800502a:	18e4      	addlt	r4, r4, r3
 800502c:	f000 f8e0 	bl	80051f0 <__malloc_lock>
 8005030:	4a1d      	ldr	r2, [pc, #116]	@ (80050a8 <_free_r+0x90>)
 8005032:	6813      	ldr	r3, [r2, #0]
 8005034:	b933      	cbnz	r3, 8005044 <_free_r+0x2c>
 8005036:	6063      	str	r3, [r4, #4]
 8005038:	6014      	str	r4, [r2, #0]
 800503a:	4628      	mov	r0, r5
 800503c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005040:	f000 b8dc 	b.w	80051fc <__malloc_unlock>
 8005044:	42a3      	cmp	r3, r4
 8005046:	d908      	bls.n	800505a <_free_r+0x42>
 8005048:	6820      	ldr	r0, [r4, #0]
 800504a:	1821      	adds	r1, r4, r0
 800504c:	428b      	cmp	r3, r1
 800504e:	bf01      	itttt	eq
 8005050:	6819      	ldreq	r1, [r3, #0]
 8005052:	685b      	ldreq	r3, [r3, #4]
 8005054:	1809      	addeq	r1, r1, r0
 8005056:	6021      	streq	r1, [r4, #0]
 8005058:	e7ed      	b.n	8005036 <_free_r+0x1e>
 800505a:	461a      	mov	r2, r3
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	b10b      	cbz	r3, 8005064 <_free_r+0x4c>
 8005060:	42a3      	cmp	r3, r4
 8005062:	d9fa      	bls.n	800505a <_free_r+0x42>
 8005064:	6811      	ldr	r1, [r2, #0]
 8005066:	1850      	adds	r0, r2, r1
 8005068:	42a0      	cmp	r0, r4
 800506a:	d10b      	bne.n	8005084 <_free_r+0x6c>
 800506c:	6820      	ldr	r0, [r4, #0]
 800506e:	4401      	add	r1, r0
 8005070:	1850      	adds	r0, r2, r1
 8005072:	4283      	cmp	r3, r0
 8005074:	6011      	str	r1, [r2, #0]
 8005076:	d1e0      	bne.n	800503a <_free_r+0x22>
 8005078:	6818      	ldr	r0, [r3, #0]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	6053      	str	r3, [r2, #4]
 800507e:	4408      	add	r0, r1
 8005080:	6010      	str	r0, [r2, #0]
 8005082:	e7da      	b.n	800503a <_free_r+0x22>
 8005084:	d902      	bls.n	800508c <_free_r+0x74>
 8005086:	230c      	movs	r3, #12
 8005088:	602b      	str	r3, [r5, #0]
 800508a:	e7d6      	b.n	800503a <_free_r+0x22>
 800508c:	6820      	ldr	r0, [r4, #0]
 800508e:	1821      	adds	r1, r4, r0
 8005090:	428b      	cmp	r3, r1
 8005092:	bf04      	itt	eq
 8005094:	6819      	ldreq	r1, [r3, #0]
 8005096:	685b      	ldreq	r3, [r3, #4]
 8005098:	6063      	str	r3, [r4, #4]
 800509a:	bf04      	itt	eq
 800509c:	1809      	addeq	r1, r1, r0
 800509e:	6021      	streq	r1, [r4, #0]
 80050a0:	6054      	str	r4, [r2, #4]
 80050a2:	e7ca      	b.n	800503a <_free_r+0x22>
 80050a4:	bd38      	pop	{r3, r4, r5, pc}
 80050a6:	bf00      	nop
 80050a8:	200004c8 	.word	0x200004c8

080050ac <sbrk_aligned>:
 80050ac:	b570      	push	{r4, r5, r6, lr}
 80050ae:	4e0f      	ldr	r6, [pc, #60]	@ (80050ec <sbrk_aligned+0x40>)
 80050b0:	460c      	mov	r4, r1
 80050b2:	6831      	ldr	r1, [r6, #0]
 80050b4:	4605      	mov	r5, r0
 80050b6:	b911      	cbnz	r1, 80050be <sbrk_aligned+0x12>
 80050b8:	f000 fba6 	bl	8005808 <_sbrk_r>
 80050bc:	6030      	str	r0, [r6, #0]
 80050be:	4621      	mov	r1, r4
 80050c0:	4628      	mov	r0, r5
 80050c2:	f000 fba1 	bl	8005808 <_sbrk_r>
 80050c6:	1c43      	adds	r3, r0, #1
 80050c8:	d103      	bne.n	80050d2 <sbrk_aligned+0x26>
 80050ca:	f04f 34ff 	mov.w	r4, #4294967295
 80050ce:	4620      	mov	r0, r4
 80050d0:	bd70      	pop	{r4, r5, r6, pc}
 80050d2:	1cc4      	adds	r4, r0, #3
 80050d4:	f024 0403 	bic.w	r4, r4, #3
 80050d8:	42a0      	cmp	r0, r4
 80050da:	d0f8      	beq.n	80050ce <sbrk_aligned+0x22>
 80050dc:	1a21      	subs	r1, r4, r0
 80050de:	4628      	mov	r0, r5
 80050e0:	f000 fb92 	bl	8005808 <_sbrk_r>
 80050e4:	3001      	adds	r0, #1
 80050e6:	d1f2      	bne.n	80050ce <sbrk_aligned+0x22>
 80050e8:	e7ef      	b.n	80050ca <sbrk_aligned+0x1e>
 80050ea:	bf00      	nop
 80050ec:	200004c4 	.word	0x200004c4

080050f0 <_malloc_r>:
 80050f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050f4:	1ccd      	adds	r5, r1, #3
 80050f6:	f025 0503 	bic.w	r5, r5, #3
 80050fa:	3508      	adds	r5, #8
 80050fc:	2d0c      	cmp	r5, #12
 80050fe:	bf38      	it	cc
 8005100:	250c      	movcc	r5, #12
 8005102:	2d00      	cmp	r5, #0
 8005104:	4606      	mov	r6, r0
 8005106:	db01      	blt.n	800510c <_malloc_r+0x1c>
 8005108:	42a9      	cmp	r1, r5
 800510a:	d904      	bls.n	8005116 <_malloc_r+0x26>
 800510c:	230c      	movs	r3, #12
 800510e:	6033      	str	r3, [r6, #0]
 8005110:	2000      	movs	r0, #0
 8005112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005116:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80051ec <_malloc_r+0xfc>
 800511a:	f000 f869 	bl	80051f0 <__malloc_lock>
 800511e:	f8d8 3000 	ldr.w	r3, [r8]
 8005122:	461c      	mov	r4, r3
 8005124:	bb44      	cbnz	r4, 8005178 <_malloc_r+0x88>
 8005126:	4629      	mov	r1, r5
 8005128:	4630      	mov	r0, r6
 800512a:	f7ff ffbf 	bl	80050ac <sbrk_aligned>
 800512e:	1c43      	adds	r3, r0, #1
 8005130:	4604      	mov	r4, r0
 8005132:	d158      	bne.n	80051e6 <_malloc_r+0xf6>
 8005134:	f8d8 4000 	ldr.w	r4, [r8]
 8005138:	4627      	mov	r7, r4
 800513a:	2f00      	cmp	r7, #0
 800513c:	d143      	bne.n	80051c6 <_malloc_r+0xd6>
 800513e:	2c00      	cmp	r4, #0
 8005140:	d04b      	beq.n	80051da <_malloc_r+0xea>
 8005142:	6823      	ldr	r3, [r4, #0]
 8005144:	4639      	mov	r1, r7
 8005146:	4630      	mov	r0, r6
 8005148:	eb04 0903 	add.w	r9, r4, r3
 800514c:	f000 fb5c 	bl	8005808 <_sbrk_r>
 8005150:	4581      	cmp	r9, r0
 8005152:	d142      	bne.n	80051da <_malloc_r+0xea>
 8005154:	6821      	ldr	r1, [r4, #0]
 8005156:	1a6d      	subs	r5, r5, r1
 8005158:	4629      	mov	r1, r5
 800515a:	4630      	mov	r0, r6
 800515c:	f7ff ffa6 	bl	80050ac <sbrk_aligned>
 8005160:	3001      	adds	r0, #1
 8005162:	d03a      	beq.n	80051da <_malloc_r+0xea>
 8005164:	6823      	ldr	r3, [r4, #0]
 8005166:	442b      	add	r3, r5
 8005168:	6023      	str	r3, [r4, #0]
 800516a:	f8d8 3000 	ldr.w	r3, [r8]
 800516e:	685a      	ldr	r2, [r3, #4]
 8005170:	bb62      	cbnz	r2, 80051cc <_malloc_r+0xdc>
 8005172:	f8c8 7000 	str.w	r7, [r8]
 8005176:	e00f      	b.n	8005198 <_malloc_r+0xa8>
 8005178:	6822      	ldr	r2, [r4, #0]
 800517a:	1b52      	subs	r2, r2, r5
 800517c:	d420      	bmi.n	80051c0 <_malloc_r+0xd0>
 800517e:	2a0b      	cmp	r2, #11
 8005180:	d917      	bls.n	80051b2 <_malloc_r+0xc2>
 8005182:	1961      	adds	r1, r4, r5
 8005184:	42a3      	cmp	r3, r4
 8005186:	6025      	str	r5, [r4, #0]
 8005188:	bf18      	it	ne
 800518a:	6059      	strne	r1, [r3, #4]
 800518c:	6863      	ldr	r3, [r4, #4]
 800518e:	bf08      	it	eq
 8005190:	f8c8 1000 	streq.w	r1, [r8]
 8005194:	5162      	str	r2, [r4, r5]
 8005196:	604b      	str	r3, [r1, #4]
 8005198:	4630      	mov	r0, r6
 800519a:	f000 f82f 	bl	80051fc <__malloc_unlock>
 800519e:	f104 000b 	add.w	r0, r4, #11
 80051a2:	1d23      	adds	r3, r4, #4
 80051a4:	f020 0007 	bic.w	r0, r0, #7
 80051a8:	1ac2      	subs	r2, r0, r3
 80051aa:	bf1c      	itt	ne
 80051ac:	1a1b      	subne	r3, r3, r0
 80051ae:	50a3      	strne	r3, [r4, r2]
 80051b0:	e7af      	b.n	8005112 <_malloc_r+0x22>
 80051b2:	6862      	ldr	r2, [r4, #4]
 80051b4:	42a3      	cmp	r3, r4
 80051b6:	bf0c      	ite	eq
 80051b8:	f8c8 2000 	streq.w	r2, [r8]
 80051bc:	605a      	strne	r2, [r3, #4]
 80051be:	e7eb      	b.n	8005198 <_malloc_r+0xa8>
 80051c0:	4623      	mov	r3, r4
 80051c2:	6864      	ldr	r4, [r4, #4]
 80051c4:	e7ae      	b.n	8005124 <_malloc_r+0x34>
 80051c6:	463c      	mov	r4, r7
 80051c8:	687f      	ldr	r7, [r7, #4]
 80051ca:	e7b6      	b.n	800513a <_malloc_r+0x4a>
 80051cc:	461a      	mov	r2, r3
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	42a3      	cmp	r3, r4
 80051d2:	d1fb      	bne.n	80051cc <_malloc_r+0xdc>
 80051d4:	2300      	movs	r3, #0
 80051d6:	6053      	str	r3, [r2, #4]
 80051d8:	e7de      	b.n	8005198 <_malloc_r+0xa8>
 80051da:	230c      	movs	r3, #12
 80051dc:	6033      	str	r3, [r6, #0]
 80051de:	4630      	mov	r0, r6
 80051e0:	f000 f80c 	bl	80051fc <__malloc_unlock>
 80051e4:	e794      	b.n	8005110 <_malloc_r+0x20>
 80051e6:	6005      	str	r5, [r0, #0]
 80051e8:	e7d6      	b.n	8005198 <_malloc_r+0xa8>
 80051ea:	bf00      	nop
 80051ec:	200004c8 	.word	0x200004c8

080051f0 <__malloc_lock>:
 80051f0:	4801      	ldr	r0, [pc, #4]	@ (80051f8 <__malloc_lock+0x8>)
 80051f2:	f7ff bf0f 	b.w	8005014 <__retarget_lock_acquire_recursive>
 80051f6:	bf00      	nop
 80051f8:	200004c0 	.word	0x200004c0

080051fc <__malloc_unlock>:
 80051fc:	4801      	ldr	r0, [pc, #4]	@ (8005204 <__malloc_unlock+0x8>)
 80051fe:	f7ff bf0a 	b.w	8005016 <__retarget_lock_release_recursive>
 8005202:	bf00      	nop
 8005204:	200004c0 	.word	0x200004c0

08005208 <__ssputs_r>:
 8005208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800520c:	688e      	ldr	r6, [r1, #8]
 800520e:	461f      	mov	r7, r3
 8005210:	42be      	cmp	r6, r7
 8005212:	680b      	ldr	r3, [r1, #0]
 8005214:	4682      	mov	sl, r0
 8005216:	460c      	mov	r4, r1
 8005218:	4690      	mov	r8, r2
 800521a:	d82d      	bhi.n	8005278 <__ssputs_r+0x70>
 800521c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005220:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005224:	d026      	beq.n	8005274 <__ssputs_r+0x6c>
 8005226:	6965      	ldr	r5, [r4, #20]
 8005228:	6909      	ldr	r1, [r1, #16]
 800522a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800522e:	eba3 0901 	sub.w	r9, r3, r1
 8005232:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005236:	1c7b      	adds	r3, r7, #1
 8005238:	444b      	add	r3, r9
 800523a:	106d      	asrs	r5, r5, #1
 800523c:	429d      	cmp	r5, r3
 800523e:	bf38      	it	cc
 8005240:	461d      	movcc	r5, r3
 8005242:	0553      	lsls	r3, r2, #21
 8005244:	d527      	bpl.n	8005296 <__ssputs_r+0x8e>
 8005246:	4629      	mov	r1, r5
 8005248:	f7ff ff52 	bl	80050f0 <_malloc_r>
 800524c:	4606      	mov	r6, r0
 800524e:	b360      	cbz	r0, 80052aa <__ssputs_r+0xa2>
 8005250:	6921      	ldr	r1, [r4, #16]
 8005252:	464a      	mov	r2, r9
 8005254:	f000 fae8 	bl	8005828 <memcpy>
 8005258:	89a3      	ldrh	r3, [r4, #12]
 800525a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800525e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005262:	81a3      	strh	r3, [r4, #12]
 8005264:	6126      	str	r6, [r4, #16]
 8005266:	6165      	str	r5, [r4, #20]
 8005268:	444e      	add	r6, r9
 800526a:	eba5 0509 	sub.w	r5, r5, r9
 800526e:	6026      	str	r6, [r4, #0]
 8005270:	60a5      	str	r5, [r4, #8]
 8005272:	463e      	mov	r6, r7
 8005274:	42be      	cmp	r6, r7
 8005276:	d900      	bls.n	800527a <__ssputs_r+0x72>
 8005278:	463e      	mov	r6, r7
 800527a:	6820      	ldr	r0, [r4, #0]
 800527c:	4632      	mov	r2, r6
 800527e:	4641      	mov	r1, r8
 8005280:	f000 faa8 	bl	80057d4 <memmove>
 8005284:	68a3      	ldr	r3, [r4, #8]
 8005286:	1b9b      	subs	r3, r3, r6
 8005288:	60a3      	str	r3, [r4, #8]
 800528a:	6823      	ldr	r3, [r4, #0]
 800528c:	4433      	add	r3, r6
 800528e:	6023      	str	r3, [r4, #0]
 8005290:	2000      	movs	r0, #0
 8005292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005296:	462a      	mov	r2, r5
 8005298:	f000 fad4 	bl	8005844 <_realloc_r>
 800529c:	4606      	mov	r6, r0
 800529e:	2800      	cmp	r0, #0
 80052a0:	d1e0      	bne.n	8005264 <__ssputs_r+0x5c>
 80052a2:	6921      	ldr	r1, [r4, #16]
 80052a4:	4650      	mov	r0, sl
 80052a6:	f7ff feb7 	bl	8005018 <_free_r>
 80052aa:	230c      	movs	r3, #12
 80052ac:	f8ca 3000 	str.w	r3, [sl]
 80052b0:	89a3      	ldrh	r3, [r4, #12]
 80052b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052b6:	81a3      	strh	r3, [r4, #12]
 80052b8:	f04f 30ff 	mov.w	r0, #4294967295
 80052bc:	e7e9      	b.n	8005292 <__ssputs_r+0x8a>
	...

080052c0 <_svfiprintf_r>:
 80052c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052c4:	4698      	mov	r8, r3
 80052c6:	898b      	ldrh	r3, [r1, #12]
 80052c8:	061b      	lsls	r3, r3, #24
 80052ca:	b09d      	sub	sp, #116	@ 0x74
 80052cc:	4607      	mov	r7, r0
 80052ce:	460d      	mov	r5, r1
 80052d0:	4614      	mov	r4, r2
 80052d2:	d510      	bpl.n	80052f6 <_svfiprintf_r+0x36>
 80052d4:	690b      	ldr	r3, [r1, #16]
 80052d6:	b973      	cbnz	r3, 80052f6 <_svfiprintf_r+0x36>
 80052d8:	2140      	movs	r1, #64	@ 0x40
 80052da:	f7ff ff09 	bl	80050f0 <_malloc_r>
 80052de:	6028      	str	r0, [r5, #0]
 80052e0:	6128      	str	r0, [r5, #16]
 80052e2:	b930      	cbnz	r0, 80052f2 <_svfiprintf_r+0x32>
 80052e4:	230c      	movs	r3, #12
 80052e6:	603b      	str	r3, [r7, #0]
 80052e8:	f04f 30ff 	mov.w	r0, #4294967295
 80052ec:	b01d      	add	sp, #116	@ 0x74
 80052ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052f2:	2340      	movs	r3, #64	@ 0x40
 80052f4:	616b      	str	r3, [r5, #20]
 80052f6:	2300      	movs	r3, #0
 80052f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80052fa:	2320      	movs	r3, #32
 80052fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005300:	f8cd 800c 	str.w	r8, [sp, #12]
 8005304:	2330      	movs	r3, #48	@ 0x30
 8005306:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80054a4 <_svfiprintf_r+0x1e4>
 800530a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800530e:	f04f 0901 	mov.w	r9, #1
 8005312:	4623      	mov	r3, r4
 8005314:	469a      	mov	sl, r3
 8005316:	f813 2b01 	ldrb.w	r2, [r3], #1
 800531a:	b10a      	cbz	r2, 8005320 <_svfiprintf_r+0x60>
 800531c:	2a25      	cmp	r2, #37	@ 0x25
 800531e:	d1f9      	bne.n	8005314 <_svfiprintf_r+0x54>
 8005320:	ebba 0b04 	subs.w	fp, sl, r4
 8005324:	d00b      	beq.n	800533e <_svfiprintf_r+0x7e>
 8005326:	465b      	mov	r3, fp
 8005328:	4622      	mov	r2, r4
 800532a:	4629      	mov	r1, r5
 800532c:	4638      	mov	r0, r7
 800532e:	f7ff ff6b 	bl	8005208 <__ssputs_r>
 8005332:	3001      	adds	r0, #1
 8005334:	f000 80a7 	beq.w	8005486 <_svfiprintf_r+0x1c6>
 8005338:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800533a:	445a      	add	r2, fp
 800533c:	9209      	str	r2, [sp, #36]	@ 0x24
 800533e:	f89a 3000 	ldrb.w	r3, [sl]
 8005342:	2b00      	cmp	r3, #0
 8005344:	f000 809f 	beq.w	8005486 <_svfiprintf_r+0x1c6>
 8005348:	2300      	movs	r3, #0
 800534a:	f04f 32ff 	mov.w	r2, #4294967295
 800534e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005352:	f10a 0a01 	add.w	sl, sl, #1
 8005356:	9304      	str	r3, [sp, #16]
 8005358:	9307      	str	r3, [sp, #28]
 800535a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800535e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005360:	4654      	mov	r4, sl
 8005362:	2205      	movs	r2, #5
 8005364:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005368:	484e      	ldr	r0, [pc, #312]	@ (80054a4 <_svfiprintf_r+0x1e4>)
 800536a:	f7fa ff49 	bl	8000200 <memchr>
 800536e:	9a04      	ldr	r2, [sp, #16]
 8005370:	b9d8      	cbnz	r0, 80053aa <_svfiprintf_r+0xea>
 8005372:	06d0      	lsls	r0, r2, #27
 8005374:	bf44      	itt	mi
 8005376:	2320      	movmi	r3, #32
 8005378:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800537c:	0711      	lsls	r1, r2, #28
 800537e:	bf44      	itt	mi
 8005380:	232b      	movmi	r3, #43	@ 0x2b
 8005382:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005386:	f89a 3000 	ldrb.w	r3, [sl]
 800538a:	2b2a      	cmp	r3, #42	@ 0x2a
 800538c:	d015      	beq.n	80053ba <_svfiprintf_r+0xfa>
 800538e:	9a07      	ldr	r2, [sp, #28]
 8005390:	4654      	mov	r4, sl
 8005392:	2000      	movs	r0, #0
 8005394:	f04f 0c0a 	mov.w	ip, #10
 8005398:	4621      	mov	r1, r4
 800539a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800539e:	3b30      	subs	r3, #48	@ 0x30
 80053a0:	2b09      	cmp	r3, #9
 80053a2:	d94b      	bls.n	800543c <_svfiprintf_r+0x17c>
 80053a4:	b1b0      	cbz	r0, 80053d4 <_svfiprintf_r+0x114>
 80053a6:	9207      	str	r2, [sp, #28]
 80053a8:	e014      	b.n	80053d4 <_svfiprintf_r+0x114>
 80053aa:	eba0 0308 	sub.w	r3, r0, r8
 80053ae:	fa09 f303 	lsl.w	r3, r9, r3
 80053b2:	4313      	orrs	r3, r2
 80053b4:	9304      	str	r3, [sp, #16]
 80053b6:	46a2      	mov	sl, r4
 80053b8:	e7d2      	b.n	8005360 <_svfiprintf_r+0xa0>
 80053ba:	9b03      	ldr	r3, [sp, #12]
 80053bc:	1d19      	adds	r1, r3, #4
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	9103      	str	r1, [sp, #12]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	bfbb      	ittet	lt
 80053c6:	425b      	neglt	r3, r3
 80053c8:	f042 0202 	orrlt.w	r2, r2, #2
 80053cc:	9307      	strge	r3, [sp, #28]
 80053ce:	9307      	strlt	r3, [sp, #28]
 80053d0:	bfb8      	it	lt
 80053d2:	9204      	strlt	r2, [sp, #16]
 80053d4:	7823      	ldrb	r3, [r4, #0]
 80053d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80053d8:	d10a      	bne.n	80053f0 <_svfiprintf_r+0x130>
 80053da:	7863      	ldrb	r3, [r4, #1]
 80053dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80053de:	d132      	bne.n	8005446 <_svfiprintf_r+0x186>
 80053e0:	9b03      	ldr	r3, [sp, #12]
 80053e2:	1d1a      	adds	r2, r3, #4
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	9203      	str	r2, [sp, #12]
 80053e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80053ec:	3402      	adds	r4, #2
 80053ee:	9305      	str	r3, [sp, #20]
 80053f0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80054b4 <_svfiprintf_r+0x1f4>
 80053f4:	7821      	ldrb	r1, [r4, #0]
 80053f6:	2203      	movs	r2, #3
 80053f8:	4650      	mov	r0, sl
 80053fa:	f7fa ff01 	bl	8000200 <memchr>
 80053fe:	b138      	cbz	r0, 8005410 <_svfiprintf_r+0x150>
 8005400:	9b04      	ldr	r3, [sp, #16]
 8005402:	eba0 000a 	sub.w	r0, r0, sl
 8005406:	2240      	movs	r2, #64	@ 0x40
 8005408:	4082      	lsls	r2, r0
 800540a:	4313      	orrs	r3, r2
 800540c:	3401      	adds	r4, #1
 800540e:	9304      	str	r3, [sp, #16]
 8005410:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005414:	4824      	ldr	r0, [pc, #144]	@ (80054a8 <_svfiprintf_r+0x1e8>)
 8005416:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800541a:	2206      	movs	r2, #6
 800541c:	f7fa fef0 	bl	8000200 <memchr>
 8005420:	2800      	cmp	r0, #0
 8005422:	d036      	beq.n	8005492 <_svfiprintf_r+0x1d2>
 8005424:	4b21      	ldr	r3, [pc, #132]	@ (80054ac <_svfiprintf_r+0x1ec>)
 8005426:	bb1b      	cbnz	r3, 8005470 <_svfiprintf_r+0x1b0>
 8005428:	9b03      	ldr	r3, [sp, #12]
 800542a:	3307      	adds	r3, #7
 800542c:	f023 0307 	bic.w	r3, r3, #7
 8005430:	3308      	adds	r3, #8
 8005432:	9303      	str	r3, [sp, #12]
 8005434:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005436:	4433      	add	r3, r6
 8005438:	9309      	str	r3, [sp, #36]	@ 0x24
 800543a:	e76a      	b.n	8005312 <_svfiprintf_r+0x52>
 800543c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005440:	460c      	mov	r4, r1
 8005442:	2001      	movs	r0, #1
 8005444:	e7a8      	b.n	8005398 <_svfiprintf_r+0xd8>
 8005446:	2300      	movs	r3, #0
 8005448:	3401      	adds	r4, #1
 800544a:	9305      	str	r3, [sp, #20]
 800544c:	4619      	mov	r1, r3
 800544e:	f04f 0c0a 	mov.w	ip, #10
 8005452:	4620      	mov	r0, r4
 8005454:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005458:	3a30      	subs	r2, #48	@ 0x30
 800545a:	2a09      	cmp	r2, #9
 800545c:	d903      	bls.n	8005466 <_svfiprintf_r+0x1a6>
 800545e:	2b00      	cmp	r3, #0
 8005460:	d0c6      	beq.n	80053f0 <_svfiprintf_r+0x130>
 8005462:	9105      	str	r1, [sp, #20]
 8005464:	e7c4      	b.n	80053f0 <_svfiprintf_r+0x130>
 8005466:	fb0c 2101 	mla	r1, ip, r1, r2
 800546a:	4604      	mov	r4, r0
 800546c:	2301      	movs	r3, #1
 800546e:	e7f0      	b.n	8005452 <_svfiprintf_r+0x192>
 8005470:	ab03      	add	r3, sp, #12
 8005472:	9300      	str	r3, [sp, #0]
 8005474:	462a      	mov	r2, r5
 8005476:	4b0e      	ldr	r3, [pc, #56]	@ (80054b0 <_svfiprintf_r+0x1f0>)
 8005478:	a904      	add	r1, sp, #16
 800547a:	4638      	mov	r0, r7
 800547c:	f3af 8000 	nop.w
 8005480:	1c42      	adds	r2, r0, #1
 8005482:	4606      	mov	r6, r0
 8005484:	d1d6      	bne.n	8005434 <_svfiprintf_r+0x174>
 8005486:	89ab      	ldrh	r3, [r5, #12]
 8005488:	065b      	lsls	r3, r3, #25
 800548a:	f53f af2d 	bmi.w	80052e8 <_svfiprintf_r+0x28>
 800548e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005490:	e72c      	b.n	80052ec <_svfiprintf_r+0x2c>
 8005492:	ab03      	add	r3, sp, #12
 8005494:	9300      	str	r3, [sp, #0]
 8005496:	462a      	mov	r2, r5
 8005498:	4b05      	ldr	r3, [pc, #20]	@ (80054b0 <_svfiprintf_r+0x1f0>)
 800549a:	a904      	add	r1, sp, #16
 800549c:	4638      	mov	r0, r7
 800549e:	f000 f879 	bl	8005594 <_printf_i>
 80054a2:	e7ed      	b.n	8005480 <_svfiprintf_r+0x1c0>
 80054a4:	08005924 	.word	0x08005924
 80054a8:	0800592e 	.word	0x0800592e
 80054ac:	00000000 	.word	0x00000000
 80054b0:	08005209 	.word	0x08005209
 80054b4:	0800592a 	.word	0x0800592a

080054b8 <_printf_common>:
 80054b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054bc:	4616      	mov	r6, r2
 80054be:	4698      	mov	r8, r3
 80054c0:	688a      	ldr	r2, [r1, #8]
 80054c2:	690b      	ldr	r3, [r1, #16]
 80054c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80054c8:	4293      	cmp	r3, r2
 80054ca:	bfb8      	it	lt
 80054cc:	4613      	movlt	r3, r2
 80054ce:	6033      	str	r3, [r6, #0]
 80054d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80054d4:	4607      	mov	r7, r0
 80054d6:	460c      	mov	r4, r1
 80054d8:	b10a      	cbz	r2, 80054de <_printf_common+0x26>
 80054da:	3301      	adds	r3, #1
 80054dc:	6033      	str	r3, [r6, #0]
 80054de:	6823      	ldr	r3, [r4, #0]
 80054e0:	0699      	lsls	r1, r3, #26
 80054e2:	bf42      	ittt	mi
 80054e4:	6833      	ldrmi	r3, [r6, #0]
 80054e6:	3302      	addmi	r3, #2
 80054e8:	6033      	strmi	r3, [r6, #0]
 80054ea:	6825      	ldr	r5, [r4, #0]
 80054ec:	f015 0506 	ands.w	r5, r5, #6
 80054f0:	d106      	bne.n	8005500 <_printf_common+0x48>
 80054f2:	f104 0a19 	add.w	sl, r4, #25
 80054f6:	68e3      	ldr	r3, [r4, #12]
 80054f8:	6832      	ldr	r2, [r6, #0]
 80054fa:	1a9b      	subs	r3, r3, r2
 80054fc:	42ab      	cmp	r3, r5
 80054fe:	dc26      	bgt.n	800554e <_printf_common+0x96>
 8005500:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005504:	6822      	ldr	r2, [r4, #0]
 8005506:	3b00      	subs	r3, #0
 8005508:	bf18      	it	ne
 800550a:	2301      	movne	r3, #1
 800550c:	0692      	lsls	r2, r2, #26
 800550e:	d42b      	bmi.n	8005568 <_printf_common+0xb0>
 8005510:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005514:	4641      	mov	r1, r8
 8005516:	4638      	mov	r0, r7
 8005518:	47c8      	blx	r9
 800551a:	3001      	adds	r0, #1
 800551c:	d01e      	beq.n	800555c <_printf_common+0xa4>
 800551e:	6823      	ldr	r3, [r4, #0]
 8005520:	6922      	ldr	r2, [r4, #16]
 8005522:	f003 0306 	and.w	r3, r3, #6
 8005526:	2b04      	cmp	r3, #4
 8005528:	bf02      	ittt	eq
 800552a:	68e5      	ldreq	r5, [r4, #12]
 800552c:	6833      	ldreq	r3, [r6, #0]
 800552e:	1aed      	subeq	r5, r5, r3
 8005530:	68a3      	ldr	r3, [r4, #8]
 8005532:	bf0c      	ite	eq
 8005534:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005538:	2500      	movne	r5, #0
 800553a:	4293      	cmp	r3, r2
 800553c:	bfc4      	itt	gt
 800553e:	1a9b      	subgt	r3, r3, r2
 8005540:	18ed      	addgt	r5, r5, r3
 8005542:	2600      	movs	r6, #0
 8005544:	341a      	adds	r4, #26
 8005546:	42b5      	cmp	r5, r6
 8005548:	d11a      	bne.n	8005580 <_printf_common+0xc8>
 800554a:	2000      	movs	r0, #0
 800554c:	e008      	b.n	8005560 <_printf_common+0xa8>
 800554e:	2301      	movs	r3, #1
 8005550:	4652      	mov	r2, sl
 8005552:	4641      	mov	r1, r8
 8005554:	4638      	mov	r0, r7
 8005556:	47c8      	blx	r9
 8005558:	3001      	adds	r0, #1
 800555a:	d103      	bne.n	8005564 <_printf_common+0xac>
 800555c:	f04f 30ff 	mov.w	r0, #4294967295
 8005560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005564:	3501      	adds	r5, #1
 8005566:	e7c6      	b.n	80054f6 <_printf_common+0x3e>
 8005568:	18e1      	adds	r1, r4, r3
 800556a:	1c5a      	adds	r2, r3, #1
 800556c:	2030      	movs	r0, #48	@ 0x30
 800556e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005572:	4422      	add	r2, r4
 8005574:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005578:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800557c:	3302      	adds	r3, #2
 800557e:	e7c7      	b.n	8005510 <_printf_common+0x58>
 8005580:	2301      	movs	r3, #1
 8005582:	4622      	mov	r2, r4
 8005584:	4641      	mov	r1, r8
 8005586:	4638      	mov	r0, r7
 8005588:	47c8      	blx	r9
 800558a:	3001      	adds	r0, #1
 800558c:	d0e6      	beq.n	800555c <_printf_common+0xa4>
 800558e:	3601      	adds	r6, #1
 8005590:	e7d9      	b.n	8005546 <_printf_common+0x8e>
	...

08005594 <_printf_i>:
 8005594:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005598:	7e0f      	ldrb	r7, [r1, #24]
 800559a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800559c:	2f78      	cmp	r7, #120	@ 0x78
 800559e:	4691      	mov	r9, r2
 80055a0:	4680      	mov	r8, r0
 80055a2:	460c      	mov	r4, r1
 80055a4:	469a      	mov	sl, r3
 80055a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80055aa:	d807      	bhi.n	80055bc <_printf_i+0x28>
 80055ac:	2f62      	cmp	r7, #98	@ 0x62
 80055ae:	d80a      	bhi.n	80055c6 <_printf_i+0x32>
 80055b0:	2f00      	cmp	r7, #0
 80055b2:	f000 80d2 	beq.w	800575a <_printf_i+0x1c6>
 80055b6:	2f58      	cmp	r7, #88	@ 0x58
 80055b8:	f000 80b9 	beq.w	800572e <_printf_i+0x19a>
 80055bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80055c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80055c4:	e03a      	b.n	800563c <_printf_i+0xa8>
 80055c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80055ca:	2b15      	cmp	r3, #21
 80055cc:	d8f6      	bhi.n	80055bc <_printf_i+0x28>
 80055ce:	a101      	add	r1, pc, #4	@ (adr r1, 80055d4 <_printf_i+0x40>)
 80055d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80055d4:	0800562d 	.word	0x0800562d
 80055d8:	08005641 	.word	0x08005641
 80055dc:	080055bd 	.word	0x080055bd
 80055e0:	080055bd 	.word	0x080055bd
 80055e4:	080055bd 	.word	0x080055bd
 80055e8:	080055bd 	.word	0x080055bd
 80055ec:	08005641 	.word	0x08005641
 80055f0:	080055bd 	.word	0x080055bd
 80055f4:	080055bd 	.word	0x080055bd
 80055f8:	080055bd 	.word	0x080055bd
 80055fc:	080055bd 	.word	0x080055bd
 8005600:	08005741 	.word	0x08005741
 8005604:	0800566b 	.word	0x0800566b
 8005608:	080056fb 	.word	0x080056fb
 800560c:	080055bd 	.word	0x080055bd
 8005610:	080055bd 	.word	0x080055bd
 8005614:	08005763 	.word	0x08005763
 8005618:	080055bd 	.word	0x080055bd
 800561c:	0800566b 	.word	0x0800566b
 8005620:	080055bd 	.word	0x080055bd
 8005624:	080055bd 	.word	0x080055bd
 8005628:	08005703 	.word	0x08005703
 800562c:	6833      	ldr	r3, [r6, #0]
 800562e:	1d1a      	adds	r2, r3, #4
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	6032      	str	r2, [r6, #0]
 8005634:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005638:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800563c:	2301      	movs	r3, #1
 800563e:	e09d      	b.n	800577c <_printf_i+0x1e8>
 8005640:	6833      	ldr	r3, [r6, #0]
 8005642:	6820      	ldr	r0, [r4, #0]
 8005644:	1d19      	adds	r1, r3, #4
 8005646:	6031      	str	r1, [r6, #0]
 8005648:	0606      	lsls	r6, r0, #24
 800564a:	d501      	bpl.n	8005650 <_printf_i+0xbc>
 800564c:	681d      	ldr	r5, [r3, #0]
 800564e:	e003      	b.n	8005658 <_printf_i+0xc4>
 8005650:	0645      	lsls	r5, r0, #25
 8005652:	d5fb      	bpl.n	800564c <_printf_i+0xb8>
 8005654:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005658:	2d00      	cmp	r5, #0
 800565a:	da03      	bge.n	8005664 <_printf_i+0xd0>
 800565c:	232d      	movs	r3, #45	@ 0x2d
 800565e:	426d      	negs	r5, r5
 8005660:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005664:	4859      	ldr	r0, [pc, #356]	@ (80057cc <_printf_i+0x238>)
 8005666:	230a      	movs	r3, #10
 8005668:	e011      	b.n	800568e <_printf_i+0xfa>
 800566a:	6821      	ldr	r1, [r4, #0]
 800566c:	6833      	ldr	r3, [r6, #0]
 800566e:	0608      	lsls	r0, r1, #24
 8005670:	f853 5b04 	ldr.w	r5, [r3], #4
 8005674:	d402      	bmi.n	800567c <_printf_i+0xe8>
 8005676:	0649      	lsls	r1, r1, #25
 8005678:	bf48      	it	mi
 800567a:	b2ad      	uxthmi	r5, r5
 800567c:	2f6f      	cmp	r7, #111	@ 0x6f
 800567e:	4853      	ldr	r0, [pc, #332]	@ (80057cc <_printf_i+0x238>)
 8005680:	6033      	str	r3, [r6, #0]
 8005682:	bf14      	ite	ne
 8005684:	230a      	movne	r3, #10
 8005686:	2308      	moveq	r3, #8
 8005688:	2100      	movs	r1, #0
 800568a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800568e:	6866      	ldr	r6, [r4, #4]
 8005690:	60a6      	str	r6, [r4, #8]
 8005692:	2e00      	cmp	r6, #0
 8005694:	bfa2      	ittt	ge
 8005696:	6821      	ldrge	r1, [r4, #0]
 8005698:	f021 0104 	bicge.w	r1, r1, #4
 800569c:	6021      	strge	r1, [r4, #0]
 800569e:	b90d      	cbnz	r5, 80056a4 <_printf_i+0x110>
 80056a0:	2e00      	cmp	r6, #0
 80056a2:	d04b      	beq.n	800573c <_printf_i+0x1a8>
 80056a4:	4616      	mov	r6, r2
 80056a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80056aa:	fb03 5711 	mls	r7, r3, r1, r5
 80056ae:	5dc7      	ldrb	r7, [r0, r7]
 80056b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80056b4:	462f      	mov	r7, r5
 80056b6:	42bb      	cmp	r3, r7
 80056b8:	460d      	mov	r5, r1
 80056ba:	d9f4      	bls.n	80056a6 <_printf_i+0x112>
 80056bc:	2b08      	cmp	r3, #8
 80056be:	d10b      	bne.n	80056d8 <_printf_i+0x144>
 80056c0:	6823      	ldr	r3, [r4, #0]
 80056c2:	07df      	lsls	r7, r3, #31
 80056c4:	d508      	bpl.n	80056d8 <_printf_i+0x144>
 80056c6:	6923      	ldr	r3, [r4, #16]
 80056c8:	6861      	ldr	r1, [r4, #4]
 80056ca:	4299      	cmp	r1, r3
 80056cc:	bfde      	ittt	le
 80056ce:	2330      	movle	r3, #48	@ 0x30
 80056d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80056d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80056d8:	1b92      	subs	r2, r2, r6
 80056da:	6122      	str	r2, [r4, #16]
 80056dc:	f8cd a000 	str.w	sl, [sp]
 80056e0:	464b      	mov	r3, r9
 80056e2:	aa03      	add	r2, sp, #12
 80056e4:	4621      	mov	r1, r4
 80056e6:	4640      	mov	r0, r8
 80056e8:	f7ff fee6 	bl	80054b8 <_printf_common>
 80056ec:	3001      	adds	r0, #1
 80056ee:	d14a      	bne.n	8005786 <_printf_i+0x1f2>
 80056f0:	f04f 30ff 	mov.w	r0, #4294967295
 80056f4:	b004      	add	sp, #16
 80056f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056fa:	6823      	ldr	r3, [r4, #0]
 80056fc:	f043 0320 	orr.w	r3, r3, #32
 8005700:	6023      	str	r3, [r4, #0]
 8005702:	4833      	ldr	r0, [pc, #204]	@ (80057d0 <_printf_i+0x23c>)
 8005704:	2778      	movs	r7, #120	@ 0x78
 8005706:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800570a:	6823      	ldr	r3, [r4, #0]
 800570c:	6831      	ldr	r1, [r6, #0]
 800570e:	061f      	lsls	r7, r3, #24
 8005710:	f851 5b04 	ldr.w	r5, [r1], #4
 8005714:	d402      	bmi.n	800571c <_printf_i+0x188>
 8005716:	065f      	lsls	r7, r3, #25
 8005718:	bf48      	it	mi
 800571a:	b2ad      	uxthmi	r5, r5
 800571c:	6031      	str	r1, [r6, #0]
 800571e:	07d9      	lsls	r1, r3, #31
 8005720:	bf44      	itt	mi
 8005722:	f043 0320 	orrmi.w	r3, r3, #32
 8005726:	6023      	strmi	r3, [r4, #0]
 8005728:	b11d      	cbz	r5, 8005732 <_printf_i+0x19e>
 800572a:	2310      	movs	r3, #16
 800572c:	e7ac      	b.n	8005688 <_printf_i+0xf4>
 800572e:	4827      	ldr	r0, [pc, #156]	@ (80057cc <_printf_i+0x238>)
 8005730:	e7e9      	b.n	8005706 <_printf_i+0x172>
 8005732:	6823      	ldr	r3, [r4, #0]
 8005734:	f023 0320 	bic.w	r3, r3, #32
 8005738:	6023      	str	r3, [r4, #0]
 800573a:	e7f6      	b.n	800572a <_printf_i+0x196>
 800573c:	4616      	mov	r6, r2
 800573e:	e7bd      	b.n	80056bc <_printf_i+0x128>
 8005740:	6833      	ldr	r3, [r6, #0]
 8005742:	6825      	ldr	r5, [r4, #0]
 8005744:	6961      	ldr	r1, [r4, #20]
 8005746:	1d18      	adds	r0, r3, #4
 8005748:	6030      	str	r0, [r6, #0]
 800574a:	062e      	lsls	r6, r5, #24
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	d501      	bpl.n	8005754 <_printf_i+0x1c0>
 8005750:	6019      	str	r1, [r3, #0]
 8005752:	e002      	b.n	800575a <_printf_i+0x1c6>
 8005754:	0668      	lsls	r0, r5, #25
 8005756:	d5fb      	bpl.n	8005750 <_printf_i+0x1bc>
 8005758:	8019      	strh	r1, [r3, #0]
 800575a:	2300      	movs	r3, #0
 800575c:	6123      	str	r3, [r4, #16]
 800575e:	4616      	mov	r6, r2
 8005760:	e7bc      	b.n	80056dc <_printf_i+0x148>
 8005762:	6833      	ldr	r3, [r6, #0]
 8005764:	1d1a      	adds	r2, r3, #4
 8005766:	6032      	str	r2, [r6, #0]
 8005768:	681e      	ldr	r6, [r3, #0]
 800576a:	6862      	ldr	r2, [r4, #4]
 800576c:	2100      	movs	r1, #0
 800576e:	4630      	mov	r0, r6
 8005770:	f7fa fd46 	bl	8000200 <memchr>
 8005774:	b108      	cbz	r0, 800577a <_printf_i+0x1e6>
 8005776:	1b80      	subs	r0, r0, r6
 8005778:	6060      	str	r0, [r4, #4]
 800577a:	6863      	ldr	r3, [r4, #4]
 800577c:	6123      	str	r3, [r4, #16]
 800577e:	2300      	movs	r3, #0
 8005780:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005784:	e7aa      	b.n	80056dc <_printf_i+0x148>
 8005786:	6923      	ldr	r3, [r4, #16]
 8005788:	4632      	mov	r2, r6
 800578a:	4649      	mov	r1, r9
 800578c:	4640      	mov	r0, r8
 800578e:	47d0      	blx	sl
 8005790:	3001      	adds	r0, #1
 8005792:	d0ad      	beq.n	80056f0 <_printf_i+0x15c>
 8005794:	6823      	ldr	r3, [r4, #0]
 8005796:	079b      	lsls	r3, r3, #30
 8005798:	d413      	bmi.n	80057c2 <_printf_i+0x22e>
 800579a:	68e0      	ldr	r0, [r4, #12]
 800579c:	9b03      	ldr	r3, [sp, #12]
 800579e:	4298      	cmp	r0, r3
 80057a0:	bfb8      	it	lt
 80057a2:	4618      	movlt	r0, r3
 80057a4:	e7a6      	b.n	80056f4 <_printf_i+0x160>
 80057a6:	2301      	movs	r3, #1
 80057a8:	4632      	mov	r2, r6
 80057aa:	4649      	mov	r1, r9
 80057ac:	4640      	mov	r0, r8
 80057ae:	47d0      	blx	sl
 80057b0:	3001      	adds	r0, #1
 80057b2:	d09d      	beq.n	80056f0 <_printf_i+0x15c>
 80057b4:	3501      	adds	r5, #1
 80057b6:	68e3      	ldr	r3, [r4, #12]
 80057b8:	9903      	ldr	r1, [sp, #12]
 80057ba:	1a5b      	subs	r3, r3, r1
 80057bc:	42ab      	cmp	r3, r5
 80057be:	dcf2      	bgt.n	80057a6 <_printf_i+0x212>
 80057c0:	e7eb      	b.n	800579a <_printf_i+0x206>
 80057c2:	2500      	movs	r5, #0
 80057c4:	f104 0619 	add.w	r6, r4, #25
 80057c8:	e7f5      	b.n	80057b6 <_printf_i+0x222>
 80057ca:	bf00      	nop
 80057cc:	08005935 	.word	0x08005935
 80057d0:	08005946 	.word	0x08005946

080057d4 <memmove>:
 80057d4:	4288      	cmp	r0, r1
 80057d6:	b510      	push	{r4, lr}
 80057d8:	eb01 0402 	add.w	r4, r1, r2
 80057dc:	d902      	bls.n	80057e4 <memmove+0x10>
 80057de:	4284      	cmp	r4, r0
 80057e0:	4623      	mov	r3, r4
 80057e2:	d807      	bhi.n	80057f4 <memmove+0x20>
 80057e4:	1e43      	subs	r3, r0, #1
 80057e6:	42a1      	cmp	r1, r4
 80057e8:	d008      	beq.n	80057fc <memmove+0x28>
 80057ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80057ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80057f2:	e7f8      	b.n	80057e6 <memmove+0x12>
 80057f4:	4402      	add	r2, r0
 80057f6:	4601      	mov	r1, r0
 80057f8:	428a      	cmp	r2, r1
 80057fa:	d100      	bne.n	80057fe <memmove+0x2a>
 80057fc:	bd10      	pop	{r4, pc}
 80057fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005802:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005806:	e7f7      	b.n	80057f8 <memmove+0x24>

08005808 <_sbrk_r>:
 8005808:	b538      	push	{r3, r4, r5, lr}
 800580a:	4d06      	ldr	r5, [pc, #24]	@ (8005824 <_sbrk_r+0x1c>)
 800580c:	2300      	movs	r3, #0
 800580e:	4604      	mov	r4, r0
 8005810:	4608      	mov	r0, r1
 8005812:	602b      	str	r3, [r5, #0]
 8005814:	f7fc f8e4 	bl	80019e0 <_sbrk>
 8005818:	1c43      	adds	r3, r0, #1
 800581a:	d102      	bne.n	8005822 <_sbrk_r+0x1a>
 800581c:	682b      	ldr	r3, [r5, #0]
 800581e:	b103      	cbz	r3, 8005822 <_sbrk_r+0x1a>
 8005820:	6023      	str	r3, [r4, #0]
 8005822:	bd38      	pop	{r3, r4, r5, pc}
 8005824:	200004bc 	.word	0x200004bc

08005828 <memcpy>:
 8005828:	440a      	add	r2, r1
 800582a:	4291      	cmp	r1, r2
 800582c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005830:	d100      	bne.n	8005834 <memcpy+0xc>
 8005832:	4770      	bx	lr
 8005834:	b510      	push	{r4, lr}
 8005836:	f811 4b01 	ldrb.w	r4, [r1], #1
 800583a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800583e:	4291      	cmp	r1, r2
 8005840:	d1f9      	bne.n	8005836 <memcpy+0xe>
 8005842:	bd10      	pop	{r4, pc}

08005844 <_realloc_r>:
 8005844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005848:	4680      	mov	r8, r0
 800584a:	4615      	mov	r5, r2
 800584c:	460c      	mov	r4, r1
 800584e:	b921      	cbnz	r1, 800585a <_realloc_r+0x16>
 8005850:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005854:	4611      	mov	r1, r2
 8005856:	f7ff bc4b 	b.w	80050f0 <_malloc_r>
 800585a:	b92a      	cbnz	r2, 8005868 <_realloc_r+0x24>
 800585c:	f7ff fbdc 	bl	8005018 <_free_r>
 8005860:	2400      	movs	r4, #0
 8005862:	4620      	mov	r0, r4
 8005864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005868:	f000 f81a 	bl	80058a0 <_malloc_usable_size_r>
 800586c:	4285      	cmp	r5, r0
 800586e:	4606      	mov	r6, r0
 8005870:	d802      	bhi.n	8005878 <_realloc_r+0x34>
 8005872:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005876:	d8f4      	bhi.n	8005862 <_realloc_r+0x1e>
 8005878:	4629      	mov	r1, r5
 800587a:	4640      	mov	r0, r8
 800587c:	f7ff fc38 	bl	80050f0 <_malloc_r>
 8005880:	4607      	mov	r7, r0
 8005882:	2800      	cmp	r0, #0
 8005884:	d0ec      	beq.n	8005860 <_realloc_r+0x1c>
 8005886:	42b5      	cmp	r5, r6
 8005888:	462a      	mov	r2, r5
 800588a:	4621      	mov	r1, r4
 800588c:	bf28      	it	cs
 800588e:	4632      	movcs	r2, r6
 8005890:	f7ff ffca 	bl	8005828 <memcpy>
 8005894:	4621      	mov	r1, r4
 8005896:	4640      	mov	r0, r8
 8005898:	f7ff fbbe 	bl	8005018 <_free_r>
 800589c:	463c      	mov	r4, r7
 800589e:	e7e0      	b.n	8005862 <_realloc_r+0x1e>

080058a0 <_malloc_usable_size_r>:
 80058a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058a4:	1f18      	subs	r0, r3, #4
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	bfbc      	itt	lt
 80058aa:	580b      	ldrlt	r3, [r1, r0]
 80058ac:	18c0      	addlt	r0, r0, r3
 80058ae:	4770      	bx	lr

080058b0 <_init>:
 80058b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058b2:	bf00      	nop
 80058b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058b6:	bc08      	pop	{r3}
 80058b8:	469e      	mov	lr, r3
 80058ba:	4770      	bx	lr

080058bc <_fini>:
 80058bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058be:	bf00      	nop
 80058c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058c2:	bc08      	pop	{r3}
 80058c4:	469e      	mov	lr, r3
 80058c6:	4770      	bx	lr
