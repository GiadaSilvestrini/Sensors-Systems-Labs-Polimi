
Ex11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097dc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  08009980  08009980  0000a980  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d50  08009d50  0000b208  2**0
                  CONTENTS
  4 .ARM          00000008  08009d50  08009d50  0000ad50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d58  08009d58  0000b208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d58  08009d58  0000ad58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d5c  08009d5c  0000ad5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  08009d60  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000448  20000208  08009f68  0000b208  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000650  08009f68  0000b650  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b208  2**0
                  CONTENTS, READONLY
 12 .debug_info   000116b5  00000000  00000000  0000b238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002636  00000000  00000000  0001c8ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001098  00000000  00000000  0001ef28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cfe  00000000  00000000  0001ffc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c36  00000000  00000000  00020cbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013213  00000000  00000000  000398f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d2e1  00000000  00000000  0004cb07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e9de8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a84  00000000  00000000  000e9e2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000ef8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000208 	.word	0x20000208
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009964 	.word	0x08009964

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000020c 	.word	0x2000020c
 80001dc:	08009964 	.word	0x08009964

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <HAL_TIM_PeriodElapsedCallback>:
static void MX_TIM1_Init(void);
static void MX_SPI1_Init(void);
static void MX_TIM10_Init(void);
static void MX_TIM11_Init(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000f48:	b5b0      	push	{r4, r5, r7, lr}
 8000f4a:	b09e      	sub	sp, #120	@ 0x78
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	if(htim==&htim11){
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4a5d      	ldr	r2, [pc, #372]	@ (80010c8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	f040 809b 	bne.w	8001090 <HAL_TIM_PeriodElapsedCallback+0x148>
		float temp = mean*3.3/4096;
 8000f5a:	4b5c      	ldr	r3, [pc, #368]	@ (80010cc <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff fafa 	bl	8000558 <__aeabi_f2d>
 8000f64:	a354      	add	r3, pc, #336	@ (adr r3, 80010b8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f6a:	f7ff fb4d 	bl	8000608 <__aeabi_dmul>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	460b      	mov	r3, r1
 8000f72:	4610      	mov	r0, r2
 8000f74:	4619      	mov	r1, r3
 8000f76:	f04f 0200 	mov.w	r2, #0
 8000f7a:	4b55      	ldr	r3, [pc, #340]	@ (80010d0 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000f7c:	f7ff fc6e 	bl	800085c <__aeabi_ddiv>
 8000f80:	4602      	mov	r2, r0
 8000f82:	460b      	mov	r3, r1
 8000f84:	4610      	mov	r0, r2
 8000f86:	4619      	mov	r1, r3
 8000f88:	f7ff fe16 	bl	8000bb8 <__aeabi_d2f>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	677b      	str	r3, [r7, #116]	@ 0x74
		float ldr = (temp*100)/(3.3-temp);
 8000f90:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8000f94:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 80010d4 <HAL_TIM_PeriodElapsedCallback+0x18c>
 8000f98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f9c:	ee17 0a90 	vmov	r0, s15
 8000fa0:	f7ff fada 	bl	8000558 <__aeabi_f2d>
 8000fa4:	4604      	mov	r4, r0
 8000fa6:	460d      	mov	r5, r1
 8000fa8:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8000faa:	f7ff fad5 	bl	8000558 <__aeabi_f2d>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	a141      	add	r1, pc, #260	@ (adr r1, 80010b8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000fb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000fb8:	f7ff f96e 	bl	8000298 <__aeabi_dsub>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	4620      	mov	r0, r4
 8000fc2:	4629      	mov	r1, r5
 8000fc4:	f7ff fc4a 	bl	800085c <__aeabi_ddiv>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	460b      	mov	r3, r1
 8000fcc:	4610      	mov	r0, r2
 8000fce:	4619      	mov	r1, r3
 8000fd0:	f7ff fdf2 	bl	8000bb8 <__aeabi_d2f>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	673b      	str	r3, [r7, #112]	@ 0x70
		lux = 10*pow(100/ldr,1.25);
 8000fd8:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 80010d4 <HAL_TIM_PeriodElapsedCallback+0x18c>
 8000fdc:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8000fe0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000fe4:	ee16 0a90 	vmov	r0, s13
 8000fe8:	f7ff fab6 	bl	8000558 <__aeabi_f2d>
 8000fec:	4602      	mov	r2, r0
 8000fee:	460b      	mov	r3, r1
 8000ff0:	ed9f 1b33 	vldr	d1, [pc, #204]	@ 80010c0 <HAL_TIM_PeriodElapsedCallback+0x178>
 8000ff4:	ec43 2b10 	vmov	d0, r2, r3
 8000ff8:	f007 fd56 	bl	8008aa8 <pow>
 8000ffc:	ec51 0b10 	vmov	r0, r1, d0
 8001000:	f04f 0200 	mov.w	r2, #0
 8001004:	4b34      	ldr	r3, [pc, #208]	@ (80010d8 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001006:	f7ff faff 	bl	8000608 <__aeabi_dmul>
 800100a:	4602      	mov	r2, r0
 800100c:	460b      	mov	r3, r1
 800100e:	4610      	mov	r0, r2
 8001010:	4619      	mov	r1, r3
 8001012:	f7ff fdd1 	bl	8000bb8 <__aeabi_d2f>
 8001016:	4603      	mov	r3, r0
 8001018:	4a30      	ldr	r2, [pc, #192]	@ (80010dc <HAL_TIM_PeriodElapsedCallback+0x194>)
 800101a:	6013      	str	r3, [r2, #0]
		char msg[100]="";
 800101c:	2300      	movs	r3, #0
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	f107 0310 	add.w	r3, r7, #16
 8001024:	2260      	movs	r2, #96	@ 0x60
 8001026:	2100      	movs	r1, #0
 8001028:	4618      	mov	r0, r3
 800102a:	f005 fc72 	bl	8006912 <memset>
		sprintf(msg, "Lux: %f \r\n",lux);
 800102e:	4b2b      	ldr	r3, [pc, #172]	@ (80010dc <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff fa90 	bl	8000558 <__aeabi_f2d>
 8001038:	4602      	mov	r2, r0
 800103a:	460b      	mov	r3, r1
 800103c:	f107 000c 	add.w	r0, r7, #12
 8001040:	4927      	ldr	r1, [pc, #156]	@ (80010e0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001042:	f005 fc03 	bl	800684c <siprintf>
		HAL_UART_Transmit(&huart2, msg, sizeof(msg), 1000);
 8001046:	f107 010c 	add.w	r1, r7, #12
 800104a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800104e:	2264      	movs	r2, #100	@ 0x64
 8001050:	4824      	ldr	r0, [pc, #144]	@ (80010e4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001052:	f004 fb6c 	bl	800572e <HAL_UART_Transmit>
		i=0;
 8001056:	4b24      	ldr	r3, [pc, #144]	@ (80010e8 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001058:	f04f 0200 	mov.w	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
		mean=0;
 800105e:	4b1b      	ldr	r3, [pc, #108]	@ (80010cc <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001060:	f04f 0200 	mov.w	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
		if(lux<250){
 8001066:	4b1d      	ldr	r3, [pc, #116]	@ (80010dc <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001068:	edd3 7a00 	vldr	s15, [r3]
 800106c:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80010ec <HAL_TIM_PeriodElapsedCallback+0x1a4>
 8001070:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001078:	d505      	bpl.n	8001086 <HAL_TIM_PeriodElapsedCallback+0x13e>
			memcpy(matrix, matrix_D, sizeof(matrix));
 800107a:	4b1d      	ldr	r3, [pc, #116]	@ (80010f0 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 800107c:	4a1d      	ldr	r2, [pc, #116]	@ (80010f4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800107e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001080:	c303      	stmia	r3!, {r0, r1}
 8001082:	801a      	strh	r2, [r3, #0]
 8001084:	e004      	b.n	8001090 <HAL_TIM_PeriodElapsedCallback+0x148>
		}else{
			memcpy(matrix, matrix_L, sizeof(matrix));
 8001086:	4b1a      	ldr	r3, [pc, #104]	@ (80010f0 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001088:	4a1b      	ldr	r2, [pc, #108]	@ (80010f8 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 800108a:	ca07      	ldmia	r2, {r0, r1, r2}
 800108c:	c303      	stmia	r3!, {r0, r1}
 800108e:	801a      	strh	r2, [r3, #0]
		}
	}
	if(htim==&htim10)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4a1a      	ldr	r2, [pc, #104]	@ (80010fc <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d109      	bne.n	80010ac <HAL_TIM_PeriodElapsedCallback+0x164>
		HAL_SPI_Transmit_DMA(&hspi1, matrix[column_index], 2);
 8001098:	4b19      	ldr	r3, [pc, #100]	@ (8001100 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	4a14      	ldr	r2, [pc, #80]	@ (80010f0 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80010a0:	4413      	add	r3, r2
 80010a2:	2202      	movs	r2, #2
 80010a4:	4619      	mov	r1, r3
 80010a6:	4817      	ldr	r0, [pc, #92]	@ (8001104 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80010a8:	f003 f83c 	bl	8004124 <HAL_SPI_Transmit_DMA>
}
 80010ac:	bf00      	nop
 80010ae:	3778      	adds	r7, #120	@ 0x78
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bdb0      	pop	{r4, r5, r7, pc}
 80010b4:	f3af 8000 	nop.w
 80010b8:	66666666 	.word	0x66666666
 80010bc:	400a6666 	.word	0x400a6666
 80010c0:	00000000 	.word	0x00000000
 80010c4:	3ff40000 	.word	0x3ff40000
 80010c8:	2000045c 	.word	0x2000045c
 80010cc:	200004e8 	.word	0x200004e8
 80010d0:	40b00000 	.word	0x40b00000
 80010d4:	42c80000 	.word	0x42c80000
 80010d8:	40240000 	.word	0x40240000
 80010dc:	200004f4 	.word	0x200004f4
 80010e0:	08009980 	.word	0x08009980
 80010e4:	200004a4 	.word	0x200004a4
 80010e8:	200004f0 	.word	0x200004f0
 80010ec:	437a0000 	.word	0x437a0000
 80010f0:	20000000 	.word	0x20000000
 80010f4:	20000018 	.word	0x20000018
 80010f8:	2000000c 	.word	0x2000000c
 80010fc:	20000414 	.word	0x20000414
 8001100:	200004f8 	.word	0x200004f8
 8001104:	200002cc 	.word	0x200002cc

08001108 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	if(hadc == &hadc1){
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a17      	ldr	r2, [pc, #92]	@ (8001170 <HAL_ADC_ConvCpltCallback+0x68>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d125      	bne.n	8001164 <HAL_ADC_ConvCpltCallback+0x5c>
		i++;
 8001118:	4b16      	ldr	r3, [pc, #88]	@ (8001174 <HAL_ADC_ConvCpltCallback+0x6c>)
 800111a:	edd3 7a00 	vldr	s15, [r3]
 800111e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001122:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001126:	4b13      	ldr	r3, [pc, #76]	@ (8001174 <HAL_ADC_ConvCpltCallback+0x6c>)
 8001128:	edc3 7a00 	vstr	s15, [r3]
		mean=((mean*(i-1))+value)/i;
 800112c:	4b11      	ldr	r3, [pc, #68]	@ (8001174 <HAL_ADC_ConvCpltCallback+0x6c>)
 800112e:	edd3 7a00 	vldr	s15, [r3]
 8001132:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001136:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800113a:	4b0f      	ldr	r3, [pc, #60]	@ (8001178 <HAL_ADC_ConvCpltCallback+0x70>)
 800113c:	edd3 7a00 	vldr	s15, [r3]
 8001140:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001144:	4b0d      	ldr	r3, [pc, #52]	@ (800117c <HAL_ADC_ConvCpltCallback+0x74>)
 8001146:	881b      	ldrh	r3, [r3, #0]
 8001148:	ee07 3a90 	vmov	s15, r3
 800114c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001150:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001154:	4b07      	ldr	r3, [pc, #28]	@ (8001174 <HAL_ADC_ConvCpltCallback+0x6c>)
 8001156:	ed93 7a00 	vldr	s14, [r3]
 800115a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800115e:	4b06      	ldr	r3, [pc, #24]	@ (8001178 <HAL_ADC_ConvCpltCallback+0x70>)
 8001160:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	20000224 	.word	0x20000224
 8001174:	200004f0 	.word	0x200004f0
 8001178:	200004e8 	.word	0x200004e8
 800117c:	200004ec 	.word	0x200004ec

08001180 <HAL_SPI_TxCpltCallback>:
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi){
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
	if(hspi==&hspi1){
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4a0e      	ldr	r2, [pc, #56]	@ (80011c4 <HAL_SPI_TxCpltCallback+0x44>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d115      	bne.n	80011bc <HAL_SPI_TxCpltCallback+0x3c>
		HAL_GPIO_WritePin(RCLK_PIN, GPIO_PIN_SET);
 8001190:	2201      	movs	r2, #1
 8001192:	2140      	movs	r1, #64	@ 0x40
 8001194:	480c      	ldr	r0, [pc, #48]	@ (80011c8 <HAL_SPI_TxCpltCallback+0x48>)
 8001196:	f002 fa89 	bl	80036ac <HAL_GPIO_WritePin>
		if(++column_index>4)
 800119a:	4b0c      	ldr	r3, [pc, #48]	@ (80011cc <HAL_SPI_TxCpltCallback+0x4c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	3301      	adds	r3, #1
 80011a0:	4a0a      	ldr	r2, [pc, #40]	@ (80011cc <HAL_SPI_TxCpltCallback+0x4c>)
 80011a2:	6013      	str	r3, [r2, #0]
 80011a4:	4b09      	ldr	r3, [pc, #36]	@ (80011cc <HAL_SPI_TxCpltCallback+0x4c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2b04      	cmp	r3, #4
 80011aa:	dd02      	ble.n	80011b2 <HAL_SPI_TxCpltCallback+0x32>
			column_index=0;
 80011ac:	4b07      	ldr	r3, [pc, #28]	@ (80011cc <HAL_SPI_TxCpltCallback+0x4c>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(RCLK_PIN, GPIO_PIN_RESET);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2140      	movs	r1, #64	@ 0x40
 80011b6:	4804      	ldr	r0, [pc, #16]	@ (80011c8 <HAL_SPI_TxCpltCallback+0x48>)
 80011b8:	f002 fa78 	bl	80036ac <HAL_GPIO_WritePin>
	}
}
 80011bc:	bf00      	nop
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	200002cc 	.word	0x200002cc
 80011c8:	40020400 	.word	0x40020400
 80011cc:	200004f8 	.word	0x200004f8

080011d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011d4:	f000 fec4 	bl	8001f60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011d8:	f000 f82c 	bl	8001234 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011dc:	f000 faa8 	bl	8001730 <MX_GPIO_Init>
  MX_DMA_Init();
 80011e0:	f000 fa7e 	bl	80016e0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80011e4:	f000 fa52 	bl	800168c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80011e8:	f000 f890 	bl	800130c <MX_ADC1_Init>
  MX_TIM3_Init();
 80011ec:	f000 f9b8 	bl	8001560 <MX_TIM3_Init>
  MX_TIM1_Init();
 80011f0:	f000 f914 	bl	800141c <MX_TIM1_Init>
  MX_SPI1_Init();
 80011f4:	f000 f8dc 	bl	80013b0 <MX_SPI1_Init>
  MX_TIM10_Init();
 80011f8:	f000 fa00 	bl	80015fc <MX_TIM10_Init>
  MX_TIM11_Init();
 80011fc:	f000 fa22 	bl	8001644 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, &value, 1);
 8001200:	2201      	movs	r2, #1
 8001202:	4907      	ldr	r1, [pc, #28]	@ (8001220 <main+0x50>)
 8001204:	4807      	ldr	r0, [pc, #28]	@ (8001224 <main+0x54>)
 8001206:	f001 f871 	bl	80022ec <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim3);
 800120a:	4807      	ldr	r0, [pc, #28]	@ (8001228 <main+0x58>)
 800120c:	f003 faf8 	bl	8004800 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim11);
 8001210:	4806      	ldr	r0, [pc, #24]	@ (800122c <main+0x5c>)
 8001212:	f003 fb4f 	bl	80048b4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim10);
 8001216:	4806      	ldr	r0, [pc, #24]	@ (8001230 <main+0x60>)
 8001218:	f003 fb4c 	bl	80048b4 <HAL_TIM_Base_Start_IT>
  //HAL_TIM_Base_Start_IT(&htim1);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800121c:	bf00      	nop
 800121e:	e7fd      	b.n	800121c <main+0x4c>
 8001220:	200004ec 	.word	0x200004ec
 8001224:	20000224 	.word	0x20000224
 8001228:	200003cc 	.word	0x200003cc
 800122c:	2000045c 	.word	0x2000045c
 8001230:	20000414 	.word	0x20000414

08001234 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b094      	sub	sp, #80	@ 0x50
 8001238:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800123a:	f107 0320 	add.w	r3, r7, #32
 800123e:	2230      	movs	r2, #48	@ 0x30
 8001240:	2100      	movs	r1, #0
 8001242:	4618      	mov	r0, r3
 8001244:	f005 fb65 	bl	8006912 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001248:	f107 030c 	add.w	r3, r7, #12
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001258:	2300      	movs	r3, #0
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	4b29      	ldr	r3, [pc, #164]	@ (8001304 <SystemClock_Config+0xd0>)
 800125e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001260:	4a28      	ldr	r2, [pc, #160]	@ (8001304 <SystemClock_Config+0xd0>)
 8001262:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001266:	6413      	str	r3, [r2, #64]	@ 0x40
 8001268:	4b26      	ldr	r3, [pc, #152]	@ (8001304 <SystemClock_Config+0xd0>)
 800126a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001270:	60bb      	str	r3, [r7, #8]
 8001272:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001274:	2300      	movs	r3, #0
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	4b23      	ldr	r3, [pc, #140]	@ (8001308 <SystemClock_Config+0xd4>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001280:	4a21      	ldr	r2, [pc, #132]	@ (8001308 <SystemClock_Config+0xd4>)
 8001282:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001286:	6013      	str	r3, [r2, #0]
 8001288:	4b1f      	ldr	r3, [pc, #124]	@ (8001308 <SystemClock_Config+0xd4>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001290:	607b      	str	r3, [r7, #4]
 8001292:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001294:	2302      	movs	r3, #2
 8001296:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001298:	2301      	movs	r3, #1
 800129a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800129c:	2310      	movs	r3, #16
 800129e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012a0:	2302      	movs	r3, #2
 80012a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012a4:	2300      	movs	r3, #0
 80012a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80012a8:	2310      	movs	r3, #16
 80012aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80012ac:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80012b0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80012b2:	2304      	movs	r3, #4
 80012b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80012b6:	2307      	movs	r3, #7
 80012b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ba:	f107 0320 	add.w	r3, r7, #32
 80012be:	4618      	mov	r0, r3
 80012c0:	f002 fa0e 	bl	80036e0 <HAL_RCC_OscConfig>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80012ca:	f000 fa9f 	bl	800180c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ce:	230f      	movs	r3, #15
 80012d0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012d2:	2302      	movs	r3, #2
 80012d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012e4:	f107 030c 	add.w	r3, r7, #12
 80012e8:	2102      	movs	r1, #2
 80012ea:	4618      	mov	r0, r3
 80012ec:	f002 fc70 	bl	8003bd0 <HAL_RCC_ClockConfig>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80012f6:	f000 fa89 	bl	800180c <Error_Handler>
  }
}
 80012fa:	bf00      	nop
 80012fc:	3750      	adds	r7, #80	@ 0x50
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40023800 	.word	0x40023800
 8001308:	40007000 	.word	0x40007000

0800130c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001312:	463b      	mov	r3, r7
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800131e:	4b22      	ldr	r3, [pc, #136]	@ (80013a8 <MX_ADC1_Init+0x9c>)
 8001320:	4a22      	ldr	r2, [pc, #136]	@ (80013ac <MX_ADC1_Init+0xa0>)
 8001322:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001324:	4b20      	ldr	r3, [pc, #128]	@ (80013a8 <MX_ADC1_Init+0x9c>)
 8001326:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800132a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800132c:	4b1e      	ldr	r3, [pc, #120]	@ (80013a8 <MX_ADC1_Init+0x9c>)
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001332:	4b1d      	ldr	r3, [pc, #116]	@ (80013a8 <MX_ADC1_Init+0x9c>)
 8001334:	2200      	movs	r2, #0
 8001336:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001338:	4b1b      	ldr	r3, [pc, #108]	@ (80013a8 <MX_ADC1_Init+0x9c>)
 800133a:	2200      	movs	r2, #0
 800133c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800133e:	4b1a      	ldr	r3, [pc, #104]	@ (80013a8 <MX_ADC1_Init+0x9c>)
 8001340:	2200      	movs	r2, #0
 8001342:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001346:	4b18      	ldr	r3, [pc, #96]	@ (80013a8 <MX_ADC1_Init+0x9c>)
 8001348:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800134c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800134e:	4b16      	ldr	r3, [pc, #88]	@ (80013a8 <MX_ADC1_Init+0x9c>)
 8001350:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001354:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001356:	4b14      	ldr	r3, [pc, #80]	@ (80013a8 <MX_ADC1_Init+0x9c>)
 8001358:	2200      	movs	r2, #0
 800135a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800135c:	4b12      	ldr	r3, [pc, #72]	@ (80013a8 <MX_ADC1_Init+0x9c>)
 800135e:	2201      	movs	r2, #1
 8001360:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001362:	4b11      	ldr	r3, [pc, #68]	@ (80013a8 <MX_ADC1_Init+0x9c>)
 8001364:	2201      	movs	r2, #1
 8001366:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800136a:	4b0f      	ldr	r3, [pc, #60]	@ (80013a8 <MX_ADC1_Init+0x9c>)
 800136c:	2201      	movs	r2, #1
 800136e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001370:	480d      	ldr	r0, [pc, #52]	@ (80013a8 <MX_ADC1_Init+0x9c>)
 8001372:	f000 fe67 	bl	8002044 <HAL_ADC_Init>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800137c:	f000 fa46 	bl	800180c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001380:	2300      	movs	r3, #0
 8001382:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001384:	2301      	movs	r3, #1
 8001386:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001388:	2307      	movs	r3, #7
 800138a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800138c:	463b      	mov	r3, r7
 800138e:	4619      	mov	r1, r3
 8001390:	4805      	ldr	r0, [pc, #20]	@ (80013a8 <MX_ADC1_Init+0x9c>)
 8001392:	f001 f8b9 	bl	8002508 <HAL_ADC_ConfigChannel>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800139c:	f000 fa36 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013a0:	bf00      	nop
 80013a2:	3710      	adds	r7, #16
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20000224 	.word	0x20000224
 80013ac:	40012000 	.word	0x40012000

080013b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013b4:	4b17      	ldr	r3, [pc, #92]	@ (8001414 <MX_SPI1_Init+0x64>)
 80013b6:	4a18      	ldr	r2, [pc, #96]	@ (8001418 <MX_SPI1_Init+0x68>)
 80013b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013ba:	4b16      	ldr	r3, [pc, #88]	@ (8001414 <MX_SPI1_Init+0x64>)
 80013bc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80013c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013c2:	4b14      	ldr	r3, [pc, #80]	@ (8001414 <MX_SPI1_Init+0x64>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013c8:	4b12      	ldr	r3, [pc, #72]	@ (8001414 <MX_SPI1_Init+0x64>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013ce:	4b11      	ldr	r3, [pc, #68]	@ (8001414 <MX_SPI1_Init+0x64>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001414 <MX_SPI1_Init+0x64>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013da:	4b0e      	ldr	r3, [pc, #56]	@ (8001414 <MX_SPI1_Init+0x64>)
 80013dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80013e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001414 <MX_SPI1_Init+0x64>)
 80013e4:	2208      	movs	r2, #8
 80013e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001414 <MX_SPI1_Init+0x64>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013ee:	4b09      	ldr	r3, [pc, #36]	@ (8001414 <MX_SPI1_Init+0x64>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013f4:	4b07      	ldr	r3, [pc, #28]	@ (8001414 <MX_SPI1_Init+0x64>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80013fa:	4b06      	ldr	r3, [pc, #24]	@ (8001414 <MX_SPI1_Init+0x64>)
 80013fc:	220a      	movs	r2, #10
 80013fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001400:	4804      	ldr	r0, [pc, #16]	@ (8001414 <MX_SPI1_Init+0x64>)
 8001402:	f002 fe05 	bl	8004010 <HAL_SPI_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800140c:	f000 f9fe 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001410:	bf00      	nop
 8001412:	bd80      	pop	{r7, pc}
 8001414:	200002cc 	.word	0x200002cc
 8001418:	40013000 	.word	0x40013000

0800141c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b096      	sub	sp, #88	@ 0x58
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001422:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001430:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800143a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	60da      	str	r2, [r3, #12]
 8001448:	611a      	str	r2, [r3, #16]
 800144a:	615a      	str	r2, [r3, #20]
 800144c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	2220      	movs	r2, #32
 8001452:	2100      	movs	r1, #0
 8001454:	4618      	mov	r0, r3
 8001456:	f005 fa5c 	bl	8006912 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800145a:	4b3f      	ldr	r3, [pc, #252]	@ (8001558 <MX_TIM1_Init+0x13c>)
 800145c:	4a3f      	ldr	r2, [pc, #252]	@ (800155c <MX_TIM1_Init+0x140>)
 800145e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8400-1;
 8001460:	4b3d      	ldr	r3, [pc, #244]	@ (8001558 <MX_TIM1_Init+0x13c>)
 8001462:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001466:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001468:	4b3b      	ldr	r3, [pc, #236]	@ (8001558 <MX_TIM1_Init+0x13c>)
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 800146e:	4b3a      	ldr	r3, [pc, #232]	@ (8001558 <MX_TIM1_Init+0x13c>)
 8001470:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001474:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001476:	4b38      	ldr	r3, [pc, #224]	@ (8001558 <MX_TIM1_Init+0x13c>)
 8001478:	2200      	movs	r2, #0
 800147a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800147c:	4b36      	ldr	r3, [pc, #216]	@ (8001558 <MX_TIM1_Init+0x13c>)
 800147e:	2200      	movs	r2, #0
 8001480:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001482:	4b35      	ldr	r3, [pc, #212]	@ (8001558 <MX_TIM1_Init+0x13c>)
 8001484:	2200      	movs	r2, #0
 8001486:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001488:	4833      	ldr	r0, [pc, #204]	@ (8001558 <MX_TIM1_Init+0x13c>)
 800148a:	f003 f969 	bl	8004760 <HAL_TIM_Base_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001494:	f000 f9ba 	bl	800180c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001498:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800149c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800149e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80014a2:	4619      	mov	r1, r3
 80014a4:	482c      	ldr	r0, [pc, #176]	@ (8001558 <MX_TIM1_Init+0x13c>)
 80014a6:	f003 fc8b 	bl	8004dc0 <HAL_TIM_ConfigClockSource>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80014b0:	f000 f9ac 	bl	800180c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014b4:	4828      	ldr	r0, [pc, #160]	@ (8001558 <MX_TIM1_Init+0x13c>)
 80014b6:	f003 fa5f 	bl	8004978 <HAL_TIM_PWM_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80014c0:	f000 f9a4 	bl	800180c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c4:	2300      	movs	r3, #0
 80014c6:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c8:	2300      	movs	r3, #0
 80014ca:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014cc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80014d0:	4619      	mov	r1, r3
 80014d2:	4821      	ldr	r0, [pc, #132]	@ (8001558 <MX_TIM1_Init+0x13c>)
 80014d4:	f004 f80a 	bl	80054ec <HAL_TIMEx_MasterConfigSynchronization>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80014de:	f000 f995 	bl	800180c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014e2:	2360      	movs	r3, #96	@ 0x60
 80014e4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014ea:	2300      	movs	r3, #0
 80014ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014ee:	2300      	movs	r3, #0
 80014f0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014f2:	2300      	movs	r3, #0
 80014f4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014f6:	2300      	movs	r3, #0
 80014f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014fa:	2300      	movs	r3, #0
 80014fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001502:	2204      	movs	r2, #4
 8001504:	4619      	mov	r1, r3
 8001506:	4814      	ldr	r0, [pc, #80]	@ (8001558 <MX_TIM1_Init+0x13c>)
 8001508:	f003 fb98 	bl	8004c3c <HAL_TIM_PWM_ConfigChannel>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001512:	f000 f97b 	bl	800180c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001516:	2300      	movs	r3, #0
 8001518:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800151a:	2300      	movs	r3, #0
 800151c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001522:	2300      	movs	r3, #0
 8001524:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001526:	2300      	movs	r3, #0
 8001528:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800152a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800152e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001530:	2300      	movs	r3, #0
 8001532:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001534:	1d3b      	adds	r3, r7, #4
 8001536:	4619      	mov	r1, r3
 8001538:	4807      	ldr	r0, [pc, #28]	@ (8001558 <MX_TIM1_Init+0x13c>)
 800153a:	f004 f845 	bl	80055c8 <HAL_TIMEx_ConfigBreakDeadTime>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001544:	f000 f962 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001548:	4803      	ldr	r0, [pc, #12]	@ (8001558 <MX_TIM1_Init+0x13c>)
 800154a:	f000 fb11 	bl	8001b70 <HAL_TIM_MspPostInit>

}
 800154e:	bf00      	nop
 8001550:	3758      	adds	r7, #88	@ 0x58
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000384 	.word	0x20000384
 800155c:	40010000 	.word	0x40010000

08001560 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001566:	f107 0308 	add.w	r3, r7, #8
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	605a      	str	r2, [r3, #4]
 8001570:	609a      	str	r2, [r3, #8]
 8001572:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001574:	463b      	mov	r3, r7
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800157c:	4b1d      	ldr	r3, [pc, #116]	@ (80015f4 <MX_TIM3_Init+0x94>)
 800157e:	4a1e      	ldr	r2, [pc, #120]	@ (80015f8 <MX_TIM3_Init+0x98>)
 8001580:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 8001582:	4b1c      	ldr	r3, [pc, #112]	@ (80015f4 <MX_TIM3_Init+0x94>)
 8001584:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001588:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800158a:	4b1a      	ldr	r3, [pc, #104]	@ (80015f4 <MX_TIM3_Init+0x94>)
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10-1;
 8001590:	4b18      	ldr	r3, [pc, #96]	@ (80015f4 <MX_TIM3_Init+0x94>)
 8001592:	2209      	movs	r2, #9
 8001594:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001596:	4b17      	ldr	r3, [pc, #92]	@ (80015f4 <MX_TIM3_Init+0x94>)
 8001598:	2200      	movs	r2, #0
 800159a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800159c:	4b15      	ldr	r3, [pc, #84]	@ (80015f4 <MX_TIM3_Init+0x94>)
 800159e:	2200      	movs	r2, #0
 80015a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015a2:	4814      	ldr	r0, [pc, #80]	@ (80015f4 <MX_TIM3_Init+0x94>)
 80015a4:	f003 f8dc 	bl	8004760 <HAL_TIM_Base_Init>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80015ae:	f000 f92d 	bl	800180c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015b8:	f107 0308 	add.w	r3, r7, #8
 80015bc:	4619      	mov	r1, r3
 80015be:	480d      	ldr	r0, [pc, #52]	@ (80015f4 <MX_TIM3_Init+0x94>)
 80015c0:	f003 fbfe 	bl	8004dc0 <HAL_TIM_ConfigClockSource>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80015ca:	f000 f91f 	bl	800180c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80015ce:	2320      	movs	r3, #32
 80015d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d2:	2300      	movs	r3, #0
 80015d4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015d6:	463b      	mov	r3, r7
 80015d8:	4619      	mov	r1, r3
 80015da:	4806      	ldr	r0, [pc, #24]	@ (80015f4 <MX_TIM3_Init+0x94>)
 80015dc:	f003 ff86 	bl	80054ec <HAL_TIMEx_MasterConfigSynchronization>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80015e6:	f000 f911 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015ea:	bf00      	nop
 80015ec:	3718      	adds	r7, #24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	200003cc 	.word	0x200003cc
 80015f8:	40000400 	.word	0x40000400

080015fc <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001600:	4b0e      	ldr	r3, [pc, #56]	@ (800163c <MX_TIM10_Init+0x40>)
 8001602:	4a0f      	ldr	r2, [pc, #60]	@ (8001640 <MX_TIM10_Init+0x44>)
 8001604:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 84-1;
 8001606:	4b0d      	ldr	r3, [pc, #52]	@ (800163c <MX_TIM10_Init+0x40>)
 8001608:	2253      	movs	r2, #83	@ 0x53
 800160a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800160c:	4b0b      	ldr	r3, [pc, #44]	@ (800163c <MX_TIM10_Init+0x40>)
 800160e:	2200      	movs	r2, #0
 8001610:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4000-1;
 8001612:	4b0a      	ldr	r3, [pc, #40]	@ (800163c <MX_TIM10_Init+0x40>)
 8001614:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8001618:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800161a:	4b08      	ldr	r3, [pc, #32]	@ (800163c <MX_TIM10_Init+0x40>)
 800161c:	2200      	movs	r2, #0
 800161e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001620:	4b06      	ldr	r3, [pc, #24]	@ (800163c <MX_TIM10_Init+0x40>)
 8001622:	2200      	movs	r2, #0
 8001624:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001626:	4805      	ldr	r0, [pc, #20]	@ (800163c <MX_TIM10_Init+0x40>)
 8001628:	f003 f89a 	bl	8004760 <HAL_TIM_Base_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001632:	f000 f8eb 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000414 	.word	0x20000414
 8001640:	40014400 	.word	0x40014400

08001644 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001648:	4b0e      	ldr	r3, [pc, #56]	@ (8001684 <MX_TIM11_Init+0x40>)
 800164a:	4a0f      	ldr	r2, [pc, #60]	@ (8001688 <MX_TIM11_Init+0x44>)
 800164c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 8400-1;
 800164e:	4b0d      	ldr	r3, [pc, #52]	@ (8001684 <MX_TIM11_Init+0x40>)
 8001650:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001654:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001656:	4b0b      	ldr	r3, [pc, #44]	@ (8001684 <MX_TIM11_Init+0x40>)
 8001658:	2200      	movs	r2, #0
 800165a:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 10000-1;
 800165c:	4b09      	ldr	r3, [pc, #36]	@ (8001684 <MX_TIM11_Init+0x40>)
 800165e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001662:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001664:	4b07      	ldr	r3, [pc, #28]	@ (8001684 <MX_TIM11_Init+0x40>)
 8001666:	2200      	movs	r2, #0
 8001668:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800166a:	4b06      	ldr	r3, [pc, #24]	@ (8001684 <MX_TIM11_Init+0x40>)
 800166c:	2200      	movs	r2, #0
 800166e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001670:	4804      	ldr	r0, [pc, #16]	@ (8001684 <MX_TIM11_Init+0x40>)
 8001672:	f003 f875 	bl	8004760 <HAL_TIM_Base_Init>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 800167c:	f000 f8c6 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001680:	bf00      	nop
 8001682:	bd80      	pop	{r7, pc}
 8001684:	2000045c 	.word	0x2000045c
 8001688:	40014800 	.word	0x40014800

0800168c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001690:	4b11      	ldr	r3, [pc, #68]	@ (80016d8 <MX_USART2_UART_Init+0x4c>)
 8001692:	4a12      	ldr	r2, [pc, #72]	@ (80016dc <MX_USART2_UART_Init+0x50>)
 8001694:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001696:	4b10      	ldr	r3, [pc, #64]	@ (80016d8 <MX_USART2_UART_Init+0x4c>)
 8001698:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800169c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800169e:	4b0e      	ldr	r3, [pc, #56]	@ (80016d8 <MX_USART2_UART_Init+0x4c>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016a4:	4b0c      	ldr	r3, [pc, #48]	@ (80016d8 <MX_USART2_UART_Init+0x4c>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016aa:	4b0b      	ldr	r3, [pc, #44]	@ (80016d8 <MX_USART2_UART_Init+0x4c>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016b0:	4b09      	ldr	r3, [pc, #36]	@ (80016d8 <MX_USART2_UART_Init+0x4c>)
 80016b2:	220c      	movs	r2, #12
 80016b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016b6:	4b08      	ldr	r3, [pc, #32]	@ (80016d8 <MX_USART2_UART_Init+0x4c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016bc:	4b06      	ldr	r3, [pc, #24]	@ (80016d8 <MX_USART2_UART_Init+0x4c>)
 80016be:	2200      	movs	r2, #0
 80016c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016c2:	4805      	ldr	r0, [pc, #20]	@ (80016d8 <MX_USART2_UART_Init+0x4c>)
 80016c4:	f003 ffe6 	bl	8005694 <HAL_UART_Init>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016ce:	f000 f89d 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	200004a4 	.word	0x200004a4
 80016dc:	40004400 	.word	0x40004400

080016e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	607b      	str	r3, [r7, #4]
 80016ea:	4b10      	ldr	r3, [pc, #64]	@ (800172c <MX_DMA_Init+0x4c>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ee:	4a0f      	ldr	r2, [pc, #60]	@ (800172c <MX_DMA_Init+0x4c>)
 80016f0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80016f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f6:	4b0d      	ldr	r3, [pc, #52]	@ (800172c <MX_DMA_Init+0x4c>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016fe:	607b      	str	r3, [r7, #4]
 8001700:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001702:	2200      	movs	r2, #0
 8001704:	2100      	movs	r1, #0
 8001706:	2038      	movs	r0, #56	@ 0x38
 8001708:	f001 fa83 	bl	8002c12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800170c:	2038      	movs	r0, #56	@ 0x38
 800170e:	f001 fa9c 	bl	8002c4a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001712:	2200      	movs	r2, #0
 8001714:	2100      	movs	r1, #0
 8001716:	203b      	movs	r0, #59	@ 0x3b
 8001718:	f001 fa7b 	bl	8002c12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800171c:	203b      	movs	r0, #59	@ 0x3b
 800171e:	f001 fa94 	bl	8002c4a <HAL_NVIC_EnableIRQ>

}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40023800 	.word	0x40023800

08001730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b08a      	sub	sp, #40	@ 0x28
 8001734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001736:	f107 0314 	add.w	r3, r7, #20
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	605a      	str	r2, [r3, #4]
 8001740:	609a      	str	r2, [r3, #8]
 8001742:	60da      	str	r2, [r3, #12]
 8001744:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	613b      	str	r3, [r7, #16]
 800174a:	4b2d      	ldr	r3, [pc, #180]	@ (8001800 <MX_GPIO_Init+0xd0>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174e:	4a2c      	ldr	r2, [pc, #176]	@ (8001800 <MX_GPIO_Init+0xd0>)
 8001750:	f043 0304 	orr.w	r3, r3, #4
 8001754:	6313      	str	r3, [r2, #48]	@ 0x30
 8001756:	4b2a      	ldr	r3, [pc, #168]	@ (8001800 <MX_GPIO_Init+0xd0>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175a:	f003 0304 	and.w	r3, r3, #4
 800175e:	613b      	str	r3, [r7, #16]
 8001760:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	4b26      	ldr	r3, [pc, #152]	@ (8001800 <MX_GPIO_Init+0xd0>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176a:	4a25      	ldr	r2, [pc, #148]	@ (8001800 <MX_GPIO_Init+0xd0>)
 800176c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001770:	6313      	str	r3, [r2, #48]	@ 0x30
 8001772:	4b23      	ldr	r3, [pc, #140]	@ (8001800 <MX_GPIO_Init+0xd0>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001776:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	60bb      	str	r3, [r7, #8]
 8001782:	4b1f      	ldr	r3, [pc, #124]	@ (8001800 <MX_GPIO_Init+0xd0>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001786:	4a1e      	ldr	r2, [pc, #120]	@ (8001800 <MX_GPIO_Init+0xd0>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	6313      	str	r3, [r2, #48]	@ 0x30
 800178e:	4b1c      	ldr	r3, [pc, #112]	@ (8001800 <MX_GPIO_Init+0xd0>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	60bb      	str	r3, [r7, #8]
 8001798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	607b      	str	r3, [r7, #4]
 800179e:	4b18      	ldr	r3, [pc, #96]	@ (8001800 <MX_GPIO_Init+0xd0>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a2:	4a17      	ldr	r2, [pc, #92]	@ (8001800 <MX_GPIO_Init+0xd0>)
 80017a4:	f043 0302 	orr.w	r3, r3, #2
 80017a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017aa:	4b15      	ldr	r3, [pc, #84]	@ (8001800 <MX_GPIO_Init+0xd0>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	607b      	str	r3, [r7, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2140      	movs	r1, #64	@ 0x40
 80017ba:	4812      	ldr	r0, [pc, #72]	@ (8001804 <MX_GPIO_Init+0xd4>)
 80017bc:	f001 ff76 	bl	80036ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017c6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80017ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017d0:	f107 0314 	add.w	r3, r7, #20
 80017d4:	4619      	mov	r1, r3
 80017d6:	480c      	ldr	r0, [pc, #48]	@ (8001808 <MX_GPIO_Init+0xd8>)
 80017d8:	f001 fde4 	bl	80033a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017dc:	2340      	movs	r3, #64	@ 0x40
 80017de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e0:	2301      	movs	r3, #1
 80017e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e8:	2300      	movs	r3, #0
 80017ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ec:	f107 0314 	add.w	r3, r7, #20
 80017f0:	4619      	mov	r1, r3
 80017f2:	4804      	ldr	r0, [pc, #16]	@ (8001804 <MX_GPIO_Init+0xd4>)
 80017f4:	f001 fdd6 	bl	80033a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017f8:	bf00      	nop
 80017fa:	3728      	adds	r7, #40	@ 0x28
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40023800 	.word	0x40023800
 8001804:	40020400 	.word	0x40020400
 8001808:	40020800 	.word	0x40020800

0800180c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001810:	b672      	cpsid	i
}
 8001812:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001814:	bf00      	nop
 8001816:	e7fd      	b.n	8001814 <Error_Handler+0x8>

08001818 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	607b      	str	r3, [r7, #4]
 8001822:	4b10      	ldr	r3, [pc, #64]	@ (8001864 <HAL_MspInit+0x4c>)
 8001824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001826:	4a0f      	ldr	r2, [pc, #60]	@ (8001864 <HAL_MspInit+0x4c>)
 8001828:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800182c:	6453      	str	r3, [r2, #68]	@ 0x44
 800182e:	4b0d      	ldr	r3, [pc, #52]	@ (8001864 <HAL_MspInit+0x4c>)
 8001830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001832:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001836:	607b      	str	r3, [r7, #4]
 8001838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	603b      	str	r3, [r7, #0]
 800183e:	4b09      	ldr	r3, [pc, #36]	@ (8001864 <HAL_MspInit+0x4c>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001842:	4a08      	ldr	r2, [pc, #32]	@ (8001864 <HAL_MspInit+0x4c>)
 8001844:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001848:	6413      	str	r3, [r2, #64]	@ 0x40
 800184a:	4b06      	ldr	r3, [pc, #24]	@ (8001864 <HAL_MspInit+0x4c>)
 800184c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001852:	603b      	str	r3, [r7, #0]
 8001854:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001856:	2007      	movs	r0, #7
 8001858:	f001 f9d0 	bl	8002bfc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800185c:	bf00      	nop
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40023800 	.word	0x40023800

08001868 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08a      	sub	sp, #40	@ 0x28
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001870:	f107 0314 	add.w	r3, r7, #20
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
 800187e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a33      	ldr	r2, [pc, #204]	@ (8001954 <HAL_ADC_MspInit+0xec>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d15f      	bne.n	800194a <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	613b      	str	r3, [r7, #16]
 800188e:	4b32      	ldr	r3, [pc, #200]	@ (8001958 <HAL_ADC_MspInit+0xf0>)
 8001890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001892:	4a31      	ldr	r2, [pc, #196]	@ (8001958 <HAL_ADC_MspInit+0xf0>)
 8001894:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001898:	6453      	str	r3, [r2, #68]	@ 0x44
 800189a:	4b2f      	ldr	r3, [pc, #188]	@ (8001958 <HAL_ADC_MspInit+0xf0>)
 800189c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800189e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018a2:	613b      	str	r3, [r7, #16]
 80018a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	4b2b      	ldr	r3, [pc, #172]	@ (8001958 <HAL_ADC_MspInit+0xf0>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ae:	4a2a      	ldr	r2, [pc, #168]	@ (8001958 <HAL_ADC_MspInit+0xf0>)
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018b6:	4b28      	ldr	r3, [pc, #160]	@ (8001958 <HAL_ADC_MspInit+0xf0>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018c2:	2301      	movs	r3, #1
 80018c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018c6:	2303      	movs	r3, #3
 80018c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ce:	f107 0314 	add.w	r3, r7, #20
 80018d2:	4619      	mov	r1, r3
 80018d4:	4821      	ldr	r0, [pc, #132]	@ (800195c <HAL_ADC_MspInit+0xf4>)
 80018d6:	f001 fd65 	bl	80033a4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80018da:	4b21      	ldr	r3, [pc, #132]	@ (8001960 <HAL_ADC_MspInit+0xf8>)
 80018dc:	4a21      	ldr	r2, [pc, #132]	@ (8001964 <HAL_ADC_MspInit+0xfc>)
 80018de:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80018e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001960 <HAL_ADC_MspInit+0xf8>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001960 <HAL_ADC_MspInit+0xf8>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80018ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001960 <HAL_ADC_MspInit+0xf8>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80018f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001960 <HAL_ADC_MspInit+0xf8>)
 80018f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018f8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80018fa:	4b19      	ldr	r3, [pc, #100]	@ (8001960 <HAL_ADC_MspInit+0xf8>)
 80018fc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001900:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001902:	4b17      	ldr	r3, [pc, #92]	@ (8001960 <HAL_ADC_MspInit+0xf8>)
 8001904:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001908:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800190a:	4b15      	ldr	r3, [pc, #84]	@ (8001960 <HAL_ADC_MspInit+0xf8>)
 800190c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001910:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001912:	4b13      	ldr	r3, [pc, #76]	@ (8001960 <HAL_ADC_MspInit+0xf8>)
 8001914:	2200      	movs	r2, #0
 8001916:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001918:	4b11      	ldr	r3, [pc, #68]	@ (8001960 <HAL_ADC_MspInit+0xf8>)
 800191a:	2200      	movs	r2, #0
 800191c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800191e:	4810      	ldr	r0, [pc, #64]	@ (8001960 <HAL_ADC_MspInit+0xf8>)
 8001920:	f001 f9ae 	bl	8002c80 <HAL_DMA_Init>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800192a:	f7ff ff6f 	bl	800180c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a0b      	ldr	r2, [pc, #44]	@ (8001960 <HAL_ADC_MspInit+0xf8>)
 8001932:	639a      	str	r2, [r3, #56]	@ 0x38
 8001934:	4a0a      	ldr	r2, [pc, #40]	@ (8001960 <HAL_ADC_MspInit+0xf8>)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800193a:	2200      	movs	r2, #0
 800193c:	2100      	movs	r1, #0
 800193e:	2012      	movs	r0, #18
 8001940:	f001 f967 	bl	8002c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001944:	2012      	movs	r0, #18
 8001946:	f001 f980 	bl	8002c4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800194a:	bf00      	nop
 800194c:	3728      	adds	r7, #40	@ 0x28
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40012000 	.word	0x40012000
 8001958:	40023800 	.word	0x40023800
 800195c:	40020000 	.word	0x40020000
 8001960:	2000026c 	.word	0x2000026c
 8001964:	40026410 	.word	0x40026410

08001968 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08a      	sub	sp, #40	@ 0x28
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001970:	f107 0314 	add.w	r3, r7, #20
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a34      	ldr	r2, [pc, #208]	@ (8001a58 <HAL_SPI_MspInit+0xf0>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d161      	bne.n	8001a4e <HAL_SPI_MspInit+0xe6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	613b      	str	r3, [r7, #16]
 800198e:	4b33      	ldr	r3, [pc, #204]	@ (8001a5c <HAL_SPI_MspInit+0xf4>)
 8001990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001992:	4a32      	ldr	r2, [pc, #200]	@ (8001a5c <HAL_SPI_MspInit+0xf4>)
 8001994:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001998:	6453      	str	r3, [r2, #68]	@ 0x44
 800199a:	4b30      	ldr	r3, [pc, #192]	@ (8001a5c <HAL_SPI_MspInit+0xf4>)
 800199c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800199e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019a2:	613b      	str	r3, [r7, #16]
 80019a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	4b2c      	ldr	r3, [pc, #176]	@ (8001a5c <HAL_SPI_MspInit+0xf4>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ae:	4a2b      	ldr	r2, [pc, #172]	@ (8001a5c <HAL_SPI_MspInit+0xf4>)
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019b6:	4b29      	ldr	r3, [pc, #164]	@ (8001a5c <HAL_SPI_MspInit+0xf4>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80019c2:	23e0      	movs	r3, #224	@ 0xe0
 80019c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c6:	2302      	movs	r3, #2
 80019c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ce:	2303      	movs	r3, #3
 80019d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019d2:	2305      	movs	r3, #5
 80019d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d6:	f107 0314 	add.w	r3, r7, #20
 80019da:	4619      	mov	r1, r3
 80019dc:	4820      	ldr	r0, [pc, #128]	@ (8001a60 <HAL_SPI_MspInit+0xf8>)
 80019de:	f001 fce1 	bl	80033a4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80019e2:	4b20      	ldr	r3, [pc, #128]	@ (8001a64 <HAL_SPI_MspInit+0xfc>)
 80019e4:	4a20      	ldr	r2, [pc, #128]	@ (8001a68 <HAL_SPI_MspInit+0x100>)
 80019e6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80019e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001a64 <HAL_SPI_MspInit+0xfc>)
 80019ea:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80019ee:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001a64 <HAL_SPI_MspInit+0xfc>)
 80019f2:	2240      	movs	r2, #64	@ 0x40
 80019f4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001a64 <HAL_SPI_MspInit+0xfc>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019fc:	4b19      	ldr	r3, [pc, #100]	@ (8001a64 <HAL_SPI_MspInit+0xfc>)
 80019fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a02:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a04:	4b17      	ldr	r3, [pc, #92]	@ (8001a64 <HAL_SPI_MspInit+0xfc>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a0a:	4b16      	ldr	r3, [pc, #88]	@ (8001a64 <HAL_SPI_MspInit+0xfc>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001a10:	4b14      	ldr	r3, [pc, #80]	@ (8001a64 <HAL_SPI_MspInit+0xfc>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a16:	4b13      	ldr	r3, [pc, #76]	@ (8001a64 <HAL_SPI_MspInit+0xfc>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a1c:	4b11      	ldr	r3, [pc, #68]	@ (8001a64 <HAL_SPI_MspInit+0xfc>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001a22:	4810      	ldr	r0, [pc, #64]	@ (8001a64 <HAL_SPI_MspInit+0xfc>)
 8001a24:	f001 f92c 	bl	8002c80 <HAL_DMA_Init>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8001a2e:	f7ff feed 	bl	800180c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a0b      	ldr	r2, [pc, #44]	@ (8001a64 <HAL_SPI_MspInit+0xfc>)
 8001a36:	649a      	str	r2, [r3, #72]	@ 0x48
 8001a38:	4a0a      	ldr	r2, [pc, #40]	@ (8001a64 <HAL_SPI_MspInit+0xfc>)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2100      	movs	r1, #0
 8001a42:	2023      	movs	r0, #35	@ 0x23
 8001a44:	f001 f8e5 	bl	8002c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001a48:	2023      	movs	r0, #35	@ 0x23
 8001a4a:	f001 f8fe 	bl	8002c4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a4e:	bf00      	nop
 8001a50:	3728      	adds	r7, #40	@ 0x28
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40013000 	.word	0x40013000
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40020000 	.word	0x40020000
 8001a64:	20000324 	.word	0x20000324
 8001a68:	40026458 	.word	0x40026458

08001a6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a38      	ldr	r2, [pc, #224]	@ (8001b5c <HAL_TIM_Base_MspInit+0xf0>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d11e      	bne.n	8001abc <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	617b      	str	r3, [r7, #20]
 8001a82:	4b37      	ldr	r3, [pc, #220]	@ (8001b60 <HAL_TIM_Base_MspInit+0xf4>)
 8001a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a86:	4a36      	ldr	r2, [pc, #216]	@ (8001b60 <HAL_TIM_Base_MspInit+0xf4>)
 8001a88:	f043 0301 	orr.w	r3, r3, #1
 8001a8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a8e:	4b34      	ldr	r3, [pc, #208]	@ (8001b60 <HAL_TIM_Base_MspInit+0xf4>)
 8001a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	617b      	str	r3, [r7, #20]
 8001a98:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	2019      	movs	r0, #25
 8001aa0:	f001 f8b7 	bl	8002c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001aa4:	2019      	movs	r0, #25
 8001aa6:	f001 f8d0 	bl	8002c4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2100      	movs	r1, #0
 8001aae:	201a      	movs	r0, #26
 8001ab0:	f001 f8af 	bl	8002c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001ab4:	201a      	movs	r0, #26
 8001ab6:	f001 f8c8 	bl	8002c4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001aba:	e04a      	b.n	8001b52 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM3)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a28      	ldr	r2, [pc, #160]	@ (8001b64 <HAL_TIM_Base_MspInit+0xf8>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d10e      	bne.n	8001ae4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	613b      	str	r3, [r7, #16]
 8001aca:	4b25      	ldr	r3, [pc, #148]	@ (8001b60 <HAL_TIM_Base_MspInit+0xf4>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ace:	4a24      	ldr	r2, [pc, #144]	@ (8001b60 <HAL_TIM_Base_MspInit+0xf4>)
 8001ad0:	f043 0302 	orr.w	r3, r3, #2
 8001ad4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ad6:	4b22      	ldr	r3, [pc, #136]	@ (8001b60 <HAL_TIM_Base_MspInit+0xf4>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	613b      	str	r3, [r7, #16]
 8001ae0:	693b      	ldr	r3, [r7, #16]
}
 8001ae2:	e036      	b.n	8001b52 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM10)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a1f      	ldr	r2, [pc, #124]	@ (8001b68 <HAL_TIM_Base_MspInit+0xfc>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d116      	bne.n	8001b1c <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	4b1b      	ldr	r3, [pc, #108]	@ (8001b60 <HAL_TIM_Base_MspInit+0xf4>)
 8001af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001af6:	4a1a      	ldr	r2, [pc, #104]	@ (8001b60 <HAL_TIM_Base_MspInit+0xf4>)
 8001af8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001afc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001afe:	4b18      	ldr	r3, [pc, #96]	@ (8001b60 <HAL_TIM_Base_MspInit+0xf4>)
 8001b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	2019      	movs	r0, #25
 8001b10:	f001 f87f 	bl	8002c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001b14:	2019      	movs	r0, #25
 8001b16:	f001 f898 	bl	8002c4a <HAL_NVIC_EnableIRQ>
}
 8001b1a:	e01a      	b.n	8001b52 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM11)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a12      	ldr	r2, [pc, #72]	@ (8001b6c <HAL_TIM_Base_MspInit+0x100>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d115      	bne.n	8001b52 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	60bb      	str	r3, [r7, #8]
 8001b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b60 <HAL_TIM_Base_MspInit+0xf4>)
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b2e:	4a0c      	ldr	r2, [pc, #48]	@ (8001b60 <HAL_TIM_Base_MspInit+0xf4>)
 8001b30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b34:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b36:	4b0a      	ldr	r3, [pc, #40]	@ (8001b60 <HAL_TIM_Base_MspInit+0xf4>)
 8001b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b3e:	60bb      	str	r3, [r7, #8]
 8001b40:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2100      	movs	r1, #0
 8001b46:	201a      	movs	r0, #26
 8001b48:	f001 f863 	bl	8002c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001b4c:	201a      	movs	r0, #26
 8001b4e:	f001 f87c 	bl	8002c4a <HAL_NVIC_EnableIRQ>
}
 8001b52:	bf00      	nop
 8001b54:	3718      	adds	r7, #24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40010000 	.word	0x40010000
 8001b60:	40023800 	.word	0x40023800
 8001b64:	40000400 	.word	0x40000400
 8001b68:	40014400 	.word	0x40014400
 8001b6c:	40014800 	.word	0x40014800

08001b70 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b088      	sub	sp, #32
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b78:	f107 030c 	add.w	r3, r7, #12
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
 8001b86:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a12      	ldr	r2, [pc, #72]	@ (8001bd8 <HAL_TIM_MspPostInit+0x68>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d11e      	bne.n	8001bd0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	60bb      	str	r3, [r7, #8]
 8001b96:	4b11      	ldr	r3, [pc, #68]	@ (8001bdc <HAL_TIM_MspPostInit+0x6c>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9a:	4a10      	ldr	r2, [pc, #64]	@ (8001bdc <HAL_TIM_MspPostInit+0x6c>)
 8001b9c:	f043 0301 	orr.w	r3, r3, #1
 8001ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8001bdc <HAL_TIM_MspPostInit+0x6c>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	60bb      	str	r3, [r7, #8]
 8001bac:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001bae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001bb2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc4:	f107 030c 	add.w	r3, r7, #12
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4805      	ldr	r0, [pc, #20]	@ (8001be0 <HAL_TIM_MspPostInit+0x70>)
 8001bcc:	f001 fbea 	bl	80033a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001bd0:	bf00      	nop
 8001bd2:	3720      	adds	r7, #32
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40010000 	.word	0x40010000
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	40020000 	.word	0x40020000

08001be4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b08a      	sub	sp, #40	@ 0x28
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bec:	f107 0314 	add.w	r3, r7, #20
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a19      	ldr	r2, [pc, #100]	@ (8001c68 <HAL_UART_MspInit+0x84>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d12b      	bne.n	8001c5e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	613b      	str	r3, [r7, #16]
 8001c0a:	4b18      	ldr	r3, [pc, #96]	@ (8001c6c <HAL_UART_MspInit+0x88>)
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0e:	4a17      	ldr	r2, [pc, #92]	@ (8001c6c <HAL_UART_MspInit+0x88>)
 8001c10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c14:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c16:	4b15      	ldr	r3, [pc, #84]	@ (8001c6c <HAL_UART_MspInit+0x88>)
 8001c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c1e:	613b      	str	r3, [r7, #16]
 8001c20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	4b11      	ldr	r3, [pc, #68]	@ (8001c6c <HAL_UART_MspInit+0x88>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2a:	4a10      	ldr	r2, [pc, #64]	@ (8001c6c <HAL_UART_MspInit+0x88>)
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c32:	4b0e      	ldr	r3, [pc, #56]	@ (8001c6c <HAL_UART_MspInit+0x88>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c3e:	230c      	movs	r3, #12
 8001c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c42:	2302      	movs	r3, #2
 8001c44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c4e:	2307      	movs	r3, #7
 8001c50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c52:	f107 0314 	add.w	r3, r7, #20
 8001c56:	4619      	mov	r1, r3
 8001c58:	4805      	ldr	r0, [pc, #20]	@ (8001c70 <HAL_UART_MspInit+0x8c>)
 8001c5a:	f001 fba3 	bl	80033a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c5e:	bf00      	nop
 8001c60:	3728      	adds	r7, #40	@ 0x28
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40004400 	.word	0x40004400
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	40020000 	.word	0x40020000

08001c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c78:	bf00      	nop
 8001c7a:	e7fd      	b.n	8001c78 <NMI_Handler+0x4>

08001c7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c80:	bf00      	nop
 8001c82:	e7fd      	b.n	8001c80 <HardFault_Handler+0x4>

08001c84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c88:	bf00      	nop
 8001c8a:	e7fd      	b.n	8001c88 <MemManage_Handler+0x4>

08001c8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c90:	bf00      	nop
 8001c92:	e7fd      	b.n	8001c90 <BusFault_Handler+0x4>

08001c94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c98:	bf00      	nop
 8001c9a:	e7fd      	b.n	8001c98 <UsageFault_Handler+0x4>

08001c9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001caa:	b480      	push	{r7}
 8001cac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cca:	f000 f99b 	bl	8002004 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
	...

08001cd4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001cd8:	4802      	ldr	r0, [pc, #8]	@ (8001ce4 <ADC_IRQHandler+0x10>)
 8001cda:	f000 f9f6 	bl	80020ca <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000224 	.word	0x20000224

08001ce8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001cec:	4803      	ldr	r0, [pc, #12]	@ (8001cfc <TIM1_UP_TIM10_IRQHandler+0x14>)
 8001cee:	f002 fe9c 	bl	8004a2a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8001cf2:	4803      	ldr	r0, [pc, #12]	@ (8001d00 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001cf4:	f002 fe99 	bl	8004a2a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001cf8:	bf00      	nop
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	20000384 	.word	0x20000384
 8001d00:	20000414 	.word	0x20000414

08001d04 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d08:	4803      	ldr	r0, [pc, #12]	@ (8001d18 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8001d0a:	f002 fe8e 	bl	8004a2a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8001d0e:	4803      	ldr	r0, [pc, #12]	@ (8001d1c <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8001d10:	f002 fe8b 	bl	8004a2a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001d14:	bf00      	nop
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	20000384 	.word	0x20000384
 8001d1c:	2000045c 	.word	0x2000045c

08001d20 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001d24:	4802      	ldr	r0, [pc, #8]	@ (8001d30 <SPI1_IRQHandler+0x10>)
 8001d26:	f002 fab3 	bl	8004290 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	200002cc 	.word	0x200002cc

08001d34 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d38:	4802      	ldr	r0, [pc, #8]	@ (8001d44 <DMA2_Stream0_IRQHandler+0x10>)
 8001d3a:	f001 f8c9 	bl	8002ed0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	2000026c 	.word	0x2000026c

08001d48 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001d4c:	4802      	ldr	r0, [pc, #8]	@ (8001d58 <DMA2_Stream3_IRQHandler+0x10>)
 8001d4e:	f001 f8bf 	bl	8002ed0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20000324 	.word	0x20000324

08001d5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  return 1;
 8001d60:	2301      	movs	r3, #1
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <_kill>:

int _kill(int pid, int sig)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d76:	f004 fe1f 	bl	80069b8 <__errno>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2216      	movs	r2, #22
 8001d7e:	601a      	str	r2, [r3, #0]
  return -1;
 8001d80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <_exit>:

void _exit (int status)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d94:	f04f 31ff 	mov.w	r1, #4294967295
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f7ff ffe7 	bl	8001d6c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d9e:	bf00      	nop
 8001da0:	e7fd      	b.n	8001d9e <_exit+0x12>

08001da2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b086      	sub	sp, #24
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	60f8      	str	r0, [r7, #12]
 8001daa:	60b9      	str	r1, [r7, #8]
 8001dac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dae:	2300      	movs	r3, #0
 8001db0:	617b      	str	r3, [r7, #20]
 8001db2:	e00a      	b.n	8001dca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001db4:	f3af 8000 	nop.w
 8001db8:	4601      	mov	r1, r0
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	1c5a      	adds	r2, r3, #1
 8001dbe:	60ba      	str	r2, [r7, #8]
 8001dc0:	b2ca      	uxtb	r2, r1
 8001dc2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	617b      	str	r3, [r7, #20]
 8001dca:	697a      	ldr	r2, [r7, #20]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	dbf0      	blt.n	8001db4 <_read+0x12>
  }

  return len;
 8001dd2:	687b      	ldr	r3, [r7, #4]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3718      	adds	r7, #24
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]
 8001dec:	e009      	b.n	8001e02 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	1c5a      	adds	r2, r3, #1
 8001df2:	60ba      	str	r2, [r7, #8]
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	617b      	str	r3, [r7, #20]
 8001e02:	697a      	ldr	r2, [r7, #20]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	dbf1      	blt.n	8001dee <_write+0x12>
  }
  return len;
 8001e0a:	687b      	ldr	r3, [r7, #4]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3718      	adds	r7, #24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <_close>:

int _close(int file)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e3c:	605a      	str	r2, [r3, #4]
  return 0;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <_isatty>:

int _isatty(int file)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e54:	2301      	movs	r3, #1
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e62:	b480      	push	{r7}
 8001e64:	b085      	sub	sp, #20
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	60f8      	str	r0, [r7, #12]
 8001e6a:	60b9      	str	r1, [r7, #8]
 8001e6c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3714      	adds	r7, #20
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e84:	4a14      	ldr	r2, [pc, #80]	@ (8001ed8 <_sbrk+0x5c>)
 8001e86:	4b15      	ldr	r3, [pc, #84]	@ (8001edc <_sbrk+0x60>)
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e90:	4b13      	ldr	r3, [pc, #76]	@ (8001ee0 <_sbrk+0x64>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d102      	bne.n	8001e9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e98:	4b11      	ldr	r3, [pc, #68]	@ (8001ee0 <_sbrk+0x64>)
 8001e9a:	4a12      	ldr	r2, [pc, #72]	@ (8001ee4 <_sbrk+0x68>)
 8001e9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e9e:	4b10      	ldr	r3, [pc, #64]	@ (8001ee0 <_sbrk+0x64>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d207      	bcs.n	8001ebc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001eac:	f004 fd84 	bl	80069b8 <__errno>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	220c      	movs	r2, #12
 8001eb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eba:	e009      	b.n	8001ed0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ebc:	4b08      	ldr	r3, [pc, #32]	@ (8001ee0 <_sbrk+0x64>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ec2:	4b07      	ldr	r3, [pc, #28]	@ (8001ee0 <_sbrk+0x64>)
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4413      	add	r3, r2
 8001eca:	4a05      	ldr	r2, [pc, #20]	@ (8001ee0 <_sbrk+0x64>)
 8001ecc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ece:	68fb      	ldr	r3, [r7, #12]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3718      	adds	r7, #24
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	20018000 	.word	0x20018000
 8001edc:	00000400 	.word	0x00000400
 8001ee0:	200004fc 	.word	0x200004fc
 8001ee4:	20000650 	.word	0x20000650

08001ee8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001eec:	4b06      	ldr	r3, [pc, #24]	@ (8001f08 <SystemInit+0x20>)
 8001eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ef2:	4a05      	ldr	r2, [pc, #20]	@ (8001f08 <SystemInit+0x20>)
 8001ef4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ef8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001efc:	bf00      	nop
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	e000ed00 	.word	0xe000ed00

08001f0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f10:	480d      	ldr	r0, [pc, #52]	@ (8001f48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f12:	490e      	ldr	r1, [pc, #56]	@ (8001f4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f14:	4a0e      	ldr	r2, [pc, #56]	@ (8001f50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f18:	e002      	b.n	8001f20 <LoopCopyDataInit>

08001f1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f1e:	3304      	adds	r3, #4

08001f20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f24:	d3f9      	bcc.n	8001f1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f26:	4a0b      	ldr	r2, [pc, #44]	@ (8001f54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f28:	4c0b      	ldr	r4, [pc, #44]	@ (8001f58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f2c:	e001      	b.n	8001f32 <LoopFillZerobss>

08001f2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f30:	3204      	adds	r2, #4

08001f32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f34:	d3fb      	bcc.n	8001f2e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f36:	f7ff ffd7 	bl	8001ee8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f3a:	f004 fd43 	bl	80069c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f3e:	f7ff f947 	bl	80011d0 <main>
  bx  lr    
 8001f42:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f44:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001f48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f4c:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8001f50:	08009d60 	.word	0x08009d60
  ldr r2, =_sbss
 8001f54:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8001f58:	20000650 	.word	0x20000650

08001f5c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f5c:	e7fe      	b.n	8001f5c <DMA1_Stream0_IRQHandler>
	...

08001f60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f64:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa0 <HAL_Init+0x40>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a0d      	ldr	r2, [pc, #52]	@ (8001fa0 <HAL_Init+0x40>)
 8001f6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f70:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa0 <HAL_Init+0x40>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a0a      	ldr	r2, [pc, #40]	@ (8001fa0 <HAL_Init+0x40>)
 8001f76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f7c:	4b08      	ldr	r3, [pc, #32]	@ (8001fa0 <HAL_Init+0x40>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a07      	ldr	r2, [pc, #28]	@ (8001fa0 <HAL_Init+0x40>)
 8001f82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f88:	2003      	movs	r0, #3
 8001f8a:	f000 fe37 	bl	8002bfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f8e:	2000      	movs	r0, #0
 8001f90:	f000 f808 	bl	8001fa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f94:	f7ff fc40 	bl	8001818 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40023c00 	.word	0x40023c00

08001fa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fac:	4b12      	ldr	r3, [pc, #72]	@ (8001ff8 <HAL_InitTick+0x54>)
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	4b12      	ldr	r3, [pc, #72]	@ (8001ffc <HAL_InitTick+0x58>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f000 fe4f 	bl	8002c66 <HAL_SYSTICK_Config>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e00e      	b.n	8001ff0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2b0f      	cmp	r3, #15
 8001fd6:	d80a      	bhi.n	8001fee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fd8:	2200      	movs	r2, #0
 8001fda:	6879      	ldr	r1, [r7, #4]
 8001fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe0:	f000 fe17 	bl	8002c12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fe4:	4a06      	ldr	r2, [pc, #24]	@ (8002000 <HAL_InitTick+0x5c>)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fea:	2300      	movs	r3, #0
 8001fec:	e000      	b.n	8001ff0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	20000024 	.word	0x20000024
 8001ffc:	2000002c 	.word	0x2000002c
 8002000:	20000028 	.word	0x20000028

08002004 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002008:	4b06      	ldr	r3, [pc, #24]	@ (8002024 <HAL_IncTick+0x20>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	461a      	mov	r2, r3
 800200e:	4b06      	ldr	r3, [pc, #24]	@ (8002028 <HAL_IncTick+0x24>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4413      	add	r3, r2
 8002014:	4a04      	ldr	r2, [pc, #16]	@ (8002028 <HAL_IncTick+0x24>)
 8002016:	6013      	str	r3, [r2, #0]
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	2000002c 	.word	0x2000002c
 8002028:	20000500 	.word	0x20000500

0800202c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  return uwTick;
 8002030:	4b03      	ldr	r3, [pc, #12]	@ (8002040 <HAL_GetTick+0x14>)
 8002032:	681b      	ldr	r3, [r3, #0]
}
 8002034:	4618      	mov	r0, r3
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	20000500 	.word	0x20000500

08002044 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800204c:	2300      	movs	r3, #0
 800204e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e033      	b.n	80020c2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205e:	2b00      	cmp	r3, #0
 8002060:	d109      	bne.n	8002076 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7ff fc00 	bl	8001868 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207a:	f003 0310 	and.w	r3, r3, #16
 800207e:	2b00      	cmp	r3, #0
 8002080:	d118      	bne.n	80020b4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002086:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800208a:	f023 0302 	bic.w	r3, r3, #2
 800208e:	f043 0202 	orr.w	r2, r3, #2
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 fb58 	bl	800274c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a6:	f023 0303 	bic.w	r3, r3, #3
 80020aa:	f043 0201 	orr.w	r2, r3, #1
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	641a      	str	r2, [r3, #64]	@ 0x40
 80020b2:	e001      	b.n	80020b8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80020c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b086      	sub	sp, #24
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	617b      	str	r3, [r7, #20]
 80020d6:	2300      	movs	r3, #0
 80020d8:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	f003 0320 	and.w	r3, r3, #32
 80020f8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d049      	beq.n	8002194 <HAL_ADC_IRQHandler+0xca>
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d046      	beq.n	8002194 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210a:	f003 0310 	and.w	r3, r3, #16
 800210e:	2b00      	cmp	r3, #0
 8002110:	d105      	bne.n	800211e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002116:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d12b      	bne.n	8002184 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002130:	2b00      	cmp	r3, #0
 8002132:	d127      	bne.n	8002184 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800213a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800213e:	2b00      	cmp	r3, #0
 8002140:	d006      	beq.n	8002150 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800214c:	2b00      	cmp	r3, #0
 800214e:	d119      	bne.n	8002184 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	685a      	ldr	r2, [r3, #4]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f022 0220 	bic.w	r2, r2, #32
 800215e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002164:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002170:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d105      	bne.n	8002184 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217c:	f043 0201 	orr.w	r2, r3, #1
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f7fe ffbf 	bl	8001108 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f06f 0212 	mvn.w	r2, #18
 8002192:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f003 0304 	and.w	r3, r3, #4
 800219a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021a2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d057      	beq.n	800225a <HAL_ADC_IRQHandler+0x190>
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d054      	beq.n	800225a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b4:	f003 0310 	and.w	r3, r3, #16
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d105      	bne.n	80021c8 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d139      	bne.n	800224a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021dc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d006      	beq.n	80021f2 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d12b      	bne.n	800224a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d124      	bne.n	800224a <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800220a:	2b00      	cmp	r3, #0
 800220c:	d11d      	bne.n	800224a <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002212:	2b00      	cmp	r3, #0
 8002214:	d119      	bne.n	800224a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	685a      	ldr	r2, [r3, #4]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002224:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002236:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800223a:	2b00      	cmp	r3, #0
 800223c:	d105      	bne.n	800224a <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002242:	f043 0201 	orr.w	r2, r3, #1
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 fbfc 	bl	8002a48 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f06f 020c 	mvn.w	r2, #12
 8002258:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002268:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d017      	beq.n	80022a0 <HAL_ADC_IRQHandler+0x1d6>
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d014      	beq.n	80022a0 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	2b01      	cmp	r3, #1
 8002282:	d10d      	bne.n	80022a0 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002288:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f000 f925 	bl	80024e0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f06f 0201 	mvn.w	r2, #1
 800229e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f003 0320 	and.w	r3, r3, #32
 80022a6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80022ae:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d015      	beq.n	80022e2 <HAL_ADC_IRQHandler+0x218>
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d012      	beq.n	80022e2 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c0:	f043 0202 	orr.w	r2, r3, #2
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f06f 0220 	mvn.w	r2, #32
 80022d0:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 f90e 	bl	80024f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f06f 0220 	mvn.w	r2, #32
 80022e0:	601a      	str	r2, [r3, #0]
  }
}
 80022e2:	bf00      	nop
 80022e4:	3718      	adds	r7, #24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
	...

080022ec <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80022f8:	2300      	movs	r3, #0
 80022fa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002302:	2b01      	cmp	r3, #1
 8002304:	d101      	bne.n	800230a <HAL_ADC_Start_DMA+0x1e>
 8002306:	2302      	movs	r3, #2
 8002308:	e0ce      	b.n	80024a8 <HAL_ADC_Start_DMA+0x1bc>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	2b01      	cmp	r3, #1
 800231e:	d018      	beq.n	8002352 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	689a      	ldr	r2, [r3, #8]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f042 0201 	orr.w	r2, r2, #1
 800232e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002330:	4b5f      	ldr	r3, [pc, #380]	@ (80024b0 <HAL_ADC_Start_DMA+0x1c4>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a5f      	ldr	r2, [pc, #380]	@ (80024b4 <HAL_ADC_Start_DMA+0x1c8>)
 8002336:	fba2 2303 	umull	r2, r3, r2, r3
 800233a:	0c9a      	lsrs	r2, r3, #18
 800233c:	4613      	mov	r3, r2
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	4413      	add	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002344:	e002      	b.n	800234c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	3b01      	subs	r3, #1
 800234a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1f9      	bne.n	8002346 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800235c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002360:	d107      	bne.n	8002372 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002370:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	2b01      	cmp	r3, #1
 800237e:	f040 8086 	bne.w	800248e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002386:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800238a:	f023 0301 	bic.w	r3, r3, #1
 800238e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d007      	beq.n	80023b4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80023ac:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023c0:	d106      	bne.n	80023d0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023c6:	f023 0206 	bic.w	r2, r3, #6
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	645a      	str	r2, [r3, #68]	@ 0x44
 80023ce:	e002      	b.n	80023d6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023de:	4b36      	ldr	r3, [pc, #216]	@ (80024b8 <HAL_ADC_Start_DMA+0x1cc>)
 80023e0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023e6:	4a35      	ldr	r2, [pc, #212]	@ (80024bc <HAL_ADC_Start_DMA+0x1d0>)
 80023e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023ee:	4a34      	ldr	r2, [pc, #208]	@ (80024c0 <HAL_ADC_Start_DMA+0x1d4>)
 80023f0:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023f6:	4a33      	ldr	r2, [pc, #204]	@ (80024c4 <HAL_ADC_Start_DMA+0x1d8>)
 80023f8:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002402:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	685a      	ldr	r2, [r3, #4]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002412:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689a      	ldr	r2, [r3, #8]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002422:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	334c      	adds	r3, #76	@ 0x4c
 800242e:	4619      	mov	r1, r3
 8002430:	68ba      	ldr	r2, [r7, #8]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f000 fcd2 	bl	8002ddc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f003 031f 	and.w	r3, r3, #31
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10f      	bne.n	8002464 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d129      	bne.n	80024a6 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002460:	609a      	str	r2, [r3, #8]
 8002462:	e020      	b.n	80024a6 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a17      	ldr	r2, [pc, #92]	@ (80024c8 <HAL_ADC_Start_DMA+0x1dc>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d11b      	bne.n	80024a6 <HAL_ADC_Start_DMA+0x1ba>
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d114      	bne.n	80024a6 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689a      	ldr	r2, [r3, #8]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800248a:	609a      	str	r2, [r3, #8]
 800248c:	e00b      	b.n	80024a6 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002492:	f043 0210 	orr.w	r2, r3, #16
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800249e:	f043 0201 	orr.w	r2, r3, #1
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3718      	adds	r7, #24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	20000024 	.word	0x20000024
 80024b4:	431bde83 	.word	0x431bde83
 80024b8:	40012300 	.word	0x40012300
 80024bc:	08002945 	.word	0x08002945
 80024c0:	080029ff 	.word	0x080029ff
 80024c4:	08002a1b 	.word	0x08002a1b
 80024c8:	40012000 	.word	0x40012000

080024cc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80024e8:	bf00      	nop
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002512:	2300      	movs	r3, #0
 8002514:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800251c:	2b01      	cmp	r3, #1
 800251e:	d101      	bne.n	8002524 <HAL_ADC_ConfigChannel+0x1c>
 8002520:	2302      	movs	r3, #2
 8002522:	e105      	b.n	8002730 <HAL_ADC_ConfigChannel+0x228>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2b09      	cmp	r3, #9
 8002532:	d925      	bls.n	8002580 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68d9      	ldr	r1, [r3, #12]
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	b29b      	uxth	r3, r3
 8002540:	461a      	mov	r2, r3
 8002542:	4613      	mov	r3, r2
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	4413      	add	r3, r2
 8002548:	3b1e      	subs	r3, #30
 800254a:	2207      	movs	r2, #7
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	43da      	mvns	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	400a      	ands	r2, r1
 8002558:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68d9      	ldr	r1, [r3, #12]
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	b29b      	uxth	r3, r3
 800256a:	4618      	mov	r0, r3
 800256c:	4603      	mov	r3, r0
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	4403      	add	r3, r0
 8002572:	3b1e      	subs	r3, #30
 8002574:	409a      	lsls	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	430a      	orrs	r2, r1
 800257c:	60da      	str	r2, [r3, #12]
 800257e:	e022      	b.n	80025c6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6919      	ldr	r1, [r3, #16]
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	b29b      	uxth	r3, r3
 800258c:	461a      	mov	r2, r3
 800258e:	4613      	mov	r3, r2
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	4413      	add	r3, r2
 8002594:	2207      	movs	r2, #7
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	43da      	mvns	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	400a      	ands	r2, r1
 80025a2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6919      	ldr	r1, [r3, #16]
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	689a      	ldr	r2, [r3, #8]
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	4618      	mov	r0, r3
 80025b6:	4603      	mov	r3, r0
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	4403      	add	r3, r0
 80025bc:	409a      	lsls	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	430a      	orrs	r2, r1
 80025c4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	2b06      	cmp	r3, #6
 80025cc:	d824      	bhi.n	8002618 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	4613      	mov	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	4413      	add	r3, r2
 80025de:	3b05      	subs	r3, #5
 80025e0:	221f      	movs	r2, #31
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	43da      	mvns	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	400a      	ands	r2, r1
 80025ee:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	4618      	mov	r0, r3
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685a      	ldr	r2, [r3, #4]
 8002602:	4613      	mov	r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	4413      	add	r3, r2
 8002608:	3b05      	subs	r3, #5
 800260a:	fa00 f203 	lsl.w	r2, r0, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	430a      	orrs	r2, r1
 8002614:	635a      	str	r2, [r3, #52]	@ 0x34
 8002616:	e04c      	b.n	80026b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	2b0c      	cmp	r3, #12
 800261e:	d824      	bhi.n	800266a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685a      	ldr	r2, [r3, #4]
 800262a:	4613      	mov	r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4413      	add	r3, r2
 8002630:	3b23      	subs	r3, #35	@ 0x23
 8002632:	221f      	movs	r2, #31
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	43da      	mvns	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	400a      	ands	r2, r1
 8002640:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	b29b      	uxth	r3, r3
 800264e:	4618      	mov	r0, r3
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685a      	ldr	r2, [r3, #4]
 8002654:	4613      	mov	r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	4413      	add	r3, r2
 800265a:	3b23      	subs	r3, #35	@ 0x23
 800265c:	fa00 f203 	lsl.w	r2, r0, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	430a      	orrs	r2, r1
 8002666:	631a      	str	r2, [r3, #48]	@ 0x30
 8002668:	e023      	b.n	80026b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685a      	ldr	r2, [r3, #4]
 8002674:	4613      	mov	r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	4413      	add	r3, r2
 800267a:	3b41      	subs	r3, #65	@ 0x41
 800267c:	221f      	movs	r2, #31
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43da      	mvns	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	400a      	ands	r2, r1
 800268a:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	b29b      	uxth	r3, r3
 8002698:	4618      	mov	r0, r3
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685a      	ldr	r2, [r3, #4]
 800269e:	4613      	mov	r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4413      	add	r3, r2
 80026a4:	3b41      	subs	r3, #65	@ 0x41
 80026a6:	fa00 f203 	lsl.w	r2, r0, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	430a      	orrs	r2, r1
 80026b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026b2:	4b22      	ldr	r3, [pc, #136]	@ (800273c <HAL_ADC_ConfigChannel+0x234>)
 80026b4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a21      	ldr	r2, [pc, #132]	@ (8002740 <HAL_ADC_ConfigChannel+0x238>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d109      	bne.n	80026d4 <HAL_ADC_ConfigChannel+0x1cc>
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2b12      	cmp	r3, #18
 80026c6:	d105      	bne.n	80026d4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a19      	ldr	r2, [pc, #100]	@ (8002740 <HAL_ADC_ConfigChannel+0x238>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d123      	bne.n	8002726 <HAL_ADC_ConfigChannel+0x21e>
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2b10      	cmp	r3, #16
 80026e4:	d003      	beq.n	80026ee <HAL_ADC_ConfigChannel+0x1e6>
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2b11      	cmp	r3, #17
 80026ec:	d11b      	bne.n	8002726 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2b10      	cmp	r3, #16
 8002700:	d111      	bne.n	8002726 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002702:	4b10      	ldr	r3, [pc, #64]	@ (8002744 <HAL_ADC_ConfigChannel+0x23c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a10      	ldr	r2, [pc, #64]	@ (8002748 <HAL_ADC_ConfigChannel+0x240>)
 8002708:	fba2 2303 	umull	r2, r3, r2, r3
 800270c:	0c9a      	lsrs	r2, r3, #18
 800270e:	4613      	mov	r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	4413      	add	r3, r2
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002718:	e002      	b.n	8002720 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	3b01      	subs	r3, #1
 800271e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1f9      	bne.n	800271a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3714      	adds	r7, #20
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	40012300 	.word	0x40012300
 8002740:	40012000 	.word	0x40012000
 8002744:	20000024 	.word	0x20000024
 8002748:	431bde83 	.word	0x431bde83

0800274c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002754:	4b79      	ldr	r3, [pc, #484]	@ (800293c <ADC_Init+0x1f0>)
 8002756:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	685a      	ldr	r2, [r3, #4]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	431a      	orrs	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	685a      	ldr	r2, [r3, #4]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002780:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6859      	ldr	r1, [r3, #4]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	021a      	lsls	r2, r3, #8
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	430a      	orrs	r2, r1
 8002794:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80027a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6859      	ldr	r1, [r3, #4]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689a      	ldr	r2, [r3, #8]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	430a      	orrs	r2, r1
 80027b6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	689a      	ldr	r2, [r3, #8]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6899      	ldr	r1, [r3, #8]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	68da      	ldr	r2, [r3, #12]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	430a      	orrs	r2, r1
 80027d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027de:	4a58      	ldr	r2, [pc, #352]	@ (8002940 <ADC_Init+0x1f4>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d022      	beq.n	800282a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	689a      	ldr	r2, [r3, #8]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80027f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6899      	ldr	r1, [r3, #8]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	430a      	orrs	r2, r1
 8002804:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002814:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6899      	ldr	r1, [r3, #8]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	430a      	orrs	r2, r1
 8002826:	609a      	str	r2, [r3, #8]
 8002828:	e00f      	b.n	800284a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002838:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002848:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	689a      	ldr	r2, [r3, #8]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f022 0202 	bic.w	r2, r2, #2
 8002858:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	6899      	ldr	r1, [r3, #8]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	7e1b      	ldrb	r3, [r3, #24]
 8002864:	005a      	lsls	r2, r3, #1
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	430a      	orrs	r2, r1
 800286c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d01b      	beq.n	80028b0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	685a      	ldr	r2, [r3, #4]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002886:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	685a      	ldr	r2, [r3, #4]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002896:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6859      	ldr	r1, [r3, #4]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a2:	3b01      	subs	r3, #1
 80028a4:	035a      	lsls	r2, r3, #13
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	605a      	str	r2, [r3, #4]
 80028ae:	e007      	b.n	80028c0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	685a      	ldr	r2, [r3, #4]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028be:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80028ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	69db      	ldr	r3, [r3, #28]
 80028da:	3b01      	subs	r3, #1
 80028dc:	051a      	lsls	r2, r3, #20
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80028f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	6899      	ldr	r1, [r3, #8]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002902:	025a      	lsls	r2, r3, #9
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	430a      	orrs	r2, r1
 800290a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689a      	ldr	r2, [r3, #8]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800291a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6899      	ldr	r1, [r3, #8]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	029a      	lsls	r2, r3, #10
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	430a      	orrs	r2, r1
 800292e:	609a      	str	r2, [r3, #8]
}
 8002930:	bf00      	nop
 8002932:	3714      	adds	r7, #20
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr
 800293c:	40012300 	.word	0x40012300
 8002940:	0f000001 	.word	0x0f000001

08002944 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002950:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002956:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800295a:	2b00      	cmp	r3, #0
 800295c:	d13c      	bne.n	80029d8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002962:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d12b      	bne.n	80029d0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800297c:	2b00      	cmp	r3, #0
 800297e:	d127      	bne.n	80029d0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002986:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800298a:	2b00      	cmp	r3, #0
 800298c:	d006      	beq.n	800299c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002998:	2b00      	cmp	r3, #0
 800299a:	d119      	bne.n	80029d0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 0220 	bic.w	r2, r2, #32
 80029aa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d105      	bne.n	80029d0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c8:	f043 0201 	orr.w	r2, r3, #1
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f7fe fb99 	bl	8001108 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80029d6:	e00e      	b.n	80029f6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029dc:	f003 0310 	and.w	r3, r3, #16
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d003      	beq.n	80029ec <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f7ff fd85 	bl	80024f4 <HAL_ADC_ErrorCallback>
}
 80029ea:	e004      	b.n	80029f6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	4798      	blx	r3
}
 80029f6:	bf00      	nop
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b084      	sub	sp, #16
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a0a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f7ff fd5d 	bl	80024cc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a12:	bf00      	nop
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b084      	sub	sp, #16
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a26:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2240      	movs	r2, #64	@ 0x40
 8002a2c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a32:	f043 0204 	orr.w	r2, r3, #4
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	645a      	str	r2, [r3, #68]	@ 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a3a:	68f8      	ldr	r0, [r7, #12]
 8002a3c:	f7ff fd5a 	bl	80024f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a40:	bf00      	nop
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a72:	68ba      	ldr	r2, [r7, #8]
 8002a74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a78:	4013      	ands	r3, r2
 8002a7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a8e:	4a04      	ldr	r2, [pc, #16]	@ (8002aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	60d3      	str	r3, [r2, #12]
}
 8002a94:	bf00      	nop
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	e000ed00 	.word	0xe000ed00

08002aa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002aa8:	4b04      	ldr	r3, [pc, #16]	@ (8002abc <__NVIC_GetPriorityGrouping+0x18>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	0a1b      	lsrs	r3, r3, #8
 8002aae:	f003 0307 	and.w	r3, r3, #7
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr
 8002abc:	e000ed00 	.word	0xe000ed00

08002ac0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	db0b      	blt.n	8002aea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ad2:	79fb      	ldrb	r3, [r7, #7]
 8002ad4:	f003 021f 	and.w	r2, r3, #31
 8002ad8:	4907      	ldr	r1, [pc, #28]	@ (8002af8 <__NVIC_EnableIRQ+0x38>)
 8002ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ade:	095b      	lsrs	r3, r3, #5
 8002ae0:	2001      	movs	r0, #1
 8002ae2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002aea:	bf00      	nop
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	e000e100 	.word	0xe000e100

08002afc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	4603      	mov	r3, r0
 8002b04:	6039      	str	r1, [r7, #0]
 8002b06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	db0a      	blt.n	8002b26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	b2da      	uxtb	r2, r3
 8002b14:	490c      	ldr	r1, [pc, #48]	@ (8002b48 <__NVIC_SetPriority+0x4c>)
 8002b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1a:	0112      	lsls	r2, r2, #4
 8002b1c:	b2d2      	uxtb	r2, r2
 8002b1e:	440b      	add	r3, r1
 8002b20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b24:	e00a      	b.n	8002b3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	b2da      	uxtb	r2, r3
 8002b2a:	4908      	ldr	r1, [pc, #32]	@ (8002b4c <__NVIC_SetPriority+0x50>)
 8002b2c:	79fb      	ldrb	r3, [r7, #7]
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	3b04      	subs	r3, #4
 8002b34:	0112      	lsls	r2, r2, #4
 8002b36:	b2d2      	uxtb	r2, r2
 8002b38:	440b      	add	r3, r1
 8002b3a:	761a      	strb	r2, [r3, #24]
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	e000e100 	.word	0xe000e100
 8002b4c:	e000ed00 	.word	0xe000ed00

08002b50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b089      	sub	sp, #36	@ 0x24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f003 0307 	and.w	r3, r3, #7
 8002b62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	f1c3 0307 	rsb	r3, r3, #7
 8002b6a:	2b04      	cmp	r3, #4
 8002b6c:	bf28      	it	cs
 8002b6e:	2304      	movcs	r3, #4
 8002b70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	3304      	adds	r3, #4
 8002b76:	2b06      	cmp	r3, #6
 8002b78:	d902      	bls.n	8002b80 <NVIC_EncodePriority+0x30>
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	3b03      	subs	r3, #3
 8002b7e:	e000      	b.n	8002b82 <NVIC_EncodePriority+0x32>
 8002b80:	2300      	movs	r3, #0
 8002b82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b84:	f04f 32ff 	mov.w	r2, #4294967295
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8e:	43da      	mvns	r2, r3
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	401a      	ands	r2, r3
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b98:	f04f 31ff 	mov.w	r1, #4294967295
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba2:	43d9      	mvns	r1, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ba8:	4313      	orrs	r3, r2
         );
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3724      	adds	r7, #36	@ 0x24
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
	...

08002bb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bc8:	d301      	bcc.n	8002bce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e00f      	b.n	8002bee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bce:	4a0a      	ldr	r2, [pc, #40]	@ (8002bf8 <SysTick_Config+0x40>)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bd6:	210f      	movs	r1, #15
 8002bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bdc:	f7ff ff8e 	bl	8002afc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002be0:	4b05      	ldr	r3, [pc, #20]	@ (8002bf8 <SysTick_Config+0x40>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002be6:	4b04      	ldr	r3, [pc, #16]	@ (8002bf8 <SysTick_Config+0x40>)
 8002be8:	2207      	movs	r2, #7
 8002bea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	e000e010 	.word	0xe000e010

08002bfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f7ff ff29 	bl	8002a5c <__NVIC_SetPriorityGrouping>
}
 8002c0a:	bf00      	nop
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b086      	sub	sp, #24
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	4603      	mov	r3, r0
 8002c1a:	60b9      	str	r1, [r7, #8]
 8002c1c:	607a      	str	r2, [r7, #4]
 8002c1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c20:	2300      	movs	r3, #0
 8002c22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c24:	f7ff ff3e 	bl	8002aa4 <__NVIC_GetPriorityGrouping>
 8002c28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	68b9      	ldr	r1, [r7, #8]
 8002c2e:	6978      	ldr	r0, [r7, #20]
 8002c30:	f7ff ff8e 	bl	8002b50 <NVIC_EncodePriority>
 8002c34:	4602      	mov	r2, r0
 8002c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c3a:	4611      	mov	r1, r2
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff ff5d 	bl	8002afc <__NVIC_SetPriority>
}
 8002c42:	bf00      	nop
 8002c44:	3718      	adds	r7, #24
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b082      	sub	sp, #8
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	4603      	mov	r3, r0
 8002c52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff ff31 	bl	8002ac0 <__NVIC_EnableIRQ>
}
 8002c5e:	bf00      	nop
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b082      	sub	sp, #8
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7ff ffa2 	bl	8002bb8 <SysTick_Config>
 8002c74:	4603      	mov	r3, r0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
	...

08002c80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b086      	sub	sp, #24
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c8c:	f7ff f9ce 	bl	800202c <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d101      	bne.n	8002c9c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e099      	b.n	8002dd0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 0201 	bic.w	r2, r2, #1
 8002cba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cbc:	e00f      	b.n	8002cde <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cbe:	f7ff f9b5 	bl	800202c <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b05      	cmp	r3, #5
 8002cca:	d908      	bls.n	8002cde <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2220      	movs	r2, #32
 8002cd0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2203      	movs	r2, #3
 8002cd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e078      	b.n	8002dd0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0301 	and.w	r3, r3, #1
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1e8      	bne.n	8002cbe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	4b38      	ldr	r3, [pc, #224]	@ (8002dd8 <HAL_DMA_Init+0x158>)
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a1b      	ldr	r3, [r3, #32]
 8002d28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d34:	2b04      	cmp	r3, #4
 8002d36:	d107      	bne.n	8002d48 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d40:	4313      	orrs	r3, r2
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	697a      	ldr	r2, [r7, #20]
 8002d4e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	f023 0307 	bic.w	r3, r3, #7
 8002d5e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	d117      	bne.n	8002da2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00e      	beq.n	8002da2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 fa91 	bl	80032ac <DMA_CheckFifoParam>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d008      	beq.n	8002da2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2240      	movs	r2, #64	@ 0x40
 8002d94:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e016      	b.n	8002dd0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 fa48 	bl	8003240 <DMA_CalcBaseAndBitshift>
 8002db0:	4603      	mov	r3, r0
 8002db2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002db8:	223f      	movs	r2, #63	@ 0x3f
 8002dba:	409a      	lsls	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3718      	adds	r7, #24
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	f010803f 	.word	0xf010803f

08002ddc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
 8002de8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dea:	2300      	movs	r3, #0
 8002dec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002df2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d101      	bne.n	8002e02 <HAL_DMA_Start_IT+0x26>
 8002dfe:	2302      	movs	r3, #2
 8002e00:	e040      	b.n	8002e84 <HAL_DMA_Start_IT+0xa8>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d12f      	bne.n	8002e76 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2202      	movs	r2, #2
 8002e1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	68b9      	ldr	r1, [r7, #8]
 8002e2a:	68f8      	ldr	r0, [r7, #12]
 8002e2c:	f000 f9da 	bl	80031e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e34:	223f      	movs	r2, #63	@ 0x3f
 8002e36:	409a      	lsls	r2, r3
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f042 0216 	orr.w	r2, r2, #22
 8002e4a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d007      	beq.n	8002e64 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f042 0208 	orr.w	r2, r2, #8
 8002e62:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f042 0201 	orr.w	r2, r2, #1
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	e005      	b.n	8002e82 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002e7e:	2302      	movs	r3, #2
 8002e80:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002e82:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3718      	adds	r7, #24
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d004      	beq.n	8002eaa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2280      	movs	r2, #128	@ 0x80
 8002ea4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e00c      	b.n	8002ec4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2205      	movs	r2, #5
 8002eae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f022 0201 	bic.w	r2, r2, #1
 8002ec0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002edc:	4b8e      	ldr	r3, [pc, #568]	@ (8003118 <HAL_DMA_IRQHandler+0x248>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a8e      	ldr	r2, [pc, #568]	@ (800311c <HAL_DMA_IRQHandler+0x24c>)
 8002ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee6:	0a9b      	lsrs	r3, r3, #10
 8002ee8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002efa:	2208      	movs	r2, #8
 8002efc:	409a      	lsls	r2, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	4013      	ands	r3, r2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d01a      	beq.n	8002f3c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d013      	beq.n	8002f3c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 0204 	bic.w	r2, r2, #4
 8002f22:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f28:	2208      	movs	r2, #8
 8002f2a:	409a      	lsls	r2, r3
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f34:	f043 0201 	orr.w	r2, r3, #1
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f40:	2201      	movs	r2, #1
 8002f42:	409a      	lsls	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	4013      	ands	r3, r2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d012      	beq.n	8002f72 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00b      	beq.n	8002f72 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f5e:	2201      	movs	r2, #1
 8002f60:	409a      	lsls	r2, r3
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f6a:	f043 0202 	orr.w	r2, r3, #2
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f76:	2204      	movs	r2, #4
 8002f78:	409a      	lsls	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d012      	beq.n	8002fa8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00b      	beq.n	8002fa8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f94:	2204      	movs	r2, #4
 8002f96:	409a      	lsls	r2, r3
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fa0:	f043 0204 	orr.w	r2, r3, #4
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fac:	2210      	movs	r2, #16
 8002fae:	409a      	lsls	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d043      	beq.n	8003040 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0308 	and.w	r3, r3, #8
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d03c      	beq.n	8003040 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fca:	2210      	movs	r2, #16
 8002fcc:	409a      	lsls	r2, r3
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d018      	beq.n	8003012 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d108      	bne.n	8003000 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d024      	beq.n	8003040 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	4798      	blx	r3
 8002ffe:	e01f      	b.n	8003040 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003004:	2b00      	cmp	r3, #0
 8003006:	d01b      	beq.n	8003040 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	4798      	blx	r3
 8003010:	e016      	b.n	8003040 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800301c:	2b00      	cmp	r3, #0
 800301e:	d107      	bne.n	8003030 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f022 0208 	bic.w	r2, r2, #8
 800302e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003034:	2b00      	cmp	r3, #0
 8003036:	d003      	beq.n	8003040 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003044:	2220      	movs	r2, #32
 8003046:	409a      	lsls	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	4013      	ands	r3, r2
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 808f 	beq.w	8003170 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0310 	and.w	r3, r3, #16
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 8087 	beq.w	8003170 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003066:	2220      	movs	r2, #32
 8003068:	409a      	lsls	r2, r3
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b05      	cmp	r3, #5
 8003078:	d136      	bne.n	80030e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f022 0216 	bic.w	r2, r2, #22
 8003088:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	695a      	ldr	r2, [r3, #20]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003098:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d103      	bne.n	80030aa <HAL_DMA_IRQHandler+0x1da>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d007      	beq.n	80030ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f022 0208 	bic.w	r2, r2, #8
 80030b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030be:	223f      	movs	r2, #63	@ 0x3f
 80030c0:	409a      	lsls	r2, r3
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d07e      	beq.n	80031dc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	4798      	blx	r3
        }
        return;
 80030e6:	e079      	b.n	80031dc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d01d      	beq.n	8003132 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d10d      	bne.n	8003120 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003108:	2b00      	cmp	r3, #0
 800310a:	d031      	beq.n	8003170 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	4798      	blx	r3
 8003114:	e02c      	b.n	8003170 <HAL_DMA_IRQHandler+0x2a0>
 8003116:	bf00      	nop
 8003118:	20000024 	.word	0x20000024
 800311c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003124:	2b00      	cmp	r3, #0
 8003126:	d023      	beq.n	8003170 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	4798      	blx	r3
 8003130:	e01e      	b.n	8003170 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800313c:	2b00      	cmp	r3, #0
 800313e:	d10f      	bne.n	8003160 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f022 0210 	bic.w	r2, r2, #16
 800314e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003164:	2b00      	cmp	r3, #0
 8003166:	d003      	beq.n	8003170 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003174:	2b00      	cmp	r3, #0
 8003176:	d032      	beq.n	80031de <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	2b00      	cmp	r3, #0
 8003182:	d022      	beq.n	80031ca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2205      	movs	r2, #5
 8003188:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 0201 	bic.w	r2, r2, #1
 800319a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	3301      	adds	r3, #1
 80031a0:	60bb      	str	r3, [r7, #8]
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d307      	bcc.n	80031b8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1f2      	bne.n	800319c <HAL_DMA_IRQHandler+0x2cc>
 80031b6:	e000      	b.n	80031ba <HAL_DMA_IRQHandler+0x2ea>
          break;
 80031b8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d005      	beq.n	80031de <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	4798      	blx	r3
 80031da:	e000      	b.n	80031de <HAL_DMA_IRQHandler+0x30e>
        return;
 80031dc:	bf00      	nop
    }
  }
}
 80031de:	3718      	adds	r7, #24
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
 80031f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003200:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	2b40      	cmp	r3, #64	@ 0x40
 8003210:	d108      	bne.n	8003224 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003222:	e007      	b.n	8003234 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	60da      	str	r2, [r3, #12]
}
 8003234:	bf00      	nop
 8003236:	3714      	adds	r7, #20
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	b2db      	uxtb	r3, r3
 800324e:	3b10      	subs	r3, #16
 8003250:	4a14      	ldr	r2, [pc, #80]	@ (80032a4 <DMA_CalcBaseAndBitshift+0x64>)
 8003252:	fba2 2303 	umull	r2, r3, r2, r3
 8003256:	091b      	lsrs	r3, r3, #4
 8003258:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800325a:	4a13      	ldr	r2, [pc, #76]	@ (80032a8 <DMA_CalcBaseAndBitshift+0x68>)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	4413      	add	r3, r2
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	461a      	mov	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2b03      	cmp	r3, #3
 800326c:	d909      	bls.n	8003282 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003276:	f023 0303 	bic.w	r3, r3, #3
 800327a:	1d1a      	adds	r2, r3, #4
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003280:	e007      	b.n	8003292 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800328a:	f023 0303 	bic.w	r3, r3, #3
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003296:	4618      	mov	r0, r3
 8003298:	3714      	adds	r7, #20
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	aaaaaaab 	.word	0xaaaaaaab
 80032a8:	080099a4 	.word	0x080099a4

080032ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032b4:	2300      	movs	r3, #0
 80032b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d11f      	bne.n	8003306 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	2b03      	cmp	r3, #3
 80032ca:	d856      	bhi.n	800337a <DMA_CheckFifoParam+0xce>
 80032cc:	a201      	add	r2, pc, #4	@ (adr r2, 80032d4 <DMA_CheckFifoParam+0x28>)
 80032ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d2:	bf00      	nop
 80032d4:	080032e5 	.word	0x080032e5
 80032d8:	080032f7 	.word	0x080032f7
 80032dc:	080032e5 	.word	0x080032e5
 80032e0:	0800337b 	.word	0x0800337b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d046      	beq.n	800337e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032f4:	e043      	b.n	800337e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032fa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80032fe:	d140      	bne.n	8003382 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003304:	e03d      	b.n	8003382 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800330e:	d121      	bne.n	8003354 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	2b03      	cmp	r3, #3
 8003314:	d837      	bhi.n	8003386 <DMA_CheckFifoParam+0xda>
 8003316:	a201      	add	r2, pc, #4	@ (adr r2, 800331c <DMA_CheckFifoParam+0x70>)
 8003318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800331c:	0800332d 	.word	0x0800332d
 8003320:	08003333 	.word	0x08003333
 8003324:	0800332d 	.word	0x0800332d
 8003328:	08003345 	.word	0x08003345
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	73fb      	strb	r3, [r7, #15]
      break;
 8003330:	e030      	b.n	8003394 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003336:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d025      	beq.n	800338a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003342:	e022      	b.n	800338a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003348:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800334c:	d11f      	bne.n	800338e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003352:	e01c      	b.n	800338e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	2b02      	cmp	r3, #2
 8003358:	d903      	bls.n	8003362 <DMA_CheckFifoParam+0xb6>
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	2b03      	cmp	r3, #3
 800335e:	d003      	beq.n	8003368 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003360:	e018      	b.n	8003394 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	73fb      	strb	r3, [r7, #15]
      break;
 8003366:	e015      	b.n	8003394 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800336c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00e      	beq.n	8003392 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	73fb      	strb	r3, [r7, #15]
      break;
 8003378:	e00b      	b.n	8003392 <DMA_CheckFifoParam+0xe6>
      break;
 800337a:	bf00      	nop
 800337c:	e00a      	b.n	8003394 <DMA_CheckFifoParam+0xe8>
      break;
 800337e:	bf00      	nop
 8003380:	e008      	b.n	8003394 <DMA_CheckFifoParam+0xe8>
      break;
 8003382:	bf00      	nop
 8003384:	e006      	b.n	8003394 <DMA_CheckFifoParam+0xe8>
      break;
 8003386:	bf00      	nop
 8003388:	e004      	b.n	8003394 <DMA_CheckFifoParam+0xe8>
      break;
 800338a:	bf00      	nop
 800338c:	e002      	b.n	8003394 <DMA_CheckFifoParam+0xe8>
      break;   
 800338e:	bf00      	nop
 8003390:	e000      	b.n	8003394 <DMA_CheckFifoParam+0xe8>
      break;
 8003392:	bf00      	nop
    }
  } 
  
  return status; 
 8003394:	7bfb      	ldrb	r3, [r7, #15]
}
 8003396:	4618      	mov	r0, r3
 8003398:	3714      	adds	r7, #20
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop

080033a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b089      	sub	sp, #36	@ 0x24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033ae:	2300      	movs	r3, #0
 80033b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033b2:	2300      	movs	r3, #0
 80033b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033b6:	2300      	movs	r3, #0
 80033b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033ba:	2300      	movs	r3, #0
 80033bc:	61fb      	str	r3, [r7, #28]
 80033be:	e159      	b.n	8003674 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033c0:	2201      	movs	r2, #1
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	4013      	ands	r3, r2
 80033d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	429a      	cmp	r2, r3
 80033da:	f040 8148 	bne.w	800366e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f003 0303 	and.w	r3, r3, #3
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d005      	beq.n	80033f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d130      	bne.n	8003458 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	2203      	movs	r2, #3
 8003402:	fa02 f303 	lsl.w	r3, r2, r3
 8003406:	43db      	mvns	r3, r3
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	4013      	ands	r3, r2
 800340c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	68da      	ldr	r2, [r3, #12]
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	fa02 f303 	lsl.w	r3, r2, r3
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	4313      	orrs	r3, r2
 800341e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800342c:	2201      	movs	r2, #1
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	43db      	mvns	r3, r3
 8003436:	69ba      	ldr	r2, [r7, #24]
 8003438:	4013      	ands	r3, r2
 800343a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	091b      	lsrs	r3, r3, #4
 8003442:	f003 0201 	and.w	r2, r3, #1
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	4313      	orrs	r3, r2
 8003450:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f003 0303 	and.w	r3, r3, #3
 8003460:	2b03      	cmp	r3, #3
 8003462:	d017      	beq.n	8003494 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	2203      	movs	r2, #3
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	43db      	mvns	r3, r3
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	4013      	ands	r3, r2
 800347a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	689a      	ldr	r2, [r3, #8]
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	4313      	orrs	r3, r2
 800348c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f003 0303 	and.w	r3, r3, #3
 800349c:	2b02      	cmp	r3, #2
 800349e:	d123      	bne.n	80034e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	08da      	lsrs	r2, r3, #3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3208      	adds	r2, #8
 80034a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	f003 0307 	and.w	r3, r3, #7
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	220f      	movs	r2, #15
 80034b8:	fa02 f303 	lsl.w	r3, r2, r3
 80034bc:	43db      	mvns	r3, r3
 80034be:	69ba      	ldr	r2, [r7, #24]
 80034c0:	4013      	ands	r3, r2
 80034c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	691a      	ldr	r2, [r3, #16]
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	f003 0307 	and.w	r3, r3, #7
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	fa02 f303 	lsl.w	r3, r2, r3
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	08da      	lsrs	r2, r3, #3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	3208      	adds	r2, #8
 80034e2:	69b9      	ldr	r1, [r7, #24]
 80034e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	2203      	movs	r2, #3
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	43db      	mvns	r3, r3
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	4013      	ands	r3, r2
 80034fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f003 0203 	and.w	r2, r3, #3
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	4313      	orrs	r3, r2
 8003514:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003524:	2b00      	cmp	r3, #0
 8003526:	f000 80a2 	beq.w	800366e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800352a:	2300      	movs	r3, #0
 800352c:	60fb      	str	r3, [r7, #12]
 800352e:	4b57      	ldr	r3, [pc, #348]	@ (800368c <HAL_GPIO_Init+0x2e8>)
 8003530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003532:	4a56      	ldr	r2, [pc, #344]	@ (800368c <HAL_GPIO_Init+0x2e8>)
 8003534:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003538:	6453      	str	r3, [r2, #68]	@ 0x44
 800353a:	4b54      	ldr	r3, [pc, #336]	@ (800368c <HAL_GPIO_Init+0x2e8>)
 800353c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800353e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003542:	60fb      	str	r3, [r7, #12]
 8003544:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003546:	4a52      	ldr	r2, [pc, #328]	@ (8003690 <HAL_GPIO_Init+0x2ec>)
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	089b      	lsrs	r3, r3, #2
 800354c:	3302      	adds	r3, #2
 800354e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003552:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	f003 0303 	and.w	r3, r3, #3
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	220f      	movs	r2, #15
 800355e:	fa02 f303 	lsl.w	r3, r2, r3
 8003562:	43db      	mvns	r3, r3
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	4013      	ands	r3, r2
 8003568:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a49      	ldr	r2, [pc, #292]	@ (8003694 <HAL_GPIO_Init+0x2f0>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d019      	beq.n	80035a6 <HAL_GPIO_Init+0x202>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a48      	ldr	r2, [pc, #288]	@ (8003698 <HAL_GPIO_Init+0x2f4>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d013      	beq.n	80035a2 <HAL_GPIO_Init+0x1fe>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a47      	ldr	r2, [pc, #284]	@ (800369c <HAL_GPIO_Init+0x2f8>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d00d      	beq.n	800359e <HAL_GPIO_Init+0x1fa>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a46      	ldr	r2, [pc, #280]	@ (80036a0 <HAL_GPIO_Init+0x2fc>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d007      	beq.n	800359a <HAL_GPIO_Init+0x1f6>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a45      	ldr	r2, [pc, #276]	@ (80036a4 <HAL_GPIO_Init+0x300>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d101      	bne.n	8003596 <HAL_GPIO_Init+0x1f2>
 8003592:	2304      	movs	r3, #4
 8003594:	e008      	b.n	80035a8 <HAL_GPIO_Init+0x204>
 8003596:	2307      	movs	r3, #7
 8003598:	e006      	b.n	80035a8 <HAL_GPIO_Init+0x204>
 800359a:	2303      	movs	r3, #3
 800359c:	e004      	b.n	80035a8 <HAL_GPIO_Init+0x204>
 800359e:	2302      	movs	r3, #2
 80035a0:	e002      	b.n	80035a8 <HAL_GPIO_Init+0x204>
 80035a2:	2301      	movs	r3, #1
 80035a4:	e000      	b.n	80035a8 <HAL_GPIO_Init+0x204>
 80035a6:	2300      	movs	r3, #0
 80035a8:	69fa      	ldr	r2, [r7, #28]
 80035aa:	f002 0203 	and.w	r2, r2, #3
 80035ae:	0092      	lsls	r2, r2, #2
 80035b0:	4093      	lsls	r3, r2
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035b8:	4935      	ldr	r1, [pc, #212]	@ (8003690 <HAL_GPIO_Init+0x2ec>)
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	089b      	lsrs	r3, r3, #2
 80035be:	3302      	adds	r3, #2
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035c6:	4b38      	ldr	r3, [pc, #224]	@ (80036a8 <HAL_GPIO_Init+0x304>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	43db      	mvns	r3, r3
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	4013      	ands	r3, r2
 80035d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035ea:	4a2f      	ldr	r2, [pc, #188]	@ (80036a8 <HAL_GPIO_Init+0x304>)
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035f0:	4b2d      	ldr	r3, [pc, #180]	@ (80036a8 <HAL_GPIO_Init+0x304>)
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	43db      	mvns	r3, r3
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	4013      	ands	r3, r2
 80035fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d003      	beq.n	8003614 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	4313      	orrs	r3, r2
 8003612:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003614:	4a24      	ldr	r2, [pc, #144]	@ (80036a8 <HAL_GPIO_Init+0x304>)
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800361a:	4b23      	ldr	r3, [pc, #140]	@ (80036a8 <HAL_GPIO_Init+0x304>)
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	43db      	mvns	r3, r3
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	4013      	ands	r3, r2
 8003628:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d003      	beq.n	800363e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	4313      	orrs	r3, r2
 800363c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800363e:	4a1a      	ldr	r2, [pc, #104]	@ (80036a8 <HAL_GPIO_Init+0x304>)
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003644:	4b18      	ldr	r3, [pc, #96]	@ (80036a8 <HAL_GPIO_Init+0x304>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	43db      	mvns	r3, r3
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	4013      	ands	r3, r2
 8003652:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d003      	beq.n	8003668 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	4313      	orrs	r3, r2
 8003666:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003668:	4a0f      	ldr	r2, [pc, #60]	@ (80036a8 <HAL_GPIO_Init+0x304>)
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	3301      	adds	r3, #1
 8003672:	61fb      	str	r3, [r7, #28]
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	2b0f      	cmp	r3, #15
 8003678:	f67f aea2 	bls.w	80033c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800367c:	bf00      	nop
 800367e:	bf00      	nop
 8003680:	3724      	adds	r7, #36	@ 0x24
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	40023800 	.word	0x40023800
 8003690:	40013800 	.word	0x40013800
 8003694:	40020000 	.word	0x40020000
 8003698:	40020400 	.word	0x40020400
 800369c:	40020800 	.word	0x40020800
 80036a0:	40020c00 	.word	0x40020c00
 80036a4:	40021000 	.word	0x40021000
 80036a8:	40013c00 	.word	0x40013c00

080036ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	460b      	mov	r3, r1
 80036b6:	807b      	strh	r3, [r7, #2]
 80036b8:	4613      	mov	r3, r2
 80036ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036bc:	787b      	ldrb	r3, [r7, #1]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d003      	beq.n	80036ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036c2:	887a      	ldrh	r2, [r7, #2]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036c8:	e003      	b.n	80036d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036ca:	887b      	ldrh	r3, [r7, #2]
 80036cc:	041a      	lsls	r2, r3, #16
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	619a      	str	r2, [r3, #24]
}
 80036d2:	bf00      	nop
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
	...

080036e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e267      	b.n	8003bc2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d075      	beq.n	80037ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036fe:	4b88      	ldr	r3, [pc, #544]	@ (8003920 <HAL_RCC_OscConfig+0x240>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f003 030c 	and.w	r3, r3, #12
 8003706:	2b04      	cmp	r3, #4
 8003708:	d00c      	beq.n	8003724 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800370a:	4b85      	ldr	r3, [pc, #532]	@ (8003920 <HAL_RCC_OscConfig+0x240>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003712:	2b08      	cmp	r3, #8
 8003714:	d112      	bne.n	800373c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003716:	4b82      	ldr	r3, [pc, #520]	@ (8003920 <HAL_RCC_OscConfig+0x240>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800371e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003722:	d10b      	bne.n	800373c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003724:	4b7e      	ldr	r3, [pc, #504]	@ (8003920 <HAL_RCC_OscConfig+0x240>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d05b      	beq.n	80037e8 <HAL_RCC_OscConfig+0x108>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d157      	bne.n	80037e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e242      	b.n	8003bc2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003744:	d106      	bne.n	8003754 <HAL_RCC_OscConfig+0x74>
 8003746:	4b76      	ldr	r3, [pc, #472]	@ (8003920 <HAL_RCC_OscConfig+0x240>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a75      	ldr	r2, [pc, #468]	@ (8003920 <HAL_RCC_OscConfig+0x240>)
 800374c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003750:	6013      	str	r3, [r2, #0]
 8003752:	e01d      	b.n	8003790 <HAL_RCC_OscConfig+0xb0>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800375c:	d10c      	bne.n	8003778 <HAL_RCC_OscConfig+0x98>
 800375e:	4b70      	ldr	r3, [pc, #448]	@ (8003920 <HAL_RCC_OscConfig+0x240>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a6f      	ldr	r2, [pc, #444]	@ (8003920 <HAL_RCC_OscConfig+0x240>)
 8003764:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003768:	6013      	str	r3, [r2, #0]
 800376a:	4b6d      	ldr	r3, [pc, #436]	@ (8003920 <HAL_RCC_OscConfig+0x240>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a6c      	ldr	r2, [pc, #432]	@ (8003920 <HAL_RCC_OscConfig+0x240>)
 8003770:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003774:	6013      	str	r3, [r2, #0]
 8003776:	e00b      	b.n	8003790 <HAL_RCC_OscConfig+0xb0>
 8003778:	4b69      	ldr	r3, [pc, #420]	@ (8003920 <HAL_RCC_OscConfig+0x240>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a68      	ldr	r2, [pc, #416]	@ (8003920 <HAL_RCC_OscConfig+0x240>)
 800377e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003782:	6013      	str	r3, [r2, #0]
 8003784:	4b66      	ldr	r3, [pc, #408]	@ (8003920 <HAL_RCC_OscConfig+0x240>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a65      	ldr	r2, [pc, #404]	@ (8003920 <HAL_RCC_OscConfig+0x240>)
 800378a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800378e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d013      	beq.n	80037c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003798:	f7fe fc48 	bl	800202c <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037a0:	f7fe fc44 	bl	800202c <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b64      	cmp	r3, #100	@ 0x64
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e207      	b.n	8003bc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037b2:	4b5b      	ldr	r3, [pc, #364]	@ (8003920 <HAL_RCC_OscConfig+0x240>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d0f0      	beq.n	80037a0 <HAL_RCC_OscConfig+0xc0>
 80037be:	e014      	b.n	80037ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c0:	f7fe fc34 	bl	800202c <HAL_GetTick>
 80037c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037c6:	e008      	b.n	80037da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037c8:	f7fe fc30 	bl	800202c <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b64      	cmp	r3, #100	@ 0x64
 80037d4:	d901      	bls.n	80037da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e1f3      	b.n	8003bc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037da:	4b51      	ldr	r3, [pc, #324]	@ (8003920 <HAL_RCC_OscConfig+0x240>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1f0      	bne.n	80037c8 <HAL_RCC_OscConfig+0xe8>
 80037e6:	e000      	b.n	80037ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d063      	beq.n	80038be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037f6:	4b4a      	ldr	r3, [pc, #296]	@ (8003920 <HAL_RCC_OscConfig+0x240>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f003 030c 	and.w	r3, r3, #12
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00b      	beq.n	800381a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003802:	4b47      	ldr	r3, [pc, #284]	@ (8003920 <HAL_RCC_OscConfig+0x240>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800380a:	2b08      	cmp	r3, #8
 800380c:	d11c      	bne.n	8003848 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800380e:	4b44      	ldr	r3, [pc, #272]	@ (8003920 <HAL_RCC_OscConfig+0x240>)
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d116      	bne.n	8003848 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800381a:	4b41      	ldr	r3, [pc, #260]	@ (8003920 <HAL_RCC_OscConfig+0x240>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d005      	beq.n	8003832 <HAL_RCC_OscConfig+0x152>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d001      	beq.n	8003832 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e1c7      	b.n	8003bc2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003832:	4b3b      	ldr	r3, [pc, #236]	@ (8003920 <HAL_RCC_OscConfig+0x240>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	00db      	lsls	r3, r3, #3
 8003840:	4937      	ldr	r1, [pc, #220]	@ (8003920 <HAL_RCC_OscConfig+0x240>)
 8003842:	4313      	orrs	r3, r2
 8003844:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003846:	e03a      	b.n	80038be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d020      	beq.n	8003892 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003850:	4b34      	ldr	r3, [pc, #208]	@ (8003924 <HAL_RCC_OscConfig+0x244>)
 8003852:	2201      	movs	r2, #1
 8003854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003856:	f7fe fbe9 	bl	800202c <HAL_GetTick>
 800385a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800385c:	e008      	b.n	8003870 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800385e:	f7fe fbe5 	bl	800202c <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	2b02      	cmp	r3, #2
 800386a:	d901      	bls.n	8003870 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e1a8      	b.n	8003bc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003870:	4b2b      	ldr	r3, [pc, #172]	@ (8003920 <HAL_RCC_OscConfig+0x240>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d0f0      	beq.n	800385e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800387c:	4b28      	ldr	r3, [pc, #160]	@ (8003920 <HAL_RCC_OscConfig+0x240>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	00db      	lsls	r3, r3, #3
 800388a:	4925      	ldr	r1, [pc, #148]	@ (8003920 <HAL_RCC_OscConfig+0x240>)
 800388c:	4313      	orrs	r3, r2
 800388e:	600b      	str	r3, [r1, #0]
 8003890:	e015      	b.n	80038be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003892:	4b24      	ldr	r3, [pc, #144]	@ (8003924 <HAL_RCC_OscConfig+0x244>)
 8003894:	2200      	movs	r2, #0
 8003896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003898:	f7fe fbc8 	bl	800202c <HAL_GetTick>
 800389c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800389e:	e008      	b.n	80038b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038a0:	f7fe fbc4 	bl	800202c <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e187      	b.n	8003bc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038b2:	4b1b      	ldr	r3, [pc, #108]	@ (8003920 <HAL_RCC_OscConfig+0x240>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1f0      	bne.n	80038a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0308 	and.w	r3, r3, #8
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d036      	beq.n	8003938 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d016      	beq.n	8003900 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038d2:	4b15      	ldr	r3, [pc, #84]	@ (8003928 <HAL_RCC_OscConfig+0x248>)
 80038d4:	2201      	movs	r2, #1
 80038d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d8:	f7fe fba8 	bl	800202c <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038e0:	f7fe fba4 	bl	800202c <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e167      	b.n	8003bc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003920 <HAL_RCC_OscConfig+0x240>)
 80038f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d0f0      	beq.n	80038e0 <HAL_RCC_OscConfig+0x200>
 80038fe:	e01b      	b.n	8003938 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003900:	4b09      	ldr	r3, [pc, #36]	@ (8003928 <HAL_RCC_OscConfig+0x248>)
 8003902:	2200      	movs	r2, #0
 8003904:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003906:	f7fe fb91 	bl	800202c <HAL_GetTick>
 800390a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800390c:	e00e      	b.n	800392c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800390e:	f7fe fb8d 	bl	800202c <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	2b02      	cmp	r3, #2
 800391a:	d907      	bls.n	800392c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e150      	b.n	8003bc2 <HAL_RCC_OscConfig+0x4e2>
 8003920:	40023800 	.word	0x40023800
 8003924:	42470000 	.word	0x42470000
 8003928:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800392c:	4b88      	ldr	r3, [pc, #544]	@ (8003b50 <HAL_RCC_OscConfig+0x470>)
 800392e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1ea      	bne.n	800390e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0304 	and.w	r3, r3, #4
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 8097 	beq.w	8003a74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003946:	2300      	movs	r3, #0
 8003948:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800394a:	4b81      	ldr	r3, [pc, #516]	@ (8003b50 <HAL_RCC_OscConfig+0x470>)
 800394c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800394e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d10f      	bne.n	8003976 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003956:	2300      	movs	r3, #0
 8003958:	60bb      	str	r3, [r7, #8]
 800395a:	4b7d      	ldr	r3, [pc, #500]	@ (8003b50 <HAL_RCC_OscConfig+0x470>)
 800395c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395e:	4a7c      	ldr	r2, [pc, #496]	@ (8003b50 <HAL_RCC_OscConfig+0x470>)
 8003960:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003964:	6413      	str	r3, [r2, #64]	@ 0x40
 8003966:	4b7a      	ldr	r3, [pc, #488]	@ (8003b50 <HAL_RCC_OscConfig+0x470>)
 8003968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800396a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800396e:	60bb      	str	r3, [r7, #8]
 8003970:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003972:	2301      	movs	r3, #1
 8003974:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003976:	4b77      	ldr	r3, [pc, #476]	@ (8003b54 <HAL_RCC_OscConfig+0x474>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800397e:	2b00      	cmp	r3, #0
 8003980:	d118      	bne.n	80039b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003982:	4b74      	ldr	r3, [pc, #464]	@ (8003b54 <HAL_RCC_OscConfig+0x474>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a73      	ldr	r2, [pc, #460]	@ (8003b54 <HAL_RCC_OscConfig+0x474>)
 8003988:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800398c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800398e:	f7fe fb4d 	bl	800202c <HAL_GetTick>
 8003992:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003994:	e008      	b.n	80039a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003996:	f7fe fb49 	bl	800202c <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d901      	bls.n	80039a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e10c      	b.n	8003bc2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a8:	4b6a      	ldr	r3, [pc, #424]	@ (8003b54 <HAL_RCC_OscConfig+0x474>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d0f0      	beq.n	8003996 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d106      	bne.n	80039ca <HAL_RCC_OscConfig+0x2ea>
 80039bc:	4b64      	ldr	r3, [pc, #400]	@ (8003b50 <HAL_RCC_OscConfig+0x470>)
 80039be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039c0:	4a63      	ldr	r2, [pc, #396]	@ (8003b50 <HAL_RCC_OscConfig+0x470>)
 80039c2:	f043 0301 	orr.w	r3, r3, #1
 80039c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80039c8:	e01c      	b.n	8003a04 <HAL_RCC_OscConfig+0x324>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	2b05      	cmp	r3, #5
 80039d0:	d10c      	bne.n	80039ec <HAL_RCC_OscConfig+0x30c>
 80039d2:	4b5f      	ldr	r3, [pc, #380]	@ (8003b50 <HAL_RCC_OscConfig+0x470>)
 80039d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039d6:	4a5e      	ldr	r2, [pc, #376]	@ (8003b50 <HAL_RCC_OscConfig+0x470>)
 80039d8:	f043 0304 	orr.w	r3, r3, #4
 80039dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80039de:	4b5c      	ldr	r3, [pc, #368]	@ (8003b50 <HAL_RCC_OscConfig+0x470>)
 80039e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039e2:	4a5b      	ldr	r2, [pc, #364]	@ (8003b50 <HAL_RCC_OscConfig+0x470>)
 80039e4:	f043 0301 	orr.w	r3, r3, #1
 80039e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80039ea:	e00b      	b.n	8003a04 <HAL_RCC_OscConfig+0x324>
 80039ec:	4b58      	ldr	r3, [pc, #352]	@ (8003b50 <HAL_RCC_OscConfig+0x470>)
 80039ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039f0:	4a57      	ldr	r2, [pc, #348]	@ (8003b50 <HAL_RCC_OscConfig+0x470>)
 80039f2:	f023 0301 	bic.w	r3, r3, #1
 80039f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80039f8:	4b55      	ldr	r3, [pc, #340]	@ (8003b50 <HAL_RCC_OscConfig+0x470>)
 80039fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039fc:	4a54      	ldr	r2, [pc, #336]	@ (8003b50 <HAL_RCC_OscConfig+0x470>)
 80039fe:	f023 0304 	bic.w	r3, r3, #4
 8003a02:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d015      	beq.n	8003a38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a0c:	f7fe fb0e 	bl	800202c <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a12:	e00a      	b.n	8003a2a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a14:	f7fe fb0a 	bl	800202c <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e0cb      	b.n	8003bc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a2a:	4b49      	ldr	r3, [pc, #292]	@ (8003b50 <HAL_RCC_OscConfig+0x470>)
 8003a2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d0ee      	beq.n	8003a14 <HAL_RCC_OscConfig+0x334>
 8003a36:	e014      	b.n	8003a62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a38:	f7fe faf8 	bl	800202c <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a3e:	e00a      	b.n	8003a56 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a40:	f7fe faf4 	bl	800202c <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e0b5      	b.n	8003bc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a56:	4b3e      	ldr	r3, [pc, #248]	@ (8003b50 <HAL_RCC_OscConfig+0x470>)
 8003a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1ee      	bne.n	8003a40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a62:	7dfb      	ldrb	r3, [r7, #23]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d105      	bne.n	8003a74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a68:	4b39      	ldr	r3, [pc, #228]	@ (8003b50 <HAL_RCC_OscConfig+0x470>)
 8003a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a6c:	4a38      	ldr	r2, [pc, #224]	@ (8003b50 <HAL_RCC_OscConfig+0x470>)
 8003a6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a72:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f000 80a1 	beq.w	8003bc0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a7e:	4b34      	ldr	r3, [pc, #208]	@ (8003b50 <HAL_RCC_OscConfig+0x470>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f003 030c 	and.w	r3, r3, #12
 8003a86:	2b08      	cmp	r3, #8
 8003a88:	d05c      	beq.n	8003b44 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d141      	bne.n	8003b16 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a92:	4b31      	ldr	r3, [pc, #196]	@ (8003b58 <HAL_RCC_OscConfig+0x478>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a98:	f7fe fac8 	bl	800202c <HAL_GetTick>
 8003a9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aa0:	f7fe fac4 	bl	800202c <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e087      	b.n	8003bc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ab2:	4b27      	ldr	r3, [pc, #156]	@ (8003b50 <HAL_RCC_OscConfig+0x470>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1f0      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	69da      	ldr	r2, [r3, #28]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a1b      	ldr	r3, [r3, #32]
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003acc:	019b      	lsls	r3, r3, #6
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ad4:	085b      	lsrs	r3, r3, #1
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	041b      	lsls	r3, r3, #16
 8003ada:	431a      	orrs	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ae0:	061b      	lsls	r3, r3, #24
 8003ae2:	491b      	ldr	r1, [pc, #108]	@ (8003b50 <HAL_RCC_OscConfig+0x470>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ae8:	4b1b      	ldr	r3, [pc, #108]	@ (8003b58 <HAL_RCC_OscConfig+0x478>)
 8003aea:	2201      	movs	r2, #1
 8003aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aee:	f7fe fa9d 	bl	800202c <HAL_GetTick>
 8003af2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003af4:	e008      	b.n	8003b08 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003af6:	f7fe fa99 	bl	800202c <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d901      	bls.n	8003b08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e05c      	b.n	8003bc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b08:	4b11      	ldr	r3, [pc, #68]	@ (8003b50 <HAL_RCC_OscConfig+0x470>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0f0      	beq.n	8003af6 <HAL_RCC_OscConfig+0x416>
 8003b14:	e054      	b.n	8003bc0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b16:	4b10      	ldr	r3, [pc, #64]	@ (8003b58 <HAL_RCC_OscConfig+0x478>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b1c:	f7fe fa86 	bl	800202c <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b22:	e008      	b.n	8003b36 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b24:	f7fe fa82 	bl	800202c <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e045      	b.n	8003bc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b36:	4b06      	ldr	r3, [pc, #24]	@ (8003b50 <HAL_RCC_OscConfig+0x470>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1f0      	bne.n	8003b24 <HAL_RCC_OscConfig+0x444>
 8003b42:	e03d      	b.n	8003bc0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d107      	bne.n	8003b5c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e038      	b.n	8003bc2 <HAL_RCC_OscConfig+0x4e2>
 8003b50:	40023800 	.word	0x40023800
 8003b54:	40007000 	.word	0x40007000
 8003b58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b5c:	4b1b      	ldr	r3, [pc, #108]	@ (8003bcc <HAL_RCC_OscConfig+0x4ec>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d028      	beq.n	8003bbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d121      	bne.n	8003bbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d11a      	bne.n	8003bbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003b92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d111      	bne.n	8003bbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ba2:	085b      	lsrs	r3, r3, #1
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d107      	bne.n	8003bbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d001      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e000      	b.n	8003bc2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3718      	adds	r7, #24
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	40023800 	.word	0x40023800

08003bd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d101      	bne.n	8003be4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e0cc      	b.n	8003d7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003be4:	4b68      	ldr	r3, [pc, #416]	@ (8003d88 <HAL_RCC_ClockConfig+0x1b8>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0307 	and.w	r3, r3, #7
 8003bec:	683a      	ldr	r2, [r7, #0]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d90c      	bls.n	8003c0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bf2:	4b65      	ldr	r3, [pc, #404]	@ (8003d88 <HAL_RCC_ClockConfig+0x1b8>)
 8003bf4:	683a      	ldr	r2, [r7, #0]
 8003bf6:	b2d2      	uxtb	r2, r2
 8003bf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bfa:	4b63      	ldr	r3, [pc, #396]	@ (8003d88 <HAL_RCC_ClockConfig+0x1b8>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0307 	and.w	r3, r3, #7
 8003c02:	683a      	ldr	r2, [r7, #0]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d001      	beq.n	8003c0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e0b8      	b.n	8003d7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0302 	and.w	r3, r3, #2
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d020      	beq.n	8003c5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0304 	and.w	r3, r3, #4
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d005      	beq.n	8003c30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c24:	4b59      	ldr	r3, [pc, #356]	@ (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	4a58      	ldr	r2, [pc, #352]	@ (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003c2a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003c2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0308 	and.w	r3, r3, #8
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d005      	beq.n	8003c48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c3c:	4b53      	ldr	r3, [pc, #332]	@ (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	4a52      	ldr	r2, [pc, #328]	@ (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003c42:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003c46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c48:	4b50      	ldr	r3, [pc, #320]	@ (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	494d      	ldr	r1, [pc, #308]	@ (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d044      	beq.n	8003cf0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d107      	bne.n	8003c7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c6e:	4b47      	ldr	r3, [pc, #284]	@ (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d119      	bne.n	8003cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e07f      	b.n	8003d7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d003      	beq.n	8003c8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c8a:	2b03      	cmp	r3, #3
 8003c8c:	d107      	bne.n	8003c9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c8e:	4b3f      	ldr	r3, [pc, #252]	@ (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d109      	bne.n	8003cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e06f      	b.n	8003d7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c9e:	4b3b      	ldr	r3, [pc, #236]	@ (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e067      	b.n	8003d7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cae:	4b37      	ldr	r3, [pc, #220]	@ (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f023 0203 	bic.w	r2, r3, #3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	4934      	ldr	r1, [pc, #208]	@ (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cc0:	f7fe f9b4 	bl	800202c <HAL_GetTick>
 8003cc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cc6:	e00a      	b.n	8003cde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cc8:	f7fe f9b0 	bl	800202c <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e04f      	b.n	8003d7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cde:	4b2b      	ldr	r3, [pc, #172]	@ (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f003 020c 	and.w	r2, r3, #12
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d1eb      	bne.n	8003cc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cf0:	4b25      	ldr	r3, [pc, #148]	@ (8003d88 <HAL_RCC_ClockConfig+0x1b8>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0307 	and.w	r3, r3, #7
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d20c      	bcs.n	8003d18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cfe:	4b22      	ldr	r3, [pc, #136]	@ (8003d88 <HAL_RCC_ClockConfig+0x1b8>)
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	b2d2      	uxtb	r2, r2
 8003d04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d06:	4b20      	ldr	r3, [pc, #128]	@ (8003d88 <HAL_RCC_ClockConfig+0x1b8>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0307 	and.w	r3, r3, #7
 8003d0e:	683a      	ldr	r2, [r7, #0]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d001      	beq.n	8003d18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e032      	b.n	8003d7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0304 	and.w	r3, r3, #4
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d008      	beq.n	8003d36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d24:	4b19      	ldr	r3, [pc, #100]	@ (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	4916      	ldr	r1, [pc, #88]	@ (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0308 	and.w	r3, r3, #8
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d009      	beq.n	8003d56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d42:	4b12      	ldr	r3, [pc, #72]	@ (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	00db      	lsls	r3, r3, #3
 8003d50:	490e      	ldr	r1, [pc, #56]	@ (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d56:	f000 f821 	bl	8003d9c <HAL_RCC_GetSysClockFreq>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	091b      	lsrs	r3, r3, #4
 8003d62:	f003 030f 	and.w	r3, r3, #15
 8003d66:	490a      	ldr	r1, [pc, #40]	@ (8003d90 <HAL_RCC_ClockConfig+0x1c0>)
 8003d68:	5ccb      	ldrb	r3, [r1, r3]
 8003d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d6e:	4a09      	ldr	r2, [pc, #36]	@ (8003d94 <HAL_RCC_ClockConfig+0x1c4>)
 8003d70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d72:	4b09      	ldr	r3, [pc, #36]	@ (8003d98 <HAL_RCC_ClockConfig+0x1c8>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7fe f914 	bl	8001fa4 <HAL_InitTick>

  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	40023c00 	.word	0x40023c00
 8003d8c:	40023800 	.word	0x40023800
 8003d90:	0800998c 	.word	0x0800998c
 8003d94:	20000024 	.word	0x20000024
 8003d98:	20000028 	.word	0x20000028

08003d9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003da0:	b094      	sub	sp, #80	@ 0x50
 8003da2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003da4:	2300      	movs	r3, #0
 8003da6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003da8:	2300      	movs	r3, #0
 8003daa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003dac:	2300      	movs	r3, #0
 8003dae:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003db0:	2300      	movs	r3, #0
 8003db2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003db4:	4b79      	ldr	r3, [pc, #484]	@ (8003f9c <HAL_RCC_GetSysClockFreq+0x200>)
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f003 030c 	and.w	r3, r3, #12
 8003dbc:	2b08      	cmp	r3, #8
 8003dbe:	d00d      	beq.n	8003ddc <HAL_RCC_GetSysClockFreq+0x40>
 8003dc0:	2b08      	cmp	r3, #8
 8003dc2:	f200 80e1 	bhi.w	8003f88 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d002      	beq.n	8003dd0 <HAL_RCC_GetSysClockFreq+0x34>
 8003dca:	2b04      	cmp	r3, #4
 8003dcc:	d003      	beq.n	8003dd6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003dce:	e0db      	b.n	8003f88 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003dd0:	4b73      	ldr	r3, [pc, #460]	@ (8003fa0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003dd2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003dd4:	e0db      	b.n	8003f8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003dd6:	4b73      	ldr	r3, [pc, #460]	@ (8003fa4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003dd8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003dda:	e0d8      	b.n	8003f8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ddc:	4b6f      	ldr	r3, [pc, #444]	@ (8003f9c <HAL_RCC_GetSysClockFreq+0x200>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003de4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003de6:	4b6d      	ldr	r3, [pc, #436]	@ (8003f9c <HAL_RCC_GetSysClockFreq+0x200>)
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d063      	beq.n	8003eba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003df2:	4b6a      	ldr	r3, [pc, #424]	@ (8003f9c <HAL_RCC_GetSysClockFreq+0x200>)
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	099b      	lsrs	r3, r3, #6
 8003df8:	2200      	movs	r2, #0
 8003dfa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003dfc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003dfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e04:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e06:	2300      	movs	r3, #0
 8003e08:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e0a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003e0e:	4622      	mov	r2, r4
 8003e10:	462b      	mov	r3, r5
 8003e12:	f04f 0000 	mov.w	r0, #0
 8003e16:	f04f 0100 	mov.w	r1, #0
 8003e1a:	0159      	lsls	r1, r3, #5
 8003e1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e20:	0150      	lsls	r0, r2, #5
 8003e22:	4602      	mov	r2, r0
 8003e24:	460b      	mov	r3, r1
 8003e26:	4621      	mov	r1, r4
 8003e28:	1a51      	subs	r1, r2, r1
 8003e2a:	6139      	str	r1, [r7, #16]
 8003e2c:	4629      	mov	r1, r5
 8003e2e:	eb63 0301 	sbc.w	r3, r3, r1
 8003e32:	617b      	str	r3, [r7, #20]
 8003e34:	f04f 0200 	mov.w	r2, #0
 8003e38:	f04f 0300 	mov.w	r3, #0
 8003e3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e40:	4659      	mov	r1, fp
 8003e42:	018b      	lsls	r3, r1, #6
 8003e44:	4651      	mov	r1, sl
 8003e46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e4a:	4651      	mov	r1, sl
 8003e4c:	018a      	lsls	r2, r1, #6
 8003e4e:	4651      	mov	r1, sl
 8003e50:	ebb2 0801 	subs.w	r8, r2, r1
 8003e54:	4659      	mov	r1, fp
 8003e56:	eb63 0901 	sbc.w	r9, r3, r1
 8003e5a:	f04f 0200 	mov.w	r2, #0
 8003e5e:	f04f 0300 	mov.w	r3, #0
 8003e62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e6e:	4690      	mov	r8, r2
 8003e70:	4699      	mov	r9, r3
 8003e72:	4623      	mov	r3, r4
 8003e74:	eb18 0303 	adds.w	r3, r8, r3
 8003e78:	60bb      	str	r3, [r7, #8]
 8003e7a:	462b      	mov	r3, r5
 8003e7c:	eb49 0303 	adc.w	r3, r9, r3
 8003e80:	60fb      	str	r3, [r7, #12]
 8003e82:	f04f 0200 	mov.w	r2, #0
 8003e86:	f04f 0300 	mov.w	r3, #0
 8003e8a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e8e:	4629      	mov	r1, r5
 8003e90:	024b      	lsls	r3, r1, #9
 8003e92:	4621      	mov	r1, r4
 8003e94:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e98:	4621      	mov	r1, r4
 8003e9a:	024a      	lsls	r2, r1, #9
 8003e9c:	4610      	mov	r0, r2
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ea6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ea8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003eac:	f7fc fed4 	bl	8000c58 <__aeabi_uldivmod>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003eb8:	e058      	b.n	8003f6c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eba:	4b38      	ldr	r3, [pc, #224]	@ (8003f9c <HAL_RCC_GetSysClockFreq+0x200>)
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	099b      	lsrs	r3, r3, #6
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	4611      	mov	r1, r2
 8003ec6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003eca:	623b      	str	r3, [r7, #32]
 8003ecc:	2300      	movs	r3, #0
 8003ece:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ed0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ed4:	4642      	mov	r2, r8
 8003ed6:	464b      	mov	r3, r9
 8003ed8:	f04f 0000 	mov.w	r0, #0
 8003edc:	f04f 0100 	mov.w	r1, #0
 8003ee0:	0159      	lsls	r1, r3, #5
 8003ee2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ee6:	0150      	lsls	r0, r2, #5
 8003ee8:	4602      	mov	r2, r0
 8003eea:	460b      	mov	r3, r1
 8003eec:	4641      	mov	r1, r8
 8003eee:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ef2:	4649      	mov	r1, r9
 8003ef4:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ef8:	f04f 0200 	mov.w	r2, #0
 8003efc:	f04f 0300 	mov.w	r3, #0
 8003f00:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003f04:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003f08:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003f0c:	ebb2 040a 	subs.w	r4, r2, sl
 8003f10:	eb63 050b 	sbc.w	r5, r3, fp
 8003f14:	f04f 0200 	mov.w	r2, #0
 8003f18:	f04f 0300 	mov.w	r3, #0
 8003f1c:	00eb      	lsls	r3, r5, #3
 8003f1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f22:	00e2      	lsls	r2, r4, #3
 8003f24:	4614      	mov	r4, r2
 8003f26:	461d      	mov	r5, r3
 8003f28:	4643      	mov	r3, r8
 8003f2a:	18e3      	adds	r3, r4, r3
 8003f2c:	603b      	str	r3, [r7, #0]
 8003f2e:	464b      	mov	r3, r9
 8003f30:	eb45 0303 	adc.w	r3, r5, r3
 8003f34:	607b      	str	r3, [r7, #4]
 8003f36:	f04f 0200 	mov.w	r2, #0
 8003f3a:	f04f 0300 	mov.w	r3, #0
 8003f3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f42:	4629      	mov	r1, r5
 8003f44:	028b      	lsls	r3, r1, #10
 8003f46:	4621      	mov	r1, r4
 8003f48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f4c:	4621      	mov	r1, r4
 8003f4e:	028a      	lsls	r2, r1, #10
 8003f50:	4610      	mov	r0, r2
 8003f52:	4619      	mov	r1, r3
 8003f54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f56:	2200      	movs	r2, #0
 8003f58:	61bb      	str	r3, [r7, #24]
 8003f5a:	61fa      	str	r2, [r7, #28]
 8003f5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f60:	f7fc fe7a 	bl	8000c58 <__aeabi_uldivmod>
 8003f64:	4602      	mov	r2, r0
 8003f66:	460b      	mov	r3, r1
 8003f68:	4613      	mov	r3, r2
 8003f6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8003f9c <HAL_RCC_GetSysClockFreq+0x200>)
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	0c1b      	lsrs	r3, r3, #16
 8003f72:	f003 0303 	and.w	r3, r3, #3
 8003f76:	3301      	adds	r3, #1
 8003f78:	005b      	lsls	r3, r3, #1
 8003f7a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003f7c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f84:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f86:	e002      	b.n	8003f8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f88:	4b05      	ldr	r3, [pc, #20]	@ (8003fa0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f8a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3750      	adds	r7, #80	@ 0x50
 8003f94:	46bd      	mov	sp, r7
 8003f96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f9a:	bf00      	nop
 8003f9c:	40023800 	.word	0x40023800
 8003fa0:	00f42400 	.word	0x00f42400
 8003fa4:	007a1200 	.word	0x007a1200

08003fa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fac:	4b03      	ldr	r3, [pc, #12]	@ (8003fbc <HAL_RCC_GetHCLKFreq+0x14>)
 8003fae:	681b      	ldr	r3, [r3, #0]
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	20000024 	.word	0x20000024

08003fc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003fc4:	f7ff fff0 	bl	8003fa8 <HAL_RCC_GetHCLKFreq>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	4b05      	ldr	r3, [pc, #20]	@ (8003fe0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	0a9b      	lsrs	r3, r3, #10
 8003fd0:	f003 0307 	and.w	r3, r3, #7
 8003fd4:	4903      	ldr	r1, [pc, #12]	@ (8003fe4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fd6:	5ccb      	ldrb	r3, [r1, r3]
 8003fd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	40023800 	.word	0x40023800
 8003fe4:	0800999c 	.word	0x0800999c

08003fe8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003fec:	f7ff ffdc 	bl	8003fa8 <HAL_RCC_GetHCLKFreq>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	4b05      	ldr	r3, [pc, #20]	@ (8004008 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	0b5b      	lsrs	r3, r3, #13
 8003ff8:	f003 0307 	and.w	r3, r3, #7
 8003ffc:	4903      	ldr	r1, [pc, #12]	@ (800400c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ffe:	5ccb      	ldrb	r3, [r1, r3]
 8004000:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004004:	4618      	mov	r0, r3
 8004006:	bd80      	pop	{r7, pc}
 8004008:	40023800 	.word	0x40023800
 800400c:	0800999c 	.word	0x0800999c

08004010 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e07b      	b.n	800411a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004026:	2b00      	cmp	r3, #0
 8004028:	d108      	bne.n	800403c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004032:	d009      	beq.n	8004048 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	61da      	str	r2, [r3, #28]
 800403a:	e005      	b.n	8004048 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d106      	bne.n	8004068 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7fd fc80 	bl	8001968 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2202      	movs	r2, #2
 800406c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800407e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004090:	431a      	orrs	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800409a:	431a      	orrs	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	431a      	orrs	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	431a      	orrs	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040b8:	431a      	orrs	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	69db      	ldr	r3, [r3, #28]
 80040be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80040c2:	431a      	orrs	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a1b      	ldr	r3, [r3, #32]
 80040c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040cc:	ea42 0103 	orr.w	r1, r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040d4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	430a      	orrs	r2, r1
 80040de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	0c1b      	lsrs	r3, r3, #16
 80040e6:	f003 0104 	and.w	r1, r3, #4
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ee:	f003 0210 	and.w	r2, r3, #16
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	69da      	ldr	r2, [r3, #28]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004108:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3708      	adds	r7, #8
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
	...

08004124 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b086      	sub	sp, #24
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	4613      	mov	r3, r2
 8004130:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004132:	2300      	movs	r3, #0
 8004134:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800413c:	2b01      	cmp	r3, #1
 800413e:	d101      	bne.n	8004144 <HAL_SPI_Transmit_DMA+0x20>
 8004140:	2302      	movs	r3, #2
 8004142:	e09b      	b.n	800427c <HAL_SPI_Transmit_DMA+0x158>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004152:	b2db      	uxtb	r3, r3
 8004154:	2b01      	cmp	r3, #1
 8004156:	d002      	beq.n	800415e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8004158:	2302      	movs	r3, #2
 800415a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800415c:	e089      	b.n	8004272 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d002      	beq.n	800416a <HAL_SPI_Transmit_DMA+0x46>
 8004164:	88fb      	ldrh	r3, [r7, #6]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d102      	bne.n	8004170 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800416e:	e080      	b.n	8004272 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2203      	movs	r2, #3
 8004174:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	68ba      	ldr	r2, [r7, #8]
 8004182:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	88fa      	ldrh	r2, [r7, #6]
 8004188:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	88fa      	ldrh	r2, [r7, #6]
 800418e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041b6:	d10f      	bne.n	80041d8 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041c6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80041d6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041dc:	4a29      	ldr	r2, [pc, #164]	@ (8004284 <HAL_SPI_Transmit_DMA+0x160>)
 80041de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041e4:	4a28      	ldr	r2, [pc, #160]	@ (8004288 <HAL_SPI_Transmit_DMA+0x164>)
 80041e6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041ec:	4a27      	ldr	r2, [pc, #156]	@ (800428c <HAL_SPI_Transmit_DMA+0x168>)
 80041ee:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041f4:	2200      	movs	r2, #0
 80041f6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004200:	4619      	mov	r1, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	330c      	adds	r3, #12
 8004208:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800420e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004210:	f7fe fde4 	bl	8002ddc <HAL_DMA_Start_IT>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00c      	beq.n	8004234 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800421e:	f043 0210 	orr.w	r2, r3, #16
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2201      	movs	r2, #1
 800422e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    goto error;
 8004232:	e01e      	b.n	8004272 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800423e:	2b40      	cmp	r3, #64	@ 0x40
 8004240:	d007      	beq.n	8004252 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004250:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	685a      	ldr	r2, [r3, #4]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f042 0220 	orr.w	r2, r2, #32
 8004260:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f042 0202 	orr.w	r2, r2, #2
 8004270:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800427a:	7dfb      	ldrb	r3, [r7, #23]
}
 800427c:	4618      	mov	r0, r3
 800427e:	3718      	adds	r7, #24
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	08004549 	.word	0x08004549
 8004288:	080044a1 	.word	0x080044a1
 800428c:	08004565 	.word	0x08004565

08004290 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b088      	sub	sp, #32
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d10e      	bne.n	80042d0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d009      	beq.n	80042d0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d004      	beq.n	80042d0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	4798      	blx	r3
    return;
 80042ce:	e0ce      	b.n	800446e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	f003 0302 	and.w	r3, r3, #2
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d009      	beq.n	80042ee <HAL_SPI_IRQHandler+0x5e>
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d004      	beq.n	80042ee <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	4798      	blx	r3
    return;
 80042ec:	e0bf      	b.n	800446e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	f003 0320 	and.w	r3, r3, #32
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d10a      	bne.n	800430e <HAL_SPI_IRQHandler+0x7e>
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d105      	bne.n	800430e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004308:	2b00      	cmp	r3, #0
 800430a:	f000 80b0 	beq.w	800446e <HAL_SPI_IRQHandler+0x1de>
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	f003 0320 	and.w	r3, r3, #32
 8004314:	2b00      	cmp	r3, #0
 8004316:	f000 80aa 	beq.w	800446e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004320:	2b00      	cmp	r3, #0
 8004322:	d023      	beq.n	800436c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800432a:	b2db      	uxtb	r3, r3
 800432c:	2b03      	cmp	r3, #3
 800432e:	d011      	beq.n	8004354 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004334:	f043 0204 	orr.w	r2, r3, #4
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800433c:	2300      	movs	r3, #0
 800433e:	617b      	str	r3, [r7, #20]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	617b      	str	r3, [r7, #20]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	617b      	str	r3, [r7, #20]
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	e00b      	b.n	800436c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004354:	2300      	movs	r3, #0
 8004356:	613b      	str	r3, [r7, #16]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	613b      	str	r3, [r7, #16]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	613b      	str	r3, [r7, #16]
 8004368:	693b      	ldr	r3, [r7, #16]
        return;
 800436a:	e080      	b.n	800446e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	f003 0320 	and.w	r3, r3, #32
 8004372:	2b00      	cmp	r3, #0
 8004374:	d014      	beq.n	80043a0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800437a:	f043 0201 	orr.w	r2, r3, #1
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004382:	2300      	movs	r3, #0
 8004384:	60fb      	str	r3, [r7, #12]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	60fb      	str	r3, [r7, #12]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800439c:	601a      	str	r2, [r3, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00c      	beq.n	80043c4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043ae:	f043 0208 	orr.w	r2, r3, #8
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80043b6:	2300      	movs	r3, #0
 80043b8:	60bb      	str	r3, [r7, #8]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	60bb      	str	r3, [r7, #8]
 80043c2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d04f      	beq.n	800446c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	685a      	ldr	r2, [r3, #4]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80043da:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d104      	bne.n	80043f8 <HAL_SPI_IRQHandler+0x168>
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	f003 0301 	and.w	r3, r3, #1
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d034      	beq.n	8004462 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	685a      	ldr	r2, [r3, #4]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f022 0203 	bic.w	r2, r2, #3
 8004406:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800440c:	2b00      	cmp	r3, #0
 800440e:	d011      	beq.n	8004434 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004414:	4a17      	ldr	r2, [pc, #92]	@ (8004474 <HAL_SPI_IRQHandler+0x1e4>)
 8004416:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800441c:	4618      	mov	r0, r3
 800441e:	f7fe fd35 	bl	8002e8c <HAL_DMA_Abort_IT>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d005      	beq.n	8004434 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800442c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004438:	2b00      	cmp	r3, #0
 800443a:	d016      	beq.n	800446a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004440:	4a0c      	ldr	r2, [pc, #48]	@ (8004474 <HAL_SPI_IRQHandler+0x1e4>)
 8004442:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004448:	4618      	mov	r0, r3
 800444a:	f7fe fd1f 	bl	8002e8c <HAL_DMA_Abort_IT>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d00a      	beq.n	800446a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004458:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8004460:	e003      	b.n	800446a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 f812 	bl	800448c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004468:	e000      	b.n	800446c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800446a:	bf00      	nop
    return;
 800446c:	bf00      	nop
  }
}
 800446e:	3720      	adds	r7, #32
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	080045a5 	.word	0x080045a5

08004478 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ac:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044ae:	f7fd fdbd 	bl	800202c <HAL_GetTick>
 80044b2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044c2:	d03b      	beq.n	800453c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	685a      	ldr	r2, [r3, #4]
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 0220 	bic.w	r2, r2, #32
 80044d2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	685a      	ldr	r2, [r3, #4]
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f022 0202 	bic.w	r2, r2, #2
 80044e2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	2164      	movs	r1, #100	@ 0x64
 80044e8:	6978      	ldr	r0, [r7, #20]
 80044ea:	f000 f8f7 	bl	80046dc <SPI_EndRxTxTransaction>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d005      	beq.n	8004500 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044f8:	f043 0220 	orr.w	r2, r3, #32
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d10a      	bne.n	800451e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004508:	2300      	movs	r3, #0
 800450a:	60fb      	str	r3, [r7, #12]
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	60fb      	str	r3, [r7, #12]
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	60fb      	str	r3, [r7, #12]
 800451c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	2200      	movs	r2, #0
 8004522:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004530:	2b00      	cmp	r3, #0
 8004532:	d003      	beq.n	800453c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004534:	6978      	ldr	r0, [r7, #20]
 8004536:	f7ff ffa9 	bl	800448c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800453a:	e002      	b.n	8004542 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800453c:	6978      	ldr	r0, [r7, #20]
 800453e:	f7fc fe1f 	bl	8001180 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004542:	3718      	adds	r7, #24
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004554:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f7ff ff8e 	bl	8004478 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800455c:	bf00      	nop
 800455e:	3710      	adds	r7, #16
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004570:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	685a      	ldr	r2, [r3, #4]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f022 0203 	bic.w	r2, r2, #3
 8004580:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004586:	f043 0210 	orr.w	r2, r3, #16
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f7ff ff78 	bl	800448c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800459c:	bf00      	nop
 800459e:	3710      	adds	r7, #16
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045b0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2200      	movs	r2, #0
 80045b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f7ff ff64 	bl	800448c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80045c4:	bf00      	nop
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b088      	sub	sp, #32
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	603b      	str	r3, [r7, #0]
 80045d8:	4613      	mov	r3, r2
 80045da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80045dc:	f7fd fd26 	bl	800202c <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045e4:	1a9b      	subs	r3, r3, r2
 80045e6:	683a      	ldr	r2, [r7, #0]
 80045e8:	4413      	add	r3, r2
 80045ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80045ec:	f7fd fd1e 	bl	800202c <HAL_GetTick>
 80045f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80045f2:	4b39      	ldr	r3, [pc, #228]	@ (80046d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	015b      	lsls	r3, r3, #5
 80045f8:	0d1b      	lsrs	r3, r3, #20
 80045fa:	69fa      	ldr	r2, [r7, #28]
 80045fc:	fb02 f303 	mul.w	r3, r2, r3
 8004600:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004602:	e054      	b.n	80046ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800460a:	d050      	beq.n	80046ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800460c:	f7fd fd0e 	bl	800202c <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	69fa      	ldr	r2, [r7, #28]
 8004618:	429a      	cmp	r2, r3
 800461a:	d902      	bls.n	8004622 <SPI_WaitFlagStateUntilTimeout+0x56>
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d13d      	bne.n	800469e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	685a      	ldr	r2, [r3, #4]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004630:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800463a:	d111      	bne.n	8004660 <SPI_WaitFlagStateUntilTimeout+0x94>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004644:	d004      	beq.n	8004650 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800464e:	d107      	bne.n	8004660 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800465e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004664:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004668:	d10f      	bne.n	800468a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004678:	601a      	str	r2, [r3, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004688:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2201      	movs	r2, #1
 800468e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e017      	b.n	80046ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d101      	bne.n	80046a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80046a4:	2300      	movs	r3, #0
 80046a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	3b01      	subs	r3, #1
 80046ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	689a      	ldr	r2, [r3, #8]
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	4013      	ands	r3, r2
 80046b8:	68ba      	ldr	r2, [r7, #8]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	bf0c      	ite	eq
 80046be:	2301      	moveq	r3, #1
 80046c0:	2300      	movne	r3, #0
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	461a      	mov	r2, r3
 80046c6:	79fb      	ldrb	r3, [r7, #7]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d19b      	bne.n	8004604 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3720      	adds	r7, #32
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	20000024 	.word	0x20000024

080046dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b088      	sub	sp, #32
 80046e0:	af02      	add	r7, sp, #8
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80046e8:	4b1b      	ldr	r3, [pc, #108]	@ (8004758 <SPI_EndRxTxTransaction+0x7c>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a1b      	ldr	r2, [pc, #108]	@ (800475c <SPI_EndRxTxTransaction+0x80>)
 80046ee:	fba2 2303 	umull	r2, r3, r2, r3
 80046f2:	0d5b      	lsrs	r3, r3, #21
 80046f4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80046f8:	fb02 f303 	mul.w	r3, r2, r3
 80046fc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004706:	d112      	bne.n	800472e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	9300      	str	r3, [sp, #0]
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	2200      	movs	r2, #0
 8004710:	2180      	movs	r1, #128	@ 0x80
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f7ff ff5a 	bl	80045cc <SPI_WaitFlagStateUntilTimeout>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d016      	beq.n	800474c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004722:	f043 0220 	orr.w	r2, r3, #32
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e00f      	b.n	800474e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00a      	beq.n	800474a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	3b01      	subs	r3, #1
 8004738:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004744:	2b80      	cmp	r3, #128	@ 0x80
 8004746:	d0f2      	beq.n	800472e <SPI_EndRxTxTransaction+0x52>
 8004748:	e000      	b.n	800474c <SPI_EndRxTxTransaction+0x70>
        break;
 800474a:	bf00      	nop
  }

  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3718      	adds	r7, #24
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	20000024 	.word	0x20000024
 800475c:	165e9f81 	.word	0x165e9f81

08004760 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d101      	bne.n	8004772 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e041      	b.n	80047f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d106      	bne.n	800478c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f7fd f970 	bl	8001a6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2202      	movs	r2, #2
 8004790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	3304      	adds	r3, #4
 800479c:	4619      	mov	r1, r3
 800479e:	4610      	mov	r0, r2
 80047a0:	f000 fbfe 	bl	8004fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3708      	adds	r7, #8
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
	...

08004800 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800480e:	b2db      	uxtb	r3, r3
 8004810:	2b01      	cmp	r3, #1
 8004812:	d001      	beq.n	8004818 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e03c      	b.n	8004892 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2202      	movs	r2, #2
 800481c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a1e      	ldr	r2, [pc, #120]	@ (80048a0 <HAL_TIM_Base_Start+0xa0>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d018      	beq.n	800485c <HAL_TIM_Base_Start+0x5c>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004832:	d013      	beq.n	800485c <HAL_TIM_Base_Start+0x5c>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a1a      	ldr	r2, [pc, #104]	@ (80048a4 <HAL_TIM_Base_Start+0xa4>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d00e      	beq.n	800485c <HAL_TIM_Base_Start+0x5c>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a19      	ldr	r2, [pc, #100]	@ (80048a8 <HAL_TIM_Base_Start+0xa8>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d009      	beq.n	800485c <HAL_TIM_Base_Start+0x5c>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a17      	ldr	r2, [pc, #92]	@ (80048ac <HAL_TIM_Base_Start+0xac>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d004      	beq.n	800485c <HAL_TIM_Base_Start+0x5c>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a16      	ldr	r2, [pc, #88]	@ (80048b0 <HAL_TIM_Base_Start+0xb0>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d111      	bne.n	8004880 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f003 0307 	and.w	r3, r3, #7
 8004866:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2b06      	cmp	r3, #6
 800486c:	d010      	beq.n	8004890 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f042 0201 	orr.w	r2, r2, #1
 800487c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800487e:	e007      	b.n	8004890 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f042 0201 	orr.w	r2, r2, #1
 800488e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	40010000 	.word	0x40010000
 80048a4:	40000400 	.word	0x40000400
 80048a8:	40000800 	.word	0x40000800
 80048ac:	40000c00 	.word	0x40000c00
 80048b0:	40014000 	.word	0x40014000

080048b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d001      	beq.n	80048cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e044      	b.n	8004956 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2202      	movs	r2, #2
 80048d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68da      	ldr	r2, [r3, #12]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f042 0201 	orr.w	r2, r2, #1
 80048e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a1e      	ldr	r2, [pc, #120]	@ (8004964 <HAL_TIM_Base_Start_IT+0xb0>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d018      	beq.n	8004920 <HAL_TIM_Base_Start_IT+0x6c>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048f6:	d013      	beq.n	8004920 <HAL_TIM_Base_Start_IT+0x6c>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a1a      	ldr	r2, [pc, #104]	@ (8004968 <HAL_TIM_Base_Start_IT+0xb4>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d00e      	beq.n	8004920 <HAL_TIM_Base_Start_IT+0x6c>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a19      	ldr	r2, [pc, #100]	@ (800496c <HAL_TIM_Base_Start_IT+0xb8>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d009      	beq.n	8004920 <HAL_TIM_Base_Start_IT+0x6c>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a17      	ldr	r2, [pc, #92]	@ (8004970 <HAL_TIM_Base_Start_IT+0xbc>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d004      	beq.n	8004920 <HAL_TIM_Base_Start_IT+0x6c>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a16      	ldr	r2, [pc, #88]	@ (8004974 <HAL_TIM_Base_Start_IT+0xc0>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d111      	bne.n	8004944 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f003 0307 	and.w	r3, r3, #7
 800492a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2b06      	cmp	r3, #6
 8004930:	d010      	beq.n	8004954 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f042 0201 	orr.w	r2, r2, #1
 8004940:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004942:	e007      	b.n	8004954 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f042 0201 	orr.w	r2, r2, #1
 8004952:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3714      	adds	r7, #20
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	40010000 	.word	0x40010000
 8004968:	40000400 	.word	0x40000400
 800496c:	40000800 	.word	0x40000800
 8004970:	40000c00 	.word	0x40000c00
 8004974:	40014000 	.word	0x40014000

08004978 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d101      	bne.n	800498a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e041      	b.n	8004a0e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004990:	b2db      	uxtb	r3, r3
 8004992:	2b00      	cmp	r3, #0
 8004994:	d106      	bne.n	80049a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 f839 	bl	8004a16 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2202      	movs	r2, #2
 80049a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	3304      	adds	r3, #4
 80049b4:	4619      	mov	r1, r3
 80049b6:	4610      	mov	r0, r2
 80049b8:	f000 faf2 	bl	8004fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3708      	adds	r7, #8
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}

08004a16 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a16:	b480      	push	{r7}
 8004a18:	b083      	sub	sp, #12
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a1e:	bf00      	nop
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr

08004a2a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a2a:	b580      	push	{r7, lr}
 8004a2c:	b082      	sub	sp, #8
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	f003 0302 	and.w	r3, r3, #2
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d122      	bne.n	8004a86 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d11b      	bne.n	8004a86 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f06f 0202 	mvn.w	r2, #2
 8004a56:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	699b      	ldr	r3, [r3, #24]
 8004a64:	f003 0303 	and.w	r3, r3, #3
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d003      	beq.n	8004a74 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 fa78 	bl	8004f62 <HAL_TIM_IC_CaptureCallback>
 8004a72:	e005      	b.n	8004a80 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 fa6a 	bl	8004f4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 fa7b 	bl	8004f76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	f003 0304 	and.w	r3, r3, #4
 8004a90:	2b04      	cmp	r3, #4
 8004a92:	d122      	bne.n	8004ada <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	f003 0304 	and.w	r3, r3, #4
 8004a9e:	2b04      	cmp	r3, #4
 8004aa0:	d11b      	bne.n	8004ada <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f06f 0204 	mvn.w	r2, #4
 8004aaa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2202      	movs	r2, #2
 8004ab0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	699b      	ldr	r3, [r3, #24]
 8004ab8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d003      	beq.n	8004ac8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 fa4e 	bl	8004f62 <HAL_TIM_IC_CaptureCallback>
 8004ac6:	e005      	b.n	8004ad4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 fa40 	bl	8004f4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 fa51 	bl	8004f76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	f003 0308 	and.w	r3, r3, #8
 8004ae4:	2b08      	cmp	r3, #8
 8004ae6:	d122      	bne.n	8004b2e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	f003 0308 	and.w	r3, r3, #8
 8004af2:	2b08      	cmp	r3, #8
 8004af4:	d11b      	bne.n	8004b2e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f06f 0208 	mvn.w	r2, #8
 8004afe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2204      	movs	r2, #4
 8004b04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	69db      	ldr	r3, [r3, #28]
 8004b0c:	f003 0303 	and.w	r3, r3, #3
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d003      	beq.n	8004b1c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f000 fa24 	bl	8004f62 <HAL_TIM_IC_CaptureCallback>
 8004b1a:	e005      	b.n	8004b28 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 fa16 	bl	8004f4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 fa27 	bl	8004f76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	f003 0310 	and.w	r3, r3, #16
 8004b38:	2b10      	cmp	r3, #16
 8004b3a:	d122      	bne.n	8004b82 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	f003 0310 	and.w	r3, r3, #16
 8004b46:	2b10      	cmp	r3, #16
 8004b48:	d11b      	bne.n	8004b82 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f06f 0210 	mvn.w	r2, #16
 8004b52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2208      	movs	r2, #8
 8004b58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	69db      	ldr	r3, [r3, #28]
 8004b60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d003      	beq.n	8004b70 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 f9fa 	bl	8004f62 <HAL_TIM_IC_CaptureCallback>
 8004b6e:	e005      	b.n	8004b7c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 f9ec 	bl	8004f4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 f9fd 	bl	8004f76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	f003 0301 	and.w	r3, r3, #1
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d10e      	bne.n	8004bae <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	f003 0301 	and.w	r3, r3, #1
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d107      	bne.n	8004bae <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f06f 0201 	mvn.w	r2, #1
 8004ba6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f7fc f9cd 	bl	8000f48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bb8:	2b80      	cmp	r3, #128	@ 0x80
 8004bba:	d10e      	bne.n	8004bda <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bc6:	2b80      	cmp	r3, #128	@ 0x80
 8004bc8:	d107      	bne.n	8004bda <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004bd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 fd53 	bl	8005680 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004be4:	2b40      	cmp	r3, #64	@ 0x40
 8004be6:	d10e      	bne.n	8004c06 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bf2:	2b40      	cmp	r3, #64	@ 0x40
 8004bf4:	d107      	bne.n	8004c06 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004bfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f000 f9c2 	bl	8004f8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	f003 0320 	and.w	r3, r3, #32
 8004c10:	2b20      	cmp	r3, #32
 8004c12:	d10e      	bne.n	8004c32 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	f003 0320 	and.w	r3, r3, #32
 8004c1e:	2b20      	cmp	r3, #32
 8004c20:	d107      	bne.n	8004c32 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f06f 0220 	mvn.w	r2, #32
 8004c2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 fd1d 	bl	800566c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c32:	bf00      	nop
 8004c34:	3708      	adds	r7, #8
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
	...

08004c3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b086      	sub	sp, #24
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d101      	bne.n	8004c5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c56:	2302      	movs	r3, #2
 8004c58:	e0ae      	b.n	8004db8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2b0c      	cmp	r3, #12
 8004c66:	f200 809f 	bhi.w	8004da8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004c6a:	a201      	add	r2, pc, #4	@ (adr r2, 8004c70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c70:	08004ca5 	.word	0x08004ca5
 8004c74:	08004da9 	.word	0x08004da9
 8004c78:	08004da9 	.word	0x08004da9
 8004c7c:	08004da9 	.word	0x08004da9
 8004c80:	08004ce5 	.word	0x08004ce5
 8004c84:	08004da9 	.word	0x08004da9
 8004c88:	08004da9 	.word	0x08004da9
 8004c8c:	08004da9 	.word	0x08004da9
 8004c90:	08004d27 	.word	0x08004d27
 8004c94:	08004da9 	.word	0x08004da9
 8004c98:	08004da9 	.word	0x08004da9
 8004c9c:	08004da9 	.word	0x08004da9
 8004ca0:	08004d67 	.word	0x08004d67
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68b9      	ldr	r1, [r7, #8]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 f9f8 	bl	80050a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	699a      	ldr	r2, [r3, #24]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f042 0208 	orr.w	r2, r2, #8
 8004cbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	699a      	ldr	r2, [r3, #24]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f022 0204 	bic.w	r2, r2, #4
 8004cce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6999      	ldr	r1, [r3, #24]
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	691a      	ldr	r2, [r3, #16]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	619a      	str	r2, [r3, #24]
      break;
 8004ce2:	e064      	b.n	8004dae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68b9      	ldr	r1, [r7, #8]
 8004cea:	4618      	mov	r0, r3
 8004cec:	f000 fa3e 	bl	800516c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	699a      	ldr	r2, [r3, #24]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004cfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	699a      	ldr	r2, [r3, #24]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	6999      	ldr	r1, [r3, #24]
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	021a      	lsls	r2, r3, #8
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	430a      	orrs	r2, r1
 8004d22:	619a      	str	r2, [r3, #24]
      break;
 8004d24:	e043      	b.n	8004dae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68b9      	ldr	r1, [r7, #8]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f000 fa89 	bl	8005244 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	69da      	ldr	r2, [r3, #28]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f042 0208 	orr.w	r2, r2, #8
 8004d40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	69da      	ldr	r2, [r3, #28]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f022 0204 	bic.w	r2, r2, #4
 8004d50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	69d9      	ldr	r1, [r3, #28]
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	691a      	ldr	r2, [r3, #16]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	61da      	str	r2, [r3, #28]
      break;
 8004d64:	e023      	b.n	8004dae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68b9      	ldr	r1, [r7, #8]
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f000 fad3 	bl	8005318 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	69da      	ldr	r2, [r3, #28]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	69da      	ldr	r2, [r3, #28]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	69d9      	ldr	r1, [r3, #28]
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	021a      	lsls	r2, r3, #8
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	430a      	orrs	r2, r1
 8004da4:	61da      	str	r2, [r3, #28]
      break;
 8004da6:	e002      	b.n	8004dae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	75fb      	strb	r3, [r7, #23]
      break;
 8004dac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004db6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3718      	adds	r7, #24
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d101      	bne.n	8004ddc <HAL_TIM_ConfigClockSource+0x1c>
 8004dd8:	2302      	movs	r3, #2
 8004dda:	e0b4      	b.n	8004f46 <HAL_TIM_ConfigClockSource+0x186>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2202      	movs	r2, #2
 8004de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004dfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68ba      	ldr	r2, [r7, #8]
 8004e0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e14:	d03e      	beq.n	8004e94 <HAL_TIM_ConfigClockSource+0xd4>
 8004e16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e1a:	f200 8087 	bhi.w	8004f2c <HAL_TIM_ConfigClockSource+0x16c>
 8004e1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e22:	f000 8086 	beq.w	8004f32 <HAL_TIM_ConfigClockSource+0x172>
 8004e26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e2a:	d87f      	bhi.n	8004f2c <HAL_TIM_ConfigClockSource+0x16c>
 8004e2c:	2b70      	cmp	r3, #112	@ 0x70
 8004e2e:	d01a      	beq.n	8004e66 <HAL_TIM_ConfigClockSource+0xa6>
 8004e30:	2b70      	cmp	r3, #112	@ 0x70
 8004e32:	d87b      	bhi.n	8004f2c <HAL_TIM_ConfigClockSource+0x16c>
 8004e34:	2b60      	cmp	r3, #96	@ 0x60
 8004e36:	d050      	beq.n	8004eda <HAL_TIM_ConfigClockSource+0x11a>
 8004e38:	2b60      	cmp	r3, #96	@ 0x60
 8004e3a:	d877      	bhi.n	8004f2c <HAL_TIM_ConfigClockSource+0x16c>
 8004e3c:	2b50      	cmp	r3, #80	@ 0x50
 8004e3e:	d03c      	beq.n	8004eba <HAL_TIM_ConfigClockSource+0xfa>
 8004e40:	2b50      	cmp	r3, #80	@ 0x50
 8004e42:	d873      	bhi.n	8004f2c <HAL_TIM_ConfigClockSource+0x16c>
 8004e44:	2b40      	cmp	r3, #64	@ 0x40
 8004e46:	d058      	beq.n	8004efa <HAL_TIM_ConfigClockSource+0x13a>
 8004e48:	2b40      	cmp	r3, #64	@ 0x40
 8004e4a:	d86f      	bhi.n	8004f2c <HAL_TIM_ConfigClockSource+0x16c>
 8004e4c:	2b30      	cmp	r3, #48	@ 0x30
 8004e4e:	d064      	beq.n	8004f1a <HAL_TIM_ConfigClockSource+0x15a>
 8004e50:	2b30      	cmp	r3, #48	@ 0x30
 8004e52:	d86b      	bhi.n	8004f2c <HAL_TIM_ConfigClockSource+0x16c>
 8004e54:	2b20      	cmp	r3, #32
 8004e56:	d060      	beq.n	8004f1a <HAL_TIM_ConfigClockSource+0x15a>
 8004e58:	2b20      	cmp	r3, #32
 8004e5a:	d867      	bhi.n	8004f2c <HAL_TIM_ConfigClockSource+0x16c>
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d05c      	beq.n	8004f1a <HAL_TIM_ConfigClockSource+0x15a>
 8004e60:	2b10      	cmp	r3, #16
 8004e62:	d05a      	beq.n	8004f1a <HAL_TIM_ConfigClockSource+0x15a>
 8004e64:	e062      	b.n	8004f2c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6818      	ldr	r0, [r3, #0]
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	6899      	ldr	r1, [r3, #8]
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	685a      	ldr	r2, [r3, #4]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	f000 fb19 	bl	80054ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004e88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68ba      	ldr	r2, [r7, #8]
 8004e90:	609a      	str	r2, [r3, #8]
      break;
 8004e92:	e04f      	b.n	8004f34 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6818      	ldr	r0, [r3, #0]
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	6899      	ldr	r1, [r3, #8]
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	685a      	ldr	r2, [r3, #4]
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	f000 fb02 	bl	80054ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	689a      	ldr	r2, [r3, #8]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004eb6:	609a      	str	r2, [r3, #8]
      break;
 8004eb8:	e03c      	b.n	8004f34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6818      	ldr	r0, [r3, #0]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	6859      	ldr	r1, [r3, #4]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	f000 fa76 	bl	80053b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2150      	movs	r1, #80	@ 0x50
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f000 facf 	bl	8005476 <TIM_ITRx_SetConfig>
      break;
 8004ed8:	e02c      	b.n	8004f34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6818      	ldr	r0, [r3, #0]
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	6859      	ldr	r1, [r3, #4]
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	f000 fa95 	bl	8005416 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2160      	movs	r1, #96	@ 0x60
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f000 fabf 	bl	8005476 <TIM_ITRx_SetConfig>
      break;
 8004ef8:	e01c      	b.n	8004f34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6818      	ldr	r0, [r3, #0]
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	6859      	ldr	r1, [r3, #4]
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	461a      	mov	r2, r3
 8004f08:	f000 fa56 	bl	80053b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2140      	movs	r1, #64	@ 0x40
 8004f12:	4618      	mov	r0, r3
 8004f14:	f000 faaf 	bl	8005476 <TIM_ITRx_SetConfig>
      break;
 8004f18:	e00c      	b.n	8004f34 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4619      	mov	r1, r3
 8004f24:	4610      	mov	r0, r2
 8004f26:	f000 faa6 	bl	8005476 <TIM_ITRx_SetConfig>
      break;
 8004f2a:	e003      	b.n	8004f34 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f30:	e000      	b.n	8004f34 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3710      	adds	r7, #16
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b083      	sub	sp, #12
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f56:	bf00      	nop
 8004f58:	370c      	adds	r7, #12
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr

08004f62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f62:	b480      	push	{r7}
 8004f64:	b083      	sub	sp, #12
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f6a:	bf00      	nop
 8004f6c:	370c      	adds	r7, #12
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr

08004f76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f76:	b480      	push	{r7}
 8004f78:	b083      	sub	sp, #12
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f7e:	bf00      	nop
 8004f80:	370c      	adds	r7, #12
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr

08004f8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b083      	sub	sp, #12
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f92:	bf00      	nop
 8004f94:	370c      	adds	r7, #12
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
	...

08004fa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a34      	ldr	r2, [pc, #208]	@ (8005084 <TIM_Base_SetConfig+0xe4>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d00f      	beq.n	8004fd8 <TIM_Base_SetConfig+0x38>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fbe:	d00b      	beq.n	8004fd8 <TIM_Base_SetConfig+0x38>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a31      	ldr	r2, [pc, #196]	@ (8005088 <TIM_Base_SetConfig+0xe8>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d007      	beq.n	8004fd8 <TIM_Base_SetConfig+0x38>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a30      	ldr	r2, [pc, #192]	@ (800508c <TIM_Base_SetConfig+0xec>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d003      	beq.n	8004fd8 <TIM_Base_SetConfig+0x38>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a2f      	ldr	r2, [pc, #188]	@ (8005090 <TIM_Base_SetConfig+0xf0>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d108      	bne.n	8004fea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a25      	ldr	r2, [pc, #148]	@ (8005084 <TIM_Base_SetConfig+0xe4>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d01b      	beq.n	800502a <TIM_Base_SetConfig+0x8a>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ff8:	d017      	beq.n	800502a <TIM_Base_SetConfig+0x8a>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a22      	ldr	r2, [pc, #136]	@ (8005088 <TIM_Base_SetConfig+0xe8>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d013      	beq.n	800502a <TIM_Base_SetConfig+0x8a>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a21      	ldr	r2, [pc, #132]	@ (800508c <TIM_Base_SetConfig+0xec>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d00f      	beq.n	800502a <TIM_Base_SetConfig+0x8a>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a20      	ldr	r2, [pc, #128]	@ (8005090 <TIM_Base_SetConfig+0xf0>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d00b      	beq.n	800502a <TIM_Base_SetConfig+0x8a>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a1f      	ldr	r2, [pc, #124]	@ (8005094 <TIM_Base_SetConfig+0xf4>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d007      	beq.n	800502a <TIM_Base_SetConfig+0x8a>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a1e      	ldr	r2, [pc, #120]	@ (8005098 <TIM_Base_SetConfig+0xf8>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d003      	beq.n	800502a <TIM_Base_SetConfig+0x8a>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a1d      	ldr	r2, [pc, #116]	@ (800509c <TIM_Base_SetConfig+0xfc>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d108      	bne.n	800503c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005030:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	4313      	orrs	r3, r2
 800503a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	4313      	orrs	r3, r2
 8005048:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	689a      	ldr	r2, [r3, #8]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a08      	ldr	r2, [pc, #32]	@ (8005084 <TIM_Base_SetConfig+0xe4>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d103      	bne.n	8005070 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	691a      	ldr	r2, [r3, #16]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	615a      	str	r2, [r3, #20]
}
 8005076:	bf00      	nop
 8005078:	3714      	adds	r7, #20
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	40010000 	.word	0x40010000
 8005088:	40000400 	.word	0x40000400
 800508c:	40000800 	.word	0x40000800
 8005090:	40000c00 	.word	0x40000c00
 8005094:	40014000 	.word	0x40014000
 8005098:	40014400 	.word	0x40014400
 800509c:	40014800 	.word	0x40014800

080050a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b087      	sub	sp, #28
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	f023 0201 	bic.w	r2, r3, #1
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a1b      	ldr	r3, [r3, #32]
 80050ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	699b      	ldr	r3, [r3, #24]
 80050c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f023 0303 	bic.w	r3, r3, #3
 80050d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	4313      	orrs	r3, r2
 80050e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	f023 0302 	bic.w	r3, r3, #2
 80050e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a1c      	ldr	r2, [pc, #112]	@ (8005168 <TIM_OC1_SetConfig+0xc8>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d10c      	bne.n	8005116 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	f023 0308 	bic.w	r3, r3, #8
 8005102:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	697a      	ldr	r2, [r7, #20]
 800510a:	4313      	orrs	r3, r2
 800510c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	f023 0304 	bic.w	r3, r3, #4
 8005114:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a13      	ldr	r2, [pc, #76]	@ (8005168 <TIM_OC1_SetConfig+0xc8>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d111      	bne.n	8005142 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005124:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800512c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	693a      	ldr	r2, [r7, #16]
 8005134:	4313      	orrs	r3, r2
 8005136:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	699b      	ldr	r3, [r3, #24]
 800513c:	693a      	ldr	r2, [r7, #16]
 800513e:	4313      	orrs	r3, r2
 8005140:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	693a      	ldr	r2, [r7, #16]
 8005146:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	685a      	ldr	r2, [r3, #4]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	697a      	ldr	r2, [r7, #20]
 800515a:	621a      	str	r2, [r3, #32]
}
 800515c:	bf00      	nop
 800515e:	371c      	adds	r7, #28
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr
 8005168:	40010000 	.word	0x40010000

0800516c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800516c:	b480      	push	{r7}
 800516e:	b087      	sub	sp, #28
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a1b      	ldr	r3, [r3, #32]
 800517a:	f023 0210 	bic.w	r2, r3, #16
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800519a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	021b      	lsls	r3, r3, #8
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	f023 0320 	bic.w	r3, r3, #32
 80051b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	011b      	lsls	r3, r3, #4
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a1e      	ldr	r2, [pc, #120]	@ (8005240 <TIM_OC2_SetConfig+0xd4>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d10d      	bne.n	80051e8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	011b      	lsls	r3, r3, #4
 80051da:	697a      	ldr	r2, [r7, #20]
 80051dc:	4313      	orrs	r3, r2
 80051de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a15      	ldr	r2, [pc, #84]	@ (8005240 <TIM_OC2_SetConfig+0xd4>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d113      	bne.n	8005218 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80051f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80051fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	695b      	ldr	r3, [r3, #20]
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	693a      	ldr	r2, [r7, #16]
 8005208:	4313      	orrs	r3, r2
 800520a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	693a      	ldr	r2, [r7, #16]
 8005214:	4313      	orrs	r3, r2
 8005216:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	685a      	ldr	r2, [r3, #4]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	621a      	str	r2, [r3, #32]
}
 8005232:	bf00      	nop
 8005234:	371c      	adds	r7, #28
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	40010000 	.word	0x40010000

08005244 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005244:	b480      	push	{r7}
 8005246:	b087      	sub	sp, #28
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	69db      	ldr	r3, [r3, #28]
 800526a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f023 0303 	bic.w	r3, r3, #3
 800527a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	4313      	orrs	r3, r2
 8005284:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800528c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	021b      	lsls	r3, r3, #8
 8005294:	697a      	ldr	r2, [r7, #20]
 8005296:	4313      	orrs	r3, r2
 8005298:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a1d      	ldr	r2, [pc, #116]	@ (8005314 <TIM_OC3_SetConfig+0xd0>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d10d      	bne.n	80052be <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80052a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	021b      	lsls	r3, r3, #8
 80052b0:	697a      	ldr	r2, [r7, #20]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80052bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a14      	ldr	r2, [pc, #80]	@ (8005314 <TIM_OC3_SetConfig+0xd0>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d113      	bne.n	80052ee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80052cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80052d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	011b      	lsls	r3, r3, #4
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	4313      	orrs	r3, r2
 80052e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	011b      	lsls	r3, r3, #4
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	685a      	ldr	r2, [r3, #4]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	697a      	ldr	r2, [r7, #20]
 8005306:	621a      	str	r2, [r3, #32]
}
 8005308:	bf00      	nop
 800530a:	371c      	adds	r7, #28
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr
 8005314:	40010000 	.word	0x40010000

08005318 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005318:	b480      	push	{r7}
 800531a:	b087      	sub	sp, #28
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	69db      	ldr	r3, [r3, #28]
 800533e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800534e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	021b      	lsls	r3, r3, #8
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	4313      	orrs	r3, r2
 800535a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005362:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	031b      	lsls	r3, r3, #12
 800536a:	693a      	ldr	r2, [r7, #16]
 800536c:	4313      	orrs	r3, r2
 800536e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a10      	ldr	r2, [pc, #64]	@ (80053b4 <TIM_OC4_SetConfig+0x9c>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d109      	bne.n	800538c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800537e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	695b      	ldr	r3, [r3, #20]
 8005384:	019b      	lsls	r3, r3, #6
 8005386:	697a      	ldr	r2, [r7, #20]
 8005388:	4313      	orrs	r3, r2
 800538a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	685a      	ldr	r2, [r3, #4]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	693a      	ldr	r2, [r7, #16]
 80053a4:	621a      	str	r2, [r3, #32]
}
 80053a6:	bf00      	nop
 80053a8:	371c      	adds	r7, #28
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	40010000 	.word	0x40010000

080053b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b087      	sub	sp, #28
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6a1b      	ldr	r3, [r3, #32]
 80053c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6a1b      	ldr	r3, [r3, #32]
 80053ce:	f023 0201 	bic.w	r2, r3, #1
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	699b      	ldr	r3, [r3, #24]
 80053da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	011b      	lsls	r3, r3, #4
 80053e8:	693a      	ldr	r2, [r7, #16]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	f023 030a 	bic.w	r3, r3, #10
 80053f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	697a      	ldr	r2, [r7, #20]
 8005408:	621a      	str	r2, [r3, #32]
}
 800540a:	bf00      	nop
 800540c:	371c      	adds	r7, #28
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr

08005416 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005416:	b480      	push	{r7}
 8005418:	b087      	sub	sp, #28
 800541a:	af00      	add	r7, sp, #0
 800541c:	60f8      	str	r0, [r7, #12]
 800541e:	60b9      	str	r1, [r7, #8]
 8005420:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	f023 0210 	bic.w	r2, r3, #16
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6a1b      	ldr	r3, [r3, #32]
 8005438:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005440:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	031b      	lsls	r3, r3, #12
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	4313      	orrs	r3, r2
 800544a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005452:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	011b      	lsls	r3, r3, #4
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	4313      	orrs	r3, r2
 800545c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	697a      	ldr	r2, [r7, #20]
 8005462:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	693a      	ldr	r2, [r7, #16]
 8005468:	621a      	str	r2, [r3, #32]
}
 800546a:	bf00      	nop
 800546c:	371c      	adds	r7, #28
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr

08005476 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005476:	b480      	push	{r7}
 8005478:	b085      	sub	sp, #20
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
 800547e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800548c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800548e:	683a      	ldr	r2, [r7, #0]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	4313      	orrs	r3, r2
 8005494:	f043 0307 	orr.w	r3, r3, #7
 8005498:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	609a      	str	r2, [r3, #8]
}
 80054a0:	bf00      	nop
 80054a2:	3714      	adds	r7, #20
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b087      	sub	sp, #28
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	607a      	str	r2, [r7, #4]
 80054b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80054c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	021a      	lsls	r2, r3, #8
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	431a      	orrs	r2, r3
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	697a      	ldr	r2, [r7, #20]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	697a      	ldr	r2, [r7, #20]
 80054de:	609a      	str	r2, [r3, #8]
}
 80054e0:	bf00      	nop
 80054e2:	371c      	adds	r7, #28
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b085      	sub	sp, #20
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d101      	bne.n	8005504 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005500:	2302      	movs	r3, #2
 8005502:	e050      	b.n	80055a6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2202      	movs	r2, #2
 8005510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800552a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	4313      	orrs	r3, r2
 8005534:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a1c      	ldr	r2, [pc, #112]	@ (80055b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d018      	beq.n	800557a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005550:	d013      	beq.n	800557a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a18      	ldr	r2, [pc, #96]	@ (80055b8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d00e      	beq.n	800557a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a16      	ldr	r2, [pc, #88]	@ (80055bc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d009      	beq.n	800557a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a15      	ldr	r2, [pc, #84]	@ (80055c0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d004      	beq.n	800557a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a13      	ldr	r2, [pc, #76]	@ (80055c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d10c      	bne.n	8005594 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005580:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	68ba      	ldr	r2, [r7, #8]
 8005588:	4313      	orrs	r3, r2
 800558a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	68ba      	ldr	r2, [r7, #8]
 8005592:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3714      	adds	r7, #20
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	40010000 	.word	0x40010000
 80055b8:	40000400 	.word	0x40000400
 80055bc:	40000800 	.word	0x40000800
 80055c0:	40000c00 	.word	0x40000c00
 80055c4:	40014000 	.word	0x40014000

080055c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80055d2:	2300      	movs	r3, #0
 80055d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d101      	bne.n	80055e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80055e0:	2302      	movs	r3, #2
 80055e2:	e03d      	b.n	8005660 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	4313      	orrs	r3, r2
 8005606:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	4313      	orrs	r3, r2
 8005614:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4313      	orrs	r3, r2
 8005622:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	4313      	orrs	r3, r2
 8005630:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	695b      	ldr	r3, [r3, #20]
 800563c:	4313      	orrs	r3, r2
 800563e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	69db      	ldr	r3, [r3, #28]
 800564a:	4313      	orrs	r3, r2
 800564c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	3714      	adds	r7, #20
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005674:	bf00      	nop
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005688:	bf00      	nop
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d101      	bne.n	80056a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e03f      	b.n	8005726 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d106      	bne.n	80056c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f7fc fa92 	bl	8001be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2224      	movs	r2, #36	@ 0x24
 80056c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68da      	ldr	r2, [r3, #12]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80056d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 f929 	bl	8005930 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	691a      	ldr	r2, [r3, #16]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80056ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	695a      	ldr	r2, [r3, #20]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80056fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68da      	ldr	r2, [r3, #12]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800570c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2220      	movs	r2, #32
 8005718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2220      	movs	r2, #32
 8005720:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3708      	adds	r7, #8
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800572e:	b580      	push	{r7, lr}
 8005730:	b08a      	sub	sp, #40	@ 0x28
 8005732:	af02      	add	r7, sp, #8
 8005734:	60f8      	str	r0, [r7, #12]
 8005736:	60b9      	str	r1, [r7, #8]
 8005738:	603b      	str	r3, [r7, #0]
 800573a:	4613      	mov	r3, r2
 800573c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800573e:	2300      	movs	r3, #0
 8005740:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005748:	b2db      	uxtb	r3, r3
 800574a:	2b20      	cmp	r3, #32
 800574c:	d17c      	bne.n	8005848 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d002      	beq.n	800575a <HAL_UART_Transmit+0x2c>
 8005754:	88fb      	ldrh	r3, [r7, #6]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d101      	bne.n	800575e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e075      	b.n	800584a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005764:	2b01      	cmp	r3, #1
 8005766:	d101      	bne.n	800576c <HAL_UART_Transmit+0x3e>
 8005768:	2302      	movs	r3, #2
 800576a:	e06e      	b.n	800584a <HAL_UART_Transmit+0x11c>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2200      	movs	r2, #0
 8005778:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2221      	movs	r2, #33	@ 0x21
 800577e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005782:	f7fc fc53 	bl	800202c <HAL_GetTick>
 8005786:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	88fa      	ldrh	r2, [r7, #6]
 800578c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	88fa      	ldrh	r2, [r7, #6]
 8005792:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800579c:	d108      	bne.n	80057b0 <HAL_UART_Transmit+0x82>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d104      	bne.n	80057b0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80057a6:	2300      	movs	r3, #0
 80057a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	61bb      	str	r3, [r7, #24]
 80057ae:	e003      	b.n	80057b8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057b4:	2300      	movs	r3, #0
 80057b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 80057c0:	e02a      	b.n	8005818 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	9300      	str	r3, [sp, #0]
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	2200      	movs	r2, #0
 80057ca:	2180      	movs	r1, #128	@ 0x80
 80057cc:	68f8      	ldr	r0, [r7, #12]
 80057ce:	f000 f840 	bl	8005852 <UART_WaitOnFlagUntilTimeout>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d001      	beq.n	80057dc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	e036      	b.n	800584a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d10b      	bne.n	80057fa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	881b      	ldrh	r3, [r3, #0]
 80057e6:	461a      	mov	r2, r3
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	3302      	adds	r3, #2
 80057f6:	61bb      	str	r3, [r7, #24]
 80057f8:	e007      	b.n	800580a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	781a      	ldrb	r2, [r3, #0]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	3301      	adds	r3, #1
 8005808:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800580e:	b29b      	uxth	r3, r3
 8005810:	3b01      	subs	r3, #1
 8005812:	b29a      	uxth	r2, r3
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800581c:	b29b      	uxth	r3, r3
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1cf      	bne.n	80057c2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	9300      	str	r3, [sp, #0]
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	2200      	movs	r2, #0
 800582a:	2140      	movs	r1, #64	@ 0x40
 800582c:	68f8      	ldr	r0, [r7, #12]
 800582e:	f000 f810 	bl	8005852 <UART_WaitOnFlagUntilTimeout>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d001      	beq.n	800583c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	e006      	b.n	800584a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2220      	movs	r2, #32
 8005840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005844:	2300      	movs	r3, #0
 8005846:	e000      	b.n	800584a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005848:	2302      	movs	r3, #2
  }
}
 800584a:	4618      	mov	r0, r3
 800584c:	3720      	adds	r7, #32
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}

08005852 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005852:	b580      	push	{r7, lr}
 8005854:	b090      	sub	sp, #64	@ 0x40
 8005856:	af00      	add	r7, sp, #0
 8005858:	60f8      	str	r0, [r7, #12]
 800585a:	60b9      	str	r1, [r7, #8]
 800585c:	603b      	str	r3, [r7, #0]
 800585e:	4613      	mov	r3, r2
 8005860:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005862:	e050      	b.n	8005906 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005864:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800586a:	d04c      	beq.n	8005906 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800586c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800586e:	2b00      	cmp	r3, #0
 8005870:	d007      	beq.n	8005882 <UART_WaitOnFlagUntilTimeout+0x30>
 8005872:	f7fc fbdb 	bl	800202c <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800587e:	429a      	cmp	r2, r3
 8005880:	d241      	bcs.n	8005906 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	330c      	adds	r3, #12
 8005888:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800588c:	e853 3f00 	ldrex	r3, [r3]
 8005890:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005894:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005898:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	330c      	adds	r3, #12
 80058a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80058a2:	637a      	str	r2, [r7, #52]	@ 0x34
 80058a4:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80058a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80058aa:	e841 2300 	strex	r3, r2, [r1]
 80058ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80058b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1e5      	bne.n	8005882 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	3314      	adds	r3, #20
 80058bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	e853 3f00 	ldrex	r3, [r3]
 80058c4:	613b      	str	r3, [r7, #16]
   return(result);
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	f023 0301 	bic.w	r3, r3, #1
 80058cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	3314      	adds	r3, #20
 80058d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80058d6:	623a      	str	r2, [r7, #32]
 80058d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058da:	69f9      	ldr	r1, [r7, #28]
 80058dc:	6a3a      	ldr	r2, [r7, #32]
 80058de:	e841 2300 	strex	r3, r2, [r1]
 80058e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d1e5      	bne.n	80058b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2220      	movs	r2, #32
 80058ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2220      	movs	r2, #32
 80058f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	e00f      	b.n	8005926 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	4013      	ands	r3, r2
 8005910:	68ba      	ldr	r2, [r7, #8]
 8005912:	429a      	cmp	r2, r3
 8005914:	bf0c      	ite	eq
 8005916:	2301      	moveq	r3, #1
 8005918:	2300      	movne	r3, #0
 800591a:	b2db      	uxtb	r3, r3
 800591c:	461a      	mov	r2, r3
 800591e:	79fb      	ldrb	r3, [r7, #7]
 8005920:	429a      	cmp	r2, r3
 8005922:	d09f      	beq.n	8005864 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3740      	adds	r7, #64	@ 0x40
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
	...

08005930 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005930:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005934:	b0c0      	sub	sp, #256	@ 0x100
 8005936:	af00      	add	r7, sp, #0
 8005938:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800593c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800594c:	68d9      	ldr	r1, [r3, #12]
 800594e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	ea40 0301 	orr.w	r3, r0, r1
 8005958:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800595a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800595e:	689a      	ldr	r2, [r3, #8]
 8005960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	431a      	orrs	r2, r3
 8005968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800596c:	695b      	ldr	r3, [r3, #20]
 800596e:	431a      	orrs	r2, r3
 8005970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005974:	69db      	ldr	r3, [r3, #28]
 8005976:	4313      	orrs	r3, r2
 8005978:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800597c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005988:	f021 010c 	bic.w	r1, r1, #12
 800598c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005996:	430b      	orrs	r3, r1
 8005998:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800599a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	695b      	ldr	r3, [r3, #20]
 80059a2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80059a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059aa:	6999      	ldr	r1, [r3, #24]
 80059ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	ea40 0301 	orr.w	r3, r0, r1
 80059b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80059b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	4b8f      	ldr	r3, [pc, #572]	@ (8005bfc <UART_SetConfig+0x2cc>)
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d005      	beq.n	80059d0 <UART_SetConfig+0xa0>
 80059c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	4b8d      	ldr	r3, [pc, #564]	@ (8005c00 <UART_SetConfig+0x2d0>)
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d104      	bne.n	80059da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80059d0:	f7fe fb0a 	bl	8003fe8 <HAL_RCC_GetPCLK2Freq>
 80059d4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80059d8:	e003      	b.n	80059e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80059da:	f7fe faf1 	bl	8003fc0 <HAL_RCC_GetPCLK1Freq>
 80059de:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059e6:	69db      	ldr	r3, [r3, #28]
 80059e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059ec:	f040 810c 	bne.w	8005c08 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80059f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059f4:	2200      	movs	r2, #0
 80059f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80059fa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80059fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005a02:	4622      	mov	r2, r4
 8005a04:	462b      	mov	r3, r5
 8005a06:	1891      	adds	r1, r2, r2
 8005a08:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005a0a:	415b      	adcs	r3, r3
 8005a0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a0e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005a12:	4621      	mov	r1, r4
 8005a14:	eb12 0801 	adds.w	r8, r2, r1
 8005a18:	4629      	mov	r1, r5
 8005a1a:	eb43 0901 	adc.w	r9, r3, r1
 8005a1e:	f04f 0200 	mov.w	r2, #0
 8005a22:	f04f 0300 	mov.w	r3, #0
 8005a26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a32:	4690      	mov	r8, r2
 8005a34:	4699      	mov	r9, r3
 8005a36:	4623      	mov	r3, r4
 8005a38:	eb18 0303 	adds.w	r3, r8, r3
 8005a3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005a40:	462b      	mov	r3, r5
 8005a42:	eb49 0303 	adc.w	r3, r9, r3
 8005a46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005a56:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005a5a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005a5e:	460b      	mov	r3, r1
 8005a60:	18db      	adds	r3, r3, r3
 8005a62:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a64:	4613      	mov	r3, r2
 8005a66:	eb42 0303 	adc.w	r3, r2, r3
 8005a6a:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a6c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005a70:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005a74:	f7fb f8f0 	bl	8000c58 <__aeabi_uldivmod>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	4b61      	ldr	r3, [pc, #388]	@ (8005c04 <UART_SetConfig+0x2d4>)
 8005a7e:	fba3 2302 	umull	r2, r3, r3, r2
 8005a82:	095b      	lsrs	r3, r3, #5
 8005a84:	011c      	lsls	r4, r3, #4
 8005a86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a90:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005a94:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005a98:	4642      	mov	r2, r8
 8005a9a:	464b      	mov	r3, r9
 8005a9c:	1891      	adds	r1, r2, r2
 8005a9e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005aa0:	415b      	adcs	r3, r3
 8005aa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005aa4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005aa8:	4641      	mov	r1, r8
 8005aaa:	eb12 0a01 	adds.w	sl, r2, r1
 8005aae:	4649      	mov	r1, r9
 8005ab0:	eb43 0b01 	adc.w	fp, r3, r1
 8005ab4:	f04f 0200 	mov.w	r2, #0
 8005ab8:	f04f 0300 	mov.w	r3, #0
 8005abc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ac0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005ac4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ac8:	4692      	mov	sl, r2
 8005aca:	469b      	mov	fp, r3
 8005acc:	4643      	mov	r3, r8
 8005ace:	eb1a 0303 	adds.w	r3, sl, r3
 8005ad2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ad6:	464b      	mov	r3, r9
 8005ad8:	eb4b 0303 	adc.w	r3, fp, r3
 8005adc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005aec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005af0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005af4:	460b      	mov	r3, r1
 8005af6:	18db      	adds	r3, r3, r3
 8005af8:	643b      	str	r3, [r7, #64]	@ 0x40
 8005afa:	4613      	mov	r3, r2
 8005afc:	eb42 0303 	adc.w	r3, r2, r3
 8005b00:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005b06:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005b0a:	f7fb f8a5 	bl	8000c58 <__aeabi_uldivmod>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	460b      	mov	r3, r1
 8005b12:	4611      	mov	r1, r2
 8005b14:	4b3b      	ldr	r3, [pc, #236]	@ (8005c04 <UART_SetConfig+0x2d4>)
 8005b16:	fba3 2301 	umull	r2, r3, r3, r1
 8005b1a:	095b      	lsrs	r3, r3, #5
 8005b1c:	2264      	movs	r2, #100	@ 0x64
 8005b1e:	fb02 f303 	mul.w	r3, r2, r3
 8005b22:	1acb      	subs	r3, r1, r3
 8005b24:	00db      	lsls	r3, r3, #3
 8005b26:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005b2a:	4b36      	ldr	r3, [pc, #216]	@ (8005c04 <UART_SetConfig+0x2d4>)
 8005b2c:	fba3 2302 	umull	r2, r3, r3, r2
 8005b30:	095b      	lsrs	r3, r3, #5
 8005b32:	005b      	lsls	r3, r3, #1
 8005b34:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005b38:	441c      	add	r4, r3
 8005b3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005b44:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005b48:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005b4c:	4642      	mov	r2, r8
 8005b4e:	464b      	mov	r3, r9
 8005b50:	1891      	adds	r1, r2, r2
 8005b52:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005b54:	415b      	adcs	r3, r3
 8005b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005b5c:	4641      	mov	r1, r8
 8005b5e:	1851      	adds	r1, r2, r1
 8005b60:	6339      	str	r1, [r7, #48]	@ 0x30
 8005b62:	4649      	mov	r1, r9
 8005b64:	414b      	adcs	r3, r1
 8005b66:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b68:	f04f 0200 	mov.w	r2, #0
 8005b6c:	f04f 0300 	mov.w	r3, #0
 8005b70:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005b74:	4659      	mov	r1, fp
 8005b76:	00cb      	lsls	r3, r1, #3
 8005b78:	4651      	mov	r1, sl
 8005b7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b7e:	4651      	mov	r1, sl
 8005b80:	00ca      	lsls	r2, r1, #3
 8005b82:	4610      	mov	r0, r2
 8005b84:	4619      	mov	r1, r3
 8005b86:	4603      	mov	r3, r0
 8005b88:	4642      	mov	r2, r8
 8005b8a:	189b      	adds	r3, r3, r2
 8005b8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b90:	464b      	mov	r3, r9
 8005b92:	460a      	mov	r2, r1
 8005b94:	eb42 0303 	adc.w	r3, r2, r3
 8005b98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005ba8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005bac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	18db      	adds	r3, r3, r3
 8005bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	eb42 0303 	adc.w	r3, r2, r3
 8005bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bbe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005bc2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005bc6:	f7fb f847 	bl	8000c58 <__aeabi_uldivmod>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	460b      	mov	r3, r1
 8005bce:	4b0d      	ldr	r3, [pc, #52]	@ (8005c04 <UART_SetConfig+0x2d4>)
 8005bd0:	fba3 1302 	umull	r1, r3, r3, r2
 8005bd4:	095b      	lsrs	r3, r3, #5
 8005bd6:	2164      	movs	r1, #100	@ 0x64
 8005bd8:	fb01 f303 	mul.w	r3, r1, r3
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	00db      	lsls	r3, r3, #3
 8005be0:	3332      	adds	r3, #50	@ 0x32
 8005be2:	4a08      	ldr	r2, [pc, #32]	@ (8005c04 <UART_SetConfig+0x2d4>)
 8005be4:	fba2 2303 	umull	r2, r3, r2, r3
 8005be8:	095b      	lsrs	r3, r3, #5
 8005bea:	f003 0207 	and.w	r2, r3, #7
 8005bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4422      	add	r2, r4
 8005bf6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005bf8:	e106      	b.n	8005e08 <UART_SetConfig+0x4d8>
 8005bfa:	bf00      	nop
 8005bfc:	40011000 	.word	0x40011000
 8005c00:	40011400 	.word	0x40011400
 8005c04:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005c12:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005c16:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005c1a:	4642      	mov	r2, r8
 8005c1c:	464b      	mov	r3, r9
 8005c1e:	1891      	adds	r1, r2, r2
 8005c20:	6239      	str	r1, [r7, #32]
 8005c22:	415b      	adcs	r3, r3
 8005c24:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c2a:	4641      	mov	r1, r8
 8005c2c:	1854      	adds	r4, r2, r1
 8005c2e:	4649      	mov	r1, r9
 8005c30:	eb43 0501 	adc.w	r5, r3, r1
 8005c34:	f04f 0200 	mov.w	r2, #0
 8005c38:	f04f 0300 	mov.w	r3, #0
 8005c3c:	00eb      	lsls	r3, r5, #3
 8005c3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c42:	00e2      	lsls	r2, r4, #3
 8005c44:	4614      	mov	r4, r2
 8005c46:	461d      	mov	r5, r3
 8005c48:	4643      	mov	r3, r8
 8005c4a:	18e3      	adds	r3, r4, r3
 8005c4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005c50:	464b      	mov	r3, r9
 8005c52:	eb45 0303 	adc.w	r3, r5, r3
 8005c56:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005c66:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005c6a:	f04f 0200 	mov.w	r2, #0
 8005c6e:	f04f 0300 	mov.w	r3, #0
 8005c72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005c76:	4629      	mov	r1, r5
 8005c78:	008b      	lsls	r3, r1, #2
 8005c7a:	4621      	mov	r1, r4
 8005c7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c80:	4621      	mov	r1, r4
 8005c82:	008a      	lsls	r2, r1, #2
 8005c84:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005c88:	f7fa ffe6 	bl	8000c58 <__aeabi_uldivmod>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	460b      	mov	r3, r1
 8005c90:	4b60      	ldr	r3, [pc, #384]	@ (8005e14 <UART_SetConfig+0x4e4>)
 8005c92:	fba3 2302 	umull	r2, r3, r3, r2
 8005c96:	095b      	lsrs	r3, r3, #5
 8005c98:	011c      	lsls	r4, r3, #4
 8005c9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005ca4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005ca8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005cac:	4642      	mov	r2, r8
 8005cae:	464b      	mov	r3, r9
 8005cb0:	1891      	adds	r1, r2, r2
 8005cb2:	61b9      	str	r1, [r7, #24]
 8005cb4:	415b      	adcs	r3, r3
 8005cb6:	61fb      	str	r3, [r7, #28]
 8005cb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005cbc:	4641      	mov	r1, r8
 8005cbe:	1851      	adds	r1, r2, r1
 8005cc0:	6139      	str	r1, [r7, #16]
 8005cc2:	4649      	mov	r1, r9
 8005cc4:	414b      	adcs	r3, r1
 8005cc6:	617b      	str	r3, [r7, #20]
 8005cc8:	f04f 0200 	mov.w	r2, #0
 8005ccc:	f04f 0300 	mov.w	r3, #0
 8005cd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005cd4:	4659      	mov	r1, fp
 8005cd6:	00cb      	lsls	r3, r1, #3
 8005cd8:	4651      	mov	r1, sl
 8005cda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cde:	4651      	mov	r1, sl
 8005ce0:	00ca      	lsls	r2, r1, #3
 8005ce2:	4610      	mov	r0, r2
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	4642      	mov	r2, r8
 8005cea:	189b      	adds	r3, r3, r2
 8005cec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005cf0:	464b      	mov	r3, r9
 8005cf2:	460a      	mov	r2, r1
 8005cf4:	eb42 0303 	adc.w	r3, r2, r3
 8005cf8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005d06:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005d08:	f04f 0200 	mov.w	r2, #0
 8005d0c:	f04f 0300 	mov.w	r3, #0
 8005d10:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005d14:	4649      	mov	r1, r9
 8005d16:	008b      	lsls	r3, r1, #2
 8005d18:	4641      	mov	r1, r8
 8005d1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d1e:	4641      	mov	r1, r8
 8005d20:	008a      	lsls	r2, r1, #2
 8005d22:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005d26:	f7fa ff97 	bl	8000c58 <__aeabi_uldivmod>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	4611      	mov	r1, r2
 8005d30:	4b38      	ldr	r3, [pc, #224]	@ (8005e14 <UART_SetConfig+0x4e4>)
 8005d32:	fba3 2301 	umull	r2, r3, r3, r1
 8005d36:	095b      	lsrs	r3, r3, #5
 8005d38:	2264      	movs	r2, #100	@ 0x64
 8005d3a:	fb02 f303 	mul.w	r3, r2, r3
 8005d3e:	1acb      	subs	r3, r1, r3
 8005d40:	011b      	lsls	r3, r3, #4
 8005d42:	3332      	adds	r3, #50	@ 0x32
 8005d44:	4a33      	ldr	r2, [pc, #204]	@ (8005e14 <UART_SetConfig+0x4e4>)
 8005d46:	fba2 2303 	umull	r2, r3, r2, r3
 8005d4a:	095b      	lsrs	r3, r3, #5
 8005d4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d50:	441c      	add	r4, r3
 8005d52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d56:	2200      	movs	r2, #0
 8005d58:	673b      	str	r3, [r7, #112]	@ 0x70
 8005d5a:	677a      	str	r2, [r7, #116]	@ 0x74
 8005d5c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005d60:	4642      	mov	r2, r8
 8005d62:	464b      	mov	r3, r9
 8005d64:	1891      	adds	r1, r2, r2
 8005d66:	60b9      	str	r1, [r7, #8]
 8005d68:	415b      	adcs	r3, r3
 8005d6a:	60fb      	str	r3, [r7, #12]
 8005d6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d70:	4641      	mov	r1, r8
 8005d72:	1851      	adds	r1, r2, r1
 8005d74:	6039      	str	r1, [r7, #0]
 8005d76:	4649      	mov	r1, r9
 8005d78:	414b      	adcs	r3, r1
 8005d7a:	607b      	str	r3, [r7, #4]
 8005d7c:	f04f 0200 	mov.w	r2, #0
 8005d80:	f04f 0300 	mov.w	r3, #0
 8005d84:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005d88:	4659      	mov	r1, fp
 8005d8a:	00cb      	lsls	r3, r1, #3
 8005d8c:	4651      	mov	r1, sl
 8005d8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d92:	4651      	mov	r1, sl
 8005d94:	00ca      	lsls	r2, r1, #3
 8005d96:	4610      	mov	r0, r2
 8005d98:	4619      	mov	r1, r3
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	4642      	mov	r2, r8
 8005d9e:	189b      	adds	r3, r3, r2
 8005da0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005da2:	464b      	mov	r3, r9
 8005da4:	460a      	mov	r2, r1
 8005da6:	eb42 0303 	adc.w	r3, r2, r3
 8005daa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	663b      	str	r3, [r7, #96]	@ 0x60
 8005db6:	667a      	str	r2, [r7, #100]	@ 0x64
 8005db8:	f04f 0200 	mov.w	r2, #0
 8005dbc:	f04f 0300 	mov.w	r3, #0
 8005dc0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005dc4:	4649      	mov	r1, r9
 8005dc6:	008b      	lsls	r3, r1, #2
 8005dc8:	4641      	mov	r1, r8
 8005dca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005dce:	4641      	mov	r1, r8
 8005dd0:	008a      	lsls	r2, r1, #2
 8005dd2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005dd6:	f7fa ff3f 	bl	8000c58 <__aeabi_uldivmod>
 8005dda:	4602      	mov	r2, r0
 8005ddc:	460b      	mov	r3, r1
 8005dde:	4b0d      	ldr	r3, [pc, #52]	@ (8005e14 <UART_SetConfig+0x4e4>)
 8005de0:	fba3 1302 	umull	r1, r3, r3, r2
 8005de4:	095b      	lsrs	r3, r3, #5
 8005de6:	2164      	movs	r1, #100	@ 0x64
 8005de8:	fb01 f303 	mul.w	r3, r1, r3
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	011b      	lsls	r3, r3, #4
 8005df0:	3332      	adds	r3, #50	@ 0x32
 8005df2:	4a08      	ldr	r2, [pc, #32]	@ (8005e14 <UART_SetConfig+0x4e4>)
 8005df4:	fba2 2303 	umull	r2, r3, r2, r3
 8005df8:	095b      	lsrs	r3, r3, #5
 8005dfa:	f003 020f 	and.w	r2, r3, #15
 8005dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4422      	add	r2, r4
 8005e06:	609a      	str	r2, [r3, #8]
}
 8005e08:	bf00      	nop
 8005e0a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e14:	51eb851f 	.word	0x51eb851f

08005e18 <__cvt>:
 8005e18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e1c:	ec57 6b10 	vmov	r6, r7, d0
 8005e20:	2f00      	cmp	r7, #0
 8005e22:	460c      	mov	r4, r1
 8005e24:	4619      	mov	r1, r3
 8005e26:	463b      	mov	r3, r7
 8005e28:	bfbb      	ittet	lt
 8005e2a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005e2e:	461f      	movlt	r7, r3
 8005e30:	2300      	movge	r3, #0
 8005e32:	232d      	movlt	r3, #45	@ 0x2d
 8005e34:	700b      	strb	r3, [r1, #0]
 8005e36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e38:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005e3c:	4691      	mov	r9, r2
 8005e3e:	f023 0820 	bic.w	r8, r3, #32
 8005e42:	bfbc      	itt	lt
 8005e44:	4632      	movlt	r2, r6
 8005e46:	4616      	movlt	r6, r2
 8005e48:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005e4c:	d005      	beq.n	8005e5a <__cvt+0x42>
 8005e4e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005e52:	d100      	bne.n	8005e56 <__cvt+0x3e>
 8005e54:	3401      	adds	r4, #1
 8005e56:	2102      	movs	r1, #2
 8005e58:	e000      	b.n	8005e5c <__cvt+0x44>
 8005e5a:	2103      	movs	r1, #3
 8005e5c:	ab03      	add	r3, sp, #12
 8005e5e:	9301      	str	r3, [sp, #4]
 8005e60:	ab02      	add	r3, sp, #8
 8005e62:	9300      	str	r3, [sp, #0]
 8005e64:	ec47 6b10 	vmov	d0, r6, r7
 8005e68:	4653      	mov	r3, sl
 8005e6a:	4622      	mov	r2, r4
 8005e6c:	f000 fe5c 	bl	8006b28 <_dtoa_r>
 8005e70:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005e74:	4605      	mov	r5, r0
 8005e76:	d119      	bne.n	8005eac <__cvt+0x94>
 8005e78:	f019 0f01 	tst.w	r9, #1
 8005e7c:	d00e      	beq.n	8005e9c <__cvt+0x84>
 8005e7e:	eb00 0904 	add.w	r9, r0, r4
 8005e82:	2200      	movs	r2, #0
 8005e84:	2300      	movs	r3, #0
 8005e86:	4630      	mov	r0, r6
 8005e88:	4639      	mov	r1, r7
 8005e8a:	f7fa fe25 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e8e:	b108      	cbz	r0, 8005e94 <__cvt+0x7c>
 8005e90:	f8cd 900c 	str.w	r9, [sp, #12]
 8005e94:	2230      	movs	r2, #48	@ 0x30
 8005e96:	9b03      	ldr	r3, [sp, #12]
 8005e98:	454b      	cmp	r3, r9
 8005e9a:	d31e      	bcc.n	8005eda <__cvt+0xc2>
 8005e9c:	9b03      	ldr	r3, [sp, #12]
 8005e9e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005ea0:	1b5b      	subs	r3, r3, r5
 8005ea2:	4628      	mov	r0, r5
 8005ea4:	6013      	str	r3, [r2, #0]
 8005ea6:	b004      	add	sp, #16
 8005ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005eb0:	eb00 0904 	add.w	r9, r0, r4
 8005eb4:	d1e5      	bne.n	8005e82 <__cvt+0x6a>
 8005eb6:	7803      	ldrb	r3, [r0, #0]
 8005eb8:	2b30      	cmp	r3, #48	@ 0x30
 8005eba:	d10a      	bne.n	8005ed2 <__cvt+0xba>
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	4630      	mov	r0, r6
 8005ec2:	4639      	mov	r1, r7
 8005ec4:	f7fa fe08 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ec8:	b918      	cbnz	r0, 8005ed2 <__cvt+0xba>
 8005eca:	f1c4 0401 	rsb	r4, r4, #1
 8005ece:	f8ca 4000 	str.w	r4, [sl]
 8005ed2:	f8da 3000 	ldr.w	r3, [sl]
 8005ed6:	4499      	add	r9, r3
 8005ed8:	e7d3      	b.n	8005e82 <__cvt+0x6a>
 8005eda:	1c59      	adds	r1, r3, #1
 8005edc:	9103      	str	r1, [sp, #12]
 8005ede:	701a      	strb	r2, [r3, #0]
 8005ee0:	e7d9      	b.n	8005e96 <__cvt+0x7e>

08005ee2 <__exponent>:
 8005ee2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ee4:	2900      	cmp	r1, #0
 8005ee6:	bfba      	itte	lt
 8005ee8:	4249      	neglt	r1, r1
 8005eea:	232d      	movlt	r3, #45	@ 0x2d
 8005eec:	232b      	movge	r3, #43	@ 0x2b
 8005eee:	2909      	cmp	r1, #9
 8005ef0:	7002      	strb	r2, [r0, #0]
 8005ef2:	7043      	strb	r3, [r0, #1]
 8005ef4:	dd29      	ble.n	8005f4a <__exponent+0x68>
 8005ef6:	f10d 0307 	add.w	r3, sp, #7
 8005efa:	461d      	mov	r5, r3
 8005efc:	270a      	movs	r7, #10
 8005efe:	461a      	mov	r2, r3
 8005f00:	fbb1 f6f7 	udiv	r6, r1, r7
 8005f04:	fb07 1416 	mls	r4, r7, r6, r1
 8005f08:	3430      	adds	r4, #48	@ 0x30
 8005f0a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005f0e:	460c      	mov	r4, r1
 8005f10:	2c63      	cmp	r4, #99	@ 0x63
 8005f12:	f103 33ff 	add.w	r3, r3, #4294967295
 8005f16:	4631      	mov	r1, r6
 8005f18:	dcf1      	bgt.n	8005efe <__exponent+0x1c>
 8005f1a:	3130      	adds	r1, #48	@ 0x30
 8005f1c:	1e94      	subs	r4, r2, #2
 8005f1e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005f22:	1c41      	adds	r1, r0, #1
 8005f24:	4623      	mov	r3, r4
 8005f26:	42ab      	cmp	r3, r5
 8005f28:	d30a      	bcc.n	8005f40 <__exponent+0x5e>
 8005f2a:	f10d 0309 	add.w	r3, sp, #9
 8005f2e:	1a9b      	subs	r3, r3, r2
 8005f30:	42ac      	cmp	r4, r5
 8005f32:	bf88      	it	hi
 8005f34:	2300      	movhi	r3, #0
 8005f36:	3302      	adds	r3, #2
 8005f38:	4403      	add	r3, r0
 8005f3a:	1a18      	subs	r0, r3, r0
 8005f3c:	b003      	add	sp, #12
 8005f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f40:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005f44:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005f48:	e7ed      	b.n	8005f26 <__exponent+0x44>
 8005f4a:	2330      	movs	r3, #48	@ 0x30
 8005f4c:	3130      	adds	r1, #48	@ 0x30
 8005f4e:	7083      	strb	r3, [r0, #2]
 8005f50:	70c1      	strb	r1, [r0, #3]
 8005f52:	1d03      	adds	r3, r0, #4
 8005f54:	e7f1      	b.n	8005f3a <__exponent+0x58>
	...

08005f58 <_printf_float>:
 8005f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f5c:	b08d      	sub	sp, #52	@ 0x34
 8005f5e:	460c      	mov	r4, r1
 8005f60:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005f64:	4616      	mov	r6, r2
 8005f66:	461f      	mov	r7, r3
 8005f68:	4605      	mov	r5, r0
 8005f6a:	f000 fcdb 	bl	8006924 <_localeconv_r>
 8005f6e:	6803      	ldr	r3, [r0, #0]
 8005f70:	9304      	str	r3, [sp, #16]
 8005f72:	4618      	mov	r0, r3
 8005f74:	f7fa f984 	bl	8000280 <strlen>
 8005f78:	2300      	movs	r3, #0
 8005f7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f7c:	f8d8 3000 	ldr.w	r3, [r8]
 8005f80:	9005      	str	r0, [sp, #20]
 8005f82:	3307      	adds	r3, #7
 8005f84:	f023 0307 	bic.w	r3, r3, #7
 8005f88:	f103 0208 	add.w	r2, r3, #8
 8005f8c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005f90:	f8d4 b000 	ldr.w	fp, [r4]
 8005f94:	f8c8 2000 	str.w	r2, [r8]
 8005f98:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005f9c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005fa0:	9307      	str	r3, [sp, #28]
 8005fa2:	f8cd 8018 	str.w	r8, [sp, #24]
 8005fa6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005faa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005fae:	4b9c      	ldr	r3, [pc, #624]	@ (8006220 <_printf_float+0x2c8>)
 8005fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8005fb4:	f7fa fdc2 	bl	8000b3c <__aeabi_dcmpun>
 8005fb8:	bb70      	cbnz	r0, 8006018 <_printf_float+0xc0>
 8005fba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005fbe:	4b98      	ldr	r3, [pc, #608]	@ (8006220 <_printf_float+0x2c8>)
 8005fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8005fc4:	f7fa fd9c 	bl	8000b00 <__aeabi_dcmple>
 8005fc8:	bb30      	cbnz	r0, 8006018 <_printf_float+0xc0>
 8005fca:	2200      	movs	r2, #0
 8005fcc:	2300      	movs	r3, #0
 8005fce:	4640      	mov	r0, r8
 8005fd0:	4649      	mov	r1, r9
 8005fd2:	f7fa fd8b 	bl	8000aec <__aeabi_dcmplt>
 8005fd6:	b110      	cbz	r0, 8005fde <_printf_float+0x86>
 8005fd8:	232d      	movs	r3, #45	@ 0x2d
 8005fda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fde:	4a91      	ldr	r2, [pc, #580]	@ (8006224 <_printf_float+0x2cc>)
 8005fe0:	4b91      	ldr	r3, [pc, #580]	@ (8006228 <_printf_float+0x2d0>)
 8005fe2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005fe6:	bf94      	ite	ls
 8005fe8:	4690      	movls	r8, r2
 8005fea:	4698      	movhi	r8, r3
 8005fec:	2303      	movs	r3, #3
 8005fee:	6123      	str	r3, [r4, #16]
 8005ff0:	f02b 0304 	bic.w	r3, fp, #4
 8005ff4:	6023      	str	r3, [r4, #0]
 8005ff6:	f04f 0900 	mov.w	r9, #0
 8005ffa:	9700      	str	r7, [sp, #0]
 8005ffc:	4633      	mov	r3, r6
 8005ffe:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006000:	4621      	mov	r1, r4
 8006002:	4628      	mov	r0, r5
 8006004:	f000 f9d2 	bl	80063ac <_printf_common>
 8006008:	3001      	adds	r0, #1
 800600a:	f040 808d 	bne.w	8006128 <_printf_float+0x1d0>
 800600e:	f04f 30ff 	mov.w	r0, #4294967295
 8006012:	b00d      	add	sp, #52	@ 0x34
 8006014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006018:	4642      	mov	r2, r8
 800601a:	464b      	mov	r3, r9
 800601c:	4640      	mov	r0, r8
 800601e:	4649      	mov	r1, r9
 8006020:	f7fa fd8c 	bl	8000b3c <__aeabi_dcmpun>
 8006024:	b140      	cbz	r0, 8006038 <_printf_float+0xe0>
 8006026:	464b      	mov	r3, r9
 8006028:	2b00      	cmp	r3, #0
 800602a:	bfbc      	itt	lt
 800602c:	232d      	movlt	r3, #45	@ 0x2d
 800602e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006032:	4a7e      	ldr	r2, [pc, #504]	@ (800622c <_printf_float+0x2d4>)
 8006034:	4b7e      	ldr	r3, [pc, #504]	@ (8006230 <_printf_float+0x2d8>)
 8006036:	e7d4      	b.n	8005fe2 <_printf_float+0x8a>
 8006038:	6863      	ldr	r3, [r4, #4]
 800603a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800603e:	9206      	str	r2, [sp, #24]
 8006040:	1c5a      	adds	r2, r3, #1
 8006042:	d13b      	bne.n	80060bc <_printf_float+0x164>
 8006044:	2306      	movs	r3, #6
 8006046:	6063      	str	r3, [r4, #4]
 8006048:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800604c:	2300      	movs	r3, #0
 800604e:	6022      	str	r2, [r4, #0]
 8006050:	9303      	str	r3, [sp, #12]
 8006052:	ab0a      	add	r3, sp, #40	@ 0x28
 8006054:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006058:	ab09      	add	r3, sp, #36	@ 0x24
 800605a:	9300      	str	r3, [sp, #0]
 800605c:	6861      	ldr	r1, [r4, #4]
 800605e:	ec49 8b10 	vmov	d0, r8, r9
 8006062:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006066:	4628      	mov	r0, r5
 8006068:	f7ff fed6 	bl	8005e18 <__cvt>
 800606c:	9b06      	ldr	r3, [sp, #24]
 800606e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006070:	2b47      	cmp	r3, #71	@ 0x47
 8006072:	4680      	mov	r8, r0
 8006074:	d129      	bne.n	80060ca <_printf_float+0x172>
 8006076:	1cc8      	adds	r0, r1, #3
 8006078:	db02      	blt.n	8006080 <_printf_float+0x128>
 800607a:	6863      	ldr	r3, [r4, #4]
 800607c:	4299      	cmp	r1, r3
 800607e:	dd41      	ble.n	8006104 <_printf_float+0x1ac>
 8006080:	f1aa 0a02 	sub.w	sl, sl, #2
 8006084:	fa5f fa8a 	uxtb.w	sl, sl
 8006088:	3901      	subs	r1, #1
 800608a:	4652      	mov	r2, sl
 800608c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006090:	9109      	str	r1, [sp, #36]	@ 0x24
 8006092:	f7ff ff26 	bl	8005ee2 <__exponent>
 8006096:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006098:	1813      	adds	r3, r2, r0
 800609a:	2a01      	cmp	r2, #1
 800609c:	4681      	mov	r9, r0
 800609e:	6123      	str	r3, [r4, #16]
 80060a0:	dc02      	bgt.n	80060a8 <_printf_float+0x150>
 80060a2:	6822      	ldr	r2, [r4, #0]
 80060a4:	07d2      	lsls	r2, r2, #31
 80060a6:	d501      	bpl.n	80060ac <_printf_float+0x154>
 80060a8:	3301      	adds	r3, #1
 80060aa:	6123      	str	r3, [r4, #16]
 80060ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d0a2      	beq.n	8005ffa <_printf_float+0xa2>
 80060b4:	232d      	movs	r3, #45	@ 0x2d
 80060b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060ba:	e79e      	b.n	8005ffa <_printf_float+0xa2>
 80060bc:	9a06      	ldr	r2, [sp, #24]
 80060be:	2a47      	cmp	r2, #71	@ 0x47
 80060c0:	d1c2      	bne.n	8006048 <_printf_float+0xf0>
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1c0      	bne.n	8006048 <_printf_float+0xf0>
 80060c6:	2301      	movs	r3, #1
 80060c8:	e7bd      	b.n	8006046 <_printf_float+0xee>
 80060ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80060ce:	d9db      	bls.n	8006088 <_printf_float+0x130>
 80060d0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80060d4:	d118      	bne.n	8006108 <_printf_float+0x1b0>
 80060d6:	2900      	cmp	r1, #0
 80060d8:	6863      	ldr	r3, [r4, #4]
 80060da:	dd0b      	ble.n	80060f4 <_printf_float+0x19c>
 80060dc:	6121      	str	r1, [r4, #16]
 80060de:	b913      	cbnz	r3, 80060e6 <_printf_float+0x18e>
 80060e0:	6822      	ldr	r2, [r4, #0]
 80060e2:	07d0      	lsls	r0, r2, #31
 80060e4:	d502      	bpl.n	80060ec <_printf_float+0x194>
 80060e6:	3301      	adds	r3, #1
 80060e8:	440b      	add	r3, r1
 80060ea:	6123      	str	r3, [r4, #16]
 80060ec:	65a1      	str	r1, [r4, #88]	@ 0x58
 80060ee:	f04f 0900 	mov.w	r9, #0
 80060f2:	e7db      	b.n	80060ac <_printf_float+0x154>
 80060f4:	b913      	cbnz	r3, 80060fc <_printf_float+0x1a4>
 80060f6:	6822      	ldr	r2, [r4, #0]
 80060f8:	07d2      	lsls	r2, r2, #31
 80060fa:	d501      	bpl.n	8006100 <_printf_float+0x1a8>
 80060fc:	3302      	adds	r3, #2
 80060fe:	e7f4      	b.n	80060ea <_printf_float+0x192>
 8006100:	2301      	movs	r3, #1
 8006102:	e7f2      	b.n	80060ea <_printf_float+0x192>
 8006104:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006108:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800610a:	4299      	cmp	r1, r3
 800610c:	db05      	blt.n	800611a <_printf_float+0x1c2>
 800610e:	6823      	ldr	r3, [r4, #0]
 8006110:	6121      	str	r1, [r4, #16]
 8006112:	07d8      	lsls	r0, r3, #31
 8006114:	d5ea      	bpl.n	80060ec <_printf_float+0x194>
 8006116:	1c4b      	adds	r3, r1, #1
 8006118:	e7e7      	b.n	80060ea <_printf_float+0x192>
 800611a:	2900      	cmp	r1, #0
 800611c:	bfd4      	ite	le
 800611e:	f1c1 0202 	rsble	r2, r1, #2
 8006122:	2201      	movgt	r2, #1
 8006124:	4413      	add	r3, r2
 8006126:	e7e0      	b.n	80060ea <_printf_float+0x192>
 8006128:	6823      	ldr	r3, [r4, #0]
 800612a:	055a      	lsls	r2, r3, #21
 800612c:	d407      	bmi.n	800613e <_printf_float+0x1e6>
 800612e:	6923      	ldr	r3, [r4, #16]
 8006130:	4642      	mov	r2, r8
 8006132:	4631      	mov	r1, r6
 8006134:	4628      	mov	r0, r5
 8006136:	47b8      	blx	r7
 8006138:	3001      	adds	r0, #1
 800613a:	d12b      	bne.n	8006194 <_printf_float+0x23c>
 800613c:	e767      	b.n	800600e <_printf_float+0xb6>
 800613e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006142:	f240 80dd 	bls.w	8006300 <_printf_float+0x3a8>
 8006146:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800614a:	2200      	movs	r2, #0
 800614c:	2300      	movs	r3, #0
 800614e:	f7fa fcc3 	bl	8000ad8 <__aeabi_dcmpeq>
 8006152:	2800      	cmp	r0, #0
 8006154:	d033      	beq.n	80061be <_printf_float+0x266>
 8006156:	4a37      	ldr	r2, [pc, #220]	@ (8006234 <_printf_float+0x2dc>)
 8006158:	2301      	movs	r3, #1
 800615a:	4631      	mov	r1, r6
 800615c:	4628      	mov	r0, r5
 800615e:	47b8      	blx	r7
 8006160:	3001      	adds	r0, #1
 8006162:	f43f af54 	beq.w	800600e <_printf_float+0xb6>
 8006166:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800616a:	4543      	cmp	r3, r8
 800616c:	db02      	blt.n	8006174 <_printf_float+0x21c>
 800616e:	6823      	ldr	r3, [r4, #0]
 8006170:	07d8      	lsls	r0, r3, #31
 8006172:	d50f      	bpl.n	8006194 <_printf_float+0x23c>
 8006174:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006178:	4631      	mov	r1, r6
 800617a:	4628      	mov	r0, r5
 800617c:	47b8      	blx	r7
 800617e:	3001      	adds	r0, #1
 8006180:	f43f af45 	beq.w	800600e <_printf_float+0xb6>
 8006184:	f04f 0900 	mov.w	r9, #0
 8006188:	f108 38ff 	add.w	r8, r8, #4294967295
 800618c:	f104 0a1a 	add.w	sl, r4, #26
 8006190:	45c8      	cmp	r8, r9
 8006192:	dc09      	bgt.n	80061a8 <_printf_float+0x250>
 8006194:	6823      	ldr	r3, [r4, #0]
 8006196:	079b      	lsls	r3, r3, #30
 8006198:	f100 8103 	bmi.w	80063a2 <_printf_float+0x44a>
 800619c:	68e0      	ldr	r0, [r4, #12]
 800619e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80061a0:	4298      	cmp	r0, r3
 80061a2:	bfb8      	it	lt
 80061a4:	4618      	movlt	r0, r3
 80061a6:	e734      	b.n	8006012 <_printf_float+0xba>
 80061a8:	2301      	movs	r3, #1
 80061aa:	4652      	mov	r2, sl
 80061ac:	4631      	mov	r1, r6
 80061ae:	4628      	mov	r0, r5
 80061b0:	47b8      	blx	r7
 80061b2:	3001      	adds	r0, #1
 80061b4:	f43f af2b 	beq.w	800600e <_printf_float+0xb6>
 80061b8:	f109 0901 	add.w	r9, r9, #1
 80061bc:	e7e8      	b.n	8006190 <_printf_float+0x238>
 80061be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	dc39      	bgt.n	8006238 <_printf_float+0x2e0>
 80061c4:	4a1b      	ldr	r2, [pc, #108]	@ (8006234 <_printf_float+0x2dc>)
 80061c6:	2301      	movs	r3, #1
 80061c8:	4631      	mov	r1, r6
 80061ca:	4628      	mov	r0, r5
 80061cc:	47b8      	blx	r7
 80061ce:	3001      	adds	r0, #1
 80061d0:	f43f af1d 	beq.w	800600e <_printf_float+0xb6>
 80061d4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80061d8:	ea59 0303 	orrs.w	r3, r9, r3
 80061dc:	d102      	bne.n	80061e4 <_printf_float+0x28c>
 80061de:	6823      	ldr	r3, [r4, #0]
 80061e0:	07d9      	lsls	r1, r3, #31
 80061e2:	d5d7      	bpl.n	8006194 <_printf_float+0x23c>
 80061e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061e8:	4631      	mov	r1, r6
 80061ea:	4628      	mov	r0, r5
 80061ec:	47b8      	blx	r7
 80061ee:	3001      	adds	r0, #1
 80061f0:	f43f af0d 	beq.w	800600e <_printf_float+0xb6>
 80061f4:	f04f 0a00 	mov.w	sl, #0
 80061f8:	f104 0b1a 	add.w	fp, r4, #26
 80061fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061fe:	425b      	negs	r3, r3
 8006200:	4553      	cmp	r3, sl
 8006202:	dc01      	bgt.n	8006208 <_printf_float+0x2b0>
 8006204:	464b      	mov	r3, r9
 8006206:	e793      	b.n	8006130 <_printf_float+0x1d8>
 8006208:	2301      	movs	r3, #1
 800620a:	465a      	mov	r2, fp
 800620c:	4631      	mov	r1, r6
 800620e:	4628      	mov	r0, r5
 8006210:	47b8      	blx	r7
 8006212:	3001      	adds	r0, #1
 8006214:	f43f aefb 	beq.w	800600e <_printf_float+0xb6>
 8006218:	f10a 0a01 	add.w	sl, sl, #1
 800621c:	e7ee      	b.n	80061fc <_printf_float+0x2a4>
 800621e:	bf00      	nop
 8006220:	7fefffff 	.word	0x7fefffff
 8006224:	080099ac 	.word	0x080099ac
 8006228:	080099b0 	.word	0x080099b0
 800622c:	080099b4 	.word	0x080099b4
 8006230:	080099b8 	.word	0x080099b8
 8006234:	080099bc 	.word	0x080099bc
 8006238:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800623a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800623e:	4553      	cmp	r3, sl
 8006240:	bfa8      	it	ge
 8006242:	4653      	movge	r3, sl
 8006244:	2b00      	cmp	r3, #0
 8006246:	4699      	mov	r9, r3
 8006248:	dc36      	bgt.n	80062b8 <_printf_float+0x360>
 800624a:	f04f 0b00 	mov.w	fp, #0
 800624e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006252:	f104 021a 	add.w	r2, r4, #26
 8006256:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006258:	9306      	str	r3, [sp, #24]
 800625a:	eba3 0309 	sub.w	r3, r3, r9
 800625e:	455b      	cmp	r3, fp
 8006260:	dc31      	bgt.n	80062c6 <_printf_float+0x36e>
 8006262:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006264:	459a      	cmp	sl, r3
 8006266:	dc3a      	bgt.n	80062de <_printf_float+0x386>
 8006268:	6823      	ldr	r3, [r4, #0]
 800626a:	07da      	lsls	r2, r3, #31
 800626c:	d437      	bmi.n	80062de <_printf_float+0x386>
 800626e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006270:	ebaa 0903 	sub.w	r9, sl, r3
 8006274:	9b06      	ldr	r3, [sp, #24]
 8006276:	ebaa 0303 	sub.w	r3, sl, r3
 800627a:	4599      	cmp	r9, r3
 800627c:	bfa8      	it	ge
 800627e:	4699      	movge	r9, r3
 8006280:	f1b9 0f00 	cmp.w	r9, #0
 8006284:	dc33      	bgt.n	80062ee <_printf_float+0x396>
 8006286:	f04f 0800 	mov.w	r8, #0
 800628a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800628e:	f104 0b1a 	add.w	fp, r4, #26
 8006292:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006294:	ebaa 0303 	sub.w	r3, sl, r3
 8006298:	eba3 0309 	sub.w	r3, r3, r9
 800629c:	4543      	cmp	r3, r8
 800629e:	f77f af79 	ble.w	8006194 <_printf_float+0x23c>
 80062a2:	2301      	movs	r3, #1
 80062a4:	465a      	mov	r2, fp
 80062a6:	4631      	mov	r1, r6
 80062a8:	4628      	mov	r0, r5
 80062aa:	47b8      	blx	r7
 80062ac:	3001      	adds	r0, #1
 80062ae:	f43f aeae 	beq.w	800600e <_printf_float+0xb6>
 80062b2:	f108 0801 	add.w	r8, r8, #1
 80062b6:	e7ec      	b.n	8006292 <_printf_float+0x33a>
 80062b8:	4642      	mov	r2, r8
 80062ba:	4631      	mov	r1, r6
 80062bc:	4628      	mov	r0, r5
 80062be:	47b8      	blx	r7
 80062c0:	3001      	adds	r0, #1
 80062c2:	d1c2      	bne.n	800624a <_printf_float+0x2f2>
 80062c4:	e6a3      	b.n	800600e <_printf_float+0xb6>
 80062c6:	2301      	movs	r3, #1
 80062c8:	4631      	mov	r1, r6
 80062ca:	4628      	mov	r0, r5
 80062cc:	9206      	str	r2, [sp, #24]
 80062ce:	47b8      	blx	r7
 80062d0:	3001      	adds	r0, #1
 80062d2:	f43f ae9c 	beq.w	800600e <_printf_float+0xb6>
 80062d6:	9a06      	ldr	r2, [sp, #24]
 80062d8:	f10b 0b01 	add.w	fp, fp, #1
 80062dc:	e7bb      	b.n	8006256 <_printf_float+0x2fe>
 80062de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062e2:	4631      	mov	r1, r6
 80062e4:	4628      	mov	r0, r5
 80062e6:	47b8      	blx	r7
 80062e8:	3001      	adds	r0, #1
 80062ea:	d1c0      	bne.n	800626e <_printf_float+0x316>
 80062ec:	e68f      	b.n	800600e <_printf_float+0xb6>
 80062ee:	9a06      	ldr	r2, [sp, #24]
 80062f0:	464b      	mov	r3, r9
 80062f2:	4442      	add	r2, r8
 80062f4:	4631      	mov	r1, r6
 80062f6:	4628      	mov	r0, r5
 80062f8:	47b8      	blx	r7
 80062fa:	3001      	adds	r0, #1
 80062fc:	d1c3      	bne.n	8006286 <_printf_float+0x32e>
 80062fe:	e686      	b.n	800600e <_printf_float+0xb6>
 8006300:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006304:	f1ba 0f01 	cmp.w	sl, #1
 8006308:	dc01      	bgt.n	800630e <_printf_float+0x3b6>
 800630a:	07db      	lsls	r3, r3, #31
 800630c:	d536      	bpl.n	800637c <_printf_float+0x424>
 800630e:	2301      	movs	r3, #1
 8006310:	4642      	mov	r2, r8
 8006312:	4631      	mov	r1, r6
 8006314:	4628      	mov	r0, r5
 8006316:	47b8      	blx	r7
 8006318:	3001      	adds	r0, #1
 800631a:	f43f ae78 	beq.w	800600e <_printf_float+0xb6>
 800631e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006322:	4631      	mov	r1, r6
 8006324:	4628      	mov	r0, r5
 8006326:	47b8      	blx	r7
 8006328:	3001      	adds	r0, #1
 800632a:	f43f ae70 	beq.w	800600e <_printf_float+0xb6>
 800632e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006332:	2200      	movs	r2, #0
 8006334:	2300      	movs	r3, #0
 8006336:	f10a 3aff 	add.w	sl, sl, #4294967295
 800633a:	f7fa fbcd 	bl	8000ad8 <__aeabi_dcmpeq>
 800633e:	b9c0      	cbnz	r0, 8006372 <_printf_float+0x41a>
 8006340:	4653      	mov	r3, sl
 8006342:	f108 0201 	add.w	r2, r8, #1
 8006346:	4631      	mov	r1, r6
 8006348:	4628      	mov	r0, r5
 800634a:	47b8      	blx	r7
 800634c:	3001      	adds	r0, #1
 800634e:	d10c      	bne.n	800636a <_printf_float+0x412>
 8006350:	e65d      	b.n	800600e <_printf_float+0xb6>
 8006352:	2301      	movs	r3, #1
 8006354:	465a      	mov	r2, fp
 8006356:	4631      	mov	r1, r6
 8006358:	4628      	mov	r0, r5
 800635a:	47b8      	blx	r7
 800635c:	3001      	adds	r0, #1
 800635e:	f43f ae56 	beq.w	800600e <_printf_float+0xb6>
 8006362:	f108 0801 	add.w	r8, r8, #1
 8006366:	45d0      	cmp	r8, sl
 8006368:	dbf3      	blt.n	8006352 <_printf_float+0x3fa>
 800636a:	464b      	mov	r3, r9
 800636c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006370:	e6df      	b.n	8006132 <_printf_float+0x1da>
 8006372:	f04f 0800 	mov.w	r8, #0
 8006376:	f104 0b1a 	add.w	fp, r4, #26
 800637a:	e7f4      	b.n	8006366 <_printf_float+0x40e>
 800637c:	2301      	movs	r3, #1
 800637e:	4642      	mov	r2, r8
 8006380:	e7e1      	b.n	8006346 <_printf_float+0x3ee>
 8006382:	2301      	movs	r3, #1
 8006384:	464a      	mov	r2, r9
 8006386:	4631      	mov	r1, r6
 8006388:	4628      	mov	r0, r5
 800638a:	47b8      	blx	r7
 800638c:	3001      	adds	r0, #1
 800638e:	f43f ae3e 	beq.w	800600e <_printf_float+0xb6>
 8006392:	f108 0801 	add.w	r8, r8, #1
 8006396:	68e3      	ldr	r3, [r4, #12]
 8006398:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800639a:	1a5b      	subs	r3, r3, r1
 800639c:	4543      	cmp	r3, r8
 800639e:	dcf0      	bgt.n	8006382 <_printf_float+0x42a>
 80063a0:	e6fc      	b.n	800619c <_printf_float+0x244>
 80063a2:	f04f 0800 	mov.w	r8, #0
 80063a6:	f104 0919 	add.w	r9, r4, #25
 80063aa:	e7f4      	b.n	8006396 <_printf_float+0x43e>

080063ac <_printf_common>:
 80063ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063b0:	4616      	mov	r6, r2
 80063b2:	4698      	mov	r8, r3
 80063b4:	688a      	ldr	r2, [r1, #8]
 80063b6:	690b      	ldr	r3, [r1, #16]
 80063b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80063bc:	4293      	cmp	r3, r2
 80063be:	bfb8      	it	lt
 80063c0:	4613      	movlt	r3, r2
 80063c2:	6033      	str	r3, [r6, #0]
 80063c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80063c8:	4607      	mov	r7, r0
 80063ca:	460c      	mov	r4, r1
 80063cc:	b10a      	cbz	r2, 80063d2 <_printf_common+0x26>
 80063ce:	3301      	adds	r3, #1
 80063d0:	6033      	str	r3, [r6, #0]
 80063d2:	6823      	ldr	r3, [r4, #0]
 80063d4:	0699      	lsls	r1, r3, #26
 80063d6:	bf42      	ittt	mi
 80063d8:	6833      	ldrmi	r3, [r6, #0]
 80063da:	3302      	addmi	r3, #2
 80063dc:	6033      	strmi	r3, [r6, #0]
 80063de:	6825      	ldr	r5, [r4, #0]
 80063e0:	f015 0506 	ands.w	r5, r5, #6
 80063e4:	d106      	bne.n	80063f4 <_printf_common+0x48>
 80063e6:	f104 0a19 	add.w	sl, r4, #25
 80063ea:	68e3      	ldr	r3, [r4, #12]
 80063ec:	6832      	ldr	r2, [r6, #0]
 80063ee:	1a9b      	subs	r3, r3, r2
 80063f0:	42ab      	cmp	r3, r5
 80063f2:	dc26      	bgt.n	8006442 <_printf_common+0x96>
 80063f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80063f8:	6822      	ldr	r2, [r4, #0]
 80063fa:	3b00      	subs	r3, #0
 80063fc:	bf18      	it	ne
 80063fe:	2301      	movne	r3, #1
 8006400:	0692      	lsls	r2, r2, #26
 8006402:	d42b      	bmi.n	800645c <_printf_common+0xb0>
 8006404:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006408:	4641      	mov	r1, r8
 800640a:	4638      	mov	r0, r7
 800640c:	47c8      	blx	r9
 800640e:	3001      	adds	r0, #1
 8006410:	d01e      	beq.n	8006450 <_printf_common+0xa4>
 8006412:	6823      	ldr	r3, [r4, #0]
 8006414:	6922      	ldr	r2, [r4, #16]
 8006416:	f003 0306 	and.w	r3, r3, #6
 800641a:	2b04      	cmp	r3, #4
 800641c:	bf02      	ittt	eq
 800641e:	68e5      	ldreq	r5, [r4, #12]
 8006420:	6833      	ldreq	r3, [r6, #0]
 8006422:	1aed      	subeq	r5, r5, r3
 8006424:	68a3      	ldr	r3, [r4, #8]
 8006426:	bf0c      	ite	eq
 8006428:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800642c:	2500      	movne	r5, #0
 800642e:	4293      	cmp	r3, r2
 8006430:	bfc4      	itt	gt
 8006432:	1a9b      	subgt	r3, r3, r2
 8006434:	18ed      	addgt	r5, r5, r3
 8006436:	2600      	movs	r6, #0
 8006438:	341a      	adds	r4, #26
 800643a:	42b5      	cmp	r5, r6
 800643c:	d11a      	bne.n	8006474 <_printf_common+0xc8>
 800643e:	2000      	movs	r0, #0
 8006440:	e008      	b.n	8006454 <_printf_common+0xa8>
 8006442:	2301      	movs	r3, #1
 8006444:	4652      	mov	r2, sl
 8006446:	4641      	mov	r1, r8
 8006448:	4638      	mov	r0, r7
 800644a:	47c8      	blx	r9
 800644c:	3001      	adds	r0, #1
 800644e:	d103      	bne.n	8006458 <_printf_common+0xac>
 8006450:	f04f 30ff 	mov.w	r0, #4294967295
 8006454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006458:	3501      	adds	r5, #1
 800645a:	e7c6      	b.n	80063ea <_printf_common+0x3e>
 800645c:	18e1      	adds	r1, r4, r3
 800645e:	1c5a      	adds	r2, r3, #1
 8006460:	2030      	movs	r0, #48	@ 0x30
 8006462:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006466:	4422      	add	r2, r4
 8006468:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800646c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006470:	3302      	adds	r3, #2
 8006472:	e7c7      	b.n	8006404 <_printf_common+0x58>
 8006474:	2301      	movs	r3, #1
 8006476:	4622      	mov	r2, r4
 8006478:	4641      	mov	r1, r8
 800647a:	4638      	mov	r0, r7
 800647c:	47c8      	blx	r9
 800647e:	3001      	adds	r0, #1
 8006480:	d0e6      	beq.n	8006450 <_printf_common+0xa4>
 8006482:	3601      	adds	r6, #1
 8006484:	e7d9      	b.n	800643a <_printf_common+0x8e>
	...

08006488 <_printf_i>:
 8006488:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800648c:	7e0f      	ldrb	r7, [r1, #24]
 800648e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006490:	2f78      	cmp	r7, #120	@ 0x78
 8006492:	4691      	mov	r9, r2
 8006494:	4680      	mov	r8, r0
 8006496:	460c      	mov	r4, r1
 8006498:	469a      	mov	sl, r3
 800649a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800649e:	d807      	bhi.n	80064b0 <_printf_i+0x28>
 80064a0:	2f62      	cmp	r7, #98	@ 0x62
 80064a2:	d80a      	bhi.n	80064ba <_printf_i+0x32>
 80064a4:	2f00      	cmp	r7, #0
 80064a6:	f000 80d2 	beq.w	800664e <_printf_i+0x1c6>
 80064aa:	2f58      	cmp	r7, #88	@ 0x58
 80064ac:	f000 80b9 	beq.w	8006622 <_printf_i+0x19a>
 80064b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80064b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80064b8:	e03a      	b.n	8006530 <_printf_i+0xa8>
 80064ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80064be:	2b15      	cmp	r3, #21
 80064c0:	d8f6      	bhi.n	80064b0 <_printf_i+0x28>
 80064c2:	a101      	add	r1, pc, #4	@ (adr r1, 80064c8 <_printf_i+0x40>)
 80064c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064c8:	08006521 	.word	0x08006521
 80064cc:	08006535 	.word	0x08006535
 80064d0:	080064b1 	.word	0x080064b1
 80064d4:	080064b1 	.word	0x080064b1
 80064d8:	080064b1 	.word	0x080064b1
 80064dc:	080064b1 	.word	0x080064b1
 80064e0:	08006535 	.word	0x08006535
 80064e4:	080064b1 	.word	0x080064b1
 80064e8:	080064b1 	.word	0x080064b1
 80064ec:	080064b1 	.word	0x080064b1
 80064f0:	080064b1 	.word	0x080064b1
 80064f4:	08006635 	.word	0x08006635
 80064f8:	0800655f 	.word	0x0800655f
 80064fc:	080065ef 	.word	0x080065ef
 8006500:	080064b1 	.word	0x080064b1
 8006504:	080064b1 	.word	0x080064b1
 8006508:	08006657 	.word	0x08006657
 800650c:	080064b1 	.word	0x080064b1
 8006510:	0800655f 	.word	0x0800655f
 8006514:	080064b1 	.word	0x080064b1
 8006518:	080064b1 	.word	0x080064b1
 800651c:	080065f7 	.word	0x080065f7
 8006520:	6833      	ldr	r3, [r6, #0]
 8006522:	1d1a      	adds	r2, r3, #4
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	6032      	str	r2, [r6, #0]
 8006528:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800652c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006530:	2301      	movs	r3, #1
 8006532:	e09d      	b.n	8006670 <_printf_i+0x1e8>
 8006534:	6833      	ldr	r3, [r6, #0]
 8006536:	6820      	ldr	r0, [r4, #0]
 8006538:	1d19      	adds	r1, r3, #4
 800653a:	6031      	str	r1, [r6, #0]
 800653c:	0606      	lsls	r6, r0, #24
 800653e:	d501      	bpl.n	8006544 <_printf_i+0xbc>
 8006540:	681d      	ldr	r5, [r3, #0]
 8006542:	e003      	b.n	800654c <_printf_i+0xc4>
 8006544:	0645      	lsls	r5, r0, #25
 8006546:	d5fb      	bpl.n	8006540 <_printf_i+0xb8>
 8006548:	f9b3 5000 	ldrsh.w	r5, [r3]
 800654c:	2d00      	cmp	r5, #0
 800654e:	da03      	bge.n	8006558 <_printf_i+0xd0>
 8006550:	232d      	movs	r3, #45	@ 0x2d
 8006552:	426d      	negs	r5, r5
 8006554:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006558:	4859      	ldr	r0, [pc, #356]	@ (80066c0 <_printf_i+0x238>)
 800655a:	230a      	movs	r3, #10
 800655c:	e011      	b.n	8006582 <_printf_i+0xfa>
 800655e:	6821      	ldr	r1, [r4, #0]
 8006560:	6833      	ldr	r3, [r6, #0]
 8006562:	0608      	lsls	r0, r1, #24
 8006564:	f853 5b04 	ldr.w	r5, [r3], #4
 8006568:	d402      	bmi.n	8006570 <_printf_i+0xe8>
 800656a:	0649      	lsls	r1, r1, #25
 800656c:	bf48      	it	mi
 800656e:	b2ad      	uxthmi	r5, r5
 8006570:	2f6f      	cmp	r7, #111	@ 0x6f
 8006572:	4853      	ldr	r0, [pc, #332]	@ (80066c0 <_printf_i+0x238>)
 8006574:	6033      	str	r3, [r6, #0]
 8006576:	bf14      	ite	ne
 8006578:	230a      	movne	r3, #10
 800657a:	2308      	moveq	r3, #8
 800657c:	2100      	movs	r1, #0
 800657e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006582:	6866      	ldr	r6, [r4, #4]
 8006584:	60a6      	str	r6, [r4, #8]
 8006586:	2e00      	cmp	r6, #0
 8006588:	bfa2      	ittt	ge
 800658a:	6821      	ldrge	r1, [r4, #0]
 800658c:	f021 0104 	bicge.w	r1, r1, #4
 8006590:	6021      	strge	r1, [r4, #0]
 8006592:	b90d      	cbnz	r5, 8006598 <_printf_i+0x110>
 8006594:	2e00      	cmp	r6, #0
 8006596:	d04b      	beq.n	8006630 <_printf_i+0x1a8>
 8006598:	4616      	mov	r6, r2
 800659a:	fbb5 f1f3 	udiv	r1, r5, r3
 800659e:	fb03 5711 	mls	r7, r3, r1, r5
 80065a2:	5dc7      	ldrb	r7, [r0, r7]
 80065a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80065a8:	462f      	mov	r7, r5
 80065aa:	42bb      	cmp	r3, r7
 80065ac:	460d      	mov	r5, r1
 80065ae:	d9f4      	bls.n	800659a <_printf_i+0x112>
 80065b0:	2b08      	cmp	r3, #8
 80065b2:	d10b      	bne.n	80065cc <_printf_i+0x144>
 80065b4:	6823      	ldr	r3, [r4, #0]
 80065b6:	07df      	lsls	r7, r3, #31
 80065b8:	d508      	bpl.n	80065cc <_printf_i+0x144>
 80065ba:	6923      	ldr	r3, [r4, #16]
 80065bc:	6861      	ldr	r1, [r4, #4]
 80065be:	4299      	cmp	r1, r3
 80065c0:	bfde      	ittt	le
 80065c2:	2330      	movle	r3, #48	@ 0x30
 80065c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80065c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80065cc:	1b92      	subs	r2, r2, r6
 80065ce:	6122      	str	r2, [r4, #16]
 80065d0:	f8cd a000 	str.w	sl, [sp]
 80065d4:	464b      	mov	r3, r9
 80065d6:	aa03      	add	r2, sp, #12
 80065d8:	4621      	mov	r1, r4
 80065da:	4640      	mov	r0, r8
 80065dc:	f7ff fee6 	bl	80063ac <_printf_common>
 80065e0:	3001      	adds	r0, #1
 80065e2:	d14a      	bne.n	800667a <_printf_i+0x1f2>
 80065e4:	f04f 30ff 	mov.w	r0, #4294967295
 80065e8:	b004      	add	sp, #16
 80065ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065ee:	6823      	ldr	r3, [r4, #0]
 80065f0:	f043 0320 	orr.w	r3, r3, #32
 80065f4:	6023      	str	r3, [r4, #0]
 80065f6:	4833      	ldr	r0, [pc, #204]	@ (80066c4 <_printf_i+0x23c>)
 80065f8:	2778      	movs	r7, #120	@ 0x78
 80065fa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80065fe:	6823      	ldr	r3, [r4, #0]
 8006600:	6831      	ldr	r1, [r6, #0]
 8006602:	061f      	lsls	r7, r3, #24
 8006604:	f851 5b04 	ldr.w	r5, [r1], #4
 8006608:	d402      	bmi.n	8006610 <_printf_i+0x188>
 800660a:	065f      	lsls	r7, r3, #25
 800660c:	bf48      	it	mi
 800660e:	b2ad      	uxthmi	r5, r5
 8006610:	6031      	str	r1, [r6, #0]
 8006612:	07d9      	lsls	r1, r3, #31
 8006614:	bf44      	itt	mi
 8006616:	f043 0320 	orrmi.w	r3, r3, #32
 800661a:	6023      	strmi	r3, [r4, #0]
 800661c:	b11d      	cbz	r5, 8006626 <_printf_i+0x19e>
 800661e:	2310      	movs	r3, #16
 8006620:	e7ac      	b.n	800657c <_printf_i+0xf4>
 8006622:	4827      	ldr	r0, [pc, #156]	@ (80066c0 <_printf_i+0x238>)
 8006624:	e7e9      	b.n	80065fa <_printf_i+0x172>
 8006626:	6823      	ldr	r3, [r4, #0]
 8006628:	f023 0320 	bic.w	r3, r3, #32
 800662c:	6023      	str	r3, [r4, #0]
 800662e:	e7f6      	b.n	800661e <_printf_i+0x196>
 8006630:	4616      	mov	r6, r2
 8006632:	e7bd      	b.n	80065b0 <_printf_i+0x128>
 8006634:	6833      	ldr	r3, [r6, #0]
 8006636:	6825      	ldr	r5, [r4, #0]
 8006638:	6961      	ldr	r1, [r4, #20]
 800663a:	1d18      	adds	r0, r3, #4
 800663c:	6030      	str	r0, [r6, #0]
 800663e:	062e      	lsls	r6, r5, #24
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	d501      	bpl.n	8006648 <_printf_i+0x1c0>
 8006644:	6019      	str	r1, [r3, #0]
 8006646:	e002      	b.n	800664e <_printf_i+0x1c6>
 8006648:	0668      	lsls	r0, r5, #25
 800664a:	d5fb      	bpl.n	8006644 <_printf_i+0x1bc>
 800664c:	8019      	strh	r1, [r3, #0]
 800664e:	2300      	movs	r3, #0
 8006650:	6123      	str	r3, [r4, #16]
 8006652:	4616      	mov	r6, r2
 8006654:	e7bc      	b.n	80065d0 <_printf_i+0x148>
 8006656:	6833      	ldr	r3, [r6, #0]
 8006658:	1d1a      	adds	r2, r3, #4
 800665a:	6032      	str	r2, [r6, #0]
 800665c:	681e      	ldr	r6, [r3, #0]
 800665e:	6862      	ldr	r2, [r4, #4]
 8006660:	2100      	movs	r1, #0
 8006662:	4630      	mov	r0, r6
 8006664:	f7f9 fdbc 	bl	80001e0 <memchr>
 8006668:	b108      	cbz	r0, 800666e <_printf_i+0x1e6>
 800666a:	1b80      	subs	r0, r0, r6
 800666c:	6060      	str	r0, [r4, #4]
 800666e:	6863      	ldr	r3, [r4, #4]
 8006670:	6123      	str	r3, [r4, #16]
 8006672:	2300      	movs	r3, #0
 8006674:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006678:	e7aa      	b.n	80065d0 <_printf_i+0x148>
 800667a:	6923      	ldr	r3, [r4, #16]
 800667c:	4632      	mov	r2, r6
 800667e:	4649      	mov	r1, r9
 8006680:	4640      	mov	r0, r8
 8006682:	47d0      	blx	sl
 8006684:	3001      	adds	r0, #1
 8006686:	d0ad      	beq.n	80065e4 <_printf_i+0x15c>
 8006688:	6823      	ldr	r3, [r4, #0]
 800668a:	079b      	lsls	r3, r3, #30
 800668c:	d413      	bmi.n	80066b6 <_printf_i+0x22e>
 800668e:	68e0      	ldr	r0, [r4, #12]
 8006690:	9b03      	ldr	r3, [sp, #12]
 8006692:	4298      	cmp	r0, r3
 8006694:	bfb8      	it	lt
 8006696:	4618      	movlt	r0, r3
 8006698:	e7a6      	b.n	80065e8 <_printf_i+0x160>
 800669a:	2301      	movs	r3, #1
 800669c:	4632      	mov	r2, r6
 800669e:	4649      	mov	r1, r9
 80066a0:	4640      	mov	r0, r8
 80066a2:	47d0      	blx	sl
 80066a4:	3001      	adds	r0, #1
 80066a6:	d09d      	beq.n	80065e4 <_printf_i+0x15c>
 80066a8:	3501      	adds	r5, #1
 80066aa:	68e3      	ldr	r3, [r4, #12]
 80066ac:	9903      	ldr	r1, [sp, #12]
 80066ae:	1a5b      	subs	r3, r3, r1
 80066b0:	42ab      	cmp	r3, r5
 80066b2:	dcf2      	bgt.n	800669a <_printf_i+0x212>
 80066b4:	e7eb      	b.n	800668e <_printf_i+0x206>
 80066b6:	2500      	movs	r5, #0
 80066b8:	f104 0619 	add.w	r6, r4, #25
 80066bc:	e7f5      	b.n	80066aa <_printf_i+0x222>
 80066be:	bf00      	nop
 80066c0:	080099be 	.word	0x080099be
 80066c4:	080099cf 	.word	0x080099cf

080066c8 <std>:
 80066c8:	2300      	movs	r3, #0
 80066ca:	b510      	push	{r4, lr}
 80066cc:	4604      	mov	r4, r0
 80066ce:	e9c0 3300 	strd	r3, r3, [r0]
 80066d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80066d6:	6083      	str	r3, [r0, #8]
 80066d8:	8181      	strh	r1, [r0, #12]
 80066da:	6643      	str	r3, [r0, #100]	@ 0x64
 80066dc:	81c2      	strh	r2, [r0, #14]
 80066de:	6183      	str	r3, [r0, #24]
 80066e0:	4619      	mov	r1, r3
 80066e2:	2208      	movs	r2, #8
 80066e4:	305c      	adds	r0, #92	@ 0x5c
 80066e6:	f000 f914 	bl	8006912 <memset>
 80066ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006720 <std+0x58>)
 80066ec:	6263      	str	r3, [r4, #36]	@ 0x24
 80066ee:	4b0d      	ldr	r3, [pc, #52]	@ (8006724 <std+0x5c>)
 80066f0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80066f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006728 <std+0x60>)
 80066f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80066f6:	4b0d      	ldr	r3, [pc, #52]	@ (800672c <std+0x64>)
 80066f8:	6323      	str	r3, [r4, #48]	@ 0x30
 80066fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006730 <std+0x68>)
 80066fc:	6224      	str	r4, [r4, #32]
 80066fe:	429c      	cmp	r4, r3
 8006700:	d006      	beq.n	8006710 <std+0x48>
 8006702:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006706:	4294      	cmp	r4, r2
 8006708:	d002      	beq.n	8006710 <std+0x48>
 800670a:	33d0      	adds	r3, #208	@ 0xd0
 800670c:	429c      	cmp	r4, r3
 800670e:	d105      	bne.n	800671c <std+0x54>
 8006710:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006718:	f000 b978 	b.w	8006a0c <__retarget_lock_init_recursive>
 800671c:	bd10      	pop	{r4, pc}
 800671e:	bf00      	nop
 8006720:	0800688d 	.word	0x0800688d
 8006724:	080068af 	.word	0x080068af
 8006728:	080068e7 	.word	0x080068e7
 800672c:	0800690b 	.word	0x0800690b
 8006730:	20000504 	.word	0x20000504

08006734 <stdio_exit_handler>:
 8006734:	4a02      	ldr	r2, [pc, #8]	@ (8006740 <stdio_exit_handler+0xc>)
 8006736:	4903      	ldr	r1, [pc, #12]	@ (8006744 <stdio_exit_handler+0x10>)
 8006738:	4803      	ldr	r0, [pc, #12]	@ (8006748 <stdio_exit_handler+0x14>)
 800673a:	f000 b869 	b.w	8006810 <_fwalk_sglue>
 800673e:	bf00      	nop
 8006740:	20000030 	.word	0x20000030
 8006744:	0800836d 	.word	0x0800836d
 8006748:	20000040 	.word	0x20000040

0800674c <cleanup_stdio>:
 800674c:	6841      	ldr	r1, [r0, #4]
 800674e:	4b0c      	ldr	r3, [pc, #48]	@ (8006780 <cleanup_stdio+0x34>)
 8006750:	4299      	cmp	r1, r3
 8006752:	b510      	push	{r4, lr}
 8006754:	4604      	mov	r4, r0
 8006756:	d001      	beq.n	800675c <cleanup_stdio+0x10>
 8006758:	f001 fe08 	bl	800836c <_fflush_r>
 800675c:	68a1      	ldr	r1, [r4, #8]
 800675e:	4b09      	ldr	r3, [pc, #36]	@ (8006784 <cleanup_stdio+0x38>)
 8006760:	4299      	cmp	r1, r3
 8006762:	d002      	beq.n	800676a <cleanup_stdio+0x1e>
 8006764:	4620      	mov	r0, r4
 8006766:	f001 fe01 	bl	800836c <_fflush_r>
 800676a:	68e1      	ldr	r1, [r4, #12]
 800676c:	4b06      	ldr	r3, [pc, #24]	@ (8006788 <cleanup_stdio+0x3c>)
 800676e:	4299      	cmp	r1, r3
 8006770:	d004      	beq.n	800677c <cleanup_stdio+0x30>
 8006772:	4620      	mov	r0, r4
 8006774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006778:	f001 bdf8 	b.w	800836c <_fflush_r>
 800677c:	bd10      	pop	{r4, pc}
 800677e:	bf00      	nop
 8006780:	20000504 	.word	0x20000504
 8006784:	2000056c 	.word	0x2000056c
 8006788:	200005d4 	.word	0x200005d4

0800678c <global_stdio_init.part.0>:
 800678c:	b510      	push	{r4, lr}
 800678e:	4b0b      	ldr	r3, [pc, #44]	@ (80067bc <global_stdio_init.part.0+0x30>)
 8006790:	4c0b      	ldr	r4, [pc, #44]	@ (80067c0 <global_stdio_init.part.0+0x34>)
 8006792:	4a0c      	ldr	r2, [pc, #48]	@ (80067c4 <global_stdio_init.part.0+0x38>)
 8006794:	601a      	str	r2, [r3, #0]
 8006796:	4620      	mov	r0, r4
 8006798:	2200      	movs	r2, #0
 800679a:	2104      	movs	r1, #4
 800679c:	f7ff ff94 	bl	80066c8 <std>
 80067a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80067a4:	2201      	movs	r2, #1
 80067a6:	2109      	movs	r1, #9
 80067a8:	f7ff ff8e 	bl	80066c8 <std>
 80067ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80067b0:	2202      	movs	r2, #2
 80067b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067b6:	2112      	movs	r1, #18
 80067b8:	f7ff bf86 	b.w	80066c8 <std>
 80067bc:	2000063c 	.word	0x2000063c
 80067c0:	20000504 	.word	0x20000504
 80067c4:	08006735 	.word	0x08006735

080067c8 <__sfp_lock_acquire>:
 80067c8:	4801      	ldr	r0, [pc, #4]	@ (80067d0 <__sfp_lock_acquire+0x8>)
 80067ca:	f000 b920 	b.w	8006a0e <__retarget_lock_acquire_recursive>
 80067ce:	bf00      	nop
 80067d0:	20000645 	.word	0x20000645

080067d4 <__sfp_lock_release>:
 80067d4:	4801      	ldr	r0, [pc, #4]	@ (80067dc <__sfp_lock_release+0x8>)
 80067d6:	f000 b91b 	b.w	8006a10 <__retarget_lock_release_recursive>
 80067da:	bf00      	nop
 80067dc:	20000645 	.word	0x20000645

080067e0 <__sinit>:
 80067e0:	b510      	push	{r4, lr}
 80067e2:	4604      	mov	r4, r0
 80067e4:	f7ff fff0 	bl	80067c8 <__sfp_lock_acquire>
 80067e8:	6a23      	ldr	r3, [r4, #32]
 80067ea:	b11b      	cbz	r3, 80067f4 <__sinit+0x14>
 80067ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067f0:	f7ff bff0 	b.w	80067d4 <__sfp_lock_release>
 80067f4:	4b04      	ldr	r3, [pc, #16]	@ (8006808 <__sinit+0x28>)
 80067f6:	6223      	str	r3, [r4, #32]
 80067f8:	4b04      	ldr	r3, [pc, #16]	@ (800680c <__sinit+0x2c>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d1f5      	bne.n	80067ec <__sinit+0xc>
 8006800:	f7ff ffc4 	bl	800678c <global_stdio_init.part.0>
 8006804:	e7f2      	b.n	80067ec <__sinit+0xc>
 8006806:	bf00      	nop
 8006808:	0800674d 	.word	0x0800674d
 800680c:	2000063c 	.word	0x2000063c

08006810 <_fwalk_sglue>:
 8006810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006814:	4607      	mov	r7, r0
 8006816:	4688      	mov	r8, r1
 8006818:	4614      	mov	r4, r2
 800681a:	2600      	movs	r6, #0
 800681c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006820:	f1b9 0901 	subs.w	r9, r9, #1
 8006824:	d505      	bpl.n	8006832 <_fwalk_sglue+0x22>
 8006826:	6824      	ldr	r4, [r4, #0]
 8006828:	2c00      	cmp	r4, #0
 800682a:	d1f7      	bne.n	800681c <_fwalk_sglue+0xc>
 800682c:	4630      	mov	r0, r6
 800682e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006832:	89ab      	ldrh	r3, [r5, #12]
 8006834:	2b01      	cmp	r3, #1
 8006836:	d907      	bls.n	8006848 <_fwalk_sglue+0x38>
 8006838:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800683c:	3301      	adds	r3, #1
 800683e:	d003      	beq.n	8006848 <_fwalk_sglue+0x38>
 8006840:	4629      	mov	r1, r5
 8006842:	4638      	mov	r0, r7
 8006844:	47c0      	blx	r8
 8006846:	4306      	orrs	r6, r0
 8006848:	3568      	adds	r5, #104	@ 0x68
 800684a:	e7e9      	b.n	8006820 <_fwalk_sglue+0x10>

0800684c <siprintf>:
 800684c:	b40e      	push	{r1, r2, r3}
 800684e:	b500      	push	{lr}
 8006850:	b09c      	sub	sp, #112	@ 0x70
 8006852:	ab1d      	add	r3, sp, #116	@ 0x74
 8006854:	9002      	str	r0, [sp, #8]
 8006856:	9006      	str	r0, [sp, #24]
 8006858:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800685c:	4809      	ldr	r0, [pc, #36]	@ (8006884 <siprintf+0x38>)
 800685e:	9107      	str	r1, [sp, #28]
 8006860:	9104      	str	r1, [sp, #16]
 8006862:	4909      	ldr	r1, [pc, #36]	@ (8006888 <siprintf+0x3c>)
 8006864:	f853 2b04 	ldr.w	r2, [r3], #4
 8006868:	9105      	str	r1, [sp, #20]
 800686a:	6800      	ldr	r0, [r0, #0]
 800686c:	9301      	str	r3, [sp, #4]
 800686e:	a902      	add	r1, sp, #8
 8006870:	f001 fbfc 	bl	800806c <_svfiprintf_r>
 8006874:	9b02      	ldr	r3, [sp, #8]
 8006876:	2200      	movs	r2, #0
 8006878:	701a      	strb	r2, [r3, #0]
 800687a:	b01c      	add	sp, #112	@ 0x70
 800687c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006880:	b003      	add	sp, #12
 8006882:	4770      	bx	lr
 8006884:	2000003c 	.word	0x2000003c
 8006888:	ffff0208 	.word	0xffff0208

0800688c <__sread>:
 800688c:	b510      	push	{r4, lr}
 800688e:	460c      	mov	r4, r1
 8006890:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006894:	f000 f86c 	bl	8006970 <_read_r>
 8006898:	2800      	cmp	r0, #0
 800689a:	bfab      	itete	ge
 800689c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800689e:	89a3      	ldrhlt	r3, [r4, #12]
 80068a0:	181b      	addge	r3, r3, r0
 80068a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80068a6:	bfac      	ite	ge
 80068a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80068aa:	81a3      	strhlt	r3, [r4, #12]
 80068ac:	bd10      	pop	{r4, pc}

080068ae <__swrite>:
 80068ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068b2:	461f      	mov	r7, r3
 80068b4:	898b      	ldrh	r3, [r1, #12]
 80068b6:	05db      	lsls	r3, r3, #23
 80068b8:	4605      	mov	r5, r0
 80068ba:	460c      	mov	r4, r1
 80068bc:	4616      	mov	r6, r2
 80068be:	d505      	bpl.n	80068cc <__swrite+0x1e>
 80068c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068c4:	2302      	movs	r3, #2
 80068c6:	2200      	movs	r2, #0
 80068c8:	f000 f840 	bl	800694c <_lseek_r>
 80068cc:	89a3      	ldrh	r3, [r4, #12]
 80068ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80068d6:	81a3      	strh	r3, [r4, #12]
 80068d8:	4632      	mov	r2, r6
 80068da:	463b      	mov	r3, r7
 80068dc:	4628      	mov	r0, r5
 80068de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068e2:	f000 b857 	b.w	8006994 <_write_r>

080068e6 <__sseek>:
 80068e6:	b510      	push	{r4, lr}
 80068e8:	460c      	mov	r4, r1
 80068ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068ee:	f000 f82d 	bl	800694c <_lseek_r>
 80068f2:	1c43      	adds	r3, r0, #1
 80068f4:	89a3      	ldrh	r3, [r4, #12]
 80068f6:	bf15      	itete	ne
 80068f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80068fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80068fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006902:	81a3      	strheq	r3, [r4, #12]
 8006904:	bf18      	it	ne
 8006906:	81a3      	strhne	r3, [r4, #12]
 8006908:	bd10      	pop	{r4, pc}

0800690a <__sclose>:
 800690a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800690e:	f000 b80d 	b.w	800692c <_close_r>

08006912 <memset>:
 8006912:	4402      	add	r2, r0
 8006914:	4603      	mov	r3, r0
 8006916:	4293      	cmp	r3, r2
 8006918:	d100      	bne.n	800691c <memset+0xa>
 800691a:	4770      	bx	lr
 800691c:	f803 1b01 	strb.w	r1, [r3], #1
 8006920:	e7f9      	b.n	8006916 <memset+0x4>
	...

08006924 <_localeconv_r>:
 8006924:	4800      	ldr	r0, [pc, #0]	@ (8006928 <_localeconv_r+0x4>)
 8006926:	4770      	bx	lr
 8006928:	2000017c 	.word	0x2000017c

0800692c <_close_r>:
 800692c:	b538      	push	{r3, r4, r5, lr}
 800692e:	4d06      	ldr	r5, [pc, #24]	@ (8006948 <_close_r+0x1c>)
 8006930:	2300      	movs	r3, #0
 8006932:	4604      	mov	r4, r0
 8006934:	4608      	mov	r0, r1
 8006936:	602b      	str	r3, [r5, #0]
 8006938:	f7fb fa6c 	bl	8001e14 <_close>
 800693c:	1c43      	adds	r3, r0, #1
 800693e:	d102      	bne.n	8006946 <_close_r+0x1a>
 8006940:	682b      	ldr	r3, [r5, #0]
 8006942:	b103      	cbz	r3, 8006946 <_close_r+0x1a>
 8006944:	6023      	str	r3, [r4, #0]
 8006946:	bd38      	pop	{r3, r4, r5, pc}
 8006948:	20000640 	.word	0x20000640

0800694c <_lseek_r>:
 800694c:	b538      	push	{r3, r4, r5, lr}
 800694e:	4d07      	ldr	r5, [pc, #28]	@ (800696c <_lseek_r+0x20>)
 8006950:	4604      	mov	r4, r0
 8006952:	4608      	mov	r0, r1
 8006954:	4611      	mov	r1, r2
 8006956:	2200      	movs	r2, #0
 8006958:	602a      	str	r2, [r5, #0]
 800695a:	461a      	mov	r2, r3
 800695c:	f7fb fa81 	bl	8001e62 <_lseek>
 8006960:	1c43      	adds	r3, r0, #1
 8006962:	d102      	bne.n	800696a <_lseek_r+0x1e>
 8006964:	682b      	ldr	r3, [r5, #0]
 8006966:	b103      	cbz	r3, 800696a <_lseek_r+0x1e>
 8006968:	6023      	str	r3, [r4, #0]
 800696a:	bd38      	pop	{r3, r4, r5, pc}
 800696c:	20000640 	.word	0x20000640

08006970 <_read_r>:
 8006970:	b538      	push	{r3, r4, r5, lr}
 8006972:	4d07      	ldr	r5, [pc, #28]	@ (8006990 <_read_r+0x20>)
 8006974:	4604      	mov	r4, r0
 8006976:	4608      	mov	r0, r1
 8006978:	4611      	mov	r1, r2
 800697a:	2200      	movs	r2, #0
 800697c:	602a      	str	r2, [r5, #0]
 800697e:	461a      	mov	r2, r3
 8006980:	f7fb fa0f 	bl	8001da2 <_read>
 8006984:	1c43      	adds	r3, r0, #1
 8006986:	d102      	bne.n	800698e <_read_r+0x1e>
 8006988:	682b      	ldr	r3, [r5, #0]
 800698a:	b103      	cbz	r3, 800698e <_read_r+0x1e>
 800698c:	6023      	str	r3, [r4, #0]
 800698e:	bd38      	pop	{r3, r4, r5, pc}
 8006990:	20000640 	.word	0x20000640

08006994 <_write_r>:
 8006994:	b538      	push	{r3, r4, r5, lr}
 8006996:	4d07      	ldr	r5, [pc, #28]	@ (80069b4 <_write_r+0x20>)
 8006998:	4604      	mov	r4, r0
 800699a:	4608      	mov	r0, r1
 800699c:	4611      	mov	r1, r2
 800699e:	2200      	movs	r2, #0
 80069a0:	602a      	str	r2, [r5, #0]
 80069a2:	461a      	mov	r2, r3
 80069a4:	f7fb fa1a 	bl	8001ddc <_write>
 80069a8:	1c43      	adds	r3, r0, #1
 80069aa:	d102      	bne.n	80069b2 <_write_r+0x1e>
 80069ac:	682b      	ldr	r3, [r5, #0]
 80069ae:	b103      	cbz	r3, 80069b2 <_write_r+0x1e>
 80069b0:	6023      	str	r3, [r4, #0]
 80069b2:	bd38      	pop	{r3, r4, r5, pc}
 80069b4:	20000640 	.word	0x20000640

080069b8 <__errno>:
 80069b8:	4b01      	ldr	r3, [pc, #4]	@ (80069c0 <__errno+0x8>)
 80069ba:	6818      	ldr	r0, [r3, #0]
 80069bc:	4770      	bx	lr
 80069be:	bf00      	nop
 80069c0:	2000003c 	.word	0x2000003c

080069c4 <__libc_init_array>:
 80069c4:	b570      	push	{r4, r5, r6, lr}
 80069c6:	4d0d      	ldr	r5, [pc, #52]	@ (80069fc <__libc_init_array+0x38>)
 80069c8:	4c0d      	ldr	r4, [pc, #52]	@ (8006a00 <__libc_init_array+0x3c>)
 80069ca:	1b64      	subs	r4, r4, r5
 80069cc:	10a4      	asrs	r4, r4, #2
 80069ce:	2600      	movs	r6, #0
 80069d0:	42a6      	cmp	r6, r4
 80069d2:	d109      	bne.n	80069e8 <__libc_init_array+0x24>
 80069d4:	4d0b      	ldr	r5, [pc, #44]	@ (8006a04 <__libc_init_array+0x40>)
 80069d6:	4c0c      	ldr	r4, [pc, #48]	@ (8006a08 <__libc_init_array+0x44>)
 80069d8:	f002 ffc4 	bl	8009964 <_init>
 80069dc:	1b64      	subs	r4, r4, r5
 80069de:	10a4      	asrs	r4, r4, #2
 80069e0:	2600      	movs	r6, #0
 80069e2:	42a6      	cmp	r6, r4
 80069e4:	d105      	bne.n	80069f2 <__libc_init_array+0x2e>
 80069e6:	bd70      	pop	{r4, r5, r6, pc}
 80069e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80069ec:	4798      	blx	r3
 80069ee:	3601      	adds	r6, #1
 80069f0:	e7ee      	b.n	80069d0 <__libc_init_array+0xc>
 80069f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80069f6:	4798      	blx	r3
 80069f8:	3601      	adds	r6, #1
 80069fa:	e7f2      	b.n	80069e2 <__libc_init_array+0x1e>
 80069fc:	08009d58 	.word	0x08009d58
 8006a00:	08009d58 	.word	0x08009d58
 8006a04:	08009d58 	.word	0x08009d58
 8006a08:	08009d5c 	.word	0x08009d5c

08006a0c <__retarget_lock_init_recursive>:
 8006a0c:	4770      	bx	lr

08006a0e <__retarget_lock_acquire_recursive>:
 8006a0e:	4770      	bx	lr

08006a10 <__retarget_lock_release_recursive>:
 8006a10:	4770      	bx	lr

08006a12 <quorem>:
 8006a12:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a16:	6903      	ldr	r3, [r0, #16]
 8006a18:	690c      	ldr	r4, [r1, #16]
 8006a1a:	42a3      	cmp	r3, r4
 8006a1c:	4607      	mov	r7, r0
 8006a1e:	db7e      	blt.n	8006b1e <quorem+0x10c>
 8006a20:	3c01      	subs	r4, #1
 8006a22:	f101 0814 	add.w	r8, r1, #20
 8006a26:	00a3      	lsls	r3, r4, #2
 8006a28:	f100 0514 	add.w	r5, r0, #20
 8006a2c:	9300      	str	r3, [sp, #0]
 8006a2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a32:	9301      	str	r3, [sp, #4]
 8006a34:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006a38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006a44:	fbb2 f6f3 	udiv	r6, r2, r3
 8006a48:	d32e      	bcc.n	8006aa8 <quorem+0x96>
 8006a4a:	f04f 0a00 	mov.w	sl, #0
 8006a4e:	46c4      	mov	ip, r8
 8006a50:	46ae      	mov	lr, r5
 8006a52:	46d3      	mov	fp, sl
 8006a54:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006a58:	b298      	uxth	r0, r3
 8006a5a:	fb06 a000 	mla	r0, r6, r0, sl
 8006a5e:	0c02      	lsrs	r2, r0, #16
 8006a60:	0c1b      	lsrs	r3, r3, #16
 8006a62:	fb06 2303 	mla	r3, r6, r3, r2
 8006a66:	f8de 2000 	ldr.w	r2, [lr]
 8006a6a:	b280      	uxth	r0, r0
 8006a6c:	b292      	uxth	r2, r2
 8006a6e:	1a12      	subs	r2, r2, r0
 8006a70:	445a      	add	r2, fp
 8006a72:	f8de 0000 	ldr.w	r0, [lr]
 8006a76:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006a80:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006a84:	b292      	uxth	r2, r2
 8006a86:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006a8a:	45e1      	cmp	r9, ip
 8006a8c:	f84e 2b04 	str.w	r2, [lr], #4
 8006a90:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006a94:	d2de      	bcs.n	8006a54 <quorem+0x42>
 8006a96:	9b00      	ldr	r3, [sp, #0]
 8006a98:	58eb      	ldr	r3, [r5, r3]
 8006a9a:	b92b      	cbnz	r3, 8006aa8 <quorem+0x96>
 8006a9c:	9b01      	ldr	r3, [sp, #4]
 8006a9e:	3b04      	subs	r3, #4
 8006aa0:	429d      	cmp	r5, r3
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	d32f      	bcc.n	8006b06 <quorem+0xf4>
 8006aa6:	613c      	str	r4, [r7, #16]
 8006aa8:	4638      	mov	r0, r7
 8006aaa:	f001 f97b 	bl	8007da4 <__mcmp>
 8006aae:	2800      	cmp	r0, #0
 8006ab0:	db25      	blt.n	8006afe <quorem+0xec>
 8006ab2:	4629      	mov	r1, r5
 8006ab4:	2000      	movs	r0, #0
 8006ab6:	f858 2b04 	ldr.w	r2, [r8], #4
 8006aba:	f8d1 c000 	ldr.w	ip, [r1]
 8006abe:	fa1f fe82 	uxth.w	lr, r2
 8006ac2:	fa1f f38c 	uxth.w	r3, ip
 8006ac6:	eba3 030e 	sub.w	r3, r3, lr
 8006aca:	4403      	add	r3, r0
 8006acc:	0c12      	lsrs	r2, r2, #16
 8006ace:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006ad2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006adc:	45c1      	cmp	r9, r8
 8006ade:	f841 3b04 	str.w	r3, [r1], #4
 8006ae2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006ae6:	d2e6      	bcs.n	8006ab6 <quorem+0xa4>
 8006ae8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006aec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006af0:	b922      	cbnz	r2, 8006afc <quorem+0xea>
 8006af2:	3b04      	subs	r3, #4
 8006af4:	429d      	cmp	r5, r3
 8006af6:	461a      	mov	r2, r3
 8006af8:	d30b      	bcc.n	8006b12 <quorem+0x100>
 8006afa:	613c      	str	r4, [r7, #16]
 8006afc:	3601      	adds	r6, #1
 8006afe:	4630      	mov	r0, r6
 8006b00:	b003      	add	sp, #12
 8006b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b06:	6812      	ldr	r2, [r2, #0]
 8006b08:	3b04      	subs	r3, #4
 8006b0a:	2a00      	cmp	r2, #0
 8006b0c:	d1cb      	bne.n	8006aa6 <quorem+0x94>
 8006b0e:	3c01      	subs	r4, #1
 8006b10:	e7c6      	b.n	8006aa0 <quorem+0x8e>
 8006b12:	6812      	ldr	r2, [r2, #0]
 8006b14:	3b04      	subs	r3, #4
 8006b16:	2a00      	cmp	r2, #0
 8006b18:	d1ef      	bne.n	8006afa <quorem+0xe8>
 8006b1a:	3c01      	subs	r4, #1
 8006b1c:	e7ea      	b.n	8006af4 <quorem+0xe2>
 8006b1e:	2000      	movs	r0, #0
 8006b20:	e7ee      	b.n	8006b00 <quorem+0xee>
 8006b22:	0000      	movs	r0, r0
 8006b24:	0000      	movs	r0, r0
	...

08006b28 <_dtoa_r>:
 8006b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b2c:	69c7      	ldr	r7, [r0, #28]
 8006b2e:	b099      	sub	sp, #100	@ 0x64
 8006b30:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006b34:	ec55 4b10 	vmov	r4, r5, d0
 8006b38:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006b3a:	9109      	str	r1, [sp, #36]	@ 0x24
 8006b3c:	4683      	mov	fp, r0
 8006b3e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006b40:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006b42:	b97f      	cbnz	r7, 8006b64 <_dtoa_r+0x3c>
 8006b44:	2010      	movs	r0, #16
 8006b46:	f000 fdfd 	bl	8007744 <malloc>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	f8cb 001c 	str.w	r0, [fp, #28]
 8006b50:	b920      	cbnz	r0, 8006b5c <_dtoa_r+0x34>
 8006b52:	4ba7      	ldr	r3, [pc, #668]	@ (8006df0 <_dtoa_r+0x2c8>)
 8006b54:	21ef      	movs	r1, #239	@ 0xef
 8006b56:	48a7      	ldr	r0, [pc, #668]	@ (8006df4 <_dtoa_r+0x2cc>)
 8006b58:	f001 fc68 	bl	800842c <__assert_func>
 8006b5c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006b60:	6007      	str	r7, [r0, #0]
 8006b62:	60c7      	str	r7, [r0, #12]
 8006b64:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006b68:	6819      	ldr	r1, [r3, #0]
 8006b6a:	b159      	cbz	r1, 8006b84 <_dtoa_r+0x5c>
 8006b6c:	685a      	ldr	r2, [r3, #4]
 8006b6e:	604a      	str	r2, [r1, #4]
 8006b70:	2301      	movs	r3, #1
 8006b72:	4093      	lsls	r3, r2
 8006b74:	608b      	str	r3, [r1, #8]
 8006b76:	4658      	mov	r0, fp
 8006b78:	f000 feda 	bl	8007930 <_Bfree>
 8006b7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006b80:	2200      	movs	r2, #0
 8006b82:	601a      	str	r2, [r3, #0]
 8006b84:	1e2b      	subs	r3, r5, #0
 8006b86:	bfb9      	ittee	lt
 8006b88:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006b8c:	9303      	strlt	r3, [sp, #12]
 8006b8e:	2300      	movge	r3, #0
 8006b90:	6033      	strge	r3, [r6, #0]
 8006b92:	9f03      	ldr	r7, [sp, #12]
 8006b94:	4b98      	ldr	r3, [pc, #608]	@ (8006df8 <_dtoa_r+0x2d0>)
 8006b96:	bfbc      	itt	lt
 8006b98:	2201      	movlt	r2, #1
 8006b9a:	6032      	strlt	r2, [r6, #0]
 8006b9c:	43bb      	bics	r3, r7
 8006b9e:	d112      	bne.n	8006bc6 <_dtoa_r+0x9e>
 8006ba0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006ba2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006ba6:	6013      	str	r3, [r2, #0]
 8006ba8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006bac:	4323      	orrs	r3, r4
 8006bae:	f000 854d 	beq.w	800764c <_dtoa_r+0xb24>
 8006bb2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006bb4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006e0c <_dtoa_r+0x2e4>
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	f000 854f 	beq.w	800765c <_dtoa_r+0xb34>
 8006bbe:	f10a 0303 	add.w	r3, sl, #3
 8006bc2:	f000 bd49 	b.w	8007658 <_dtoa_r+0xb30>
 8006bc6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	ec51 0b17 	vmov	r0, r1, d7
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006bd6:	f7f9 ff7f 	bl	8000ad8 <__aeabi_dcmpeq>
 8006bda:	4680      	mov	r8, r0
 8006bdc:	b158      	cbz	r0, 8006bf6 <_dtoa_r+0xce>
 8006bde:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006be0:	2301      	movs	r3, #1
 8006be2:	6013      	str	r3, [r2, #0]
 8006be4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006be6:	b113      	cbz	r3, 8006bee <_dtoa_r+0xc6>
 8006be8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006bea:	4b84      	ldr	r3, [pc, #528]	@ (8006dfc <_dtoa_r+0x2d4>)
 8006bec:	6013      	str	r3, [r2, #0]
 8006bee:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006e10 <_dtoa_r+0x2e8>
 8006bf2:	f000 bd33 	b.w	800765c <_dtoa_r+0xb34>
 8006bf6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006bfa:	aa16      	add	r2, sp, #88	@ 0x58
 8006bfc:	a917      	add	r1, sp, #92	@ 0x5c
 8006bfe:	4658      	mov	r0, fp
 8006c00:	f001 f980 	bl	8007f04 <__d2b>
 8006c04:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006c08:	4681      	mov	r9, r0
 8006c0a:	2e00      	cmp	r6, #0
 8006c0c:	d077      	beq.n	8006cfe <_dtoa_r+0x1d6>
 8006c0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006c10:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006c14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c1c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006c20:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006c24:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006c28:	4619      	mov	r1, r3
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	4b74      	ldr	r3, [pc, #464]	@ (8006e00 <_dtoa_r+0x2d8>)
 8006c2e:	f7f9 fb33 	bl	8000298 <__aeabi_dsub>
 8006c32:	a369      	add	r3, pc, #420	@ (adr r3, 8006dd8 <_dtoa_r+0x2b0>)
 8006c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c38:	f7f9 fce6 	bl	8000608 <__aeabi_dmul>
 8006c3c:	a368      	add	r3, pc, #416	@ (adr r3, 8006de0 <_dtoa_r+0x2b8>)
 8006c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c42:	f7f9 fb2b 	bl	800029c <__adddf3>
 8006c46:	4604      	mov	r4, r0
 8006c48:	4630      	mov	r0, r6
 8006c4a:	460d      	mov	r5, r1
 8006c4c:	f7f9 fc72 	bl	8000534 <__aeabi_i2d>
 8006c50:	a365      	add	r3, pc, #404	@ (adr r3, 8006de8 <_dtoa_r+0x2c0>)
 8006c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c56:	f7f9 fcd7 	bl	8000608 <__aeabi_dmul>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	460b      	mov	r3, r1
 8006c5e:	4620      	mov	r0, r4
 8006c60:	4629      	mov	r1, r5
 8006c62:	f7f9 fb1b 	bl	800029c <__adddf3>
 8006c66:	4604      	mov	r4, r0
 8006c68:	460d      	mov	r5, r1
 8006c6a:	f7f9 ff7d 	bl	8000b68 <__aeabi_d2iz>
 8006c6e:	2200      	movs	r2, #0
 8006c70:	4607      	mov	r7, r0
 8006c72:	2300      	movs	r3, #0
 8006c74:	4620      	mov	r0, r4
 8006c76:	4629      	mov	r1, r5
 8006c78:	f7f9 ff38 	bl	8000aec <__aeabi_dcmplt>
 8006c7c:	b140      	cbz	r0, 8006c90 <_dtoa_r+0x168>
 8006c7e:	4638      	mov	r0, r7
 8006c80:	f7f9 fc58 	bl	8000534 <__aeabi_i2d>
 8006c84:	4622      	mov	r2, r4
 8006c86:	462b      	mov	r3, r5
 8006c88:	f7f9 ff26 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c8c:	b900      	cbnz	r0, 8006c90 <_dtoa_r+0x168>
 8006c8e:	3f01      	subs	r7, #1
 8006c90:	2f16      	cmp	r7, #22
 8006c92:	d851      	bhi.n	8006d38 <_dtoa_r+0x210>
 8006c94:	4b5b      	ldr	r3, [pc, #364]	@ (8006e04 <_dtoa_r+0x2dc>)
 8006c96:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006ca2:	f7f9 ff23 	bl	8000aec <__aeabi_dcmplt>
 8006ca6:	2800      	cmp	r0, #0
 8006ca8:	d048      	beq.n	8006d3c <_dtoa_r+0x214>
 8006caa:	3f01      	subs	r7, #1
 8006cac:	2300      	movs	r3, #0
 8006cae:	9312      	str	r3, [sp, #72]	@ 0x48
 8006cb0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006cb2:	1b9b      	subs	r3, r3, r6
 8006cb4:	1e5a      	subs	r2, r3, #1
 8006cb6:	bf44      	itt	mi
 8006cb8:	f1c3 0801 	rsbmi	r8, r3, #1
 8006cbc:	2300      	movmi	r3, #0
 8006cbe:	9208      	str	r2, [sp, #32]
 8006cc0:	bf54      	ite	pl
 8006cc2:	f04f 0800 	movpl.w	r8, #0
 8006cc6:	9308      	strmi	r3, [sp, #32]
 8006cc8:	2f00      	cmp	r7, #0
 8006cca:	db39      	blt.n	8006d40 <_dtoa_r+0x218>
 8006ccc:	9b08      	ldr	r3, [sp, #32]
 8006cce:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006cd0:	443b      	add	r3, r7
 8006cd2:	9308      	str	r3, [sp, #32]
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	930a      	str	r3, [sp, #40]	@ 0x28
 8006cd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cda:	2b09      	cmp	r3, #9
 8006cdc:	d864      	bhi.n	8006da8 <_dtoa_r+0x280>
 8006cde:	2b05      	cmp	r3, #5
 8006ce0:	bfc4      	itt	gt
 8006ce2:	3b04      	subgt	r3, #4
 8006ce4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006ce6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ce8:	f1a3 0302 	sub.w	r3, r3, #2
 8006cec:	bfcc      	ite	gt
 8006cee:	2400      	movgt	r4, #0
 8006cf0:	2401      	movle	r4, #1
 8006cf2:	2b03      	cmp	r3, #3
 8006cf4:	d863      	bhi.n	8006dbe <_dtoa_r+0x296>
 8006cf6:	e8df f003 	tbb	[pc, r3]
 8006cfa:	372a      	.short	0x372a
 8006cfc:	5535      	.short	0x5535
 8006cfe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006d02:	441e      	add	r6, r3
 8006d04:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006d08:	2b20      	cmp	r3, #32
 8006d0a:	bfc1      	itttt	gt
 8006d0c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006d10:	409f      	lslgt	r7, r3
 8006d12:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006d16:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006d1a:	bfd6      	itet	le
 8006d1c:	f1c3 0320 	rsble	r3, r3, #32
 8006d20:	ea47 0003 	orrgt.w	r0, r7, r3
 8006d24:	fa04 f003 	lslle.w	r0, r4, r3
 8006d28:	f7f9 fbf4 	bl	8000514 <__aeabi_ui2d>
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006d32:	3e01      	subs	r6, #1
 8006d34:	9214      	str	r2, [sp, #80]	@ 0x50
 8006d36:	e777      	b.n	8006c28 <_dtoa_r+0x100>
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e7b8      	b.n	8006cae <_dtoa_r+0x186>
 8006d3c:	9012      	str	r0, [sp, #72]	@ 0x48
 8006d3e:	e7b7      	b.n	8006cb0 <_dtoa_r+0x188>
 8006d40:	427b      	negs	r3, r7
 8006d42:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d44:	2300      	movs	r3, #0
 8006d46:	eba8 0807 	sub.w	r8, r8, r7
 8006d4a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006d4c:	e7c4      	b.n	8006cd8 <_dtoa_r+0x1b0>
 8006d4e:	2300      	movs	r3, #0
 8006d50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	dc35      	bgt.n	8006dc4 <_dtoa_r+0x29c>
 8006d58:	2301      	movs	r3, #1
 8006d5a:	9300      	str	r3, [sp, #0]
 8006d5c:	9307      	str	r3, [sp, #28]
 8006d5e:	461a      	mov	r2, r3
 8006d60:	920e      	str	r2, [sp, #56]	@ 0x38
 8006d62:	e00b      	b.n	8006d7c <_dtoa_r+0x254>
 8006d64:	2301      	movs	r3, #1
 8006d66:	e7f3      	b.n	8006d50 <_dtoa_r+0x228>
 8006d68:	2300      	movs	r3, #0
 8006d6a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d6e:	18fb      	adds	r3, r7, r3
 8006d70:	9300      	str	r3, [sp, #0]
 8006d72:	3301      	adds	r3, #1
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	9307      	str	r3, [sp, #28]
 8006d78:	bfb8      	it	lt
 8006d7a:	2301      	movlt	r3, #1
 8006d7c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006d80:	2100      	movs	r1, #0
 8006d82:	2204      	movs	r2, #4
 8006d84:	f102 0514 	add.w	r5, r2, #20
 8006d88:	429d      	cmp	r5, r3
 8006d8a:	d91f      	bls.n	8006dcc <_dtoa_r+0x2a4>
 8006d8c:	6041      	str	r1, [r0, #4]
 8006d8e:	4658      	mov	r0, fp
 8006d90:	f000 fd8e 	bl	80078b0 <_Balloc>
 8006d94:	4682      	mov	sl, r0
 8006d96:	2800      	cmp	r0, #0
 8006d98:	d13c      	bne.n	8006e14 <_dtoa_r+0x2ec>
 8006d9a:	4b1b      	ldr	r3, [pc, #108]	@ (8006e08 <_dtoa_r+0x2e0>)
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006da2:	e6d8      	b.n	8006b56 <_dtoa_r+0x2e>
 8006da4:	2301      	movs	r3, #1
 8006da6:	e7e0      	b.n	8006d6a <_dtoa_r+0x242>
 8006da8:	2401      	movs	r4, #1
 8006daa:	2300      	movs	r3, #0
 8006dac:	9309      	str	r3, [sp, #36]	@ 0x24
 8006dae:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006db0:	f04f 33ff 	mov.w	r3, #4294967295
 8006db4:	9300      	str	r3, [sp, #0]
 8006db6:	9307      	str	r3, [sp, #28]
 8006db8:	2200      	movs	r2, #0
 8006dba:	2312      	movs	r3, #18
 8006dbc:	e7d0      	b.n	8006d60 <_dtoa_r+0x238>
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006dc2:	e7f5      	b.n	8006db0 <_dtoa_r+0x288>
 8006dc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006dc6:	9300      	str	r3, [sp, #0]
 8006dc8:	9307      	str	r3, [sp, #28]
 8006dca:	e7d7      	b.n	8006d7c <_dtoa_r+0x254>
 8006dcc:	3101      	adds	r1, #1
 8006dce:	0052      	lsls	r2, r2, #1
 8006dd0:	e7d8      	b.n	8006d84 <_dtoa_r+0x25c>
 8006dd2:	bf00      	nop
 8006dd4:	f3af 8000 	nop.w
 8006dd8:	636f4361 	.word	0x636f4361
 8006ddc:	3fd287a7 	.word	0x3fd287a7
 8006de0:	8b60c8b3 	.word	0x8b60c8b3
 8006de4:	3fc68a28 	.word	0x3fc68a28
 8006de8:	509f79fb 	.word	0x509f79fb
 8006dec:	3fd34413 	.word	0x3fd34413
 8006df0:	080099ed 	.word	0x080099ed
 8006df4:	08009a04 	.word	0x08009a04
 8006df8:	7ff00000 	.word	0x7ff00000
 8006dfc:	080099bd 	.word	0x080099bd
 8006e00:	3ff80000 	.word	0x3ff80000
 8006e04:	08009b00 	.word	0x08009b00
 8006e08:	08009a5c 	.word	0x08009a5c
 8006e0c:	080099e9 	.word	0x080099e9
 8006e10:	080099bc 	.word	0x080099bc
 8006e14:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006e18:	6018      	str	r0, [r3, #0]
 8006e1a:	9b07      	ldr	r3, [sp, #28]
 8006e1c:	2b0e      	cmp	r3, #14
 8006e1e:	f200 80a4 	bhi.w	8006f6a <_dtoa_r+0x442>
 8006e22:	2c00      	cmp	r4, #0
 8006e24:	f000 80a1 	beq.w	8006f6a <_dtoa_r+0x442>
 8006e28:	2f00      	cmp	r7, #0
 8006e2a:	dd33      	ble.n	8006e94 <_dtoa_r+0x36c>
 8006e2c:	4bad      	ldr	r3, [pc, #692]	@ (80070e4 <_dtoa_r+0x5bc>)
 8006e2e:	f007 020f 	and.w	r2, r7, #15
 8006e32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e36:	ed93 7b00 	vldr	d7, [r3]
 8006e3a:	05f8      	lsls	r0, r7, #23
 8006e3c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006e40:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006e44:	d516      	bpl.n	8006e74 <_dtoa_r+0x34c>
 8006e46:	4ba8      	ldr	r3, [pc, #672]	@ (80070e8 <_dtoa_r+0x5c0>)
 8006e48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006e50:	f7f9 fd04 	bl	800085c <__aeabi_ddiv>
 8006e54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e58:	f004 040f 	and.w	r4, r4, #15
 8006e5c:	2603      	movs	r6, #3
 8006e5e:	4da2      	ldr	r5, [pc, #648]	@ (80070e8 <_dtoa_r+0x5c0>)
 8006e60:	b954      	cbnz	r4, 8006e78 <_dtoa_r+0x350>
 8006e62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e6a:	f7f9 fcf7 	bl	800085c <__aeabi_ddiv>
 8006e6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e72:	e028      	b.n	8006ec6 <_dtoa_r+0x39e>
 8006e74:	2602      	movs	r6, #2
 8006e76:	e7f2      	b.n	8006e5e <_dtoa_r+0x336>
 8006e78:	07e1      	lsls	r1, r4, #31
 8006e7a:	d508      	bpl.n	8006e8e <_dtoa_r+0x366>
 8006e7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e80:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006e84:	f7f9 fbc0 	bl	8000608 <__aeabi_dmul>
 8006e88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e8c:	3601      	adds	r6, #1
 8006e8e:	1064      	asrs	r4, r4, #1
 8006e90:	3508      	adds	r5, #8
 8006e92:	e7e5      	b.n	8006e60 <_dtoa_r+0x338>
 8006e94:	f000 80d2 	beq.w	800703c <_dtoa_r+0x514>
 8006e98:	427c      	negs	r4, r7
 8006e9a:	4b92      	ldr	r3, [pc, #584]	@ (80070e4 <_dtoa_r+0x5bc>)
 8006e9c:	4d92      	ldr	r5, [pc, #584]	@ (80070e8 <_dtoa_r+0x5c0>)
 8006e9e:	f004 020f 	and.w	r2, r4, #15
 8006ea2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eaa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006eae:	f7f9 fbab 	bl	8000608 <__aeabi_dmul>
 8006eb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006eb6:	1124      	asrs	r4, r4, #4
 8006eb8:	2300      	movs	r3, #0
 8006eba:	2602      	movs	r6, #2
 8006ebc:	2c00      	cmp	r4, #0
 8006ebe:	f040 80b2 	bne.w	8007026 <_dtoa_r+0x4fe>
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d1d3      	bne.n	8006e6e <_dtoa_r+0x346>
 8006ec6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006ec8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	f000 80b7 	beq.w	8007040 <_dtoa_r+0x518>
 8006ed2:	4b86      	ldr	r3, [pc, #536]	@ (80070ec <_dtoa_r+0x5c4>)
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	4620      	mov	r0, r4
 8006ed8:	4629      	mov	r1, r5
 8006eda:	f7f9 fe07 	bl	8000aec <__aeabi_dcmplt>
 8006ede:	2800      	cmp	r0, #0
 8006ee0:	f000 80ae 	beq.w	8007040 <_dtoa_r+0x518>
 8006ee4:	9b07      	ldr	r3, [sp, #28]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	f000 80aa 	beq.w	8007040 <_dtoa_r+0x518>
 8006eec:	9b00      	ldr	r3, [sp, #0]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	dd37      	ble.n	8006f62 <_dtoa_r+0x43a>
 8006ef2:	1e7b      	subs	r3, r7, #1
 8006ef4:	9304      	str	r3, [sp, #16]
 8006ef6:	4620      	mov	r0, r4
 8006ef8:	4b7d      	ldr	r3, [pc, #500]	@ (80070f0 <_dtoa_r+0x5c8>)
 8006efa:	2200      	movs	r2, #0
 8006efc:	4629      	mov	r1, r5
 8006efe:	f7f9 fb83 	bl	8000608 <__aeabi_dmul>
 8006f02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f06:	9c00      	ldr	r4, [sp, #0]
 8006f08:	3601      	adds	r6, #1
 8006f0a:	4630      	mov	r0, r6
 8006f0c:	f7f9 fb12 	bl	8000534 <__aeabi_i2d>
 8006f10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f14:	f7f9 fb78 	bl	8000608 <__aeabi_dmul>
 8006f18:	4b76      	ldr	r3, [pc, #472]	@ (80070f4 <_dtoa_r+0x5cc>)
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f7f9 f9be 	bl	800029c <__adddf3>
 8006f20:	4605      	mov	r5, r0
 8006f22:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006f26:	2c00      	cmp	r4, #0
 8006f28:	f040 808d 	bne.w	8007046 <_dtoa_r+0x51e>
 8006f2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f30:	4b71      	ldr	r3, [pc, #452]	@ (80070f8 <_dtoa_r+0x5d0>)
 8006f32:	2200      	movs	r2, #0
 8006f34:	f7f9 f9b0 	bl	8000298 <__aeabi_dsub>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	460b      	mov	r3, r1
 8006f3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006f40:	462a      	mov	r2, r5
 8006f42:	4633      	mov	r3, r6
 8006f44:	f7f9 fdf0 	bl	8000b28 <__aeabi_dcmpgt>
 8006f48:	2800      	cmp	r0, #0
 8006f4a:	f040 828b 	bne.w	8007464 <_dtoa_r+0x93c>
 8006f4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f52:	462a      	mov	r2, r5
 8006f54:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006f58:	f7f9 fdc8 	bl	8000aec <__aeabi_dcmplt>
 8006f5c:	2800      	cmp	r0, #0
 8006f5e:	f040 8128 	bne.w	80071b2 <_dtoa_r+0x68a>
 8006f62:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006f66:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006f6a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f2c0 815a 	blt.w	8007226 <_dtoa_r+0x6fe>
 8006f72:	2f0e      	cmp	r7, #14
 8006f74:	f300 8157 	bgt.w	8007226 <_dtoa_r+0x6fe>
 8006f78:	4b5a      	ldr	r3, [pc, #360]	@ (80070e4 <_dtoa_r+0x5bc>)
 8006f7a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006f7e:	ed93 7b00 	vldr	d7, [r3]
 8006f82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	ed8d 7b00 	vstr	d7, [sp]
 8006f8a:	da03      	bge.n	8006f94 <_dtoa_r+0x46c>
 8006f8c:	9b07      	ldr	r3, [sp, #28]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	f340 8101 	ble.w	8007196 <_dtoa_r+0x66e>
 8006f94:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006f98:	4656      	mov	r6, sl
 8006f9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f9e:	4620      	mov	r0, r4
 8006fa0:	4629      	mov	r1, r5
 8006fa2:	f7f9 fc5b 	bl	800085c <__aeabi_ddiv>
 8006fa6:	f7f9 fddf 	bl	8000b68 <__aeabi_d2iz>
 8006faa:	4680      	mov	r8, r0
 8006fac:	f7f9 fac2 	bl	8000534 <__aeabi_i2d>
 8006fb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006fb4:	f7f9 fb28 	bl	8000608 <__aeabi_dmul>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	460b      	mov	r3, r1
 8006fbc:	4620      	mov	r0, r4
 8006fbe:	4629      	mov	r1, r5
 8006fc0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006fc4:	f7f9 f968 	bl	8000298 <__aeabi_dsub>
 8006fc8:	f806 4b01 	strb.w	r4, [r6], #1
 8006fcc:	9d07      	ldr	r5, [sp, #28]
 8006fce:	eba6 040a 	sub.w	r4, r6, sl
 8006fd2:	42a5      	cmp	r5, r4
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	460b      	mov	r3, r1
 8006fd8:	f040 8117 	bne.w	800720a <_dtoa_r+0x6e2>
 8006fdc:	f7f9 f95e 	bl	800029c <__adddf3>
 8006fe0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006fe4:	4604      	mov	r4, r0
 8006fe6:	460d      	mov	r5, r1
 8006fe8:	f7f9 fd9e 	bl	8000b28 <__aeabi_dcmpgt>
 8006fec:	2800      	cmp	r0, #0
 8006fee:	f040 80f9 	bne.w	80071e4 <_dtoa_r+0x6bc>
 8006ff2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ff6:	4620      	mov	r0, r4
 8006ff8:	4629      	mov	r1, r5
 8006ffa:	f7f9 fd6d 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ffe:	b118      	cbz	r0, 8007008 <_dtoa_r+0x4e0>
 8007000:	f018 0f01 	tst.w	r8, #1
 8007004:	f040 80ee 	bne.w	80071e4 <_dtoa_r+0x6bc>
 8007008:	4649      	mov	r1, r9
 800700a:	4658      	mov	r0, fp
 800700c:	f000 fc90 	bl	8007930 <_Bfree>
 8007010:	2300      	movs	r3, #0
 8007012:	7033      	strb	r3, [r6, #0]
 8007014:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007016:	3701      	adds	r7, #1
 8007018:	601f      	str	r7, [r3, #0]
 800701a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800701c:	2b00      	cmp	r3, #0
 800701e:	f000 831d 	beq.w	800765c <_dtoa_r+0xb34>
 8007022:	601e      	str	r6, [r3, #0]
 8007024:	e31a      	b.n	800765c <_dtoa_r+0xb34>
 8007026:	07e2      	lsls	r2, r4, #31
 8007028:	d505      	bpl.n	8007036 <_dtoa_r+0x50e>
 800702a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800702e:	f7f9 faeb 	bl	8000608 <__aeabi_dmul>
 8007032:	3601      	adds	r6, #1
 8007034:	2301      	movs	r3, #1
 8007036:	1064      	asrs	r4, r4, #1
 8007038:	3508      	adds	r5, #8
 800703a:	e73f      	b.n	8006ebc <_dtoa_r+0x394>
 800703c:	2602      	movs	r6, #2
 800703e:	e742      	b.n	8006ec6 <_dtoa_r+0x39e>
 8007040:	9c07      	ldr	r4, [sp, #28]
 8007042:	9704      	str	r7, [sp, #16]
 8007044:	e761      	b.n	8006f0a <_dtoa_r+0x3e2>
 8007046:	4b27      	ldr	r3, [pc, #156]	@ (80070e4 <_dtoa_r+0x5bc>)
 8007048:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800704a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800704e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007052:	4454      	add	r4, sl
 8007054:	2900      	cmp	r1, #0
 8007056:	d053      	beq.n	8007100 <_dtoa_r+0x5d8>
 8007058:	4928      	ldr	r1, [pc, #160]	@ (80070fc <_dtoa_r+0x5d4>)
 800705a:	2000      	movs	r0, #0
 800705c:	f7f9 fbfe 	bl	800085c <__aeabi_ddiv>
 8007060:	4633      	mov	r3, r6
 8007062:	462a      	mov	r2, r5
 8007064:	f7f9 f918 	bl	8000298 <__aeabi_dsub>
 8007068:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800706c:	4656      	mov	r6, sl
 800706e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007072:	f7f9 fd79 	bl	8000b68 <__aeabi_d2iz>
 8007076:	4605      	mov	r5, r0
 8007078:	f7f9 fa5c 	bl	8000534 <__aeabi_i2d>
 800707c:	4602      	mov	r2, r0
 800707e:	460b      	mov	r3, r1
 8007080:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007084:	f7f9 f908 	bl	8000298 <__aeabi_dsub>
 8007088:	3530      	adds	r5, #48	@ 0x30
 800708a:	4602      	mov	r2, r0
 800708c:	460b      	mov	r3, r1
 800708e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007092:	f806 5b01 	strb.w	r5, [r6], #1
 8007096:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800709a:	f7f9 fd27 	bl	8000aec <__aeabi_dcmplt>
 800709e:	2800      	cmp	r0, #0
 80070a0:	d171      	bne.n	8007186 <_dtoa_r+0x65e>
 80070a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80070a6:	4911      	ldr	r1, [pc, #68]	@ (80070ec <_dtoa_r+0x5c4>)
 80070a8:	2000      	movs	r0, #0
 80070aa:	f7f9 f8f5 	bl	8000298 <__aeabi_dsub>
 80070ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80070b2:	f7f9 fd1b 	bl	8000aec <__aeabi_dcmplt>
 80070b6:	2800      	cmp	r0, #0
 80070b8:	f040 8095 	bne.w	80071e6 <_dtoa_r+0x6be>
 80070bc:	42a6      	cmp	r6, r4
 80070be:	f43f af50 	beq.w	8006f62 <_dtoa_r+0x43a>
 80070c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80070c6:	4b0a      	ldr	r3, [pc, #40]	@ (80070f0 <_dtoa_r+0x5c8>)
 80070c8:	2200      	movs	r2, #0
 80070ca:	f7f9 fa9d 	bl	8000608 <__aeabi_dmul>
 80070ce:	4b08      	ldr	r3, [pc, #32]	@ (80070f0 <_dtoa_r+0x5c8>)
 80070d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80070d4:	2200      	movs	r2, #0
 80070d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070da:	f7f9 fa95 	bl	8000608 <__aeabi_dmul>
 80070de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070e2:	e7c4      	b.n	800706e <_dtoa_r+0x546>
 80070e4:	08009b00 	.word	0x08009b00
 80070e8:	08009ad8 	.word	0x08009ad8
 80070ec:	3ff00000 	.word	0x3ff00000
 80070f0:	40240000 	.word	0x40240000
 80070f4:	401c0000 	.word	0x401c0000
 80070f8:	40140000 	.word	0x40140000
 80070fc:	3fe00000 	.word	0x3fe00000
 8007100:	4631      	mov	r1, r6
 8007102:	4628      	mov	r0, r5
 8007104:	f7f9 fa80 	bl	8000608 <__aeabi_dmul>
 8007108:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800710c:	9415      	str	r4, [sp, #84]	@ 0x54
 800710e:	4656      	mov	r6, sl
 8007110:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007114:	f7f9 fd28 	bl	8000b68 <__aeabi_d2iz>
 8007118:	4605      	mov	r5, r0
 800711a:	f7f9 fa0b 	bl	8000534 <__aeabi_i2d>
 800711e:	4602      	mov	r2, r0
 8007120:	460b      	mov	r3, r1
 8007122:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007126:	f7f9 f8b7 	bl	8000298 <__aeabi_dsub>
 800712a:	3530      	adds	r5, #48	@ 0x30
 800712c:	f806 5b01 	strb.w	r5, [r6], #1
 8007130:	4602      	mov	r2, r0
 8007132:	460b      	mov	r3, r1
 8007134:	42a6      	cmp	r6, r4
 8007136:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800713a:	f04f 0200 	mov.w	r2, #0
 800713e:	d124      	bne.n	800718a <_dtoa_r+0x662>
 8007140:	4bac      	ldr	r3, [pc, #688]	@ (80073f4 <_dtoa_r+0x8cc>)
 8007142:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007146:	f7f9 f8a9 	bl	800029c <__adddf3>
 800714a:	4602      	mov	r2, r0
 800714c:	460b      	mov	r3, r1
 800714e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007152:	f7f9 fce9 	bl	8000b28 <__aeabi_dcmpgt>
 8007156:	2800      	cmp	r0, #0
 8007158:	d145      	bne.n	80071e6 <_dtoa_r+0x6be>
 800715a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800715e:	49a5      	ldr	r1, [pc, #660]	@ (80073f4 <_dtoa_r+0x8cc>)
 8007160:	2000      	movs	r0, #0
 8007162:	f7f9 f899 	bl	8000298 <__aeabi_dsub>
 8007166:	4602      	mov	r2, r0
 8007168:	460b      	mov	r3, r1
 800716a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800716e:	f7f9 fcbd 	bl	8000aec <__aeabi_dcmplt>
 8007172:	2800      	cmp	r0, #0
 8007174:	f43f aef5 	beq.w	8006f62 <_dtoa_r+0x43a>
 8007178:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800717a:	1e73      	subs	r3, r6, #1
 800717c:	9315      	str	r3, [sp, #84]	@ 0x54
 800717e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007182:	2b30      	cmp	r3, #48	@ 0x30
 8007184:	d0f8      	beq.n	8007178 <_dtoa_r+0x650>
 8007186:	9f04      	ldr	r7, [sp, #16]
 8007188:	e73e      	b.n	8007008 <_dtoa_r+0x4e0>
 800718a:	4b9b      	ldr	r3, [pc, #620]	@ (80073f8 <_dtoa_r+0x8d0>)
 800718c:	f7f9 fa3c 	bl	8000608 <__aeabi_dmul>
 8007190:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007194:	e7bc      	b.n	8007110 <_dtoa_r+0x5e8>
 8007196:	d10c      	bne.n	80071b2 <_dtoa_r+0x68a>
 8007198:	4b98      	ldr	r3, [pc, #608]	@ (80073fc <_dtoa_r+0x8d4>)
 800719a:	2200      	movs	r2, #0
 800719c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80071a0:	f7f9 fa32 	bl	8000608 <__aeabi_dmul>
 80071a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80071a8:	f7f9 fcb4 	bl	8000b14 <__aeabi_dcmpge>
 80071ac:	2800      	cmp	r0, #0
 80071ae:	f000 8157 	beq.w	8007460 <_dtoa_r+0x938>
 80071b2:	2400      	movs	r4, #0
 80071b4:	4625      	mov	r5, r4
 80071b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80071b8:	43db      	mvns	r3, r3
 80071ba:	9304      	str	r3, [sp, #16]
 80071bc:	4656      	mov	r6, sl
 80071be:	2700      	movs	r7, #0
 80071c0:	4621      	mov	r1, r4
 80071c2:	4658      	mov	r0, fp
 80071c4:	f000 fbb4 	bl	8007930 <_Bfree>
 80071c8:	2d00      	cmp	r5, #0
 80071ca:	d0dc      	beq.n	8007186 <_dtoa_r+0x65e>
 80071cc:	b12f      	cbz	r7, 80071da <_dtoa_r+0x6b2>
 80071ce:	42af      	cmp	r7, r5
 80071d0:	d003      	beq.n	80071da <_dtoa_r+0x6b2>
 80071d2:	4639      	mov	r1, r7
 80071d4:	4658      	mov	r0, fp
 80071d6:	f000 fbab 	bl	8007930 <_Bfree>
 80071da:	4629      	mov	r1, r5
 80071dc:	4658      	mov	r0, fp
 80071de:	f000 fba7 	bl	8007930 <_Bfree>
 80071e2:	e7d0      	b.n	8007186 <_dtoa_r+0x65e>
 80071e4:	9704      	str	r7, [sp, #16]
 80071e6:	4633      	mov	r3, r6
 80071e8:	461e      	mov	r6, r3
 80071ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80071ee:	2a39      	cmp	r2, #57	@ 0x39
 80071f0:	d107      	bne.n	8007202 <_dtoa_r+0x6da>
 80071f2:	459a      	cmp	sl, r3
 80071f4:	d1f8      	bne.n	80071e8 <_dtoa_r+0x6c0>
 80071f6:	9a04      	ldr	r2, [sp, #16]
 80071f8:	3201      	adds	r2, #1
 80071fa:	9204      	str	r2, [sp, #16]
 80071fc:	2230      	movs	r2, #48	@ 0x30
 80071fe:	f88a 2000 	strb.w	r2, [sl]
 8007202:	781a      	ldrb	r2, [r3, #0]
 8007204:	3201      	adds	r2, #1
 8007206:	701a      	strb	r2, [r3, #0]
 8007208:	e7bd      	b.n	8007186 <_dtoa_r+0x65e>
 800720a:	4b7b      	ldr	r3, [pc, #492]	@ (80073f8 <_dtoa_r+0x8d0>)
 800720c:	2200      	movs	r2, #0
 800720e:	f7f9 f9fb 	bl	8000608 <__aeabi_dmul>
 8007212:	2200      	movs	r2, #0
 8007214:	2300      	movs	r3, #0
 8007216:	4604      	mov	r4, r0
 8007218:	460d      	mov	r5, r1
 800721a:	f7f9 fc5d 	bl	8000ad8 <__aeabi_dcmpeq>
 800721e:	2800      	cmp	r0, #0
 8007220:	f43f aebb 	beq.w	8006f9a <_dtoa_r+0x472>
 8007224:	e6f0      	b.n	8007008 <_dtoa_r+0x4e0>
 8007226:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007228:	2a00      	cmp	r2, #0
 800722a:	f000 80db 	beq.w	80073e4 <_dtoa_r+0x8bc>
 800722e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007230:	2a01      	cmp	r2, #1
 8007232:	f300 80bf 	bgt.w	80073b4 <_dtoa_r+0x88c>
 8007236:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007238:	2a00      	cmp	r2, #0
 800723a:	f000 80b7 	beq.w	80073ac <_dtoa_r+0x884>
 800723e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007242:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007244:	4646      	mov	r6, r8
 8007246:	9a08      	ldr	r2, [sp, #32]
 8007248:	2101      	movs	r1, #1
 800724a:	441a      	add	r2, r3
 800724c:	4658      	mov	r0, fp
 800724e:	4498      	add	r8, r3
 8007250:	9208      	str	r2, [sp, #32]
 8007252:	f000 fc21 	bl	8007a98 <__i2b>
 8007256:	4605      	mov	r5, r0
 8007258:	b15e      	cbz	r6, 8007272 <_dtoa_r+0x74a>
 800725a:	9b08      	ldr	r3, [sp, #32]
 800725c:	2b00      	cmp	r3, #0
 800725e:	dd08      	ble.n	8007272 <_dtoa_r+0x74a>
 8007260:	42b3      	cmp	r3, r6
 8007262:	9a08      	ldr	r2, [sp, #32]
 8007264:	bfa8      	it	ge
 8007266:	4633      	movge	r3, r6
 8007268:	eba8 0803 	sub.w	r8, r8, r3
 800726c:	1af6      	subs	r6, r6, r3
 800726e:	1ad3      	subs	r3, r2, r3
 8007270:	9308      	str	r3, [sp, #32]
 8007272:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007274:	b1f3      	cbz	r3, 80072b4 <_dtoa_r+0x78c>
 8007276:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007278:	2b00      	cmp	r3, #0
 800727a:	f000 80b7 	beq.w	80073ec <_dtoa_r+0x8c4>
 800727e:	b18c      	cbz	r4, 80072a4 <_dtoa_r+0x77c>
 8007280:	4629      	mov	r1, r5
 8007282:	4622      	mov	r2, r4
 8007284:	4658      	mov	r0, fp
 8007286:	f000 fcc7 	bl	8007c18 <__pow5mult>
 800728a:	464a      	mov	r2, r9
 800728c:	4601      	mov	r1, r0
 800728e:	4605      	mov	r5, r0
 8007290:	4658      	mov	r0, fp
 8007292:	f000 fc17 	bl	8007ac4 <__multiply>
 8007296:	4649      	mov	r1, r9
 8007298:	9004      	str	r0, [sp, #16]
 800729a:	4658      	mov	r0, fp
 800729c:	f000 fb48 	bl	8007930 <_Bfree>
 80072a0:	9b04      	ldr	r3, [sp, #16]
 80072a2:	4699      	mov	r9, r3
 80072a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072a6:	1b1a      	subs	r2, r3, r4
 80072a8:	d004      	beq.n	80072b4 <_dtoa_r+0x78c>
 80072aa:	4649      	mov	r1, r9
 80072ac:	4658      	mov	r0, fp
 80072ae:	f000 fcb3 	bl	8007c18 <__pow5mult>
 80072b2:	4681      	mov	r9, r0
 80072b4:	2101      	movs	r1, #1
 80072b6:	4658      	mov	r0, fp
 80072b8:	f000 fbee 	bl	8007a98 <__i2b>
 80072bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80072be:	4604      	mov	r4, r0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	f000 81cf 	beq.w	8007664 <_dtoa_r+0xb3c>
 80072c6:	461a      	mov	r2, r3
 80072c8:	4601      	mov	r1, r0
 80072ca:	4658      	mov	r0, fp
 80072cc:	f000 fca4 	bl	8007c18 <__pow5mult>
 80072d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	4604      	mov	r4, r0
 80072d6:	f300 8095 	bgt.w	8007404 <_dtoa_r+0x8dc>
 80072da:	9b02      	ldr	r3, [sp, #8]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	f040 8087 	bne.w	80073f0 <_dtoa_r+0x8c8>
 80072e2:	9b03      	ldr	r3, [sp, #12]
 80072e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	f040 8089 	bne.w	8007400 <_dtoa_r+0x8d8>
 80072ee:	9b03      	ldr	r3, [sp, #12]
 80072f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80072f4:	0d1b      	lsrs	r3, r3, #20
 80072f6:	051b      	lsls	r3, r3, #20
 80072f8:	b12b      	cbz	r3, 8007306 <_dtoa_r+0x7de>
 80072fa:	9b08      	ldr	r3, [sp, #32]
 80072fc:	3301      	adds	r3, #1
 80072fe:	9308      	str	r3, [sp, #32]
 8007300:	f108 0801 	add.w	r8, r8, #1
 8007304:	2301      	movs	r3, #1
 8007306:	930a      	str	r3, [sp, #40]	@ 0x28
 8007308:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800730a:	2b00      	cmp	r3, #0
 800730c:	f000 81b0 	beq.w	8007670 <_dtoa_r+0xb48>
 8007310:	6923      	ldr	r3, [r4, #16]
 8007312:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007316:	6918      	ldr	r0, [r3, #16]
 8007318:	f000 fb72 	bl	8007a00 <__hi0bits>
 800731c:	f1c0 0020 	rsb	r0, r0, #32
 8007320:	9b08      	ldr	r3, [sp, #32]
 8007322:	4418      	add	r0, r3
 8007324:	f010 001f 	ands.w	r0, r0, #31
 8007328:	d077      	beq.n	800741a <_dtoa_r+0x8f2>
 800732a:	f1c0 0320 	rsb	r3, r0, #32
 800732e:	2b04      	cmp	r3, #4
 8007330:	dd6b      	ble.n	800740a <_dtoa_r+0x8e2>
 8007332:	9b08      	ldr	r3, [sp, #32]
 8007334:	f1c0 001c 	rsb	r0, r0, #28
 8007338:	4403      	add	r3, r0
 800733a:	4480      	add	r8, r0
 800733c:	4406      	add	r6, r0
 800733e:	9308      	str	r3, [sp, #32]
 8007340:	f1b8 0f00 	cmp.w	r8, #0
 8007344:	dd05      	ble.n	8007352 <_dtoa_r+0x82a>
 8007346:	4649      	mov	r1, r9
 8007348:	4642      	mov	r2, r8
 800734a:	4658      	mov	r0, fp
 800734c:	f000 fcbe 	bl	8007ccc <__lshift>
 8007350:	4681      	mov	r9, r0
 8007352:	9b08      	ldr	r3, [sp, #32]
 8007354:	2b00      	cmp	r3, #0
 8007356:	dd05      	ble.n	8007364 <_dtoa_r+0x83c>
 8007358:	4621      	mov	r1, r4
 800735a:	461a      	mov	r2, r3
 800735c:	4658      	mov	r0, fp
 800735e:	f000 fcb5 	bl	8007ccc <__lshift>
 8007362:	4604      	mov	r4, r0
 8007364:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007366:	2b00      	cmp	r3, #0
 8007368:	d059      	beq.n	800741e <_dtoa_r+0x8f6>
 800736a:	4621      	mov	r1, r4
 800736c:	4648      	mov	r0, r9
 800736e:	f000 fd19 	bl	8007da4 <__mcmp>
 8007372:	2800      	cmp	r0, #0
 8007374:	da53      	bge.n	800741e <_dtoa_r+0x8f6>
 8007376:	1e7b      	subs	r3, r7, #1
 8007378:	9304      	str	r3, [sp, #16]
 800737a:	4649      	mov	r1, r9
 800737c:	2300      	movs	r3, #0
 800737e:	220a      	movs	r2, #10
 8007380:	4658      	mov	r0, fp
 8007382:	f000 faf7 	bl	8007974 <__multadd>
 8007386:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007388:	4681      	mov	r9, r0
 800738a:	2b00      	cmp	r3, #0
 800738c:	f000 8172 	beq.w	8007674 <_dtoa_r+0xb4c>
 8007390:	2300      	movs	r3, #0
 8007392:	4629      	mov	r1, r5
 8007394:	220a      	movs	r2, #10
 8007396:	4658      	mov	r0, fp
 8007398:	f000 faec 	bl	8007974 <__multadd>
 800739c:	9b00      	ldr	r3, [sp, #0]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	4605      	mov	r5, r0
 80073a2:	dc67      	bgt.n	8007474 <_dtoa_r+0x94c>
 80073a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073a6:	2b02      	cmp	r3, #2
 80073a8:	dc41      	bgt.n	800742e <_dtoa_r+0x906>
 80073aa:	e063      	b.n	8007474 <_dtoa_r+0x94c>
 80073ac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80073ae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80073b2:	e746      	b.n	8007242 <_dtoa_r+0x71a>
 80073b4:	9b07      	ldr	r3, [sp, #28]
 80073b6:	1e5c      	subs	r4, r3, #1
 80073b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073ba:	42a3      	cmp	r3, r4
 80073bc:	bfbf      	itttt	lt
 80073be:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80073c0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80073c2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80073c4:	1ae3      	sublt	r3, r4, r3
 80073c6:	bfb4      	ite	lt
 80073c8:	18d2      	addlt	r2, r2, r3
 80073ca:	1b1c      	subge	r4, r3, r4
 80073cc:	9b07      	ldr	r3, [sp, #28]
 80073ce:	bfbc      	itt	lt
 80073d0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80073d2:	2400      	movlt	r4, #0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	bfb5      	itete	lt
 80073d8:	eba8 0603 	sublt.w	r6, r8, r3
 80073dc:	9b07      	ldrge	r3, [sp, #28]
 80073de:	2300      	movlt	r3, #0
 80073e0:	4646      	movge	r6, r8
 80073e2:	e730      	b.n	8007246 <_dtoa_r+0x71e>
 80073e4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80073e6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80073e8:	4646      	mov	r6, r8
 80073ea:	e735      	b.n	8007258 <_dtoa_r+0x730>
 80073ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80073ee:	e75c      	b.n	80072aa <_dtoa_r+0x782>
 80073f0:	2300      	movs	r3, #0
 80073f2:	e788      	b.n	8007306 <_dtoa_r+0x7de>
 80073f4:	3fe00000 	.word	0x3fe00000
 80073f8:	40240000 	.word	0x40240000
 80073fc:	40140000 	.word	0x40140000
 8007400:	9b02      	ldr	r3, [sp, #8]
 8007402:	e780      	b.n	8007306 <_dtoa_r+0x7de>
 8007404:	2300      	movs	r3, #0
 8007406:	930a      	str	r3, [sp, #40]	@ 0x28
 8007408:	e782      	b.n	8007310 <_dtoa_r+0x7e8>
 800740a:	d099      	beq.n	8007340 <_dtoa_r+0x818>
 800740c:	9a08      	ldr	r2, [sp, #32]
 800740e:	331c      	adds	r3, #28
 8007410:	441a      	add	r2, r3
 8007412:	4498      	add	r8, r3
 8007414:	441e      	add	r6, r3
 8007416:	9208      	str	r2, [sp, #32]
 8007418:	e792      	b.n	8007340 <_dtoa_r+0x818>
 800741a:	4603      	mov	r3, r0
 800741c:	e7f6      	b.n	800740c <_dtoa_r+0x8e4>
 800741e:	9b07      	ldr	r3, [sp, #28]
 8007420:	9704      	str	r7, [sp, #16]
 8007422:	2b00      	cmp	r3, #0
 8007424:	dc20      	bgt.n	8007468 <_dtoa_r+0x940>
 8007426:	9300      	str	r3, [sp, #0]
 8007428:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800742a:	2b02      	cmp	r3, #2
 800742c:	dd1e      	ble.n	800746c <_dtoa_r+0x944>
 800742e:	9b00      	ldr	r3, [sp, #0]
 8007430:	2b00      	cmp	r3, #0
 8007432:	f47f aec0 	bne.w	80071b6 <_dtoa_r+0x68e>
 8007436:	4621      	mov	r1, r4
 8007438:	2205      	movs	r2, #5
 800743a:	4658      	mov	r0, fp
 800743c:	f000 fa9a 	bl	8007974 <__multadd>
 8007440:	4601      	mov	r1, r0
 8007442:	4604      	mov	r4, r0
 8007444:	4648      	mov	r0, r9
 8007446:	f000 fcad 	bl	8007da4 <__mcmp>
 800744a:	2800      	cmp	r0, #0
 800744c:	f77f aeb3 	ble.w	80071b6 <_dtoa_r+0x68e>
 8007450:	4656      	mov	r6, sl
 8007452:	2331      	movs	r3, #49	@ 0x31
 8007454:	f806 3b01 	strb.w	r3, [r6], #1
 8007458:	9b04      	ldr	r3, [sp, #16]
 800745a:	3301      	adds	r3, #1
 800745c:	9304      	str	r3, [sp, #16]
 800745e:	e6ae      	b.n	80071be <_dtoa_r+0x696>
 8007460:	9c07      	ldr	r4, [sp, #28]
 8007462:	9704      	str	r7, [sp, #16]
 8007464:	4625      	mov	r5, r4
 8007466:	e7f3      	b.n	8007450 <_dtoa_r+0x928>
 8007468:	9b07      	ldr	r3, [sp, #28]
 800746a:	9300      	str	r3, [sp, #0]
 800746c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800746e:	2b00      	cmp	r3, #0
 8007470:	f000 8104 	beq.w	800767c <_dtoa_r+0xb54>
 8007474:	2e00      	cmp	r6, #0
 8007476:	dd05      	ble.n	8007484 <_dtoa_r+0x95c>
 8007478:	4629      	mov	r1, r5
 800747a:	4632      	mov	r2, r6
 800747c:	4658      	mov	r0, fp
 800747e:	f000 fc25 	bl	8007ccc <__lshift>
 8007482:	4605      	mov	r5, r0
 8007484:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007486:	2b00      	cmp	r3, #0
 8007488:	d05a      	beq.n	8007540 <_dtoa_r+0xa18>
 800748a:	6869      	ldr	r1, [r5, #4]
 800748c:	4658      	mov	r0, fp
 800748e:	f000 fa0f 	bl	80078b0 <_Balloc>
 8007492:	4606      	mov	r6, r0
 8007494:	b928      	cbnz	r0, 80074a2 <_dtoa_r+0x97a>
 8007496:	4b84      	ldr	r3, [pc, #528]	@ (80076a8 <_dtoa_r+0xb80>)
 8007498:	4602      	mov	r2, r0
 800749a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800749e:	f7ff bb5a 	b.w	8006b56 <_dtoa_r+0x2e>
 80074a2:	692a      	ldr	r2, [r5, #16]
 80074a4:	3202      	adds	r2, #2
 80074a6:	0092      	lsls	r2, r2, #2
 80074a8:	f105 010c 	add.w	r1, r5, #12
 80074ac:	300c      	adds	r0, #12
 80074ae:	f000 ffaf 	bl	8008410 <memcpy>
 80074b2:	2201      	movs	r2, #1
 80074b4:	4631      	mov	r1, r6
 80074b6:	4658      	mov	r0, fp
 80074b8:	f000 fc08 	bl	8007ccc <__lshift>
 80074bc:	f10a 0301 	add.w	r3, sl, #1
 80074c0:	9307      	str	r3, [sp, #28]
 80074c2:	9b00      	ldr	r3, [sp, #0]
 80074c4:	4453      	add	r3, sl
 80074c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80074c8:	9b02      	ldr	r3, [sp, #8]
 80074ca:	f003 0301 	and.w	r3, r3, #1
 80074ce:	462f      	mov	r7, r5
 80074d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80074d2:	4605      	mov	r5, r0
 80074d4:	9b07      	ldr	r3, [sp, #28]
 80074d6:	4621      	mov	r1, r4
 80074d8:	3b01      	subs	r3, #1
 80074da:	4648      	mov	r0, r9
 80074dc:	9300      	str	r3, [sp, #0]
 80074de:	f7ff fa98 	bl	8006a12 <quorem>
 80074e2:	4639      	mov	r1, r7
 80074e4:	9002      	str	r0, [sp, #8]
 80074e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80074ea:	4648      	mov	r0, r9
 80074ec:	f000 fc5a 	bl	8007da4 <__mcmp>
 80074f0:	462a      	mov	r2, r5
 80074f2:	9008      	str	r0, [sp, #32]
 80074f4:	4621      	mov	r1, r4
 80074f6:	4658      	mov	r0, fp
 80074f8:	f000 fc70 	bl	8007ddc <__mdiff>
 80074fc:	68c2      	ldr	r2, [r0, #12]
 80074fe:	4606      	mov	r6, r0
 8007500:	bb02      	cbnz	r2, 8007544 <_dtoa_r+0xa1c>
 8007502:	4601      	mov	r1, r0
 8007504:	4648      	mov	r0, r9
 8007506:	f000 fc4d 	bl	8007da4 <__mcmp>
 800750a:	4602      	mov	r2, r0
 800750c:	4631      	mov	r1, r6
 800750e:	4658      	mov	r0, fp
 8007510:	920e      	str	r2, [sp, #56]	@ 0x38
 8007512:	f000 fa0d 	bl	8007930 <_Bfree>
 8007516:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007518:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800751a:	9e07      	ldr	r6, [sp, #28]
 800751c:	ea43 0102 	orr.w	r1, r3, r2
 8007520:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007522:	4319      	orrs	r1, r3
 8007524:	d110      	bne.n	8007548 <_dtoa_r+0xa20>
 8007526:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800752a:	d029      	beq.n	8007580 <_dtoa_r+0xa58>
 800752c:	9b08      	ldr	r3, [sp, #32]
 800752e:	2b00      	cmp	r3, #0
 8007530:	dd02      	ble.n	8007538 <_dtoa_r+0xa10>
 8007532:	9b02      	ldr	r3, [sp, #8]
 8007534:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007538:	9b00      	ldr	r3, [sp, #0]
 800753a:	f883 8000 	strb.w	r8, [r3]
 800753e:	e63f      	b.n	80071c0 <_dtoa_r+0x698>
 8007540:	4628      	mov	r0, r5
 8007542:	e7bb      	b.n	80074bc <_dtoa_r+0x994>
 8007544:	2201      	movs	r2, #1
 8007546:	e7e1      	b.n	800750c <_dtoa_r+0x9e4>
 8007548:	9b08      	ldr	r3, [sp, #32]
 800754a:	2b00      	cmp	r3, #0
 800754c:	db04      	blt.n	8007558 <_dtoa_r+0xa30>
 800754e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007550:	430b      	orrs	r3, r1
 8007552:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007554:	430b      	orrs	r3, r1
 8007556:	d120      	bne.n	800759a <_dtoa_r+0xa72>
 8007558:	2a00      	cmp	r2, #0
 800755a:	dded      	ble.n	8007538 <_dtoa_r+0xa10>
 800755c:	4649      	mov	r1, r9
 800755e:	2201      	movs	r2, #1
 8007560:	4658      	mov	r0, fp
 8007562:	f000 fbb3 	bl	8007ccc <__lshift>
 8007566:	4621      	mov	r1, r4
 8007568:	4681      	mov	r9, r0
 800756a:	f000 fc1b 	bl	8007da4 <__mcmp>
 800756e:	2800      	cmp	r0, #0
 8007570:	dc03      	bgt.n	800757a <_dtoa_r+0xa52>
 8007572:	d1e1      	bne.n	8007538 <_dtoa_r+0xa10>
 8007574:	f018 0f01 	tst.w	r8, #1
 8007578:	d0de      	beq.n	8007538 <_dtoa_r+0xa10>
 800757a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800757e:	d1d8      	bne.n	8007532 <_dtoa_r+0xa0a>
 8007580:	9a00      	ldr	r2, [sp, #0]
 8007582:	2339      	movs	r3, #57	@ 0x39
 8007584:	7013      	strb	r3, [r2, #0]
 8007586:	4633      	mov	r3, r6
 8007588:	461e      	mov	r6, r3
 800758a:	3b01      	subs	r3, #1
 800758c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007590:	2a39      	cmp	r2, #57	@ 0x39
 8007592:	d052      	beq.n	800763a <_dtoa_r+0xb12>
 8007594:	3201      	adds	r2, #1
 8007596:	701a      	strb	r2, [r3, #0]
 8007598:	e612      	b.n	80071c0 <_dtoa_r+0x698>
 800759a:	2a00      	cmp	r2, #0
 800759c:	dd07      	ble.n	80075ae <_dtoa_r+0xa86>
 800759e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80075a2:	d0ed      	beq.n	8007580 <_dtoa_r+0xa58>
 80075a4:	9a00      	ldr	r2, [sp, #0]
 80075a6:	f108 0301 	add.w	r3, r8, #1
 80075aa:	7013      	strb	r3, [r2, #0]
 80075ac:	e608      	b.n	80071c0 <_dtoa_r+0x698>
 80075ae:	9b07      	ldr	r3, [sp, #28]
 80075b0:	9a07      	ldr	r2, [sp, #28]
 80075b2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80075b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d028      	beq.n	800760e <_dtoa_r+0xae6>
 80075bc:	4649      	mov	r1, r9
 80075be:	2300      	movs	r3, #0
 80075c0:	220a      	movs	r2, #10
 80075c2:	4658      	mov	r0, fp
 80075c4:	f000 f9d6 	bl	8007974 <__multadd>
 80075c8:	42af      	cmp	r7, r5
 80075ca:	4681      	mov	r9, r0
 80075cc:	f04f 0300 	mov.w	r3, #0
 80075d0:	f04f 020a 	mov.w	r2, #10
 80075d4:	4639      	mov	r1, r7
 80075d6:	4658      	mov	r0, fp
 80075d8:	d107      	bne.n	80075ea <_dtoa_r+0xac2>
 80075da:	f000 f9cb 	bl	8007974 <__multadd>
 80075de:	4607      	mov	r7, r0
 80075e0:	4605      	mov	r5, r0
 80075e2:	9b07      	ldr	r3, [sp, #28]
 80075e4:	3301      	adds	r3, #1
 80075e6:	9307      	str	r3, [sp, #28]
 80075e8:	e774      	b.n	80074d4 <_dtoa_r+0x9ac>
 80075ea:	f000 f9c3 	bl	8007974 <__multadd>
 80075ee:	4629      	mov	r1, r5
 80075f0:	4607      	mov	r7, r0
 80075f2:	2300      	movs	r3, #0
 80075f4:	220a      	movs	r2, #10
 80075f6:	4658      	mov	r0, fp
 80075f8:	f000 f9bc 	bl	8007974 <__multadd>
 80075fc:	4605      	mov	r5, r0
 80075fe:	e7f0      	b.n	80075e2 <_dtoa_r+0xaba>
 8007600:	9b00      	ldr	r3, [sp, #0]
 8007602:	2b00      	cmp	r3, #0
 8007604:	bfcc      	ite	gt
 8007606:	461e      	movgt	r6, r3
 8007608:	2601      	movle	r6, #1
 800760a:	4456      	add	r6, sl
 800760c:	2700      	movs	r7, #0
 800760e:	4649      	mov	r1, r9
 8007610:	2201      	movs	r2, #1
 8007612:	4658      	mov	r0, fp
 8007614:	f000 fb5a 	bl	8007ccc <__lshift>
 8007618:	4621      	mov	r1, r4
 800761a:	4681      	mov	r9, r0
 800761c:	f000 fbc2 	bl	8007da4 <__mcmp>
 8007620:	2800      	cmp	r0, #0
 8007622:	dcb0      	bgt.n	8007586 <_dtoa_r+0xa5e>
 8007624:	d102      	bne.n	800762c <_dtoa_r+0xb04>
 8007626:	f018 0f01 	tst.w	r8, #1
 800762a:	d1ac      	bne.n	8007586 <_dtoa_r+0xa5e>
 800762c:	4633      	mov	r3, r6
 800762e:	461e      	mov	r6, r3
 8007630:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007634:	2a30      	cmp	r2, #48	@ 0x30
 8007636:	d0fa      	beq.n	800762e <_dtoa_r+0xb06>
 8007638:	e5c2      	b.n	80071c0 <_dtoa_r+0x698>
 800763a:	459a      	cmp	sl, r3
 800763c:	d1a4      	bne.n	8007588 <_dtoa_r+0xa60>
 800763e:	9b04      	ldr	r3, [sp, #16]
 8007640:	3301      	adds	r3, #1
 8007642:	9304      	str	r3, [sp, #16]
 8007644:	2331      	movs	r3, #49	@ 0x31
 8007646:	f88a 3000 	strb.w	r3, [sl]
 800764a:	e5b9      	b.n	80071c0 <_dtoa_r+0x698>
 800764c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800764e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80076ac <_dtoa_r+0xb84>
 8007652:	b11b      	cbz	r3, 800765c <_dtoa_r+0xb34>
 8007654:	f10a 0308 	add.w	r3, sl, #8
 8007658:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800765a:	6013      	str	r3, [r2, #0]
 800765c:	4650      	mov	r0, sl
 800765e:	b019      	add	sp, #100	@ 0x64
 8007660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007664:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007666:	2b01      	cmp	r3, #1
 8007668:	f77f ae37 	ble.w	80072da <_dtoa_r+0x7b2>
 800766c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800766e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007670:	2001      	movs	r0, #1
 8007672:	e655      	b.n	8007320 <_dtoa_r+0x7f8>
 8007674:	9b00      	ldr	r3, [sp, #0]
 8007676:	2b00      	cmp	r3, #0
 8007678:	f77f aed6 	ble.w	8007428 <_dtoa_r+0x900>
 800767c:	4656      	mov	r6, sl
 800767e:	4621      	mov	r1, r4
 8007680:	4648      	mov	r0, r9
 8007682:	f7ff f9c6 	bl	8006a12 <quorem>
 8007686:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800768a:	f806 8b01 	strb.w	r8, [r6], #1
 800768e:	9b00      	ldr	r3, [sp, #0]
 8007690:	eba6 020a 	sub.w	r2, r6, sl
 8007694:	4293      	cmp	r3, r2
 8007696:	ddb3      	ble.n	8007600 <_dtoa_r+0xad8>
 8007698:	4649      	mov	r1, r9
 800769a:	2300      	movs	r3, #0
 800769c:	220a      	movs	r2, #10
 800769e:	4658      	mov	r0, fp
 80076a0:	f000 f968 	bl	8007974 <__multadd>
 80076a4:	4681      	mov	r9, r0
 80076a6:	e7ea      	b.n	800767e <_dtoa_r+0xb56>
 80076a8:	08009a5c 	.word	0x08009a5c
 80076ac:	080099e0 	.word	0x080099e0

080076b0 <_free_r>:
 80076b0:	b538      	push	{r3, r4, r5, lr}
 80076b2:	4605      	mov	r5, r0
 80076b4:	2900      	cmp	r1, #0
 80076b6:	d041      	beq.n	800773c <_free_r+0x8c>
 80076b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076bc:	1f0c      	subs	r4, r1, #4
 80076be:	2b00      	cmp	r3, #0
 80076c0:	bfb8      	it	lt
 80076c2:	18e4      	addlt	r4, r4, r3
 80076c4:	f000 f8e8 	bl	8007898 <__malloc_lock>
 80076c8:	4a1d      	ldr	r2, [pc, #116]	@ (8007740 <_free_r+0x90>)
 80076ca:	6813      	ldr	r3, [r2, #0]
 80076cc:	b933      	cbnz	r3, 80076dc <_free_r+0x2c>
 80076ce:	6063      	str	r3, [r4, #4]
 80076d0:	6014      	str	r4, [r2, #0]
 80076d2:	4628      	mov	r0, r5
 80076d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076d8:	f000 b8e4 	b.w	80078a4 <__malloc_unlock>
 80076dc:	42a3      	cmp	r3, r4
 80076de:	d908      	bls.n	80076f2 <_free_r+0x42>
 80076e0:	6820      	ldr	r0, [r4, #0]
 80076e2:	1821      	adds	r1, r4, r0
 80076e4:	428b      	cmp	r3, r1
 80076e6:	bf01      	itttt	eq
 80076e8:	6819      	ldreq	r1, [r3, #0]
 80076ea:	685b      	ldreq	r3, [r3, #4]
 80076ec:	1809      	addeq	r1, r1, r0
 80076ee:	6021      	streq	r1, [r4, #0]
 80076f0:	e7ed      	b.n	80076ce <_free_r+0x1e>
 80076f2:	461a      	mov	r2, r3
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	b10b      	cbz	r3, 80076fc <_free_r+0x4c>
 80076f8:	42a3      	cmp	r3, r4
 80076fa:	d9fa      	bls.n	80076f2 <_free_r+0x42>
 80076fc:	6811      	ldr	r1, [r2, #0]
 80076fe:	1850      	adds	r0, r2, r1
 8007700:	42a0      	cmp	r0, r4
 8007702:	d10b      	bne.n	800771c <_free_r+0x6c>
 8007704:	6820      	ldr	r0, [r4, #0]
 8007706:	4401      	add	r1, r0
 8007708:	1850      	adds	r0, r2, r1
 800770a:	4283      	cmp	r3, r0
 800770c:	6011      	str	r1, [r2, #0]
 800770e:	d1e0      	bne.n	80076d2 <_free_r+0x22>
 8007710:	6818      	ldr	r0, [r3, #0]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	6053      	str	r3, [r2, #4]
 8007716:	4408      	add	r0, r1
 8007718:	6010      	str	r0, [r2, #0]
 800771a:	e7da      	b.n	80076d2 <_free_r+0x22>
 800771c:	d902      	bls.n	8007724 <_free_r+0x74>
 800771e:	230c      	movs	r3, #12
 8007720:	602b      	str	r3, [r5, #0]
 8007722:	e7d6      	b.n	80076d2 <_free_r+0x22>
 8007724:	6820      	ldr	r0, [r4, #0]
 8007726:	1821      	adds	r1, r4, r0
 8007728:	428b      	cmp	r3, r1
 800772a:	bf04      	itt	eq
 800772c:	6819      	ldreq	r1, [r3, #0]
 800772e:	685b      	ldreq	r3, [r3, #4]
 8007730:	6063      	str	r3, [r4, #4]
 8007732:	bf04      	itt	eq
 8007734:	1809      	addeq	r1, r1, r0
 8007736:	6021      	streq	r1, [r4, #0]
 8007738:	6054      	str	r4, [r2, #4]
 800773a:	e7ca      	b.n	80076d2 <_free_r+0x22>
 800773c:	bd38      	pop	{r3, r4, r5, pc}
 800773e:	bf00      	nop
 8007740:	2000064c 	.word	0x2000064c

08007744 <malloc>:
 8007744:	4b02      	ldr	r3, [pc, #8]	@ (8007750 <malloc+0xc>)
 8007746:	4601      	mov	r1, r0
 8007748:	6818      	ldr	r0, [r3, #0]
 800774a:	f000 b825 	b.w	8007798 <_malloc_r>
 800774e:	bf00      	nop
 8007750:	2000003c 	.word	0x2000003c

08007754 <sbrk_aligned>:
 8007754:	b570      	push	{r4, r5, r6, lr}
 8007756:	4e0f      	ldr	r6, [pc, #60]	@ (8007794 <sbrk_aligned+0x40>)
 8007758:	460c      	mov	r4, r1
 800775a:	6831      	ldr	r1, [r6, #0]
 800775c:	4605      	mov	r5, r0
 800775e:	b911      	cbnz	r1, 8007766 <sbrk_aligned+0x12>
 8007760:	f000 fe46 	bl	80083f0 <_sbrk_r>
 8007764:	6030      	str	r0, [r6, #0]
 8007766:	4621      	mov	r1, r4
 8007768:	4628      	mov	r0, r5
 800776a:	f000 fe41 	bl	80083f0 <_sbrk_r>
 800776e:	1c43      	adds	r3, r0, #1
 8007770:	d103      	bne.n	800777a <sbrk_aligned+0x26>
 8007772:	f04f 34ff 	mov.w	r4, #4294967295
 8007776:	4620      	mov	r0, r4
 8007778:	bd70      	pop	{r4, r5, r6, pc}
 800777a:	1cc4      	adds	r4, r0, #3
 800777c:	f024 0403 	bic.w	r4, r4, #3
 8007780:	42a0      	cmp	r0, r4
 8007782:	d0f8      	beq.n	8007776 <sbrk_aligned+0x22>
 8007784:	1a21      	subs	r1, r4, r0
 8007786:	4628      	mov	r0, r5
 8007788:	f000 fe32 	bl	80083f0 <_sbrk_r>
 800778c:	3001      	adds	r0, #1
 800778e:	d1f2      	bne.n	8007776 <sbrk_aligned+0x22>
 8007790:	e7ef      	b.n	8007772 <sbrk_aligned+0x1e>
 8007792:	bf00      	nop
 8007794:	20000648 	.word	0x20000648

08007798 <_malloc_r>:
 8007798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800779c:	1ccd      	adds	r5, r1, #3
 800779e:	f025 0503 	bic.w	r5, r5, #3
 80077a2:	3508      	adds	r5, #8
 80077a4:	2d0c      	cmp	r5, #12
 80077a6:	bf38      	it	cc
 80077a8:	250c      	movcc	r5, #12
 80077aa:	2d00      	cmp	r5, #0
 80077ac:	4606      	mov	r6, r0
 80077ae:	db01      	blt.n	80077b4 <_malloc_r+0x1c>
 80077b0:	42a9      	cmp	r1, r5
 80077b2:	d904      	bls.n	80077be <_malloc_r+0x26>
 80077b4:	230c      	movs	r3, #12
 80077b6:	6033      	str	r3, [r6, #0]
 80077b8:	2000      	movs	r0, #0
 80077ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007894 <_malloc_r+0xfc>
 80077c2:	f000 f869 	bl	8007898 <__malloc_lock>
 80077c6:	f8d8 3000 	ldr.w	r3, [r8]
 80077ca:	461c      	mov	r4, r3
 80077cc:	bb44      	cbnz	r4, 8007820 <_malloc_r+0x88>
 80077ce:	4629      	mov	r1, r5
 80077d0:	4630      	mov	r0, r6
 80077d2:	f7ff ffbf 	bl	8007754 <sbrk_aligned>
 80077d6:	1c43      	adds	r3, r0, #1
 80077d8:	4604      	mov	r4, r0
 80077da:	d158      	bne.n	800788e <_malloc_r+0xf6>
 80077dc:	f8d8 4000 	ldr.w	r4, [r8]
 80077e0:	4627      	mov	r7, r4
 80077e2:	2f00      	cmp	r7, #0
 80077e4:	d143      	bne.n	800786e <_malloc_r+0xd6>
 80077e6:	2c00      	cmp	r4, #0
 80077e8:	d04b      	beq.n	8007882 <_malloc_r+0xea>
 80077ea:	6823      	ldr	r3, [r4, #0]
 80077ec:	4639      	mov	r1, r7
 80077ee:	4630      	mov	r0, r6
 80077f0:	eb04 0903 	add.w	r9, r4, r3
 80077f4:	f000 fdfc 	bl	80083f0 <_sbrk_r>
 80077f8:	4581      	cmp	r9, r0
 80077fa:	d142      	bne.n	8007882 <_malloc_r+0xea>
 80077fc:	6821      	ldr	r1, [r4, #0]
 80077fe:	1a6d      	subs	r5, r5, r1
 8007800:	4629      	mov	r1, r5
 8007802:	4630      	mov	r0, r6
 8007804:	f7ff ffa6 	bl	8007754 <sbrk_aligned>
 8007808:	3001      	adds	r0, #1
 800780a:	d03a      	beq.n	8007882 <_malloc_r+0xea>
 800780c:	6823      	ldr	r3, [r4, #0]
 800780e:	442b      	add	r3, r5
 8007810:	6023      	str	r3, [r4, #0]
 8007812:	f8d8 3000 	ldr.w	r3, [r8]
 8007816:	685a      	ldr	r2, [r3, #4]
 8007818:	bb62      	cbnz	r2, 8007874 <_malloc_r+0xdc>
 800781a:	f8c8 7000 	str.w	r7, [r8]
 800781e:	e00f      	b.n	8007840 <_malloc_r+0xa8>
 8007820:	6822      	ldr	r2, [r4, #0]
 8007822:	1b52      	subs	r2, r2, r5
 8007824:	d420      	bmi.n	8007868 <_malloc_r+0xd0>
 8007826:	2a0b      	cmp	r2, #11
 8007828:	d917      	bls.n	800785a <_malloc_r+0xc2>
 800782a:	1961      	adds	r1, r4, r5
 800782c:	42a3      	cmp	r3, r4
 800782e:	6025      	str	r5, [r4, #0]
 8007830:	bf18      	it	ne
 8007832:	6059      	strne	r1, [r3, #4]
 8007834:	6863      	ldr	r3, [r4, #4]
 8007836:	bf08      	it	eq
 8007838:	f8c8 1000 	streq.w	r1, [r8]
 800783c:	5162      	str	r2, [r4, r5]
 800783e:	604b      	str	r3, [r1, #4]
 8007840:	4630      	mov	r0, r6
 8007842:	f000 f82f 	bl	80078a4 <__malloc_unlock>
 8007846:	f104 000b 	add.w	r0, r4, #11
 800784a:	1d23      	adds	r3, r4, #4
 800784c:	f020 0007 	bic.w	r0, r0, #7
 8007850:	1ac2      	subs	r2, r0, r3
 8007852:	bf1c      	itt	ne
 8007854:	1a1b      	subne	r3, r3, r0
 8007856:	50a3      	strne	r3, [r4, r2]
 8007858:	e7af      	b.n	80077ba <_malloc_r+0x22>
 800785a:	6862      	ldr	r2, [r4, #4]
 800785c:	42a3      	cmp	r3, r4
 800785e:	bf0c      	ite	eq
 8007860:	f8c8 2000 	streq.w	r2, [r8]
 8007864:	605a      	strne	r2, [r3, #4]
 8007866:	e7eb      	b.n	8007840 <_malloc_r+0xa8>
 8007868:	4623      	mov	r3, r4
 800786a:	6864      	ldr	r4, [r4, #4]
 800786c:	e7ae      	b.n	80077cc <_malloc_r+0x34>
 800786e:	463c      	mov	r4, r7
 8007870:	687f      	ldr	r7, [r7, #4]
 8007872:	e7b6      	b.n	80077e2 <_malloc_r+0x4a>
 8007874:	461a      	mov	r2, r3
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	42a3      	cmp	r3, r4
 800787a:	d1fb      	bne.n	8007874 <_malloc_r+0xdc>
 800787c:	2300      	movs	r3, #0
 800787e:	6053      	str	r3, [r2, #4]
 8007880:	e7de      	b.n	8007840 <_malloc_r+0xa8>
 8007882:	230c      	movs	r3, #12
 8007884:	6033      	str	r3, [r6, #0]
 8007886:	4630      	mov	r0, r6
 8007888:	f000 f80c 	bl	80078a4 <__malloc_unlock>
 800788c:	e794      	b.n	80077b8 <_malloc_r+0x20>
 800788e:	6005      	str	r5, [r0, #0]
 8007890:	e7d6      	b.n	8007840 <_malloc_r+0xa8>
 8007892:	bf00      	nop
 8007894:	2000064c 	.word	0x2000064c

08007898 <__malloc_lock>:
 8007898:	4801      	ldr	r0, [pc, #4]	@ (80078a0 <__malloc_lock+0x8>)
 800789a:	f7ff b8b8 	b.w	8006a0e <__retarget_lock_acquire_recursive>
 800789e:	bf00      	nop
 80078a0:	20000644 	.word	0x20000644

080078a4 <__malloc_unlock>:
 80078a4:	4801      	ldr	r0, [pc, #4]	@ (80078ac <__malloc_unlock+0x8>)
 80078a6:	f7ff b8b3 	b.w	8006a10 <__retarget_lock_release_recursive>
 80078aa:	bf00      	nop
 80078ac:	20000644 	.word	0x20000644

080078b0 <_Balloc>:
 80078b0:	b570      	push	{r4, r5, r6, lr}
 80078b2:	69c6      	ldr	r6, [r0, #28]
 80078b4:	4604      	mov	r4, r0
 80078b6:	460d      	mov	r5, r1
 80078b8:	b976      	cbnz	r6, 80078d8 <_Balloc+0x28>
 80078ba:	2010      	movs	r0, #16
 80078bc:	f7ff ff42 	bl	8007744 <malloc>
 80078c0:	4602      	mov	r2, r0
 80078c2:	61e0      	str	r0, [r4, #28]
 80078c4:	b920      	cbnz	r0, 80078d0 <_Balloc+0x20>
 80078c6:	4b18      	ldr	r3, [pc, #96]	@ (8007928 <_Balloc+0x78>)
 80078c8:	4818      	ldr	r0, [pc, #96]	@ (800792c <_Balloc+0x7c>)
 80078ca:	216b      	movs	r1, #107	@ 0x6b
 80078cc:	f000 fdae 	bl	800842c <__assert_func>
 80078d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80078d4:	6006      	str	r6, [r0, #0]
 80078d6:	60c6      	str	r6, [r0, #12]
 80078d8:	69e6      	ldr	r6, [r4, #28]
 80078da:	68f3      	ldr	r3, [r6, #12]
 80078dc:	b183      	cbz	r3, 8007900 <_Balloc+0x50>
 80078de:	69e3      	ldr	r3, [r4, #28]
 80078e0:	68db      	ldr	r3, [r3, #12]
 80078e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80078e6:	b9b8      	cbnz	r0, 8007918 <_Balloc+0x68>
 80078e8:	2101      	movs	r1, #1
 80078ea:	fa01 f605 	lsl.w	r6, r1, r5
 80078ee:	1d72      	adds	r2, r6, #5
 80078f0:	0092      	lsls	r2, r2, #2
 80078f2:	4620      	mov	r0, r4
 80078f4:	f000 fdb8 	bl	8008468 <_calloc_r>
 80078f8:	b160      	cbz	r0, 8007914 <_Balloc+0x64>
 80078fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80078fe:	e00e      	b.n	800791e <_Balloc+0x6e>
 8007900:	2221      	movs	r2, #33	@ 0x21
 8007902:	2104      	movs	r1, #4
 8007904:	4620      	mov	r0, r4
 8007906:	f000 fdaf 	bl	8008468 <_calloc_r>
 800790a:	69e3      	ldr	r3, [r4, #28]
 800790c:	60f0      	str	r0, [r6, #12]
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d1e4      	bne.n	80078de <_Balloc+0x2e>
 8007914:	2000      	movs	r0, #0
 8007916:	bd70      	pop	{r4, r5, r6, pc}
 8007918:	6802      	ldr	r2, [r0, #0]
 800791a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800791e:	2300      	movs	r3, #0
 8007920:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007924:	e7f7      	b.n	8007916 <_Balloc+0x66>
 8007926:	bf00      	nop
 8007928:	080099ed 	.word	0x080099ed
 800792c:	08009a6d 	.word	0x08009a6d

08007930 <_Bfree>:
 8007930:	b570      	push	{r4, r5, r6, lr}
 8007932:	69c6      	ldr	r6, [r0, #28]
 8007934:	4605      	mov	r5, r0
 8007936:	460c      	mov	r4, r1
 8007938:	b976      	cbnz	r6, 8007958 <_Bfree+0x28>
 800793a:	2010      	movs	r0, #16
 800793c:	f7ff ff02 	bl	8007744 <malloc>
 8007940:	4602      	mov	r2, r0
 8007942:	61e8      	str	r0, [r5, #28]
 8007944:	b920      	cbnz	r0, 8007950 <_Bfree+0x20>
 8007946:	4b09      	ldr	r3, [pc, #36]	@ (800796c <_Bfree+0x3c>)
 8007948:	4809      	ldr	r0, [pc, #36]	@ (8007970 <_Bfree+0x40>)
 800794a:	218f      	movs	r1, #143	@ 0x8f
 800794c:	f000 fd6e 	bl	800842c <__assert_func>
 8007950:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007954:	6006      	str	r6, [r0, #0]
 8007956:	60c6      	str	r6, [r0, #12]
 8007958:	b13c      	cbz	r4, 800796a <_Bfree+0x3a>
 800795a:	69eb      	ldr	r3, [r5, #28]
 800795c:	6862      	ldr	r2, [r4, #4]
 800795e:	68db      	ldr	r3, [r3, #12]
 8007960:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007964:	6021      	str	r1, [r4, #0]
 8007966:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800796a:	bd70      	pop	{r4, r5, r6, pc}
 800796c:	080099ed 	.word	0x080099ed
 8007970:	08009a6d 	.word	0x08009a6d

08007974 <__multadd>:
 8007974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007978:	690d      	ldr	r5, [r1, #16]
 800797a:	4607      	mov	r7, r0
 800797c:	460c      	mov	r4, r1
 800797e:	461e      	mov	r6, r3
 8007980:	f101 0c14 	add.w	ip, r1, #20
 8007984:	2000      	movs	r0, #0
 8007986:	f8dc 3000 	ldr.w	r3, [ip]
 800798a:	b299      	uxth	r1, r3
 800798c:	fb02 6101 	mla	r1, r2, r1, r6
 8007990:	0c1e      	lsrs	r6, r3, #16
 8007992:	0c0b      	lsrs	r3, r1, #16
 8007994:	fb02 3306 	mla	r3, r2, r6, r3
 8007998:	b289      	uxth	r1, r1
 800799a:	3001      	adds	r0, #1
 800799c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80079a0:	4285      	cmp	r5, r0
 80079a2:	f84c 1b04 	str.w	r1, [ip], #4
 80079a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80079aa:	dcec      	bgt.n	8007986 <__multadd+0x12>
 80079ac:	b30e      	cbz	r6, 80079f2 <__multadd+0x7e>
 80079ae:	68a3      	ldr	r3, [r4, #8]
 80079b0:	42ab      	cmp	r3, r5
 80079b2:	dc19      	bgt.n	80079e8 <__multadd+0x74>
 80079b4:	6861      	ldr	r1, [r4, #4]
 80079b6:	4638      	mov	r0, r7
 80079b8:	3101      	adds	r1, #1
 80079ba:	f7ff ff79 	bl	80078b0 <_Balloc>
 80079be:	4680      	mov	r8, r0
 80079c0:	b928      	cbnz	r0, 80079ce <__multadd+0x5a>
 80079c2:	4602      	mov	r2, r0
 80079c4:	4b0c      	ldr	r3, [pc, #48]	@ (80079f8 <__multadd+0x84>)
 80079c6:	480d      	ldr	r0, [pc, #52]	@ (80079fc <__multadd+0x88>)
 80079c8:	21ba      	movs	r1, #186	@ 0xba
 80079ca:	f000 fd2f 	bl	800842c <__assert_func>
 80079ce:	6922      	ldr	r2, [r4, #16]
 80079d0:	3202      	adds	r2, #2
 80079d2:	f104 010c 	add.w	r1, r4, #12
 80079d6:	0092      	lsls	r2, r2, #2
 80079d8:	300c      	adds	r0, #12
 80079da:	f000 fd19 	bl	8008410 <memcpy>
 80079de:	4621      	mov	r1, r4
 80079e0:	4638      	mov	r0, r7
 80079e2:	f7ff ffa5 	bl	8007930 <_Bfree>
 80079e6:	4644      	mov	r4, r8
 80079e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80079ec:	3501      	adds	r5, #1
 80079ee:	615e      	str	r6, [r3, #20]
 80079f0:	6125      	str	r5, [r4, #16]
 80079f2:	4620      	mov	r0, r4
 80079f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079f8:	08009a5c 	.word	0x08009a5c
 80079fc:	08009a6d 	.word	0x08009a6d

08007a00 <__hi0bits>:
 8007a00:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007a04:	4603      	mov	r3, r0
 8007a06:	bf36      	itet	cc
 8007a08:	0403      	lslcc	r3, r0, #16
 8007a0a:	2000      	movcs	r0, #0
 8007a0c:	2010      	movcc	r0, #16
 8007a0e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007a12:	bf3c      	itt	cc
 8007a14:	021b      	lslcc	r3, r3, #8
 8007a16:	3008      	addcc	r0, #8
 8007a18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a1c:	bf3c      	itt	cc
 8007a1e:	011b      	lslcc	r3, r3, #4
 8007a20:	3004      	addcc	r0, #4
 8007a22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a26:	bf3c      	itt	cc
 8007a28:	009b      	lslcc	r3, r3, #2
 8007a2a:	3002      	addcc	r0, #2
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	db05      	blt.n	8007a3c <__hi0bits+0x3c>
 8007a30:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007a34:	f100 0001 	add.w	r0, r0, #1
 8007a38:	bf08      	it	eq
 8007a3a:	2020      	moveq	r0, #32
 8007a3c:	4770      	bx	lr

08007a3e <__lo0bits>:
 8007a3e:	6803      	ldr	r3, [r0, #0]
 8007a40:	4602      	mov	r2, r0
 8007a42:	f013 0007 	ands.w	r0, r3, #7
 8007a46:	d00b      	beq.n	8007a60 <__lo0bits+0x22>
 8007a48:	07d9      	lsls	r1, r3, #31
 8007a4a:	d421      	bmi.n	8007a90 <__lo0bits+0x52>
 8007a4c:	0798      	lsls	r0, r3, #30
 8007a4e:	bf49      	itett	mi
 8007a50:	085b      	lsrmi	r3, r3, #1
 8007a52:	089b      	lsrpl	r3, r3, #2
 8007a54:	2001      	movmi	r0, #1
 8007a56:	6013      	strmi	r3, [r2, #0]
 8007a58:	bf5c      	itt	pl
 8007a5a:	6013      	strpl	r3, [r2, #0]
 8007a5c:	2002      	movpl	r0, #2
 8007a5e:	4770      	bx	lr
 8007a60:	b299      	uxth	r1, r3
 8007a62:	b909      	cbnz	r1, 8007a68 <__lo0bits+0x2a>
 8007a64:	0c1b      	lsrs	r3, r3, #16
 8007a66:	2010      	movs	r0, #16
 8007a68:	b2d9      	uxtb	r1, r3
 8007a6a:	b909      	cbnz	r1, 8007a70 <__lo0bits+0x32>
 8007a6c:	3008      	adds	r0, #8
 8007a6e:	0a1b      	lsrs	r3, r3, #8
 8007a70:	0719      	lsls	r1, r3, #28
 8007a72:	bf04      	itt	eq
 8007a74:	091b      	lsreq	r3, r3, #4
 8007a76:	3004      	addeq	r0, #4
 8007a78:	0799      	lsls	r1, r3, #30
 8007a7a:	bf04      	itt	eq
 8007a7c:	089b      	lsreq	r3, r3, #2
 8007a7e:	3002      	addeq	r0, #2
 8007a80:	07d9      	lsls	r1, r3, #31
 8007a82:	d403      	bmi.n	8007a8c <__lo0bits+0x4e>
 8007a84:	085b      	lsrs	r3, r3, #1
 8007a86:	f100 0001 	add.w	r0, r0, #1
 8007a8a:	d003      	beq.n	8007a94 <__lo0bits+0x56>
 8007a8c:	6013      	str	r3, [r2, #0]
 8007a8e:	4770      	bx	lr
 8007a90:	2000      	movs	r0, #0
 8007a92:	4770      	bx	lr
 8007a94:	2020      	movs	r0, #32
 8007a96:	4770      	bx	lr

08007a98 <__i2b>:
 8007a98:	b510      	push	{r4, lr}
 8007a9a:	460c      	mov	r4, r1
 8007a9c:	2101      	movs	r1, #1
 8007a9e:	f7ff ff07 	bl	80078b0 <_Balloc>
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	b928      	cbnz	r0, 8007ab2 <__i2b+0x1a>
 8007aa6:	4b05      	ldr	r3, [pc, #20]	@ (8007abc <__i2b+0x24>)
 8007aa8:	4805      	ldr	r0, [pc, #20]	@ (8007ac0 <__i2b+0x28>)
 8007aaa:	f240 1145 	movw	r1, #325	@ 0x145
 8007aae:	f000 fcbd 	bl	800842c <__assert_func>
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	6144      	str	r4, [r0, #20]
 8007ab6:	6103      	str	r3, [r0, #16]
 8007ab8:	bd10      	pop	{r4, pc}
 8007aba:	bf00      	nop
 8007abc:	08009a5c 	.word	0x08009a5c
 8007ac0:	08009a6d 	.word	0x08009a6d

08007ac4 <__multiply>:
 8007ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ac8:	4614      	mov	r4, r2
 8007aca:	690a      	ldr	r2, [r1, #16]
 8007acc:	6923      	ldr	r3, [r4, #16]
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	bfa8      	it	ge
 8007ad2:	4623      	movge	r3, r4
 8007ad4:	460f      	mov	r7, r1
 8007ad6:	bfa4      	itt	ge
 8007ad8:	460c      	movge	r4, r1
 8007ada:	461f      	movge	r7, r3
 8007adc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007ae0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007ae4:	68a3      	ldr	r3, [r4, #8]
 8007ae6:	6861      	ldr	r1, [r4, #4]
 8007ae8:	eb0a 0609 	add.w	r6, sl, r9
 8007aec:	42b3      	cmp	r3, r6
 8007aee:	b085      	sub	sp, #20
 8007af0:	bfb8      	it	lt
 8007af2:	3101      	addlt	r1, #1
 8007af4:	f7ff fedc 	bl	80078b0 <_Balloc>
 8007af8:	b930      	cbnz	r0, 8007b08 <__multiply+0x44>
 8007afa:	4602      	mov	r2, r0
 8007afc:	4b44      	ldr	r3, [pc, #272]	@ (8007c10 <__multiply+0x14c>)
 8007afe:	4845      	ldr	r0, [pc, #276]	@ (8007c14 <__multiply+0x150>)
 8007b00:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007b04:	f000 fc92 	bl	800842c <__assert_func>
 8007b08:	f100 0514 	add.w	r5, r0, #20
 8007b0c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007b10:	462b      	mov	r3, r5
 8007b12:	2200      	movs	r2, #0
 8007b14:	4543      	cmp	r3, r8
 8007b16:	d321      	bcc.n	8007b5c <__multiply+0x98>
 8007b18:	f107 0114 	add.w	r1, r7, #20
 8007b1c:	f104 0214 	add.w	r2, r4, #20
 8007b20:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007b24:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007b28:	9302      	str	r3, [sp, #8]
 8007b2a:	1b13      	subs	r3, r2, r4
 8007b2c:	3b15      	subs	r3, #21
 8007b2e:	f023 0303 	bic.w	r3, r3, #3
 8007b32:	3304      	adds	r3, #4
 8007b34:	f104 0715 	add.w	r7, r4, #21
 8007b38:	42ba      	cmp	r2, r7
 8007b3a:	bf38      	it	cc
 8007b3c:	2304      	movcc	r3, #4
 8007b3e:	9301      	str	r3, [sp, #4]
 8007b40:	9b02      	ldr	r3, [sp, #8]
 8007b42:	9103      	str	r1, [sp, #12]
 8007b44:	428b      	cmp	r3, r1
 8007b46:	d80c      	bhi.n	8007b62 <__multiply+0x9e>
 8007b48:	2e00      	cmp	r6, #0
 8007b4a:	dd03      	ble.n	8007b54 <__multiply+0x90>
 8007b4c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d05b      	beq.n	8007c0c <__multiply+0x148>
 8007b54:	6106      	str	r6, [r0, #16]
 8007b56:	b005      	add	sp, #20
 8007b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b5c:	f843 2b04 	str.w	r2, [r3], #4
 8007b60:	e7d8      	b.n	8007b14 <__multiply+0x50>
 8007b62:	f8b1 a000 	ldrh.w	sl, [r1]
 8007b66:	f1ba 0f00 	cmp.w	sl, #0
 8007b6a:	d024      	beq.n	8007bb6 <__multiply+0xf2>
 8007b6c:	f104 0e14 	add.w	lr, r4, #20
 8007b70:	46a9      	mov	r9, r5
 8007b72:	f04f 0c00 	mov.w	ip, #0
 8007b76:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007b7a:	f8d9 3000 	ldr.w	r3, [r9]
 8007b7e:	fa1f fb87 	uxth.w	fp, r7
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	fb0a 330b 	mla	r3, sl, fp, r3
 8007b88:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007b8c:	f8d9 7000 	ldr.w	r7, [r9]
 8007b90:	4463      	add	r3, ip
 8007b92:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007b96:	fb0a c70b 	mla	r7, sl, fp, ip
 8007b9a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007ba4:	4572      	cmp	r2, lr
 8007ba6:	f849 3b04 	str.w	r3, [r9], #4
 8007baa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007bae:	d8e2      	bhi.n	8007b76 <__multiply+0xb2>
 8007bb0:	9b01      	ldr	r3, [sp, #4]
 8007bb2:	f845 c003 	str.w	ip, [r5, r3]
 8007bb6:	9b03      	ldr	r3, [sp, #12]
 8007bb8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007bbc:	3104      	adds	r1, #4
 8007bbe:	f1b9 0f00 	cmp.w	r9, #0
 8007bc2:	d021      	beq.n	8007c08 <__multiply+0x144>
 8007bc4:	682b      	ldr	r3, [r5, #0]
 8007bc6:	f104 0c14 	add.w	ip, r4, #20
 8007bca:	46ae      	mov	lr, r5
 8007bcc:	f04f 0a00 	mov.w	sl, #0
 8007bd0:	f8bc b000 	ldrh.w	fp, [ip]
 8007bd4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007bd8:	fb09 770b 	mla	r7, r9, fp, r7
 8007bdc:	4457      	add	r7, sl
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007be4:	f84e 3b04 	str.w	r3, [lr], #4
 8007be8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007bec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007bf0:	f8be 3000 	ldrh.w	r3, [lr]
 8007bf4:	fb09 330a 	mla	r3, r9, sl, r3
 8007bf8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007bfc:	4562      	cmp	r2, ip
 8007bfe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007c02:	d8e5      	bhi.n	8007bd0 <__multiply+0x10c>
 8007c04:	9f01      	ldr	r7, [sp, #4]
 8007c06:	51eb      	str	r3, [r5, r7]
 8007c08:	3504      	adds	r5, #4
 8007c0a:	e799      	b.n	8007b40 <__multiply+0x7c>
 8007c0c:	3e01      	subs	r6, #1
 8007c0e:	e79b      	b.n	8007b48 <__multiply+0x84>
 8007c10:	08009a5c 	.word	0x08009a5c
 8007c14:	08009a6d 	.word	0x08009a6d

08007c18 <__pow5mult>:
 8007c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c1c:	4615      	mov	r5, r2
 8007c1e:	f012 0203 	ands.w	r2, r2, #3
 8007c22:	4607      	mov	r7, r0
 8007c24:	460e      	mov	r6, r1
 8007c26:	d007      	beq.n	8007c38 <__pow5mult+0x20>
 8007c28:	4c25      	ldr	r4, [pc, #148]	@ (8007cc0 <__pow5mult+0xa8>)
 8007c2a:	3a01      	subs	r2, #1
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007c32:	f7ff fe9f 	bl	8007974 <__multadd>
 8007c36:	4606      	mov	r6, r0
 8007c38:	10ad      	asrs	r5, r5, #2
 8007c3a:	d03d      	beq.n	8007cb8 <__pow5mult+0xa0>
 8007c3c:	69fc      	ldr	r4, [r7, #28]
 8007c3e:	b97c      	cbnz	r4, 8007c60 <__pow5mult+0x48>
 8007c40:	2010      	movs	r0, #16
 8007c42:	f7ff fd7f 	bl	8007744 <malloc>
 8007c46:	4602      	mov	r2, r0
 8007c48:	61f8      	str	r0, [r7, #28]
 8007c4a:	b928      	cbnz	r0, 8007c58 <__pow5mult+0x40>
 8007c4c:	4b1d      	ldr	r3, [pc, #116]	@ (8007cc4 <__pow5mult+0xac>)
 8007c4e:	481e      	ldr	r0, [pc, #120]	@ (8007cc8 <__pow5mult+0xb0>)
 8007c50:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007c54:	f000 fbea 	bl	800842c <__assert_func>
 8007c58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007c5c:	6004      	str	r4, [r0, #0]
 8007c5e:	60c4      	str	r4, [r0, #12]
 8007c60:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007c64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007c68:	b94c      	cbnz	r4, 8007c7e <__pow5mult+0x66>
 8007c6a:	f240 2171 	movw	r1, #625	@ 0x271
 8007c6e:	4638      	mov	r0, r7
 8007c70:	f7ff ff12 	bl	8007a98 <__i2b>
 8007c74:	2300      	movs	r3, #0
 8007c76:	f8c8 0008 	str.w	r0, [r8, #8]
 8007c7a:	4604      	mov	r4, r0
 8007c7c:	6003      	str	r3, [r0, #0]
 8007c7e:	f04f 0900 	mov.w	r9, #0
 8007c82:	07eb      	lsls	r3, r5, #31
 8007c84:	d50a      	bpl.n	8007c9c <__pow5mult+0x84>
 8007c86:	4631      	mov	r1, r6
 8007c88:	4622      	mov	r2, r4
 8007c8a:	4638      	mov	r0, r7
 8007c8c:	f7ff ff1a 	bl	8007ac4 <__multiply>
 8007c90:	4631      	mov	r1, r6
 8007c92:	4680      	mov	r8, r0
 8007c94:	4638      	mov	r0, r7
 8007c96:	f7ff fe4b 	bl	8007930 <_Bfree>
 8007c9a:	4646      	mov	r6, r8
 8007c9c:	106d      	asrs	r5, r5, #1
 8007c9e:	d00b      	beq.n	8007cb8 <__pow5mult+0xa0>
 8007ca0:	6820      	ldr	r0, [r4, #0]
 8007ca2:	b938      	cbnz	r0, 8007cb4 <__pow5mult+0x9c>
 8007ca4:	4622      	mov	r2, r4
 8007ca6:	4621      	mov	r1, r4
 8007ca8:	4638      	mov	r0, r7
 8007caa:	f7ff ff0b 	bl	8007ac4 <__multiply>
 8007cae:	6020      	str	r0, [r4, #0]
 8007cb0:	f8c0 9000 	str.w	r9, [r0]
 8007cb4:	4604      	mov	r4, r0
 8007cb6:	e7e4      	b.n	8007c82 <__pow5mult+0x6a>
 8007cb8:	4630      	mov	r0, r6
 8007cba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cbe:	bf00      	nop
 8007cc0:	08009ac8 	.word	0x08009ac8
 8007cc4:	080099ed 	.word	0x080099ed
 8007cc8:	08009a6d 	.word	0x08009a6d

08007ccc <__lshift>:
 8007ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cd0:	460c      	mov	r4, r1
 8007cd2:	6849      	ldr	r1, [r1, #4]
 8007cd4:	6923      	ldr	r3, [r4, #16]
 8007cd6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007cda:	68a3      	ldr	r3, [r4, #8]
 8007cdc:	4607      	mov	r7, r0
 8007cde:	4691      	mov	r9, r2
 8007ce0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007ce4:	f108 0601 	add.w	r6, r8, #1
 8007ce8:	42b3      	cmp	r3, r6
 8007cea:	db0b      	blt.n	8007d04 <__lshift+0x38>
 8007cec:	4638      	mov	r0, r7
 8007cee:	f7ff fddf 	bl	80078b0 <_Balloc>
 8007cf2:	4605      	mov	r5, r0
 8007cf4:	b948      	cbnz	r0, 8007d0a <__lshift+0x3e>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	4b28      	ldr	r3, [pc, #160]	@ (8007d9c <__lshift+0xd0>)
 8007cfa:	4829      	ldr	r0, [pc, #164]	@ (8007da0 <__lshift+0xd4>)
 8007cfc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007d00:	f000 fb94 	bl	800842c <__assert_func>
 8007d04:	3101      	adds	r1, #1
 8007d06:	005b      	lsls	r3, r3, #1
 8007d08:	e7ee      	b.n	8007ce8 <__lshift+0x1c>
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	f100 0114 	add.w	r1, r0, #20
 8007d10:	f100 0210 	add.w	r2, r0, #16
 8007d14:	4618      	mov	r0, r3
 8007d16:	4553      	cmp	r3, sl
 8007d18:	db33      	blt.n	8007d82 <__lshift+0xb6>
 8007d1a:	6920      	ldr	r0, [r4, #16]
 8007d1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007d20:	f104 0314 	add.w	r3, r4, #20
 8007d24:	f019 091f 	ands.w	r9, r9, #31
 8007d28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007d2c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007d30:	d02b      	beq.n	8007d8a <__lshift+0xbe>
 8007d32:	f1c9 0e20 	rsb	lr, r9, #32
 8007d36:	468a      	mov	sl, r1
 8007d38:	2200      	movs	r2, #0
 8007d3a:	6818      	ldr	r0, [r3, #0]
 8007d3c:	fa00 f009 	lsl.w	r0, r0, r9
 8007d40:	4310      	orrs	r0, r2
 8007d42:	f84a 0b04 	str.w	r0, [sl], #4
 8007d46:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d4a:	459c      	cmp	ip, r3
 8007d4c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007d50:	d8f3      	bhi.n	8007d3a <__lshift+0x6e>
 8007d52:	ebac 0304 	sub.w	r3, ip, r4
 8007d56:	3b15      	subs	r3, #21
 8007d58:	f023 0303 	bic.w	r3, r3, #3
 8007d5c:	3304      	adds	r3, #4
 8007d5e:	f104 0015 	add.w	r0, r4, #21
 8007d62:	4584      	cmp	ip, r0
 8007d64:	bf38      	it	cc
 8007d66:	2304      	movcc	r3, #4
 8007d68:	50ca      	str	r2, [r1, r3]
 8007d6a:	b10a      	cbz	r2, 8007d70 <__lshift+0xa4>
 8007d6c:	f108 0602 	add.w	r6, r8, #2
 8007d70:	3e01      	subs	r6, #1
 8007d72:	4638      	mov	r0, r7
 8007d74:	612e      	str	r6, [r5, #16]
 8007d76:	4621      	mov	r1, r4
 8007d78:	f7ff fdda 	bl	8007930 <_Bfree>
 8007d7c:	4628      	mov	r0, r5
 8007d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d82:	f842 0f04 	str.w	r0, [r2, #4]!
 8007d86:	3301      	adds	r3, #1
 8007d88:	e7c5      	b.n	8007d16 <__lshift+0x4a>
 8007d8a:	3904      	subs	r1, #4
 8007d8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d90:	f841 2f04 	str.w	r2, [r1, #4]!
 8007d94:	459c      	cmp	ip, r3
 8007d96:	d8f9      	bhi.n	8007d8c <__lshift+0xc0>
 8007d98:	e7ea      	b.n	8007d70 <__lshift+0xa4>
 8007d9a:	bf00      	nop
 8007d9c:	08009a5c 	.word	0x08009a5c
 8007da0:	08009a6d 	.word	0x08009a6d

08007da4 <__mcmp>:
 8007da4:	690a      	ldr	r2, [r1, #16]
 8007da6:	4603      	mov	r3, r0
 8007da8:	6900      	ldr	r0, [r0, #16]
 8007daa:	1a80      	subs	r0, r0, r2
 8007dac:	b530      	push	{r4, r5, lr}
 8007dae:	d10e      	bne.n	8007dce <__mcmp+0x2a>
 8007db0:	3314      	adds	r3, #20
 8007db2:	3114      	adds	r1, #20
 8007db4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007db8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007dbc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007dc0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007dc4:	4295      	cmp	r5, r2
 8007dc6:	d003      	beq.n	8007dd0 <__mcmp+0x2c>
 8007dc8:	d205      	bcs.n	8007dd6 <__mcmp+0x32>
 8007dca:	f04f 30ff 	mov.w	r0, #4294967295
 8007dce:	bd30      	pop	{r4, r5, pc}
 8007dd0:	42a3      	cmp	r3, r4
 8007dd2:	d3f3      	bcc.n	8007dbc <__mcmp+0x18>
 8007dd4:	e7fb      	b.n	8007dce <__mcmp+0x2a>
 8007dd6:	2001      	movs	r0, #1
 8007dd8:	e7f9      	b.n	8007dce <__mcmp+0x2a>
	...

08007ddc <__mdiff>:
 8007ddc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007de0:	4689      	mov	r9, r1
 8007de2:	4606      	mov	r6, r0
 8007de4:	4611      	mov	r1, r2
 8007de6:	4648      	mov	r0, r9
 8007de8:	4614      	mov	r4, r2
 8007dea:	f7ff ffdb 	bl	8007da4 <__mcmp>
 8007dee:	1e05      	subs	r5, r0, #0
 8007df0:	d112      	bne.n	8007e18 <__mdiff+0x3c>
 8007df2:	4629      	mov	r1, r5
 8007df4:	4630      	mov	r0, r6
 8007df6:	f7ff fd5b 	bl	80078b0 <_Balloc>
 8007dfa:	4602      	mov	r2, r0
 8007dfc:	b928      	cbnz	r0, 8007e0a <__mdiff+0x2e>
 8007dfe:	4b3f      	ldr	r3, [pc, #252]	@ (8007efc <__mdiff+0x120>)
 8007e00:	f240 2137 	movw	r1, #567	@ 0x237
 8007e04:	483e      	ldr	r0, [pc, #248]	@ (8007f00 <__mdiff+0x124>)
 8007e06:	f000 fb11 	bl	800842c <__assert_func>
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007e10:	4610      	mov	r0, r2
 8007e12:	b003      	add	sp, #12
 8007e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e18:	bfbc      	itt	lt
 8007e1a:	464b      	movlt	r3, r9
 8007e1c:	46a1      	movlt	r9, r4
 8007e1e:	4630      	mov	r0, r6
 8007e20:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007e24:	bfba      	itte	lt
 8007e26:	461c      	movlt	r4, r3
 8007e28:	2501      	movlt	r5, #1
 8007e2a:	2500      	movge	r5, #0
 8007e2c:	f7ff fd40 	bl	80078b0 <_Balloc>
 8007e30:	4602      	mov	r2, r0
 8007e32:	b918      	cbnz	r0, 8007e3c <__mdiff+0x60>
 8007e34:	4b31      	ldr	r3, [pc, #196]	@ (8007efc <__mdiff+0x120>)
 8007e36:	f240 2145 	movw	r1, #581	@ 0x245
 8007e3a:	e7e3      	b.n	8007e04 <__mdiff+0x28>
 8007e3c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007e40:	6926      	ldr	r6, [r4, #16]
 8007e42:	60c5      	str	r5, [r0, #12]
 8007e44:	f109 0310 	add.w	r3, r9, #16
 8007e48:	f109 0514 	add.w	r5, r9, #20
 8007e4c:	f104 0e14 	add.w	lr, r4, #20
 8007e50:	f100 0b14 	add.w	fp, r0, #20
 8007e54:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007e58:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007e5c:	9301      	str	r3, [sp, #4]
 8007e5e:	46d9      	mov	r9, fp
 8007e60:	f04f 0c00 	mov.w	ip, #0
 8007e64:	9b01      	ldr	r3, [sp, #4]
 8007e66:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007e6a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007e6e:	9301      	str	r3, [sp, #4]
 8007e70:	fa1f f38a 	uxth.w	r3, sl
 8007e74:	4619      	mov	r1, r3
 8007e76:	b283      	uxth	r3, r0
 8007e78:	1acb      	subs	r3, r1, r3
 8007e7a:	0c00      	lsrs	r0, r0, #16
 8007e7c:	4463      	add	r3, ip
 8007e7e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007e82:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007e8c:	4576      	cmp	r6, lr
 8007e8e:	f849 3b04 	str.w	r3, [r9], #4
 8007e92:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007e96:	d8e5      	bhi.n	8007e64 <__mdiff+0x88>
 8007e98:	1b33      	subs	r3, r6, r4
 8007e9a:	3b15      	subs	r3, #21
 8007e9c:	f023 0303 	bic.w	r3, r3, #3
 8007ea0:	3415      	adds	r4, #21
 8007ea2:	3304      	adds	r3, #4
 8007ea4:	42a6      	cmp	r6, r4
 8007ea6:	bf38      	it	cc
 8007ea8:	2304      	movcc	r3, #4
 8007eaa:	441d      	add	r5, r3
 8007eac:	445b      	add	r3, fp
 8007eae:	461e      	mov	r6, r3
 8007eb0:	462c      	mov	r4, r5
 8007eb2:	4544      	cmp	r4, r8
 8007eb4:	d30e      	bcc.n	8007ed4 <__mdiff+0xf8>
 8007eb6:	f108 0103 	add.w	r1, r8, #3
 8007eba:	1b49      	subs	r1, r1, r5
 8007ebc:	f021 0103 	bic.w	r1, r1, #3
 8007ec0:	3d03      	subs	r5, #3
 8007ec2:	45a8      	cmp	r8, r5
 8007ec4:	bf38      	it	cc
 8007ec6:	2100      	movcc	r1, #0
 8007ec8:	440b      	add	r3, r1
 8007eca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007ece:	b191      	cbz	r1, 8007ef6 <__mdiff+0x11a>
 8007ed0:	6117      	str	r7, [r2, #16]
 8007ed2:	e79d      	b.n	8007e10 <__mdiff+0x34>
 8007ed4:	f854 1b04 	ldr.w	r1, [r4], #4
 8007ed8:	46e6      	mov	lr, ip
 8007eda:	0c08      	lsrs	r0, r1, #16
 8007edc:	fa1c fc81 	uxtah	ip, ip, r1
 8007ee0:	4471      	add	r1, lr
 8007ee2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007ee6:	b289      	uxth	r1, r1
 8007ee8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007eec:	f846 1b04 	str.w	r1, [r6], #4
 8007ef0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007ef4:	e7dd      	b.n	8007eb2 <__mdiff+0xd6>
 8007ef6:	3f01      	subs	r7, #1
 8007ef8:	e7e7      	b.n	8007eca <__mdiff+0xee>
 8007efa:	bf00      	nop
 8007efc:	08009a5c 	.word	0x08009a5c
 8007f00:	08009a6d 	.word	0x08009a6d

08007f04 <__d2b>:
 8007f04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007f08:	460f      	mov	r7, r1
 8007f0a:	2101      	movs	r1, #1
 8007f0c:	ec59 8b10 	vmov	r8, r9, d0
 8007f10:	4616      	mov	r6, r2
 8007f12:	f7ff fccd 	bl	80078b0 <_Balloc>
 8007f16:	4604      	mov	r4, r0
 8007f18:	b930      	cbnz	r0, 8007f28 <__d2b+0x24>
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	4b23      	ldr	r3, [pc, #140]	@ (8007fac <__d2b+0xa8>)
 8007f1e:	4824      	ldr	r0, [pc, #144]	@ (8007fb0 <__d2b+0xac>)
 8007f20:	f240 310f 	movw	r1, #783	@ 0x30f
 8007f24:	f000 fa82 	bl	800842c <__assert_func>
 8007f28:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007f2c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007f30:	b10d      	cbz	r5, 8007f36 <__d2b+0x32>
 8007f32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007f36:	9301      	str	r3, [sp, #4]
 8007f38:	f1b8 0300 	subs.w	r3, r8, #0
 8007f3c:	d023      	beq.n	8007f86 <__d2b+0x82>
 8007f3e:	4668      	mov	r0, sp
 8007f40:	9300      	str	r3, [sp, #0]
 8007f42:	f7ff fd7c 	bl	8007a3e <__lo0bits>
 8007f46:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007f4a:	b1d0      	cbz	r0, 8007f82 <__d2b+0x7e>
 8007f4c:	f1c0 0320 	rsb	r3, r0, #32
 8007f50:	fa02 f303 	lsl.w	r3, r2, r3
 8007f54:	430b      	orrs	r3, r1
 8007f56:	40c2      	lsrs	r2, r0
 8007f58:	6163      	str	r3, [r4, #20]
 8007f5a:	9201      	str	r2, [sp, #4]
 8007f5c:	9b01      	ldr	r3, [sp, #4]
 8007f5e:	61a3      	str	r3, [r4, #24]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	bf0c      	ite	eq
 8007f64:	2201      	moveq	r2, #1
 8007f66:	2202      	movne	r2, #2
 8007f68:	6122      	str	r2, [r4, #16]
 8007f6a:	b1a5      	cbz	r5, 8007f96 <__d2b+0x92>
 8007f6c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007f70:	4405      	add	r5, r0
 8007f72:	603d      	str	r5, [r7, #0]
 8007f74:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007f78:	6030      	str	r0, [r6, #0]
 8007f7a:	4620      	mov	r0, r4
 8007f7c:	b003      	add	sp, #12
 8007f7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f82:	6161      	str	r1, [r4, #20]
 8007f84:	e7ea      	b.n	8007f5c <__d2b+0x58>
 8007f86:	a801      	add	r0, sp, #4
 8007f88:	f7ff fd59 	bl	8007a3e <__lo0bits>
 8007f8c:	9b01      	ldr	r3, [sp, #4]
 8007f8e:	6163      	str	r3, [r4, #20]
 8007f90:	3020      	adds	r0, #32
 8007f92:	2201      	movs	r2, #1
 8007f94:	e7e8      	b.n	8007f68 <__d2b+0x64>
 8007f96:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007f9a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007f9e:	6038      	str	r0, [r7, #0]
 8007fa0:	6918      	ldr	r0, [r3, #16]
 8007fa2:	f7ff fd2d 	bl	8007a00 <__hi0bits>
 8007fa6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007faa:	e7e5      	b.n	8007f78 <__d2b+0x74>
 8007fac:	08009a5c 	.word	0x08009a5c
 8007fb0:	08009a6d 	.word	0x08009a6d

08007fb4 <__ssputs_r>:
 8007fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fb8:	688e      	ldr	r6, [r1, #8]
 8007fba:	461f      	mov	r7, r3
 8007fbc:	42be      	cmp	r6, r7
 8007fbe:	680b      	ldr	r3, [r1, #0]
 8007fc0:	4682      	mov	sl, r0
 8007fc2:	460c      	mov	r4, r1
 8007fc4:	4690      	mov	r8, r2
 8007fc6:	d82d      	bhi.n	8008024 <__ssputs_r+0x70>
 8007fc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007fcc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007fd0:	d026      	beq.n	8008020 <__ssputs_r+0x6c>
 8007fd2:	6965      	ldr	r5, [r4, #20]
 8007fd4:	6909      	ldr	r1, [r1, #16]
 8007fd6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007fda:	eba3 0901 	sub.w	r9, r3, r1
 8007fde:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007fe2:	1c7b      	adds	r3, r7, #1
 8007fe4:	444b      	add	r3, r9
 8007fe6:	106d      	asrs	r5, r5, #1
 8007fe8:	429d      	cmp	r5, r3
 8007fea:	bf38      	it	cc
 8007fec:	461d      	movcc	r5, r3
 8007fee:	0553      	lsls	r3, r2, #21
 8007ff0:	d527      	bpl.n	8008042 <__ssputs_r+0x8e>
 8007ff2:	4629      	mov	r1, r5
 8007ff4:	f7ff fbd0 	bl	8007798 <_malloc_r>
 8007ff8:	4606      	mov	r6, r0
 8007ffa:	b360      	cbz	r0, 8008056 <__ssputs_r+0xa2>
 8007ffc:	6921      	ldr	r1, [r4, #16]
 8007ffe:	464a      	mov	r2, r9
 8008000:	f000 fa06 	bl	8008410 <memcpy>
 8008004:	89a3      	ldrh	r3, [r4, #12]
 8008006:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800800a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800800e:	81a3      	strh	r3, [r4, #12]
 8008010:	6126      	str	r6, [r4, #16]
 8008012:	6165      	str	r5, [r4, #20]
 8008014:	444e      	add	r6, r9
 8008016:	eba5 0509 	sub.w	r5, r5, r9
 800801a:	6026      	str	r6, [r4, #0]
 800801c:	60a5      	str	r5, [r4, #8]
 800801e:	463e      	mov	r6, r7
 8008020:	42be      	cmp	r6, r7
 8008022:	d900      	bls.n	8008026 <__ssputs_r+0x72>
 8008024:	463e      	mov	r6, r7
 8008026:	6820      	ldr	r0, [r4, #0]
 8008028:	4632      	mov	r2, r6
 800802a:	4641      	mov	r1, r8
 800802c:	f000 f9c6 	bl	80083bc <memmove>
 8008030:	68a3      	ldr	r3, [r4, #8]
 8008032:	1b9b      	subs	r3, r3, r6
 8008034:	60a3      	str	r3, [r4, #8]
 8008036:	6823      	ldr	r3, [r4, #0]
 8008038:	4433      	add	r3, r6
 800803a:	6023      	str	r3, [r4, #0]
 800803c:	2000      	movs	r0, #0
 800803e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008042:	462a      	mov	r2, r5
 8008044:	f000 fa36 	bl	80084b4 <_realloc_r>
 8008048:	4606      	mov	r6, r0
 800804a:	2800      	cmp	r0, #0
 800804c:	d1e0      	bne.n	8008010 <__ssputs_r+0x5c>
 800804e:	6921      	ldr	r1, [r4, #16]
 8008050:	4650      	mov	r0, sl
 8008052:	f7ff fb2d 	bl	80076b0 <_free_r>
 8008056:	230c      	movs	r3, #12
 8008058:	f8ca 3000 	str.w	r3, [sl]
 800805c:	89a3      	ldrh	r3, [r4, #12]
 800805e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008062:	81a3      	strh	r3, [r4, #12]
 8008064:	f04f 30ff 	mov.w	r0, #4294967295
 8008068:	e7e9      	b.n	800803e <__ssputs_r+0x8a>
	...

0800806c <_svfiprintf_r>:
 800806c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008070:	4698      	mov	r8, r3
 8008072:	898b      	ldrh	r3, [r1, #12]
 8008074:	061b      	lsls	r3, r3, #24
 8008076:	b09d      	sub	sp, #116	@ 0x74
 8008078:	4607      	mov	r7, r0
 800807a:	460d      	mov	r5, r1
 800807c:	4614      	mov	r4, r2
 800807e:	d510      	bpl.n	80080a2 <_svfiprintf_r+0x36>
 8008080:	690b      	ldr	r3, [r1, #16]
 8008082:	b973      	cbnz	r3, 80080a2 <_svfiprintf_r+0x36>
 8008084:	2140      	movs	r1, #64	@ 0x40
 8008086:	f7ff fb87 	bl	8007798 <_malloc_r>
 800808a:	6028      	str	r0, [r5, #0]
 800808c:	6128      	str	r0, [r5, #16]
 800808e:	b930      	cbnz	r0, 800809e <_svfiprintf_r+0x32>
 8008090:	230c      	movs	r3, #12
 8008092:	603b      	str	r3, [r7, #0]
 8008094:	f04f 30ff 	mov.w	r0, #4294967295
 8008098:	b01d      	add	sp, #116	@ 0x74
 800809a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800809e:	2340      	movs	r3, #64	@ 0x40
 80080a0:	616b      	str	r3, [r5, #20]
 80080a2:	2300      	movs	r3, #0
 80080a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80080a6:	2320      	movs	r3, #32
 80080a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80080ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80080b0:	2330      	movs	r3, #48	@ 0x30
 80080b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008250 <_svfiprintf_r+0x1e4>
 80080b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80080ba:	f04f 0901 	mov.w	r9, #1
 80080be:	4623      	mov	r3, r4
 80080c0:	469a      	mov	sl, r3
 80080c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080c6:	b10a      	cbz	r2, 80080cc <_svfiprintf_r+0x60>
 80080c8:	2a25      	cmp	r2, #37	@ 0x25
 80080ca:	d1f9      	bne.n	80080c0 <_svfiprintf_r+0x54>
 80080cc:	ebba 0b04 	subs.w	fp, sl, r4
 80080d0:	d00b      	beq.n	80080ea <_svfiprintf_r+0x7e>
 80080d2:	465b      	mov	r3, fp
 80080d4:	4622      	mov	r2, r4
 80080d6:	4629      	mov	r1, r5
 80080d8:	4638      	mov	r0, r7
 80080da:	f7ff ff6b 	bl	8007fb4 <__ssputs_r>
 80080de:	3001      	adds	r0, #1
 80080e0:	f000 80a7 	beq.w	8008232 <_svfiprintf_r+0x1c6>
 80080e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080e6:	445a      	add	r2, fp
 80080e8:	9209      	str	r2, [sp, #36]	@ 0x24
 80080ea:	f89a 3000 	ldrb.w	r3, [sl]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	f000 809f 	beq.w	8008232 <_svfiprintf_r+0x1c6>
 80080f4:	2300      	movs	r3, #0
 80080f6:	f04f 32ff 	mov.w	r2, #4294967295
 80080fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080fe:	f10a 0a01 	add.w	sl, sl, #1
 8008102:	9304      	str	r3, [sp, #16]
 8008104:	9307      	str	r3, [sp, #28]
 8008106:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800810a:	931a      	str	r3, [sp, #104]	@ 0x68
 800810c:	4654      	mov	r4, sl
 800810e:	2205      	movs	r2, #5
 8008110:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008114:	484e      	ldr	r0, [pc, #312]	@ (8008250 <_svfiprintf_r+0x1e4>)
 8008116:	f7f8 f863 	bl	80001e0 <memchr>
 800811a:	9a04      	ldr	r2, [sp, #16]
 800811c:	b9d8      	cbnz	r0, 8008156 <_svfiprintf_r+0xea>
 800811e:	06d0      	lsls	r0, r2, #27
 8008120:	bf44      	itt	mi
 8008122:	2320      	movmi	r3, #32
 8008124:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008128:	0711      	lsls	r1, r2, #28
 800812a:	bf44      	itt	mi
 800812c:	232b      	movmi	r3, #43	@ 0x2b
 800812e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008132:	f89a 3000 	ldrb.w	r3, [sl]
 8008136:	2b2a      	cmp	r3, #42	@ 0x2a
 8008138:	d015      	beq.n	8008166 <_svfiprintf_r+0xfa>
 800813a:	9a07      	ldr	r2, [sp, #28]
 800813c:	4654      	mov	r4, sl
 800813e:	2000      	movs	r0, #0
 8008140:	f04f 0c0a 	mov.w	ip, #10
 8008144:	4621      	mov	r1, r4
 8008146:	f811 3b01 	ldrb.w	r3, [r1], #1
 800814a:	3b30      	subs	r3, #48	@ 0x30
 800814c:	2b09      	cmp	r3, #9
 800814e:	d94b      	bls.n	80081e8 <_svfiprintf_r+0x17c>
 8008150:	b1b0      	cbz	r0, 8008180 <_svfiprintf_r+0x114>
 8008152:	9207      	str	r2, [sp, #28]
 8008154:	e014      	b.n	8008180 <_svfiprintf_r+0x114>
 8008156:	eba0 0308 	sub.w	r3, r0, r8
 800815a:	fa09 f303 	lsl.w	r3, r9, r3
 800815e:	4313      	orrs	r3, r2
 8008160:	9304      	str	r3, [sp, #16]
 8008162:	46a2      	mov	sl, r4
 8008164:	e7d2      	b.n	800810c <_svfiprintf_r+0xa0>
 8008166:	9b03      	ldr	r3, [sp, #12]
 8008168:	1d19      	adds	r1, r3, #4
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	9103      	str	r1, [sp, #12]
 800816e:	2b00      	cmp	r3, #0
 8008170:	bfbb      	ittet	lt
 8008172:	425b      	neglt	r3, r3
 8008174:	f042 0202 	orrlt.w	r2, r2, #2
 8008178:	9307      	strge	r3, [sp, #28]
 800817a:	9307      	strlt	r3, [sp, #28]
 800817c:	bfb8      	it	lt
 800817e:	9204      	strlt	r2, [sp, #16]
 8008180:	7823      	ldrb	r3, [r4, #0]
 8008182:	2b2e      	cmp	r3, #46	@ 0x2e
 8008184:	d10a      	bne.n	800819c <_svfiprintf_r+0x130>
 8008186:	7863      	ldrb	r3, [r4, #1]
 8008188:	2b2a      	cmp	r3, #42	@ 0x2a
 800818a:	d132      	bne.n	80081f2 <_svfiprintf_r+0x186>
 800818c:	9b03      	ldr	r3, [sp, #12]
 800818e:	1d1a      	adds	r2, r3, #4
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	9203      	str	r2, [sp, #12]
 8008194:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008198:	3402      	adds	r4, #2
 800819a:	9305      	str	r3, [sp, #20]
 800819c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008260 <_svfiprintf_r+0x1f4>
 80081a0:	7821      	ldrb	r1, [r4, #0]
 80081a2:	2203      	movs	r2, #3
 80081a4:	4650      	mov	r0, sl
 80081a6:	f7f8 f81b 	bl	80001e0 <memchr>
 80081aa:	b138      	cbz	r0, 80081bc <_svfiprintf_r+0x150>
 80081ac:	9b04      	ldr	r3, [sp, #16]
 80081ae:	eba0 000a 	sub.w	r0, r0, sl
 80081b2:	2240      	movs	r2, #64	@ 0x40
 80081b4:	4082      	lsls	r2, r0
 80081b6:	4313      	orrs	r3, r2
 80081b8:	3401      	adds	r4, #1
 80081ba:	9304      	str	r3, [sp, #16]
 80081bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081c0:	4824      	ldr	r0, [pc, #144]	@ (8008254 <_svfiprintf_r+0x1e8>)
 80081c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80081c6:	2206      	movs	r2, #6
 80081c8:	f7f8 f80a 	bl	80001e0 <memchr>
 80081cc:	2800      	cmp	r0, #0
 80081ce:	d036      	beq.n	800823e <_svfiprintf_r+0x1d2>
 80081d0:	4b21      	ldr	r3, [pc, #132]	@ (8008258 <_svfiprintf_r+0x1ec>)
 80081d2:	bb1b      	cbnz	r3, 800821c <_svfiprintf_r+0x1b0>
 80081d4:	9b03      	ldr	r3, [sp, #12]
 80081d6:	3307      	adds	r3, #7
 80081d8:	f023 0307 	bic.w	r3, r3, #7
 80081dc:	3308      	adds	r3, #8
 80081de:	9303      	str	r3, [sp, #12]
 80081e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081e2:	4433      	add	r3, r6
 80081e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80081e6:	e76a      	b.n	80080be <_svfiprintf_r+0x52>
 80081e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80081ec:	460c      	mov	r4, r1
 80081ee:	2001      	movs	r0, #1
 80081f0:	e7a8      	b.n	8008144 <_svfiprintf_r+0xd8>
 80081f2:	2300      	movs	r3, #0
 80081f4:	3401      	adds	r4, #1
 80081f6:	9305      	str	r3, [sp, #20]
 80081f8:	4619      	mov	r1, r3
 80081fa:	f04f 0c0a 	mov.w	ip, #10
 80081fe:	4620      	mov	r0, r4
 8008200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008204:	3a30      	subs	r2, #48	@ 0x30
 8008206:	2a09      	cmp	r2, #9
 8008208:	d903      	bls.n	8008212 <_svfiprintf_r+0x1a6>
 800820a:	2b00      	cmp	r3, #0
 800820c:	d0c6      	beq.n	800819c <_svfiprintf_r+0x130>
 800820e:	9105      	str	r1, [sp, #20]
 8008210:	e7c4      	b.n	800819c <_svfiprintf_r+0x130>
 8008212:	fb0c 2101 	mla	r1, ip, r1, r2
 8008216:	4604      	mov	r4, r0
 8008218:	2301      	movs	r3, #1
 800821a:	e7f0      	b.n	80081fe <_svfiprintf_r+0x192>
 800821c:	ab03      	add	r3, sp, #12
 800821e:	9300      	str	r3, [sp, #0]
 8008220:	462a      	mov	r2, r5
 8008222:	4b0e      	ldr	r3, [pc, #56]	@ (800825c <_svfiprintf_r+0x1f0>)
 8008224:	a904      	add	r1, sp, #16
 8008226:	4638      	mov	r0, r7
 8008228:	f7fd fe96 	bl	8005f58 <_printf_float>
 800822c:	1c42      	adds	r2, r0, #1
 800822e:	4606      	mov	r6, r0
 8008230:	d1d6      	bne.n	80081e0 <_svfiprintf_r+0x174>
 8008232:	89ab      	ldrh	r3, [r5, #12]
 8008234:	065b      	lsls	r3, r3, #25
 8008236:	f53f af2d 	bmi.w	8008094 <_svfiprintf_r+0x28>
 800823a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800823c:	e72c      	b.n	8008098 <_svfiprintf_r+0x2c>
 800823e:	ab03      	add	r3, sp, #12
 8008240:	9300      	str	r3, [sp, #0]
 8008242:	462a      	mov	r2, r5
 8008244:	4b05      	ldr	r3, [pc, #20]	@ (800825c <_svfiprintf_r+0x1f0>)
 8008246:	a904      	add	r1, sp, #16
 8008248:	4638      	mov	r0, r7
 800824a:	f7fe f91d 	bl	8006488 <_printf_i>
 800824e:	e7ed      	b.n	800822c <_svfiprintf_r+0x1c0>
 8008250:	08009bc8 	.word	0x08009bc8
 8008254:	08009bd2 	.word	0x08009bd2
 8008258:	08005f59 	.word	0x08005f59
 800825c:	08007fb5 	.word	0x08007fb5
 8008260:	08009bce 	.word	0x08009bce

08008264 <__sflush_r>:
 8008264:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800826c:	0716      	lsls	r6, r2, #28
 800826e:	4605      	mov	r5, r0
 8008270:	460c      	mov	r4, r1
 8008272:	d454      	bmi.n	800831e <__sflush_r+0xba>
 8008274:	684b      	ldr	r3, [r1, #4]
 8008276:	2b00      	cmp	r3, #0
 8008278:	dc02      	bgt.n	8008280 <__sflush_r+0x1c>
 800827a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800827c:	2b00      	cmp	r3, #0
 800827e:	dd48      	ble.n	8008312 <__sflush_r+0xae>
 8008280:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008282:	2e00      	cmp	r6, #0
 8008284:	d045      	beq.n	8008312 <__sflush_r+0xae>
 8008286:	2300      	movs	r3, #0
 8008288:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800828c:	682f      	ldr	r7, [r5, #0]
 800828e:	6a21      	ldr	r1, [r4, #32]
 8008290:	602b      	str	r3, [r5, #0]
 8008292:	d030      	beq.n	80082f6 <__sflush_r+0x92>
 8008294:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008296:	89a3      	ldrh	r3, [r4, #12]
 8008298:	0759      	lsls	r1, r3, #29
 800829a:	d505      	bpl.n	80082a8 <__sflush_r+0x44>
 800829c:	6863      	ldr	r3, [r4, #4]
 800829e:	1ad2      	subs	r2, r2, r3
 80082a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80082a2:	b10b      	cbz	r3, 80082a8 <__sflush_r+0x44>
 80082a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80082a6:	1ad2      	subs	r2, r2, r3
 80082a8:	2300      	movs	r3, #0
 80082aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80082ac:	6a21      	ldr	r1, [r4, #32]
 80082ae:	4628      	mov	r0, r5
 80082b0:	47b0      	blx	r6
 80082b2:	1c43      	adds	r3, r0, #1
 80082b4:	89a3      	ldrh	r3, [r4, #12]
 80082b6:	d106      	bne.n	80082c6 <__sflush_r+0x62>
 80082b8:	6829      	ldr	r1, [r5, #0]
 80082ba:	291d      	cmp	r1, #29
 80082bc:	d82b      	bhi.n	8008316 <__sflush_r+0xb2>
 80082be:	4a2a      	ldr	r2, [pc, #168]	@ (8008368 <__sflush_r+0x104>)
 80082c0:	410a      	asrs	r2, r1
 80082c2:	07d6      	lsls	r6, r2, #31
 80082c4:	d427      	bmi.n	8008316 <__sflush_r+0xb2>
 80082c6:	2200      	movs	r2, #0
 80082c8:	6062      	str	r2, [r4, #4]
 80082ca:	04d9      	lsls	r1, r3, #19
 80082cc:	6922      	ldr	r2, [r4, #16]
 80082ce:	6022      	str	r2, [r4, #0]
 80082d0:	d504      	bpl.n	80082dc <__sflush_r+0x78>
 80082d2:	1c42      	adds	r2, r0, #1
 80082d4:	d101      	bne.n	80082da <__sflush_r+0x76>
 80082d6:	682b      	ldr	r3, [r5, #0]
 80082d8:	b903      	cbnz	r3, 80082dc <__sflush_r+0x78>
 80082da:	6560      	str	r0, [r4, #84]	@ 0x54
 80082dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80082de:	602f      	str	r7, [r5, #0]
 80082e0:	b1b9      	cbz	r1, 8008312 <__sflush_r+0xae>
 80082e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80082e6:	4299      	cmp	r1, r3
 80082e8:	d002      	beq.n	80082f0 <__sflush_r+0x8c>
 80082ea:	4628      	mov	r0, r5
 80082ec:	f7ff f9e0 	bl	80076b0 <_free_r>
 80082f0:	2300      	movs	r3, #0
 80082f2:	6363      	str	r3, [r4, #52]	@ 0x34
 80082f4:	e00d      	b.n	8008312 <__sflush_r+0xae>
 80082f6:	2301      	movs	r3, #1
 80082f8:	4628      	mov	r0, r5
 80082fa:	47b0      	blx	r6
 80082fc:	4602      	mov	r2, r0
 80082fe:	1c50      	adds	r0, r2, #1
 8008300:	d1c9      	bne.n	8008296 <__sflush_r+0x32>
 8008302:	682b      	ldr	r3, [r5, #0]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d0c6      	beq.n	8008296 <__sflush_r+0x32>
 8008308:	2b1d      	cmp	r3, #29
 800830a:	d001      	beq.n	8008310 <__sflush_r+0xac>
 800830c:	2b16      	cmp	r3, #22
 800830e:	d11e      	bne.n	800834e <__sflush_r+0xea>
 8008310:	602f      	str	r7, [r5, #0]
 8008312:	2000      	movs	r0, #0
 8008314:	e022      	b.n	800835c <__sflush_r+0xf8>
 8008316:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800831a:	b21b      	sxth	r3, r3
 800831c:	e01b      	b.n	8008356 <__sflush_r+0xf2>
 800831e:	690f      	ldr	r7, [r1, #16]
 8008320:	2f00      	cmp	r7, #0
 8008322:	d0f6      	beq.n	8008312 <__sflush_r+0xae>
 8008324:	0793      	lsls	r3, r2, #30
 8008326:	680e      	ldr	r6, [r1, #0]
 8008328:	bf08      	it	eq
 800832a:	694b      	ldreq	r3, [r1, #20]
 800832c:	600f      	str	r7, [r1, #0]
 800832e:	bf18      	it	ne
 8008330:	2300      	movne	r3, #0
 8008332:	eba6 0807 	sub.w	r8, r6, r7
 8008336:	608b      	str	r3, [r1, #8]
 8008338:	f1b8 0f00 	cmp.w	r8, #0
 800833c:	dde9      	ble.n	8008312 <__sflush_r+0xae>
 800833e:	6a21      	ldr	r1, [r4, #32]
 8008340:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008342:	4643      	mov	r3, r8
 8008344:	463a      	mov	r2, r7
 8008346:	4628      	mov	r0, r5
 8008348:	47b0      	blx	r6
 800834a:	2800      	cmp	r0, #0
 800834c:	dc08      	bgt.n	8008360 <__sflush_r+0xfc>
 800834e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008352:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008356:	81a3      	strh	r3, [r4, #12]
 8008358:	f04f 30ff 	mov.w	r0, #4294967295
 800835c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008360:	4407      	add	r7, r0
 8008362:	eba8 0800 	sub.w	r8, r8, r0
 8008366:	e7e7      	b.n	8008338 <__sflush_r+0xd4>
 8008368:	dfbffffe 	.word	0xdfbffffe

0800836c <_fflush_r>:
 800836c:	b538      	push	{r3, r4, r5, lr}
 800836e:	690b      	ldr	r3, [r1, #16]
 8008370:	4605      	mov	r5, r0
 8008372:	460c      	mov	r4, r1
 8008374:	b913      	cbnz	r3, 800837c <_fflush_r+0x10>
 8008376:	2500      	movs	r5, #0
 8008378:	4628      	mov	r0, r5
 800837a:	bd38      	pop	{r3, r4, r5, pc}
 800837c:	b118      	cbz	r0, 8008386 <_fflush_r+0x1a>
 800837e:	6a03      	ldr	r3, [r0, #32]
 8008380:	b90b      	cbnz	r3, 8008386 <_fflush_r+0x1a>
 8008382:	f7fe fa2d 	bl	80067e0 <__sinit>
 8008386:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d0f3      	beq.n	8008376 <_fflush_r+0xa>
 800838e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008390:	07d0      	lsls	r0, r2, #31
 8008392:	d404      	bmi.n	800839e <_fflush_r+0x32>
 8008394:	0599      	lsls	r1, r3, #22
 8008396:	d402      	bmi.n	800839e <_fflush_r+0x32>
 8008398:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800839a:	f7fe fb38 	bl	8006a0e <__retarget_lock_acquire_recursive>
 800839e:	4628      	mov	r0, r5
 80083a0:	4621      	mov	r1, r4
 80083a2:	f7ff ff5f 	bl	8008264 <__sflush_r>
 80083a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80083a8:	07da      	lsls	r2, r3, #31
 80083aa:	4605      	mov	r5, r0
 80083ac:	d4e4      	bmi.n	8008378 <_fflush_r+0xc>
 80083ae:	89a3      	ldrh	r3, [r4, #12]
 80083b0:	059b      	lsls	r3, r3, #22
 80083b2:	d4e1      	bmi.n	8008378 <_fflush_r+0xc>
 80083b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80083b6:	f7fe fb2b 	bl	8006a10 <__retarget_lock_release_recursive>
 80083ba:	e7dd      	b.n	8008378 <_fflush_r+0xc>

080083bc <memmove>:
 80083bc:	4288      	cmp	r0, r1
 80083be:	b510      	push	{r4, lr}
 80083c0:	eb01 0402 	add.w	r4, r1, r2
 80083c4:	d902      	bls.n	80083cc <memmove+0x10>
 80083c6:	4284      	cmp	r4, r0
 80083c8:	4623      	mov	r3, r4
 80083ca:	d807      	bhi.n	80083dc <memmove+0x20>
 80083cc:	1e43      	subs	r3, r0, #1
 80083ce:	42a1      	cmp	r1, r4
 80083d0:	d008      	beq.n	80083e4 <memmove+0x28>
 80083d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80083d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80083da:	e7f8      	b.n	80083ce <memmove+0x12>
 80083dc:	4402      	add	r2, r0
 80083de:	4601      	mov	r1, r0
 80083e0:	428a      	cmp	r2, r1
 80083e2:	d100      	bne.n	80083e6 <memmove+0x2a>
 80083e4:	bd10      	pop	{r4, pc}
 80083e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80083ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80083ee:	e7f7      	b.n	80083e0 <memmove+0x24>

080083f0 <_sbrk_r>:
 80083f0:	b538      	push	{r3, r4, r5, lr}
 80083f2:	4d06      	ldr	r5, [pc, #24]	@ (800840c <_sbrk_r+0x1c>)
 80083f4:	2300      	movs	r3, #0
 80083f6:	4604      	mov	r4, r0
 80083f8:	4608      	mov	r0, r1
 80083fa:	602b      	str	r3, [r5, #0]
 80083fc:	f7f9 fd3e 	bl	8001e7c <_sbrk>
 8008400:	1c43      	adds	r3, r0, #1
 8008402:	d102      	bne.n	800840a <_sbrk_r+0x1a>
 8008404:	682b      	ldr	r3, [r5, #0]
 8008406:	b103      	cbz	r3, 800840a <_sbrk_r+0x1a>
 8008408:	6023      	str	r3, [r4, #0]
 800840a:	bd38      	pop	{r3, r4, r5, pc}
 800840c:	20000640 	.word	0x20000640

08008410 <memcpy>:
 8008410:	440a      	add	r2, r1
 8008412:	4291      	cmp	r1, r2
 8008414:	f100 33ff 	add.w	r3, r0, #4294967295
 8008418:	d100      	bne.n	800841c <memcpy+0xc>
 800841a:	4770      	bx	lr
 800841c:	b510      	push	{r4, lr}
 800841e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008422:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008426:	4291      	cmp	r1, r2
 8008428:	d1f9      	bne.n	800841e <memcpy+0xe>
 800842a:	bd10      	pop	{r4, pc}

0800842c <__assert_func>:
 800842c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800842e:	4614      	mov	r4, r2
 8008430:	461a      	mov	r2, r3
 8008432:	4b09      	ldr	r3, [pc, #36]	@ (8008458 <__assert_func+0x2c>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4605      	mov	r5, r0
 8008438:	68d8      	ldr	r0, [r3, #12]
 800843a:	b954      	cbnz	r4, 8008452 <__assert_func+0x26>
 800843c:	4b07      	ldr	r3, [pc, #28]	@ (800845c <__assert_func+0x30>)
 800843e:	461c      	mov	r4, r3
 8008440:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008444:	9100      	str	r1, [sp, #0]
 8008446:	462b      	mov	r3, r5
 8008448:	4905      	ldr	r1, [pc, #20]	@ (8008460 <__assert_func+0x34>)
 800844a:	f000 f86f 	bl	800852c <fiprintf>
 800844e:	f000 f87f 	bl	8008550 <abort>
 8008452:	4b04      	ldr	r3, [pc, #16]	@ (8008464 <__assert_func+0x38>)
 8008454:	e7f4      	b.n	8008440 <__assert_func+0x14>
 8008456:	bf00      	nop
 8008458:	2000003c 	.word	0x2000003c
 800845c:	08009c1e 	.word	0x08009c1e
 8008460:	08009bf0 	.word	0x08009bf0
 8008464:	08009be3 	.word	0x08009be3

08008468 <_calloc_r>:
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	fba1 5402 	umull	r5, r4, r1, r2
 800846e:	b93c      	cbnz	r4, 8008480 <_calloc_r+0x18>
 8008470:	4629      	mov	r1, r5
 8008472:	f7ff f991 	bl	8007798 <_malloc_r>
 8008476:	4606      	mov	r6, r0
 8008478:	b928      	cbnz	r0, 8008486 <_calloc_r+0x1e>
 800847a:	2600      	movs	r6, #0
 800847c:	4630      	mov	r0, r6
 800847e:	bd70      	pop	{r4, r5, r6, pc}
 8008480:	220c      	movs	r2, #12
 8008482:	6002      	str	r2, [r0, #0]
 8008484:	e7f9      	b.n	800847a <_calloc_r+0x12>
 8008486:	462a      	mov	r2, r5
 8008488:	4621      	mov	r1, r4
 800848a:	f7fe fa42 	bl	8006912 <memset>
 800848e:	e7f5      	b.n	800847c <_calloc_r+0x14>

08008490 <__ascii_mbtowc>:
 8008490:	b082      	sub	sp, #8
 8008492:	b901      	cbnz	r1, 8008496 <__ascii_mbtowc+0x6>
 8008494:	a901      	add	r1, sp, #4
 8008496:	b142      	cbz	r2, 80084aa <__ascii_mbtowc+0x1a>
 8008498:	b14b      	cbz	r3, 80084ae <__ascii_mbtowc+0x1e>
 800849a:	7813      	ldrb	r3, [r2, #0]
 800849c:	600b      	str	r3, [r1, #0]
 800849e:	7812      	ldrb	r2, [r2, #0]
 80084a0:	1e10      	subs	r0, r2, #0
 80084a2:	bf18      	it	ne
 80084a4:	2001      	movne	r0, #1
 80084a6:	b002      	add	sp, #8
 80084a8:	4770      	bx	lr
 80084aa:	4610      	mov	r0, r2
 80084ac:	e7fb      	b.n	80084a6 <__ascii_mbtowc+0x16>
 80084ae:	f06f 0001 	mvn.w	r0, #1
 80084b2:	e7f8      	b.n	80084a6 <__ascii_mbtowc+0x16>

080084b4 <_realloc_r>:
 80084b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084b8:	4680      	mov	r8, r0
 80084ba:	4615      	mov	r5, r2
 80084bc:	460c      	mov	r4, r1
 80084be:	b921      	cbnz	r1, 80084ca <_realloc_r+0x16>
 80084c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084c4:	4611      	mov	r1, r2
 80084c6:	f7ff b967 	b.w	8007798 <_malloc_r>
 80084ca:	b92a      	cbnz	r2, 80084d8 <_realloc_r+0x24>
 80084cc:	f7ff f8f0 	bl	80076b0 <_free_r>
 80084d0:	2400      	movs	r4, #0
 80084d2:	4620      	mov	r0, r4
 80084d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084d8:	f000 f841 	bl	800855e <_malloc_usable_size_r>
 80084dc:	4285      	cmp	r5, r0
 80084de:	4606      	mov	r6, r0
 80084e0:	d802      	bhi.n	80084e8 <_realloc_r+0x34>
 80084e2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80084e6:	d8f4      	bhi.n	80084d2 <_realloc_r+0x1e>
 80084e8:	4629      	mov	r1, r5
 80084ea:	4640      	mov	r0, r8
 80084ec:	f7ff f954 	bl	8007798 <_malloc_r>
 80084f0:	4607      	mov	r7, r0
 80084f2:	2800      	cmp	r0, #0
 80084f4:	d0ec      	beq.n	80084d0 <_realloc_r+0x1c>
 80084f6:	42b5      	cmp	r5, r6
 80084f8:	462a      	mov	r2, r5
 80084fa:	4621      	mov	r1, r4
 80084fc:	bf28      	it	cs
 80084fe:	4632      	movcs	r2, r6
 8008500:	f7ff ff86 	bl	8008410 <memcpy>
 8008504:	4621      	mov	r1, r4
 8008506:	4640      	mov	r0, r8
 8008508:	f7ff f8d2 	bl	80076b0 <_free_r>
 800850c:	463c      	mov	r4, r7
 800850e:	e7e0      	b.n	80084d2 <_realloc_r+0x1e>

08008510 <__ascii_wctomb>:
 8008510:	4603      	mov	r3, r0
 8008512:	4608      	mov	r0, r1
 8008514:	b141      	cbz	r1, 8008528 <__ascii_wctomb+0x18>
 8008516:	2aff      	cmp	r2, #255	@ 0xff
 8008518:	d904      	bls.n	8008524 <__ascii_wctomb+0x14>
 800851a:	228a      	movs	r2, #138	@ 0x8a
 800851c:	601a      	str	r2, [r3, #0]
 800851e:	f04f 30ff 	mov.w	r0, #4294967295
 8008522:	4770      	bx	lr
 8008524:	700a      	strb	r2, [r1, #0]
 8008526:	2001      	movs	r0, #1
 8008528:	4770      	bx	lr
	...

0800852c <fiprintf>:
 800852c:	b40e      	push	{r1, r2, r3}
 800852e:	b503      	push	{r0, r1, lr}
 8008530:	4601      	mov	r1, r0
 8008532:	ab03      	add	r3, sp, #12
 8008534:	4805      	ldr	r0, [pc, #20]	@ (800854c <fiprintf+0x20>)
 8008536:	f853 2b04 	ldr.w	r2, [r3], #4
 800853a:	6800      	ldr	r0, [r0, #0]
 800853c:	9301      	str	r3, [sp, #4]
 800853e:	f000 f83f 	bl	80085c0 <_vfiprintf_r>
 8008542:	b002      	add	sp, #8
 8008544:	f85d eb04 	ldr.w	lr, [sp], #4
 8008548:	b003      	add	sp, #12
 800854a:	4770      	bx	lr
 800854c:	2000003c 	.word	0x2000003c

08008550 <abort>:
 8008550:	b508      	push	{r3, lr}
 8008552:	2006      	movs	r0, #6
 8008554:	f000 fa08 	bl	8008968 <raise>
 8008558:	2001      	movs	r0, #1
 800855a:	f7f9 fc17 	bl	8001d8c <_exit>

0800855e <_malloc_usable_size_r>:
 800855e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008562:	1f18      	subs	r0, r3, #4
 8008564:	2b00      	cmp	r3, #0
 8008566:	bfbc      	itt	lt
 8008568:	580b      	ldrlt	r3, [r1, r0]
 800856a:	18c0      	addlt	r0, r0, r3
 800856c:	4770      	bx	lr

0800856e <__sfputc_r>:
 800856e:	6893      	ldr	r3, [r2, #8]
 8008570:	3b01      	subs	r3, #1
 8008572:	2b00      	cmp	r3, #0
 8008574:	b410      	push	{r4}
 8008576:	6093      	str	r3, [r2, #8]
 8008578:	da08      	bge.n	800858c <__sfputc_r+0x1e>
 800857a:	6994      	ldr	r4, [r2, #24]
 800857c:	42a3      	cmp	r3, r4
 800857e:	db01      	blt.n	8008584 <__sfputc_r+0x16>
 8008580:	290a      	cmp	r1, #10
 8008582:	d103      	bne.n	800858c <__sfputc_r+0x1e>
 8008584:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008588:	f000 b932 	b.w	80087f0 <__swbuf_r>
 800858c:	6813      	ldr	r3, [r2, #0]
 800858e:	1c58      	adds	r0, r3, #1
 8008590:	6010      	str	r0, [r2, #0]
 8008592:	7019      	strb	r1, [r3, #0]
 8008594:	4608      	mov	r0, r1
 8008596:	f85d 4b04 	ldr.w	r4, [sp], #4
 800859a:	4770      	bx	lr

0800859c <__sfputs_r>:
 800859c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800859e:	4606      	mov	r6, r0
 80085a0:	460f      	mov	r7, r1
 80085a2:	4614      	mov	r4, r2
 80085a4:	18d5      	adds	r5, r2, r3
 80085a6:	42ac      	cmp	r4, r5
 80085a8:	d101      	bne.n	80085ae <__sfputs_r+0x12>
 80085aa:	2000      	movs	r0, #0
 80085ac:	e007      	b.n	80085be <__sfputs_r+0x22>
 80085ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085b2:	463a      	mov	r2, r7
 80085b4:	4630      	mov	r0, r6
 80085b6:	f7ff ffda 	bl	800856e <__sfputc_r>
 80085ba:	1c43      	adds	r3, r0, #1
 80085bc:	d1f3      	bne.n	80085a6 <__sfputs_r+0xa>
 80085be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080085c0 <_vfiprintf_r>:
 80085c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085c4:	460d      	mov	r5, r1
 80085c6:	b09d      	sub	sp, #116	@ 0x74
 80085c8:	4614      	mov	r4, r2
 80085ca:	4698      	mov	r8, r3
 80085cc:	4606      	mov	r6, r0
 80085ce:	b118      	cbz	r0, 80085d8 <_vfiprintf_r+0x18>
 80085d0:	6a03      	ldr	r3, [r0, #32]
 80085d2:	b90b      	cbnz	r3, 80085d8 <_vfiprintf_r+0x18>
 80085d4:	f7fe f904 	bl	80067e0 <__sinit>
 80085d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80085da:	07d9      	lsls	r1, r3, #31
 80085dc:	d405      	bmi.n	80085ea <_vfiprintf_r+0x2a>
 80085de:	89ab      	ldrh	r3, [r5, #12]
 80085e0:	059a      	lsls	r2, r3, #22
 80085e2:	d402      	bmi.n	80085ea <_vfiprintf_r+0x2a>
 80085e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80085e6:	f7fe fa12 	bl	8006a0e <__retarget_lock_acquire_recursive>
 80085ea:	89ab      	ldrh	r3, [r5, #12]
 80085ec:	071b      	lsls	r3, r3, #28
 80085ee:	d501      	bpl.n	80085f4 <_vfiprintf_r+0x34>
 80085f0:	692b      	ldr	r3, [r5, #16]
 80085f2:	b99b      	cbnz	r3, 800861c <_vfiprintf_r+0x5c>
 80085f4:	4629      	mov	r1, r5
 80085f6:	4630      	mov	r0, r6
 80085f8:	f000 f938 	bl	800886c <__swsetup_r>
 80085fc:	b170      	cbz	r0, 800861c <_vfiprintf_r+0x5c>
 80085fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008600:	07dc      	lsls	r4, r3, #31
 8008602:	d504      	bpl.n	800860e <_vfiprintf_r+0x4e>
 8008604:	f04f 30ff 	mov.w	r0, #4294967295
 8008608:	b01d      	add	sp, #116	@ 0x74
 800860a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800860e:	89ab      	ldrh	r3, [r5, #12]
 8008610:	0598      	lsls	r0, r3, #22
 8008612:	d4f7      	bmi.n	8008604 <_vfiprintf_r+0x44>
 8008614:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008616:	f7fe f9fb 	bl	8006a10 <__retarget_lock_release_recursive>
 800861a:	e7f3      	b.n	8008604 <_vfiprintf_r+0x44>
 800861c:	2300      	movs	r3, #0
 800861e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008620:	2320      	movs	r3, #32
 8008622:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008626:	f8cd 800c 	str.w	r8, [sp, #12]
 800862a:	2330      	movs	r3, #48	@ 0x30
 800862c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80087dc <_vfiprintf_r+0x21c>
 8008630:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008634:	f04f 0901 	mov.w	r9, #1
 8008638:	4623      	mov	r3, r4
 800863a:	469a      	mov	sl, r3
 800863c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008640:	b10a      	cbz	r2, 8008646 <_vfiprintf_r+0x86>
 8008642:	2a25      	cmp	r2, #37	@ 0x25
 8008644:	d1f9      	bne.n	800863a <_vfiprintf_r+0x7a>
 8008646:	ebba 0b04 	subs.w	fp, sl, r4
 800864a:	d00b      	beq.n	8008664 <_vfiprintf_r+0xa4>
 800864c:	465b      	mov	r3, fp
 800864e:	4622      	mov	r2, r4
 8008650:	4629      	mov	r1, r5
 8008652:	4630      	mov	r0, r6
 8008654:	f7ff ffa2 	bl	800859c <__sfputs_r>
 8008658:	3001      	adds	r0, #1
 800865a:	f000 80a7 	beq.w	80087ac <_vfiprintf_r+0x1ec>
 800865e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008660:	445a      	add	r2, fp
 8008662:	9209      	str	r2, [sp, #36]	@ 0x24
 8008664:	f89a 3000 	ldrb.w	r3, [sl]
 8008668:	2b00      	cmp	r3, #0
 800866a:	f000 809f 	beq.w	80087ac <_vfiprintf_r+0x1ec>
 800866e:	2300      	movs	r3, #0
 8008670:	f04f 32ff 	mov.w	r2, #4294967295
 8008674:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008678:	f10a 0a01 	add.w	sl, sl, #1
 800867c:	9304      	str	r3, [sp, #16]
 800867e:	9307      	str	r3, [sp, #28]
 8008680:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008684:	931a      	str	r3, [sp, #104]	@ 0x68
 8008686:	4654      	mov	r4, sl
 8008688:	2205      	movs	r2, #5
 800868a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800868e:	4853      	ldr	r0, [pc, #332]	@ (80087dc <_vfiprintf_r+0x21c>)
 8008690:	f7f7 fda6 	bl	80001e0 <memchr>
 8008694:	9a04      	ldr	r2, [sp, #16]
 8008696:	b9d8      	cbnz	r0, 80086d0 <_vfiprintf_r+0x110>
 8008698:	06d1      	lsls	r1, r2, #27
 800869a:	bf44      	itt	mi
 800869c:	2320      	movmi	r3, #32
 800869e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80086a2:	0713      	lsls	r3, r2, #28
 80086a4:	bf44      	itt	mi
 80086a6:	232b      	movmi	r3, #43	@ 0x2b
 80086a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80086ac:	f89a 3000 	ldrb.w	r3, [sl]
 80086b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80086b2:	d015      	beq.n	80086e0 <_vfiprintf_r+0x120>
 80086b4:	9a07      	ldr	r2, [sp, #28]
 80086b6:	4654      	mov	r4, sl
 80086b8:	2000      	movs	r0, #0
 80086ba:	f04f 0c0a 	mov.w	ip, #10
 80086be:	4621      	mov	r1, r4
 80086c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086c4:	3b30      	subs	r3, #48	@ 0x30
 80086c6:	2b09      	cmp	r3, #9
 80086c8:	d94b      	bls.n	8008762 <_vfiprintf_r+0x1a2>
 80086ca:	b1b0      	cbz	r0, 80086fa <_vfiprintf_r+0x13a>
 80086cc:	9207      	str	r2, [sp, #28]
 80086ce:	e014      	b.n	80086fa <_vfiprintf_r+0x13a>
 80086d0:	eba0 0308 	sub.w	r3, r0, r8
 80086d4:	fa09 f303 	lsl.w	r3, r9, r3
 80086d8:	4313      	orrs	r3, r2
 80086da:	9304      	str	r3, [sp, #16]
 80086dc:	46a2      	mov	sl, r4
 80086de:	e7d2      	b.n	8008686 <_vfiprintf_r+0xc6>
 80086e0:	9b03      	ldr	r3, [sp, #12]
 80086e2:	1d19      	adds	r1, r3, #4
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	9103      	str	r1, [sp, #12]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	bfbb      	ittet	lt
 80086ec:	425b      	neglt	r3, r3
 80086ee:	f042 0202 	orrlt.w	r2, r2, #2
 80086f2:	9307      	strge	r3, [sp, #28]
 80086f4:	9307      	strlt	r3, [sp, #28]
 80086f6:	bfb8      	it	lt
 80086f8:	9204      	strlt	r2, [sp, #16]
 80086fa:	7823      	ldrb	r3, [r4, #0]
 80086fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80086fe:	d10a      	bne.n	8008716 <_vfiprintf_r+0x156>
 8008700:	7863      	ldrb	r3, [r4, #1]
 8008702:	2b2a      	cmp	r3, #42	@ 0x2a
 8008704:	d132      	bne.n	800876c <_vfiprintf_r+0x1ac>
 8008706:	9b03      	ldr	r3, [sp, #12]
 8008708:	1d1a      	adds	r2, r3, #4
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	9203      	str	r2, [sp, #12]
 800870e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008712:	3402      	adds	r4, #2
 8008714:	9305      	str	r3, [sp, #20]
 8008716:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80087ec <_vfiprintf_r+0x22c>
 800871a:	7821      	ldrb	r1, [r4, #0]
 800871c:	2203      	movs	r2, #3
 800871e:	4650      	mov	r0, sl
 8008720:	f7f7 fd5e 	bl	80001e0 <memchr>
 8008724:	b138      	cbz	r0, 8008736 <_vfiprintf_r+0x176>
 8008726:	9b04      	ldr	r3, [sp, #16]
 8008728:	eba0 000a 	sub.w	r0, r0, sl
 800872c:	2240      	movs	r2, #64	@ 0x40
 800872e:	4082      	lsls	r2, r0
 8008730:	4313      	orrs	r3, r2
 8008732:	3401      	adds	r4, #1
 8008734:	9304      	str	r3, [sp, #16]
 8008736:	f814 1b01 	ldrb.w	r1, [r4], #1
 800873a:	4829      	ldr	r0, [pc, #164]	@ (80087e0 <_vfiprintf_r+0x220>)
 800873c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008740:	2206      	movs	r2, #6
 8008742:	f7f7 fd4d 	bl	80001e0 <memchr>
 8008746:	2800      	cmp	r0, #0
 8008748:	d03f      	beq.n	80087ca <_vfiprintf_r+0x20a>
 800874a:	4b26      	ldr	r3, [pc, #152]	@ (80087e4 <_vfiprintf_r+0x224>)
 800874c:	bb1b      	cbnz	r3, 8008796 <_vfiprintf_r+0x1d6>
 800874e:	9b03      	ldr	r3, [sp, #12]
 8008750:	3307      	adds	r3, #7
 8008752:	f023 0307 	bic.w	r3, r3, #7
 8008756:	3308      	adds	r3, #8
 8008758:	9303      	str	r3, [sp, #12]
 800875a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800875c:	443b      	add	r3, r7
 800875e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008760:	e76a      	b.n	8008638 <_vfiprintf_r+0x78>
 8008762:	fb0c 3202 	mla	r2, ip, r2, r3
 8008766:	460c      	mov	r4, r1
 8008768:	2001      	movs	r0, #1
 800876a:	e7a8      	b.n	80086be <_vfiprintf_r+0xfe>
 800876c:	2300      	movs	r3, #0
 800876e:	3401      	adds	r4, #1
 8008770:	9305      	str	r3, [sp, #20]
 8008772:	4619      	mov	r1, r3
 8008774:	f04f 0c0a 	mov.w	ip, #10
 8008778:	4620      	mov	r0, r4
 800877a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800877e:	3a30      	subs	r2, #48	@ 0x30
 8008780:	2a09      	cmp	r2, #9
 8008782:	d903      	bls.n	800878c <_vfiprintf_r+0x1cc>
 8008784:	2b00      	cmp	r3, #0
 8008786:	d0c6      	beq.n	8008716 <_vfiprintf_r+0x156>
 8008788:	9105      	str	r1, [sp, #20]
 800878a:	e7c4      	b.n	8008716 <_vfiprintf_r+0x156>
 800878c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008790:	4604      	mov	r4, r0
 8008792:	2301      	movs	r3, #1
 8008794:	e7f0      	b.n	8008778 <_vfiprintf_r+0x1b8>
 8008796:	ab03      	add	r3, sp, #12
 8008798:	9300      	str	r3, [sp, #0]
 800879a:	462a      	mov	r2, r5
 800879c:	4b12      	ldr	r3, [pc, #72]	@ (80087e8 <_vfiprintf_r+0x228>)
 800879e:	a904      	add	r1, sp, #16
 80087a0:	4630      	mov	r0, r6
 80087a2:	f7fd fbd9 	bl	8005f58 <_printf_float>
 80087a6:	4607      	mov	r7, r0
 80087a8:	1c78      	adds	r0, r7, #1
 80087aa:	d1d6      	bne.n	800875a <_vfiprintf_r+0x19a>
 80087ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80087ae:	07d9      	lsls	r1, r3, #31
 80087b0:	d405      	bmi.n	80087be <_vfiprintf_r+0x1fe>
 80087b2:	89ab      	ldrh	r3, [r5, #12]
 80087b4:	059a      	lsls	r2, r3, #22
 80087b6:	d402      	bmi.n	80087be <_vfiprintf_r+0x1fe>
 80087b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80087ba:	f7fe f929 	bl	8006a10 <__retarget_lock_release_recursive>
 80087be:	89ab      	ldrh	r3, [r5, #12]
 80087c0:	065b      	lsls	r3, r3, #25
 80087c2:	f53f af1f 	bmi.w	8008604 <_vfiprintf_r+0x44>
 80087c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80087c8:	e71e      	b.n	8008608 <_vfiprintf_r+0x48>
 80087ca:	ab03      	add	r3, sp, #12
 80087cc:	9300      	str	r3, [sp, #0]
 80087ce:	462a      	mov	r2, r5
 80087d0:	4b05      	ldr	r3, [pc, #20]	@ (80087e8 <_vfiprintf_r+0x228>)
 80087d2:	a904      	add	r1, sp, #16
 80087d4:	4630      	mov	r0, r6
 80087d6:	f7fd fe57 	bl	8006488 <_printf_i>
 80087da:	e7e4      	b.n	80087a6 <_vfiprintf_r+0x1e6>
 80087dc:	08009bc8 	.word	0x08009bc8
 80087e0:	08009bd2 	.word	0x08009bd2
 80087e4:	08005f59 	.word	0x08005f59
 80087e8:	0800859d 	.word	0x0800859d
 80087ec:	08009bce 	.word	0x08009bce

080087f0 <__swbuf_r>:
 80087f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087f2:	460e      	mov	r6, r1
 80087f4:	4614      	mov	r4, r2
 80087f6:	4605      	mov	r5, r0
 80087f8:	b118      	cbz	r0, 8008802 <__swbuf_r+0x12>
 80087fa:	6a03      	ldr	r3, [r0, #32]
 80087fc:	b90b      	cbnz	r3, 8008802 <__swbuf_r+0x12>
 80087fe:	f7fd ffef 	bl	80067e0 <__sinit>
 8008802:	69a3      	ldr	r3, [r4, #24]
 8008804:	60a3      	str	r3, [r4, #8]
 8008806:	89a3      	ldrh	r3, [r4, #12]
 8008808:	071a      	lsls	r2, r3, #28
 800880a:	d501      	bpl.n	8008810 <__swbuf_r+0x20>
 800880c:	6923      	ldr	r3, [r4, #16]
 800880e:	b943      	cbnz	r3, 8008822 <__swbuf_r+0x32>
 8008810:	4621      	mov	r1, r4
 8008812:	4628      	mov	r0, r5
 8008814:	f000 f82a 	bl	800886c <__swsetup_r>
 8008818:	b118      	cbz	r0, 8008822 <__swbuf_r+0x32>
 800881a:	f04f 37ff 	mov.w	r7, #4294967295
 800881e:	4638      	mov	r0, r7
 8008820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008822:	6823      	ldr	r3, [r4, #0]
 8008824:	6922      	ldr	r2, [r4, #16]
 8008826:	1a98      	subs	r0, r3, r2
 8008828:	6963      	ldr	r3, [r4, #20]
 800882a:	b2f6      	uxtb	r6, r6
 800882c:	4283      	cmp	r3, r0
 800882e:	4637      	mov	r7, r6
 8008830:	dc05      	bgt.n	800883e <__swbuf_r+0x4e>
 8008832:	4621      	mov	r1, r4
 8008834:	4628      	mov	r0, r5
 8008836:	f7ff fd99 	bl	800836c <_fflush_r>
 800883a:	2800      	cmp	r0, #0
 800883c:	d1ed      	bne.n	800881a <__swbuf_r+0x2a>
 800883e:	68a3      	ldr	r3, [r4, #8]
 8008840:	3b01      	subs	r3, #1
 8008842:	60a3      	str	r3, [r4, #8]
 8008844:	6823      	ldr	r3, [r4, #0]
 8008846:	1c5a      	adds	r2, r3, #1
 8008848:	6022      	str	r2, [r4, #0]
 800884a:	701e      	strb	r6, [r3, #0]
 800884c:	6962      	ldr	r2, [r4, #20]
 800884e:	1c43      	adds	r3, r0, #1
 8008850:	429a      	cmp	r2, r3
 8008852:	d004      	beq.n	800885e <__swbuf_r+0x6e>
 8008854:	89a3      	ldrh	r3, [r4, #12]
 8008856:	07db      	lsls	r3, r3, #31
 8008858:	d5e1      	bpl.n	800881e <__swbuf_r+0x2e>
 800885a:	2e0a      	cmp	r6, #10
 800885c:	d1df      	bne.n	800881e <__swbuf_r+0x2e>
 800885e:	4621      	mov	r1, r4
 8008860:	4628      	mov	r0, r5
 8008862:	f7ff fd83 	bl	800836c <_fflush_r>
 8008866:	2800      	cmp	r0, #0
 8008868:	d0d9      	beq.n	800881e <__swbuf_r+0x2e>
 800886a:	e7d6      	b.n	800881a <__swbuf_r+0x2a>

0800886c <__swsetup_r>:
 800886c:	b538      	push	{r3, r4, r5, lr}
 800886e:	4b29      	ldr	r3, [pc, #164]	@ (8008914 <__swsetup_r+0xa8>)
 8008870:	4605      	mov	r5, r0
 8008872:	6818      	ldr	r0, [r3, #0]
 8008874:	460c      	mov	r4, r1
 8008876:	b118      	cbz	r0, 8008880 <__swsetup_r+0x14>
 8008878:	6a03      	ldr	r3, [r0, #32]
 800887a:	b90b      	cbnz	r3, 8008880 <__swsetup_r+0x14>
 800887c:	f7fd ffb0 	bl	80067e0 <__sinit>
 8008880:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008884:	0719      	lsls	r1, r3, #28
 8008886:	d422      	bmi.n	80088ce <__swsetup_r+0x62>
 8008888:	06da      	lsls	r2, r3, #27
 800888a:	d407      	bmi.n	800889c <__swsetup_r+0x30>
 800888c:	2209      	movs	r2, #9
 800888e:	602a      	str	r2, [r5, #0]
 8008890:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008894:	81a3      	strh	r3, [r4, #12]
 8008896:	f04f 30ff 	mov.w	r0, #4294967295
 800889a:	e033      	b.n	8008904 <__swsetup_r+0x98>
 800889c:	0758      	lsls	r0, r3, #29
 800889e:	d512      	bpl.n	80088c6 <__swsetup_r+0x5a>
 80088a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80088a2:	b141      	cbz	r1, 80088b6 <__swsetup_r+0x4a>
 80088a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80088a8:	4299      	cmp	r1, r3
 80088aa:	d002      	beq.n	80088b2 <__swsetup_r+0x46>
 80088ac:	4628      	mov	r0, r5
 80088ae:	f7fe feff 	bl	80076b0 <_free_r>
 80088b2:	2300      	movs	r3, #0
 80088b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80088b6:	89a3      	ldrh	r3, [r4, #12]
 80088b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80088bc:	81a3      	strh	r3, [r4, #12]
 80088be:	2300      	movs	r3, #0
 80088c0:	6063      	str	r3, [r4, #4]
 80088c2:	6923      	ldr	r3, [r4, #16]
 80088c4:	6023      	str	r3, [r4, #0]
 80088c6:	89a3      	ldrh	r3, [r4, #12]
 80088c8:	f043 0308 	orr.w	r3, r3, #8
 80088cc:	81a3      	strh	r3, [r4, #12]
 80088ce:	6923      	ldr	r3, [r4, #16]
 80088d0:	b94b      	cbnz	r3, 80088e6 <__swsetup_r+0x7a>
 80088d2:	89a3      	ldrh	r3, [r4, #12]
 80088d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80088d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088dc:	d003      	beq.n	80088e6 <__swsetup_r+0x7a>
 80088de:	4621      	mov	r1, r4
 80088e0:	4628      	mov	r0, r5
 80088e2:	f000 f883 	bl	80089ec <__smakebuf_r>
 80088e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088ea:	f013 0201 	ands.w	r2, r3, #1
 80088ee:	d00a      	beq.n	8008906 <__swsetup_r+0x9a>
 80088f0:	2200      	movs	r2, #0
 80088f2:	60a2      	str	r2, [r4, #8]
 80088f4:	6962      	ldr	r2, [r4, #20]
 80088f6:	4252      	negs	r2, r2
 80088f8:	61a2      	str	r2, [r4, #24]
 80088fa:	6922      	ldr	r2, [r4, #16]
 80088fc:	b942      	cbnz	r2, 8008910 <__swsetup_r+0xa4>
 80088fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008902:	d1c5      	bne.n	8008890 <__swsetup_r+0x24>
 8008904:	bd38      	pop	{r3, r4, r5, pc}
 8008906:	0799      	lsls	r1, r3, #30
 8008908:	bf58      	it	pl
 800890a:	6962      	ldrpl	r2, [r4, #20]
 800890c:	60a2      	str	r2, [r4, #8]
 800890e:	e7f4      	b.n	80088fa <__swsetup_r+0x8e>
 8008910:	2000      	movs	r0, #0
 8008912:	e7f7      	b.n	8008904 <__swsetup_r+0x98>
 8008914:	2000003c 	.word	0x2000003c

08008918 <_raise_r>:
 8008918:	291f      	cmp	r1, #31
 800891a:	b538      	push	{r3, r4, r5, lr}
 800891c:	4605      	mov	r5, r0
 800891e:	460c      	mov	r4, r1
 8008920:	d904      	bls.n	800892c <_raise_r+0x14>
 8008922:	2316      	movs	r3, #22
 8008924:	6003      	str	r3, [r0, #0]
 8008926:	f04f 30ff 	mov.w	r0, #4294967295
 800892a:	bd38      	pop	{r3, r4, r5, pc}
 800892c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800892e:	b112      	cbz	r2, 8008936 <_raise_r+0x1e>
 8008930:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008934:	b94b      	cbnz	r3, 800894a <_raise_r+0x32>
 8008936:	4628      	mov	r0, r5
 8008938:	f000 f830 	bl	800899c <_getpid_r>
 800893c:	4622      	mov	r2, r4
 800893e:	4601      	mov	r1, r0
 8008940:	4628      	mov	r0, r5
 8008942:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008946:	f000 b817 	b.w	8008978 <_kill_r>
 800894a:	2b01      	cmp	r3, #1
 800894c:	d00a      	beq.n	8008964 <_raise_r+0x4c>
 800894e:	1c59      	adds	r1, r3, #1
 8008950:	d103      	bne.n	800895a <_raise_r+0x42>
 8008952:	2316      	movs	r3, #22
 8008954:	6003      	str	r3, [r0, #0]
 8008956:	2001      	movs	r0, #1
 8008958:	e7e7      	b.n	800892a <_raise_r+0x12>
 800895a:	2100      	movs	r1, #0
 800895c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008960:	4620      	mov	r0, r4
 8008962:	4798      	blx	r3
 8008964:	2000      	movs	r0, #0
 8008966:	e7e0      	b.n	800892a <_raise_r+0x12>

08008968 <raise>:
 8008968:	4b02      	ldr	r3, [pc, #8]	@ (8008974 <raise+0xc>)
 800896a:	4601      	mov	r1, r0
 800896c:	6818      	ldr	r0, [r3, #0]
 800896e:	f7ff bfd3 	b.w	8008918 <_raise_r>
 8008972:	bf00      	nop
 8008974:	2000003c 	.word	0x2000003c

08008978 <_kill_r>:
 8008978:	b538      	push	{r3, r4, r5, lr}
 800897a:	4d07      	ldr	r5, [pc, #28]	@ (8008998 <_kill_r+0x20>)
 800897c:	2300      	movs	r3, #0
 800897e:	4604      	mov	r4, r0
 8008980:	4608      	mov	r0, r1
 8008982:	4611      	mov	r1, r2
 8008984:	602b      	str	r3, [r5, #0]
 8008986:	f7f9 f9f1 	bl	8001d6c <_kill>
 800898a:	1c43      	adds	r3, r0, #1
 800898c:	d102      	bne.n	8008994 <_kill_r+0x1c>
 800898e:	682b      	ldr	r3, [r5, #0]
 8008990:	b103      	cbz	r3, 8008994 <_kill_r+0x1c>
 8008992:	6023      	str	r3, [r4, #0]
 8008994:	bd38      	pop	{r3, r4, r5, pc}
 8008996:	bf00      	nop
 8008998:	20000640 	.word	0x20000640

0800899c <_getpid_r>:
 800899c:	f7f9 b9de 	b.w	8001d5c <_getpid>

080089a0 <__swhatbuf_r>:
 80089a0:	b570      	push	{r4, r5, r6, lr}
 80089a2:	460c      	mov	r4, r1
 80089a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089a8:	2900      	cmp	r1, #0
 80089aa:	b096      	sub	sp, #88	@ 0x58
 80089ac:	4615      	mov	r5, r2
 80089ae:	461e      	mov	r6, r3
 80089b0:	da0d      	bge.n	80089ce <__swhatbuf_r+0x2e>
 80089b2:	89a3      	ldrh	r3, [r4, #12]
 80089b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80089b8:	f04f 0100 	mov.w	r1, #0
 80089bc:	bf14      	ite	ne
 80089be:	2340      	movne	r3, #64	@ 0x40
 80089c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80089c4:	2000      	movs	r0, #0
 80089c6:	6031      	str	r1, [r6, #0]
 80089c8:	602b      	str	r3, [r5, #0]
 80089ca:	b016      	add	sp, #88	@ 0x58
 80089cc:	bd70      	pop	{r4, r5, r6, pc}
 80089ce:	466a      	mov	r2, sp
 80089d0:	f000 f848 	bl	8008a64 <_fstat_r>
 80089d4:	2800      	cmp	r0, #0
 80089d6:	dbec      	blt.n	80089b2 <__swhatbuf_r+0x12>
 80089d8:	9901      	ldr	r1, [sp, #4]
 80089da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80089de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80089e2:	4259      	negs	r1, r3
 80089e4:	4159      	adcs	r1, r3
 80089e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80089ea:	e7eb      	b.n	80089c4 <__swhatbuf_r+0x24>

080089ec <__smakebuf_r>:
 80089ec:	898b      	ldrh	r3, [r1, #12]
 80089ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089f0:	079d      	lsls	r5, r3, #30
 80089f2:	4606      	mov	r6, r0
 80089f4:	460c      	mov	r4, r1
 80089f6:	d507      	bpl.n	8008a08 <__smakebuf_r+0x1c>
 80089f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80089fc:	6023      	str	r3, [r4, #0]
 80089fe:	6123      	str	r3, [r4, #16]
 8008a00:	2301      	movs	r3, #1
 8008a02:	6163      	str	r3, [r4, #20]
 8008a04:	b003      	add	sp, #12
 8008a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a08:	ab01      	add	r3, sp, #4
 8008a0a:	466a      	mov	r2, sp
 8008a0c:	f7ff ffc8 	bl	80089a0 <__swhatbuf_r>
 8008a10:	9f00      	ldr	r7, [sp, #0]
 8008a12:	4605      	mov	r5, r0
 8008a14:	4639      	mov	r1, r7
 8008a16:	4630      	mov	r0, r6
 8008a18:	f7fe febe 	bl	8007798 <_malloc_r>
 8008a1c:	b948      	cbnz	r0, 8008a32 <__smakebuf_r+0x46>
 8008a1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a22:	059a      	lsls	r2, r3, #22
 8008a24:	d4ee      	bmi.n	8008a04 <__smakebuf_r+0x18>
 8008a26:	f023 0303 	bic.w	r3, r3, #3
 8008a2a:	f043 0302 	orr.w	r3, r3, #2
 8008a2e:	81a3      	strh	r3, [r4, #12]
 8008a30:	e7e2      	b.n	80089f8 <__smakebuf_r+0xc>
 8008a32:	89a3      	ldrh	r3, [r4, #12]
 8008a34:	6020      	str	r0, [r4, #0]
 8008a36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a3a:	81a3      	strh	r3, [r4, #12]
 8008a3c:	9b01      	ldr	r3, [sp, #4]
 8008a3e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008a42:	b15b      	cbz	r3, 8008a5c <__smakebuf_r+0x70>
 8008a44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a48:	4630      	mov	r0, r6
 8008a4a:	f000 f81d 	bl	8008a88 <_isatty_r>
 8008a4e:	b128      	cbz	r0, 8008a5c <__smakebuf_r+0x70>
 8008a50:	89a3      	ldrh	r3, [r4, #12]
 8008a52:	f023 0303 	bic.w	r3, r3, #3
 8008a56:	f043 0301 	orr.w	r3, r3, #1
 8008a5a:	81a3      	strh	r3, [r4, #12]
 8008a5c:	89a3      	ldrh	r3, [r4, #12]
 8008a5e:	431d      	orrs	r5, r3
 8008a60:	81a5      	strh	r5, [r4, #12]
 8008a62:	e7cf      	b.n	8008a04 <__smakebuf_r+0x18>

08008a64 <_fstat_r>:
 8008a64:	b538      	push	{r3, r4, r5, lr}
 8008a66:	4d07      	ldr	r5, [pc, #28]	@ (8008a84 <_fstat_r+0x20>)
 8008a68:	2300      	movs	r3, #0
 8008a6a:	4604      	mov	r4, r0
 8008a6c:	4608      	mov	r0, r1
 8008a6e:	4611      	mov	r1, r2
 8008a70:	602b      	str	r3, [r5, #0]
 8008a72:	f7f9 f9db 	bl	8001e2c <_fstat>
 8008a76:	1c43      	adds	r3, r0, #1
 8008a78:	d102      	bne.n	8008a80 <_fstat_r+0x1c>
 8008a7a:	682b      	ldr	r3, [r5, #0]
 8008a7c:	b103      	cbz	r3, 8008a80 <_fstat_r+0x1c>
 8008a7e:	6023      	str	r3, [r4, #0]
 8008a80:	bd38      	pop	{r3, r4, r5, pc}
 8008a82:	bf00      	nop
 8008a84:	20000640 	.word	0x20000640

08008a88 <_isatty_r>:
 8008a88:	b538      	push	{r3, r4, r5, lr}
 8008a8a:	4d06      	ldr	r5, [pc, #24]	@ (8008aa4 <_isatty_r+0x1c>)
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	4604      	mov	r4, r0
 8008a90:	4608      	mov	r0, r1
 8008a92:	602b      	str	r3, [r5, #0]
 8008a94:	f7f9 f9da 	bl	8001e4c <_isatty>
 8008a98:	1c43      	adds	r3, r0, #1
 8008a9a:	d102      	bne.n	8008aa2 <_isatty_r+0x1a>
 8008a9c:	682b      	ldr	r3, [r5, #0]
 8008a9e:	b103      	cbz	r3, 8008aa2 <_isatty_r+0x1a>
 8008aa0:	6023      	str	r3, [r4, #0]
 8008aa2:	bd38      	pop	{r3, r4, r5, pc}
 8008aa4:	20000640 	.word	0x20000640

08008aa8 <pow>:
 8008aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aaa:	ed2d 8b02 	vpush	{d8}
 8008aae:	eeb0 8a40 	vmov.f32	s16, s0
 8008ab2:	eef0 8a60 	vmov.f32	s17, s1
 8008ab6:	ec55 4b11 	vmov	r4, r5, d1
 8008aba:	f000 f871 	bl	8008ba0 <__ieee754_pow>
 8008abe:	4622      	mov	r2, r4
 8008ac0:	462b      	mov	r3, r5
 8008ac2:	4620      	mov	r0, r4
 8008ac4:	4629      	mov	r1, r5
 8008ac6:	ec57 6b10 	vmov	r6, r7, d0
 8008aca:	f7f8 f837 	bl	8000b3c <__aeabi_dcmpun>
 8008ace:	2800      	cmp	r0, #0
 8008ad0:	d13b      	bne.n	8008b4a <pow+0xa2>
 8008ad2:	ec51 0b18 	vmov	r0, r1, d8
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	2300      	movs	r3, #0
 8008ada:	f7f7 fffd 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ade:	b1b8      	cbz	r0, 8008b10 <pow+0x68>
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	4620      	mov	r0, r4
 8008ae6:	4629      	mov	r1, r5
 8008ae8:	f7f7 fff6 	bl	8000ad8 <__aeabi_dcmpeq>
 8008aec:	2800      	cmp	r0, #0
 8008aee:	d146      	bne.n	8008b7e <pow+0xd6>
 8008af0:	ec45 4b10 	vmov	d0, r4, r5
 8008af4:	f000 f848 	bl	8008b88 <finite>
 8008af8:	b338      	cbz	r0, 8008b4a <pow+0xa2>
 8008afa:	2200      	movs	r2, #0
 8008afc:	2300      	movs	r3, #0
 8008afe:	4620      	mov	r0, r4
 8008b00:	4629      	mov	r1, r5
 8008b02:	f7f7 fff3 	bl	8000aec <__aeabi_dcmplt>
 8008b06:	b300      	cbz	r0, 8008b4a <pow+0xa2>
 8008b08:	f7fd ff56 	bl	80069b8 <__errno>
 8008b0c:	2322      	movs	r3, #34	@ 0x22
 8008b0e:	e01b      	b.n	8008b48 <pow+0xa0>
 8008b10:	ec47 6b10 	vmov	d0, r6, r7
 8008b14:	f000 f838 	bl	8008b88 <finite>
 8008b18:	b9e0      	cbnz	r0, 8008b54 <pow+0xac>
 8008b1a:	eeb0 0a48 	vmov.f32	s0, s16
 8008b1e:	eef0 0a68 	vmov.f32	s1, s17
 8008b22:	f000 f831 	bl	8008b88 <finite>
 8008b26:	b1a8      	cbz	r0, 8008b54 <pow+0xac>
 8008b28:	ec45 4b10 	vmov	d0, r4, r5
 8008b2c:	f000 f82c 	bl	8008b88 <finite>
 8008b30:	b180      	cbz	r0, 8008b54 <pow+0xac>
 8008b32:	4632      	mov	r2, r6
 8008b34:	463b      	mov	r3, r7
 8008b36:	4630      	mov	r0, r6
 8008b38:	4639      	mov	r1, r7
 8008b3a:	f7f7 ffff 	bl	8000b3c <__aeabi_dcmpun>
 8008b3e:	2800      	cmp	r0, #0
 8008b40:	d0e2      	beq.n	8008b08 <pow+0x60>
 8008b42:	f7fd ff39 	bl	80069b8 <__errno>
 8008b46:	2321      	movs	r3, #33	@ 0x21
 8008b48:	6003      	str	r3, [r0, #0]
 8008b4a:	ecbd 8b02 	vpop	{d8}
 8008b4e:	ec47 6b10 	vmov	d0, r6, r7
 8008b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b54:	2200      	movs	r2, #0
 8008b56:	2300      	movs	r3, #0
 8008b58:	4630      	mov	r0, r6
 8008b5a:	4639      	mov	r1, r7
 8008b5c:	f7f7 ffbc 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b60:	2800      	cmp	r0, #0
 8008b62:	d0f2      	beq.n	8008b4a <pow+0xa2>
 8008b64:	eeb0 0a48 	vmov.f32	s0, s16
 8008b68:	eef0 0a68 	vmov.f32	s1, s17
 8008b6c:	f000 f80c 	bl	8008b88 <finite>
 8008b70:	2800      	cmp	r0, #0
 8008b72:	d0ea      	beq.n	8008b4a <pow+0xa2>
 8008b74:	ec45 4b10 	vmov	d0, r4, r5
 8008b78:	f000 f806 	bl	8008b88 <finite>
 8008b7c:	e7c3      	b.n	8008b06 <pow+0x5e>
 8008b7e:	4f01      	ldr	r7, [pc, #4]	@ (8008b84 <pow+0xdc>)
 8008b80:	2600      	movs	r6, #0
 8008b82:	e7e2      	b.n	8008b4a <pow+0xa2>
 8008b84:	3ff00000 	.word	0x3ff00000

08008b88 <finite>:
 8008b88:	b082      	sub	sp, #8
 8008b8a:	ed8d 0b00 	vstr	d0, [sp]
 8008b8e:	9801      	ldr	r0, [sp, #4]
 8008b90:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8008b94:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8008b98:	0fc0      	lsrs	r0, r0, #31
 8008b9a:	b002      	add	sp, #8
 8008b9c:	4770      	bx	lr
	...

08008ba0 <__ieee754_pow>:
 8008ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ba4:	b091      	sub	sp, #68	@ 0x44
 8008ba6:	ed8d 1b00 	vstr	d1, [sp]
 8008baa:	e9dd 1900 	ldrd	r1, r9, [sp]
 8008bae:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8008bb2:	ea5a 0001 	orrs.w	r0, sl, r1
 8008bb6:	ec57 6b10 	vmov	r6, r7, d0
 8008bba:	d113      	bne.n	8008be4 <__ieee754_pow+0x44>
 8008bbc:	19b3      	adds	r3, r6, r6
 8008bbe:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8008bc2:	4152      	adcs	r2, r2
 8008bc4:	4298      	cmp	r0, r3
 8008bc6:	4b98      	ldr	r3, [pc, #608]	@ (8008e28 <__ieee754_pow+0x288>)
 8008bc8:	4193      	sbcs	r3, r2
 8008bca:	f080 84ea 	bcs.w	80095a2 <__ieee754_pow+0xa02>
 8008bce:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008bd2:	4630      	mov	r0, r6
 8008bd4:	4639      	mov	r1, r7
 8008bd6:	f7f7 fb61 	bl	800029c <__adddf3>
 8008bda:	ec41 0b10 	vmov	d0, r0, r1
 8008bde:	b011      	add	sp, #68	@ 0x44
 8008be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008be4:	4a91      	ldr	r2, [pc, #580]	@ (8008e2c <__ieee754_pow+0x28c>)
 8008be6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8008bea:	4590      	cmp	r8, r2
 8008bec:	463d      	mov	r5, r7
 8008bee:	4633      	mov	r3, r6
 8008bf0:	d806      	bhi.n	8008c00 <__ieee754_pow+0x60>
 8008bf2:	d101      	bne.n	8008bf8 <__ieee754_pow+0x58>
 8008bf4:	2e00      	cmp	r6, #0
 8008bf6:	d1ea      	bne.n	8008bce <__ieee754_pow+0x2e>
 8008bf8:	4592      	cmp	sl, r2
 8008bfa:	d801      	bhi.n	8008c00 <__ieee754_pow+0x60>
 8008bfc:	d10e      	bne.n	8008c1c <__ieee754_pow+0x7c>
 8008bfe:	b169      	cbz	r1, 8008c1c <__ieee754_pow+0x7c>
 8008c00:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8008c04:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8008c08:	431d      	orrs	r5, r3
 8008c0a:	d1e0      	bne.n	8008bce <__ieee754_pow+0x2e>
 8008c0c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008c10:	18db      	adds	r3, r3, r3
 8008c12:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8008c16:	4152      	adcs	r2, r2
 8008c18:	429d      	cmp	r5, r3
 8008c1a:	e7d4      	b.n	8008bc6 <__ieee754_pow+0x26>
 8008c1c:	2d00      	cmp	r5, #0
 8008c1e:	46c3      	mov	fp, r8
 8008c20:	da3a      	bge.n	8008c98 <__ieee754_pow+0xf8>
 8008c22:	4a83      	ldr	r2, [pc, #524]	@ (8008e30 <__ieee754_pow+0x290>)
 8008c24:	4592      	cmp	sl, r2
 8008c26:	d84d      	bhi.n	8008cc4 <__ieee754_pow+0x124>
 8008c28:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8008c2c:	4592      	cmp	sl, r2
 8008c2e:	f240 84c7 	bls.w	80095c0 <__ieee754_pow+0xa20>
 8008c32:	ea4f 522a 	mov.w	r2, sl, asr #20
 8008c36:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8008c3a:	2a14      	cmp	r2, #20
 8008c3c:	dd0f      	ble.n	8008c5e <__ieee754_pow+0xbe>
 8008c3e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8008c42:	fa21 f402 	lsr.w	r4, r1, r2
 8008c46:	fa04 f202 	lsl.w	r2, r4, r2
 8008c4a:	428a      	cmp	r2, r1
 8008c4c:	f040 84b8 	bne.w	80095c0 <__ieee754_pow+0xa20>
 8008c50:	f004 0401 	and.w	r4, r4, #1
 8008c54:	f1c4 0402 	rsb	r4, r4, #2
 8008c58:	2900      	cmp	r1, #0
 8008c5a:	d158      	bne.n	8008d0e <__ieee754_pow+0x16e>
 8008c5c:	e00e      	b.n	8008c7c <__ieee754_pow+0xdc>
 8008c5e:	2900      	cmp	r1, #0
 8008c60:	d154      	bne.n	8008d0c <__ieee754_pow+0x16c>
 8008c62:	f1c2 0214 	rsb	r2, r2, #20
 8008c66:	fa4a f402 	asr.w	r4, sl, r2
 8008c6a:	fa04 f202 	lsl.w	r2, r4, r2
 8008c6e:	4552      	cmp	r2, sl
 8008c70:	f040 84a3 	bne.w	80095ba <__ieee754_pow+0xa1a>
 8008c74:	f004 0401 	and.w	r4, r4, #1
 8008c78:	f1c4 0402 	rsb	r4, r4, #2
 8008c7c:	4a6d      	ldr	r2, [pc, #436]	@ (8008e34 <__ieee754_pow+0x294>)
 8008c7e:	4592      	cmp	sl, r2
 8008c80:	d12e      	bne.n	8008ce0 <__ieee754_pow+0x140>
 8008c82:	f1b9 0f00 	cmp.w	r9, #0
 8008c86:	f280 8494 	bge.w	80095b2 <__ieee754_pow+0xa12>
 8008c8a:	496a      	ldr	r1, [pc, #424]	@ (8008e34 <__ieee754_pow+0x294>)
 8008c8c:	4632      	mov	r2, r6
 8008c8e:	463b      	mov	r3, r7
 8008c90:	2000      	movs	r0, #0
 8008c92:	f7f7 fde3 	bl	800085c <__aeabi_ddiv>
 8008c96:	e7a0      	b.n	8008bda <__ieee754_pow+0x3a>
 8008c98:	2400      	movs	r4, #0
 8008c9a:	bbc1      	cbnz	r1, 8008d0e <__ieee754_pow+0x16e>
 8008c9c:	4a63      	ldr	r2, [pc, #396]	@ (8008e2c <__ieee754_pow+0x28c>)
 8008c9e:	4592      	cmp	sl, r2
 8008ca0:	d1ec      	bne.n	8008c7c <__ieee754_pow+0xdc>
 8008ca2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8008ca6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8008caa:	431a      	orrs	r2, r3
 8008cac:	f000 8479 	beq.w	80095a2 <__ieee754_pow+0xa02>
 8008cb0:	4b61      	ldr	r3, [pc, #388]	@ (8008e38 <__ieee754_pow+0x298>)
 8008cb2:	4598      	cmp	r8, r3
 8008cb4:	d908      	bls.n	8008cc8 <__ieee754_pow+0x128>
 8008cb6:	f1b9 0f00 	cmp.w	r9, #0
 8008cba:	f2c0 8476 	blt.w	80095aa <__ieee754_pow+0xa0a>
 8008cbe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008cc2:	e78a      	b.n	8008bda <__ieee754_pow+0x3a>
 8008cc4:	2402      	movs	r4, #2
 8008cc6:	e7e8      	b.n	8008c9a <__ieee754_pow+0xfa>
 8008cc8:	f1b9 0f00 	cmp.w	r9, #0
 8008ccc:	f04f 0000 	mov.w	r0, #0
 8008cd0:	f04f 0100 	mov.w	r1, #0
 8008cd4:	da81      	bge.n	8008bda <__ieee754_pow+0x3a>
 8008cd6:	e9dd 0300 	ldrd	r0, r3, [sp]
 8008cda:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8008cde:	e77c      	b.n	8008bda <__ieee754_pow+0x3a>
 8008ce0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8008ce4:	d106      	bne.n	8008cf4 <__ieee754_pow+0x154>
 8008ce6:	4632      	mov	r2, r6
 8008ce8:	463b      	mov	r3, r7
 8008cea:	4630      	mov	r0, r6
 8008cec:	4639      	mov	r1, r7
 8008cee:	f7f7 fc8b 	bl	8000608 <__aeabi_dmul>
 8008cf2:	e772      	b.n	8008bda <__ieee754_pow+0x3a>
 8008cf4:	4a51      	ldr	r2, [pc, #324]	@ (8008e3c <__ieee754_pow+0x29c>)
 8008cf6:	4591      	cmp	r9, r2
 8008cf8:	d109      	bne.n	8008d0e <__ieee754_pow+0x16e>
 8008cfa:	2d00      	cmp	r5, #0
 8008cfc:	db07      	blt.n	8008d0e <__ieee754_pow+0x16e>
 8008cfe:	ec47 6b10 	vmov	d0, r6, r7
 8008d02:	b011      	add	sp, #68	@ 0x44
 8008d04:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d08:	f000 bd52 	b.w	80097b0 <__ieee754_sqrt>
 8008d0c:	2400      	movs	r4, #0
 8008d0e:	ec47 6b10 	vmov	d0, r6, r7
 8008d12:	9302      	str	r3, [sp, #8]
 8008d14:	f000 fc88 	bl	8009628 <fabs>
 8008d18:	9b02      	ldr	r3, [sp, #8]
 8008d1a:	ec51 0b10 	vmov	r0, r1, d0
 8008d1e:	bb53      	cbnz	r3, 8008d76 <__ieee754_pow+0x1d6>
 8008d20:	4b44      	ldr	r3, [pc, #272]	@ (8008e34 <__ieee754_pow+0x294>)
 8008d22:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d002      	beq.n	8008d30 <__ieee754_pow+0x190>
 8008d2a:	f1b8 0f00 	cmp.w	r8, #0
 8008d2e:	d122      	bne.n	8008d76 <__ieee754_pow+0x1d6>
 8008d30:	f1b9 0f00 	cmp.w	r9, #0
 8008d34:	da05      	bge.n	8008d42 <__ieee754_pow+0x1a2>
 8008d36:	4602      	mov	r2, r0
 8008d38:	460b      	mov	r3, r1
 8008d3a:	2000      	movs	r0, #0
 8008d3c:	493d      	ldr	r1, [pc, #244]	@ (8008e34 <__ieee754_pow+0x294>)
 8008d3e:	f7f7 fd8d 	bl	800085c <__aeabi_ddiv>
 8008d42:	2d00      	cmp	r5, #0
 8008d44:	f6bf af49 	bge.w	8008bda <__ieee754_pow+0x3a>
 8008d48:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8008d4c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8008d50:	ea58 0804 	orrs.w	r8, r8, r4
 8008d54:	d108      	bne.n	8008d68 <__ieee754_pow+0x1c8>
 8008d56:	4602      	mov	r2, r0
 8008d58:	460b      	mov	r3, r1
 8008d5a:	4610      	mov	r0, r2
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	f7f7 fa9b 	bl	8000298 <__aeabi_dsub>
 8008d62:	4602      	mov	r2, r0
 8008d64:	460b      	mov	r3, r1
 8008d66:	e794      	b.n	8008c92 <__ieee754_pow+0xf2>
 8008d68:	2c01      	cmp	r4, #1
 8008d6a:	f47f af36 	bne.w	8008bda <__ieee754_pow+0x3a>
 8008d6e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008d72:	4619      	mov	r1, r3
 8008d74:	e731      	b.n	8008bda <__ieee754_pow+0x3a>
 8008d76:	0feb      	lsrs	r3, r5, #31
 8008d78:	3b01      	subs	r3, #1
 8008d7a:	ea53 0204 	orrs.w	r2, r3, r4
 8008d7e:	d102      	bne.n	8008d86 <__ieee754_pow+0x1e6>
 8008d80:	4632      	mov	r2, r6
 8008d82:	463b      	mov	r3, r7
 8008d84:	e7e9      	b.n	8008d5a <__ieee754_pow+0x1ba>
 8008d86:	3c01      	subs	r4, #1
 8008d88:	431c      	orrs	r4, r3
 8008d8a:	d016      	beq.n	8008dba <__ieee754_pow+0x21a>
 8008d8c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8008e18 <__ieee754_pow+0x278>
 8008d90:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8008d94:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008d98:	f240 8112 	bls.w	8008fc0 <__ieee754_pow+0x420>
 8008d9c:	4b28      	ldr	r3, [pc, #160]	@ (8008e40 <__ieee754_pow+0x2a0>)
 8008d9e:	459a      	cmp	sl, r3
 8008da0:	4b25      	ldr	r3, [pc, #148]	@ (8008e38 <__ieee754_pow+0x298>)
 8008da2:	d916      	bls.n	8008dd2 <__ieee754_pow+0x232>
 8008da4:	4598      	cmp	r8, r3
 8008da6:	d80b      	bhi.n	8008dc0 <__ieee754_pow+0x220>
 8008da8:	f1b9 0f00 	cmp.w	r9, #0
 8008dac:	da0b      	bge.n	8008dc6 <__ieee754_pow+0x226>
 8008dae:	2000      	movs	r0, #0
 8008db0:	b011      	add	sp, #68	@ 0x44
 8008db2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008db6:	f000 bcf3 	b.w	80097a0 <__math_oflow>
 8008dba:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8008e20 <__ieee754_pow+0x280>
 8008dbe:	e7e7      	b.n	8008d90 <__ieee754_pow+0x1f0>
 8008dc0:	f1b9 0f00 	cmp.w	r9, #0
 8008dc4:	dcf3      	bgt.n	8008dae <__ieee754_pow+0x20e>
 8008dc6:	2000      	movs	r0, #0
 8008dc8:	b011      	add	sp, #68	@ 0x44
 8008dca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dce:	f000 bcdf 	b.w	8009790 <__math_uflow>
 8008dd2:	4598      	cmp	r8, r3
 8008dd4:	d20c      	bcs.n	8008df0 <__ieee754_pow+0x250>
 8008dd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	2300      	movs	r3, #0
 8008dde:	f7f7 fe85 	bl	8000aec <__aeabi_dcmplt>
 8008de2:	3800      	subs	r0, #0
 8008de4:	bf18      	it	ne
 8008de6:	2001      	movne	r0, #1
 8008de8:	f1b9 0f00 	cmp.w	r9, #0
 8008dec:	daec      	bge.n	8008dc8 <__ieee754_pow+0x228>
 8008dee:	e7df      	b.n	8008db0 <__ieee754_pow+0x210>
 8008df0:	4b10      	ldr	r3, [pc, #64]	@ (8008e34 <__ieee754_pow+0x294>)
 8008df2:	4598      	cmp	r8, r3
 8008df4:	f04f 0200 	mov.w	r2, #0
 8008df8:	d924      	bls.n	8008e44 <__ieee754_pow+0x2a4>
 8008dfa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008dfe:	2300      	movs	r3, #0
 8008e00:	f7f7 fe74 	bl	8000aec <__aeabi_dcmplt>
 8008e04:	3800      	subs	r0, #0
 8008e06:	bf18      	it	ne
 8008e08:	2001      	movne	r0, #1
 8008e0a:	f1b9 0f00 	cmp.w	r9, #0
 8008e0e:	dccf      	bgt.n	8008db0 <__ieee754_pow+0x210>
 8008e10:	e7da      	b.n	8008dc8 <__ieee754_pow+0x228>
 8008e12:	bf00      	nop
 8008e14:	f3af 8000 	nop.w
 8008e18:	00000000 	.word	0x00000000
 8008e1c:	3ff00000 	.word	0x3ff00000
 8008e20:	00000000 	.word	0x00000000
 8008e24:	bff00000 	.word	0xbff00000
 8008e28:	fff00000 	.word	0xfff00000
 8008e2c:	7ff00000 	.word	0x7ff00000
 8008e30:	433fffff 	.word	0x433fffff
 8008e34:	3ff00000 	.word	0x3ff00000
 8008e38:	3fefffff 	.word	0x3fefffff
 8008e3c:	3fe00000 	.word	0x3fe00000
 8008e40:	43f00000 	.word	0x43f00000
 8008e44:	4b5a      	ldr	r3, [pc, #360]	@ (8008fb0 <__ieee754_pow+0x410>)
 8008e46:	f7f7 fa27 	bl	8000298 <__aeabi_dsub>
 8008e4a:	a351      	add	r3, pc, #324	@ (adr r3, 8008f90 <__ieee754_pow+0x3f0>)
 8008e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e50:	4604      	mov	r4, r0
 8008e52:	460d      	mov	r5, r1
 8008e54:	f7f7 fbd8 	bl	8000608 <__aeabi_dmul>
 8008e58:	a34f      	add	r3, pc, #316	@ (adr r3, 8008f98 <__ieee754_pow+0x3f8>)
 8008e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e5e:	4606      	mov	r6, r0
 8008e60:	460f      	mov	r7, r1
 8008e62:	4620      	mov	r0, r4
 8008e64:	4629      	mov	r1, r5
 8008e66:	f7f7 fbcf 	bl	8000608 <__aeabi_dmul>
 8008e6a:	4b52      	ldr	r3, [pc, #328]	@ (8008fb4 <__ieee754_pow+0x414>)
 8008e6c:	4682      	mov	sl, r0
 8008e6e:	468b      	mov	fp, r1
 8008e70:	2200      	movs	r2, #0
 8008e72:	4620      	mov	r0, r4
 8008e74:	4629      	mov	r1, r5
 8008e76:	f7f7 fbc7 	bl	8000608 <__aeabi_dmul>
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	460b      	mov	r3, r1
 8008e7e:	a148      	add	r1, pc, #288	@ (adr r1, 8008fa0 <__ieee754_pow+0x400>)
 8008e80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e84:	f7f7 fa08 	bl	8000298 <__aeabi_dsub>
 8008e88:	4622      	mov	r2, r4
 8008e8a:	462b      	mov	r3, r5
 8008e8c:	f7f7 fbbc 	bl	8000608 <__aeabi_dmul>
 8008e90:	4602      	mov	r2, r0
 8008e92:	460b      	mov	r3, r1
 8008e94:	2000      	movs	r0, #0
 8008e96:	4948      	ldr	r1, [pc, #288]	@ (8008fb8 <__ieee754_pow+0x418>)
 8008e98:	f7f7 f9fe 	bl	8000298 <__aeabi_dsub>
 8008e9c:	4622      	mov	r2, r4
 8008e9e:	4680      	mov	r8, r0
 8008ea0:	4689      	mov	r9, r1
 8008ea2:	462b      	mov	r3, r5
 8008ea4:	4620      	mov	r0, r4
 8008ea6:	4629      	mov	r1, r5
 8008ea8:	f7f7 fbae 	bl	8000608 <__aeabi_dmul>
 8008eac:	4602      	mov	r2, r0
 8008eae:	460b      	mov	r3, r1
 8008eb0:	4640      	mov	r0, r8
 8008eb2:	4649      	mov	r1, r9
 8008eb4:	f7f7 fba8 	bl	8000608 <__aeabi_dmul>
 8008eb8:	a33b      	add	r3, pc, #236	@ (adr r3, 8008fa8 <__ieee754_pow+0x408>)
 8008eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ebe:	f7f7 fba3 	bl	8000608 <__aeabi_dmul>
 8008ec2:	4602      	mov	r2, r0
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	4650      	mov	r0, sl
 8008ec8:	4659      	mov	r1, fp
 8008eca:	f7f7 f9e5 	bl	8000298 <__aeabi_dsub>
 8008ece:	4602      	mov	r2, r0
 8008ed0:	460b      	mov	r3, r1
 8008ed2:	4680      	mov	r8, r0
 8008ed4:	4689      	mov	r9, r1
 8008ed6:	4630      	mov	r0, r6
 8008ed8:	4639      	mov	r1, r7
 8008eda:	f7f7 f9df 	bl	800029c <__adddf3>
 8008ede:	2400      	movs	r4, #0
 8008ee0:	4632      	mov	r2, r6
 8008ee2:	463b      	mov	r3, r7
 8008ee4:	4620      	mov	r0, r4
 8008ee6:	460d      	mov	r5, r1
 8008ee8:	f7f7 f9d6 	bl	8000298 <__aeabi_dsub>
 8008eec:	4602      	mov	r2, r0
 8008eee:	460b      	mov	r3, r1
 8008ef0:	4640      	mov	r0, r8
 8008ef2:	4649      	mov	r1, r9
 8008ef4:	f7f7 f9d0 	bl	8000298 <__aeabi_dsub>
 8008ef8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008efc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008f00:	2300      	movs	r3, #0
 8008f02:	9304      	str	r3, [sp, #16]
 8008f04:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008f08:	4606      	mov	r6, r0
 8008f0a:	460f      	mov	r7, r1
 8008f0c:	4652      	mov	r2, sl
 8008f0e:	465b      	mov	r3, fp
 8008f10:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f14:	f7f7 f9c0 	bl	8000298 <__aeabi_dsub>
 8008f18:	4622      	mov	r2, r4
 8008f1a:	462b      	mov	r3, r5
 8008f1c:	f7f7 fb74 	bl	8000608 <__aeabi_dmul>
 8008f20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f24:	4680      	mov	r8, r0
 8008f26:	4689      	mov	r9, r1
 8008f28:	4630      	mov	r0, r6
 8008f2a:	4639      	mov	r1, r7
 8008f2c:	f7f7 fb6c 	bl	8000608 <__aeabi_dmul>
 8008f30:	4602      	mov	r2, r0
 8008f32:	460b      	mov	r3, r1
 8008f34:	4640      	mov	r0, r8
 8008f36:	4649      	mov	r1, r9
 8008f38:	f7f7 f9b0 	bl	800029c <__adddf3>
 8008f3c:	4652      	mov	r2, sl
 8008f3e:	465b      	mov	r3, fp
 8008f40:	4606      	mov	r6, r0
 8008f42:	460f      	mov	r7, r1
 8008f44:	4620      	mov	r0, r4
 8008f46:	4629      	mov	r1, r5
 8008f48:	f7f7 fb5e 	bl	8000608 <__aeabi_dmul>
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	4602      	mov	r2, r0
 8008f50:	4680      	mov	r8, r0
 8008f52:	4689      	mov	r9, r1
 8008f54:	4630      	mov	r0, r6
 8008f56:	4639      	mov	r1, r7
 8008f58:	f7f7 f9a0 	bl	800029c <__adddf3>
 8008f5c:	4b17      	ldr	r3, [pc, #92]	@ (8008fbc <__ieee754_pow+0x41c>)
 8008f5e:	4299      	cmp	r1, r3
 8008f60:	4604      	mov	r4, r0
 8008f62:	460d      	mov	r5, r1
 8008f64:	468a      	mov	sl, r1
 8008f66:	468b      	mov	fp, r1
 8008f68:	f340 82ef 	ble.w	800954a <__ieee754_pow+0x9aa>
 8008f6c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8008f70:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8008f74:	4303      	orrs	r3, r0
 8008f76:	f000 81e8 	beq.w	800934a <__ieee754_pow+0x7aa>
 8008f7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	2300      	movs	r3, #0
 8008f82:	f7f7 fdb3 	bl	8000aec <__aeabi_dcmplt>
 8008f86:	3800      	subs	r0, #0
 8008f88:	bf18      	it	ne
 8008f8a:	2001      	movne	r0, #1
 8008f8c:	e710      	b.n	8008db0 <__ieee754_pow+0x210>
 8008f8e:	bf00      	nop
 8008f90:	60000000 	.word	0x60000000
 8008f94:	3ff71547 	.word	0x3ff71547
 8008f98:	f85ddf44 	.word	0xf85ddf44
 8008f9c:	3e54ae0b 	.word	0x3e54ae0b
 8008fa0:	55555555 	.word	0x55555555
 8008fa4:	3fd55555 	.word	0x3fd55555
 8008fa8:	652b82fe 	.word	0x652b82fe
 8008fac:	3ff71547 	.word	0x3ff71547
 8008fb0:	3ff00000 	.word	0x3ff00000
 8008fb4:	3fd00000 	.word	0x3fd00000
 8008fb8:	3fe00000 	.word	0x3fe00000
 8008fbc:	408fffff 	.word	0x408fffff
 8008fc0:	4bd5      	ldr	r3, [pc, #852]	@ (8009318 <__ieee754_pow+0x778>)
 8008fc2:	402b      	ands	r3, r5
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	b92b      	cbnz	r3, 8008fd4 <__ieee754_pow+0x434>
 8008fc8:	4bd4      	ldr	r3, [pc, #848]	@ (800931c <__ieee754_pow+0x77c>)
 8008fca:	f7f7 fb1d 	bl	8000608 <__aeabi_dmul>
 8008fce:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8008fd2:	468b      	mov	fp, r1
 8008fd4:	ea4f 532b 	mov.w	r3, fp, asr #20
 8008fd8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8008fdc:	4413      	add	r3, r2
 8008fde:	930a      	str	r3, [sp, #40]	@ 0x28
 8008fe0:	4bcf      	ldr	r3, [pc, #828]	@ (8009320 <__ieee754_pow+0x780>)
 8008fe2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8008fe6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8008fea:	459b      	cmp	fp, r3
 8008fec:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008ff0:	dd08      	ble.n	8009004 <__ieee754_pow+0x464>
 8008ff2:	4bcc      	ldr	r3, [pc, #816]	@ (8009324 <__ieee754_pow+0x784>)
 8008ff4:	459b      	cmp	fp, r3
 8008ff6:	f340 81a5 	ble.w	8009344 <__ieee754_pow+0x7a4>
 8008ffa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ffc:	3301      	adds	r3, #1
 8008ffe:	930a      	str	r3, [sp, #40]	@ 0x28
 8009000:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8009004:	f04f 0a00 	mov.w	sl, #0
 8009008:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800900c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800900e:	4bc6      	ldr	r3, [pc, #792]	@ (8009328 <__ieee754_pow+0x788>)
 8009010:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009014:	ed93 7b00 	vldr	d7, [r3]
 8009018:	4629      	mov	r1, r5
 800901a:	ec53 2b17 	vmov	r2, r3, d7
 800901e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009022:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009026:	f7f7 f937 	bl	8000298 <__aeabi_dsub>
 800902a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800902e:	4606      	mov	r6, r0
 8009030:	460f      	mov	r7, r1
 8009032:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009036:	f7f7 f931 	bl	800029c <__adddf3>
 800903a:	4602      	mov	r2, r0
 800903c:	460b      	mov	r3, r1
 800903e:	2000      	movs	r0, #0
 8009040:	49ba      	ldr	r1, [pc, #744]	@ (800932c <__ieee754_pow+0x78c>)
 8009042:	f7f7 fc0b 	bl	800085c <__aeabi_ddiv>
 8009046:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800904a:	4602      	mov	r2, r0
 800904c:	460b      	mov	r3, r1
 800904e:	4630      	mov	r0, r6
 8009050:	4639      	mov	r1, r7
 8009052:	f7f7 fad9 	bl	8000608 <__aeabi_dmul>
 8009056:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800905a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800905e:	106d      	asrs	r5, r5, #1
 8009060:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8009064:	f04f 0b00 	mov.w	fp, #0
 8009068:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800906c:	4661      	mov	r1, ip
 800906e:	2200      	movs	r2, #0
 8009070:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8009074:	4658      	mov	r0, fp
 8009076:	46e1      	mov	r9, ip
 8009078:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800907c:	4614      	mov	r4, r2
 800907e:	461d      	mov	r5, r3
 8009080:	f7f7 fac2 	bl	8000608 <__aeabi_dmul>
 8009084:	4602      	mov	r2, r0
 8009086:	460b      	mov	r3, r1
 8009088:	4630      	mov	r0, r6
 800908a:	4639      	mov	r1, r7
 800908c:	f7f7 f904 	bl	8000298 <__aeabi_dsub>
 8009090:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009094:	4606      	mov	r6, r0
 8009096:	460f      	mov	r7, r1
 8009098:	4620      	mov	r0, r4
 800909a:	4629      	mov	r1, r5
 800909c:	f7f7 f8fc 	bl	8000298 <__aeabi_dsub>
 80090a0:	4602      	mov	r2, r0
 80090a2:	460b      	mov	r3, r1
 80090a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80090a8:	f7f7 f8f6 	bl	8000298 <__aeabi_dsub>
 80090ac:	465a      	mov	r2, fp
 80090ae:	464b      	mov	r3, r9
 80090b0:	f7f7 faaa 	bl	8000608 <__aeabi_dmul>
 80090b4:	4602      	mov	r2, r0
 80090b6:	460b      	mov	r3, r1
 80090b8:	4630      	mov	r0, r6
 80090ba:	4639      	mov	r1, r7
 80090bc:	f7f7 f8ec 	bl	8000298 <__aeabi_dsub>
 80090c0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80090c4:	f7f7 faa0 	bl	8000608 <__aeabi_dmul>
 80090c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80090cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80090d0:	4610      	mov	r0, r2
 80090d2:	4619      	mov	r1, r3
 80090d4:	f7f7 fa98 	bl	8000608 <__aeabi_dmul>
 80090d8:	a37d      	add	r3, pc, #500	@ (adr r3, 80092d0 <__ieee754_pow+0x730>)
 80090da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090de:	4604      	mov	r4, r0
 80090e0:	460d      	mov	r5, r1
 80090e2:	f7f7 fa91 	bl	8000608 <__aeabi_dmul>
 80090e6:	a37c      	add	r3, pc, #496	@ (adr r3, 80092d8 <__ieee754_pow+0x738>)
 80090e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ec:	f7f7 f8d6 	bl	800029c <__adddf3>
 80090f0:	4622      	mov	r2, r4
 80090f2:	462b      	mov	r3, r5
 80090f4:	f7f7 fa88 	bl	8000608 <__aeabi_dmul>
 80090f8:	a379      	add	r3, pc, #484	@ (adr r3, 80092e0 <__ieee754_pow+0x740>)
 80090fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090fe:	f7f7 f8cd 	bl	800029c <__adddf3>
 8009102:	4622      	mov	r2, r4
 8009104:	462b      	mov	r3, r5
 8009106:	f7f7 fa7f 	bl	8000608 <__aeabi_dmul>
 800910a:	a377      	add	r3, pc, #476	@ (adr r3, 80092e8 <__ieee754_pow+0x748>)
 800910c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009110:	f7f7 f8c4 	bl	800029c <__adddf3>
 8009114:	4622      	mov	r2, r4
 8009116:	462b      	mov	r3, r5
 8009118:	f7f7 fa76 	bl	8000608 <__aeabi_dmul>
 800911c:	a374      	add	r3, pc, #464	@ (adr r3, 80092f0 <__ieee754_pow+0x750>)
 800911e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009122:	f7f7 f8bb 	bl	800029c <__adddf3>
 8009126:	4622      	mov	r2, r4
 8009128:	462b      	mov	r3, r5
 800912a:	f7f7 fa6d 	bl	8000608 <__aeabi_dmul>
 800912e:	a372      	add	r3, pc, #456	@ (adr r3, 80092f8 <__ieee754_pow+0x758>)
 8009130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009134:	f7f7 f8b2 	bl	800029c <__adddf3>
 8009138:	4622      	mov	r2, r4
 800913a:	4606      	mov	r6, r0
 800913c:	460f      	mov	r7, r1
 800913e:	462b      	mov	r3, r5
 8009140:	4620      	mov	r0, r4
 8009142:	4629      	mov	r1, r5
 8009144:	f7f7 fa60 	bl	8000608 <__aeabi_dmul>
 8009148:	4602      	mov	r2, r0
 800914a:	460b      	mov	r3, r1
 800914c:	4630      	mov	r0, r6
 800914e:	4639      	mov	r1, r7
 8009150:	f7f7 fa5a 	bl	8000608 <__aeabi_dmul>
 8009154:	465a      	mov	r2, fp
 8009156:	4604      	mov	r4, r0
 8009158:	460d      	mov	r5, r1
 800915a:	464b      	mov	r3, r9
 800915c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009160:	f7f7 f89c 	bl	800029c <__adddf3>
 8009164:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009168:	f7f7 fa4e 	bl	8000608 <__aeabi_dmul>
 800916c:	4622      	mov	r2, r4
 800916e:	462b      	mov	r3, r5
 8009170:	f7f7 f894 	bl	800029c <__adddf3>
 8009174:	465a      	mov	r2, fp
 8009176:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800917a:	464b      	mov	r3, r9
 800917c:	4658      	mov	r0, fp
 800917e:	4649      	mov	r1, r9
 8009180:	f7f7 fa42 	bl	8000608 <__aeabi_dmul>
 8009184:	4b6a      	ldr	r3, [pc, #424]	@ (8009330 <__ieee754_pow+0x790>)
 8009186:	2200      	movs	r2, #0
 8009188:	4606      	mov	r6, r0
 800918a:	460f      	mov	r7, r1
 800918c:	f7f7 f886 	bl	800029c <__adddf3>
 8009190:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009194:	f7f7 f882 	bl	800029c <__adddf3>
 8009198:	46d8      	mov	r8, fp
 800919a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800919e:	460d      	mov	r5, r1
 80091a0:	465a      	mov	r2, fp
 80091a2:	460b      	mov	r3, r1
 80091a4:	4640      	mov	r0, r8
 80091a6:	4649      	mov	r1, r9
 80091a8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80091ac:	f7f7 fa2c 	bl	8000608 <__aeabi_dmul>
 80091b0:	465c      	mov	r4, fp
 80091b2:	4680      	mov	r8, r0
 80091b4:	4689      	mov	r9, r1
 80091b6:	4b5e      	ldr	r3, [pc, #376]	@ (8009330 <__ieee754_pow+0x790>)
 80091b8:	2200      	movs	r2, #0
 80091ba:	4620      	mov	r0, r4
 80091bc:	4629      	mov	r1, r5
 80091be:	f7f7 f86b 	bl	8000298 <__aeabi_dsub>
 80091c2:	4632      	mov	r2, r6
 80091c4:	463b      	mov	r3, r7
 80091c6:	f7f7 f867 	bl	8000298 <__aeabi_dsub>
 80091ca:	4602      	mov	r2, r0
 80091cc:	460b      	mov	r3, r1
 80091ce:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80091d2:	f7f7 f861 	bl	8000298 <__aeabi_dsub>
 80091d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80091da:	f7f7 fa15 	bl	8000608 <__aeabi_dmul>
 80091de:	4622      	mov	r2, r4
 80091e0:	4606      	mov	r6, r0
 80091e2:	460f      	mov	r7, r1
 80091e4:	462b      	mov	r3, r5
 80091e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80091ea:	f7f7 fa0d 	bl	8000608 <__aeabi_dmul>
 80091ee:	4602      	mov	r2, r0
 80091f0:	460b      	mov	r3, r1
 80091f2:	4630      	mov	r0, r6
 80091f4:	4639      	mov	r1, r7
 80091f6:	f7f7 f851 	bl	800029c <__adddf3>
 80091fa:	4606      	mov	r6, r0
 80091fc:	460f      	mov	r7, r1
 80091fe:	4602      	mov	r2, r0
 8009200:	460b      	mov	r3, r1
 8009202:	4640      	mov	r0, r8
 8009204:	4649      	mov	r1, r9
 8009206:	f7f7 f849 	bl	800029c <__adddf3>
 800920a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800920e:	a33c      	add	r3, pc, #240	@ (adr r3, 8009300 <__ieee754_pow+0x760>)
 8009210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009214:	4658      	mov	r0, fp
 8009216:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800921a:	460d      	mov	r5, r1
 800921c:	f7f7 f9f4 	bl	8000608 <__aeabi_dmul>
 8009220:	465c      	mov	r4, fp
 8009222:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009226:	4642      	mov	r2, r8
 8009228:	464b      	mov	r3, r9
 800922a:	4620      	mov	r0, r4
 800922c:	4629      	mov	r1, r5
 800922e:	f7f7 f833 	bl	8000298 <__aeabi_dsub>
 8009232:	4602      	mov	r2, r0
 8009234:	460b      	mov	r3, r1
 8009236:	4630      	mov	r0, r6
 8009238:	4639      	mov	r1, r7
 800923a:	f7f7 f82d 	bl	8000298 <__aeabi_dsub>
 800923e:	a332      	add	r3, pc, #200	@ (adr r3, 8009308 <__ieee754_pow+0x768>)
 8009240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009244:	f7f7 f9e0 	bl	8000608 <__aeabi_dmul>
 8009248:	a331      	add	r3, pc, #196	@ (adr r3, 8009310 <__ieee754_pow+0x770>)
 800924a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800924e:	4606      	mov	r6, r0
 8009250:	460f      	mov	r7, r1
 8009252:	4620      	mov	r0, r4
 8009254:	4629      	mov	r1, r5
 8009256:	f7f7 f9d7 	bl	8000608 <__aeabi_dmul>
 800925a:	4602      	mov	r2, r0
 800925c:	460b      	mov	r3, r1
 800925e:	4630      	mov	r0, r6
 8009260:	4639      	mov	r1, r7
 8009262:	f7f7 f81b 	bl	800029c <__adddf3>
 8009266:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009268:	4b32      	ldr	r3, [pc, #200]	@ (8009334 <__ieee754_pow+0x794>)
 800926a:	4413      	add	r3, r2
 800926c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009270:	f7f7 f814 	bl	800029c <__adddf3>
 8009274:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009278:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800927a:	f7f7 f95b 	bl	8000534 <__aeabi_i2d>
 800927e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009280:	4b2d      	ldr	r3, [pc, #180]	@ (8009338 <__ieee754_pow+0x798>)
 8009282:	4413      	add	r3, r2
 8009284:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009288:	4606      	mov	r6, r0
 800928a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800928e:	460f      	mov	r7, r1
 8009290:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009294:	f7f7 f802 	bl	800029c <__adddf3>
 8009298:	4642      	mov	r2, r8
 800929a:	464b      	mov	r3, r9
 800929c:	f7f6 fffe 	bl	800029c <__adddf3>
 80092a0:	4632      	mov	r2, r6
 80092a2:	463b      	mov	r3, r7
 80092a4:	f7f6 fffa 	bl	800029c <__adddf3>
 80092a8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80092ac:	4632      	mov	r2, r6
 80092ae:	463b      	mov	r3, r7
 80092b0:	4658      	mov	r0, fp
 80092b2:	460d      	mov	r5, r1
 80092b4:	f7f6 fff0 	bl	8000298 <__aeabi_dsub>
 80092b8:	4642      	mov	r2, r8
 80092ba:	464b      	mov	r3, r9
 80092bc:	f7f6 ffec 	bl	8000298 <__aeabi_dsub>
 80092c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092c4:	f7f6 ffe8 	bl	8000298 <__aeabi_dsub>
 80092c8:	465c      	mov	r4, fp
 80092ca:	4602      	mov	r2, r0
 80092cc:	e036      	b.n	800933c <__ieee754_pow+0x79c>
 80092ce:	bf00      	nop
 80092d0:	4a454eef 	.word	0x4a454eef
 80092d4:	3fca7e28 	.word	0x3fca7e28
 80092d8:	93c9db65 	.word	0x93c9db65
 80092dc:	3fcd864a 	.word	0x3fcd864a
 80092e0:	a91d4101 	.word	0xa91d4101
 80092e4:	3fd17460 	.word	0x3fd17460
 80092e8:	518f264d 	.word	0x518f264d
 80092ec:	3fd55555 	.word	0x3fd55555
 80092f0:	db6fabff 	.word	0xdb6fabff
 80092f4:	3fdb6db6 	.word	0x3fdb6db6
 80092f8:	33333303 	.word	0x33333303
 80092fc:	3fe33333 	.word	0x3fe33333
 8009300:	e0000000 	.word	0xe0000000
 8009304:	3feec709 	.word	0x3feec709
 8009308:	dc3a03fd 	.word	0xdc3a03fd
 800930c:	3feec709 	.word	0x3feec709
 8009310:	145b01f5 	.word	0x145b01f5
 8009314:	be3e2fe0 	.word	0xbe3e2fe0
 8009318:	7ff00000 	.word	0x7ff00000
 800931c:	43400000 	.word	0x43400000
 8009320:	0003988e 	.word	0x0003988e
 8009324:	000bb679 	.word	0x000bb679
 8009328:	08009d40 	.word	0x08009d40
 800932c:	3ff00000 	.word	0x3ff00000
 8009330:	40080000 	.word	0x40080000
 8009334:	08009d20 	.word	0x08009d20
 8009338:	08009d30 	.word	0x08009d30
 800933c:	460b      	mov	r3, r1
 800933e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009342:	e5d7      	b.n	8008ef4 <__ieee754_pow+0x354>
 8009344:	f04f 0a01 	mov.w	sl, #1
 8009348:	e65e      	b.n	8009008 <__ieee754_pow+0x468>
 800934a:	a3b4      	add	r3, pc, #720	@ (adr r3, 800961c <__ieee754_pow+0xa7c>)
 800934c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009350:	4630      	mov	r0, r6
 8009352:	4639      	mov	r1, r7
 8009354:	f7f6 ffa2 	bl	800029c <__adddf3>
 8009358:	4642      	mov	r2, r8
 800935a:	e9cd 0100 	strd	r0, r1, [sp]
 800935e:	464b      	mov	r3, r9
 8009360:	4620      	mov	r0, r4
 8009362:	4629      	mov	r1, r5
 8009364:	f7f6 ff98 	bl	8000298 <__aeabi_dsub>
 8009368:	4602      	mov	r2, r0
 800936a:	460b      	mov	r3, r1
 800936c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009370:	f7f7 fbda 	bl	8000b28 <__aeabi_dcmpgt>
 8009374:	2800      	cmp	r0, #0
 8009376:	f47f ae00 	bne.w	8008f7a <__ieee754_pow+0x3da>
 800937a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800937e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009382:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8009386:	fa43 fa0a 	asr.w	sl, r3, sl
 800938a:	44da      	add	sl, fp
 800938c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8009390:	489d      	ldr	r0, [pc, #628]	@ (8009608 <__ieee754_pow+0xa68>)
 8009392:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8009396:	4108      	asrs	r0, r1
 8009398:	ea00 030a 	and.w	r3, r0, sl
 800939c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80093a0:	f1c1 0114 	rsb	r1, r1, #20
 80093a4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80093a8:	fa4a fa01 	asr.w	sl, sl, r1
 80093ac:	f1bb 0f00 	cmp.w	fp, #0
 80093b0:	4640      	mov	r0, r8
 80093b2:	4649      	mov	r1, r9
 80093b4:	f04f 0200 	mov.w	r2, #0
 80093b8:	bfb8      	it	lt
 80093ba:	f1ca 0a00 	rsblt	sl, sl, #0
 80093be:	f7f6 ff6b 	bl	8000298 <__aeabi_dsub>
 80093c2:	4680      	mov	r8, r0
 80093c4:	4689      	mov	r9, r1
 80093c6:	4632      	mov	r2, r6
 80093c8:	463b      	mov	r3, r7
 80093ca:	4640      	mov	r0, r8
 80093cc:	4649      	mov	r1, r9
 80093ce:	f7f6 ff65 	bl	800029c <__adddf3>
 80093d2:	2400      	movs	r4, #0
 80093d4:	a37c      	add	r3, pc, #496	@ (adr r3, 80095c8 <__ieee754_pow+0xa28>)
 80093d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093da:	4620      	mov	r0, r4
 80093dc:	460d      	mov	r5, r1
 80093de:	f7f7 f913 	bl	8000608 <__aeabi_dmul>
 80093e2:	4642      	mov	r2, r8
 80093e4:	e9cd 0100 	strd	r0, r1, [sp]
 80093e8:	464b      	mov	r3, r9
 80093ea:	4620      	mov	r0, r4
 80093ec:	4629      	mov	r1, r5
 80093ee:	f7f6 ff53 	bl	8000298 <__aeabi_dsub>
 80093f2:	4602      	mov	r2, r0
 80093f4:	460b      	mov	r3, r1
 80093f6:	4630      	mov	r0, r6
 80093f8:	4639      	mov	r1, r7
 80093fa:	f7f6 ff4d 	bl	8000298 <__aeabi_dsub>
 80093fe:	a374      	add	r3, pc, #464	@ (adr r3, 80095d0 <__ieee754_pow+0xa30>)
 8009400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009404:	f7f7 f900 	bl	8000608 <__aeabi_dmul>
 8009408:	a373      	add	r3, pc, #460	@ (adr r3, 80095d8 <__ieee754_pow+0xa38>)
 800940a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800940e:	4680      	mov	r8, r0
 8009410:	4689      	mov	r9, r1
 8009412:	4620      	mov	r0, r4
 8009414:	4629      	mov	r1, r5
 8009416:	f7f7 f8f7 	bl	8000608 <__aeabi_dmul>
 800941a:	4602      	mov	r2, r0
 800941c:	460b      	mov	r3, r1
 800941e:	4640      	mov	r0, r8
 8009420:	4649      	mov	r1, r9
 8009422:	f7f6 ff3b 	bl	800029c <__adddf3>
 8009426:	4604      	mov	r4, r0
 8009428:	460d      	mov	r5, r1
 800942a:	4602      	mov	r2, r0
 800942c:	460b      	mov	r3, r1
 800942e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009432:	f7f6 ff33 	bl	800029c <__adddf3>
 8009436:	e9dd 2300 	ldrd	r2, r3, [sp]
 800943a:	4680      	mov	r8, r0
 800943c:	4689      	mov	r9, r1
 800943e:	f7f6 ff2b 	bl	8000298 <__aeabi_dsub>
 8009442:	4602      	mov	r2, r0
 8009444:	460b      	mov	r3, r1
 8009446:	4620      	mov	r0, r4
 8009448:	4629      	mov	r1, r5
 800944a:	f7f6 ff25 	bl	8000298 <__aeabi_dsub>
 800944e:	4642      	mov	r2, r8
 8009450:	4606      	mov	r6, r0
 8009452:	460f      	mov	r7, r1
 8009454:	464b      	mov	r3, r9
 8009456:	4640      	mov	r0, r8
 8009458:	4649      	mov	r1, r9
 800945a:	f7f7 f8d5 	bl	8000608 <__aeabi_dmul>
 800945e:	a360      	add	r3, pc, #384	@ (adr r3, 80095e0 <__ieee754_pow+0xa40>)
 8009460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009464:	4604      	mov	r4, r0
 8009466:	460d      	mov	r5, r1
 8009468:	f7f7 f8ce 	bl	8000608 <__aeabi_dmul>
 800946c:	a35e      	add	r3, pc, #376	@ (adr r3, 80095e8 <__ieee754_pow+0xa48>)
 800946e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009472:	f7f6 ff11 	bl	8000298 <__aeabi_dsub>
 8009476:	4622      	mov	r2, r4
 8009478:	462b      	mov	r3, r5
 800947a:	f7f7 f8c5 	bl	8000608 <__aeabi_dmul>
 800947e:	a35c      	add	r3, pc, #368	@ (adr r3, 80095f0 <__ieee754_pow+0xa50>)
 8009480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009484:	f7f6 ff0a 	bl	800029c <__adddf3>
 8009488:	4622      	mov	r2, r4
 800948a:	462b      	mov	r3, r5
 800948c:	f7f7 f8bc 	bl	8000608 <__aeabi_dmul>
 8009490:	a359      	add	r3, pc, #356	@ (adr r3, 80095f8 <__ieee754_pow+0xa58>)
 8009492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009496:	f7f6 feff 	bl	8000298 <__aeabi_dsub>
 800949a:	4622      	mov	r2, r4
 800949c:	462b      	mov	r3, r5
 800949e:	f7f7 f8b3 	bl	8000608 <__aeabi_dmul>
 80094a2:	a357      	add	r3, pc, #348	@ (adr r3, 8009600 <__ieee754_pow+0xa60>)
 80094a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a8:	f7f6 fef8 	bl	800029c <__adddf3>
 80094ac:	4622      	mov	r2, r4
 80094ae:	462b      	mov	r3, r5
 80094b0:	f7f7 f8aa 	bl	8000608 <__aeabi_dmul>
 80094b4:	4602      	mov	r2, r0
 80094b6:	460b      	mov	r3, r1
 80094b8:	4640      	mov	r0, r8
 80094ba:	4649      	mov	r1, r9
 80094bc:	f7f6 feec 	bl	8000298 <__aeabi_dsub>
 80094c0:	4604      	mov	r4, r0
 80094c2:	460d      	mov	r5, r1
 80094c4:	4602      	mov	r2, r0
 80094c6:	460b      	mov	r3, r1
 80094c8:	4640      	mov	r0, r8
 80094ca:	4649      	mov	r1, r9
 80094cc:	f7f7 f89c 	bl	8000608 <__aeabi_dmul>
 80094d0:	2200      	movs	r2, #0
 80094d2:	e9cd 0100 	strd	r0, r1, [sp]
 80094d6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80094da:	4620      	mov	r0, r4
 80094dc:	4629      	mov	r1, r5
 80094de:	f7f6 fedb 	bl	8000298 <__aeabi_dsub>
 80094e2:	4602      	mov	r2, r0
 80094e4:	460b      	mov	r3, r1
 80094e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094ea:	f7f7 f9b7 	bl	800085c <__aeabi_ddiv>
 80094ee:	4632      	mov	r2, r6
 80094f0:	4604      	mov	r4, r0
 80094f2:	460d      	mov	r5, r1
 80094f4:	463b      	mov	r3, r7
 80094f6:	4640      	mov	r0, r8
 80094f8:	4649      	mov	r1, r9
 80094fa:	f7f7 f885 	bl	8000608 <__aeabi_dmul>
 80094fe:	4632      	mov	r2, r6
 8009500:	463b      	mov	r3, r7
 8009502:	f7f6 fecb 	bl	800029c <__adddf3>
 8009506:	4602      	mov	r2, r0
 8009508:	460b      	mov	r3, r1
 800950a:	4620      	mov	r0, r4
 800950c:	4629      	mov	r1, r5
 800950e:	f7f6 fec3 	bl	8000298 <__aeabi_dsub>
 8009512:	4642      	mov	r2, r8
 8009514:	464b      	mov	r3, r9
 8009516:	f7f6 febf 	bl	8000298 <__aeabi_dsub>
 800951a:	460b      	mov	r3, r1
 800951c:	4602      	mov	r2, r0
 800951e:	493b      	ldr	r1, [pc, #236]	@ (800960c <__ieee754_pow+0xa6c>)
 8009520:	2000      	movs	r0, #0
 8009522:	f7f6 feb9 	bl	8000298 <__aeabi_dsub>
 8009526:	ec41 0b10 	vmov	d0, r0, r1
 800952a:	ee10 3a90 	vmov	r3, s1
 800952e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8009532:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009536:	da30      	bge.n	800959a <__ieee754_pow+0x9fa>
 8009538:	4650      	mov	r0, sl
 800953a:	f000 f87d 	bl	8009638 <scalbn>
 800953e:	ec51 0b10 	vmov	r0, r1, d0
 8009542:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009546:	f7ff bbd2 	b.w	8008cee <__ieee754_pow+0x14e>
 800954a:	4c31      	ldr	r4, [pc, #196]	@ (8009610 <__ieee754_pow+0xa70>)
 800954c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009550:	42a3      	cmp	r3, r4
 8009552:	d91a      	bls.n	800958a <__ieee754_pow+0x9ea>
 8009554:	4b2f      	ldr	r3, [pc, #188]	@ (8009614 <__ieee754_pow+0xa74>)
 8009556:	440b      	add	r3, r1
 8009558:	4303      	orrs	r3, r0
 800955a:	d009      	beq.n	8009570 <__ieee754_pow+0x9d0>
 800955c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009560:	2200      	movs	r2, #0
 8009562:	2300      	movs	r3, #0
 8009564:	f7f7 fac2 	bl	8000aec <__aeabi_dcmplt>
 8009568:	3800      	subs	r0, #0
 800956a:	bf18      	it	ne
 800956c:	2001      	movne	r0, #1
 800956e:	e42b      	b.n	8008dc8 <__ieee754_pow+0x228>
 8009570:	4642      	mov	r2, r8
 8009572:	464b      	mov	r3, r9
 8009574:	f7f6 fe90 	bl	8000298 <__aeabi_dsub>
 8009578:	4632      	mov	r2, r6
 800957a:	463b      	mov	r3, r7
 800957c:	f7f7 faca 	bl	8000b14 <__aeabi_dcmpge>
 8009580:	2800      	cmp	r0, #0
 8009582:	d1eb      	bne.n	800955c <__ieee754_pow+0x9bc>
 8009584:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8009624 <__ieee754_pow+0xa84>
 8009588:	e6f7      	b.n	800937a <__ieee754_pow+0x7da>
 800958a:	469a      	mov	sl, r3
 800958c:	4b22      	ldr	r3, [pc, #136]	@ (8009618 <__ieee754_pow+0xa78>)
 800958e:	459a      	cmp	sl, r3
 8009590:	f63f aef3 	bhi.w	800937a <__ieee754_pow+0x7da>
 8009594:	f8dd a010 	ldr.w	sl, [sp, #16]
 8009598:	e715      	b.n	80093c6 <__ieee754_pow+0x826>
 800959a:	ec51 0b10 	vmov	r0, r1, d0
 800959e:	4619      	mov	r1, r3
 80095a0:	e7cf      	b.n	8009542 <__ieee754_pow+0x9a2>
 80095a2:	491a      	ldr	r1, [pc, #104]	@ (800960c <__ieee754_pow+0xa6c>)
 80095a4:	2000      	movs	r0, #0
 80095a6:	f7ff bb18 	b.w	8008bda <__ieee754_pow+0x3a>
 80095aa:	2000      	movs	r0, #0
 80095ac:	2100      	movs	r1, #0
 80095ae:	f7ff bb14 	b.w	8008bda <__ieee754_pow+0x3a>
 80095b2:	4630      	mov	r0, r6
 80095b4:	4639      	mov	r1, r7
 80095b6:	f7ff bb10 	b.w	8008bda <__ieee754_pow+0x3a>
 80095ba:	460c      	mov	r4, r1
 80095bc:	f7ff bb5e 	b.w	8008c7c <__ieee754_pow+0xdc>
 80095c0:	2400      	movs	r4, #0
 80095c2:	f7ff bb49 	b.w	8008c58 <__ieee754_pow+0xb8>
 80095c6:	bf00      	nop
 80095c8:	00000000 	.word	0x00000000
 80095cc:	3fe62e43 	.word	0x3fe62e43
 80095d0:	fefa39ef 	.word	0xfefa39ef
 80095d4:	3fe62e42 	.word	0x3fe62e42
 80095d8:	0ca86c39 	.word	0x0ca86c39
 80095dc:	be205c61 	.word	0xbe205c61
 80095e0:	72bea4d0 	.word	0x72bea4d0
 80095e4:	3e663769 	.word	0x3e663769
 80095e8:	c5d26bf1 	.word	0xc5d26bf1
 80095ec:	3ebbbd41 	.word	0x3ebbbd41
 80095f0:	af25de2c 	.word	0xaf25de2c
 80095f4:	3f11566a 	.word	0x3f11566a
 80095f8:	16bebd93 	.word	0x16bebd93
 80095fc:	3f66c16c 	.word	0x3f66c16c
 8009600:	5555553e 	.word	0x5555553e
 8009604:	3fc55555 	.word	0x3fc55555
 8009608:	fff00000 	.word	0xfff00000
 800960c:	3ff00000 	.word	0x3ff00000
 8009610:	4090cbff 	.word	0x4090cbff
 8009614:	3f6f3400 	.word	0x3f6f3400
 8009618:	3fe00000 	.word	0x3fe00000
 800961c:	652b82fe 	.word	0x652b82fe
 8009620:	3c971547 	.word	0x3c971547
 8009624:	4090cc00 	.word	0x4090cc00

08009628 <fabs>:
 8009628:	ec51 0b10 	vmov	r0, r1, d0
 800962c:	4602      	mov	r2, r0
 800962e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009632:	ec43 2b10 	vmov	d0, r2, r3
 8009636:	4770      	bx	lr

08009638 <scalbn>:
 8009638:	b570      	push	{r4, r5, r6, lr}
 800963a:	ec55 4b10 	vmov	r4, r5, d0
 800963e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8009642:	4606      	mov	r6, r0
 8009644:	462b      	mov	r3, r5
 8009646:	b991      	cbnz	r1, 800966e <scalbn+0x36>
 8009648:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800964c:	4323      	orrs	r3, r4
 800964e:	d03d      	beq.n	80096cc <scalbn+0x94>
 8009650:	4b35      	ldr	r3, [pc, #212]	@ (8009728 <scalbn+0xf0>)
 8009652:	4620      	mov	r0, r4
 8009654:	4629      	mov	r1, r5
 8009656:	2200      	movs	r2, #0
 8009658:	f7f6 ffd6 	bl	8000608 <__aeabi_dmul>
 800965c:	4b33      	ldr	r3, [pc, #204]	@ (800972c <scalbn+0xf4>)
 800965e:	429e      	cmp	r6, r3
 8009660:	4604      	mov	r4, r0
 8009662:	460d      	mov	r5, r1
 8009664:	da0f      	bge.n	8009686 <scalbn+0x4e>
 8009666:	a328      	add	r3, pc, #160	@ (adr r3, 8009708 <scalbn+0xd0>)
 8009668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800966c:	e01e      	b.n	80096ac <scalbn+0x74>
 800966e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8009672:	4291      	cmp	r1, r2
 8009674:	d10b      	bne.n	800968e <scalbn+0x56>
 8009676:	4622      	mov	r2, r4
 8009678:	4620      	mov	r0, r4
 800967a:	4629      	mov	r1, r5
 800967c:	f7f6 fe0e 	bl	800029c <__adddf3>
 8009680:	4604      	mov	r4, r0
 8009682:	460d      	mov	r5, r1
 8009684:	e022      	b.n	80096cc <scalbn+0x94>
 8009686:	460b      	mov	r3, r1
 8009688:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800968c:	3936      	subs	r1, #54	@ 0x36
 800968e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8009692:	4296      	cmp	r6, r2
 8009694:	dd0d      	ble.n	80096b2 <scalbn+0x7a>
 8009696:	2d00      	cmp	r5, #0
 8009698:	a11d      	add	r1, pc, #116	@ (adr r1, 8009710 <scalbn+0xd8>)
 800969a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800969e:	da02      	bge.n	80096a6 <scalbn+0x6e>
 80096a0:	a11d      	add	r1, pc, #116	@ (adr r1, 8009718 <scalbn+0xe0>)
 80096a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096a6:	a31a      	add	r3, pc, #104	@ (adr r3, 8009710 <scalbn+0xd8>)
 80096a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ac:	f7f6 ffac 	bl	8000608 <__aeabi_dmul>
 80096b0:	e7e6      	b.n	8009680 <scalbn+0x48>
 80096b2:	1872      	adds	r2, r6, r1
 80096b4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80096b8:	428a      	cmp	r2, r1
 80096ba:	dcec      	bgt.n	8009696 <scalbn+0x5e>
 80096bc:	2a00      	cmp	r2, #0
 80096be:	dd08      	ble.n	80096d2 <scalbn+0x9a>
 80096c0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80096c4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80096c8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80096cc:	ec45 4b10 	vmov	d0, r4, r5
 80096d0:	bd70      	pop	{r4, r5, r6, pc}
 80096d2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80096d6:	da08      	bge.n	80096ea <scalbn+0xb2>
 80096d8:	2d00      	cmp	r5, #0
 80096da:	a10b      	add	r1, pc, #44	@ (adr r1, 8009708 <scalbn+0xd0>)
 80096dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096e0:	dac1      	bge.n	8009666 <scalbn+0x2e>
 80096e2:	a10f      	add	r1, pc, #60	@ (adr r1, 8009720 <scalbn+0xe8>)
 80096e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096e8:	e7bd      	b.n	8009666 <scalbn+0x2e>
 80096ea:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80096ee:	3236      	adds	r2, #54	@ 0x36
 80096f0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80096f4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80096f8:	4620      	mov	r0, r4
 80096fa:	4b0d      	ldr	r3, [pc, #52]	@ (8009730 <scalbn+0xf8>)
 80096fc:	4629      	mov	r1, r5
 80096fe:	2200      	movs	r2, #0
 8009700:	e7d4      	b.n	80096ac <scalbn+0x74>
 8009702:	bf00      	nop
 8009704:	f3af 8000 	nop.w
 8009708:	c2f8f359 	.word	0xc2f8f359
 800970c:	01a56e1f 	.word	0x01a56e1f
 8009710:	8800759c 	.word	0x8800759c
 8009714:	7e37e43c 	.word	0x7e37e43c
 8009718:	8800759c 	.word	0x8800759c
 800971c:	fe37e43c 	.word	0xfe37e43c
 8009720:	c2f8f359 	.word	0xc2f8f359
 8009724:	81a56e1f 	.word	0x81a56e1f
 8009728:	43500000 	.word	0x43500000
 800972c:	ffff3cb0 	.word	0xffff3cb0
 8009730:	3c900000 	.word	0x3c900000

08009734 <with_errno>:
 8009734:	b510      	push	{r4, lr}
 8009736:	ed2d 8b02 	vpush	{d8}
 800973a:	eeb0 8a40 	vmov.f32	s16, s0
 800973e:	eef0 8a60 	vmov.f32	s17, s1
 8009742:	4604      	mov	r4, r0
 8009744:	f7fd f938 	bl	80069b8 <__errno>
 8009748:	eeb0 0a48 	vmov.f32	s0, s16
 800974c:	eef0 0a68 	vmov.f32	s1, s17
 8009750:	ecbd 8b02 	vpop	{d8}
 8009754:	6004      	str	r4, [r0, #0]
 8009756:	bd10      	pop	{r4, pc}

08009758 <xflow>:
 8009758:	4603      	mov	r3, r0
 800975a:	b507      	push	{r0, r1, r2, lr}
 800975c:	ec51 0b10 	vmov	r0, r1, d0
 8009760:	b183      	cbz	r3, 8009784 <xflow+0x2c>
 8009762:	4602      	mov	r2, r0
 8009764:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009768:	e9cd 2300 	strd	r2, r3, [sp]
 800976c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009770:	f7f6 ff4a 	bl	8000608 <__aeabi_dmul>
 8009774:	ec41 0b10 	vmov	d0, r0, r1
 8009778:	2022      	movs	r0, #34	@ 0x22
 800977a:	b003      	add	sp, #12
 800977c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009780:	f7ff bfd8 	b.w	8009734 <with_errno>
 8009784:	4602      	mov	r2, r0
 8009786:	460b      	mov	r3, r1
 8009788:	e7ee      	b.n	8009768 <xflow+0x10>
 800978a:	0000      	movs	r0, r0
 800978c:	0000      	movs	r0, r0
	...

08009790 <__math_uflow>:
 8009790:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009798 <__math_uflow+0x8>
 8009794:	f7ff bfe0 	b.w	8009758 <xflow>
 8009798:	00000000 	.word	0x00000000
 800979c:	10000000 	.word	0x10000000

080097a0 <__math_oflow>:
 80097a0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80097a8 <__math_oflow+0x8>
 80097a4:	f7ff bfd8 	b.w	8009758 <xflow>
 80097a8:	00000000 	.word	0x00000000
 80097ac:	70000000 	.word	0x70000000

080097b0 <__ieee754_sqrt>:
 80097b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097b4:	4a68      	ldr	r2, [pc, #416]	@ (8009958 <__ieee754_sqrt+0x1a8>)
 80097b6:	ec55 4b10 	vmov	r4, r5, d0
 80097ba:	43aa      	bics	r2, r5
 80097bc:	462b      	mov	r3, r5
 80097be:	4621      	mov	r1, r4
 80097c0:	d110      	bne.n	80097e4 <__ieee754_sqrt+0x34>
 80097c2:	4622      	mov	r2, r4
 80097c4:	4620      	mov	r0, r4
 80097c6:	4629      	mov	r1, r5
 80097c8:	f7f6 ff1e 	bl	8000608 <__aeabi_dmul>
 80097cc:	4602      	mov	r2, r0
 80097ce:	460b      	mov	r3, r1
 80097d0:	4620      	mov	r0, r4
 80097d2:	4629      	mov	r1, r5
 80097d4:	f7f6 fd62 	bl	800029c <__adddf3>
 80097d8:	4604      	mov	r4, r0
 80097da:	460d      	mov	r5, r1
 80097dc:	ec45 4b10 	vmov	d0, r4, r5
 80097e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097e4:	2d00      	cmp	r5, #0
 80097e6:	dc0e      	bgt.n	8009806 <__ieee754_sqrt+0x56>
 80097e8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80097ec:	4322      	orrs	r2, r4
 80097ee:	d0f5      	beq.n	80097dc <__ieee754_sqrt+0x2c>
 80097f0:	b19d      	cbz	r5, 800981a <__ieee754_sqrt+0x6a>
 80097f2:	4622      	mov	r2, r4
 80097f4:	4620      	mov	r0, r4
 80097f6:	4629      	mov	r1, r5
 80097f8:	f7f6 fd4e 	bl	8000298 <__aeabi_dsub>
 80097fc:	4602      	mov	r2, r0
 80097fe:	460b      	mov	r3, r1
 8009800:	f7f7 f82c 	bl	800085c <__aeabi_ddiv>
 8009804:	e7e8      	b.n	80097d8 <__ieee754_sqrt+0x28>
 8009806:	152a      	asrs	r2, r5, #20
 8009808:	d115      	bne.n	8009836 <__ieee754_sqrt+0x86>
 800980a:	2000      	movs	r0, #0
 800980c:	e009      	b.n	8009822 <__ieee754_sqrt+0x72>
 800980e:	0acb      	lsrs	r3, r1, #11
 8009810:	3a15      	subs	r2, #21
 8009812:	0549      	lsls	r1, r1, #21
 8009814:	2b00      	cmp	r3, #0
 8009816:	d0fa      	beq.n	800980e <__ieee754_sqrt+0x5e>
 8009818:	e7f7      	b.n	800980a <__ieee754_sqrt+0x5a>
 800981a:	462a      	mov	r2, r5
 800981c:	e7fa      	b.n	8009814 <__ieee754_sqrt+0x64>
 800981e:	005b      	lsls	r3, r3, #1
 8009820:	3001      	adds	r0, #1
 8009822:	02dc      	lsls	r4, r3, #11
 8009824:	d5fb      	bpl.n	800981e <__ieee754_sqrt+0x6e>
 8009826:	1e44      	subs	r4, r0, #1
 8009828:	1b12      	subs	r2, r2, r4
 800982a:	f1c0 0420 	rsb	r4, r0, #32
 800982e:	fa21 f404 	lsr.w	r4, r1, r4
 8009832:	4323      	orrs	r3, r4
 8009834:	4081      	lsls	r1, r0
 8009836:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800983a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800983e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009842:	07d2      	lsls	r2, r2, #31
 8009844:	bf5c      	itt	pl
 8009846:	005b      	lslpl	r3, r3, #1
 8009848:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800984c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009850:	bf58      	it	pl
 8009852:	0049      	lslpl	r1, r1, #1
 8009854:	2600      	movs	r6, #0
 8009856:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800985a:	106d      	asrs	r5, r5, #1
 800985c:	0049      	lsls	r1, r1, #1
 800985e:	2016      	movs	r0, #22
 8009860:	4632      	mov	r2, r6
 8009862:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8009866:	1917      	adds	r7, r2, r4
 8009868:	429f      	cmp	r7, r3
 800986a:	bfde      	ittt	le
 800986c:	193a      	addle	r2, r7, r4
 800986e:	1bdb      	suble	r3, r3, r7
 8009870:	1936      	addle	r6, r6, r4
 8009872:	0fcf      	lsrs	r7, r1, #31
 8009874:	3801      	subs	r0, #1
 8009876:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800987a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800987e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009882:	d1f0      	bne.n	8009866 <__ieee754_sqrt+0xb6>
 8009884:	4604      	mov	r4, r0
 8009886:	2720      	movs	r7, #32
 8009888:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800988c:	429a      	cmp	r2, r3
 800988e:	eb00 0e0c 	add.w	lr, r0, ip
 8009892:	db02      	blt.n	800989a <__ieee754_sqrt+0xea>
 8009894:	d113      	bne.n	80098be <__ieee754_sqrt+0x10e>
 8009896:	458e      	cmp	lr, r1
 8009898:	d811      	bhi.n	80098be <__ieee754_sqrt+0x10e>
 800989a:	f1be 0f00 	cmp.w	lr, #0
 800989e:	eb0e 000c 	add.w	r0, lr, ip
 80098a2:	da42      	bge.n	800992a <__ieee754_sqrt+0x17a>
 80098a4:	2800      	cmp	r0, #0
 80098a6:	db40      	blt.n	800992a <__ieee754_sqrt+0x17a>
 80098a8:	f102 0801 	add.w	r8, r2, #1
 80098ac:	1a9b      	subs	r3, r3, r2
 80098ae:	458e      	cmp	lr, r1
 80098b0:	bf88      	it	hi
 80098b2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80098b6:	eba1 010e 	sub.w	r1, r1, lr
 80098ba:	4464      	add	r4, ip
 80098bc:	4642      	mov	r2, r8
 80098be:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80098c2:	3f01      	subs	r7, #1
 80098c4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80098c8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80098cc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80098d0:	d1dc      	bne.n	800988c <__ieee754_sqrt+0xdc>
 80098d2:	4319      	orrs	r1, r3
 80098d4:	d01b      	beq.n	800990e <__ieee754_sqrt+0x15e>
 80098d6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800995c <__ieee754_sqrt+0x1ac>
 80098da:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8009960 <__ieee754_sqrt+0x1b0>
 80098de:	e9da 0100 	ldrd	r0, r1, [sl]
 80098e2:	e9db 2300 	ldrd	r2, r3, [fp]
 80098e6:	f7f6 fcd7 	bl	8000298 <__aeabi_dsub>
 80098ea:	e9da 8900 	ldrd	r8, r9, [sl]
 80098ee:	4602      	mov	r2, r0
 80098f0:	460b      	mov	r3, r1
 80098f2:	4640      	mov	r0, r8
 80098f4:	4649      	mov	r1, r9
 80098f6:	f7f7 f903 	bl	8000b00 <__aeabi_dcmple>
 80098fa:	b140      	cbz	r0, 800990e <__ieee754_sqrt+0x15e>
 80098fc:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009900:	e9da 0100 	ldrd	r0, r1, [sl]
 8009904:	e9db 2300 	ldrd	r2, r3, [fp]
 8009908:	d111      	bne.n	800992e <__ieee754_sqrt+0x17e>
 800990a:	3601      	adds	r6, #1
 800990c:	463c      	mov	r4, r7
 800990e:	1072      	asrs	r2, r6, #1
 8009910:	0863      	lsrs	r3, r4, #1
 8009912:	07f1      	lsls	r1, r6, #31
 8009914:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8009918:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800991c:	bf48      	it	mi
 800991e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8009922:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8009926:	4618      	mov	r0, r3
 8009928:	e756      	b.n	80097d8 <__ieee754_sqrt+0x28>
 800992a:	4690      	mov	r8, r2
 800992c:	e7be      	b.n	80098ac <__ieee754_sqrt+0xfc>
 800992e:	f7f6 fcb5 	bl	800029c <__adddf3>
 8009932:	e9da 8900 	ldrd	r8, r9, [sl]
 8009936:	4602      	mov	r2, r0
 8009938:	460b      	mov	r3, r1
 800993a:	4640      	mov	r0, r8
 800993c:	4649      	mov	r1, r9
 800993e:	f7f7 f8d5 	bl	8000aec <__aeabi_dcmplt>
 8009942:	b120      	cbz	r0, 800994e <__ieee754_sqrt+0x19e>
 8009944:	1ca0      	adds	r0, r4, #2
 8009946:	bf08      	it	eq
 8009948:	3601      	addeq	r6, #1
 800994a:	3402      	adds	r4, #2
 800994c:	e7df      	b.n	800990e <__ieee754_sqrt+0x15e>
 800994e:	1c63      	adds	r3, r4, #1
 8009950:	f023 0401 	bic.w	r4, r3, #1
 8009954:	e7db      	b.n	800990e <__ieee754_sqrt+0x15e>
 8009956:	bf00      	nop
 8009958:	7ff00000 	.word	0x7ff00000
 800995c:	20000200 	.word	0x20000200
 8009960:	200001f8 	.word	0x200001f8

08009964 <_init>:
 8009964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009966:	bf00      	nop
 8009968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800996a:	bc08      	pop	{r3}
 800996c:	469e      	mov	lr, r3
 800996e:	4770      	bx	lr

08009970 <_fini>:
 8009970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009972:	bf00      	nop
 8009974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009976:	bc08      	pop	{r3}
 8009978:	469e      	mov	lr, r3
 800997a:	4770      	bx	lr
