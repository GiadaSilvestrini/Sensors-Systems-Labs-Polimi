
homework 05b.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c8c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  08008e30  08008e30  00009e30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009200  08009200  0000b1e8  2**0
                  CONTENTS
  4 .ARM          00000008  08009200  08009200  0000a200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009208  08009208  0000b1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009208  08009208  0000a208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800920c  0800920c  0000a20c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08009210  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  200001e8  080093f8  0000b1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004e4  080093f8  0000b4e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f61f  00000000  00000000  0000b218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002364  00000000  00000000  0001a837  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e80  00000000  00000000  0001cba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b56  00000000  00000000  0001da20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018776  00000000  00000000  0001e576  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001118b  00000000  00000000  00036cec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b5f7  00000000  00000000  00047e77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e346e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005148  00000000  00000000  000e34b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000e85fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008e14 	.word	0x08008e14

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	08008e14 	.word	0x08008e14

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <HAL_TIM_PeriodElapsedCallback>:
static void MX_USART2_UART_Init(void);
static void MX_ADC1_Init(void);
static void MX_TIM3_Init(void);
static void MX_TIM1_Init(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000f48:	b5b0      	push	{r4, r5, r7, lr}
 8000f4a:	b09e      	sub	sp, #120	@ 0x78
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	float temp = mean*3.3/4096;
 8000f50:	4b49      	ldr	r3, [pc, #292]	@ (8001078 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff faff 	bl	8000558 <__aeabi_f2d>
 8000f5a:	a343      	add	r3, pc, #268	@ (adr r3, 8001068 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f60:	f7ff fb52 	bl	8000608 <__aeabi_dmul>
 8000f64:	4602      	mov	r2, r0
 8000f66:	460b      	mov	r3, r1
 8000f68:	4610      	mov	r0, r2
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	f04f 0200 	mov.w	r2, #0
 8000f70:	4b42      	ldr	r3, [pc, #264]	@ (800107c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000f72:	f7ff fc73 	bl	800085c <__aeabi_ddiv>
 8000f76:	4602      	mov	r2, r0
 8000f78:	460b      	mov	r3, r1
 8000f7a:	4610      	mov	r0, r2
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f7ff fe1b 	bl	8000bb8 <__aeabi_d2f>
 8000f82:	4603      	mov	r3, r0
 8000f84:	677b      	str	r3, [r7, #116]	@ 0x74
	float ldr = (temp*100)/(3.3-temp);
 8000f86:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8000f8a:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8001080 <HAL_TIM_PeriodElapsedCallback+0x138>
 8000f8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f92:	ee17 0a90 	vmov	r0, s15
 8000f96:	f7ff fadf 	bl	8000558 <__aeabi_f2d>
 8000f9a:	4604      	mov	r4, r0
 8000f9c:	460d      	mov	r5, r1
 8000f9e:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8000fa0:	f7ff fada 	bl	8000558 <__aeabi_f2d>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	a12f      	add	r1, pc, #188	@ (adr r1, 8001068 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000faa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000fae:	f7ff f973 	bl	8000298 <__aeabi_dsub>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	4620      	mov	r0, r4
 8000fb8:	4629      	mov	r1, r5
 8000fba:	f7ff fc4f 	bl	800085c <__aeabi_ddiv>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	4610      	mov	r0, r2
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f7ff fdf7 	bl	8000bb8 <__aeabi_d2f>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	673b      	str	r3, [r7, #112]	@ 0x70
	lux = 10*pow(100/ldr,1.25);
 8000fce:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8001080 <HAL_TIM_PeriodElapsedCallback+0x138>
 8000fd2:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8000fd6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000fda:	ee16 0a90 	vmov	r0, s13
 8000fde:	f7ff fabb 	bl	8000558 <__aeabi_f2d>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	ed9f 1b22 	vldr	d1, [pc, #136]	@ 8001070 <HAL_TIM_PeriodElapsedCallback+0x128>
 8000fea:	ec43 2b10 	vmov	d0, r2, r3
 8000fee:	f006 ffb3 	bl	8007f58 <pow>
 8000ff2:	ec51 0b10 	vmov	r0, r1, d0
 8000ff6:	f04f 0200 	mov.w	r2, #0
 8000ffa:	4b22      	ldr	r3, [pc, #136]	@ (8001084 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000ffc:	f7ff fb04 	bl	8000608 <__aeabi_dmul>
 8001000:	4602      	mov	r2, r0
 8001002:	460b      	mov	r3, r1
 8001004:	4610      	mov	r0, r2
 8001006:	4619      	mov	r1, r3
 8001008:	f7ff fdd6 	bl	8000bb8 <__aeabi_d2f>
 800100c:	4603      	mov	r3, r0
 800100e:	4a1e      	ldr	r2, [pc, #120]	@ (8001088 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001010:	6013      	str	r3, [r2, #0]
	char msg[100]="";
 8001012:	2300      	movs	r3, #0
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	f107 0310 	add.w	r3, r7, #16
 800101a:	2260      	movs	r2, #96	@ 0x60
 800101c:	2100      	movs	r1, #0
 800101e:	4618      	mov	r0, r3
 8001020:	f004 fed1 	bl	8005dc6 <memset>
	sprintf(msg, "Lux: %f \r\n",lux);
 8001024:	4b18      	ldr	r3, [pc, #96]	@ (8001088 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff fa95 	bl	8000558 <__aeabi_f2d>
 800102e:	4602      	mov	r2, r0
 8001030:	460b      	mov	r3, r1
 8001032:	f107 000c 	add.w	r0, r7, #12
 8001036:	4915      	ldr	r1, [pc, #84]	@ (800108c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001038:	f004 fe62 	bl	8005d00 <siprintf>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 1000);
 800103c:	f107 010c 	add.w	r1, r7, #12
 8001040:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001044:	2264      	movs	r2, #100	@ 0x64
 8001046:	4812      	ldr	r0, [pc, #72]	@ (8001090 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001048:	f003 fdcb 	bl	8004be2 <HAL_UART_Transmit>
	i=0;
 800104c:	4b11      	ldr	r3, [pc, #68]	@ (8001094 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800104e:	f04f 0200 	mov.w	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
	mean=0;
 8001054:	4b08      	ldr	r3, [pc, #32]	@ (8001078 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001056:	f04f 0200 	mov.w	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
}
 800105c:	bf00      	nop
 800105e:	3778      	adds	r7, #120	@ 0x78
 8001060:	46bd      	mov	sp, r7
 8001062:	bdb0      	pop	{r4, r5, r7, pc}
 8001064:	f3af 8000 	nop.w
 8001068:	66666666 	.word	0x66666666
 800106c:	400a6666 	.word	0x400a6666
 8001070:	00000000 	.word	0x00000000
 8001074:	3ff40000 	.word	0x3ff40000
 8001078:	20000380 	.word	0x20000380
 800107c:	40b00000 	.word	0x40b00000
 8001080:	42c80000 	.word	0x42c80000
 8001084:	40240000 	.word	0x40240000
 8001088:	2000038c 	.word	0x2000038c
 800108c:	08008e30 	.word	0x08008e30
 8001090:	2000033c 	.word	0x2000033c
 8001094:	20000388 	.word	0x20000388

08001098 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	if(hadc == &hadc1){
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4a17      	ldr	r2, [pc, #92]	@ (8001100 <HAL_ADC_ConvCpltCallback+0x68>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d125      	bne.n	80010f4 <HAL_ADC_ConvCpltCallback+0x5c>
		i++;
 80010a8:	4b16      	ldr	r3, [pc, #88]	@ (8001104 <HAL_ADC_ConvCpltCallback+0x6c>)
 80010aa:	edd3 7a00 	vldr	s15, [r3]
 80010ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80010b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010b6:	4b13      	ldr	r3, [pc, #76]	@ (8001104 <HAL_ADC_ConvCpltCallback+0x6c>)
 80010b8:	edc3 7a00 	vstr	s15, [r3]
		mean=((mean*(i-1))+value)/i;
 80010bc:	4b11      	ldr	r3, [pc, #68]	@ (8001104 <HAL_ADC_ConvCpltCallback+0x6c>)
 80010be:	edd3 7a00 	vldr	s15, [r3]
 80010c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80010c6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80010ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001108 <HAL_ADC_ConvCpltCallback+0x70>)
 80010cc:	edd3 7a00 	vldr	s15, [r3]
 80010d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010d4:	4b0d      	ldr	r3, [pc, #52]	@ (800110c <HAL_ADC_ConvCpltCallback+0x74>)
 80010d6:	881b      	ldrh	r3, [r3, #0]
 80010d8:	ee07 3a90 	vmov	s15, r3
 80010dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010e0:	ee77 6a27 	vadd.f32	s13, s14, s15
 80010e4:	4b07      	ldr	r3, [pc, #28]	@ (8001104 <HAL_ADC_ConvCpltCallback+0x6c>)
 80010e6:	ed93 7a00 	vldr	s14, [r3]
 80010ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010ee:	4b06      	ldr	r3, [pc, #24]	@ (8001108 <HAL_ADC_ConvCpltCallback+0x70>)
 80010f0:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	20000204 	.word	0x20000204
 8001104:	20000388 	.word	0x20000388
 8001108:	20000380 	.word	0x20000380
 800110c:	20000384 	.word	0x20000384

08001110 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001114:	f000 fd48 	bl	8001ba8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001118:	f000 f822 	bl	8001160 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800111c:	f000 fa18 	bl	8001550 <MX_GPIO_Init>
  MX_DMA_Init();
 8001120:	f000 f9f6 	bl	8001510 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001124:	f000 f9ca 	bl	80014bc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001128:	f000 f886 	bl	8001238 <MX_ADC1_Init>
  MX_TIM3_Init();
 800112c:	f000 f978 	bl	8001420 <MX_TIM3_Init>
  MX_TIM1_Init();
 8001130:	f000 f8d4 	bl	80012dc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, &value, 1);
 8001134:	2201      	movs	r2, #1
 8001136:	4906      	ldr	r1, [pc, #24]	@ (8001150 <main+0x40>)
 8001138:	4806      	ldr	r0, [pc, #24]	@ (8001154 <main+0x44>)
 800113a:	f000 fefb 	bl	8001f34 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim3);
 800113e:	4806      	ldr	r0, [pc, #24]	@ (8001158 <main+0x48>)
 8001140:	f002 fdb8 	bl	8003cb4 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim1);
 8001144:	4805      	ldr	r0, [pc, #20]	@ (800115c <main+0x4c>)
 8001146:	f002 fe0f 	bl	8003d68 <HAL_TIM_Base_Start_IT>
  //HAL_TIM_Base_Start_IT(&htim1);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800114a:	bf00      	nop
 800114c:	e7fd      	b.n	800114a <main+0x3a>
 800114e:	bf00      	nop
 8001150:	20000384 	.word	0x20000384
 8001154:	20000204 	.word	0x20000204
 8001158:	200002f4 	.word	0x200002f4
 800115c:	200002ac 	.word	0x200002ac

08001160 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b094      	sub	sp, #80	@ 0x50
 8001164:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001166:	f107 0320 	add.w	r3, r7, #32
 800116a:	2230      	movs	r2, #48	@ 0x30
 800116c:	2100      	movs	r1, #0
 800116e:	4618      	mov	r0, r3
 8001170:	f004 fe29 	bl	8005dc6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001174:	f107 030c 	add.w	r3, r7, #12
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001184:	2300      	movs	r3, #0
 8001186:	60bb      	str	r3, [r7, #8]
 8001188:	4b29      	ldr	r3, [pc, #164]	@ (8001230 <SystemClock_Config+0xd0>)
 800118a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118c:	4a28      	ldr	r2, [pc, #160]	@ (8001230 <SystemClock_Config+0xd0>)
 800118e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001192:	6413      	str	r3, [r2, #64]	@ 0x40
 8001194:	4b26      	ldr	r3, [pc, #152]	@ (8001230 <SystemClock_Config+0xd0>)
 8001196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001198:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80011a0:	2300      	movs	r3, #0
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	4b23      	ldr	r3, [pc, #140]	@ (8001234 <SystemClock_Config+0xd4>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80011ac:	4a21      	ldr	r2, [pc, #132]	@ (8001234 <SystemClock_Config+0xd4>)
 80011ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011b2:	6013      	str	r3, [r2, #0]
 80011b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001234 <SystemClock_Config+0xd4>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011bc:	607b      	str	r3, [r7, #4]
 80011be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011c0:	2302      	movs	r3, #2
 80011c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011c4:	2301      	movs	r3, #1
 80011c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011c8:	2310      	movs	r3, #16
 80011ca:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011cc:	2302      	movs	r3, #2
 80011ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011d0:	2300      	movs	r3, #0
 80011d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80011d4:	2310      	movs	r3, #16
 80011d6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011d8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80011dc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80011de:	2304      	movs	r3, #4
 80011e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011e2:	2307      	movs	r3, #7
 80011e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e6:	f107 0320 	add.w	r3, r7, #32
 80011ea:	4618      	mov	r0, r3
 80011ec:	f002 f87a 	bl	80032e4 <HAL_RCC_OscConfig>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011f6:	f000 fa19 	bl	800162c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011fa:	230f      	movs	r3, #15
 80011fc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011fe:	2302      	movs	r3, #2
 8001200:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001202:	2300      	movs	r3, #0
 8001204:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001206:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800120a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800120c:	2300      	movs	r3, #0
 800120e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001210:	f107 030c 	add.w	r3, r7, #12
 8001214:	2102      	movs	r1, #2
 8001216:	4618      	mov	r0, r3
 8001218:	f002 fadc 	bl	80037d4 <HAL_RCC_ClockConfig>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001222:	f000 fa03 	bl	800162c <Error_Handler>
  }
}
 8001226:	bf00      	nop
 8001228:	3750      	adds	r7, #80	@ 0x50
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40023800 	.word	0x40023800
 8001234:	40007000 	.word	0x40007000

08001238 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800123e:	463b      	mov	r3, r7
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800124a:	4b22      	ldr	r3, [pc, #136]	@ (80012d4 <MX_ADC1_Init+0x9c>)
 800124c:	4a22      	ldr	r2, [pc, #136]	@ (80012d8 <MX_ADC1_Init+0xa0>)
 800124e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001250:	4b20      	ldr	r3, [pc, #128]	@ (80012d4 <MX_ADC1_Init+0x9c>)
 8001252:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001256:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001258:	4b1e      	ldr	r3, [pc, #120]	@ (80012d4 <MX_ADC1_Init+0x9c>)
 800125a:	2200      	movs	r2, #0
 800125c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800125e:	4b1d      	ldr	r3, [pc, #116]	@ (80012d4 <MX_ADC1_Init+0x9c>)
 8001260:	2200      	movs	r2, #0
 8001262:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001264:	4b1b      	ldr	r3, [pc, #108]	@ (80012d4 <MX_ADC1_Init+0x9c>)
 8001266:	2200      	movs	r2, #0
 8001268:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800126a:	4b1a      	ldr	r3, [pc, #104]	@ (80012d4 <MX_ADC1_Init+0x9c>)
 800126c:	2200      	movs	r2, #0
 800126e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001272:	4b18      	ldr	r3, [pc, #96]	@ (80012d4 <MX_ADC1_Init+0x9c>)
 8001274:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001278:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800127a:	4b16      	ldr	r3, [pc, #88]	@ (80012d4 <MX_ADC1_Init+0x9c>)
 800127c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001280:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001282:	4b14      	ldr	r3, [pc, #80]	@ (80012d4 <MX_ADC1_Init+0x9c>)
 8001284:	2200      	movs	r2, #0
 8001286:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001288:	4b12      	ldr	r3, [pc, #72]	@ (80012d4 <MX_ADC1_Init+0x9c>)
 800128a:	2201      	movs	r2, #1
 800128c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800128e:	4b11      	ldr	r3, [pc, #68]	@ (80012d4 <MX_ADC1_Init+0x9c>)
 8001290:	2201      	movs	r2, #1
 8001292:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001296:	4b0f      	ldr	r3, [pc, #60]	@ (80012d4 <MX_ADC1_Init+0x9c>)
 8001298:	2201      	movs	r2, #1
 800129a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800129c:	480d      	ldr	r0, [pc, #52]	@ (80012d4 <MX_ADC1_Init+0x9c>)
 800129e:	f000 fcf5 	bl	8001c8c <HAL_ADC_Init>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80012a8:	f000 f9c0 	bl	800162c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012b0:	2301      	movs	r3, #1
 80012b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80012b4:	2307      	movs	r3, #7
 80012b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012b8:	463b      	mov	r3, r7
 80012ba:	4619      	mov	r1, r3
 80012bc:	4805      	ldr	r0, [pc, #20]	@ (80012d4 <MX_ADC1_Init+0x9c>)
 80012be:	f000 ff47 	bl	8002150 <HAL_ADC_ConfigChannel>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80012c8:	f000 f9b0 	bl	800162c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012cc:	bf00      	nop
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20000204 	.word	0x20000204
 80012d8:	40012000 	.word	0x40012000

080012dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b096      	sub	sp, #88	@ 0x58
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012e2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]
 8001306:	60da      	str	r2, [r3, #12]
 8001308:	611a      	str	r2, [r3, #16]
 800130a:	615a      	str	r2, [r3, #20]
 800130c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800130e:	1d3b      	adds	r3, r7, #4
 8001310:	2220      	movs	r2, #32
 8001312:	2100      	movs	r1, #0
 8001314:	4618      	mov	r0, r3
 8001316:	f004 fd56 	bl	8005dc6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800131a:	4b3f      	ldr	r3, [pc, #252]	@ (8001418 <MX_TIM1_Init+0x13c>)
 800131c:	4a3f      	ldr	r2, [pc, #252]	@ (800141c <MX_TIM1_Init+0x140>)
 800131e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8400-1;
 8001320:	4b3d      	ldr	r3, [pc, #244]	@ (8001418 <MX_TIM1_Init+0x13c>)
 8001322:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001326:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001328:	4b3b      	ldr	r3, [pc, #236]	@ (8001418 <MX_TIM1_Init+0x13c>)
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 800132e:	4b3a      	ldr	r3, [pc, #232]	@ (8001418 <MX_TIM1_Init+0x13c>)
 8001330:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001334:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001336:	4b38      	ldr	r3, [pc, #224]	@ (8001418 <MX_TIM1_Init+0x13c>)
 8001338:	2200      	movs	r2, #0
 800133a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800133c:	4b36      	ldr	r3, [pc, #216]	@ (8001418 <MX_TIM1_Init+0x13c>)
 800133e:	2200      	movs	r2, #0
 8001340:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001342:	4b35      	ldr	r3, [pc, #212]	@ (8001418 <MX_TIM1_Init+0x13c>)
 8001344:	2200      	movs	r2, #0
 8001346:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001348:	4833      	ldr	r0, [pc, #204]	@ (8001418 <MX_TIM1_Init+0x13c>)
 800134a:	f002 fc63 	bl	8003c14 <HAL_TIM_Base_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001354:	f000 f96a 	bl	800162c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001358:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800135c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800135e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001362:	4619      	mov	r1, r3
 8001364:	482c      	ldr	r0, [pc, #176]	@ (8001418 <MX_TIM1_Init+0x13c>)
 8001366:	f002 ff85 	bl	8004274 <HAL_TIM_ConfigClockSource>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001370:	f000 f95c 	bl	800162c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001374:	4828      	ldr	r0, [pc, #160]	@ (8001418 <MX_TIM1_Init+0x13c>)
 8001376:	f002 fd59 	bl	8003e2c <HAL_TIM_PWM_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001380:	f000 f954 	bl	800162c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001384:	2300      	movs	r3, #0
 8001386:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001388:	2300      	movs	r3, #0
 800138a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800138c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001390:	4619      	mov	r1, r3
 8001392:	4821      	ldr	r0, [pc, #132]	@ (8001418 <MX_TIM1_Init+0x13c>)
 8001394:	f003 fb04 	bl	80049a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800139e:	f000 f945 	bl	800162c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013a2:	2360      	movs	r3, #96	@ 0x60
 80013a4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013aa:	2300      	movs	r3, #0
 80013ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013ae:	2300      	movs	r3, #0
 80013b0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013b2:	2300      	movs	r3, #0
 80013b4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013b6:	2300      	movs	r3, #0
 80013b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013ba:	2300      	movs	r3, #0
 80013bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013c2:	2200      	movs	r2, #0
 80013c4:	4619      	mov	r1, r3
 80013c6:	4814      	ldr	r0, [pc, #80]	@ (8001418 <MX_TIM1_Init+0x13c>)
 80013c8:	f002 fe92 	bl	80040f0 <HAL_TIM_PWM_ConfigChannel>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80013d2:	f000 f92b 	bl	800162c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013d6:	2300      	movs	r3, #0
 80013d8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013da:	2300      	movs	r3, #0
 80013dc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013e6:	2300      	movs	r3, #0
 80013e8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013ee:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013f0:	2300      	movs	r3, #0
 80013f2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013f4:	1d3b      	adds	r3, r7, #4
 80013f6:	4619      	mov	r1, r3
 80013f8:	4807      	ldr	r0, [pc, #28]	@ (8001418 <MX_TIM1_Init+0x13c>)
 80013fa:	f003 fb3f 	bl	8004a7c <HAL_TIMEx_ConfigBreakDeadTime>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001404:	f000 f912 	bl	800162c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001408:	4803      	ldr	r0, [pc, #12]	@ (8001418 <MX_TIM1_Init+0x13c>)
 800140a:	f000 f9fb 	bl	8001804 <HAL_TIM_MspPostInit>

}
 800140e:	bf00      	nop
 8001410:	3758      	adds	r7, #88	@ 0x58
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	200002ac 	.word	0x200002ac
 800141c:	40010000 	.word	0x40010000

08001420 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001426:	f107 0308 	add.w	r3, r7, #8
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001434:	463b      	mov	r3, r7
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800143c:	4b1d      	ldr	r3, [pc, #116]	@ (80014b4 <MX_TIM3_Init+0x94>)
 800143e:	4a1e      	ldr	r2, [pc, #120]	@ (80014b8 <MX_TIM3_Init+0x98>)
 8001440:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 8001442:	4b1c      	ldr	r3, [pc, #112]	@ (80014b4 <MX_TIM3_Init+0x94>)
 8001444:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001448:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800144a:	4b1a      	ldr	r3, [pc, #104]	@ (80014b4 <MX_TIM3_Init+0x94>)
 800144c:	2200      	movs	r2, #0
 800144e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10-1;
 8001450:	4b18      	ldr	r3, [pc, #96]	@ (80014b4 <MX_TIM3_Init+0x94>)
 8001452:	2209      	movs	r2, #9
 8001454:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001456:	4b17      	ldr	r3, [pc, #92]	@ (80014b4 <MX_TIM3_Init+0x94>)
 8001458:	2200      	movs	r2, #0
 800145a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800145c:	4b15      	ldr	r3, [pc, #84]	@ (80014b4 <MX_TIM3_Init+0x94>)
 800145e:	2200      	movs	r2, #0
 8001460:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001462:	4814      	ldr	r0, [pc, #80]	@ (80014b4 <MX_TIM3_Init+0x94>)
 8001464:	f002 fbd6 	bl	8003c14 <HAL_TIM_Base_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800146e:	f000 f8dd 	bl	800162c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001472:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001476:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001478:	f107 0308 	add.w	r3, r7, #8
 800147c:	4619      	mov	r1, r3
 800147e:	480d      	ldr	r0, [pc, #52]	@ (80014b4 <MX_TIM3_Init+0x94>)
 8001480:	f002 fef8 	bl	8004274 <HAL_TIM_ConfigClockSource>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800148a:	f000 f8cf 	bl	800162c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800148e:	2320      	movs	r3, #32
 8001490:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001492:	2300      	movs	r3, #0
 8001494:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001496:	463b      	mov	r3, r7
 8001498:	4619      	mov	r1, r3
 800149a:	4806      	ldr	r0, [pc, #24]	@ (80014b4 <MX_TIM3_Init+0x94>)
 800149c:	f003 fa80 	bl	80049a0 <HAL_TIMEx_MasterConfigSynchronization>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80014a6:	f000 f8c1 	bl	800162c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014aa:	bf00      	nop
 80014ac:	3718      	adds	r7, #24
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	200002f4 	.word	0x200002f4
 80014b8:	40000400 	.word	0x40000400

080014bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014c0:	4b11      	ldr	r3, [pc, #68]	@ (8001508 <MX_USART2_UART_Init+0x4c>)
 80014c2:	4a12      	ldr	r2, [pc, #72]	@ (800150c <MX_USART2_UART_Init+0x50>)
 80014c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014c6:	4b10      	ldr	r3, [pc, #64]	@ (8001508 <MX_USART2_UART_Init+0x4c>)
 80014c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001508 <MX_USART2_UART_Init+0x4c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001508 <MX_USART2_UART_Init+0x4c>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014da:	4b0b      	ldr	r3, [pc, #44]	@ (8001508 <MX_USART2_UART_Init+0x4c>)
 80014dc:	2200      	movs	r2, #0
 80014de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014e0:	4b09      	ldr	r3, [pc, #36]	@ (8001508 <MX_USART2_UART_Init+0x4c>)
 80014e2:	220c      	movs	r2, #12
 80014e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014e6:	4b08      	ldr	r3, [pc, #32]	@ (8001508 <MX_USART2_UART_Init+0x4c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014ec:	4b06      	ldr	r3, [pc, #24]	@ (8001508 <MX_USART2_UART_Init+0x4c>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014f2:	4805      	ldr	r0, [pc, #20]	@ (8001508 <MX_USART2_UART_Init+0x4c>)
 80014f4:	f003 fb28 	bl	8004b48 <HAL_UART_Init>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014fe:	f000 f895 	bl	800162c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	2000033c 	.word	0x2000033c
 800150c:	40004400 	.word	0x40004400

08001510 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	607b      	str	r3, [r7, #4]
 800151a:	4b0c      	ldr	r3, [pc, #48]	@ (800154c <MX_DMA_Init+0x3c>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151e:	4a0b      	ldr	r2, [pc, #44]	@ (800154c <MX_DMA_Init+0x3c>)
 8001520:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001524:	6313      	str	r3, [r2, #48]	@ 0x30
 8001526:	4b09      	ldr	r3, [pc, #36]	@ (800154c <MX_DMA_Init+0x3c>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800152e:	607b      	str	r3, [r7, #4]
 8001530:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001532:	2200      	movs	r2, #0
 8001534:	2100      	movs	r1, #0
 8001536:	2038      	movs	r0, #56	@ 0x38
 8001538:	f001 f98f 	bl	800285a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800153c:	2038      	movs	r0, #56	@ 0x38
 800153e:	f001 f9a8 	bl	8002892 <HAL_NVIC_EnableIRQ>

}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40023800 	.word	0x40023800

08001550 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08a      	sub	sp, #40	@ 0x28
 8001554:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001556:	f107 0314 	add.w	r3, r7, #20
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	609a      	str	r2, [r3, #8]
 8001562:	60da      	str	r2, [r3, #12]
 8001564:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]
 800156a:	4b2d      	ldr	r3, [pc, #180]	@ (8001620 <MX_GPIO_Init+0xd0>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156e:	4a2c      	ldr	r2, [pc, #176]	@ (8001620 <MX_GPIO_Init+0xd0>)
 8001570:	f043 0304 	orr.w	r3, r3, #4
 8001574:	6313      	str	r3, [r2, #48]	@ 0x30
 8001576:	4b2a      	ldr	r3, [pc, #168]	@ (8001620 <MX_GPIO_Init+0xd0>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157a:	f003 0304 	and.w	r3, r3, #4
 800157e:	613b      	str	r3, [r7, #16]
 8001580:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	4b26      	ldr	r3, [pc, #152]	@ (8001620 <MX_GPIO_Init+0xd0>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158a:	4a25      	ldr	r2, [pc, #148]	@ (8001620 <MX_GPIO_Init+0xd0>)
 800158c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001590:	6313      	str	r3, [r2, #48]	@ 0x30
 8001592:	4b23      	ldr	r3, [pc, #140]	@ (8001620 <MX_GPIO_Init+0xd0>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001596:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	60bb      	str	r3, [r7, #8]
 80015a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001620 <MX_GPIO_Init+0xd0>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a6:	4a1e      	ldr	r2, [pc, #120]	@ (8001620 <MX_GPIO_Init+0xd0>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001620 <MX_GPIO_Init+0xd0>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	60bb      	str	r3, [r7, #8]
 80015b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	607b      	str	r3, [r7, #4]
 80015be:	4b18      	ldr	r3, [pc, #96]	@ (8001620 <MX_GPIO_Init+0xd0>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c2:	4a17      	ldr	r2, [pc, #92]	@ (8001620 <MX_GPIO_Init+0xd0>)
 80015c4:	f043 0302 	orr.w	r3, r3, #2
 80015c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ca:	4b15      	ldr	r3, [pc, #84]	@ (8001620 <MX_GPIO_Init+0xd0>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	607b      	str	r3, [r7, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015d6:	2200      	movs	r2, #0
 80015d8:	2120      	movs	r1, #32
 80015da:	4812      	ldr	r0, [pc, #72]	@ (8001624 <MX_GPIO_Init+0xd4>)
 80015dc:	f001 fe68 	bl	80032b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015e6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80015ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015f0:	f107 0314 	add.w	r3, r7, #20
 80015f4:	4619      	mov	r1, r3
 80015f6:	480c      	ldr	r0, [pc, #48]	@ (8001628 <MX_GPIO_Init+0xd8>)
 80015f8:	f001 fcd6 	bl	8002fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80015fc:	2320      	movs	r3, #32
 80015fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001600:	2301      	movs	r3, #1
 8001602:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001608:	2300      	movs	r3, #0
 800160a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	4619      	mov	r1, r3
 8001612:	4804      	ldr	r0, [pc, #16]	@ (8001624 <MX_GPIO_Init+0xd4>)
 8001614:	f001 fcc8 	bl	8002fa8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001618:	bf00      	nop
 800161a:	3728      	adds	r7, #40	@ 0x28
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40023800 	.word	0x40023800
 8001624:	40020000 	.word	0x40020000
 8001628:	40020800 	.word	0x40020800

0800162c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001630:	b672      	cpsid	i
}
 8001632:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001634:	bf00      	nop
 8001636:	e7fd      	b.n	8001634 <Error_Handler+0x8>

08001638 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	607b      	str	r3, [r7, #4]
 8001642:	4b10      	ldr	r3, [pc, #64]	@ (8001684 <HAL_MspInit+0x4c>)
 8001644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001646:	4a0f      	ldr	r2, [pc, #60]	@ (8001684 <HAL_MspInit+0x4c>)
 8001648:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800164c:	6453      	str	r3, [r2, #68]	@ 0x44
 800164e:	4b0d      	ldr	r3, [pc, #52]	@ (8001684 <HAL_MspInit+0x4c>)
 8001650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001652:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001656:	607b      	str	r3, [r7, #4]
 8001658:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	603b      	str	r3, [r7, #0]
 800165e:	4b09      	ldr	r3, [pc, #36]	@ (8001684 <HAL_MspInit+0x4c>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001662:	4a08      	ldr	r2, [pc, #32]	@ (8001684 <HAL_MspInit+0x4c>)
 8001664:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001668:	6413      	str	r3, [r2, #64]	@ 0x40
 800166a:	4b06      	ldr	r3, [pc, #24]	@ (8001684 <HAL_MspInit+0x4c>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001672:	603b      	str	r3, [r7, #0]
 8001674:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001676:	2007      	movs	r0, #7
 8001678:	f001 f8e4 	bl	8002844 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800167c:	bf00      	nop
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40023800 	.word	0x40023800

08001688 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08a      	sub	sp, #40	@ 0x28
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001690:	f107 0314 	add.w	r3, r7, #20
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a33      	ldr	r2, [pc, #204]	@ (8001774 <HAL_ADC_MspInit+0xec>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d15f      	bne.n	800176a <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	4b32      	ldr	r3, [pc, #200]	@ (8001778 <HAL_ADC_MspInit+0xf0>)
 80016b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016b2:	4a31      	ldr	r2, [pc, #196]	@ (8001778 <HAL_ADC_MspInit+0xf0>)
 80016b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80016ba:	4b2f      	ldr	r3, [pc, #188]	@ (8001778 <HAL_ADC_MspInit+0xf0>)
 80016bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016c2:	613b      	str	r3, [r7, #16]
 80016c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	4b2b      	ldr	r3, [pc, #172]	@ (8001778 <HAL_ADC_MspInit+0xf0>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ce:	4a2a      	ldr	r2, [pc, #168]	@ (8001778 <HAL_ADC_MspInit+0xf0>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016d6:	4b28      	ldr	r3, [pc, #160]	@ (8001778 <HAL_ADC_MspInit+0xf0>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016e2:	2301      	movs	r3, #1
 80016e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016e6:	2303      	movs	r3, #3
 80016e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ee:	f107 0314 	add.w	r3, r7, #20
 80016f2:	4619      	mov	r1, r3
 80016f4:	4821      	ldr	r0, [pc, #132]	@ (800177c <HAL_ADC_MspInit+0xf4>)
 80016f6:	f001 fc57 	bl	8002fa8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80016fa:	4b21      	ldr	r3, [pc, #132]	@ (8001780 <HAL_ADC_MspInit+0xf8>)
 80016fc:	4a21      	ldr	r2, [pc, #132]	@ (8001784 <HAL_ADC_MspInit+0xfc>)
 80016fe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001700:	4b1f      	ldr	r3, [pc, #124]	@ (8001780 <HAL_ADC_MspInit+0xf8>)
 8001702:	2200      	movs	r2, #0
 8001704:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001706:	4b1e      	ldr	r3, [pc, #120]	@ (8001780 <HAL_ADC_MspInit+0xf8>)
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800170c:	4b1c      	ldr	r3, [pc, #112]	@ (8001780 <HAL_ADC_MspInit+0xf8>)
 800170e:	2200      	movs	r2, #0
 8001710:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001712:	4b1b      	ldr	r3, [pc, #108]	@ (8001780 <HAL_ADC_MspInit+0xf8>)
 8001714:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001718:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800171a:	4b19      	ldr	r3, [pc, #100]	@ (8001780 <HAL_ADC_MspInit+0xf8>)
 800171c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001720:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001722:	4b17      	ldr	r3, [pc, #92]	@ (8001780 <HAL_ADC_MspInit+0xf8>)
 8001724:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001728:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800172a:	4b15      	ldr	r3, [pc, #84]	@ (8001780 <HAL_ADC_MspInit+0xf8>)
 800172c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001730:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001732:	4b13      	ldr	r3, [pc, #76]	@ (8001780 <HAL_ADC_MspInit+0xf8>)
 8001734:	2200      	movs	r2, #0
 8001736:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001738:	4b11      	ldr	r3, [pc, #68]	@ (8001780 <HAL_ADC_MspInit+0xf8>)
 800173a:	2200      	movs	r2, #0
 800173c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800173e:	4810      	ldr	r0, [pc, #64]	@ (8001780 <HAL_ADC_MspInit+0xf8>)
 8001740:	f001 f8c2 	bl	80028c8 <HAL_DMA_Init>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800174a:	f7ff ff6f 	bl	800162c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a0b      	ldr	r2, [pc, #44]	@ (8001780 <HAL_ADC_MspInit+0xf8>)
 8001752:	639a      	str	r2, [r3, #56]	@ 0x38
 8001754:	4a0a      	ldr	r2, [pc, #40]	@ (8001780 <HAL_ADC_MspInit+0xf8>)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800175a:	2200      	movs	r2, #0
 800175c:	2100      	movs	r1, #0
 800175e:	2012      	movs	r0, #18
 8001760:	f001 f87b 	bl	800285a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001764:	2012      	movs	r0, #18
 8001766:	f001 f894 	bl	8002892 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800176a:	bf00      	nop
 800176c:	3728      	adds	r7, #40	@ 0x28
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40012000 	.word	0x40012000
 8001778:	40023800 	.word	0x40023800
 800177c:	40020000 	.word	0x40020000
 8001780:	2000024c 	.word	0x2000024c
 8001784:	40026410 	.word	0x40026410

08001788 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a18      	ldr	r2, [pc, #96]	@ (80017f8 <HAL_TIM_Base_MspInit+0x70>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d116      	bne.n	80017c8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	4b17      	ldr	r3, [pc, #92]	@ (80017fc <HAL_TIM_Base_MspInit+0x74>)
 80017a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017a2:	4a16      	ldr	r2, [pc, #88]	@ (80017fc <HAL_TIM_Base_MspInit+0x74>)
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80017aa:	4b14      	ldr	r3, [pc, #80]	@ (80017fc <HAL_TIM_Base_MspInit+0x74>)
 80017ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2100      	movs	r1, #0
 80017ba:	2019      	movs	r0, #25
 80017bc:	f001 f84d 	bl	800285a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80017c0:	2019      	movs	r0, #25
 80017c2:	f001 f866 	bl	8002892 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80017c6:	e012      	b.n	80017ee <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a0c      	ldr	r2, [pc, #48]	@ (8001800 <HAL_TIM_Base_MspInit+0x78>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d10d      	bne.n	80017ee <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	4b09      	ldr	r3, [pc, #36]	@ (80017fc <HAL_TIM_Base_MspInit+0x74>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017da:	4a08      	ldr	r2, [pc, #32]	@ (80017fc <HAL_TIM_Base_MspInit+0x74>)
 80017dc:	f043 0302 	orr.w	r3, r3, #2
 80017e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80017e2:	4b06      	ldr	r3, [pc, #24]	@ (80017fc <HAL_TIM_Base_MspInit+0x74>)
 80017e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	60bb      	str	r3, [r7, #8]
 80017ec:	68bb      	ldr	r3, [r7, #8]
}
 80017ee:	bf00      	nop
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40010000 	.word	0x40010000
 80017fc:	40023800 	.word	0x40023800
 8001800:	40000400 	.word	0x40000400

08001804 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b088      	sub	sp, #32
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180c:	f107 030c 	add.w	r3, r7, #12
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a12      	ldr	r2, [pc, #72]	@ (800186c <HAL_TIM_MspPostInit+0x68>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d11e      	bne.n	8001864 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	4b11      	ldr	r3, [pc, #68]	@ (8001870 <HAL_TIM_MspPostInit+0x6c>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182e:	4a10      	ldr	r2, [pc, #64]	@ (8001870 <HAL_TIM_MspPostInit+0x6c>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	6313      	str	r3, [r2, #48]	@ 0x30
 8001836:	4b0e      	ldr	r3, [pc, #56]	@ (8001870 <HAL_TIM_MspPostInit+0x6c>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001842:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001846:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001848:	2302      	movs	r3, #2
 800184a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001850:	2300      	movs	r3, #0
 8001852:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001854:	2301      	movs	r3, #1
 8001856:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001858:	f107 030c 	add.w	r3, r7, #12
 800185c:	4619      	mov	r1, r3
 800185e:	4805      	ldr	r0, [pc, #20]	@ (8001874 <HAL_TIM_MspPostInit+0x70>)
 8001860:	f001 fba2 	bl	8002fa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001864:	bf00      	nop
 8001866:	3720      	adds	r7, #32
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40010000 	.word	0x40010000
 8001870:	40023800 	.word	0x40023800
 8001874:	40020000 	.word	0x40020000

08001878 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b08a      	sub	sp, #40	@ 0x28
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001880:	f107 0314 	add.w	r3, r7, #20
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a19      	ldr	r2, [pc, #100]	@ (80018fc <HAL_UART_MspInit+0x84>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d12b      	bne.n	80018f2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	613b      	str	r3, [r7, #16]
 800189e:	4b18      	ldr	r3, [pc, #96]	@ (8001900 <HAL_UART_MspInit+0x88>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a2:	4a17      	ldr	r2, [pc, #92]	@ (8001900 <HAL_UART_MspInit+0x88>)
 80018a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80018aa:	4b15      	ldr	r3, [pc, #84]	@ (8001900 <HAL_UART_MspInit+0x88>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018b2:	613b      	str	r3, [r7, #16]
 80018b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	4b11      	ldr	r3, [pc, #68]	@ (8001900 <HAL_UART_MspInit+0x88>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018be:	4a10      	ldr	r2, [pc, #64]	@ (8001900 <HAL_UART_MspInit+0x88>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001900 <HAL_UART_MspInit+0x88>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018d2:	230c      	movs	r3, #12
 80018d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d6:	2302      	movs	r3, #2
 80018d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018de:	2300      	movs	r3, #0
 80018e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018e2:	2307      	movs	r3, #7
 80018e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e6:	f107 0314 	add.w	r3, r7, #20
 80018ea:	4619      	mov	r1, r3
 80018ec:	4805      	ldr	r0, [pc, #20]	@ (8001904 <HAL_UART_MspInit+0x8c>)
 80018ee:	f001 fb5b 	bl	8002fa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018f2:	bf00      	nop
 80018f4:	3728      	adds	r7, #40	@ 0x28
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40004400 	.word	0x40004400
 8001900:	40023800 	.word	0x40023800
 8001904:	40020000 	.word	0x40020000

08001908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800190c:	bf00      	nop
 800190e:	e7fd      	b.n	800190c <NMI_Handler+0x4>

08001910 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001914:	bf00      	nop
 8001916:	e7fd      	b.n	8001914 <HardFault_Handler+0x4>

08001918 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800191c:	bf00      	nop
 800191e:	e7fd      	b.n	800191c <MemManage_Handler+0x4>

08001920 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001924:	bf00      	nop
 8001926:	e7fd      	b.n	8001924 <BusFault_Handler+0x4>

08001928 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800192c:	bf00      	nop
 800192e:	e7fd      	b.n	800192c <UsageFault_Handler+0x4>

08001930 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800195e:	f000 f975 	bl	8001c4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
	...

08001968 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800196c:	4802      	ldr	r0, [pc, #8]	@ (8001978 <ADC_IRQHandler+0x10>)
 800196e:	f000 f9d0 	bl	8001d12 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20000204 	.word	0x20000204

0800197c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001980:	4802      	ldr	r0, [pc, #8]	@ (800198c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001982:	f002 faac 	bl	8003ede <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	200002ac 	.word	0x200002ac

08001990 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001994:	4802      	ldr	r0, [pc, #8]	@ (80019a0 <DMA2_Stream0_IRQHandler+0x10>)
 8001996:	f001 f89d 	bl	8002ad4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	2000024c 	.word	0x2000024c

080019a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  return 1;
 80019a8:	2301      	movs	r3, #1
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <_kill>:

int _kill(int pid, int sig)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019be:	f004 fa55 	bl	8005e6c <__errno>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2216      	movs	r2, #22
 80019c6:	601a      	str	r2, [r3, #0]
  return -1;
 80019c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <_exit>:

void _exit (int status)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019dc:	f04f 31ff 	mov.w	r1, #4294967295
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff ffe7 	bl	80019b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019e6:	bf00      	nop
 80019e8:	e7fd      	b.n	80019e6 <_exit+0x12>

080019ea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b086      	sub	sp, #24
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	60f8      	str	r0, [r7, #12]
 80019f2:	60b9      	str	r1, [r7, #8]
 80019f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]
 80019fa:	e00a      	b.n	8001a12 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019fc:	f3af 8000 	nop.w
 8001a00:	4601      	mov	r1, r0
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	1c5a      	adds	r2, r3, #1
 8001a06:	60ba      	str	r2, [r7, #8]
 8001a08:	b2ca      	uxtb	r2, r1
 8001a0a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	617b      	str	r3, [r7, #20]
 8001a12:	697a      	ldr	r2, [r7, #20]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	dbf0      	blt.n	80019fc <_read+0x12>
  }

  return len;
 8001a1a:	687b      	ldr	r3, [r7, #4]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]
 8001a34:	e009      	b.n	8001a4a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	1c5a      	adds	r2, r3, #1
 8001a3a:	60ba      	str	r2, [r7, #8]
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	3301      	adds	r3, #1
 8001a48:	617b      	str	r3, [r7, #20]
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	dbf1      	blt.n	8001a36 <_write+0x12>
  }
  return len;
 8001a52:	687b      	ldr	r3, [r7, #4]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3718      	adds	r7, #24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <_close>:

int _close(int file)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a84:	605a      	str	r2, [r3, #4]
  return 0;
 8001a86:	2300      	movs	r3, #0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <_isatty>:

int _isatty(int file)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a9c:	2301      	movs	r3, #1
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b085      	sub	sp, #20
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	60f8      	str	r0, [r7, #12]
 8001ab2:	60b9      	str	r1, [r7, #8]
 8001ab4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3714      	adds	r7, #20
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001acc:	4a14      	ldr	r2, [pc, #80]	@ (8001b20 <_sbrk+0x5c>)
 8001ace:	4b15      	ldr	r3, [pc, #84]	@ (8001b24 <_sbrk+0x60>)
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ad8:	4b13      	ldr	r3, [pc, #76]	@ (8001b28 <_sbrk+0x64>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d102      	bne.n	8001ae6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ae0:	4b11      	ldr	r3, [pc, #68]	@ (8001b28 <_sbrk+0x64>)
 8001ae2:	4a12      	ldr	r2, [pc, #72]	@ (8001b2c <_sbrk+0x68>)
 8001ae4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ae6:	4b10      	ldr	r3, [pc, #64]	@ (8001b28 <_sbrk+0x64>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4413      	add	r3, r2
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d207      	bcs.n	8001b04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001af4:	f004 f9ba 	bl	8005e6c <__errno>
 8001af8:	4603      	mov	r3, r0
 8001afa:	220c      	movs	r2, #12
 8001afc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001afe:	f04f 33ff 	mov.w	r3, #4294967295
 8001b02:	e009      	b.n	8001b18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b04:	4b08      	ldr	r3, [pc, #32]	@ (8001b28 <_sbrk+0x64>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b0a:	4b07      	ldr	r3, [pc, #28]	@ (8001b28 <_sbrk+0x64>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4413      	add	r3, r2
 8001b12:	4a05      	ldr	r2, [pc, #20]	@ (8001b28 <_sbrk+0x64>)
 8001b14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b16:	68fb      	ldr	r3, [r7, #12]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3718      	adds	r7, #24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	20018000 	.word	0x20018000
 8001b24:	00000400 	.word	0x00000400
 8001b28:	20000390 	.word	0x20000390
 8001b2c:	200004e8 	.word	0x200004e8

08001b30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b34:	4b06      	ldr	r3, [pc, #24]	@ (8001b50 <SystemInit+0x20>)
 8001b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b3a:	4a05      	ldr	r2, [pc, #20]	@ (8001b50 <SystemInit+0x20>)
 8001b3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b58:	480d      	ldr	r0, [pc, #52]	@ (8001b90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b5a:	490e      	ldr	r1, [pc, #56]	@ (8001b94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b5c:	4a0e      	ldr	r2, [pc, #56]	@ (8001b98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b60:	e002      	b.n	8001b68 <LoopCopyDataInit>

08001b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b66:	3304      	adds	r3, #4

08001b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b6c:	d3f9      	bcc.n	8001b62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b6e:	4a0b      	ldr	r2, [pc, #44]	@ (8001b9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b70:	4c0b      	ldr	r4, [pc, #44]	@ (8001ba0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b74:	e001      	b.n	8001b7a <LoopFillZerobss>

08001b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b78:	3204      	adds	r2, #4

08001b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b7c:	d3fb      	bcc.n	8001b76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b7e:	f7ff ffd7 	bl	8001b30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b82:	f004 f979 	bl	8005e78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b86:	f7ff fac3 	bl	8001110 <main>
  bx  lr    
 8001b8a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b8c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001b90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b94:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001b98:	08009210 	.word	0x08009210
  ldr r2, =_sbss
 8001b9c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001ba0:	200004e4 	.word	0x200004e4

08001ba4 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ba4:	e7fe      	b.n	8001ba4 <DMA1_Stream0_IRQHandler>
	...

08001ba8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bac:	4b0e      	ldr	r3, [pc, #56]	@ (8001be8 <HAL_Init+0x40>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a0d      	ldr	r2, [pc, #52]	@ (8001be8 <HAL_Init+0x40>)
 8001bb2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8001be8 <HAL_Init+0x40>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a0a      	ldr	r2, [pc, #40]	@ (8001be8 <HAL_Init+0x40>)
 8001bbe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bc4:	4b08      	ldr	r3, [pc, #32]	@ (8001be8 <HAL_Init+0x40>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a07      	ldr	r2, [pc, #28]	@ (8001be8 <HAL_Init+0x40>)
 8001bca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd0:	2003      	movs	r0, #3
 8001bd2:	f000 fe37 	bl	8002844 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bd6:	2000      	movs	r0, #0
 8001bd8:	f000 f808 	bl	8001bec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bdc:	f7ff fd2c 	bl	8001638 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40023c00 	.word	0x40023c00

08001bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bf4:	4b12      	ldr	r3, [pc, #72]	@ (8001c40 <HAL_InitTick+0x54>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	4b12      	ldr	r3, [pc, #72]	@ (8001c44 <HAL_InitTick+0x58>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f000 fe4f 	bl	80028ae <HAL_SYSTICK_Config>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e00e      	b.n	8001c38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2b0f      	cmp	r3, #15
 8001c1e:	d80a      	bhi.n	8001c36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c20:	2200      	movs	r2, #0
 8001c22:	6879      	ldr	r1, [r7, #4]
 8001c24:	f04f 30ff 	mov.w	r0, #4294967295
 8001c28:	f000 fe17 	bl	800285a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c2c:	4a06      	ldr	r2, [pc, #24]	@ (8001c48 <HAL_InitTick+0x5c>)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
 8001c34:	e000      	b.n	8001c38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	20000000 	.word	0x20000000
 8001c44:	20000008 	.word	0x20000008
 8001c48:	20000004 	.word	0x20000004

08001c4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c50:	4b06      	ldr	r3, [pc, #24]	@ (8001c6c <HAL_IncTick+0x20>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	461a      	mov	r2, r3
 8001c56:	4b06      	ldr	r3, [pc, #24]	@ (8001c70 <HAL_IncTick+0x24>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	4a04      	ldr	r2, [pc, #16]	@ (8001c70 <HAL_IncTick+0x24>)
 8001c5e:	6013      	str	r3, [r2, #0]
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	20000008 	.word	0x20000008
 8001c70:	20000394 	.word	0x20000394

08001c74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  return uwTick;
 8001c78:	4b03      	ldr	r3, [pc, #12]	@ (8001c88 <HAL_GetTick+0x14>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	20000394 	.word	0x20000394

08001c8c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c94:	2300      	movs	r3, #0
 8001c96:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d101      	bne.n	8001ca2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e033      	b.n	8001d0a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d109      	bne.n	8001cbe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7ff fcec 	bl	8001688 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc2:	f003 0310 	and.w	r3, r3, #16
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d118      	bne.n	8001cfc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cce:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001cd2:	f023 0302 	bic.w	r3, r3, #2
 8001cd6:	f043 0202 	orr.w	r2, r3, #2
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 fb58 	bl	8002394 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cee:	f023 0303 	bic.w	r3, r3, #3
 8001cf2:	f043 0201 	orr.w	r2, r3, #1
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	641a      	str	r2, [r3, #64]	@ 0x40
 8001cfa:	e001      	b.n	8001d00 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b086      	sub	sp, #24
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	617b      	str	r3, [r7, #20]
 8001d1e:	2300      	movs	r3, #0
 8001d20:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	f003 0320 	and.w	r3, r3, #32
 8001d40:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d049      	beq.n	8001ddc <HAL_ADC_IRQHandler+0xca>
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d046      	beq.n	8001ddc <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d52:	f003 0310 	and.w	r3, r3, #16
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d105      	bne.n	8001d66 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d12b      	bne.n	8001dcc <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d127      	bne.n	8001dcc <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d82:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d006      	beq.n	8001d98 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d119      	bne.n	8001dcc <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	685a      	ldr	r2, [r3, #4]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f022 0220 	bic.w	r2, r2, #32
 8001da6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d105      	bne.n	8001dcc <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc4:	f043 0201 	orr.w	r2, r3, #1
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f7ff f963 	bl	8001098 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f06f 0212 	mvn.w	r2, #18
 8001dda:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f003 0304 	and.w	r3, r3, #4
 8001de2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dea:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d057      	beq.n	8001ea2 <HAL_ADC_IRQHandler+0x190>
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d054      	beq.n	8001ea2 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfc:	f003 0310 	and.w	r3, r3, #16
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d105      	bne.n	8001e10 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e08:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d139      	bne.n	8001e92 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e24:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d006      	beq.n	8001e3a <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d12b      	bne.n	8001e92 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d124      	bne.n	8001e92 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d11d      	bne.n	8001e92 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d119      	bne.n	8001e92 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	685a      	ldr	r2, [r3, #4]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e6c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e72:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d105      	bne.n	8001e92 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8a:	f043 0201 	orr.w	r2, r3, #1
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 fbfc 	bl	8002690 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f06f 020c 	mvn.w	r2, #12
 8001ea0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001eb0:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d017      	beq.n	8001ee8 <HAL_ADC_IRQHandler+0x1d6>
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d014      	beq.n	8001ee8 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d10d      	bne.n	8001ee8 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f000 f925 	bl	8002128 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f06f 0201 	mvn.w	r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f003 0320 	and.w	r3, r3, #32
 8001eee:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001ef6:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d015      	beq.n	8001f2a <HAL_ADC_IRQHandler+0x218>
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d012      	beq.n	8001f2a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f08:	f043 0202 	orr.w	r2, r3, #2
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f06f 0220 	mvn.w	r2, #32
 8001f18:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f90e 	bl	800213c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f06f 0220 	mvn.w	r2, #32
 8001f28:	601a      	str	r2, [r3, #0]
  }
}
 8001f2a:	bf00      	nop
 8001f2c:	3718      	adds	r7, #24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
	...

08001f34 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001f40:	2300      	movs	r3, #0
 8001f42:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d101      	bne.n	8001f52 <HAL_ADC_Start_DMA+0x1e>
 8001f4e:	2302      	movs	r3, #2
 8001f50:	e0ce      	b.n	80020f0 <HAL_ADC_Start_DMA+0x1bc>
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d018      	beq.n	8001f9a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	689a      	ldr	r2, [r3, #8]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f042 0201 	orr.w	r2, r2, #1
 8001f76:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f78:	4b5f      	ldr	r3, [pc, #380]	@ (80020f8 <HAL_ADC_Start_DMA+0x1c4>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a5f      	ldr	r2, [pc, #380]	@ (80020fc <HAL_ADC_Start_DMA+0x1c8>)
 8001f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f82:	0c9a      	lsrs	r2, r3, #18
 8001f84:	4613      	mov	r3, r2
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	4413      	add	r3, r2
 8001f8a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001f8c:	e002      	b.n	8001f94 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	3b01      	subs	r3, #1
 8001f92:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1f9      	bne.n	8001f8e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fa4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fa8:	d107      	bne.n	8001fba <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001fb8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f003 0301 	and.w	r3, r3, #1
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	f040 8086 	bne.w	80020d6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fce:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001fd2:	f023 0301 	bic.w	r3, r3, #1
 8001fd6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d007      	beq.n	8001ffc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001ff4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002000:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002004:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002008:	d106      	bne.n	8002018 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800200e:	f023 0206 	bic.w	r2, r3, #6
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	645a      	str	r2, [r3, #68]	@ 0x44
 8002016:	e002      	b.n	800201e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2200      	movs	r2, #0
 800201c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002026:	4b36      	ldr	r3, [pc, #216]	@ (8002100 <HAL_ADC_Start_DMA+0x1cc>)
 8002028:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800202e:	4a35      	ldr	r2, [pc, #212]	@ (8002104 <HAL_ADC_Start_DMA+0x1d0>)
 8002030:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002036:	4a34      	ldr	r2, [pc, #208]	@ (8002108 <HAL_ADC_Start_DMA+0x1d4>)
 8002038:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800203e:	4a33      	ldr	r2, [pc, #204]	@ (800210c <HAL_ADC_Start_DMA+0x1d8>)
 8002040:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800204a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	685a      	ldr	r2, [r3, #4]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800205a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	689a      	ldr	r2, [r3, #8]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800206a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	334c      	adds	r3, #76	@ 0x4c
 8002076:	4619      	mov	r1, r3
 8002078:	68ba      	ldr	r2, [r7, #8]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f000 fcd2 	bl	8002a24 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 031f 	and.w	r3, r3, #31
 8002088:	2b00      	cmp	r3, #0
 800208a:	d10f      	bne.n	80020ac <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d129      	bne.n	80020ee <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80020a8:	609a      	str	r2, [r3, #8]
 80020aa:	e020      	b.n	80020ee <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a17      	ldr	r2, [pc, #92]	@ (8002110 <HAL_ADC_Start_DMA+0x1dc>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d11b      	bne.n	80020ee <HAL_ADC_Start_DMA+0x1ba>
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d114      	bne.n	80020ee <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	689a      	ldr	r2, [r3, #8]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80020d2:	609a      	str	r2, [r3, #8]
 80020d4:	e00b      	b.n	80020ee <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020da:	f043 0210 	orr.w	r2, r3, #16
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020e6:	f043 0201 	orr.w	r2, r3, #1
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3718      	adds	r7, #24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	20000000 	.word	0x20000000
 80020fc:	431bde83 	.word	0x431bde83
 8002100:	40012300 	.word	0x40012300
 8002104:	0800258d 	.word	0x0800258d
 8002108:	08002647 	.word	0x08002647
 800210c:	08002663 	.word	0x08002663
 8002110:	40012000 	.word	0x40012000

08002114 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800215a:	2300      	movs	r3, #0
 800215c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002164:	2b01      	cmp	r3, #1
 8002166:	d101      	bne.n	800216c <HAL_ADC_ConfigChannel+0x1c>
 8002168:	2302      	movs	r3, #2
 800216a:	e105      	b.n	8002378 <HAL_ADC_ConfigChannel+0x228>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2b09      	cmp	r3, #9
 800217a:	d925      	bls.n	80021c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68d9      	ldr	r1, [r3, #12]
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	b29b      	uxth	r3, r3
 8002188:	461a      	mov	r2, r3
 800218a:	4613      	mov	r3, r2
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	4413      	add	r3, r2
 8002190:	3b1e      	subs	r3, #30
 8002192:	2207      	movs	r2, #7
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	43da      	mvns	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	400a      	ands	r2, r1
 80021a0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68d9      	ldr	r1, [r3, #12]
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	4618      	mov	r0, r3
 80021b4:	4603      	mov	r3, r0
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	4403      	add	r3, r0
 80021ba:	3b1e      	subs	r3, #30
 80021bc:	409a      	lsls	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	430a      	orrs	r2, r1
 80021c4:	60da      	str	r2, [r3, #12]
 80021c6:	e022      	b.n	800220e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6919      	ldr	r1, [r3, #16]
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	461a      	mov	r2, r3
 80021d6:	4613      	mov	r3, r2
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	4413      	add	r3, r2
 80021dc:	2207      	movs	r2, #7
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43da      	mvns	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	400a      	ands	r2, r1
 80021ea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6919      	ldr	r1, [r3, #16]
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	689a      	ldr	r2, [r3, #8]
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	4618      	mov	r0, r3
 80021fe:	4603      	mov	r3, r0
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	4403      	add	r3, r0
 8002204:	409a      	lsls	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	430a      	orrs	r2, r1
 800220c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b06      	cmp	r3, #6
 8002214:	d824      	bhi.n	8002260 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685a      	ldr	r2, [r3, #4]
 8002220:	4613      	mov	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4413      	add	r3, r2
 8002226:	3b05      	subs	r3, #5
 8002228:	221f      	movs	r2, #31
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	43da      	mvns	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	400a      	ands	r2, r1
 8002236:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	b29b      	uxth	r3, r3
 8002244:	4618      	mov	r0, r3
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685a      	ldr	r2, [r3, #4]
 800224a:	4613      	mov	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4413      	add	r3, r2
 8002250:	3b05      	subs	r3, #5
 8002252:	fa00 f203 	lsl.w	r2, r0, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	430a      	orrs	r2, r1
 800225c:	635a      	str	r2, [r3, #52]	@ 0x34
 800225e:	e04c      	b.n	80022fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	2b0c      	cmp	r3, #12
 8002266:	d824      	bhi.n	80022b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685a      	ldr	r2, [r3, #4]
 8002272:	4613      	mov	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4413      	add	r3, r2
 8002278:	3b23      	subs	r3, #35	@ 0x23
 800227a:	221f      	movs	r2, #31
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	43da      	mvns	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	400a      	ands	r2, r1
 8002288:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	b29b      	uxth	r3, r3
 8002296:	4618      	mov	r0, r3
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	4613      	mov	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	4413      	add	r3, r2
 80022a2:	3b23      	subs	r3, #35	@ 0x23
 80022a4:	fa00 f203 	lsl.w	r2, r0, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	430a      	orrs	r2, r1
 80022ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80022b0:	e023      	b.n	80022fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685a      	ldr	r2, [r3, #4]
 80022bc:	4613      	mov	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4413      	add	r3, r2
 80022c2:	3b41      	subs	r3, #65	@ 0x41
 80022c4:	221f      	movs	r2, #31
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	43da      	mvns	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	400a      	ands	r2, r1
 80022d2:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	b29b      	uxth	r3, r3
 80022e0:	4618      	mov	r0, r3
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685a      	ldr	r2, [r3, #4]
 80022e6:	4613      	mov	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4413      	add	r3, r2
 80022ec:	3b41      	subs	r3, #65	@ 0x41
 80022ee:	fa00 f203 	lsl.w	r2, r0, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	430a      	orrs	r2, r1
 80022f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022fa:	4b22      	ldr	r3, [pc, #136]	@ (8002384 <HAL_ADC_ConfigChannel+0x234>)
 80022fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a21      	ldr	r2, [pc, #132]	@ (8002388 <HAL_ADC_ConfigChannel+0x238>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d109      	bne.n	800231c <HAL_ADC_ConfigChannel+0x1cc>
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2b12      	cmp	r3, #18
 800230e:	d105      	bne.n	800231c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a19      	ldr	r2, [pc, #100]	@ (8002388 <HAL_ADC_ConfigChannel+0x238>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d123      	bne.n	800236e <HAL_ADC_ConfigChannel+0x21e>
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2b10      	cmp	r3, #16
 800232c:	d003      	beq.n	8002336 <HAL_ADC_ConfigChannel+0x1e6>
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2b11      	cmp	r3, #17
 8002334:	d11b      	bne.n	800236e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2b10      	cmp	r3, #16
 8002348:	d111      	bne.n	800236e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800234a:	4b10      	ldr	r3, [pc, #64]	@ (800238c <HAL_ADC_ConfigChannel+0x23c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a10      	ldr	r2, [pc, #64]	@ (8002390 <HAL_ADC_ConfigChannel+0x240>)
 8002350:	fba2 2303 	umull	r2, r3, r2, r3
 8002354:	0c9a      	lsrs	r2, r3, #18
 8002356:	4613      	mov	r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	4413      	add	r3, r2
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002360:	e002      	b.n	8002368 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	3b01      	subs	r3, #1
 8002366:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f9      	bne.n	8002362 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	40012300 	.word	0x40012300
 8002388:	40012000 	.word	0x40012000
 800238c:	20000000 	.word	0x20000000
 8002390:	431bde83 	.word	0x431bde83

08002394 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800239c:	4b79      	ldr	r3, [pc, #484]	@ (8002584 <ADC_Init+0x1f0>)
 800239e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	685a      	ldr	r2, [r3, #4]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	431a      	orrs	r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	685a      	ldr	r2, [r3, #4]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80023c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	6859      	ldr	r1, [r3, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	021a      	lsls	r2, r3, #8
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	430a      	orrs	r2, r1
 80023dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	685a      	ldr	r2, [r3, #4]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80023ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6859      	ldr	r1, [r3, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689a      	ldr	r2, [r3, #8]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	430a      	orrs	r2, r1
 80023fe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	689a      	ldr	r2, [r3, #8]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800240e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6899      	ldr	r1, [r3, #8]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	430a      	orrs	r2, r1
 8002420:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002426:	4a58      	ldr	r2, [pc, #352]	@ (8002588 <ADC_Init+0x1f4>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d022      	beq.n	8002472 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	689a      	ldr	r2, [r3, #8]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800243a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6899      	ldr	r1, [r3, #8]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	430a      	orrs	r2, r1
 800244c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800245c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6899      	ldr	r1, [r3, #8]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	430a      	orrs	r2, r1
 800246e:	609a      	str	r2, [r3, #8]
 8002470:	e00f      	b.n	8002492 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002480:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002490:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f022 0202 	bic.w	r2, r2, #2
 80024a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6899      	ldr	r1, [r3, #8]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	7e1b      	ldrb	r3, [r3, #24]
 80024ac:	005a      	lsls	r2, r3, #1
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d01b      	beq.n	80024f8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024ce:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80024de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6859      	ldr	r1, [r3, #4]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ea:	3b01      	subs	r3, #1
 80024ec:	035a      	lsls	r2, r3, #13
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	430a      	orrs	r2, r1
 80024f4:	605a      	str	r2, [r3, #4]
 80024f6:	e007      	b.n	8002508 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	685a      	ldr	r2, [r3, #4]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002506:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002516:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	3b01      	subs	r3, #1
 8002524:	051a      	lsls	r2, r3, #20
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	430a      	orrs	r2, r1
 800252c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800253c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6899      	ldr	r1, [r3, #8]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800254a:	025a      	lsls	r2, r3, #9
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	430a      	orrs	r2, r1
 8002552:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689a      	ldr	r2, [r3, #8]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002562:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6899      	ldr	r1, [r3, #8]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	029a      	lsls	r2, r3, #10
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	430a      	orrs	r2, r1
 8002576:	609a      	str	r2, [r3, #8]
}
 8002578:	bf00      	nop
 800257a:	3714      	adds	r7, #20
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr
 8002584:	40012300 	.word	0x40012300
 8002588:	0f000001 	.word	0x0f000001

0800258c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002598:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d13c      	bne.n	8002620 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025aa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d12b      	bne.n	8002618 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d127      	bne.n	8002618 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ce:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d006      	beq.n	80025e4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d119      	bne.n	8002618 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 0220 	bic.w	r2, r2, #32
 80025f2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002604:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d105      	bne.n	8002618 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002610:	f043 0201 	orr.w	r2, r3, #1
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002618:	68f8      	ldr	r0, [r7, #12]
 800261a:	f7fe fd3d 	bl	8001098 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800261e:	e00e      	b.n	800263e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002624:	f003 0310 	and.w	r3, r3, #16
 8002628:	2b00      	cmp	r3, #0
 800262a:	d003      	beq.n	8002634 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	f7ff fd85 	bl	800213c <HAL_ADC_ErrorCallback>
}
 8002632:	e004      	b.n	800263e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	4798      	blx	r3
}
 800263e:	bf00      	nop
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b084      	sub	sp, #16
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002652:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002654:	68f8      	ldr	r0, [r7, #12]
 8002656:	f7ff fd5d 	bl	8002114 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800265a:	bf00      	nop
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b084      	sub	sp, #16
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800266e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2240      	movs	r2, #64	@ 0x40
 8002674:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800267a:	f043 0204 	orr.w	r2, r3, #4
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	645a      	str	r2, [r3, #68]	@ 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f7ff fd5a 	bl	800213c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002688:	bf00      	nop
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f003 0307 	and.w	r3, r3, #7
 80026b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026b4:	4b0c      	ldr	r3, [pc, #48]	@ (80026e8 <__NVIC_SetPriorityGrouping+0x44>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026ba:	68ba      	ldr	r2, [r7, #8]
 80026bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80026c0:	4013      	ands	r3, r2
 80026c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026d6:	4a04      	ldr	r2, [pc, #16]	@ (80026e8 <__NVIC_SetPriorityGrouping+0x44>)
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	60d3      	str	r3, [r2, #12]
}
 80026dc:	bf00      	nop
 80026de:	3714      	adds	r7, #20
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	e000ed00 	.word	0xe000ed00

080026ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026f0:	4b04      	ldr	r3, [pc, #16]	@ (8002704 <__NVIC_GetPriorityGrouping+0x18>)
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	0a1b      	lsrs	r3, r3, #8
 80026f6:	f003 0307 	and.w	r3, r3, #7
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	e000ed00 	.word	0xe000ed00

08002708 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002716:	2b00      	cmp	r3, #0
 8002718:	db0b      	blt.n	8002732 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800271a:	79fb      	ldrb	r3, [r7, #7]
 800271c:	f003 021f 	and.w	r2, r3, #31
 8002720:	4907      	ldr	r1, [pc, #28]	@ (8002740 <__NVIC_EnableIRQ+0x38>)
 8002722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002726:	095b      	lsrs	r3, r3, #5
 8002728:	2001      	movs	r0, #1
 800272a:	fa00 f202 	lsl.w	r2, r0, r2
 800272e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	e000e100 	.word	0xe000e100

08002744 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	4603      	mov	r3, r0
 800274c:	6039      	str	r1, [r7, #0]
 800274e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002754:	2b00      	cmp	r3, #0
 8002756:	db0a      	blt.n	800276e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	b2da      	uxtb	r2, r3
 800275c:	490c      	ldr	r1, [pc, #48]	@ (8002790 <__NVIC_SetPriority+0x4c>)
 800275e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002762:	0112      	lsls	r2, r2, #4
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	440b      	add	r3, r1
 8002768:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800276c:	e00a      	b.n	8002784 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	b2da      	uxtb	r2, r3
 8002772:	4908      	ldr	r1, [pc, #32]	@ (8002794 <__NVIC_SetPriority+0x50>)
 8002774:	79fb      	ldrb	r3, [r7, #7]
 8002776:	f003 030f 	and.w	r3, r3, #15
 800277a:	3b04      	subs	r3, #4
 800277c:	0112      	lsls	r2, r2, #4
 800277e:	b2d2      	uxtb	r2, r2
 8002780:	440b      	add	r3, r1
 8002782:	761a      	strb	r2, [r3, #24]
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr
 8002790:	e000e100 	.word	0xe000e100
 8002794:	e000ed00 	.word	0xe000ed00

08002798 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002798:	b480      	push	{r7}
 800279a:	b089      	sub	sp, #36	@ 0x24
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	f1c3 0307 	rsb	r3, r3, #7
 80027b2:	2b04      	cmp	r3, #4
 80027b4:	bf28      	it	cs
 80027b6:	2304      	movcs	r3, #4
 80027b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	3304      	adds	r3, #4
 80027be:	2b06      	cmp	r3, #6
 80027c0:	d902      	bls.n	80027c8 <NVIC_EncodePriority+0x30>
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	3b03      	subs	r3, #3
 80027c6:	e000      	b.n	80027ca <NVIC_EncodePriority+0x32>
 80027c8:	2300      	movs	r3, #0
 80027ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027cc:	f04f 32ff 	mov.w	r2, #4294967295
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	43da      	mvns	r2, r3
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	401a      	ands	r2, r3
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027e0:	f04f 31ff 	mov.w	r1, #4294967295
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	fa01 f303 	lsl.w	r3, r1, r3
 80027ea:	43d9      	mvns	r1, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f0:	4313      	orrs	r3, r2
         );
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3724      	adds	r7, #36	@ 0x24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
	...

08002800 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	3b01      	subs	r3, #1
 800280c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002810:	d301      	bcc.n	8002816 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002812:	2301      	movs	r3, #1
 8002814:	e00f      	b.n	8002836 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002816:	4a0a      	ldr	r2, [pc, #40]	@ (8002840 <SysTick_Config+0x40>)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	3b01      	subs	r3, #1
 800281c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800281e:	210f      	movs	r1, #15
 8002820:	f04f 30ff 	mov.w	r0, #4294967295
 8002824:	f7ff ff8e 	bl	8002744 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002828:	4b05      	ldr	r3, [pc, #20]	@ (8002840 <SysTick_Config+0x40>)
 800282a:	2200      	movs	r2, #0
 800282c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800282e:	4b04      	ldr	r3, [pc, #16]	@ (8002840 <SysTick_Config+0x40>)
 8002830:	2207      	movs	r2, #7
 8002832:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	e000e010 	.word	0xe000e010

08002844 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f7ff ff29 	bl	80026a4 <__NVIC_SetPriorityGrouping>
}
 8002852:	bf00      	nop
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800285a:	b580      	push	{r7, lr}
 800285c:	b086      	sub	sp, #24
 800285e:	af00      	add	r7, sp, #0
 8002860:	4603      	mov	r3, r0
 8002862:	60b9      	str	r1, [r7, #8]
 8002864:	607a      	str	r2, [r7, #4]
 8002866:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002868:	2300      	movs	r3, #0
 800286a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800286c:	f7ff ff3e 	bl	80026ec <__NVIC_GetPriorityGrouping>
 8002870:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	68b9      	ldr	r1, [r7, #8]
 8002876:	6978      	ldr	r0, [r7, #20]
 8002878:	f7ff ff8e 	bl	8002798 <NVIC_EncodePriority>
 800287c:	4602      	mov	r2, r0
 800287e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002882:	4611      	mov	r1, r2
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff ff5d 	bl	8002744 <__NVIC_SetPriority>
}
 800288a:	bf00      	nop
 800288c:	3718      	adds	r7, #24
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b082      	sub	sp, #8
 8002896:	af00      	add	r7, sp, #0
 8002898:	4603      	mov	r3, r0
 800289a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800289c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff ff31 	bl	8002708 <__NVIC_EnableIRQ>
}
 80028a6:	bf00      	nop
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b082      	sub	sp, #8
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7ff ffa2 	bl	8002800 <SysTick_Config>
 80028bc:	4603      	mov	r3, r0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
	...

080028c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028d0:	2300      	movs	r3, #0
 80028d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80028d4:	f7ff f9ce 	bl	8001c74 <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d101      	bne.n	80028e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e099      	b.n	8002a18 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2202      	movs	r2, #2
 80028e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 0201 	bic.w	r2, r2, #1
 8002902:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002904:	e00f      	b.n	8002926 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002906:	f7ff f9b5 	bl	8001c74 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b05      	cmp	r3, #5
 8002912:	d908      	bls.n	8002926 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2220      	movs	r2, #32
 8002918:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2203      	movs	r2, #3
 800291e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e078      	b.n	8002a18 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0301 	and.w	r3, r3, #1
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1e8      	bne.n	8002906 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800293c:	697a      	ldr	r2, [r7, #20]
 800293e:	4b38      	ldr	r3, [pc, #224]	@ (8002a20 <HAL_DMA_Init+0x158>)
 8002940:	4013      	ands	r3, r2
 8002942:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685a      	ldr	r2, [r3, #4]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002952:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800295e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800296a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	4313      	orrs	r3, r2
 8002976:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800297c:	2b04      	cmp	r3, #4
 800297e:	d107      	bne.n	8002990 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002988:	4313      	orrs	r3, r2
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	4313      	orrs	r3, r2
 800298e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	f023 0307 	bic.w	r3, r3, #7
 80029a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ac:	697a      	ldr	r2, [r7, #20]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b6:	2b04      	cmp	r3, #4
 80029b8:	d117      	bne.n	80029ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00e      	beq.n	80029ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 fa6f 	bl	8002eb0 <DMA_CheckFifoParam>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d008      	beq.n	80029ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2240      	movs	r2, #64	@ 0x40
 80029dc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80029e6:	2301      	movs	r3, #1
 80029e8:	e016      	b.n	8002a18 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 fa26 	bl	8002e44 <DMA_CalcBaseAndBitshift>
 80029f8:	4603      	mov	r3, r0
 80029fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a00:	223f      	movs	r2, #63	@ 0x3f
 8002a02:	409a      	lsls	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3718      	adds	r7, #24
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	f010803f 	.word	0xf010803f

08002a24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
 8002a30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a32:	2300      	movs	r3, #0
 8002a34:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a3a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d101      	bne.n	8002a4a <HAL_DMA_Start_IT+0x26>
 8002a46:	2302      	movs	r3, #2
 8002a48:	e040      	b.n	8002acc <HAL_DMA_Start_IT+0xa8>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d12f      	bne.n	8002abe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2202      	movs	r2, #2
 8002a62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	68b9      	ldr	r1, [r7, #8]
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	f000 f9b8 	bl	8002de8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a7c:	223f      	movs	r2, #63	@ 0x3f
 8002a7e:	409a      	lsls	r2, r3
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f042 0216 	orr.w	r2, r2, #22
 8002a92:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d007      	beq.n	8002aac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f042 0208 	orr.w	r2, r2, #8
 8002aaa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f042 0201 	orr.w	r2, r2, #1
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	e005      	b.n	8002aca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002aca:	7dfb      	ldrb	r3, [r7, #23]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3718      	adds	r7, #24
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002adc:	2300      	movs	r3, #0
 8002ade:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ae0:	4b8e      	ldr	r3, [pc, #568]	@ (8002d1c <HAL_DMA_IRQHandler+0x248>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a8e      	ldr	r2, [pc, #568]	@ (8002d20 <HAL_DMA_IRQHandler+0x24c>)
 8002ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aea:	0a9b      	lsrs	r3, r3, #10
 8002aec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002af2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002afe:	2208      	movs	r2, #8
 8002b00:	409a      	lsls	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	4013      	ands	r3, r2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d01a      	beq.n	8002b40 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0304 	and.w	r3, r3, #4
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d013      	beq.n	8002b40 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 0204 	bic.w	r2, r2, #4
 8002b26:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b2c:	2208      	movs	r2, #8
 8002b2e:	409a      	lsls	r2, r3
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b38:	f043 0201 	orr.w	r2, r3, #1
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b44:	2201      	movs	r2, #1
 8002b46:	409a      	lsls	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d012      	beq.n	8002b76 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00b      	beq.n	8002b76 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b62:	2201      	movs	r2, #1
 8002b64:	409a      	lsls	r2, r3
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b6e:	f043 0202 	orr.w	r2, r3, #2
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b7a:	2204      	movs	r2, #4
 8002b7c:	409a      	lsls	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	4013      	ands	r3, r2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d012      	beq.n	8002bac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00b      	beq.n	8002bac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b98:	2204      	movs	r2, #4
 8002b9a:	409a      	lsls	r2, r3
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ba4:	f043 0204 	orr.w	r2, r3, #4
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bb0:	2210      	movs	r2, #16
 8002bb2:	409a      	lsls	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d043      	beq.n	8002c44 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0308 	and.w	r3, r3, #8
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d03c      	beq.n	8002c44 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bce:	2210      	movs	r2, #16
 8002bd0:	409a      	lsls	r2, r3
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d018      	beq.n	8002c16 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d108      	bne.n	8002c04 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d024      	beq.n	8002c44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	4798      	blx	r3
 8002c02:	e01f      	b.n	8002c44 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d01b      	beq.n	8002c44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	4798      	blx	r3
 8002c14:	e016      	b.n	8002c44 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d107      	bne.n	8002c34 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 0208 	bic.w	r2, r2, #8
 8002c32:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d003      	beq.n	8002c44 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c48:	2220      	movs	r2, #32
 8002c4a:	409a      	lsls	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 808f 	beq.w	8002d74 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0310 	and.w	r3, r3, #16
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f000 8087 	beq.w	8002d74 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	409a      	lsls	r2, r3
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b05      	cmp	r3, #5
 8002c7c:	d136      	bne.n	8002cec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 0216 	bic.w	r2, r2, #22
 8002c8c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	695a      	ldr	r2, [r3, #20]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c9c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d103      	bne.n	8002cae <HAL_DMA_IRQHandler+0x1da>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d007      	beq.n	8002cbe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f022 0208 	bic.w	r2, r2, #8
 8002cbc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cc2:	223f      	movs	r2, #63	@ 0x3f
 8002cc4:	409a      	lsls	r2, r3
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d07e      	beq.n	8002de0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	4798      	blx	r3
        }
        return;
 8002cea:	e079      	b.n	8002de0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d01d      	beq.n	8002d36 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d10d      	bne.n	8002d24 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d031      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	4798      	blx	r3
 8002d18:	e02c      	b.n	8002d74 <HAL_DMA_IRQHandler+0x2a0>
 8002d1a:	bf00      	nop
 8002d1c:	20000000 	.word	0x20000000
 8002d20:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d023      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	4798      	blx	r3
 8002d34:	e01e      	b.n	8002d74 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d10f      	bne.n	8002d64 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f022 0210 	bic.w	r2, r2, #16
 8002d52:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d003      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d032      	beq.n	8002de2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d022      	beq.n	8002dce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2205      	movs	r2, #5
 8002d8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f022 0201 	bic.w	r2, r2, #1
 8002d9e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	3301      	adds	r3, #1
 8002da4:	60bb      	str	r3, [r7, #8]
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d307      	bcc.n	8002dbc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1f2      	bne.n	8002da0 <HAL_DMA_IRQHandler+0x2cc>
 8002dba:	e000      	b.n	8002dbe <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002dbc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d005      	beq.n	8002de2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	4798      	blx	r3
 8002dde:	e000      	b.n	8002de2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002de0:	bf00      	nop
    }
  }
}
 8002de2:	3718      	adds	r7, #24
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
 8002df4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002e04:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	2b40      	cmp	r3, #64	@ 0x40
 8002e14:	d108      	bne.n	8002e28 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68ba      	ldr	r2, [r7, #8]
 8002e24:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e26:	e007      	b.n	8002e38 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	60da      	str	r2, [r3, #12]
}
 8002e38:	bf00      	nop
 8002e3a:	3714      	adds	r7, #20
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	3b10      	subs	r3, #16
 8002e54:	4a14      	ldr	r2, [pc, #80]	@ (8002ea8 <DMA_CalcBaseAndBitshift+0x64>)
 8002e56:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5a:	091b      	lsrs	r3, r3, #4
 8002e5c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e5e:	4a13      	ldr	r2, [pc, #76]	@ (8002eac <DMA_CalcBaseAndBitshift+0x68>)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	4413      	add	r3, r2
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	461a      	mov	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2b03      	cmp	r3, #3
 8002e70:	d909      	bls.n	8002e86 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002e7a:	f023 0303 	bic.w	r3, r3, #3
 8002e7e:	1d1a      	adds	r2, r3, #4
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	659a      	str	r2, [r3, #88]	@ 0x58
 8002e84:	e007      	b.n	8002e96 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002e8e:	f023 0303 	bic.w	r3, r3, #3
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3714      	adds	r7, #20
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	aaaaaaab 	.word	0xaaaaaaab
 8002eac:	08008e54 	.word	0x08008e54

08002eb0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b085      	sub	sp, #20
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ec0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d11f      	bne.n	8002f0a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	2b03      	cmp	r3, #3
 8002ece:	d856      	bhi.n	8002f7e <DMA_CheckFifoParam+0xce>
 8002ed0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ed8 <DMA_CheckFifoParam+0x28>)
 8002ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed6:	bf00      	nop
 8002ed8:	08002ee9 	.word	0x08002ee9
 8002edc:	08002efb 	.word	0x08002efb
 8002ee0:	08002ee9 	.word	0x08002ee9
 8002ee4:	08002f7f 	.word	0x08002f7f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d046      	beq.n	8002f82 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ef8:	e043      	b.n	8002f82 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002efe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002f02:	d140      	bne.n	8002f86 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f08:	e03d      	b.n	8002f86 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f12:	d121      	bne.n	8002f58 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	2b03      	cmp	r3, #3
 8002f18:	d837      	bhi.n	8002f8a <DMA_CheckFifoParam+0xda>
 8002f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8002f20 <DMA_CheckFifoParam+0x70>)
 8002f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f20:	08002f31 	.word	0x08002f31
 8002f24:	08002f37 	.word	0x08002f37
 8002f28:	08002f31 	.word	0x08002f31
 8002f2c:	08002f49 	.word	0x08002f49
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	73fb      	strb	r3, [r7, #15]
      break;
 8002f34:	e030      	b.n	8002f98 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f3a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d025      	beq.n	8002f8e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f46:	e022      	b.n	8002f8e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f4c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002f50:	d11f      	bne.n	8002f92 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f56:	e01c      	b.n	8002f92 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d903      	bls.n	8002f66 <DMA_CheckFifoParam+0xb6>
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	2b03      	cmp	r3, #3
 8002f62:	d003      	beq.n	8002f6c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f64:	e018      	b.n	8002f98 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	73fb      	strb	r3, [r7, #15]
      break;
 8002f6a:	e015      	b.n	8002f98 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f70:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00e      	beq.n	8002f96 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f7c:	e00b      	b.n	8002f96 <DMA_CheckFifoParam+0xe6>
      break;
 8002f7e:	bf00      	nop
 8002f80:	e00a      	b.n	8002f98 <DMA_CheckFifoParam+0xe8>
      break;
 8002f82:	bf00      	nop
 8002f84:	e008      	b.n	8002f98 <DMA_CheckFifoParam+0xe8>
      break;
 8002f86:	bf00      	nop
 8002f88:	e006      	b.n	8002f98 <DMA_CheckFifoParam+0xe8>
      break;
 8002f8a:	bf00      	nop
 8002f8c:	e004      	b.n	8002f98 <DMA_CheckFifoParam+0xe8>
      break;
 8002f8e:	bf00      	nop
 8002f90:	e002      	b.n	8002f98 <DMA_CheckFifoParam+0xe8>
      break;   
 8002f92:	bf00      	nop
 8002f94:	e000      	b.n	8002f98 <DMA_CheckFifoParam+0xe8>
      break;
 8002f96:	bf00      	nop
    }
  } 
  
  return status; 
 8002f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3714      	adds	r7, #20
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop

08002fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b089      	sub	sp, #36	@ 0x24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	61fb      	str	r3, [r7, #28]
 8002fc2:	e159      	b.n	8003278 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	f040 8148 	bne.w	8003272 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f003 0303 	and.w	r3, r3, #3
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d005      	beq.n	8002ffa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d130      	bne.n	800305c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	2203      	movs	r2, #3
 8003006:	fa02 f303 	lsl.w	r3, r2, r3
 800300a:	43db      	mvns	r3, r3
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	4013      	ands	r3, r2
 8003010:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	68da      	ldr	r2, [r3, #12]
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	4313      	orrs	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003030:	2201      	movs	r2, #1
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	fa02 f303 	lsl.w	r3, r2, r3
 8003038:	43db      	mvns	r3, r3
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	4013      	ands	r3, r2
 800303e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	091b      	lsrs	r3, r3, #4
 8003046:	f003 0201 	and.w	r2, r3, #1
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	4313      	orrs	r3, r2
 8003054:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f003 0303 	and.w	r3, r3, #3
 8003064:	2b03      	cmp	r3, #3
 8003066:	d017      	beq.n	8003098 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	2203      	movs	r2, #3
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	43db      	mvns	r3, r3
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	4013      	ands	r3, r2
 800307e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	689a      	ldr	r2, [r3, #8]
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	4313      	orrs	r3, r2
 8003090:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f003 0303 	and.w	r3, r3, #3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d123      	bne.n	80030ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	08da      	lsrs	r2, r3, #3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	3208      	adds	r2, #8
 80030ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	f003 0307 	and.w	r3, r3, #7
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	220f      	movs	r2, #15
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	43db      	mvns	r3, r3
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	4013      	ands	r3, r2
 80030c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	691a      	ldr	r2, [r3, #16]
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	f003 0307 	and.w	r3, r3, #7
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	4313      	orrs	r3, r2
 80030dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	08da      	lsrs	r2, r3, #3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	3208      	adds	r2, #8
 80030e6:	69b9      	ldr	r1, [r7, #24]
 80030e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	2203      	movs	r2, #3
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	43db      	mvns	r3, r3
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	4013      	ands	r3, r2
 8003102:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f003 0203 	and.w	r2, r3, #3
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	4313      	orrs	r3, r2
 8003118:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003128:	2b00      	cmp	r3, #0
 800312a:	f000 80a2 	beq.w	8003272 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800312e:	2300      	movs	r3, #0
 8003130:	60fb      	str	r3, [r7, #12]
 8003132:	4b57      	ldr	r3, [pc, #348]	@ (8003290 <HAL_GPIO_Init+0x2e8>)
 8003134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003136:	4a56      	ldr	r2, [pc, #344]	@ (8003290 <HAL_GPIO_Init+0x2e8>)
 8003138:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800313c:	6453      	str	r3, [r2, #68]	@ 0x44
 800313e:	4b54      	ldr	r3, [pc, #336]	@ (8003290 <HAL_GPIO_Init+0x2e8>)
 8003140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003142:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800314a:	4a52      	ldr	r2, [pc, #328]	@ (8003294 <HAL_GPIO_Init+0x2ec>)
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	089b      	lsrs	r3, r3, #2
 8003150:	3302      	adds	r3, #2
 8003152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003156:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	f003 0303 	and.w	r3, r3, #3
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	220f      	movs	r2, #15
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	43db      	mvns	r3, r3
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	4013      	ands	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a49      	ldr	r2, [pc, #292]	@ (8003298 <HAL_GPIO_Init+0x2f0>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d019      	beq.n	80031aa <HAL_GPIO_Init+0x202>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a48      	ldr	r2, [pc, #288]	@ (800329c <HAL_GPIO_Init+0x2f4>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d013      	beq.n	80031a6 <HAL_GPIO_Init+0x1fe>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a47      	ldr	r2, [pc, #284]	@ (80032a0 <HAL_GPIO_Init+0x2f8>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d00d      	beq.n	80031a2 <HAL_GPIO_Init+0x1fa>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a46      	ldr	r2, [pc, #280]	@ (80032a4 <HAL_GPIO_Init+0x2fc>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d007      	beq.n	800319e <HAL_GPIO_Init+0x1f6>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a45      	ldr	r2, [pc, #276]	@ (80032a8 <HAL_GPIO_Init+0x300>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d101      	bne.n	800319a <HAL_GPIO_Init+0x1f2>
 8003196:	2304      	movs	r3, #4
 8003198:	e008      	b.n	80031ac <HAL_GPIO_Init+0x204>
 800319a:	2307      	movs	r3, #7
 800319c:	e006      	b.n	80031ac <HAL_GPIO_Init+0x204>
 800319e:	2303      	movs	r3, #3
 80031a0:	e004      	b.n	80031ac <HAL_GPIO_Init+0x204>
 80031a2:	2302      	movs	r3, #2
 80031a4:	e002      	b.n	80031ac <HAL_GPIO_Init+0x204>
 80031a6:	2301      	movs	r3, #1
 80031a8:	e000      	b.n	80031ac <HAL_GPIO_Init+0x204>
 80031aa:	2300      	movs	r3, #0
 80031ac:	69fa      	ldr	r2, [r7, #28]
 80031ae:	f002 0203 	and.w	r2, r2, #3
 80031b2:	0092      	lsls	r2, r2, #2
 80031b4:	4093      	lsls	r3, r2
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031bc:	4935      	ldr	r1, [pc, #212]	@ (8003294 <HAL_GPIO_Init+0x2ec>)
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	089b      	lsrs	r3, r3, #2
 80031c2:	3302      	adds	r3, #2
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031ca:	4b38      	ldr	r3, [pc, #224]	@ (80032ac <HAL_GPIO_Init+0x304>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	43db      	mvns	r3, r3
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	4013      	ands	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031ee:	4a2f      	ldr	r2, [pc, #188]	@ (80032ac <HAL_GPIO_Init+0x304>)
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031f4:	4b2d      	ldr	r3, [pc, #180]	@ (80032ac <HAL_GPIO_Init+0x304>)
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	43db      	mvns	r3, r3
 80031fe:	69ba      	ldr	r2, [r7, #24]
 8003200:	4013      	ands	r3, r2
 8003202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d003      	beq.n	8003218 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	4313      	orrs	r3, r2
 8003216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003218:	4a24      	ldr	r2, [pc, #144]	@ (80032ac <HAL_GPIO_Init+0x304>)
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800321e:	4b23      	ldr	r3, [pc, #140]	@ (80032ac <HAL_GPIO_Init+0x304>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	43db      	mvns	r3, r3
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	4013      	ands	r3, r2
 800322c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d003      	beq.n	8003242 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	4313      	orrs	r3, r2
 8003240:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003242:	4a1a      	ldr	r2, [pc, #104]	@ (80032ac <HAL_GPIO_Init+0x304>)
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003248:	4b18      	ldr	r3, [pc, #96]	@ (80032ac <HAL_GPIO_Init+0x304>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	43db      	mvns	r3, r3
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	4013      	ands	r3, r2
 8003256:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d003      	beq.n	800326c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	4313      	orrs	r3, r2
 800326a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800326c:	4a0f      	ldr	r2, [pc, #60]	@ (80032ac <HAL_GPIO_Init+0x304>)
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	3301      	adds	r3, #1
 8003276:	61fb      	str	r3, [r7, #28]
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	2b0f      	cmp	r3, #15
 800327c:	f67f aea2 	bls.w	8002fc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003280:	bf00      	nop
 8003282:	bf00      	nop
 8003284:	3724      	adds	r7, #36	@ 0x24
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	40023800 	.word	0x40023800
 8003294:	40013800 	.word	0x40013800
 8003298:	40020000 	.word	0x40020000
 800329c:	40020400 	.word	0x40020400
 80032a0:	40020800 	.word	0x40020800
 80032a4:	40020c00 	.word	0x40020c00
 80032a8:	40021000 	.word	0x40021000
 80032ac:	40013c00 	.word	0x40013c00

080032b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	460b      	mov	r3, r1
 80032ba:	807b      	strh	r3, [r7, #2]
 80032bc:	4613      	mov	r3, r2
 80032be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032c0:	787b      	ldrb	r3, [r7, #1]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d003      	beq.n	80032ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032c6:	887a      	ldrh	r2, [r7, #2]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032cc:	e003      	b.n	80032d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032ce:	887b      	ldrh	r3, [r7, #2]
 80032d0:	041a      	lsls	r2, r3, #16
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	619a      	str	r2, [r3, #24]
}
 80032d6:	bf00      	nop
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
	...

080032e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e267      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d075      	beq.n	80033ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003302:	4b88      	ldr	r3, [pc, #544]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f003 030c 	and.w	r3, r3, #12
 800330a:	2b04      	cmp	r3, #4
 800330c:	d00c      	beq.n	8003328 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800330e:	4b85      	ldr	r3, [pc, #532]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003316:	2b08      	cmp	r3, #8
 8003318:	d112      	bne.n	8003340 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800331a:	4b82      	ldr	r3, [pc, #520]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003322:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003326:	d10b      	bne.n	8003340 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003328:	4b7e      	ldr	r3, [pc, #504]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d05b      	beq.n	80033ec <HAL_RCC_OscConfig+0x108>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d157      	bne.n	80033ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e242      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003348:	d106      	bne.n	8003358 <HAL_RCC_OscConfig+0x74>
 800334a:	4b76      	ldr	r3, [pc, #472]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a75      	ldr	r2, [pc, #468]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 8003350:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003354:	6013      	str	r3, [r2, #0]
 8003356:	e01d      	b.n	8003394 <HAL_RCC_OscConfig+0xb0>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003360:	d10c      	bne.n	800337c <HAL_RCC_OscConfig+0x98>
 8003362:	4b70      	ldr	r3, [pc, #448]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a6f      	ldr	r2, [pc, #444]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 8003368:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800336c:	6013      	str	r3, [r2, #0]
 800336e:	4b6d      	ldr	r3, [pc, #436]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a6c      	ldr	r2, [pc, #432]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 8003374:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003378:	6013      	str	r3, [r2, #0]
 800337a:	e00b      	b.n	8003394 <HAL_RCC_OscConfig+0xb0>
 800337c:	4b69      	ldr	r3, [pc, #420]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a68      	ldr	r2, [pc, #416]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 8003382:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003386:	6013      	str	r3, [r2, #0]
 8003388:	4b66      	ldr	r3, [pc, #408]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a65      	ldr	r2, [pc, #404]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 800338e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003392:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d013      	beq.n	80033c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800339c:	f7fe fc6a 	bl	8001c74 <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033a4:	f7fe fc66 	bl	8001c74 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b64      	cmp	r3, #100	@ 0x64
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e207      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b6:	4b5b      	ldr	r3, [pc, #364]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d0f0      	beq.n	80033a4 <HAL_RCC_OscConfig+0xc0>
 80033c2:	e014      	b.n	80033ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c4:	f7fe fc56 	bl	8001c74 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033cc:	f7fe fc52 	bl	8001c74 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b64      	cmp	r3, #100	@ 0x64
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e1f3      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033de:	4b51      	ldr	r3, [pc, #324]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1f0      	bne.n	80033cc <HAL_RCC_OscConfig+0xe8>
 80033ea:	e000      	b.n	80033ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d063      	beq.n	80034c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033fa:	4b4a      	ldr	r3, [pc, #296]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f003 030c 	and.w	r3, r3, #12
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00b      	beq.n	800341e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003406:	4b47      	ldr	r3, [pc, #284]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800340e:	2b08      	cmp	r3, #8
 8003410:	d11c      	bne.n	800344c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003412:	4b44      	ldr	r3, [pc, #272]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d116      	bne.n	800344c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800341e:	4b41      	ldr	r3, [pc, #260]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d005      	beq.n	8003436 <HAL_RCC_OscConfig+0x152>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d001      	beq.n	8003436 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e1c7      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003436:	4b3b      	ldr	r3, [pc, #236]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	4937      	ldr	r1, [pc, #220]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 8003446:	4313      	orrs	r3, r2
 8003448:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800344a:	e03a      	b.n	80034c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d020      	beq.n	8003496 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003454:	4b34      	ldr	r3, [pc, #208]	@ (8003528 <HAL_RCC_OscConfig+0x244>)
 8003456:	2201      	movs	r2, #1
 8003458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345a:	f7fe fc0b 	bl	8001c74 <HAL_GetTick>
 800345e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003460:	e008      	b.n	8003474 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003462:	f7fe fc07 	bl	8001c74 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d901      	bls.n	8003474 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e1a8      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003474:	4b2b      	ldr	r3, [pc, #172]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0f0      	beq.n	8003462 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003480:	4b28      	ldr	r3, [pc, #160]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	4925      	ldr	r1, [pc, #148]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 8003490:	4313      	orrs	r3, r2
 8003492:	600b      	str	r3, [r1, #0]
 8003494:	e015      	b.n	80034c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003496:	4b24      	ldr	r3, [pc, #144]	@ (8003528 <HAL_RCC_OscConfig+0x244>)
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349c:	f7fe fbea 	bl	8001c74 <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034a4:	f7fe fbe6 	bl	8001c74 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e187      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034b6:	4b1b      	ldr	r3, [pc, #108]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1f0      	bne.n	80034a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0308 	and.w	r3, r3, #8
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d036      	beq.n	800353c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d016      	beq.n	8003504 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034d6:	4b15      	ldr	r3, [pc, #84]	@ (800352c <HAL_RCC_OscConfig+0x248>)
 80034d8:	2201      	movs	r2, #1
 80034da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034dc:	f7fe fbca 	bl	8001c74 <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034e2:	e008      	b.n	80034f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034e4:	f7fe fbc6 	bl	8001c74 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e167      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 80034f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d0f0      	beq.n	80034e4 <HAL_RCC_OscConfig+0x200>
 8003502:	e01b      	b.n	800353c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003504:	4b09      	ldr	r3, [pc, #36]	@ (800352c <HAL_RCC_OscConfig+0x248>)
 8003506:	2200      	movs	r2, #0
 8003508:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800350a:	f7fe fbb3 	bl	8001c74 <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003510:	e00e      	b.n	8003530 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003512:	f7fe fbaf 	bl	8001c74 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d907      	bls.n	8003530 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e150      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
 8003524:	40023800 	.word	0x40023800
 8003528:	42470000 	.word	0x42470000
 800352c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003530:	4b88      	ldr	r3, [pc, #544]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 8003532:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1ea      	bne.n	8003512 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0304 	and.w	r3, r3, #4
 8003544:	2b00      	cmp	r3, #0
 8003546:	f000 8097 	beq.w	8003678 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800354a:	2300      	movs	r3, #0
 800354c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800354e:	4b81      	ldr	r3, [pc, #516]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 8003550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003552:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10f      	bne.n	800357a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800355a:	2300      	movs	r3, #0
 800355c:	60bb      	str	r3, [r7, #8]
 800355e:	4b7d      	ldr	r3, [pc, #500]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 8003560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003562:	4a7c      	ldr	r2, [pc, #496]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 8003564:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003568:	6413      	str	r3, [r2, #64]	@ 0x40
 800356a:	4b7a      	ldr	r3, [pc, #488]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 800356c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003572:	60bb      	str	r3, [r7, #8]
 8003574:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003576:	2301      	movs	r3, #1
 8003578:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800357a:	4b77      	ldr	r3, [pc, #476]	@ (8003758 <HAL_RCC_OscConfig+0x474>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003582:	2b00      	cmp	r3, #0
 8003584:	d118      	bne.n	80035b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003586:	4b74      	ldr	r3, [pc, #464]	@ (8003758 <HAL_RCC_OscConfig+0x474>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a73      	ldr	r2, [pc, #460]	@ (8003758 <HAL_RCC_OscConfig+0x474>)
 800358c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003590:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003592:	f7fe fb6f 	bl	8001c74 <HAL_GetTick>
 8003596:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003598:	e008      	b.n	80035ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800359a:	f7fe fb6b 	bl	8001c74 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d901      	bls.n	80035ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e10c      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ac:	4b6a      	ldr	r3, [pc, #424]	@ (8003758 <HAL_RCC_OscConfig+0x474>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d0f0      	beq.n	800359a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d106      	bne.n	80035ce <HAL_RCC_OscConfig+0x2ea>
 80035c0:	4b64      	ldr	r3, [pc, #400]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 80035c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035c4:	4a63      	ldr	r2, [pc, #396]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 80035c6:	f043 0301 	orr.w	r3, r3, #1
 80035ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80035cc:	e01c      	b.n	8003608 <HAL_RCC_OscConfig+0x324>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	2b05      	cmp	r3, #5
 80035d4:	d10c      	bne.n	80035f0 <HAL_RCC_OscConfig+0x30c>
 80035d6:	4b5f      	ldr	r3, [pc, #380]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 80035d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035da:	4a5e      	ldr	r2, [pc, #376]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 80035dc:	f043 0304 	orr.w	r3, r3, #4
 80035e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80035e2:	4b5c      	ldr	r3, [pc, #368]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 80035e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035e6:	4a5b      	ldr	r2, [pc, #364]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 80035e8:	f043 0301 	orr.w	r3, r3, #1
 80035ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80035ee:	e00b      	b.n	8003608 <HAL_RCC_OscConfig+0x324>
 80035f0:	4b58      	ldr	r3, [pc, #352]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 80035f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035f4:	4a57      	ldr	r2, [pc, #348]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 80035f6:	f023 0301 	bic.w	r3, r3, #1
 80035fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80035fc:	4b55      	ldr	r3, [pc, #340]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 80035fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003600:	4a54      	ldr	r2, [pc, #336]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 8003602:	f023 0304 	bic.w	r3, r3, #4
 8003606:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d015      	beq.n	800363c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003610:	f7fe fb30 	bl	8001c74 <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003616:	e00a      	b.n	800362e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003618:	f7fe fb2c 	bl	8001c74 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003626:	4293      	cmp	r3, r2
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e0cb      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800362e:	4b49      	ldr	r3, [pc, #292]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 8003630:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d0ee      	beq.n	8003618 <HAL_RCC_OscConfig+0x334>
 800363a:	e014      	b.n	8003666 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800363c:	f7fe fb1a 	bl	8001c74 <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003642:	e00a      	b.n	800365a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003644:	f7fe fb16 	bl	8001c74 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003652:	4293      	cmp	r3, r2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e0b5      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800365a:	4b3e      	ldr	r3, [pc, #248]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 800365c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1ee      	bne.n	8003644 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003666:	7dfb      	ldrb	r3, [r7, #23]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d105      	bne.n	8003678 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800366c:	4b39      	ldr	r3, [pc, #228]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 800366e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003670:	4a38      	ldr	r2, [pc, #224]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 8003672:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003676:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	2b00      	cmp	r3, #0
 800367e:	f000 80a1 	beq.w	80037c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003682:	4b34      	ldr	r3, [pc, #208]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f003 030c 	and.w	r3, r3, #12
 800368a:	2b08      	cmp	r3, #8
 800368c:	d05c      	beq.n	8003748 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	2b02      	cmp	r3, #2
 8003694:	d141      	bne.n	800371a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003696:	4b31      	ldr	r3, [pc, #196]	@ (800375c <HAL_RCC_OscConfig+0x478>)
 8003698:	2200      	movs	r2, #0
 800369a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800369c:	f7fe faea 	bl	8001c74 <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036a4:	f7fe fae6 	bl	8001c74 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e087      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036b6:	4b27      	ldr	r3, [pc, #156]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1f0      	bne.n	80036a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	69da      	ldr	r2, [r3, #28]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	431a      	orrs	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d0:	019b      	lsls	r3, r3, #6
 80036d2:	431a      	orrs	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036d8:	085b      	lsrs	r3, r3, #1
 80036da:	3b01      	subs	r3, #1
 80036dc:	041b      	lsls	r3, r3, #16
 80036de:	431a      	orrs	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e4:	061b      	lsls	r3, r3, #24
 80036e6:	491b      	ldr	r1, [pc, #108]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036ec:	4b1b      	ldr	r3, [pc, #108]	@ (800375c <HAL_RCC_OscConfig+0x478>)
 80036ee:	2201      	movs	r2, #1
 80036f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f2:	f7fe fabf 	bl	8001c74 <HAL_GetTick>
 80036f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036f8:	e008      	b.n	800370c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036fa:	f7fe fabb 	bl	8001c74 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e05c      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800370c:	4b11      	ldr	r3, [pc, #68]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d0f0      	beq.n	80036fa <HAL_RCC_OscConfig+0x416>
 8003718:	e054      	b.n	80037c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800371a:	4b10      	ldr	r3, [pc, #64]	@ (800375c <HAL_RCC_OscConfig+0x478>)
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003720:	f7fe faa8 	bl	8001c74 <HAL_GetTick>
 8003724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003726:	e008      	b.n	800373a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003728:	f7fe faa4 	bl	8001c74 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b02      	cmp	r3, #2
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e045      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800373a:	4b06      	ldr	r3, [pc, #24]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1f0      	bne.n	8003728 <HAL_RCC_OscConfig+0x444>
 8003746:	e03d      	b.n	80037c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	2b01      	cmp	r3, #1
 800374e:	d107      	bne.n	8003760 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e038      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
 8003754:	40023800 	.word	0x40023800
 8003758:	40007000 	.word	0x40007000
 800375c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003760:	4b1b      	ldr	r3, [pc, #108]	@ (80037d0 <HAL_RCC_OscConfig+0x4ec>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d028      	beq.n	80037c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003778:	429a      	cmp	r2, r3
 800377a:	d121      	bne.n	80037c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003786:	429a      	cmp	r2, r3
 8003788:	d11a      	bne.n	80037c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003790:	4013      	ands	r3, r2
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003796:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003798:	4293      	cmp	r3, r2
 800379a:	d111      	bne.n	80037c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037a6:	085b      	lsrs	r3, r3, #1
 80037a8:	3b01      	subs	r3, #1
 80037aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d107      	bne.n	80037c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037bc:	429a      	cmp	r2, r3
 80037be:	d001      	beq.n	80037c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e000      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3718      	adds	r7, #24
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	40023800 	.word	0x40023800

080037d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d101      	bne.n	80037e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e0cc      	b.n	8003982 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037e8:	4b68      	ldr	r3, [pc, #416]	@ (800398c <HAL_RCC_ClockConfig+0x1b8>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0307 	and.w	r3, r3, #7
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d90c      	bls.n	8003810 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037f6:	4b65      	ldr	r3, [pc, #404]	@ (800398c <HAL_RCC_ClockConfig+0x1b8>)
 80037f8:	683a      	ldr	r2, [r7, #0]
 80037fa:	b2d2      	uxtb	r2, r2
 80037fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037fe:	4b63      	ldr	r3, [pc, #396]	@ (800398c <HAL_RCC_ClockConfig+0x1b8>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0307 	and.w	r3, r3, #7
 8003806:	683a      	ldr	r2, [r7, #0]
 8003808:	429a      	cmp	r2, r3
 800380a:	d001      	beq.n	8003810 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e0b8      	b.n	8003982 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d020      	beq.n	800385e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0304 	and.w	r3, r3, #4
 8003824:	2b00      	cmp	r3, #0
 8003826:	d005      	beq.n	8003834 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003828:	4b59      	ldr	r3, [pc, #356]	@ (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	4a58      	ldr	r2, [pc, #352]	@ (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 800382e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003832:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0308 	and.w	r3, r3, #8
 800383c:	2b00      	cmp	r3, #0
 800383e:	d005      	beq.n	800384c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003840:	4b53      	ldr	r3, [pc, #332]	@ (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	4a52      	ldr	r2, [pc, #328]	@ (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 8003846:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800384a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800384c:	4b50      	ldr	r3, [pc, #320]	@ (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	494d      	ldr	r1, [pc, #308]	@ (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 800385a:	4313      	orrs	r3, r2
 800385c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b00      	cmp	r3, #0
 8003868:	d044      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d107      	bne.n	8003882 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003872:	4b47      	ldr	r3, [pc, #284]	@ (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d119      	bne.n	80038b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e07f      	b.n	8003982 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	2b02      	cmp	r3, #2
 8003888:	d003      	beq.n	8003892 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800388e:	2b03      	cmp	r3, #3
 8003890:	d107      	bne.n	80038a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003892:	4b3f      	ldr	r3, [pc, #252]	@ (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d109      	bne.n	80038b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e06f      	b.n	8003982 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a2:	4b3b      	ldr	r3, [pc, #236]	@ (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e067      	b.n	8003982 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038b2:	4b37      	ldr	r3, [pc, #220]	@ (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f023 0203 	bic.w	r2, r3, #3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	4934      	ldr	r1, [pc, #208]	@ (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038c4:	f7fe f9d6 	bl	8001c74 <HAL_GetTick>
 80038c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ca:	e00a      	b.n	80038e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038cc:	f7fe f9d2 	bl	8001c74 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038da:	4293      	cmp	r3, r2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e04f      	b.n	8003982 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038e2:	4b2b      	ldr	r3, [pc, #172]	@ (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 020c 	and.w	r2, r3, #12
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d1eb      	bne.n	80038cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038f4:	4b25      	ldr	r3, [pc, #148]	@ (800398c <HAL_RCC_ClockConfig+0x1b8>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0307 	and.w	r3, r3, #7
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d20c      	bcs.n	800391c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003902:	4b22      	ldr	r3, [pc, #136]	@ (800398c <HAL_RCC_ClockConfig+0x1b8>)
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	b2d2      	uxtb	r2, r2
 8003908:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800390a:	4b20      	ldr	r3, [pc, #128]	@ (800398c <HAL_RCC_ClockConfig+0x1b8>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0307 	and.w	r3, r3, #7
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	429a      	cmp	r2, r3
 8003916:	d001      	beq.n	800391c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e032      	b.n	8003982 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0304 	and.w	r3, r3, #4
 8003924:	2b00      	cmp	r3, #0
 8003926:	d008      	beq.n	800393a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003928:	4b19      	ldr	r3, [pc, #100]	@ (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	4916      	ldr	r1, [pc, #88]	@ (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 8003936:	4313      	orrs	r3, r2
 8003938:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0308 	and.w	r3, r3, #8
 8003942:	2b00      	cmp	r3, #0
 8003944:	d009      	beq.n	800395a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003946:	4b12      	ldr	r3, [pc, #72]	@ (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	00db      	lsls	r3, r3, #3
 8003954:	490e      	ldr	r1, [pc, #56]	@ (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 8003956:	4313      	orrs	r3, r2
 8003958:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800395a:	f000 f821 	bl	80039a0 <HAL_RCC_GetSysClockFreq>
 800395e:	4602      	mov	r2, r0
 8003960:	4b0b      	ldr	r3, [pc, #44]	@ (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	091b      	lsrs	r3, r3, #4
 8003966:	f003 030f 	and.w	r3, r3, #15
 800396a:	490a      	ldr	r1, [pc, #40]	@ (8003994 <HAL_RCC_ClockConfig+0x1c0>)
 800396c:	5ccb      	ldrb	r3, [r1, r3]
 800396e:	fa22 f303 	lsr.w	r3, r2, r3
 8003972:	4a09      	ldr	r2, [pc, #36]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 8003974:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003976:	4b09      	ldr	r3, [pc, #36]	@ (800399c <HAL_RCC_ClockConfig+0x1c8>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4618      	mov	r0, r3
 800397c:	f7fe f936 	bl	8001bec <HAL_InitTick>

  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	40023c00 	.word	0x40023c00
 8003990:	40023800 	.word	0x40023800
 8003994:	08008e3c 	.word	0x08008e3c
 8003998:	20000000 	.word	0x20000000
 800399c:	20000004 	.word	0x20000004

080039a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039a4:	b094      	sub	sp, #80	@ 0x50
 80039a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039a8:	2300      	movs	r3, #0
 80039aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80039ac:	2300      	movs	r3, #0
 80039ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039b0:	2300      	movs	r3, #0
 80039b2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80039b4:	2300      	movs	r3, #0
 80039b6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039b8:	4b79      	ldr	r3, [pc, #484]	@ (8003ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f003 030c 	and.w	r3, r3, #12
 80039c0:	2b08      	cmp	r3, #8
 80039c2:	d00d      	beq.n	80039e0 <HAL_RCC_GetSysClockFreq+0x40>
 80039c4:	2b08      	cmp	r3, #8
 80039c6:	f200 80e1 	bhi.w	8003b8c <HAL_RCC_GetSysClockFreq+0x1ec>
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d002      	beq.n	80039d4 <HAL_RCC_GetSysClockFreq+0x34>
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	d003      	beq.n	80039da <HAL_RCC_GetSysClockFreq+0x3a>
 80039d2:	e0db      	b.n	8003b8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039d4:	4b73      	ldr	r3, [pc, #460]	@ (8003ba4 <HAL_RCC_GetSysClockFreq+0x204>)
 80039d6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80039d8:	e0db      	b.n	8003b92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039da:	4b73      	ldr	r3, [pc, #460]	@ (8003ba8 <HAL_RCC_GetSysClockFreq+0x208>)
 80039dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80039de:	e0d8      	b.n	8003b92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039e0:	4b6f      	ldr	r3, [pc, #444]	@ (8003ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039e8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039ea:	4b6d      	ldr	r3, [pc, #436]	@ (8003ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d063      	beq.n	8003abe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039f6:	4b6a      	ldr	r3, [pc, #424]	@ (8003ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	099b      	lsrs	r3, r3, #6
 80039fc:	2200      	movs	r2, #0
 80039fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a00:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a08:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003a12:	4622      	mov	r2, r4
 8003a14:	462b      	mov	r3, r5
 8003a16:	f04f 0000 	mov.w	r0, #0
 8003a1a:	f04f 0100 	mov.w	r1, #0
 8003a1e:	0159      	lsls	r1, r3, #5
 8003a20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a24:	0150      	lsls	r0, r2, #5
 8003a26:	4602      	mov	r2, r0
 8003a28:	460b      	mov	r3, r1
 8003a2a:	4621      	mov	r1, r4
 8003a2c:	1a51      	subs	r1, r2, r1
 8003a2e:	6139      	str	r1, [r7, #16]
 8003a30:	4629      	mov	r1, r5
 8003a32:	eb63 0301 	sbc.w	r3, r3, r1
 8003a36:	617b      	str	r3, [r7, #20]
 8003a38:	f04f 0200 	mov.w	r2, #0
 8003a3c:	f04f 0300 	mov.w	r3, #0
 8003a40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a44:	4659      	mov	r1, fp
 8003a46:	018b      	lsls	r3, r1, #6
 8003a48:	4651      	mov	r1, sl
 8003a4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a4e:	4651      	mov	r1, sl
 8003a50:	018a      	lsls	r2, r1, #6
 8003a52:	4651      	mov	r1, sl
 8003a54:	ebb2 0801 	subs.w	r8, r2, r1
 8003a58:	4659      	mov	r1, fp
 8003a5a:	eb63 0901 	sbc.w	r9, r3, r1
 8003a5e:	f04f 0200 	mov.w	r2, #0
 8003a62:	f04f 0300 	mov.w	r3, #0
 8003a66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a72:	4690      	mov	r8, r2
 8003a74:	4699      	mov	r9, r3
 8003a76:	4623      	mov	r3, r4
 8003a78:	eb18 0303 	adds.w	r3, r8, r3
 8003a7c:	60bb      	str	r3, [r7, #8]
 8003a7e:	462b      	mov	r3, r5
 8003a80:	eb49 0303 	adc.w	r3, r9, r3
 8003a84:	60fb      	str	r3, [r7, #12]
 8003a86:	f04f 0200 	mov.w	r2, #0
 8003a8a:	f04f 0300 	mov.w	r3, #0
 8003a8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a92:	4629      	mov	r1, r5
 8003a94:	024b      	lsls	r3, r1, #9
 8003a96:	4621      	mov	r1, r4
 8003a98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a9c:	4621      	mov	r1, r4
 8003a9e:	024a      	lsls	r2, r1, #9
 8003aa0:	4610      	mov	r0, r2
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003aaa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003aac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003ab0:	f7fd f8d2 	bl	8000c58 <__aeabi_uldivmod>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	4613      	mov	r3, r2
 8003aba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003abc:	e058      	b.n	8003b70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003abe:	4b38      	ldr	r3, [pc, #224]	@ (8003ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	099b      	lsrs	r3, r3, #6
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	4611      	mov	r1, r2
 8003aca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ace:	623b      	str	r3, [r7, #32]
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ad4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ad8:	4642      	mov	r2, r8
 8003ada:	464b      	mov	r3, r9
 8003adc:	f04f 0000 	mov.w	r0, #0
 8003ae0:	f04f 0100 	mov.w	r1, #0
 8003ae4:	0159      	lsls	r1, r3, #5
 8003ae6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003aea:	0150      	lsls	r0, r2, #5
 8003aec:	4602      	mov	r2, r0
 8003aee:	460b      	mov	r3, r1
 8003af0:	4641      	mov	r1, r8
 8003af2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003af6:	4649      	mov	r1, r9
 8003af8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003afc:	f04f 0200 	mov.w	r2, #0
 8003b00:	f04f 0300 	mov.w	r3, #0
 8003b04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b10:	ebb2 040a 	subs.w	r4, r2, sl
 8003b14:	eb63 050b 	sbc.w	r5, r3, fp
 8003b18:	f04f 0200 	mov.w	r2, #0
 8003b1c:	f04f 0300 	mov.w	r3, #0
 8003b20:	00eb      	lsls	r3, r5, #3
 8003b22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b26:	00e2      	lsls	r2, r4, #3
 8003b28:	4614      	mov	r4, r2
 8003b2a:	461d      	mov	r5, r3
 8003b2c:	4643      	mov	r3, r8
 8003b2e:	18e3      	adds	r3, r4, r3
 8003b30:	603b      	str	r3, [r7, #0]
 8003b32:	464b      	mov	r3, r9
 8003b34:	eb45 0303 	adc.w	r3, r5, r3
 8003b38:	607b      	str	r3, [r7, #4]
 8003b3a:	f04f 0200 	mov.w	r2, #0
 8003b3e:	f04f 0300 	mov.w	r3, #0
 8003b42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b46:	4629      	mov	r1, r5
 8003b48:	028b      	lsls	r3, r1, #10
 8003b4a:	4621      	mov	r1, r4
 8003b4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b50:	4621      	mov	r1, r4
 8003b52:	028a      	lsls	r2, r1, #10
 8003b54:	4610      	mov	r0, r2
 8003b56:	4619      	mov	r1, r3
 8003b58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	61bb      	str	r3, [r7, #24]
 8003b5e:	61fa      	str	r2, [r7, #28]
 8003b60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b64:	f7fd f878 	bl	8000c58 <__aeabi_uldivmod>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b70:	4b0b      	ldr	r3, [pc, #44]	@ (8003ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	0c1b      	lsrs	r3, r3, #16
 8003b76:	f003 0303 	and.w	r3, r3, #3
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003b80:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b88:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b8a:	e002      	b.n	8003b92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b8c:	4b05      	ldr	r3, [pc, #20]	@ (8003ba4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b8e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3750      	adds	r7, #80	@ 0x50
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b9e:	bf00      	nop
 8003ba0:	40023800 	.word	0x40023800
 8003ba4:	00f42400 	.word	0x00f42400
 8003ba8:	007a1200 	.word	0x007a1200

08003bac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bac:	b480      	push	{r7}
 8003bae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bb0:	4b03      	ldr	r3, [pc, #12]	@ (8003bc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	20000000 	.word	0x20000000

08003bc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003bc8:	f7ff fff0 	bl	8003bac <HAL_RCC_GetHCLKFreq>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	4b05      	ldr	r3, [pc, #20]	@ (8003be4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	0a9b      	lsrs	r3, r3, #10
 8003bd4:	f003 0307 	and.w	r3, r3, #7
 8003bd8:	4903      	ldr	r1, [pc, #12]	@ (8003be8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bda:	5ccb      	ldrb	r3, [r1, r3]
 8003bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	40023800 	.word	0x40023800
 8003be8:	08008e4c 	.word	0x08008e4c

08003bec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003bf0:	f7ff ffdc 	bl	8003bac <HAL_RCC_GetHCLKFreq>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	4b05      	ldr	r3, [pc, #20]	@ (8003c0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	0b5b      	lsrs	r3, r3, #13
 8003bfc:	f003 0307 	and.w	r3, r3, #7
 8003c00:	4903      	ldr	r1, [pc, #12]	@ (8003c10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c02:	5ccb      	ldrb	r3, [r1, r3]
 8003c04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	40023800 	.word	0x40023800
 8003c10:	08008e4c 	.word	0x08008e4c

08003c14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e041      	b.n	8003caa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d106      	bne.n	8003c40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7fd fda4 	bl	8001788 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2202      	movs	r2, #2
 8003c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	3304      	adds	r3, #4
 8003c50:	4619      	mov	r1, r3
 8003c52:	4610      	mov	r0, r2
 8003c54:	f000 fbfe 	bl	8004454 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3708      	adds	r7, #8
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
	...

08003cb4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d001      	beq.n	8003ccc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e03c      	b.n	8003d46 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2202      	movs	r2, #2
 8003cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a1e      	ldr	r2, [pc, #120]	@ (8003d54 <HAL_TIM_Base_Start+0xa0>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d018      	beq.n	8003d10 <HAL_TIM_Base_Start+0x5c>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ce6:	d013      	beq.n	8003d10 <HAL_TIM_Base_Start+0x5c>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a1a      	ldr	r2, [pc, #104]	@ (8003d58 <HAL_TIM_Base_Start+0xa4>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d00e      	beq.n	8003d10 <HAL_TIM_Base_Start+0x5c>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a19      	ldr	r2, [pc, #100]	@ (8003d5c <HAL_TIM_Base_Start+0xa8>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d009      	beq.n	8003d10 <HAL_TIM_Base_Start+0x5c>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a17      	ldr	r2, [pc, #92]	@ (8003d60 <HAL_TIM_Base_Start+0xac>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d004      	beq.n	8003d10 <HAL_TIM_Base_Start+0x5c>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a16      	ldr	r2, [pc, #88]	@ (8003d64 <HAL_TIM_Base_Start+0xb0>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d111      	bne.n	8003d34 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f003 0307 	and.w	r3, r3, #7
 8003d1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2b06      	cmp	r3, #6
 8003d20:	d010      	beq.n	8003d44 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f042 0201 	orr.w	r2, r2, #1
 8003d30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d32:	e007      	b.n	8003d44 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f042 0201 	orr.w	r2, r2, #1
 8003d42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3714      	adds	r7, #20
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	40010000 	.word	0x40010000
 8003d58:	40000400 	.word	0x40000400
 8003d5c:	40000800 	.word	0x40000800
 8003d60:	40000c00 	.word	0x40000c00
 8003d64:	40014000 	.word	0x40014000

08003d68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d001      	beq.n	8003d80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e044      	b.n	8003e0a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2202      	movs	r2, #2
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68da      	ldr	r2, [r3, #12]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f042 0201 	orr.w	r2, r2, #1
 8003d96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a1e      	ldr	r2, [pc, #120]	@ (8003e18 <HAL_TIM_Base_Start_IT+0xb0>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d018      	beq.n	8003dd4 <HAL_TIM_Base_Start_IT+0x6c>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003daa:	d013      	beq.n	8003dd4 <HAL_TIM_Base_Start_IT+0x6c>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a1a      	ldr	r2, [pc, #104]	@ (8003e1c <HAL_TIM_Base_Start_IT+0xb4>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d00e      	beq.n	8003dd4 <HAL_TIM_Base_Start_IT+0x6c>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a19      	ldr	r2, [pc, #100]	@ (8003e20 <HAL_TIM_Base_Start_IT+0xb8>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d009      	beq.n	8003dd4 <HAL_TIM_Base_Start_IT+0x6c>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a17      	ldr	r2, [pc, #92]	@ (8003e24 <HAL_TIM_Base_Start_IT+0xbc>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d004      	beq.n	8003dd4 <HAL_TIM_Base_Start_IT+0x6c>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a16      	ldr	r2, [pc, #88]	@ (8003e28 <HAL_TIM_Base_Start_IT+0xc0>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d111      	bne.n	8003df8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f003 0307 	and.w	r3, r3, #7
 8003dde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2b06      	cmp	r3, #6
 8003de4:	d010      	beq.n	8003e08 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f042 0201 	orr.w	r2, r2, #1
 8003df4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003df6:	e007      	b.n	8003e08 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f042 0201 	orr.w	r2, r2, #1
 8003e06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3714      	adds	r7, #20
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	40010000 	.word	0x40010000
 8003e1c:	40000400 	.word	0x40000400
 8003e20:	40000800 	.word	0x40000800
 8003e24:	40000c00 	.word	0x40000c00
 8003e28:	40014000 	.word	0x40014000

08003e2c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d101      	bne.n	8003e3e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e041      	b.n	8003ec2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d106      	bne.n	8003e58 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 f839 	bl	8003eca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	3304      	adds	r3, #4
 8003e68:	4619      	mov	r1, r3
 8003e6a:	4610      	mov	r0, r2
 8003e6c:	f000 faf2 	bl	8004454 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3708      	adds	r7, #8
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003eca:	b480      	push	{r7}
 8003ecc:	b083      	sub	sp, #12
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003ed2:	bf00      	nop
 8003ed4:	370c      	adds	r7, #12
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr

08003ede <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b082      	sub	sp, #8
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	f003 0302 	and.w	r3, r3, #2
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d122      	bne.n	8003f3a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	f003 0302 	and.w	r3, r3, #2
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d11b      	bne.n	8003f3a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f06f 0202 	mvn.w	r2, #2
 8003f0a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	f003 0303 	and.w	r3, r3, #3
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d003      	beq.n	8003f28 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 fa78 	bl	8004416 <HAL_TIM_IC_CaptureCallback>
 8003f26:	e005      	b.n	8003f34 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 fa6a 	bl	8004402 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 fa7b 	bl	800442a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	f003 0304 	and.w	r3, r3, #4
 8003f44:	2b04      	cmp	r3, #4
 8003f46:	d122      	bne.n	8003f8e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f003 0304 	and.w	r3, r3, #4
 8003f52:	2b04      	cmp	r3, #4
 8003f54:	d11b      	bne.n	8003f8e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f06f 0204 	mvn.w	r2, #4
 8003f5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2202      	movs	r2, #2
 8003f64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d003      	beq.n	8003f7c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 fa4e 	bl	8004416 <HAL_TIM_IC_CaptureCallback>
 8003f7a:	e005      	b.n	8003f88 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 fa40 	bl	8004402 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 fa51 	bl	800442a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	f003 0308 	and.w	r3, r3, #8
 8003f98:	2b08      	cmp	r3, #8
 8003f9a:	d122      	bne.n	8003fe2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	f003 0308 	and.w	r3, r3, #8
 8003fa6:	2b08      	cmp	r3, #8
 8003fa8:	d11b      	bne.n	8003fe2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f06f 0208 	mvn.w	r2, #8
 8003fb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2204      	movs	r2, #4
 8003fb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	69db      	ldr	r3, [r3, #28]
 8003fc0:	f003 0303 	and.w	r3, r3, #3
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d003      	beq.n	8003fd0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 fa24 	bl	8004416 <HAL_TIM_IC_CaptureCallback>
 8003fce:	e005      	b.n	8003fdc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f000 fa16 	bl	8004402 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 fa27 	bl	800442a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	f003 0310 	and.w	r3, r3, #16
 8003fec:	2b10      	cmp	r3, #16
 8003fee:	d122      	bne.n	8004036 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	f003 0310 	and.w	r3, r3, #16
 8003ffa:	2b10      	cmp	r3, #16
 8003ffc:	d11b      	bne.n	8004036 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f06f 0210 	mvn.w	r2, #16
 8004006:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2208      	movs	r2, #8
 800400c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	69db      	ldr	r3, [r3, #28]
 8004014:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004018:	2b00      	cmp	r3, #0
 800401a:	d003      	beq.n	8004024 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 f9fa 	bl	8004416 <HAL_TIM_IC_CaptureCallback>
 8004022:	e005      	b.n	8004030 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 f9ec 	bl	8004402 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 f9fd 	bl	800442a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	2b01      	cmp	r3, #1
 8004042:	d10e      	bne.n	8004062 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b01      	cmp	r3, #1
 8004050:	d107      	bne.n	8004062 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f06f 0201 	mvn.w	r2, #1
 800405a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f7fc ff73 	bl	8000f48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800406c:	2b80      	cmp	r3, #128	@ 0x80
 800406e:	d10e      	bne.n	800408e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800407a:	2b80      	cmp	r3, #128	@ 0x80
 800407c:	d107      	bne.n	800408e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004086:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 fd53 	bl	8004b34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004098:	2b40      	cmp	r3, #64	@ 0x40
 800409a:	d10e      	bne.n	80040ba <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040a6:	2b40      	cmp	r3, #64	@ 0x40
 80040a8:	d107      	bne.n	80040ba <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80040b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 f9c2 	bl	800443e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	f003 0320 	and.w	r3, r3, #32
 80040c4:	2b20      	cmp	r3, #32
 80040c6:	d10e      	bne.n	80040e6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	f003 0320 	and.w	r3, r3, #32
 80040d2:	2b20      	cmp	r3, #32
 80040d4:	d107      	bne.n	80040e6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f06f 0220 	mvn.w	r2, #32
 80040de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 fd1d 	bl	8004b20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040e6:	bf00      	nop
 80040e8:	3708      	adds	r7, #8
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
	...

080040f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b086      	sub	sp, #24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040fc:	2300      	movs	r3, #0
 80040fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004106:	2b01      	cmp	r3, #1
 8004108:	d101      	bne.n	800410e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800410a:	2302      	movs	r3, #2
 800410c:	e0ae      	b.n	800426c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2b0c      	cmp	r3, #12
 800411a:	f200 809f 	bhi.w	800425c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800411e:	a201      	add	r2, pc, #4	@ (adr r2, 8004124 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004124:	08004159 	.word	0x08004159
 8004128:	0800425d 	.word	0x0800425d
 800412c:	0800425d 	.word	0x0800425d
 8004130:	0800425d 	.word	0x0800425d
 8004134:	08004199 	.word	0x08004199
 8004138:	0800425d 	.word	0x0800425d
 800413c:	0800425d 	.word	0x0800425d
 8004140:	0800425d 	.word	0x0800425d
 8004144:	080041db 	.word	0x080041db
 8004148:	0800425d 	.word	0x0800425d
 800414c:	0800425d 	.word	0x0800425d
 8004150:	0800425d 	.word	0x0800425d
 8004154:	0800421b 	.word	0x0800421b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68b9      	ldr	r1, [r7, #8]
 800415e:	4618      	mov	r0, r3
 8004160:	f000 f9f8 	bl	8004554 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	699a      	ldr	r2, [r3, #24]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f042 0208 	orr.w	r2, r2, #8
 8004172:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	699a      	ldr	r2, [r3, #24]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f022 0204 	bic.w	r2, r2, #4
 8004182:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	6999      	ldr	r1, [r3, #24]
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	691a      	ldr	r2, [r3, #16]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	430a      	orrs	r2, r1
 8004194:	619a      	str	r2, [r3, #24]
      break;
 8004196:	e064      	b.n	8004262 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68b9      	ldr	r1, [r7, #8]
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 fa3e 	bl	8004620 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	699a      	ldr	r2, [r3, #24]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	699a      	ldr	r2, [r3, #24]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	6999      	ldr	r1, [r3, #24]
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	021a      	lsls	r2, r3, #8
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	430a      	orrs	r2, r1
 80041d6:	619a      	str	r2, [r3, #24]
      break;
 80041d8:	e043      	b.n	8004262 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68b9      	ldr	r1, [r7, #8]
 80041e0:	4618      	mov	r0, r3
 80041e2:	f000 fa89 	bl	80046f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	69da      	ldr	r2, [r3, #28]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f042 0208 	orr.w	r2, r2, #8
 80041f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	69da      	ldr	r2, [r3, #28]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f022 0204 	bic.w	r2, r2, #4
 8004204:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	69d9      	ldr	r1, [r3, #28]
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	691a      	ldr	r2, [r3, #16]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	430a      	orrs	r2, r1
 8004216:	61da      	str	r2, [r3, #28]
      break;
 8004218:	e023      	b.n	8004262 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68b9      	ldr	r1, [r7, #8]
 8004220:	4618      	mov	r0, r3
 8004222:	f000 fad3 	bl	80047cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	69da      	ldr	r2, [r3, #28]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004234:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	69da      	ldr	r2, [r3, #28]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004244:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	69d9      	ldr	r1, [r3, #28]
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	021a      	lsls	r2, r3, #8
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	430a      	orrs	r2, r1
 8004258:	61da      	str	r2, [r3, #28]
      break;
 800425a:	e002      	b.n	8004262 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	75fb      	strb	r3, [r7, #23]
      break;
 8004260:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800426a:	7dfb      	ldrb	r3, [r7, #23]
}
 800426c:	4618      	mov	r0, r3
 800426e:	3718      	adds	r7, #24
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800427e:	2300      	movs	r3, #0
 8004280:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004288:	2b01      	cmp	r3, #1
 800428a:	d101      	bne.n	8004290 <HAL_TIM_ConfigClockSource+0x1c>
 800428c:	2302      	movs	r3, #2
 800428e:	e0b4      	b.n	80043fa <HAL_TIM_ConfigClockSource+0x186>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2202      	movs	r2, #2
 800429c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80042ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80042b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68ba      	ldr	r2, [r7, #8]
 80042be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042c8:	d03e      	beq.n	8004348 <HAL_TIM_ConfigClockSource+0xd4>
 80042ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042ce:	f200 8087 	bhi.w	80043e0 <HAL_TIM_ConfigClockSource+0x16c>
 80042d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042d6:	f000 8086 	beq.w	80043e6 <HAL_TIM_ConfigClockSource+0x172>
 80042da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042de:	d87f      	bhi.n	80043e0 <HAL_TIM_ConfigClockSource+0x16c>
 80042e0:	2b70      	cmp	r3, #112	@ 0x70
 80042e2:	d01a      	beq.n	800431a <HAL_TIM_ConfigClockSource+0xa6>
 80042e4:	2b70      	cmp	r3, #112	@ 0x70
 80042e6:	d87b      	bhi.n	80043e0 <HAL_TIM_ConfigClockSource+0x16c>
 80042e8:	2b60      	cmp	r3, #96	@ 0x60
 80042ea:	d050      	beq.n	800438e <HAL_TIM_ConfigClockSource+0x11a>
 80042ec:	2b60      	cmp	r3, #96	@ 0x60
 80042ee:	d877      	bhi.n	80043e0 <HAL_TIM_ConfigClockSource+0x16c>
 80042f0:	2b50      	cmp	r3, #80	@ 0x50
 80042f2:	d03c      	beq.n	800436e <HAL_TIM_ConfigClockSource+0xfa>
 80042f4:	2b50      	cmp	r3, #80	@ 0x50
 80042f6:	d873      	bhi.n	80043e0 <HAL_TIM_ConfigClockSource+0x16c>
 80042f8:	2b40      	cmp	r3, #64	@ 0x40
 80042fa:	d058      	beq.n	80043ae <HAL_TIM_ConfigClockSource+0x13a>
 80042fc:	2b40      	cmp	r3, #64	@ 0x40
 80042fe:	d86f      	bhi.n	80043e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004300:	2b30      	cmp	r3, #48	@ 0x30
 8004302:	d064      	beq.n	80043ce <HAL_TIM_ConfigClockSource+0x15a>
 8004304:	2b30      	cmp	r3, #48	@ 0x30
 8004306:	d86b      	bhi.n	80043e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004308:	2b20      	cmp	r3, #32
 800430a:	d060      	beq.n	80043ce <HAL_TIM_ConfigClockSource+0x15a>
 800430c:	2b20      	cmp	r3, #32
 800430e:	d867      	bhi.n	80043e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004310:	2b00      	cmp	r3, #0
 8004312:	d05c      	beq.n	80043ce <HAL_TIM_ConfigClockSource+0x15a>
 8004314:	2b10      	cmp	r3, #16
 8004316:	d05a      	beq.n	80043ce <HAL_TIM_ConfigClockSource+0x15a>
 8004318:	e062      	b.n	80043e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6818      	ldr	r0, [r3, #0]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	6899      	ldr	r1, [r3, #8]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	685a      	ldr	r2, [r3, #4]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	f000 fb19 	bl	8004960 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800433c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68ba      	ldr	r2, [r7, #8]
 8004344:	609a      	str	r2, [r3, #8]
      break;
 8004346:	e04f      	b.n	80043e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6818      	ldr	r0, [r3, #0]
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	6899      	ldr	r1, [r3, #8]
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	685a      	ldr	r2, [r3, #4]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	f000 fb02 	bl	8004960 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	689a      	ldr	r2, [r3, #8]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800436a:	609a      	str	r2, [r3, #8]
      break;
 800436c:	e03c      	b.n	80043e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6818      	ldr	r0, [r3, #0]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	6859      	ldr	r1, [r3, #4]
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	461a      	mov	r2, r3
 800437c:	f000 fa76 	bl	800486c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2150      	movs	r1, #80	@ 0x50
 8004386:	4618      	mov	r0, r3
 8004388:	f000 facf 	bl	800492a <TIM_ITRx_SetConfig>
      break;
 800438c:	e02c      	b.n	80043e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6818      	ldr	r0, [r3, #0]
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	6859      	ldr	r1, [r3, #4]
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	461a      	mov	r2, r3
 800439c:	f000 fa95 	bl	80048ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2160      	movs	r1, #96	@ 0x60
 80043a6:	4618      	mov	r0, r3
 80043a8:	f000 fabf 	bl	800492a <TIM_ITRx_SetConfig>
      break;
 80043ac:	e01c      	b.n	80043e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6818      	ldr	r0, [r3, #0]
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	6859      	ldr	r1, [r3, #4]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	461a      	mov	r2, r3
 80043bc:	f000 fa56 	bl	800486c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2140      	movs	r1, #64	@ 0x40
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 faaf 	bl	800492a <TIM_ITRx_SetConfig>
      break;
 80043cc:	e00c      	b.n	80043e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4619      	mov	r1, r3
 80043d8:	4610      	mov	r0, r2
 80043da:	f000 faa6 	bl	800492a <TIM_ITRx_SetConfig>
      break;
 80043de:	e003      	b.n	80043e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	73fb      	strb	r3, [r7, #15]
      break;
 80043e4:	e000      	b.n	80043e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80043e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80043f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004402:	b480      	push	{r7}
 8004404:	b083      	sub	sp, #12
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800440a:	bf00      	nop
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004416:	b480      	push	{r7}
 8004418:	b083      	sub	sp, #12
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800441e:	bf00      	nop
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr

0800442a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800442a:	b480      	push	{r7}
 800442c:	b083      	sub	sp, #12
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004432:	bf00      	nop
 8004434:	370c      	adds	r7, #12
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr

0800443e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800443e:	b480      	push	{r7}
 8004440:	b083      	sub	sp, #12
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004446:	bf00      	nop
 8004448:	370c      	adds	r7, #12
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
	...

08004454 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a34      	ldr	r2, [pc, #208]	@ (8004538 <TIM_Base_SetConfig+0xe4>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d00f      	beq.n	800448c <TIM_Base_SetConfig+0x38>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004472:	d00b      	beq.n	800448c <TIM_Base_SetConfig+0x38>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a31      	ldr	r2, [pc, #196]	@ (800453c <TIM_Base_SetConfig+0xe8>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d007      	beq.n	800448c <TIM_Base_SetConfig+0x38>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a30      	ldr	r2, [pc, #192]	@ (8004540 <TIM_Base_SetConfig+0xec>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d003      	beq.n	800448c <TIM_Base_SetConfig+0x38>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a2f      	ldr	r2, [pc, #188]	@ (8004544 <TIM_Base_SetConfig+0xf0>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d108      	bne.n	800449e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004492:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	4313      	orrs	r3, r2
 800449c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a25      	ldr	r2, [pc, #148]	@ (8004538 <TIM_Base_SetConfig+0xe4>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d01b      	beq.n	80044de <TIM_Base_SetConfig+0x8a>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044ac:	d017      	beq.n	80044de <TIM_Base_SetConfig+0x8a>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a22      	ldr	r2, [pc, #136]	@ (800453c <TIM_Base_SetConfig+0xe8>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d013      	beq.n	80044de <TIM_Base_SetConfig+0x8a>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a21      	ldr	r2, [pc, #132]	@ (8004540 <TIM_Base_SetConfig+0xec>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d00f      	beq.n	80044de <TIM_Base_SetConfig+0x8a>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a20      	ldr	r2, [pc, #128]	@ (8004544 <TIM_Base_SetConfig+0xf0>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d00b      	beq.n	80044de <TIM_Base_SetConfig+0x8a>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a1f      	ldr	r2, [pc, #124]	@ (8004548 <TIM_Base_SetConfig+0xf4>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d007      	beq.n	80044de <TIM_Base_SetConfig+0x8a>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a1e      	ldr	r2, [pc, #120]	@ (800454c <TIM_Base_SetConfig+0xf8>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d003      	beq.n	80044de <TIM_Base_SetConfig+0x8a>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a1d      	ldr	r2, [pc, #116]	@ (8004550 <TIM_Base_SetConfig+0xfc>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d108      	bne.n	80044f0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	689a      	ldr	r2, [r3, #8]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a08      	ldr	r2, [pc, #32]	@ (8004538 <TIM_Base_SetConfig+0xe4>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d103      	bne.n	8004524 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	691a      	ldr	r2, [r3, #16]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	615a      	str	r2, [r3, #20]
}
 800452a:	bf00      	nop
 800452c:	3714      	adds	r7, #20
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	40010000 	.word	0x40010000
 800453c:	40000400 	.word	0x40000400
 8004540:	40000800 	.word	0x40000800
 8004544:	40000c00 	.word	0x40000c00
 8004548:	40014000 	.word	0x40014000
 800454c:	40014400 	.word	0x40014400
 8004550:	40014800 	.word	0x40014800

08004554 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004554:	b480      	push	{r7}
 8004556:	b087      	sub	sp, #28
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a1b      	ldr	r3, [r3, #32]
 8004562:	f023 0201 	bic.w	r2, r3, #1
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a1b      	ldr	r3, [r3, #32]
 800456e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f023 0303 	bic.w	r3, r3, #3
 800458a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	4313      	orrs	r3, r2
 8004594:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f023 0302 	bic.w	r3, r3, #2
 800459c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a1c      	ldr	r2, [pc, #112]	@ (800461c <TIM_OC1_SetConfig+0xc8>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d10c      	bne.n	80045ca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	f023 0308 	bic.w	r3, r3, #8
 80045b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	4313      	orrs	r3, r2
 80045c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	f023 0304 	bic.w	r3, r3, #4
 80045c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a13      	ldr	r2, [pc, #76]	@ (800461c <TIM_OC1_SetConfig+0xc8>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d111      	bne.n	80045f6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80045e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	693a      	ldr	r2, [r7, #16]
 80045fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	685a      	ldr	r2, [r3, #4]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	697a      	ldr	r2, [r7, #20]
 800460e:	621a      	str	r2, [r3, #32]
}
 8004610:	bf00      	nop
 8004612:	371c      	adds	r7, #28
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr
 800461c:	40010000 	.word	0x40010000

08004620 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004620:	b480      	push	{r7}
 8004622:	b087      	sub	sp, #28
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	f023 0210 	bic.w	r2, r3, #16
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800464e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004656:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	021b      	lsls	r3, r3, #8
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	4313      	orrs	r3, r2
 8004662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	f023 0320 	bic.w	r3, r3, #32
 800466a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	011b      	lsls	r3, r3, #4
 8004672:	697a      	ldr	r2, [r7, #20]
 8004674:	4313      	orrs	r3, r2
 8004676:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a1e      	ldr	r2, [pc, #120]	@ (80046f4 <TIM_OC2_SetConfig+0xd4>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d10d      	bne.n	800469c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004686:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	011b      	lsls	r3, r3, #4
 800468e:	697a      	ldr	r2, [r7, #20]
 8004690:	4313      	orrs	r3, r2
 8004692:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800469a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a15      	ldr	r2, [pc, #84]	@ (80046f4 <TIM_OC2_SetConfig+0xd4>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d113      	bne.n	80046cc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80046aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80046b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	695b      	ldr	r3, [r3, #20]
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	4313      	orrs	r3, r2
 80046be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	693a      	ldr	r2, [r7, #16]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	697a      	ldr	r2, [r7, #20]
 80046e4:	621a      	str	r2, [r3, #32]
}
 80046e6:	bf00      	nop
 80046e8:	371c      	adds	r7, #28
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	40010000 	.word	0x40010000

080046f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b087      	sub	sp, #28
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a1b      	ldr	r3, [r3, #32]
 8004712:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	69db      	ldr	r3, [r3, #28]
 800471e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004726:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f023 0303 	bic.w	r3, r3, #3
 800472e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68fa      	ldr	r2, [r7, #12]
 8004736:	4313      	orrs	r3, r2
 8004738:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004740:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	021b      	lsls	r3, r3, #8
 8004748:	697a      	ldr	r2, [r7, #20]
 800474a:	4313      	orrs	r3, r2
 800474c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a1d      	ldr	r2, [pc, #116]	@ (80047c8 <TIM_OC3_SetConfig+0xd0>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d10d      	bne.n	8004772 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800475c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	021b      	lsls	r3, r3, #8
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	4313      	orrs	r3, r2
 8004768:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004770:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a14      	ldr	r2, [pc, #80]	@ (80047c8 <TIM_OC3_SetConfig+0xd0>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d113      	bne.n	80047a2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004780:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004788:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	011b      	lsls	r3, r3, #4
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	4313      	orrs	r3, r2
 8004794:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	011b      	lsls	r3, r3, #4
 800479c:	693a      	ldr	r2, [r7, #16]
 800479e:	4313      	orrs	r3, r2
 80047a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	685a      	ldr	r2, [r3, #4]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	697a      	ldr	r2, [r7, #20]
 80047ba:	621a      	str	r2, [r3, #32]
}
 80047bc:	bf00      	nop
 80047be:	371c      	adds	r7, #28
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr
 80047c8:	40010000 	.word	0x40010000

080047cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b087      	sub	sp, #28
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	69db      	ldr	r3, [r3, #28]
 80047f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004802:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	021b      	lsls	r3, r3, #8
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	4313      	orrs	r3, r2
 800480e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004816:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	031b      	lsls	r3, r3, #12
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	4313      	orrs	r3, r2
 8004822:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a10      	ldr	r2, [pc, #64]	@ (8004868 <TIM_OC4_SetConfig+0x9c>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d109      	bne.n	8004840 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004832:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	695b      	ldr	r3, [r3, #20]
 8004838:	019b      	lsls	r3, r3, #6
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	4313      	orrs	r3, r2
 800483e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	685a      	ldr	r2, [r3, #4]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	621a      	str	r2, [r3, #32]
}
 800485a:	bf00      	nop
 800485c:	371c      	adds	r7, #28
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	40010000 	.word	0x40010000

0800486c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800486c:	b480      	push	{r7}
 800486e:	b087      	sub	sp, #28
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6a1b      	ldr	r3, [r3, #32]
 800487c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6a1b      	ldr	r3, [r3, #32]
 8004882:	f023 0201 	bic.w	r2, r3, #1
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004896:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	011b      	lsls	r3, r3, #4
 800489c:	693a      	ldr	r2, [r7, #16]
 800489e:	4313      	orrs	r3, r2
 80048a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	f023 030a 	bic.w	r3, r3, #10
 80048a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048aa:	697a      	ldr	r2, [r7, #20]
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	693a      	ldr	r2, [r7, #16]
 80048b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	697a      	ldr	r2, [r7, #20]
 80048bc:	621a      	str	r2, [r3, #32]
}
 80048be:	bf00      	nop
 80048c0:	371c      	adds	r7, #28
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr

080048ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048ca:	b480      	push	{r7}
 80048cc:	b087      	sub	sp, #28
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	60f8      	str	r0, [r7, #12]
 80048d2:	60b9      	str	r1, [r7, #8]
 80048d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	f023 0210 	bic.w	r2, r3, #16
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6a1b      	ldr	r3, [r3, #32]
 80048ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80048f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	031b      	lsls	r3, r3, #12
 80048fa:	697a      	ldr	r2, [r7, #20]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004906:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	011b      	lsls	r3, r3, #4
 800490c:	693a      	ldr	r2, [r7, #16]
 800490e:	4313      	orrs	r3, r2
 8004910:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	697a      	ldr	r2, [r7, #20]
 8004916:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	621a      	str	r2, [r3, #32]
}
 800491e:	bf00      	nop
 8004920:	371c      	adds	r7, #28
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr

0800492a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800492a:	b480      	push	{r7}
 800492c:	b085      	sub	sp, #20
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
 8004932:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004940:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004942:	683a      	ldr	r2, [r7, #0]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	4313      	orrs	r3, r2
 8004948:	f043 0307 	orr.w	r3, r3, #7
 800494c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	609a      	str	r2, [r3, #8]
}
 8004954:	bf00      	nop
 8004956:	3714      	adds	r7, #20
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004960:	b480      	push	{r7}
 8004962:	b087      	sub	sp, #28
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
 800496c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800497a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	021a      	lsls	r2, r3, #8
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	431a      	orrs	r2, r3
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	4313      	orrs	r3, r2
 8004988:	697a      	ldr	r2, [r7, #20]
 800498a:	4313      	orrs	r3, r2
 800498c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	697a      	ldr	r2, [r7, #20]
 8004992:	609a      	str	r2, [r3, #8]
}
 8004994:	bf00      	nop
 8004996:	371c      	adds	r7, #28
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d101      	bne.n	80049b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049b4:	2302      	movs	r3, #2
 80049b6:	e050      	b.n	8004a5a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2202      	movs	r2, #2
 80049c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a1c      	ldr	r2, [pc, #112]	@ (8004a68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d018      	beq.n	8004a2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a04:	d013      	beq.n	8004a2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a18      	ldr	r2, [pc, #96]	@ (8004a6c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d00e      	beq.n	8004a2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a16      	ldr	r2, [pc, #88]	@ (8004a70 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d009      	beq.n	8004a2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a15      	ldr	r2, [pc, #84]	@ (8004a74 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d004      	beq.n	8004a2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a13      	ldr	r2, [pc, #76]	@ (8004a78 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d10c      	bne.n	8004a48 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68ba      	ldr	r2, [r7, #8]
 8004a46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3714      	adds	r7, #20
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	40010000 	.word	0x40010000
 8004a6c:	40000400 	.word	0x40000400
 8004a70:	40000800 	.word	0x40000800
 8004a74:	40000c00 	.word	0x40000c00
 8004a78:	40014000 	.word	0x40014000

08004a7c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004a86:	2300      	movs	r3, #0
 8004a88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d101      	bne.n	8004a98 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004a94:	2302      	movs	r3, #2
 8004a96:	e03d      	b.n	8004b14 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	69db      	ldr	r3, [r3, #28]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3714      	adds	r7, #20
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d101      	bne.n	8004b5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e03f      	b.n	8004bda <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d106      	bne.n	8004b74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7fc fe82 	bl	8001878 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2224      	movs	r2, #36	@ 0x24
 8004b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68da      	ldr	r2, [r3, #12]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 f929 	bl	8004de4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	691a      	ldr	r2, [r3, #16]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ba0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	695a      	ldr	r2, [r3, #20]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004bb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68da      	ldr	r2, [r3, #12]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004bc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2220      	movs	r2, #32
 8004bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2220      	movs	r2, #32
 8004bd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3708      	adds	r7, #8
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b08a      	sub	sp, #40	@ 0x28
 8004be6:	af02      	add	r7, sp, #8
 8004be8:	60f8      	str	r0, [r7, #12]
 8004bea:	60b9      	str	r1, [r7, #8]
 8004bec:	603b      	str	r3, [r7, #0]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	2b20      	cmp	r3, #32
 8004c00:	d17c      	bne.n	8004cfc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d002      	beq.n	8004c0e <HAL_UART_Transmit+0x2c>
 8004c08:	88fb      	ldrh	r3, [r7, #6]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d101      	bne.n	8004c12 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e075      	b.n	8004cfe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d101      	bne.n	8004c20 <HAL_UART_Transmit+0x3e>
 8004c1c:	2302      	movs	r3, #2
 8004c1e:	e06e      	b.n	8004cfe <HAL_UART_Transmit+0x11c>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2221      	movs	r2, #33	@ 0x21
 8004c32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c36:	f7fd f81d 	bl	8001c74 <HAL_GetTick>
 8004c3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	88fa      	ldrh	r2, [r7, #6]
 8004c40:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	88fa      	ldrh	r2, [r7, #6]
 8004c46:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c50:	d108      	bne.n	8004c64 <HAL_UART_Transmit+0x82>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d104      	bne.n	8004c64 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	61bb      	str	r3, [r7, #24]
 8004c62:	e003      	b.n	8004c6c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8004c74:	e02a      	b.n	8004ccc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	9300      	str	r3, [sp, #0]
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	2180      	movs	r1, #128	@ 0x80
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f000 f840 	bl	8004d06 <UART_WaitOnFlagUntilTimeout>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d001      	beq.n	8004c90 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e036      	b.n	8004cfe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d10b      	bne.n	8004cae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	881b      	ldrh	r3, [r3, #0]
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ca4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	3302      	adds	r3, #2
 8004caa:	61bb      	str	r3, [r7, #24]
 8004cac:	e007      	b.n	8004cbe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	781a      	ldrb	r2, [r3, #0]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	3301      	adds	r3, #1
 8004cbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1cf      	bne.n	8004c76 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	9300      	str	r3, [sp, #0]
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	2140      	movs	r1, #64	@ 0x40
 8004ce0:	68f8      	ldr	r0, [r7, #12]
 8004ce2:	f000 f810 	bl	8004d06 <UART_WaitOnFlagUntilTimeout>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d001      	beq.n	8004cf0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e006      	b.n	8004cfe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2220      	movs	r2, #32
 8004cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	e000      	b.n	8004cfe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004cfc:	2302      	movs	r3, #2
  }
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3720      	adds	r7, #32
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b090      	sub	sp, #64	@ 0x40
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	60f8      	str	r0, [r7, #12]
 8004d0e:	60b9      	str	r1, [r7, #8]
 8004d10:	603b      	str	r3, [r7, #0]
 8004d12:	4613      	mov	r3, r2
 8004d14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d16:	e050      	b.n	8004dba <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d1e:	d04c      	beq.n	8004dba <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004d20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d007      	beq.n	8004d36 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d26:	f7fc ffa5 	bl	8001c74 <HAL_GetTick>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d241      	bcs.n	8004dba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	330c      	adds	r3, #12
 8004d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d40:	e853 3f00 	ldrex	r3, [r3]
 8004d44:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d48:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	330c      	adds	r3, #12
 8004d54:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004d56:	637a      	str	r2, [r7, #52]	@ 0x34
 8004d58:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004d5c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004d5e:	e841 2300 	strex	r3, r2, [r1]
 8004d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1e5      	bne.n	8004d36 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	3314      	adds	r3, #20
 8004d70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	e853 3f00 	ldrex	r3, [r3]
 8004d78:	613b      	str	r3, [r7, #16]
   return(result);
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	f023 0301 	bic.w	r3, r3, #1
 8004d80:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	3314      	adds	r3, #20
 8004d88:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004d8a:	623a      	str	r2, [r7, #32]
 8004d8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8e:	69f9      	ldr	r1, [r7, #28]
 8004d90:	6a3a      	ldr	r2, [r7, #32]
 8004d92:	e841 2300 	strex	r3, r2, [r1]
 8004d96:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1e5      	bne.n	8004d6a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2220      	movs	r2, #32
 8004da2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2220      	movs	r2, #32
 8004daa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e00f      	b.n	8004dda <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	bf0c      	ite	eq
 8004dca:	2301      	moveq	r3, #1
 8004dcc:	2300      	movne	r3, #0
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	79fb      	ldrb	r3, [r7, #7]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d09f      	beq.n	8004d18 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3740      	adds	r7, #64	@ 0x40
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
	...

08004de4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004de8:	b0c0      	sub	sp, #256	@ 0x100
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e00:	68d9      	ldr	r1, [r3, #12]
 8004e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	ea40 0301 	orr.w	r3, r0, r1
 8004e0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e12:	689a      	ldr	r2, [r3, #8]
 8004e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	431a      	orrs	r2, r3
 8004e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	431a      	orrs	r2, r3
 8004e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e28:	69db      	ldr	r3, [r3, #28]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004e3c:	f021 010c 	bic.w	r1, r1, #12
 8004e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004e4a:	430b      	orrs	r3, r1
 8004e4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	695b      	ldr	r3, [r3, #20]
 8004e56:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e5e:	6999      	ldr	r1, [r3, #24]
 8004e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	ea40 0301 	orr.w	r3, r0, r1
 8004e6a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	4b8f      	ldr	r3, [pc, #572]	@ (80050b0 <UART_SetConfig+0x2cc>)
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d005      	beq.n	8004e84 <UART_SetConfig+0xa0>
 8004e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	4b8d      	ldr	r3, [pc, #564]	@ (80050b4 <UART_SetConfig+0x2d0>)
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d104      	bne.n	8004e8e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e84:	f7fe feb2 	bl	8003bec <HAL_RCC_GetPCLK2Freq>
 8004e88:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004e8c:	e003      	b.n	8004e96 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e8e:	f7fe fe99 	bl	8003bc4 <HAL_RCC_GetPCLK1Freq>
 8004e92:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e9a:	69db      	ldr	r3, [r3, #28]
 8004e9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ea0:	f040 810c 	bne.w	80050bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ea4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004eae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004eb2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004eb6:	4622      	mov	r2, r4
 8004eb8:	462b      	mov	r3, r5
 8004eba:	1891      	adds	r1, r2, r2
 8004ebc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004ebe:	415b      	adcs	r3, r3
 8004ec0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ec2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004ec6:	4621      	mov	r1, r4
 8004ec8:	eb12 0801 	adds.w	r8, r2, r1
 8004ecc:	4629      	mov	r1, r5
 8004ece:	eb43 0901 	adc.w	r9, r3, r1
 8004ed2:	f04f 0200 	mov.w	r2, #0
 8004ed6:	f04f 0300 	mov.w	r3, #0
 8004eda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ede:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ee2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ee6:	4690      	mov	r8, r2
 8004ee8:	4699      	mov	r9, r3
 8004eea:	4623      	mov	r3, r4
 8004eec:	eb18 0303 	adds.w	r3, r8, r3
 8004ef0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004ef4:	462b      	mov	r3, r5
 8004ef6:	eb49 0303 	adc.w	r3, r9, r3
 8004efa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004f0a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004f0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004f12:	460b      	mov	r3, r1
 8004f14:	18db      	adds	r3, r3, r3
 8004f16:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f18:	4613      	mov	r3, r2
 8004f1a:	eb42 0303 	adc.w	r3, r2, r3
 8004f1e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004f24:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004f28:	f7fb fe96 	bl	8000c58 <__aeabi_uldivmod>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	460b      	mov	r3, r1
 8004f30:	4b61      	ldr	r3, [pc, #388]	@ (80050b8 <UART_SetConfig+0x2d4>)
 8004f32:	fba3 2302 	umull	r2, r3, r3, r2
 8004f36:	095b      	lsrs	r3, r3, #5
 8004f38:	011c      	lsls	r4, r3, #4
 8004f3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f44:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004f48:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004f4c:	4642      	mov	r2, r8
 8004f4e:	464b      	mov	r3, r9
 8004f50:	1891      	adds	r1, r2, r2
 8004f52:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004f54:	415b      	adcs	r3, r3
 8004f56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004f5c:	4641      	mov	r1, r8
 8004f5e:	eb12 0a01 	adds.w	sl, r2, r1
 8004f62:	4649      	mov	r1, r9
 8004f64:	eb43 0b01 	adc.w	fp, r3, r1
 8004f68:	f04f 0200 	mov.w	r2, #0
 8004f6c:	f04f 0300 	mov.w	r3, #0
 8004f70:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f74:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f7c:	4692      	mov	sl, r2
 8004f7e:	469b      	mov	fp, r3
 8004f80:	4643      	mov	r3, r8
 8004f82:	eb1a 0303 	adds.w	r3, sl, r3
 8004f86:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f8a:	464b      	mov	r3, r9
 8004f8c:	eb4b 0303 	adc.w	r3, fp, r3
 8004f90:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004fa0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004fa4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004fa8:	460b      	mov	r3, r1
 8004faa:	18db      	adds	r3, r3, r3
 8004fac:	643b      	str	r3, [r7, #64]	@ 0x40
 8004fae:	4613      	mov	r3, r2
 8004fb0:	eb42 0303 	adc.w	r3, r2, r3
 8004fb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fb6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004fba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004fbe:	f7fb fe4b 	bl	8000c58 <__aeabi_uldivmod>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	4611      	mov	r1, r2
 8004fc8:	4b3b      	ldr	r3, [pc, #236]	@ (80050b8 <UART_SetConfig+0x2d4>)
 8004fca:	fba3 2301 	umull	r2, r3, r3, r1
 8004fce:	095b      	lsrs	r3, r3, #5
 8004fd0:	2264      	movs	r2, #100	@ 0x64
 8004fd2:	fb02 f303 	mul.w	r3, r2, r3
 8004fd6:	1acb      	subs	r3, r1, r3
 8004fd8:	00db      	lsls	r3, r3, #3
 8004fda:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004fde:	4b36      	ldr	r3, [pc, #216]	@ (80050b8 <UART_SetConfig+0x2d4>)
 8004fe0:	fba3 2302 	umull	r2, r3, r3, r2
 8004fe4:	095b      	lsrs	r3, r3, #5
 8004fe6:	005b      	lsls	r3, r3, #1
 8004fe8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004fec:	441c      	add	r4, r3
 8004fee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ff8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004ffc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005000:	4642      	mov	r2, r8
 8005002:	464b      	mov	r3, r9
 8005004:	1891      	adds	r1, r2, r2
 8005006:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005008:	415b      	adcs	r3, r3
 800500a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800500c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005010:	4641      	mov	r1, r8
 8005012:	1851      	adds	r1, r2, r1
 8005014:	6339      	str	r1, [r7, #48]	@ 0x30
 8005016:	4649      	mov	r1, r9
 8005018:	414b      	adcs	r3, r1
 800501a:	637b      	str	r3, [r7, #52]	@ 0x34
 800501c:	f04f 0200 	mov.w	r2, #0
 8005020:	f04f 0300 	mov.w	r3, #0
 8005024:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005028:	4659      	mov	r1, fp
 800502a:	00cb      	lsls	r3, r1, #3
 800502c:	4651      	mov	r1, sl
 800502e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005032:	4651      	mov	r1, sl
 8005034:	00ca      	lsls	r2, r1, #3
 8005036:	4610      	mov	r0, r2
 8005038:	4619      	mov	r1, r3
 800503a:	4603      	mov	r3, r0
 800503c:	4642      	mov	r2, r8
 800503e:	189b      	adds	r3, r3, r2
 8005040:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005044:	464b      	mov	r3, r9
 8005046:	460a      	mov	r2, r1
 8005048:	eb42 0303 	adc.w	r3, r2, r3
 800504c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800505c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005060:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005064:	460b      	mov	r3, r1
 8005066:	18db      	adds	r3, r3, r3
 8005068:	62bb      	str	r3, [r7, #40]	@ 0x28
 800506a:	4613      	mov	r3, r2
 800506c:	eb42 0303 	adc.w	r3, r2, r3
 8005070:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005072:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005076:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800507a:	f7fb fded 	bl	8000c58 <__aeabi_uldivmod>
 800507e:	4602      	mov	r2, r0
 8005080:	460b      	mov	r3, r1
 8005082:	4b0d      	ldr	r3, [pc, #52]	@ (80050b8 <UART_SetConfig+0x2d4>)
 8005084:	fba3 1302 	umull	r1, r3, r3, r2
 8005088:	095b      	lsrs	r3, r3, #5
 800508a:	2164      	movs	r1, #100	@ 0x64
 800508c:	fb01 f303 	mul.w	r3, r1, r3
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	00db      	lsls	r3, r3, #3
 8005094:	3332      	adds	r3, #50	@ 0x32
 8005096:	4a08      	ldr	r2, [pc, #32]	@ (80050b8 <UART_SetConfig+0x2d4>)
 8005098:	fba2 2303 	umull	r2, r3, r2, r3
 800509c:	095b      	lsrs	r3, r3, #5
 800509e:	f003 0207 	and.w	r2, r3, #7
 80050a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4422      	add	r2, r4
 80050aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80050ac:	e106      	b.n	80052bc <UART_SetConfig+0x4d8>
 80050ae:	bf00      	nop
 80050b0:	40011000 	.word	0x40011000
 80050b4:	40011400 	.word	0x40011400
 80050b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050c0:	2200      	movs	r2, #0
 80050c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80050c6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80050ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80050ce:	4642      	mov	r2, r8
 80050d0:	464b      	mov	r3, r9
 80050d2:	1891      	adds	r1, r2, r2
 80050d4:	6239      	str	r1, [r7, #32]
 80050d6:	415b      	adcs	r3, r3
 80050d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80050da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050de:	4641      	mov	r1, r8
 80050e0:	1854      	adds	r4, r2, r1
 80050e2:	4649      	mov	r1, r9
 80050e4:	eb43 0501 	adc.w	r5, r3, r1
 80050e8:	f04f 0200 	mov.w	r2, #0
 80050ec:	f04f 0300 	mov.w	r3, #0
 80050f0:	00eb      	lsls	r3, r5, #3
 80050f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050f6:	00e2      	lsls	r2, r4, #3
 80050f8:	4614      	mov	r4, r2
 80050fa:	461d      	mov	r5, r3
 80050fc:	4643      	mov	r3, r8
 80050fe:	18e3      	adds	r3, r4, r3
 8005100:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005104:	464b      	mov	r3, r9
 8005106:	eb45 0303 	adc.w	r3, r5, r3
 800510a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800510e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800511a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800511e:	f04f 0200 	mov.w	r2, #0
 8005122:	f04f 0300 	mov.w	r3, #0
 8005126:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800512a:	4629      	mov	r1, r5
 800512c:	008b      	lsls	r3, r1, #2
 800512e:	4621      	mov	r1, r4
 8005130:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005134:	4621      	mov	r1, r4
 8005136:	008a      	lsls	r2, r1, #2
 8005138:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800513c:	f7fb fd8c 	bl	8000c58 <__aeabi_uldivmod>
 8005140:	4602      	mov	r2, r0
 8005142:	460b      	mov	r3, r1
 8005144:	4b60      	ldr	r3, [pc, #384]	@ (80052c8 <UART_SetConfig+0x4e4>)
 8005146:	fba3 2302 	umull	r2, r3, r3, r2
 800514a:	095b      	lsrs	r3, r3, #5
 800514c:	011c      	lsls	r4, r3, #4
 800514e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005152:	2200      	movs	r2, #0
 8005154:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005158:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800515c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005160:	4642      	mov	r2, r8
 8005162:	464b      	mov	r3, r9
 8005164:	1891      	adds	r1, r2, r2
 8005166:	61b9      	str	r1, [r7, #24]
 8005168:	415b      	adcs	r3, r3
 800516a:	61fb      	str	r3, [r7, #28]
 800516c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005170:	4641      	mov	r1, r8
 8005172:	1851      	adds	r1, r2, r1
 8005174:	6139      	str	r1, [r7, #16]
 8005176:	4649      	mov	r1, r9
 8005178:	414b      	adcs	r3, r1
 800517a:	617b      	str	r3, [r7, #20]
 800517c:	f04f 0200 	mov.w	r2, #0
 8005180:	f04f 0300 	mov.w	r3, #0
 8005184:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005188:	4659      	mov	r1, fp
 800518a:	00cb      	lsls	r3, r1, #3
 800518c:	4651      	mov	r1, sl
 800518e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005192:	4651      	mov	r1, sl
 8005194:	00ca      	lsls	r2, r1, #3
 8005196:	4610      	mov	r0, r2
 8005198:	4619      	mov	r1, r3
 800519a:	4603      	mov	r3, r0
 800519c:	4642      	mov	r2, r8
 800519e:	189b      	adds	r3, r3, r2
 80051a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80051a4:	464b      	mov	r3, r9
 80051a6:	460a      	mov	r2, r1
 80051a8:	eb42 0303 	adc.w	r3, r2, r3
 80051ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80051b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80051ba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80051bc:	f04f 0200 	mov.w	r2, #0
 80051c0:	f04f 0300 	mov.w	r3, #0
 80051c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80051c8:	4649      	mov	r1, r9
 80051ca:	008b      	lsls	r3, r1, #2
 80051cc:	4641      	mov	r1, r8
 80051ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051d2:	4641      	mov	r1, r8
 80051d4:	008a      	lsls	r2, r1, #2
 80051d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80051da:	f7fb fd3d 	bl	8000c58 <__aeabi_uldivmod>
 80051de:	4602      	mov	r2, r0
 80051e0:	460b      	mov	r3, r1
 80051e2:	4611      	mov	r1, r2
 80051e4:	4b38      	ldr	r3, [pc, #224]	@ (80052c8 <UART_SetConfig+0x4e4>)
 80051e6:	fba3 2301 	umull	r2, r3, r3, r1
 80051ea:	095b      	lsrs	r3, r3, #5
 80051ec:	2264      	movs	r2, #100	@ 0x64
 80051ee:	fb02 f303 	mul.w	r3, r2, r3
 80051f2:	1acb      	subs	r3, r1, r3
 80051f4:	011b      	lsls	r3, r3, #4
 80051f6:	3332      	adds	r3, #50	@ 0x32
 80051f8:	4a33      	ldr	r2, [pc, #204]	@ (80052c8 <UART_SetConfig+0x4e4>)
 80051fa:	fba2 2303 	umull	r2, r3, r2, r3
 80051fe:	095b      	lsrs	r3, r3, #5
 8005200:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005204:	441c      	add	r4, r3
 8005206:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800520a:	2200      	movs	r2, #0
 800520c:	673b      	str	r3, [r7, #112]	@ 0x70
 800520e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005210:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005214:	4642      	mov	r2, r8
 8005216:	464b      	mov	r3, r9
 8005218:	1891      	adds	r1, r2, r2
 800521a:	60b9      	str	r1, [r7, #8]
 800521c:	415b      	adcs	r3, r3
 800521e:	60fb      	str	r3, [r7, #12]
 8005220:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005224:	4641      	mov	r1, r8
 8005226:	1851      	adds	r1, r2, r1
 8005228:	6039      	str	r1, [r7, #0]
 800522a:	4649      	mov	r1, r9
 800522c:	414b      	adcs	r3, r1
 800522e:	607b      	str	r3, [r7, #4]
 8005230:	f04f 0200 	mov.w	r2, #0
 8005234:	f04f 0300 	mov.w	r3, #0
 8005238:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800523c:	4659      	mov	r1, fp
 800523e:	00cb      	lsls	r3, r1, #3
 8005240:	4651      	mov	r1, sl
 8005242:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005246:	4651      	mov	r1, sl
 8005248:	00ca      	lsls	r2, r1, #3
 800524a:	4610      	mov	r0, r2
 800524c:	4619      	mov	r1, r3
 800524e:	4603      	mov	r3, r0
 8005250:	4642      	mov	r2, r8
 8005252:	189b      	adds	r3, r3, r2
 8005254:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005256:	464b      	mov	r3, r9
 8005258:	460a      	mov	r2, r1
 800525a:	eb42 0303 	adc.w	r3, r2, r3
 800525e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	663b      	str	r3, [r7, #96]	@ 0x60
 800526a:	667a      	str	r2, [r7, #100]	@ 0x64
 800526c:	f04f 0200 	mov.w	r2, #0
 8005270:	f04f 0300 	mov.w	r3, #0
 8005274:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005278:	4649      	mov	r1, r9
 800527a:	008b      	lsls	r3, r1, #2
 800527c:	4641      	mov	r1, r8
 800527e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005282:	4641      	mov	r1, r8
 8005284:	008a      	lsls	r2, r1, #2
 8005286:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800528a:	f7fb fce5 	bl	8000c58 <__aeabi_uldivmod>
 800528e:	4602      	mov	r2, r0
 8005290:	460b      	mov	r3, r1
 8005292:	4b0d      	ldr	r3, [pc, #52]	@ (80052c8 <UART_SetConfig+0x4e4>)
 8005294:	fba3 1302 	umull	r1, r3, r3, r2
 8005298:	095b      	lsrs	r3, r3, #5
 800529a:	2164      	movs	r1, #100	@ 0x64
 800529c:	fb01 f303 	mul.w	r3, r1, r3
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	011b      	lsls	r3, r3, #4
 80052a4:	3332      	adds	r3, #50	@ 0x32
 80052a6:	4a08      	ldr	r2, [pc, #32]	@ (80052c8 <UART_SetConfig+0x4e4>)
 80052a8:	fba2 2303 	umull	r2, r3, r2, r3
 80052ac:	095b      	lsrs	r3, r3, #5
 80052ae:	f003 020f 	and.w	r2, r3, #15
 80052b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4422      	add	r2, r4
 80052ba:	609a      	str	r2, [r3, #8]
}
 80052bc:	bf00      	nop
 80052be:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80052c2:	46bd      	mov	sp, r7
 80052c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052c8:	51eb851f 	.word	0x51eb851f

080052cc <__cvt>:
 80052cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052d0:	ec57 6b10 	vmov	r6, r7, d0
 80052d4:	2f00      	cmp	r7, #0
 80052d6:	460c      	mov	r4, r1
 80052d8:	4619      	mov	r1, r3
 80052da:	463b      	mov	r3, r7
 80052dc:	bfbb      	ittet	lt
 80052de:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80052e2:	461f      	movlt	r7, r3
 80052e4:	2300      	movge	r3, #0
 80052e6:	232d      	movlt	r3, #45	@ 0x2d
 80052e8:	700b      	strb	r3, [r1, #0]
 80052ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80052ec:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80052f0:	4691      	mov	r9, r2
 80052f2:	f023 0820 	bic.w	r8, r3, #32
 80052f6:	bfbc      	itt	lt
 80052f8:	4632      	movlt	r2, r6
 80052fa:	4616      	movlt	r6, r2
 80052fc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005300:	d005      	beq.n	800530e <__cvt+0x42>
 8005302:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005306:	d100      	bne.n	800530a <__cvt+0x3e>
 8005308:	3401      	adds	r4, #1
 800530a:	2102      	movs	r1, #2
 800530c:	e000      	b.n	8005310 <__cvt+0x44>
 800530e:	2103      	movs	r1, #3
 8005310:	ab03      	add	r3, sp, #12
 8005312:	9301      	str	r3, [sp, #4]
 8005314:	ab02      	add	r3, sp, #8
 8005316:	9300      	str	r3, [sp, #0]
 8005318:	ec47 6b10 	vmov	d0, r6, r7
 800531c:	4653      	mov	r3, sl
 800531e:	4622      	mov	r2, r4
 8005320:	f000 fe5a 	bl	8005fd8 <_dtoa_r>
 8005324:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005328:	4605      	mov	r5, r0
 800532a:	d119      	bne.n	8005360 <__cvt+0x94>
 800532c:	f019 0f01 	tst.w	r9, #1
 8005330:	d00e      	beq.n	8005350 <__cvt+0x84>
 8005332:	eb00 0904 	add.w	r9, r0, r4
 8005336:	2200      	movs	r2, #0
 8005338:	2300      	movs	r3, #0
 800533a:	4630      	mov	r0, r6
 800533c:	4639      	mov	r1, r7
 800533e:	f7fb fbcb 	bl	8000ad8 <__aeabi_dcmpeq>
 8005342:	b108      	cbz	r0, 8005348 <__cvt+0x7c>
 8005344:	f8cd 900c 	str.w	r9, [sp, #12]
 8005348:	2230      	movs	r2, #48	@ 0x30
 800534a:	9b03      	ldr	r3, [sp, #12]
 800534c:	454b      	cmp	r3, r9
 800534e:	d31e      	bcc.n	800538e <__cvt+0xc2>
 8005350:	9b03      	ldr	r3, [sp, #12]
 8005352:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005354:	1b5b      	subs	r3, r3, r5
 8005356:	4628      	mov	r0, r5
 8005358:	6013      	str	r3, [r2, #0]
 800535a:	b004      	add	sp, #16
 800535c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005360:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005364:	eb00 0904 	add.w	r9, r0, r4
 8005368:	d1e5      	bne.n	8005336 <__cvt+0x6a>
 800536a:	7803      	ldrb	r3, [r0, #0]
 800536c:	2b30      	cmp	r3, #48	@ 0x30
 800536e:	d10a      	bne.n	8005386 <__cvt+0xba>
 8005370:	2200      	movs	r2, #0
 8005372:	2300      	movs	r3, #0
 8005374:	4630      	mov	r0, r6
 8005376:	4639      	mov	r1, r7
 8005378:	f7fb fbae 	bl	8000ad8 <__aeabi_dcmpeq>
 800537c:	b918      	cbnz	r0, 8005386 <__cvt+0xba>
 800537e:	f1c4 0401 	rsb	r4, r4, #1
 8005382:	f8ca 4000 	str.w	r4, [sl]
 8005386:	f8da 3000 	ldr.w	r3, [sl]
 800538a:	4499      	add	r9, r3
 800538c:	e7d3      	b.n	8005336 <__cvt+0x6a>
 800538e:	1c59      	adds	r1, r3, #1
 8005390:	9103      	str	r1, [sp, #12]
 8005392:	701a      	strb	r2, [r3, #0]
 8005394:	e7d9      	b.n	800534a <__cvt+0x7e>

08005396 <__exponent>:
 8005396:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005398:	2900      	cmp	r1, #0
 800539a:	bfba      	itte	lt
 800539c:	4249      	neglt	r1, r1
 800539e:	232d      	movlt	r3, #45	@ 0x2d
 80053a0:	232b      	movge	r3, #43	@ 0x2b
 80053a2:	2909      	cmp	r1, #9
 80053a4:	7002      	strb	r2, [r0, #0]
 80053a6:	7043      	strb	r3, [r0, #1]
 80053a8:	dd29      	ble.n	80053fe <__exponent+0x68>
 80053aa:	f10d 0307 	add.w	r3, sp, #7
 80053ae:	461d      	mov	r5, r3
 80053b0:	270a      	movs	r7, #10
 80053b2:	461a      	mov	r2, r3
 80053b4:	fbb1 f6f7 	udiv	r6, r1, r7
 80053b8:	fb07 1416 	mls	r4, r7, r6, r1
 80053bc:	3430      	adds	r4, #48	@ 0x30
 80053be:	f802 4c01 	strb.w	r4, [r2, #-1]
 80053c2:	460c      	mov	r4, r1
 80053c4:	2c63      	cmp	r4, #99	@ 0x63
 80053c6:	f103 33ff 	add.w	r3, r3, #4294967295
 80053ca:	4631      	mov	r1, r6
 80053cc:	dcf1      	bgt.n	80053b2 <__exponent+0x1c>
 80053ce:	3130      	adds	r1, #48	@ 0x30
 80053d0:	1e94      	subs	r4, r2, #2
 80053d2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80053d6:	1c41      	adds	r1, r0, #1
 80053d8:	4623      	mov	r3, r4
 80053da:	42ab      	cmp	r3, r5
 80053dc:	d30a      	bcc.n	80053f4 <__exponent+0x5e>
 80053de:	f10d 0309 	add.w	r3, sp, #9
 80053e2:	1a9b      	subs	r3, r3, r2
 80053e4:	42ac      	cmp	r4, r5
 80053e6:	bf88      	it	hi
 80053e8:	2300      	movhi	r3, #0
 80053ea:	3302      	adds	r3, #2
 80053ec:	4403      	add	r3, r0
 80053ee:	1a18      	subs	r0, r3, r0
 80053f0:	b003      	add	sp, #12
 80053f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053f4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80053f8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80053fc:	e7ed      	b.n	80053da <__exponent+0x44>
 80053fe:	2330      	movs	r3, #48	@ 0x30
 8005400:	3130      	adds	r1, #48	@ 0x30
 8005402:	7083      	strb	r3, [r0, #2]
 8005404:	70c1      	strb	r1, [r0, #3]
 8005406:	1d03      	adds	r3, r0, #4
 8005408:	e7f1      	b.n	80053ee <__exponent+0x58>
	...

0800540c <_printf_float>:
 800540c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005410:	b08d      	sub	sp, #52	@ 0x34
 8005412:	460c      	mov	r4, r1
 8005414:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005418:	4616      	mov	r6, r2
 800541a:	461f      	mov	r7, r3
 800541c:	4605      	mov	r5, r0
 800541e:	f000 fcdb 	bl	8005dd8 <_localeconv_r>
 8005422:	6803      	ldr	r3, [r0, #0]
 8005424:	9304      	str	r3, [sp, #16]
 8005426:	4618      	mov	r0, r3
 8005428:	f7fa ff2a 	bl	8000280 <strlen>
 800542c:	2300      	movs	r3, #0
 800542e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005430:	f8d8 3000 	ldr.w	r3, [r8]
 8005434:	9005      	str	r0, [sp, #20]
 8005436:	3307      	adds	r3, #7
 8005438:	f023 0307 	bic.w	r3, r3, #7
 800543c:	f103 0208 	add.w	r2, r3, #8
 8005440:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005444:	f8d4 b000 	ldr.w	fp, [r4]
 8005448:	f8c8 2000 	str.w	r2, [r8]
 800544c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005450:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005454:	9307      	str	r3, [sp, #28]
 8005456:	f8cd 8018 	str.w	r8, [sp, #24]
 800545a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800545e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005462:	4b9c      	ldr	r3, [pc, #624]	@ (80056d4 <_printf_float+0x2c8>)
 8005464:	f04f 32ff 	mov.w	r2, #4294967295
 8005468:	f7fb fb68 	bl	8000b3c <__aeabi_dcmpun>
 800546c:	bb70      	cbnz	r0, 80054cc <_printf_float+0xc0>
 800546e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005472:	4b98      	ldr	r3, [pc, #608]	@ (80056d4 <_printf_float+0x2c8>)
 8005474:	f04f 32ff 	mov.w	r2, #4294967295
 8005478:	f7fb fb42 	bl	8000b00 <__aeabi_dcmple>
 800547c:	bb30      	cbnz	r0, 80054cc <_printf_float+0xc0>
 800547e:	2200      	movs	r2, #0
 8005480:	2300      	movs	r3, #0
 8005482:	4640      	mov	r0, r8
 8005484:	4649      	mov	r1, r9
 8005486:	f7fb fb31 	bl	8000aec <__aeabi_dcmplt>
 800548a:	b110      	cbz	r0, 8005492 <_printf_float+0x86>
 800548c:	232d      	movs	r3, #45	@ 0x2d
 800548e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005492:	4a91      	ldr	r2, [pc, #580]	@ (80056d8 <_printf_float+0x2cc>)
 8005494:	4b91      	ldr	r3, [pc, #580]	@ (80056dc <_printf_float+0x2d0>)
 8005496:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800549a:	bf94      	ite	ls
 800549c:	4690      	movls	r8, r2
 800549e:	4698      	movhi	r8, r3
 80054a0:	2303      	movs	r3, #3
 80054a2:	6123      	str	r3, [r4, #16]
 80054a4:	f02b 0304 	bic.w	r3, fp, #4
 80054a8:	6023      	str	r3, [r4, #0]
 80054aa:	f04f 0900 	mov.w	r9, #0
 80054ae:	9700      	str	r7, [sp, #0]
 80054b0:	4633      	mov	r3, r6
 80054b2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80054b4:	4621      	mov	r1, r4
 80054b6:	4628      	mov	r0, r5
 80054b8:	f000 f9d2 	bl	8005860 <_printf_common>
 80054bc:	3001      	adds	r0, #1
 80054be:	f040 808d 	bne.w	80055dc <_printf_float+0x1d0>
 80054c2:	f04f 30ff 	mov.w	r0, #4294967295
 80054c6:	b00d      	add	sp, #52	@ 0x34
 80054c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054cc:	4642      	mov	r2, r8
 80054ce:	464b      	mov	r3, r9
 80054d0:	4640      	mov	r0, r8
 80054d2:	4649      	mov	r1, r9
 80054d4:	f7fb fb32 	bl	8000b3c <__aeabi_dcmpun>
 80054d8:	b140      	cbz	r0, 80054ec <_printf_float+0xe0>
 80054da:	464b      	mov	r3, r9
 80054dc:	2b00      	cmp	r3, #0
 80054de:	bfbc      	itt	lt
 80054e0:	232d      	movlt	r3, #45	@ 0x2d
 80054e2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80054e6:	4a7e      	ldr	r2, [pc, #504]	@ (80056e0 <_printf_float+0x2d4>)
 80054e8:	4b7e      	ldr	r3, [pc, #504]	@ (80056e4 <_printf_float+0x2d8>)
 80054ea:	e7d4      	b.n	8005496 <_printf_float+0x8a>
 80054ec:	6863      	ldr	r3, [r4, #4]
 80054ee:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80054f2:	9206      	str	r2, [sp, #24]
 80054f4:	1c5a      	adds	r2, r3, #1
 80054f6:	d13b      	bne.n	8005570 <_printf_float+0x164>
 80054f8:	2306      	movs	r3, #6
 80054fa:	6063      	str	r3, [r4, #4]
 80054fc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005500:	2300      	movs	r3, #0
 8005502:	6022      	str	r2, [r4, #0]
 8005504:	9303      	str	r3, [sp, #12]
 8005506:	ab0a      	add	r3, sp, #40	@ 0x28
 8005508:	e9cd a301 	strd	sl, r3, [sp, #4]
 800550c:	ab09      	add	r3, sp, #36	@ 0x24
 800550e:	9300      	str	r3, [sp, #0]
 8005510:	6861      	ldr	r1, [r4, #4]
 8005512:	ec49 8b10 	vmov	d0, r8, r9
 8005516:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800551a:	4628      	mov	r0, r5
 800551c:	f7ff fed6 	bl	80052cc <__cvt>
 8005520:	9b06      	ldr	r3, [sp, #24]
 8005522:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005524:	2b47      	cmp	r3, #71	@ 0x47
 8005526:	4680      	mov	r8, r0
 8005528:	d129      	bne.n	800557e <_printf_float+0x172>
 800552a:	1cc8      	adds	r0, r1, #3
 800552c:	db02      	blt.n	8005534 <_printf_float+0x128>
 800552e:	6863      	ldr	r3, [r4, #4]
 8005530:	4299      	cmp	r1, r3
 8005532:	dd41      	ble.n	80055b8 <_printf_float+0x1ac>
 8005534:	f1aa 0a02 	sub.w	sl, sl, #2
 8005538:	fa5f fa8a 	uxtb.w	sl, sl
 800553c:	3901      	subs	r1, #1
 800553e:	4652      	mov	r2, sl
 8005540:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005544:	9109      	str	r1, [sp, #36]	@ 0x24
 8005546:	f7ff ff26 	bl	8005396 <__exponent>
 800554a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800554c:	1813      	adds	r3, r2, r0
 800554e:	2a01      	cmp	r2, #1
 8005550:	4681      	mov	r9, r0
 8005552:	6123      	str	r3, [r4, #16]
 8005554:	dc02      	bgt.n	800555c <_printf_float+0x150>
 8005556:	6822      	ldr	r2, [r4, #0]
 8005558:	07d2      	lsls	r2, r2, #31
 800555a:	d501      	bpl.n	8005560 <_printf_float+0x154>
 800555c:	3301      	adds	r3, #1
 800555e:	6123      	str	r3, [r4, #16]
 8005560:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005564:	2b00      	cmp	r3, #0
 8005566:	d0a2      	beq.n	80054ae <_printf_float+0xa2>
 8005568:	232d      	movs	r3, #45	@ 0x2d
 800556a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800556e:	e79e      	b.n	80054ae <_printf_float+0xa2>
 8005570:	9a06      	ldr	r2, [sp, #24]
 8005572:	2a47      	cmp	r2, #71	@ 0x47
 8005574:	d1c2      	bne.n	80054fc <_printf_float+0xf0>
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1c0      	bne.n	80054fc <_printf_float+0xf0>
 800557a:	2301      	movs	r3, #1
 800557c:	e7bd      	b.n	80054fa <_printf_float+0xee>
 800557e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005582:	d9db      	bls.n	800553c <_printf_float+0x130>
 8005584:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005588:	d118      	bne.n	80055bc <_printf_float+0x1b0>
 800558a:	2900      	cmp	r1, #0
 800558c:	6863      	ldr	r3, [r4, #4]
 800558e:	dd0b      	ble.n	80055a8 <_printf_float+0x19c>
 8005590:	6121      	str	r1, [r4, #16]
 8005592:	b913      	cbnz	r3, 800559a <_printf_float+0x18e>
 8005594:	6822      	ldr	r2, [r4, #0]
 8005596:	07d0      	lsls	r0, r2, #31
 8005598:	d502      	bpl.n	80055a0 <_printf_float+0x194>
 800559a:	3301      	adds	r3, #1
 800559c:	440b      	add	r3, r1
 800559e:	6123      	str	r3, [r4, #16]
 80055a0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80055a2:	f04f 0900 	mov.w	r9, #0
 80055a6:	e7db      	b.n	8005560 <_printf_float+0x154>
 80055a8:	b913      	cbnz	r3, 80055b0 <_printf_float+0x1a4>
 80055aa:	6822      	ldr	r2, [r4, #0]
 80055ac:	07d2      	lsls	r2, r2, #31
 80055ae:	d501      	bpl.n	80055b4 <_printf_float+0x1a8>
 80055b0:	3302      	adds	r3, #2
 80055b2:	e7f4      	b.n	800559e <_printf_float+0x192>
 80055b4:	2301      	movs	r3, #1
 80055b6:	e7f2      	b.n	800559e <_printf_float+0x192>
 80055b8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80055bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80055be:	4299      	cmp	r1, r3
 80055c0:	db05      	blt.n	80055ce <_printf_float+0x1c2>
 80055c2:	6823      	ldr	r3, [r4, #0]
 80055c4:	6121      	str	r1, [r4, #16]
 80055c6:	07d8      	lsls	r0, r3, #31
 80055c8:	d5ea      	bpl.n	80055a0 <_printf_float+0x194>
 80055ca:	1c4b      	adds	r3, r1, #1
 80055cc:	e7e7      	b.n	800559e <_printf_float+0x192>
 80055ce:	2900      	cmp	r1, #0
 80055d0:	bfd4      	ite	le
 80055d2:	f1c1 0202 	rsble	r2, r1, #2
 80055d6:	2201      	movgt	r2, #1
 80055d8:	4413      	add	r3, r2
 80055da:	e7e0      	b.n	800559e <_printf_float+0x192>
 80055dc:	6823      	ldr	r3, [r4, #0]
 80055de:	055a      	lsls	r2, r3, #21
 80055e0:	d407      	bmi.n	80055f2 <_printf_float+0x1e6>
 80055e2:	6923      	ldr	r3, [r4, #16]
 80055e4:	4642      	mov	r2, r8
 80055e6:	4631      	mov	r1, r6
 80055e8:	4628      	mov	r0, r5
 80055ea:	47b8      	blx	r7
 80055ec:	3001      	adds	r0, #1
 80055ee:	d12b      	bne.n	8005648 <_printf_float+0x23c>
 80055f0:	e767      	b.n	80054c2 <_printf_float+0xb6>
 80055f2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80055f6:	f240 80dd 	bls.w	80057b4 <_printf_float+0x3a8>
 80055fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80055fe:	2200      	movs	r2, #0
 8005600:	2300      	movs	r3, #0
 8005602:	f7fb fa69 	bl	8000ad8 <__aeabi_dcmpeq>
 8005606:	2800      	cmp	r0, #0
 8005608:	d033      	beq.n	8005672 <_printf_float+0x266>
 800560a:	4a37      	ldr	r2, [pc, #220]	@ (80056e8 <_printf_float+0x2dc>)
 800560c:	2301      	movs	r3, #1
 800560e:	4631      	mov	r1, r6
 8005610:	4628      	mov	r0, r5
 8005612:	47b8      	blx	r7
 8005614:	3001      	adds	r0, #1
 8005616:	f43f af54 	beq.w	80054c2 <_printf_float+0xb6>
 800561a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800561e:	4543      	cmp	r3, r8
 8005620:	db02      	blt.n	8005628 <_printf_float+0x21c>
 8005622:	6823      	ldr	r3, [r4, #0]
 8005624:	07d8      	lsls	r0, r3, #31
 8005626:	d50f      	bpl.n	8005648 <_printf_float+0x23c>
 8005628:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800562c:	4631      	mov	r1, r6
 800562e:	4628      	mov	r0, r5
 8005630:	47b8      	blx	r7
 8005632:	3001      	adds	r0, #1
 8005634:	f43f af45 	beq.w	80054c2 <_printf_float+0xb6>
 8005638:	f04f 0900 	mov.w	r9, #0
 800563c:	f108 38ff 	add.w	r8, r8, #4294967295
 8005640:	f104 0a1a 	add.w	sl, r4, #26
 8005644:	45c8      	cmp	r8, r9
 8005646:	dc09      	bgt.n	800565c <_printf_float+0x250>
 8005648:	6823      	ldr	r3, [r4, #0]
 800564a:	079b      	lsls	r3, r3, #30
 800564c:	f100 8103 	bmi.w	8005856 <_printf_float+0x44a>
 8005650:	68e0      	ldr	r0, [r4, #12]
 8005652:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005654:	4298      	cmp	r0, r3
 8005656:	bfb8      	it	lt
 8005658:	4618      	movlt	r0, r3
 800565a:	e734      	b.n	80054c6 <_printf_float+0xba>
 800565c:	2301      	movs	r3, #1
 800565e:	4652      	mov	r2, sl
 8005660:	4631      	mov	r1, r6
 8005662:	4628      	mov	r0, r5
 8005664:	47b8      	blx	r7
 8005666:	3001      	adds	r0, #1
 8005668:	f43f af2b 	beq.w	80054c2 <_printf_float+0xb6>
 800566c:	f109 0901 	add.w	r9, r9, #1
 8005670:	e7e8      	b.n	8005644 <_printf_float+0x238>
 8005672:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005674:	2b00      	cmp	r3, #0
 8005676:	dc39      	bgt.n	80056ec <_printf_float+0x2e0>
 8005678:	4a1b      	ldr	r2, [pc, #108]	@ (80056e8 <_printf_float+0x2dc>)
 800567a:	2301      	movs	r3, #1
 800567c:	4631      	mov	r1, r6
 800567e:	4628      	mov	r0, r5
 8005680:	47b8      	blx	r7
 8005682:	3001      	adds	r0, #1
 8005684:	f43f af1d 	beq.w	80054c2 <_printf_float+0xb6>
 8005688:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800568c:	ea59 0303 	orrs.w	r3, r9, r3
 8005690:	d102      	bne.n	8005698 <_printf_float+0x28c>
 8005692:	6823      	ldr	r3, [r4, #0]
 8005694:	07d9      	lsls	r1, r3, #31
 8005696:	d5d7      	bpl.n	8005648 <_printf_float+0x23c>
 8005698:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800569c:	4631      	mov	r1, r6
 800569e:	4628      	mov	r0, r5
 80056a0:	47b8      	blx	r7
 80056a2:	3001      	adds	r0, #1
 80056a4:	f43f af0d 	beq.w	80054c2 <_printf_float+0xb6>
 80056a8:	f04f 0a00 	mov.w	sl, #0
 80056ac:	f104 0b1a 	add.w	fp, r4, #26
 80056b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056b2:	425b      	negs	r3, r3
 80056b4:	4553      	cmp	r3, sl
 80056b6:	dc01      	bgt.n	80056bc <_printf_float+0x2b0>
 80056b8:	464b      	mov	r3, r9
 80056ba:	e793      	b.n	80055e4 <_printf_float+0x1d8>
 80056bc:	2301      	movs	r3, #1
 80056be:	465a      	mov	r2, fp
 80056c0:	4631      	mov	r1, r6
 80056c2:	4628      	mov	r0, r5
 80056c4:	47b8      	blx	r7
 80056c6:	3001      	adds	r0, #1
 80056c8:	f43f aefb 	beq.w	80054c2 <_printf_float+0xb6>
 80056cc:	f10a 0a01 	add.w	sl, sl, #1
 80056d0:	e7ee      	b.n	80056b0 <_printf_float+0x2a4>
 80056d2:	bf00      	nop
 80056d4:	7fefffff 	.word	0x7fefffff
 80056d8:	08008e5c 	.word	0x08008e5c
 80056dc:	08008e60 	.word	0x08008e60
 80056e0:	08008e64 	.word	0x08008e64
 80056e4:	08008e68 	.word	0x08008e68
 80056e8:	08008e6c 	.word	0x08008e6c
 80056ec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80056ee:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80056f2:	4553      	cmp	r3, sl
 80056f4:	bfa8      	it	ge
 80056f6:	4653      	movge	r3, sl
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	4699      	mov	r9, r3
 80056fc:	dc36      	bgt.n	800576c <_printf_float+0x360>
 80056fe:	f04f 0b00 	mov.w	fp, #0
 8005702:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005706:	f104 021a 	add.w	r2, r4, #26
 800570a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800570c:	9306      	str	r3, [sp, #24]
 800570e:	eba3 0309 	sub.w	r3, r3, r9
 8005712:	455b      	cmp	r3, fp
 8005714:	dc31      	bgt.n	800577a <_printf_float+0x36e>
 8005716:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005718:	459a      	cmp	sl, r3
 800571a:	dc3a      	bgt.n	8005792 <_printf_float+0x386>
 800571c:	6823      	ldr	r3, [r4, #0]
 800571e:	07da      	lsls	r2, r3, #31
 8005720:	d437      	bmi.n	8005792 <_printf_float+0x386>
 8005722:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005724:	ebaa 0903 	sub.w	r9, sl, r3
 8005728:	9b06      	ldr	r3, [sp, #24]
 800572a:	ebaa 0303 	sub.w	r3, sl, r3
 800572e:	4599      	cmp	r9, r3
 8005730:	bfa8      	it	ge
 8005732:	4699      	movge	r9, r3
 8005734:	f1b9 0f00 	cmp.w	r9, #0
 8005738:	dc33      	bgt.n	80057a2 <_printf_float+0x396>
 800573a:	f04f 0800 	mov.w	r8, #0
 800573e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005742:	f104 0b1a 	add.w	fp, r4, #26
 8005746:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005748:	ebaa 0303 	sub.w	r3, sl, r3
 800574c:	eba3 0309 	sub.w	r3, r3, r9
 8005750:	4543      	cmp	r3, r8
 8005752:	f77f af79 	ble.w	8005648 <_printf_float+0x23c>
 8005756:	2301      	movs	r3, #1
 8005758:	465a      	mov	r2, fp
 800575a:	4631      	mov	r1, r6
 800575c:	4628      	mov	r0, r5
 800575e:	47b8      	blx	r7
 8005760:	3001      	adds	r0, #1
 8005762:	f43f aeae 	beq.w	80054c2 <_printf_float+0xb6>
 8005766:	f108 0801 	add.w	r8, r8, #1
 800576a:	e7ec      	b.n	8005746 <_printf_float+0x33a>
 800576c:	4642      	mov	r2, r8
 800576e:	4631      	mov	r1, r6
 8005770:	4628      	mov	r0, r5
 8005772:	47b8      	blx	r7
 8005774:	3001      	adds	r0, #1
 8005776:	d1c2      	bne.n	80056fe <_printf_float+0x2f2>
 8005778:	e6a3      	b.n	80054c2 <_printf_float+0xb6>
 800577a:	2301      	movs	r3, #1
 800577c:	4631      	mov	r1, r6
 800577e:	4628      	mov	r0, r5
 8005780:	9206      	str	r2, [sp, #24]
 8005782:	47b8      	blx	r7
 8005784:	3001      	adds	r0, #1
 8005786:	f43f ae9c 	beq.w	80054c2 <_printf_float+0xb6>
 800578a:	9a06      	ldr	r2, [sp, #24]
 800578c:	f10b 0b01 	add.w	fp, fp, #1
 8005790:	e7bb      	b.n	800570a <_printf_float+0x2fe>
 8005792:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005796:	4631      	mov	r1, r6
 8005798:	4628      	mov	r0, r5
 800579a:	47b8      	blx	r7
 800579c:	3001      	adds	r0, #1
 800579e:	d1c0      	bne.n	8005722 <_printf_float+0x316>
 80057a0:	e68f      	b.n	80054c2 <_printf_float+0xb6>
 80057a2:	9a06      	ldr	r2, [sp, #24]
 80057a4:	464b      	mov	r3, r9
 80057a6:	4442      	add	r2, r8
 80057a8:	4631      	mov	r1, r6
 80057aa:	4628      	mov	r0, r5
 80057ac:	47b8      	blx	r7
 80057ae:	3001      	adds	r0, #1
 80057b0:	d1c3      	bne.n	800573a <_printf_float+0x32e>
 80057b2:	e686      	b.n	80054c2 <_printf_float+0xb6>
 80057b4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80057b8:	f1ba 0f01 	cmp.w	sl, #1
 80057bc:	dc01      	bgt.n	80057c2 <_printf_float+0x3b6>
 80057be:	07db      	lsls	r3, r3, #31
 80057c0:	d536      	bpl.n	8005830 <_printf_float+0x424>
 80057c2:	2301      	movs	r3, #1
 80057c4:	4642      	mov	r2, r8
 80057c6:	4631      	mov	r1, r6
 80057c8:	4628      	mov	r0, r5
 80057ca:	47b8      	blx	r7
 80057cc:	3001      	adds	r0, #1
 80057ce:	f43f ae78 	beq.w	80054c2 <_printf_float+0xb6>
 80057d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057d6:	4631      	mov	r1, r6
 80057d8:	4628      	mov	r0, r5
 80057da:	47b8      	blx	r7
 80057dc:	3001      	adds	r0, #1
 80057de:	f43f ae70 	beq.w	80054c2 <_printf_float+0xb6>
 80057e2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80057e6:	2200      	movs	r2, #0
 80057e8:	2300      	movs	r3, #0
 80057ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80057ee:	f7fb f973 	bl	8000ad8 <__aeabi_dcmpeq>
 80057f2:	b9c0      	cbnz	r0, 8005826 <_printf_float+0x41a>
 80057f4:	4653      	mov	r3, sl
 80057f6:	f108 0201 	add.w	r2, r8, #1
 80057fa:	4631      	mov	r1, r6
 80057fc:	4628      	mov	r0, r5
 80057fe:	47b8      	blx	r7
 8005800:	3001      	adds	r0, #1
 8005802:	d10c      	bne.n	800581e <_printf_float+0x412>
 8005804:	e65d      	b.n	80054c2 <_printf_float+0xb6>
 8005806:	2301      	movs	r3, #1
 8005808:	465a      	mov	r2, fp
 800580a:	4631      	mov	r1, r6
 800580c:	4628      	mov	r0, r5
 800580e:	47b8      	blx	r7
 8005810:	3001      	adds	r0, #1
 8005812:	f43f ae56 	beq.w	80054c2 <_printf_float+0xb6>
 8005816:	f108 0801 	add.w	r8, r8, #1
 800581a:	45d0      	cmp	r8, sl
 800581c:	dbf3      	blt.n	8005806 <_printf_float+0x3fa>
 800581e:	464b      	mov	r3, r9
 8005820:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005824:	e6df      	b.n	80055e6 <_printf_float+0x1da>
 8005826:	f04f 0800 	mov.w	r8, #0
 800582a:	f104 0b1a 	add.w	fp, r4, #26
 800582e:	e7f4      	b.n	800581a <_printf_float+0x40e>
 8005830:	2301      	movs	r3, #1
 8005832:	4642      	mov	r2, r8
 8005834:	e7e1      	b.n	80057fa <_printf_float+0x3ee>
 8005836:	2301      	movs	r3, #1
 8005838:	464a      	mov	r2, r9
 800583a:	4631      	mov	r1, r6
 800583c:	4628      	mov	r0, r5
 800583e:	47b8      	blx	r7
 8005840:	3001      	adds	r0, #1
 8005842:	f43f ae3e 	beq.w	80054c2 <_printf_float+0xb6>
 8005846:	f108 0801 	add.w	r8, r8, #1
 800584a:	68e3      	ldr	r3, [r4, #12]
 800584c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800584e:	1a5b      	subs	r3, r3, r1
 8005850:	4543      	cmp	r3, r8
 8005852:	dcf0      	bgt.n	8005836 <_printf_float+0x42a>
 8005854:	e6fc      	b.n	8005650 <_printf_float+0x244>
 8005856:	f04f 0800 	mov.w	r8, #0
 800585a:	f104 0919 	add.w	r9, r4, #25
 800585e:	e7f4      	b.n	800584a <_printf_float+0x43e>

08005860 <_printf_common>:
 8005860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005864:	4616      	mov	r6, r2
 8005866:	4698      	mov	r8, r3
 8005868:	688a      	ldr	r2, [r1, #8]
 800586a:	690b      	ldr	r3, [r1, #16]
 800586c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005870:	4293      	cmp	r3, r2
 8005872:	bfb8      	it	lt
 8005874:	4613      	movlt	r3, r2
 8005876:	6033      	str	r3, [r6, #0]
 8005878:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800587c:	4607      	mov	r7, r0
 800587e:	460c      	mov	r4, r1
 8005880:	b10a      	cbz	r2, 8005886 <_printf_common+0x26>
 8005882:	3301      	adds	r3, #1
 8005884:	6033      	str	r3, [r6, #0]
 8005886:	6823      	ldr	r3, [r4, #0]
 8005888:	0699      	lsls	r1, r3, #26
 800588a:	bf42      	ittt	mi
 800588c:	6833      	ldrmi	r3, [r6, #0]
 800588e:	3302      	addmi	r3, #2
 8005890:	6033      	strmi	r3, [r6, #0]
 8005892:	6825      	ldr	r5, [r4, #0]
 8005894:	f015 0506 	ands.w	r5, r5, #6
 8005898:	d106      	bne.n	80058a8 <_printf_common+0x48>
 800589a:	f104 0a19 	add.w	sl, r4, #25
 800589e:	68e3      	ldr	r3, [r4, #12]
 80058a0:	6832      	ldr	r2, [r6, #0]
 80058a2:	1a9b      	subs	r3, r3, r2
 80058a4:	42ab      	cmp	r3, r5
 80058a6:	dc26      	bgt.n	80058f6 <_printf_common+0x96>
 80058a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80058ac:	6822      	ldr	r2, [r4, #0]
 80058ae:	3b00      	subs	r3, #0
 80058b0:	bf18      	it	ne
 80058b2:	2301      	movne	r3, #1
 80058b4:	0692      	lsls	r2, r2, #26
 80058b6:	d42b      	bmi.n	8005910 <_printf_common+0xb0>
 80058b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80058bc:	4641      	mov	r1, r8
 80058be:	4638      	mov	r0, r7
 80058c0:	47c8      	blx	r9
 80058c2:	3001      	adds	r0, #1
 80058c4:	d01e      	beq.n	8005904 <_printf_common+0xa4>
 80058c6:	6823      	ldr	r3, [r4, #0]
 80058c8:	6922      	ldr	r2, [r4, #16]
 80058ca:	f003 0306 	and.w	r3, r3, #6
 80058ce:	2b04      	cmp	r3, #4
 80058d0:	bf02      	ittt	eq
 80058d2:	68e5      	ldreq	r5, [r4, #12]
 80058d4:	6833      	ldreq	r3, [r6, #0]
 80058d6:	1aed      	subeq	r5, r5, r3
 80058d8:	68a3      	ldr	r3, [r4, #8]
 80058da:	bf0c      	ite	eq
 80058dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058e0:	2500      	movne	r5, #0
 80058e2:	4293      	cmp	r3, r2
 80058e4:	bfc4      	itt	gt
 80058e6:	1a9b      	subgt	r3, r3, r2
 80058e8:	18ed      	addgt	r5, r5, r3
 80058ea:	2600      	movs	r6, #0
 80058ec:	341a      	adds	r4, #26
 80058ee:	42b5      	cmp	r5, r6
 80058f0:	d11a      	bne.n	8005928 <_printf_common+0xc8>
 80058f2:	2000      	movs	r0, #0
 80058f4:	e008      	b.n	8005908 <_printf_common+0xa8>
 80058f6:	2301      	movs	r3, #1
 80058f8:	4652      	mov	r2, sl
 80058fa:	4641      	mov	r1, r8
 80058fc:	4638      	mov	r0, r7
 80058fe:	47c8      	blx	r9
 8005900:	3001      	adds	r0, #1
 8005902:	d103      	bne.n	800590c <_printf_common+0xac>
 8005904:	f04f 30ff 	mov.w	r0, #4294967295
 8005908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800590c:	3501      	adds	r5, #1
 800590e:	e7c6      	b.n	800589e <_printf_common+0x3e>
 8005910:	18e1      	adds	r1, r4, r3
 8005912:	1c5a      	adds	r2, r3, #1
 8005914:	2030      	movs	r0, #48	@ 0x30
 8005916:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800591a:	4422      	add	r2, r4
 800591c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005920:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005924:	3302      	adds	r3, #2
 8005926:	e7c7      	b.n	80058b8 <_printf_common+0x58>
 8005928:	2301      	movs	r3, #1
 800592a:	4622      	mov	r2, r4
 800592c:	4641      	mov	r1, r8
 800592e:	4638      	mov	r0, r7
 8005930:	47c8      	blx	r9
 8005932:	3001      	adds	r0, #1
 8005934:	d0e6      	beq.n	8005904 <_printf_common+0xa4>
 8005936:	3601      	adds	r6, #1
 8005938:	e7d9      	b.n	80058ee <_printf_common+0x8e>
	...

0800593c <_printf_i>:
 800593c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005940:	7e0f      	ldrb	r7, [r1, #24]
 8005942:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005944:	2f78      	cmp	r7, #120	@ 0x78
 8005946:	4691      	mov	r9, r2
 8005948:	4680      	mov	r8, r0
 800594a:	460c      	mov	r4, r1
 800594c:	469a      	mov	sl, r3
 800594e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005952:	d807      	bhi.n	8005964 <_printf_i+0x28>
 8005954:	2f62      	cmp	r7, #98	@ 0x62
 8005956:	d80a      	bhi.n	800596e <_printf_i+0x32>
 8005958:	2f00      	cmp	r7, #0
 800595a:	f000 80d2 	beq.w	8005b02 <_printf_i+0x1c6>
 800595e:	2f58      	cmp	r7, #88	@ 0x58
 8005960:	f000 80b9 	beq.w	8005ad6 <_printf_i+0x19a>
 8005964:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005968:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800596c:	e03a      	b.n	80059e4 <_printf_i+0xa8>
 800596e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005972:	2b15      	cmp	r3, #21
 8005974:	d8f6      	bhi.n	8005964 <_printf_i+0x28>
 8005976:	a101      	add	r1, pc, #4	@ (adr r1, 800597c <_printf_i+0x40>)
 8005978:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800597c:	080059d5 	.word	0x080059d5
 8005980:	080059e9 	.word	0x080059e9
 8005984:	08005965 	.word	0x08005965
 8005988:	08005965 	.word	0x08005965
 800598c:	08005965 	.word	0x08005965
 8005990:	08005965 	.word	0x08005965
 8005994:	080059e9 	.word	0x080059e9
 8005998:	08005965 	.word	0x08005965
 800599c:	08005965 	.word	0x08005965
 80059a0:	08005965 	.word	0x08005965
 80059a4:	08005965 	.word	0x08005965
 80059a8:	08005ae9 	.word	0x08005ae9
 80059ac:	08005a13 	.word	0x08005a13
 80059b0:	08005aa3 	.word	0x08005aa3
 80059b4:	08005965 	.word	0x08005965
 80059b8:	08005965 	.word	0x08005965
 80059bc:	08005b0b 	.word	0x08005b0b
 80059c0:	08005965 	.word	0x08005965
 80059c4:	08005a13 	.word	0x08005a13
 80059c8:	08005965 	.word	0x08005965
 80059cc:	08005965 	.word	0x08005965
 80059d0:	08005aab 	.word	0x08005aab
 80059d4:	6833      	ldr	r3, [r6, #0]
 80059d6:	1d1a      	adds	r2, r3, #4
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	6032      	str	r2, [r6, #0]
 80059dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80059e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80059e4:	2301      	movs	r3, #1
 80059e6:	e09d      	b.n	8005b24 <_printf_i+0x1e8>
 80059e8:	6833      	ldr	r3, [r6, #0]
 80059ea:	6820      	ldr	r0, [r4, #0]
 80059ec:	1d19      	adds	r1, r3, #4
 80059ee:	6031      	str	r1, [r6, #0]
 80059f0:	0606      	lsls	r6, r0, #24
 80059f2:	d501      	bpl.n	80059f8 <_printf_i+0xbc>
 80059f4:	681d      	ldr	r5, [r3, #0]
 80059f6:	e003      	b.n	8005a00 <_printf_i+0xc4>
 80059f8:	0645      	lsls	r5, r0, #25
 80059fa:	d5fb      	bpl.n	80059f4 <_printf_i+0xb8>
 80059fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005a00:	2d00      	cmp	r5, #0
 8005a02:	da03      	bge.n	8005a0c <_printf_i+0xd0>
 8005a04:	232d      	movs	r3, #45	@ 0x2d
 8005a06:	426d      	negs	r5, r5
 8005a08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a0c:	4859      	ldr	r0, [pc, #356]	@ (8005b74 <_printf_i+0x238>)
 8005a0e:	230a      	movs	r3, #10
 8005a10:	e011      	b.n	8005a36 <_printf_i+0xfa>
 8005a12:	6821      	ldr	r1, [r4, #0]
 8005a14:	6833      	ldr	r3, [r6, #0]
 8005a16:	0608      	lsls	r0, r1, #24
 8005a18:	f853 5b04 	ldr.w	r5, [r3], #4
 8005a1c:	d402      	bmi.n	8005a24 <_printf_i+0xe8>
 8005a1e:	0649      	lsls	r1, r1, #25
 8005a20:	bf48      	it	mi
 8005a22:	b2ad      	uxthmi	r5, r5
 8005a24:	2f6f      	cmp	r7, #111	@ 0x6f
 8005a26:	4853      	ldr	r0, [pc, #332]	@ (8005b74 <_printf_i+0x238>)
 8005a28:	6033      	str	r3, [r6, #0]
 8005a2a:	bf14      	ite	ne
 8005a2c:	230a      	movne	r3, #10
 8005a2e:	2308      	moveq	r3, #8
 8005a30:	2100      	movs	r1, #0
 8005a32:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005a36:	6866      	ldr	r6, [r4, #4]
 8005a38:	60a6      	str	r6, [r4, #8]
 8005a3a:	2e00      	cmp	r6, #0
 8005a3c:	bfa2      	ittt	ge
 8005a3e:	6821      	ldrge	r1, [r4, #0]
 8005a40:	f021 0104 	bicge.w	r1, r1, #4
 8005a44:	6021      	strge	r1, [r4, #0]
 8005a46:	b90d      	cbnz	r5, 8005a4c <_printf_i+0x110>
 8005a48:	2e00      	cmp	r6, #0
 8005a4a:	d04b      	beq.n	8005ae4 <_printf_i+0x1a8>
 8005a4c:	4616      	mov	r6, r2
 8005a4e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a52:	fb03 5711 	mls	r7, r3, r1, r5
 8005a56:	5dc7      	ldrb	r7, [r0, r7]
 8005a58:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a5c:	462f      	mov	r7, r5
 8005a5e:	42bb      	cmp	r3, r7
 8005a60:	460d      	mov	r5, r1
 8005a62:	d9f4      	bls.n	8005a4e <_printf_i+0x112>
 8005a64:	2b08      	cmp	r3, #8
 8005a66:	d10b      	bne.n	8005a80 <_printf_i+0x144>
 8005a68:	6823      	ldr	r3, [r4, #0]
 8005a6a:	07df      	lsls	r7, r3, #31
 8005a6c:	d508      	bpl.n	8005a80 <_printf_i+0x144>
 8005a6e:	6923      	ldr	r3, [r4, #16]
 8005a70:	6861      	ldr	r1, [r4, #4]
 8005a72:	4299      	cmp	r1, r3
 8005a74:	bfde      	ittt	le
 8005a76:	2330      	movle	r3, #48	@ 0x30
 8005a78:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a7c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005a80:	1b92      	subs	r2, r2, r6
 8005a82:	6122      	str	r2, [r4, #16]
 8005a84:	f8cd a000 	str.w	sl, [sp]
 8005a88:	464b      	mov	r3, r9
 8005a8a:	aa03      	add	r2, sp, #12
 8005a8c:	4621      	mov	r1, r4
 8005a8e:	4640      	mov	r0, r8
 8005a90:	f7ff fee6 	bl	8005860 <_printf_common>
 8005a94:	3001      	adds	r0, #1
 8005a96:	d14a      	bne.n	8005b2e <_printf_i+0x1f2>
 8005a98:	f04f 30ff 	mov.w	r0, #4294967295
 8005a9c:	b004      	add	sp, #16
 8005a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aa2:	6823      	ldr	r3, [r4, #0]
 8005aa4:	f043 0320 	orr.w	r3, r3, #32
 8005aa8:	6023      	str	r3, [r4, #0]
 8005aaa:	4833      	ldr	r0, [pc, #204]	@ (8005b78 <_printf_i+0x23c>)
 8005aac:	2778      	movs	r7, #120	@ 0x78
 8005aae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005ab2:	6823      	ldr	r3, [r4, #0]
 8005ab4:	6831      	ldr	r1, [r6, #0]
 8005ab6:	061f      	lsls	r7, r3, #24
 8005ab8:	f851 5b04 	ldr.w	r5, [r1], #4
 8005abc:	d402      	bmi.n	8005ac4 <_printf_i+0x188>
 8005abe:	065f      	lsls	r7, r3, #25
 8005ac0:	bf48      	it	mi
 8005ac2:	b2ad      	uxthmi	r5, r5
 8005ac4:	6031      	str	r1, [r6, #0]
 8005ac6:	07d9      	lsls	r1, r3, #31
 8005ac8:	bf44      	itt	mi
 8005aca:	f043 0320 	orrmi.w	r3, r3, #32
 8005ace:	6023      	strmi	r3, [r4, #0]
 8005ad0:	b11d      	cbz	r5, 8005ada <_printf_i+0x19e>
 8005ad2:	2310      	movs	r3, #16
 8005ad4:	e7ac      	b.n	8005a30 <_printf_i+0xf4>
 8005ad6:	4827      	ldr	r0, [pc, #156]	@ (8005b74 <_printf_i+0x238>)
 8005ad8:	e7e9      	b.n	8005aae <_printf_i+0x172>
 8005ada:	6823      	ldr	r3, [r4, #0]
 8005adc:	f023 0320 	bic.w	r3, r3, #32
 8005ae0:	6023      	str	r3, [r4, #0]
 8005ae2:	e7f6      	b.n	8005ad2 <_printf_i+0x196>
 8005ae4:	4616      	mov	r6, r2
 8005ae6:	e7bd      	b.n	8005a64 <_printf_i+0x128>
 8005ae8:	6833      	ldr	r3, [r6, #0]
 8005aea:	6825      	ldr	r5, [r4, #0]
 8005aec:	6961      	ldr	r1, [r4, #20]
 8005aee:	1d18      	adds	r0, r3, #4
 8005af0:	6030      	str	r0, [r6, #0]
 8005af2:	062e      	lsls	r6, r5, #24
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	d501      	bpl.n	8005afc <_printf_i+0x1c0>
 8005af8:	6019      	str	r1, [r3, #0]
 8005afa:	e002      	b.n	8005b02 <_printf_i+0x1c6>
 8005afc:	0668      	lsls	r0, r5, #25
 8005afe:	d5fb      	bpl.n	8005af8 <_printf_i+0x1bc>
 8005b00:	8019      	strh	r1, [r3, #0]
 8005b02:	2300      	movs	r3, #0
 8005b04:	6123      	str	r3, [r4, #16]
 8005b06:	4616      	mov	r6, r2
 8005b08:	e7bc      	b.n	8005a84 <_printf_i+0x148>
 8005b0a:	6833      	ldr	r3, [r6, #0]
 8005b0c:	1d1a      	adds	r2, r3, #4
 8005b0e:	6032      	str	r2, [r6, #0]
 8005b10:	681e      	ldr	r6, [r3, #0]
 8005b12:	6862      	ldr	r2, [r4, #4]
 8005b14:	2100      	movs	r1, #0
 8005b16:	4630      	mov	r0, r6
 8005b18:	f7fa fb62 	bl	80001e0 <memchr>
 8005b1c:	b108      	cbz	r0, 8005b22 <_printf_i+0x1e6>
 8005b1e:	1b80      	subs	r0, r0, r6
 8005b20:	6060      	str	r0, [r4, #4]
 8005b22:	6863      	ldr	r3, [r4, #4]
 8005b24:	6123      	str	r3, [r4, #16]
 8005b26:	2300      	movs	r3, #0
 8005b28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b2c:	e7aa      	b.n	8005a84 <_printf_i+0x148>
 8005b2e:	6923      	ldr	r3, [r4, #16]
 8005b30:	4632      	mov	r2, r6
 8005b32:	4649      	mov	r1, r9
 8005b34:	4640      	mov	r0, r8
 8005b36:	47d0      	blx	sl
 8005b38:	3001      	adds	r0, #1
 8005b3a:	d0ad      	beq.n	8005a98 <_printf_i+0x15c>
 8005b3c:	6823      	ldr	r3, [r4, #0]
 8005b3e:	079b      	lsls	r3, r3, #30
 8005b40:	d413      	bmi.n	8005b6a <_printf_i+0x22e>
 8005b42:	68e0      	ldr	r0, [r4, #12]
 8005b44:	9b03      	ldr	r3, [sp, #12]
 8005b46:	4298      	cmp	r0, r3
 8005b48:	bfb8      	it	lt
 8005b4a:	4618      	movlt	r0, r3
 8005b4c:	e7a6      	b.n	8005a9c <_printf_i+0x160>
 8005b4e:	2301      	movs	r3, #1
 8005b50:	4632      	mov	r2, r6
 8005b52:	4649      	mov	r1, r9
 8005b54:	4640      	mov	r0, r8
 8005b56:	47d0      	blx	sl
 8005b58:	3001      	adds	r0, #1
 8005b5a:	d09d      	beq.n	8005a98 <_printf_i+0x15c>
 8005b5c:	3501      	adds	r5, #1
 8005b5e:	68e3      	ldr	r3, [r4, #12]
 8005b60:	9903      	ldr	r1, [sp, #12]
 8005b62:	1a5b      	subs	r3, r3, r1
 8005b64:	42ab      	cmp	r3, r5
 8005b66:	dcf2      	bgt.n	8005b4e <_printf_i+0x212>
 8005b68:	e7eb      	b.n	8005b42 <_printf_i+0x206>
 8005b6a:	2500      	movs	r5, #0
 8005b6c:	f104 0619 	add.w	r6, r4, #25
 8005b70:	e7f5      	b.n	8005b5e <_printf_i+0x222>
 8005b72:	bf00      	nop
 8005b74:	08008e6e 	.word	0x08008e6e
 8005b78:	08008e7f 	.word	0x08008e7f

08005b7c <std>:
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	b510      	push	{r4, lr}
 8005b80:	4604      	mov	r4, r0
 8005b82:	e9c0 3300 	strd	r3, r3, [r0]
 8005b86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b8a:	6083      	str	r3, [r0, #8]
 8005b8c:	8181      	strh	r1, [r0, #12]
 8005b8e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005b90:	81c2      	strh	r2, [r0, #14]
 8005b92:	6183      	str	r3, [r0, #24]
 8005b94:	4619      	mov	r1, r3
 8005b96:	2208      	movs	r2, #8
 8005b98:	305c      	adds	r0, #92	@ 0x5c
 8005b9a:	f000 f914 	bl	8005dc6 <memset>
 8005b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8005bd4 <std+0x58>)
 8005ba0:	6263      	str	r3, [r4, #36]	@ 0x24
 8005ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8005bd8 <std+0x5c>)
 8005ba4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8005bdc <std+0x60>)
 8005ba8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005baa:	4b0d      	ldr	r3, [pc, #52]	@ (8005be0 <std+0x64>)
 8005bac:	6323      	str	r3, [r4, #48]	@ 0x30
 8005bae:	4b0d      	ldr	r3, [pc, #52]	@ (8005be4 <std+0x68>)
 8005bb0:	6224      	str	r4, [r4, #32]
 8005bb2:	429c      	cmp	r4, r3
 8005bb4:	d006      	beq.n	8005bc4 <std+0x48>
 8005bb6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005bba:	4294      	cmp	r4, r2
 8005bbc:	d002      	beq.n	8005bc4 <std+0x48>
 8005bbe:	33d0      	adds	r3, #208	@ 0xd0
 8005bc0:	429c      	cmp	r4, r3
 8005bc2:	d105      	bne.n	8005bd0 <std+0x54>
 8005bc4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bcc:	f000 b978 	b.w	8005ec0 <__retarget_lock_init_recursive>
 8005bd0:	bd10      	pop	{r4, pc}
 8005bd2:	bf00      	nop
 8005bd4:	08005d41 	.word	0x08005d41
 8005bd8:	08005d63 	.word	0x08005d63
 8005bdc:	08005d9b 	.word	0x08005d9b
 8005be0:	08005dbf 	.word	0x08005dbf
 8005be4:	20000398 	.word	0x20000398

08005be8 <stdio_exit_handler>:
 8005be8:	4a02      	ldr	r2, [pc, #8]	@ (8005bf4 <stdio_exit_handler+0xc>)
 8005bea:	4903      	ldr	r1, [pc, #12]	@ (8005bf8 <stdio_exit_handler+0x10>)
 8005bec:	4803      	ldr	r0, [pc, #12]	@ (8005bfc <stdio_exit_handler+0x14>)
 8005bee:	f000 b869 	b.w	8005cc4 <_fwalk_sglue>
 8005bf2:	bf00      	nop
 8005bf4:	2000000c 	.word	0x2000000c
 8005bf8:	0800781d 	.word	0x0800781d
 8005bfc:	2000001c 	.word	0x2000001c

08005c00 <cleanup_stdio>:
 8005c00:	6841      	ldr	r1, [r0, #4]
 8005c02:	4b0c      	ldr	r3, [pc, #48]	@ (8005c34 <cleanup_stdio+0x34>)
 8005c04:	4299      	cmp	r1, r3
 8005c06:	b510      	push	{r4, lr}
 8005c08:	4604      	mov	r4, r0
 8005c0a:	d001      	beq.n	8005c10 <cleanup_stdio+0x10>
 8005c0c:	f001 fe06 	bl	800781c <_fflush_r>
 8005c10:	68a1      	ldr	r1, [r4, #8]
 8005c12:	4b09      	ldr	r3, [pc, #36]	@ (8005c38 <cleanup_stdio+0x38>)
 8005c14:	4299      	cmp	r1, r3
 8005c16:	d002      	beq.n	8005c1e <cleanup_stdio+0x1e>
 8005c18:	4620      	mov	r0, r4
 8005c1a:	f001 fdff 	bl	800781c <_fflush_r>
 8005c1e:	68e1      	ldr	r1, [r4, #12]
 8005c20:	4b06      	ldr	r3, [pc, #24]	@ (8005c3c <cleanup_stdio+0x3c>)
 8005c22:	4299      	cmp	r1, r3
 8005c24:	d004      	beq.n	8005c30 <cleanup_stdio+0x30>
 8005c26:	4620      	mov	r0, r4
 8005c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c2c:	f001 bdf6 	b.w	800781c <_fflush_r>
 8005c30:	bd10      	pop	{r4, pc}
 8005c32:	bf00      	nop
 8005c34:	20000398 	.word	0x20000398
 8005c38:	20000400 	.word	0x20000400
 8005c3c:	20000468 	.word	0x20000468

08005c40 <global_stdio_init.part.0>:
 8005c40:	b510      	push	{r4, lr}
 8005c42:	4b0b      	ldr	r3, [pc, #44]	@ (8005c70 <global_stdio_init.part.0+0x30>)
 8005c44:	4c0b      	ldr	r4, [pc, #44]	@ (8005c74 <global_stdio_init.part.0+0x34>)
 8005c46:	4a0c      	ldr	r2, [pc, #48]	@ (8005c78 <global_stdio_init.part.0+0x38>)
 8005c48:	601a      	str	r2, [r3, #0]
 8005c4a:	4620      	mov	r0, r4
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	2104      	movs	r1, #4
 8005c50:	f7ff ff94 	bl	8005b7c <std>
 8005c54:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005c58:	2201      	movs	r2, #1
 8005c5a:	2109      	movs	r1, #9
 8005c5c:	f7ff ff8e 	bl	8005b7c <std>
 8005c60:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005c64:	2202      	movs	r2, #2
 8005c66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c6a:	2112      	movs	r1, #18
 8005c6c:	f7ff bf86 	b.w	8005b7c <std>
 8005c70:	200004d0 	.word	0x200004d0
 8005c74:	20000398 	.word	0x20000398
 8005c78:	08005be9 	.word	0x08005be9

08005c7c <__sfp_lock_acquire>:
 8005c7c:	4801      	ldr	r0, [pc, #4]	@ (8005c84 <__sfp_lock_acquire+0x8>)
 8005c7e:	f000 b920 	b.w	8005ec2 <__retarget_lock_acquire_recursive>
 8005c82:	bf00      	nop
 8005c84:	200004d9 	.word	0x200004d9

08005c88 <__sfp_lock_release>:
 8005c88:	4801      	ldr	r0, [pc, #4]	@ (8005c90 <__sfp_lock_release+0x8>)
 8005c8a:	f000 b91b 	b.w	8005ec4 <__retarget_lock_release_recursive>
 8005c8e:	bf00      	nop
 8005c90:	200004d9 	.word	0x200004d9

08005c94 <__sinit>:
 8005c94:	b510      	push	{r4, lr}
 8005c96:	4604      	mov	r4, r0
 8005c98:	f7ff fff0 	bl	8005c7c <__sfp_lock_acquire>
 8005c9c:	6a23      	ldr	r3, [r4, #32]
 8005c9e:	b11b      	cbz	r3, 8005ca8 <__sinit+0x14>
 8005ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ca4:	f7ff bff0 	b.w	8005c88 <__sfp_lock_release>
 8005ca8:	4b04      	ldr	r3, [pc, #16]	@ (8005cbc <__sinit+0x28>)
 8005caa:	6223      	str	r3, [r4, #32]
 8005cac:	4b04      	ldr	r3, [pc, #16]	@ (8005cc0 <__sinit+0x2c>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d1f5      	bne.n	8005ca0 <__sinit+0xc>
 8005cb4:	f7ff ffc4 	bl	8005c40 <global_stdio_init.part.0>
 8005cb8:	e7f2      	b.n	8005ca0 <__sinit+0xc>
 8005cba:	bf00      	nop
 8005cbc:	08005c01 	.word	0x08005c01
 8005cc0:	200004d0 	.word	0x200004d0

08005cc4 <_fwalk_sglue>:
 8005cc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cc8:	4607      	mov	r7, r0
 8005cca:	4688      	mov	r8, r1
 8005ccc:	4614      	mov	r4, r2
 8005cce:	2600      	movs	r6, #0
 8005cd0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005cd4:	f1b9 0901 	subs.w	r9, r9, #1
 8005cd8:	d505      	bpl.n	8005ce6 <_fwalk_sglue+0x22>
 8005cda:	6824      	ldr	r4, [r4, #0]
 8005cdc:	2c00      	cmp	r4, #0
 8005cde:	d1f7      	bne.n	8005cd0 <_fwalk_sglue+0xc>
 8005ce0:	4630      	mov	r0, r6
 8005ce2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ce6:	89ab      	ldrh	r3, [r5, #12]
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d907      	bls.n	8005cfc <_fwalk_sglue+0x38>
 8005cec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	d003      	beq.n	8005cfc <_fwalk_sglue+0x38>
 8005cf4:	4629      	mov	r1, r5
 8005cf6:	4638      	mov	r0, r7
 8005cf8:	47c0      	blx	r8
 8005cfa:	4306      	orrs	r6, r0
 8005cfc:	3568      	adds	r5, #104	@ 0x68
 8005cfe:	e7e9      	b.n	8005cd4 <_fwalk_sglue+0x10>

08005d00 <siprintf>:
 8005d00:	b40e      	push	{r1, r2, r3}
 8005d02:	b500      	push	{lr}
 8005d04:	b09c      	sub	sp, #112	@ 0x70
 8005d06:	ab1d      	add	r3, sp, #116	@ 0x74
 8005d08:	9002      	str	r0, [sp, #8]
 8005d0a:	9006      	str	r0, [sp, #24]
 8005d0c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005d10:	4809      	ldr	r0, [pc, #36]	@ (8005d38 <siprintf+0x38>)
 8005d12:	9107      	str	r1, [sp, #28]
 8005d14:	9104      	str	r1, [sp, #16]
 8005d16:	4909      	ldr	r1, [pc, #36]	@ (8005d3c <siprintf+0x3c>)
 8005d18:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d1c:	9105      	str	r1, [sp, #20]
 8005d1e:	6800      	ldr	r0, [r0, #0]
 8005d20:	9301      	str	r3, [sp, #4]
 8005d22:	a902      	add	r1, sp, #8
 8005d24:	f001 fbfa 	bl	800751c <_svfiprintf_r>
 8005d28:	9b02      	ldr	r3, [sp, #8]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	701a      	strb	r2, [r3, #0]
 8005d2e:	b01c      	add	sp, #112	@ 0x70
 8005d30:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d34:	b003      	add	sp, #12
 8005d36:	4770      	bx	lr
 8005d38:	20000018 	.word	0x20000018
 8005d3c:	ffff0208 	.word	0xffff0208

08005d40 <__sread>:
 8005d40:	b510      	push	{r4, lr}
 8005d42:	460c      	mov	r4, r1
 8005d44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d48:	f000 f86c 	bl	8005e24 <_read_r>
 8005d4c:	2800      	cmp	r0, #0
 8005d4e:	bfab      	itete	ge
 8005d50:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005d52:	89a3      	ldrhlt	r3, [r4, #12]
 8005d54:	181b      	addge	r3, r3, r0
 8005d56:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005d5a:	bfac      	ite	ge
 8005d5c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005d5e:	81a3      	strhlt	r3, [r4, #12]
 8005d60:	bd10      	pop	{r4, pc}

08005d62 <__swrite>:
 8005d62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d66:	461f      	mov	r7, r3
 8005d68:	898b      	ldrh	r3, [r1, #12]
 8005d6a:	05db      	lsls	r3, r3, #23
 8005d6c:	4605      	mov	r5, r0
 8005d6e:	460c      	mov	r4, r1
 8005d70:	4616      	mov	r6, r2
 8005d72:	d505      	bpl.n	8005d80 <__swrite+0x1e>
 8005d74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d78:	2302      	movs	r3, #2
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f000 f840 	bl	8005e00 <_lseek_r>
 8005d80:	89a3      	ldrh	r3, [r4, #12]
 8005d82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d86:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d8a:	81a3      	strh	r3, [r4, #12]
 8005d8c:	4632      	mov	r2, r6
 8005d8e:	463b      	mov	r3, r7
 8005d90:	4628      	mov	r0, r5
 8005d92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d96:	f000 b857 	b.w	8005e48 <_write_r>

08005d9a <__sseek>:
 8005d9a:	b510      	push	{r4, lr}
 8005d9c:	460c      	mov	r4, r1
 8005d9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005da2:	f000 f82d 	bl	8005e00 <_lseek_r>
 8005da6:	1c43      	adds	r3, r0, #1
 8005da8:	89a3      	ldrh	r3, [r4, #12]
 8005daa:	bf15      	itete	ne
 8005dac:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005dae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005db2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005db6:	81a3      	strheq	r3, [r4, #12]
 8005db8:	bf18      	it	ne
 8005dba:	81a3      	strhne	r3, [r4, #12]
 8005dbc:	bd10      	pop	{r4, pc}

08005dbe <__sclose>:
 8005dbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dc2:	f000 b80d 	b.w	8005de0 <_close_r>

08005dc6 <memset>:
 8005dc6:	4402      	add	r2, r0
 8005dc8:	4603      	mov	r3, r0
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d100      	bne.n	8005dd0 <memset+0xa>
 8005dce:	4770      	bx	lr
 8005dd0:	f803 1b01 	strb.w	r1, [r3], #1
 8005dd4:	e7f9      	b.n	8005dca <memset+0x4>
	...

08005dd8 <_localeconv_r>:
 8005dd8:	4800      	ldr	r0, [pc, #0]	@ (8005ddc <_localeconv_r+0x4>)
 8005dda:	4770      	bx	lr
 8005ddc:	20000158 	.word	0x20000158

08005de0 <_close_r>:
 8005de0:	b538      	push	{r3, r4, r5, lr}
 8005de2:	4d06      	ldr	r5, [pc, #24]	@ (8005dfc <_close_r+0x1c>)
 8005de4:	2300      	movs	r3, #0
 8005de6:	4604      	mov	r4, r0
 8005de8:	4608      	mov	r0, r1
 8005dea:	602b      	str	r3, [r5, #0]
 8005dec:	f7fb fe36 	bl	8001a5c <_close>
 8005df0:	1c43      	adds	r3, r0, #1
 8005df2:	d102      	bne.n	8005dfa <_close_r+0x1a>
 8005df4:	682b      	ldr	r3, [r5, #0]
 8005df6:	b103      	cbz	r3, 8005dfa <_close_r+0x1a>
 8005df8:	6023      	str	r3, [r4, #0]
 8005dfa:	bd38      	pop	{r3, r4, r5, pc}
 8005dfc:	200004d4 	.word	0x200004d4

08005e00 <_lseek_r>:
 8005e00:	b538      	push	{r3, r4, r5, lr}
 8005e02:	4d07      	ldr	r5, [pc, #28]	@ (8005e20 <_lseek_r+0x20>)
 8005e04:	4604      	mov	r4, r0
 8005e06:	4608      	mov	r0, r1
 8005e08:	4611      	mov	r1, r2
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	602a      	str	r2, [r5, #0]
 8005e0e:	461a      	mov	r2, r3
 8005e10:	f7fb fe4b 	bl	8001aaa <_lseek>
 8005e14:	1c43      	adds	r3, r0, #1
 8005e16:	d102      	bne.n	8005e1e <_lseek_r+0x1e>
 8005e18:	682b      	ldr	r3, [r5, #0]
 8005e1a:	b103      	cbz	r3, 8005e1e <_lseek_r+0x1e>
 8005e1c:	6023      	str	r3, [r4, #0]
 8005e1e:	bd38      	pop	{r3, r4, r5, pc}
 8005e20:	200004d4 	.word	0x200004d4

08005e24 <_read_r>:
 8005e24:	b538      	push	{r3, r4, r5, lr}
 8005e26:	4d07      	ldr	r5, [pc, #28]	@ (8005e44 <_read_r+0x20>)
 8005e28:	4604      	mov	r4, r0
 8005e2a:	4608      	mov	r0, r1
 8005e2c:	4611      	mov	r1, r2
 8005e2e:	2200      	movs	r2, #0
 8005e30:	602a      	str	r2, [r5, #0]
 8005e32:	461a      	mov	r2, r3
 8005e34:	f7fb fdd9 	bl	80019ea <_read>
 8005e38:	1c43      	adds	r3, r0, #1
 8005e3a:	d102      	bne.n	8005e42 <_read_r+0x1e>
 8005e3c:	682b      	ldr	r3, [r5, #0]
 8005e3e:	b103      	cbz	r3, 8005e42 <_read_r+0x1e>
 8005e40:	6023      	str	r3, [r4, #0]
 8005e42:	bd38      	pop	{r3, r4, r5, pc}
 8005e44:	200004d4 	.word	0x200004d4

08005e48 <_write_r>:
 8005e48:	b538      	push	{r3, r4, r5, lr}
 8005e4a:	4d07      	ldr	r5, [pc, #28]	@ (8005e68 <_write_r+0x20>)
 8005e4c:	4604      	mov	r4, r0
 8005e4e:	4608      	mov	r0, r1
 8005e50:	4611      	mov	r1, r2
 8005e52:	2200      	movs	r2, #0
 8005e54:	602a      	str	r2, [r5, #0]
 8005e56:	461a      	mov	r2, r3
 8005e58:	f7fb fde4 	bl	8001a24 <_write>
 8005e5c:	1c43      	adds	r3, r0, #1
 8005e5e:	d102      	bne.n	8005e66 <_write_r+0x1e>
 8005e60:	682b      	ldr	r3, [r5, #0]
 8005e62:	b103      	cbz	r3, 8005e66 <_write_r+0x1e>
 8005e64:	6023      	str	r3, [r4, #0]
 8005e66:	bd38      	pop	{r3, r4, r5, pc}
 8005e68:	200004d4 	.word	0x200004d4

08005e6c <__errno>:
 8005e6c:	4b01      	ldr	r3, [pc, #4]	@ (8005e74 <__errno+0x8>)
 8005e6e:	6818      	ldr	r0, [r3, #0]
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	20000018 	.word	0x20000018

08005e78 <__libc_init_array>:
 8005e78:	b570      	push	{r4, r5, r6, lr}
 8005e7a:	4d0d      	ldr	r5, [pc, #52]	@ (8005eb0 <__libc_init_array+0x38>)
 8005e7c:	4c0d      	ldr	r4, [pc, #52]	@ (8005eb4 <__libc_init_array+0x3c>)
 8005e7e:	1b64      	subs	r4, r4, r5
 8005e80:	10a4      	asrs	r4, r4, #2
 8005e82:	2600      	movs	r6, #0
 8005e84:	42a6      	cmp	r6, r4
 8005e86:	d109      	bne.n	8005e9c <__libc_init_array+0x24>
 8005e88:	4d0b      	ldr	r5, [pc, #44]	@ (8005eb8 <__libc_init_array+0x40>)
 8005e8a:	4c0c      	ldr	r4, [pc, #48]	@ (8005ebc <__libc_init_array+0x44>)
 8005e8c:	f002 ffc2 	bl	8008e14 <_init>
 8005e90:	1b64      	subs	r4, r4, r5
 8005e92:	10a4      	asrs	r4, r4, #2
 8005e94:	2600      	movs	r6, #0
 8005e96:	42a6      	cmp	r6, r4
 8005e98:	d105      	bne.n	8005ea6 <__libc_init_array+0x2e>
 8005e9a:	bd70      	pop	{r4, r5, r6, pc}
 8005e9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ea0:	4798      	blx	r3
 8005ea2:	3601      	adds	r6, #1
 8005ea4:	e7ee      	b.n	8005e84 <__libc_init_array+0xc>
 8005ea6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005eaa:	4798      	blx	r3
 8005eac:	3601      	adds	r6, #1
 8005eae:	e7f2      	b.n	8005e96 <__libc_init_array+0x1e>
 8005eb0:	08009208 	.word	0x08009208
 8005eb4:	08009208 	.word	0x08009208
 8005eb8:	08009208 	.word	0x08009208
 8005ebc:	0800920c 	.word	0x0800920c

08005ec0 <__retarget_lock_init_recursive>:
 8005ec0:	4770      	bx	lr

08005ec2 <__retarget_lock_acquire_recursive>:
 8005ec2:	4770      	bx	lr

08005ec4 <__retarget_lock_release_recursive>:
 8005ec4:	4770      	bx	lr

08005ec6 <quorem>:
 8005ec6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eca:	6903      	ldr	r3, [r0, #16]
 8005ecc:	690c      	ldr	r4, [r1, #16]
 8005ece:	42a3      	cmp	r3, r4
 8005ed0:	4607      	mov	r7, r0
 8005ed2:	db7e      	blt.n	8005fd2 <quorem+0x10c>
 8005ed4:	3c01      	subs	r4, #1
 8005ed6:	f101 0814 	add.w	r8, r1, #20
 8005eda:	00a3      	lsls	r3, r4, #2
 8005edc:	f100 0514 	add.w	r5, r0, #20
 8005ee0:	9300      	str	r3, [sp, #0]
 8005ee2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ee6:	9301      	str	r3, [sp, #4]
 8005ee8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005eec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005ef8:	fbb2 f6f3 	udiv	r6, r2, r3
 8005efc:	d32e      	bcc.n	8005f5c <quorem+0x96>
 8005efe:	f04f 0a00 	mov.w	sl, #0
 8005f02:	46c4      	mov	ip, r8
 8005f04:	46ae      	mov	lr, r5
 8005f06:	46d3      	mov	fp, sl
 8005f08:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005f0c:	b298      	uxth	r0, r3
 8005f0e:	fb06 a000 	mla	r0, r6, r0, sl
 8005f12:	0c02      	lsrs	r2, r0, #16
 8005f14:	0c1b      	lsrs	r3, r3, #16
 8005f16:	fb06 2303 	mla	r3, r6, r3, r2
 8005f1a:	f8de 2000 	ldr.w	r2, [lr]
 8005f1e:	b280      	uxth	r0, r0
 8005f20:	b292      	uxth	r2, r2
 8005f22:	1a12      	subs	r2, r2, r0
 8005f24:	445a      	add	r2, fp
 8005f26:	f8de 0000 	ldr.w	r0, [lr]
 8005f2a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005f34:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005f38:	b292      	uxth	r2, r2
 8005f3a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005f3e:	45e1      	cmp	r9, ip
 8005f40:	f84e 2b04 	str.w	r2, [lr], #4
 8005f44:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005f48:	d2de      	bcs.n	8005f08 <quorem+0x42>
 8005f4a:	9b00      	ldr	r3, [sp, #0]
 8005f4c:	58eb      	ldr	r3, [r5, r3]
 8005f4e:	b92b      	cbnz	r3, 8005f5c <quorem+0x96>
 8005f50:	9b01      	ldr	r3, [sp, #4]
 8005f52:	3b04      	subs	r3, #4
 8005f54:	429d      	cmp	r5, r3
 8005f56:	461a      	mov	r2, r3
 8005f58:	d32f      	bcc.n	8005fba <quorem+0xf4>
 8005f5a:	613c      	str	r4, [r7, #16]
 8005f5c:	4638      	mov	r0, r7
 8005f5e:	f001 f979 	bl	8007254 <__mcmp>
 8005f62:	2800      	cmp	r0, #0
 8005f64:	db25      	blt.n	8005fb2 <quorem+0xec>
 8005f66:	4629      	mov	r1, r5
 8005f68:	2000      	movs	r0, #0
 8005f6a:	f858 2b04 	ldr.w	r2, [r8], #4
 8005f6e:	f8d1 c000 	ldr.w	ip, [r1]
 8005f72:	fa1f fe82 	uxth.w	lr, r2
 8005f76:	fa1f f38c 	uxth.w	r3, ip
 8005f7a:	eba3 030e 	sub.w	r3, r3, lr
 8005f7e:	4403      	add	r3, r0
 8005f80:	0c12      	lsrs	r2, r2, #16
 8005f82:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005f86:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f90:	45c1      	cmp	r9, r8
 8005f92:	f841 3b04 	str.w	r3, [r1], #4
 8005f96:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005f9a:	d2e6      	bcs.n	8005f6a <quorem+0xa4>
 8005f9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005fa0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005fa4:	b922      	cbnz	r2, 8005fb0 <quorem+0xea>
 8005fa6:	3b04      	subs	r3, #4
 8005fa8:	429d      	cmp	r5, r3
 8005faa:	461a      	mov	r2, r3
 8005fac:	d30b      	bcc.n	8005fc6 <quorem+0x100>
 8005fae:	613c      	str	r4, [r7, #16]
 8005fb0:	3601      	adds	r6, #1
 8005fb2:	4630      	mov	r0, r6
 8005fb4:	b003      	add	sp, #12
 8005fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fba:	6812      	ldr	r2, [r2, #0]
 8005fbc:	3b04      	subs	r3, #4
 8005fbe:	2a00      	cmp	r2, #0
 8005fc0:	d1cb      	bne.n	8005f5a <quorem+0x94>
 8005fc2:	3c01      	subs	r4, #1
 8005fc4:	e7c6      	b.n	8005f54 <quorem+0x8e>
 8005fc6:	6812      	ldr	r2, [r2, #0]
 8005fc8:	3b04      	subs	r3, #4
 8005fca:	2a00      	cmp	r2, #0
 8005fcc:	d1ef      	bne.n	8005fae <quorem+0xe8>
 8005fce:	3c01      	subs	r4, #1
 8005fd0:	e7ea      	b.n	8005fa8 <quorem+0xe2>
 8005fd2:	2000      	movs	r0, #0
 8005fd4:	e7ee      	b.n	8005fb4 <quorem+0xee>
	...

08005fd8 <_dtoa_r>:
 8005fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fdc:	69c7      	ldr	r7, [r0, #28]
 8005fde:	b099      	sub	sp, #100	@ 0x64
 8005fe0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005fe4:	ec55 4b10 	vmov	r4, r5, d0
 8005fe8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005fea:	9109      	str	r1, [sp, #36]	@ 0x24
 8005fec:	4683      	mov	fp, r0
 8005fee:	920e      	str	r2, [sp, #56]	@ 0x38
 8005ff0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005ff2:	b97f      	cbnz	r7, 8006014 <_dtoa_r+0x3c>
 8005ff4:	2010      	movs	r0, #16
 8005ff6:	f000 fdfd 	bl	8006bf4 <malloc>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	f8cb 001c 	str.w	r0, [fp, #28]
 8006000:	b920      	cbnz	r0, 800600c <_dtoa_r+0x34>
 8006002:	4ba7      	ldr	r3, [pc, #668]	@ (80062a0 <_dtoa_r+0x2c8>)
 8006004:	21ef      	movs	r1, #239	@ 0xef
 8006006:	48a7      	ldr	r0, [pc, #668]	@ (80062a4 <_dtoa_r+0x2cc>)
 8006008:	f001 fc68 	bl	80078dc <__assert_func>
 800600c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006010:	6007      	str	r7, [r0, #0]
 8006012:	60c7      	str	r7, [r0, #12]
 8006014:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006018:	6819      	ldr	r1, [r3, #0]
 800601a:	b159      	cbz	r1, 8006034 <_dtoa_r+0x5c>
 800601c:	685a      	ldr	r2, [r3, #4]
 800601e:	604a      	str	r2, [r1, #4]
 8006020:	2301      	movs	r3, #1
 8006022:	4093      	lsls	r3, r2
 8006024:	608b      	str	r3, [r1, #8]
 8006026:	4658      	mov	r0, fp
 8006028:	f000 feda 	bl	8006de0 <_Bfree>
 800602c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006030:	2200      	movs	r2, #0
 8006032:	601a      	str	r2, [r3, #0]
 8006034:	1e2b      	subs	r3, r5, #0
 8006036:	bfb9      	ittee	lt
 8006038:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800603c:	9303      	strlt	r3, [sp, #12]
 800603e:	2300      	movge	r3, #0
 8006040:	6033      	strge	r3, [r6, #0]
 8006042:	9f03      	ldr	r7, [sp, #12]
 8006044:	4b98      	ldr	r3, [pc, #608]	@ (80062a8 <_dtoa_r+0x2d0>)
 8006046:	bfbc      	itt	lt
 8006048:	2201      	movlt	r2, #1
 800604a:	6032      	strlt	r2, [r6, #0]
 800604c:	43bb      	bics	r3, r7
 800604e:	d112      	bne.n	8006076 <_dtoa_r+0x9e>
 8006050:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006052:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006056:	6013      	str	r3, [r2, #0]
 8006058:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800605c:	4323      	orrs	r3, r4
 800605e:	f000 854d 	beq.w	8006afc <_dtoa_r+0xb24>
 8006062:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006064:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80062bc <_dtoa_r+0x2e4>
 8006068:	2b00      	cmp	r3, #0
 800606a:	f000 854f 	beq.w	8006b0c <_dtoa_r+0xb34>
 800606e:	f10a 0303 	add.w	r3, sl, #3
 8006072:	f000 bd49 	b.w	8006b08 <_dtoa_r+0xb30>
 8006076:	ed9d 7b02 	vldr	d7, [sp, #8]
 800607a:	2200      	movs	r2, #0
 800607c:	ec51 0b17 	vmov	r0, r1, d7
 8006080:	2300      	movs	r3, #0
 8006082:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006086:	f7fa fd27 	bl	8000ad8 <__aeabi_dcmpeq>
 800608a:	4680      	mov	r8, r0
 800608c:	b158      	cbz	r0, 80060a6 <_dtoa_r+0xce>
 800608e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006090:	2301      	movs	r3, #1
 8006092:	6013      	str	r3, [r2, #0]
 8006094:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006096:	b113      	cbz	r3, 800609e <_dtoa_r+0xc6>
 8006098:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800609a:	4b84      	ldr	r3, [pc, #528]	@ (80062ac <_dtoa_r+0x2d4>)
 800609c:	6013      	str	r3, [r2, #0]
 800609e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80062c0 <_dtoa_r+0x2e8>
 80060a2:	f000 bd33 	b.w	8006b0c <_dtoa_r+0xb34>
 80060a6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80060aa:	aa16      	add	r2, sp, #88	@ 0x58
 80060ac:	a917      	add	r1, sp, #92	@ 0x5c
 80060ae:	4658      	mov	r0, fp
 80060b0:	f001 f980 	bl	80073b4 <__d2b>
 80060b4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80060b8:	4681      	mov	r9, r0
 80060ba:	2e00      	cmp	r6, #0
 80060bc:	d077      	beq.n	80061ae <_dtoa_r+0x1d6>
 80060be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80060c0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80060c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80060cc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80060d0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80060d4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80060d8:	4619      	mov	r1, r3
 80060da:	2200      	movs	r2, #0
 80060dc:	4b74      	ldr	r3, [pc, #464]	@ (80062b0 <_dtoa_r+0x2d8>)
 80060de:	f7fa f8db 	bl	8000298 <__aeabi_dsub>
 80060e2:	a369      	add	r3, pc, #420	@ (adr r3, 8006288 <_dtoa_r+0x2b0>)
 80060e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e8:	f7fa fa8e 	bl	8000608 <__aeabi_dmul>
 80060ec:	a368      	add	r3, pc, #416	@ (adr r3, 8006290 <_dtoa_r+0x2b8>)
 80060ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f2:	f7fa f8d3 	bl	800029c <__adddf3>
 80060f6:	4604      	mov	r4, r0
 80060f8:	4630      	mov	r0, r6
 80060fa:	460d      	mov	r5, r1
 80060fc:	f7fa fa1a 	bl	8000534 <__aeabi_i2d>
 8006100:	a365      	add	r3, pc, #404	@ (adr r3, 8006298 <_dtoa_r+0x2c0>)
 8006102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006106:	f7fa fa7f 	bl	8000608 <__aeabi_dmul>
 800610a:	4602      	mov	r2, r0
 800610c:	460b      	mov	r3, r1
 800610e:	4620      	mov	r0, r4
 8006110:	4629      	mov	r1, r5
 8006112:	f7fa f8c3 	bl	800029c <__adddf3>
 8006116:	4604      	mov	r4, r0
 8006118:	460d      	mov	r5, r1
 800611a:	f7fa fd25 	bl	8000b68 <__aeabi_d2iz>
 800611e:	2200      	movs	r2, #0
 8006120:	4607      	mov	r7, r0
 8006122:	2300      	movs	r3, #0
 8006124:	4620      	mov	r0, r4
 8006126:	4629      	mov	r1, r5
 8006128:	f7fa fce0 	bl	8000aec <__aeabi_dcmplt>
 800612c:	b140      	cbz	r0, 8006140 <_dtoa_r+0x168>
 800612e:	4638      	mov	r0, r7
 8006130:	f7fa fa00 	bl	8000534 <__aeabi_i2d>
 8006134:	4622      	mov	r2, r4
 8006136:	462b      	mov	r3, r5
 8006138:	f7fa fcce 	bl	8000ad8 <__aeabi_dcmpeq>
 800613c:	b900      	cbnz	r0, 8006140 <_dtoa_r+0x168>
 800613e:	3f01      	subs	r7, #1
 8006140:	2f16      	cmp	r7, #22
 8006142:	d851      	bhi.n	80061e8 <_dtoa_r+0x210>
 8006144:	4b5b      	ldr	r3, [pc, #364]	@ (80062b4 <_dtoa_r+0x2dc>)
 8006146:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800614a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800614e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006152:	f7fa fccb 	bl	8000aec <__aeabi_dcmplt>
 8006156:	2800      	cmp	r0, #0
 8006158:	d048      	beq.n	80061ec <_dtoa_r+0x214>
 800615a:	3f01      	subs	r7, #1
 800615c:	2300      	movs	r3, #0
 800615e:	9312      	str	r3, [sp, #72]	@ 0x48
 8006160:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006162:	1b9b      	subs	r3, r3, r6
 8006164:	1e5a      	subs	r2, r3, #1
 8006166:	bf44      	itt	mi
 8006168:	f1c3 0801 	rsbmi	r8, r3, #1
 800616c:	2300      	movmi	r3, #0
 800616e:	9208      	str	r2, [sp, #32]
 8006170:	bf54      	ite	pl
 8006172:	f04f 0800 	movpl.w	r8, #0
 8006176:	9308      	strmi	r3, [sp, #32]
 8006178:	2f00      	cmp	r7, #0
 800617a:	db39      	blt.n	80061f0 <_dtoa_r+0x218>
 800617c:	9b08      	ldr	r3, [sp, #32]
 800617e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006180:	443b      	add	r3, r7
 8006182:	9308      	str	r3, [sp, #32]
 8006184:	2300      	movs	r3, #0
 8006186:	930a      	str	r3, [sp, #40]	@ 0x28
 8006188:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800618a:	2b09      	cmp	r3, #9
 800618c:	d864      	bhi.n	8006258 <_dtoa_r+0x280>
 800618e:	2b05      	cmp	r3, #5
 8006190:	bfc4      	itt	gt
 8006192:	3b04      	subgt	r3, #4
 8006194:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006196:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006198:	f1a3 0302 	sub.w	r3, r3, #2
 800619c:	bfcc      	ite	gt
 800619e:	2400      	movgt	r4, #0
 80061a0:	2401      	movle	r4, #1
 80061a2:	2b03      	cmp	r3, #3
 80061a4:	d863      	bhi.n	800626e <_dtoa_r+0x296>
 80061a6:	e8df f003 	tbb	[pc, r3]
 80061aa:	372a      	.short	0x372a
 80061ac:	5535      	.short	0x5535
 80061ae:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80061b2:	441e      	add	r6, r3
 80061b4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80061b8:	2b20      	cmp	r3, #32
 80061ba:	bfc1      	itttt	gt
 80061bc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80061c0:	409f      	lslgt	r7, r3
 80061c2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80061c6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80061ca:	bfd6      	itet	le
 80061cc:	f1c3 0320 	rsble	r3, r3, #32
 80061d0:	ea47 0003 	orrgt.w	r0, r7, r3
 80061d4:	fa04 f003 	lslle.w	r0, r4, r3
 80061d8:	f7fa f99c 	bl	8000514 <__aeabi_ui2d>
 80061dc:	2201      	movs	r2, #1
 80061de:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80061e2:	3e01      	subs	r6, #1
 80061e4:	9214      	str	r2, [sp, #80]	@ 0x50
 80061e6:	e777      	b.n	80060d8 <_dtoa_r+0x100>
 80061e8:	2301      	movs	r3, #1
 80061ea:	e7b8      	b.n	800615e <_dtoa_r+0x186>
 80061ec:	9012      	str	r0, [sp, #72]	@ 0x48
 80061ee:	e7b7      	b.n	8006160 <_dtoa_r+0x188>
 80061f0:	427b      	negs	r3, r7
 80061f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80061f4:	2300      	movs	r3, #0
 80061f6:	eba8 0807 	sub.w	r8, r8, r7
 80061fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80061fc:	e7c4      	b.n	8006188 <_dtoa_r+0x1b0>
 80061fe:	2300      	movs	r3, #0
 8006200:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006202:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006204:	2b00      	cmp	r3, #0
 8006206:	dc35      	bgt.n	8006274 <_dtoa_r+0x29c>
 8006208:	2301      	movs	r3, #1
 800620a:	9300      	str	r3, [sp, #0]
 800620c:	9307      	str	r3, [sp, #28]
 800620e:	461a      	mov	r2, r3
 8006210:	920e      	str	r2, [sp, #56]	@ 0x38
 8006212:	e00b      	b.n	800622c <_dtoa_r+0x254>
 8006214:	2301      	movs	r3, #1
 8006216:	e7f3      	b.n	8006200 <_dtoa_r+0x228>
 8006218:	2300      	movs	r3, #0
 800621a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800621c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800621e:	18fb      	adds	r3, r7, r3
 8006220:	9300      	str	r3, [sp, #0]
 8006222:	3301      	adds	r3, #1
 8006224:	2b01      	cmp	r3, #1
 8006226:	9307      	str	r3, [sp, #28]
 8006228:	bfb8      	it	lt
 800622a:	2301      	movlt	r3, #1
 800622c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006230:	2100      	movs	r1, #0
 8006232:	2204      	movs	r2, #4
 8006234:	f102 0514 	add.w	r5, r2, #20
 8006238:	429d      	cmp	r5, r3
 800623a:	d91f      	bls.n	800627c <_dtoa_r+0x2a4>
 800623c:	6041      	str	r1, [r0, #4]
 800623e:	4658      	mov	r0, fp
 8006240:	f000 fd8e 	bl	8006d60 <_Balloc>
 8006244:	4682      	mov	sl, r0
 8006246:	2800      	cmp	r0, #0
 8006248:	d13c      	bne.n	80062c4 <_dtoa_r+0x2ec>
 800624a:	4b1b      	ldr	r3, [pc, #108]	@ (80062b8 <_dtoa_r+0x2e0>)
 800624c:	4602      	mov	r2, r0
 800624e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006252:	e6d8      	b.n	8006006 <_dtoa_r+0x2e>
 8006254:	2301      	movs	r3, #1
 8006256:	e7e0      	b.n	800621a <_dtoa_r+0x242>
 8006258:	2401      	movs	r4, #1
 800625a:	2300      	movs	r3, #0
 800625c:	9309      	str	r3, [sp, #36]	@ 0x24
 800625e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006260:	f04f 33ff 	mov.w	r3, #4294967295
 8006264:	9300      	str	r3, [sp, #0]
 8006266:	9307      	str	r3, [sp, #28]
 8006268:	2200      	movs	r2, #0
 800626a:	2312      	movs	r3, #18
 800626c:	e7d0      	b.n	8006210 <_dtoa_r+0x238>
 800626e:	2301      	movs	r3, #1
 8006270:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006272:	e7f5      	b.n	8006260 <_dtoa_r+0x288>
 8006274:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006276:	9300      	str	r3, [sp, #0]
 8006278:	9307      	str	r3, [sp, #28]
 800627a:	e7d7      	b.n	800622c <_dtoa_r+0x254>
 800627c:	3101      	adds	r1, #1
 800627e:	0052      	lsls	r2, r2, #1
 8006280:	e7d8      	b.n	8006234 <_dtoa_r+0x25c>
 8006282:	bf00      	nop
 8006284:	f3af 8000 	nop.w
 8006288:	636f4361 	.word	0x636f4361
 800628c:	3fd287a7 	.word	0x3fd287a7
 8006290:	8b60c8b3 	.word	0x8b60c8b3
 8006294:	3fc68a28 	.word	0x3fc68a28
 8006298:	509f79fb 	.word	0x509f79fb
 800629c:	3fd34413 	.word	0x3fd34413
 80062a0:	08008e9d 	.word	0x08008e9d
 80062a4:	08008eb4 	.word	0x08008eb4
 80062a8:	7ff00000 	.word	0x7ff00000
 80062ac:	08008e6d 	.word	0x08008e6d
 80062b0:	3ff80000 	.word	0x3ff80000
 80062b4:	08008fb0 	.word	0x08008fb0
 80062b8:	08008f0c 	.word	0x08008f0c
 80062bc:	08008e99 	.word	0x08008e99
 80062c0:	08008e6c 	.word	0x08008e6c
 80062c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80062c8:	6018      	str	r0, [r3, #0]
 80062ca:	9b07      	ldr	r3, [sp, #28]
 80062cc:	2b0e      	cmp	r3, #14
 80062ce:	f200 80a4 	bhi.w	800641a <_dtoa_r+0x442>
 80062d2:	2c00      	cmp	r4, #0
 80062d4:	f000 80a1 	beq.w	800641a <_dtoa_r+0x442>
 80062d8:	2f00      	cmp	r7, #0
 80062da:	dd33      	ble.n	8006344 <_dtoa_r+0x36c>
 80062dc:	4bad      	ldr	r3, [pc, #692]	@ (8006594 <_dtoa_r+0x5bc>)
 80062de:	f007 020f 	and.w	r2, r7, #15
 80062e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062e6:	ed93 7b00 	vldr	d7, [r3]
 80062ea:	05f8      	lsls	r0, r7, #23
 80062ec:	ed8d 7b04 	vstr	d7, [sp, #16]
 80062f0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80062f4:	d516      	bpl.n	8006324 <_dtoa_r+0x34c>
 80062f6:	4ba8      	ldr	r3, [pc, #672]	@ (8006598 <_dtoa_r+0x5c0>)
 80062f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80062fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006300:	f7fa faac 	bl	800085c <__aeabi_ddiv>
 8006304:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006308:	f004 040f 	and.w	r4, r4, #15
 800630c:	2603      	movs	r6, #3
 800630e:	4da2      	ldr	r5, [pc, #648]	@ (8006598 <_dtoa_r+0x5c0>)
 8006310:	b954      	cbnz	r4, 8006328 <_dtoa_r+0x350>
 8006312:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006316:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800631a:	f7fa fa9f 	bl	800085c <__aeabi_ddiv>
 800631e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006322:	e028      	b.n	8006376 <_dtoa_r+0x39e>
 8006324:	2602      	movs	r6, #2
 8006326:	e7f2      	b.n	800630e <_dtoa_r+0x336>
 8006328:	07e1      	lsls	r1, r4, #31
 800632a:	d508      	bpl.n	800633e <_dtoa_r+0x366>
 800632c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006330:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006334:	f7fa f968 	bl	8000608 <__aeabi_dmul>
 8006338:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800633c:	3601      	adds	r6, #1
 800633e:	1064      	asrs	r4, r4, #1
 8006340:	3508      	adds	r5, #8
 8006342:	e7e5      	b.n	8006310 <_dtoa_r+0x338>
 8006344:	f000 80d2 	beq.w	80064ec <_dtoa_r+0x514>
 8006348:	427c      	negs	r4, r7
 800634a:	4b92      	ldr	r3, [pc, #584]	@ (8006594 <_dtoa_r+0x5bc>)
 800634c:	4d92      	ldr	r5, [pc, #584]	@ (8006598 <_dtoa_r+0x5c0>)
 800634e:	f004 020f 	and.w	r2, r4, #15
 8006352:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800635a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800635e:	f7fa f953 	bl	8000608 <__aeabi_dmul>
 8006362:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006366:	1124      	asrs	r4, r4, #4
 8006368:	2300      	movs	r3, #0
 800636a:	2602      	movs	r6, #2
 800636c:	2c00      	cmp	r4, #0
 800636e:	f040 80b2 	bne.w	80064d6 <_dtoa_r+0x4fe>
 8006372:	2b00      	cmp	r3, #0
 8006374:	d1d3      	bne.n	800631e <_dtoa_r+0x346>
 8006376:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006378:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800637c:	2b00      	cmp	r3, #0
 800637e:	f000 80b7 	beq.w	80064f0 <_dtoa_r+0x518>
 8006382:	4b86      	ldr	r3, [pc, #536]	@ (800659c <_dtoa_r+0x5c4>)
 8006384:	2200      	movs	r2, #0
 8006386:	4620      	mov	r0, r4
 8006388:	4629      	mov	r1, r5
 800638a:	f7fa fbaf 	bl	8000aec <__aeabi_dcmplt>
 800638e:	2800      	cmp	r0, #0
 8006390:	f000 80ae 	beq.w	80064f0 <_dtoa_r+0x518>
 8006394:	9b07      	ldr	r3, [sp, #28]
 8006396:	2b00      	cmp	r3, #0
 8006398:	f000 80aa 	beq.w	80064f0 <_dtoa_r+0x518>
 800639c:	9b00      	ldr	r3, [sp, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	dd37      	ble.n	8006412 <_dtoa_r+0x43a>
 80063a2:	1e7b      	subs	r3, r7, #1
 80063a4:	9304      	str	r3, [sp, #16]
 80063a6:	4620      	mov	r0, r4
 80063a8:	4b7d      	ldr	r3, [pc, #500]	@ (80065a0 <_dtoa_r+0x5c8>)
 80063aa:	2200      	movs	r2, #0
 80063ac:	4629      	mov	r1, r5
 80063ae:	f7fa f92b 	bl	8000608 <__aeabi_dmul>
 80063b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063b6:	9c00      	ldr	r4, [sp, #0]
 80063b8:	3601      	adds	r6, #1
 80063ba:	4630      	mov	r0, r6
 80063bc:	f7fa f8ba 	bl	8000534 <__aeabi_i2d>
 80063c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063c4:	f7fa f920 	bl	8000608 <__aeabi_dmul>
 80063c8:	4b76      	ldr	r3, [pc, #472]	@ (80065a4 <_dtoa_r+0x5cc>)
 80063ca:	2200      	movs	r2, #0
 80063cc:	f7f9 ff66 	bl	800029c <__adddf3>
 80063d0:	4605      	mov	r5, r0
 80063d2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80063d6:	2c00      	cmp	r4, #0
 80063d8:	f040 808d 	bne.w	80064f6 <_dtoa_r+0x51e>
 80063dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063e0:	4b71      	ldr	r3, [pc, #452]	@ (80065a8 <_dtoa_r+0x5d0>)
 80063e2:	2200      	movs	r2, #0
 80063e4:	f7f9 ff58 	bl	8000298 <__aeabi_dsub>
 80063e8:	4602      	mov	r2, r0
 80063ea:	460b      	mov	r3, r1
 80063ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80063f0:	462a      	mov	r2, r5
 80063f2:	4633      	mov	r3, r6
 80063f4:	f7fa fb98 	bl	8000b28 <__aeabi_dcmpgt>
 80063f8:	2800      	cmp	r0, #0
 80063fa:	f040 828b 	bne.w	8006914 <_dtoa_r+0x93c>
 80063fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006402:	462a      	mov	r2, r5
 8006404:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006408:	f7fa fb70 	bl	8000aec <__aeabi_dcmplt>
 800640c:	2800      	cmp	r0, #0
 800640e:	f040 8128 	bne.w	8006662 <_dtoa_r+0x68a>
 8006412:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006416:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800641a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800641c:	2b00      	cmp	r3, #0
 800641e:	f2c0 815a 	blt.w	80066d6 <_dtoa_r+0x6fe>
 8006422:	2f0e      	cmp	r7, #14
 8006424:	f300 8157 	bgt.w	80066d6 <_dtoa_r+0x6fe>
 8006428:	4b5a      	ldr	r3, [pc, #360]	@ (8006594 <_dtoa_r+0x5bc>)
 800642a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800642e:	ed93 7b00 	vldr	d7, [r3]
 8006432:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006434:	2b00      	cmp	r3, #0
 8006436:	ed8d 7b00 	vstr	d7, [sp]
 800643a:	da03      	bge.n	8006444 <_dtoa_r+0x46c>
 800643c:	9b07      	ldr	r3, [sp, #28]
 800643e:	2b00      	cmp	r3, #0
 8006440:	f340 8101 	ble.w	8006646 <_dtoa_r+0x66e>
 8006444:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006448:	4656      	mov	r6, sl
 800644a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800644e:	4620      	mov	r0, r4
 8006450:	4629      	mov	r1, r5
 8006452:	f7fa fa03 	bl	800085c <__aeabi_ddiv>
 8006456:	f7fa fb87 	bl	8000b68 <__aeabi_d2iz>
 800645a:	4680      	mov	r8, r0
 800645c:	f7fa f86a 	bl	8000534 <__aeabi_i2d>
 8006460:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006464:	f7fa f8d0 	bl	8000608 <__aeabi_dmul>
 8006468:	4602      	mov	r2, r0
 800646a:	460b      	mov	r3, r1
 800646c:	4620      	mov	r0, r4
 800646e:	4629      	mov	r1, r5
 8006470:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006474:	f7f9 ff10 	bl	8000298 <__aeabi_dsub>
 8006478:	f806 4b01 	strb.w	r4, [r6], #1
 800647c:	9d07      	ldr	r5, [sp, #28]
 800647e:	eba6 040a 	sub.w	r4, r6, sl
 8006482:	42a5      	cmp	r5, r4
 8006484:	4602      	mov	r2, r0
 8006486:	460b      	mov	r3, r1
 8006488:	f040 8117 	bne.w	80066ba <_dtoa_r+0x6e2>
 800648c:	f7f9 ff06 	bl	800029c <__adddf3>
 8006490:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006494:	4604      	mov	r4, r0
 8006496:	460d      	mov	r5, r1
 8006498:	f7fa fb46 	bl	8000b28 <__aeabi_dcmpgt>
 800649c:	2800      	cmp	r0, #0
 800649e:	f040 80f9 	bne.w	8006694 <_dtoa_r+0x6bc>
 80064a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80064a6:	4620      	mov	r0, r4
 80064a8:	4629      	mov	r1, r5
 80064aa:	f7fa fb15 	bl	8000ad8 <__aeabi_dcmpeq>
 80064ae:	b118      	cbz	r0, 80064b8 <_dtoa_r+0x4e0>
 80064b0:	f018 0f01 	tst.w	r8, #1
 80064b4:	f040 80ee 	bne.w	8006694 <_dtoa_r+0x6bc>
 80064b8:	4649      	mov	r1, r9
 80064ba:	4658      	mov	r0, fp
 80064bc:	f000 fc90 	bl	8006de0 <_Bfree>
 80064c0:	2300      	movs	r3, #0
 80064c2:	7033      	strb	r3, [r6, #0]
 80064c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80064c6:	3701      	adds	r7, #1
 80064c8:	601f      	str	r7, [r3, #0]
 80064ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	f000 831d 	beq.w	8006b0c <_dtoa_r+0xb34>
 80064d2:	601e      	str	r6, [r3, #0]
 80064d4:	e31a      	b.n	8006b0c <_dtoa_r+0xb34>
 80064d6:	07e2      	lsls	r2, r4, #31
 80064d8:	d505      	bpl.n	80064e6 <_dtoa_r+0x50e>
 80064da:	e9d5 2300 	ldrd	r2, r3, [r5]
 80064de:	f7fa f893 	bl	8000608 <__aeabi_dmul>
 80064e2:	3601      	adds	r6, #1
 80064e4:	2301      	movs	r3, #1
 80064e6:	1064      	asrs	r4, r4, #1
 80064e8:	3508      	adds	r5, #8
 80064ea:	e73f      	b.n	800636c <_dtoa_r+0x394>
 80064ec:	2602      	movs	r6, #2
 80064ee:	e742      	b.n	8006376 <_dtoa_r+0x39e>
 80064f0:	9c07      	ldr	r4, [sp, #28]
 80064f2:	9704      	str	r7, [sp, #16]
 80064f4:	e761      	b.n	80063ba <_dtoa_r+0x3e2>
 80064f6:	4b27      	ldr	r3, [pc, #156]	@ (8006594 <_dtoa_r+0x5bc>)
 80064f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80064fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80064fe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006502:	4454      	add	r4, sl
 8006504:	2900      	cmp	r1, #0
 8006506:	d053      	beq.n	80065b0 <_dtoa_r+0x5d8>
 8006508:	4928      	ldr	r1, [pc, #160]	@ (80065ac <_dtoa_r+0x5d4>)
 800650a:	2000      	movs	r0, #0
 800650c:	f7fa f9a6 	bl	800085c <__aeabi_ddiv>
 8006510:	4633      	mov	r3, r6
 8006512:	462a      	mov	r2, r5
 8006514:	f7f9 fec0 	bl	8000298 <__aeabi_dsub>
 8006518:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800651c:	4656      	mov	r6, sl
 800651e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006522:	f7fa fb21 	bl	8000b68 <__aeabi_d2iz>
 8006526:	4605      	mov	r5, r0
 8006528:	f7fa f804 	bl	8000534 <__aeabi_i2d>
 800652c:	4602      	mov	r2, r0
 800652e:	460b      	mov	r3, r1
 8006530:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006534:	f7f9 feb0 	bl	8000298 <__aeabi_dsub>
 8006538:	3530      	adds	r5, #48	@ 0x30
 800653a:	4602      	mov	r2, r0
 800653c:	460b      	mov	r3, r1
 800653e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006542:	f806 5b01 	strb.w	r5, [r6], #1
 8006546:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800654a:	f7fa facf 	bl	8000aec <__aeabi_dcmplt>
 800654e:	2800      	cmp	r0, #0
 8006550:	d171      	bne.n	8006636 <_dtoa_r+0x65e>
 8006552:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006556:	4911      	ldr	r1, [pc, #68]	@ (800659c <_dtoa_r+0x5c4>)
 8006558:	2000      	movs	r0, #0
 800655a:	f7f9 fe9d 	bl	8000298 <__aeabi_dsub>
 800655e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006562:	f7fa fac3 	bl	8000aec <__aeabi_dcmplt>
 8006566:	2800      	cmp	r0, #0
 8006568:	f040 8095 	bne.w	8006696 <_dtoa_r+0x6be>
 800656c:	42a6      	cmp	r6, r4
 800656e:	f43f af50 	beq.w	8006412 <_dtoa_r+0x43a>
 8006572:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006576:	4b0a      	ldr	r3, [pc, #40]	@ (80065a0 <_dtoa_r+0x5c8>)
 8006578:	2200      	movs	r2, #0
 800657a:	f7fa f845 	bl	8000608 <__aeabi_dmul>
 800657e:	4b08      	ldr	r3, [pc, #32]	@ (80065a0 <_dtoa_r+0x5c8>)
 8006580:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006584:	2200      	movs	r2, #0
 8006586:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800658a:	f7fa f83d 	bl	8000608 <__aeabi_dmul>
 800658e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006592:	e7c4      	b.n	800651e <_dtoa_r+0x546>
 8006594:	08008fb0 	.word	0x08008fb0
 8006598:	08008f88 	.word	0x08008f88
 800659c:	3ff00000 	.word	0x3ff00000
 80065a0:	40240000 	.word	0x40240000
 80065a4:	401c0000 	.word	0x401c0000
 80065a8:	40140000 	.word	0x40140000
 80065ac:	3fe00000 	.word	0x3fe00000
 80065b0:	4631      	mov	r1, r6
 80065b2:	4628      	mov	r0, r5
 80065b4:	f7fa f828 	bl	8000608 <__aeabi_dmul>
 80065b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80065bc:	9415      	str	r4, [sp, #84]	@ 0x54
 80065be:	4656      	mov	r6, sl
 80065c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065c4:	f7fa fad0 	bl	8000b68 <__aeabi_d2iz>
 80065c8:	4605      	mov	r5, r0
 80065ca:	f7f9 ffb3 	bl	8000534 <__aeabi_i2d>
 80065ce:	4602      	mov	r2, r0
 80065d0:	460b      	mov	r3, r1
 80065d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065d6:	f7f9 fe5f 	bl	8000298 <__aeabi_dsub>
 80065da:	3530      	adds	r5, #48	@ 0x30
 80065dc:	f806 5b01 	strb.w	r5, [r6], #1
 80065e0:	4602      	mov	r2, r0
 80065e2:	460b      	mov	r3, r1
 80065e4:	42a6      	cmp	r6, r4
 80065e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80065ea:	f04f 0200 	mov.w	r2, #0
 80065ee:	d124      	bne.n	800663a <_dtoa_r+0x662>
 80065f0:	4bac      	ldr	r3, [pc, #688]	@ (80068a4 <_dtoa_r+0x8cc>)
 80065f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80065f6:	f7f9 fe51 	bl	800029c <__adddf3>
 80065fa:	4602      	mov	r2, r0
 80065fc:	460b      	mov	r3, r1
 80065fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006602:	f7fa fa91 	bl	8000b28 <__aeabi_dcmpgt>
 8006606:	2800      	cmp	r0, #0
 8006608:	d145      	bne.n	8006696 <_dtoa_r+0x6be>
 800660a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800660e:	49a5      	ldr	r1, [pc, #660]	@ (80068a4 <_dtoa_r+0x8cc>)
 8006610:	2000      	movs	r0, #0
 8006612:	f7f9 fe41 	bl	8000298 <__aeabi_dsub>
 8006616:	4602      	mov	r2, r0
 8006618:	460b      	mov	r3, r1
 800661a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800661e:	f7fa fa65 	bl	8000aec <__aeabi_dcmplt>
 8006622:	2800      	cmp	r0, #0
 8006624:	f43f aef5 	beq.w	8006412 <_dtoa_r+0x43a>
 8006628:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800662a:	1e73      	subs	r3, r6, #1
 800662c:	9315      	str	r3, [sp, #84]	@ 0x54
 800662e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006632:	2b30      	cmp	r3, #48	@ 0x30
 8006634:	d0f8      	beq.n	8006628 <_dtoa_r+0x650>
 8006636:	9f04      	ldr	r7, [sp, #16]
 8006638:	e73e      	b.n	80064b8 <_dtoa_r+0x4e0>
 800663a:	4b9b      	ldr	r3, [pc, #620]	@ (80068a8 <_dtoa_r+0x8d0>)
 800663c:	f7f9 ffe4 	bl	8000608 <__aeabi_dmul>
 8006640:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006644:	e7bc      	b.n	80065c0 <_dtoa_r+0x5e8>
 8006646:	d10c      	bne.n	8006662 <_dtoa_r+0x68a>
 8006648:	4b98      	ldr	r3, [pc, #608]	@ (80068ac <_dtoa_r+0x8d4>)
 800664a:	2200      	movs	r2, #0
 800664c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006650:	f7f9 ffda 	bl	8000608 <__aeabi_dmul>
 8006654:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006658:	f7fa fa5c 	bl	8000b14 <__aeabi_dcmpge>
 800665c:	2800      	cmp	r0, #0
 800665e:	f000 8157 	beq.w	8006910 <_dtoa_r+0x938>
 8006662:	2400      	movs	r4, #0
 8006664:	4625      	mov	r5, r4
 8006666:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006668:	43db      	mvns	r3, r3
 800666a:	9304      	str	r3, [sp, #16]
 800666c:	4656      	mov	r6, sl
 800666e:	2700      	movs	r7, #0
 8006670:	4621      	mov	r1, r4
 8006672:	4658      	mov	r0, fp
 8006674:	f000 fbb4 	bl	8006de0 <_Bfree>
 8006678:	2d00      	cmp	r5, #0
 800667a:	d0dc      	beq.n	8006636 <_dtoa_r+0x65e>
 800667c:	b12f      	cbz	r7, 800668a <_dtoa_r+0x6b2>
 800667e:	42af      	cmp	r7, r5
 8006680:	d003      	beq.n	800668a <_dtoa_r+0x6b2>
 8006682:	4639      	mov	r1, r7
 8006684:	4658      	mov	r0, fp
 8006686:	f000 fbab 	bl	8006de0 <_Bfree>
 800668a:	4629      	mov	r1, r5
 800668c:	4658      	mov	r0, fp
 800668e:	f000 fba7 	bl	8006de0 <_Bfree>
 8006692:	e7d0      	b.n	8006636 <_dtoa_r+0x65e>
 8006694:	9704      	str	r7, [sp, #16]
 8006696:	4633      	mov	r3, r6
 8006698:	461e      	mov	r6, r3
 800669a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800669e:	2a39      	cmp	r2, #57	@ 0x39
 80066a0:	d107      	bne.n	80066b2 <_dtoa_r+0x6da>
 80066a2:	459a      	cmp	sl, r3
 80066a4:	d1f8      	bne.n	8006698 <_dtoa_r+0x6c0>
 80066a6:	9a04      	ldr	r2, [sp, #16]
 80066a8:	3201      	adds	r2, #1
 80066aa:	9204      	str	r2, [sp, #16]
 80066ac:	2230      	movs	r2, #48	@ 0x30
 80066ae:	f88a 2000 	strb.w	r2, [sl]
 80066b2:	781a      	ldrb	r2, [r3, #0]
 80066b4:	3201      	adds	r2, #1
 80066b6:	701a      	strb	r2, [r3, #0]
 80066b8:	e7bd      	b.n	8006636 <_dtoa_r+0x65e>
 80066ba:	4b7b      	ldr	r3, [pc, #492]	@ (80068a8 <_dtoa_r+0x8d0>)
 80066bc:	2200      	movs	r2, #0
 80066be:	f7f9 ffa3 	bl	8000608 <__aeabi_dmul>
 80066c2:	2200      	movs	r2, #0
 80066c4:	2300      	movs	r3, #0
 80066c6:	4604      	mov	r4, r0
 80066c8:	460d      	mov	r5, r1
 80066ca:	f7fa fa05 	bl	8000ad8 <__aeabi_dcmpeq>
 80066ce:	2800      	cmp	r0, #0
 80066d0:	f43f aebb 	beq.w	800644a <_dtoa_r+0x472>
 80066d4:	e6f0      	b.n	80064b8 <_dtoa_r+0x4e0>
 80066d6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80066d8:	2a00      	cmp	r2, #0
 80066da:	f000 80db 	beq.w	8006894 <_dtoa_r+0x8bc>
 80066de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80066e0:	2a01      	cmp	r2, #1
 80066e2:	f300 80bf 	bgt.w	8006864 <_dtoa_r+0x88c>
 80066e6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80066e8:	2a00      	cmp	r2, #0
 80066ea:	f000 80b7 	beq.w	800685c <_dtoa_r+0x884>
 80066ee:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80066f2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80066f4:	4646      	mov	r6, r8
 80066f6:	9a08      	ldr	r2, [sp, #32]
 80066f8:	2101      	movs	r1, #1
 80066fa:	441a      	add	r2, r3
 80066fc:	4658      	mov	r0, fp
 80066fe:	4498      	add	r8, r3
 8006700:	9208      	str	r2, [sp, #32]
 8006702:	f000 fc21 	bl	8006f48 <__i2b>
 8006706:	4605      	mov	r5, r0
 8006708:	b15e      	cbz	r6, 8006722 <_dtoa_r+0x74a>
 800670a:	9b08      	ldr	r3, [sp, #32]
 800670c:	2b00      	cmp	r3, #0
 800670e:	dd08      	ble.n	8006722 <_dtoa_r+0x74a>
 8006710:	42b3      	cmp	r3, r6
 8006712:	9a08      	ldr	r2, [sp, #32]
 8006714:	bfa8      	it	ge
 8006716:	4633      	movge	r3, r6
 8006718:	eba8 0803 	sub.w	r8, r8, r3
 800671c:	1af6      	subs	r6, r6, r3
 800671e:	1ad3      	subs	r3, r2, r3
 8006720:	9308      	str	r3, [sp, #32]
 8006722:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006724:	b1f3      	cbz	r3, 8006764 <_dtoa_r+0x78c>
 8006726:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006728:	2b00      	cmp	r3, #0
 800672a:	f000 80b7 	beq.w	800689c <_dtoa_r+0x8c4>
 800672e:	b18c      	cbz	r4, 8006754 <_dtoa_r+0x77c>
 8006730:	4629      	mov	r1, r5
 8006732:	4622      	mov	r2, r4
 8006734:	4658      	mov	r0, fp
 8006736:	f000 fcc7 	bl	80070c8 <__pow5mult>
 800673a:	464a      	mov	r2, r9
 800673c:	4601      	mov	r1, r0
 800673e:	4605      	mov	r5, r0
 8006740:	4658      	mov	r0, fp
 8006742:	f000 fc17 	bl	8006f74 <__multiply>
 8006746:	4649      	mov	r1, r9
 8006748:	9004      	str	r0, [sp, #16]
 800674a:	4658      	mov	r0, fp
 800674c:	f000 fb48 	bl	8006de0 <_Bfree>
 8006750:	9b04      	ldr	r3, [sp, #16]
 8006752:	4699      	mov	r9, r3
 8006754:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006756:	1b1a      	subs	r2, r3, r4
 8006758:	d004      	beq.n	8006764 <_dtoa_r+0x78c>
 800675a:	4649      	mov	r1, r9
 800675c:	4658      	mov	r0, fp
 800675e:	f000 fcb3 	bl	80070c8 <__pow5mult>
 8006762:	4681      	mov	r9, r0
 8006764:	2101      	movs	r1, #1
 8006766:	4658      	mov	r0, fp
 8006768:	f000 fbee 	bl	8006f48 <__i2b>
 800676c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800676e:	4604      	mov	r4, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	f000 81cf 	beq.w	8006b14 <_dtoa_r+0xb3c>
 8006776:	461a      	mov	r2, r3
 8006778:	4601      	mov	r1, r0
 800677a:	4658      	mov	r0, fp
 800677c:	f000 fca4 	bl	80070c8 <__pow5mult>
 8006780:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006782:	2b01      	cmp	r3, #1
 8006784:	4604      	mov	r4, r0
 8006786:	f300 8095 	bgt.w	80068b4 <_dtoa_r+0x8dc>
 800678a:	9b02      	ldr	r3, [sp, #8]
 800678c:	2b00      	cmp	r3, #0
 800678e:	f040 8087 	bne.w	80068a0 <_dtoa_r+0x8c8>
 8006792:	9b03      	ldr	r3, [sp, #12]
 8006794:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006798:	2b00      	cmp	r3, #0
 800679a:	f040 8089 	bne.w	80068b0 <_dtoa_r+0x8d8>
 800679e:	9b03      	ldr	r3, [sp, #12]
 80067a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80067a4:	0d1b      	lsrs	r3, r3, #20
 80067a6:	051b      	lsls	r3, r3, #20
 80067a8:	b12b      	cbz	r3, 80067b6 <_dtoa_r+0x7de>
 80067aa:	9b08      	ldr	r3, [sp, #32]
 80067ac:	3301      	adds	r3, #1
 80067ae:	9308      	str	r3, [sp, #32]
 80067b0:	f108 0801 	add.w	r8, r8, #1
 80067b4:	2301      	movs	r3, #1
 80067b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80067b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	f000 81b0 	beq.w	8006b20 <_dtoa_r+0xb48>
 80067c0:	6923      	ldr	r3, [r4, #16]
 80067c2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80067c6:	6918      	ldr	r0, [r3, #16]
 80067c8:	f000 fb72 	bl	8006eb0 <__hi0bits>
 80067cc:	f1c0 0020 	rsb	r0, r0, #32
 80067d0:	9b08      	ldr	r3, [sp, #32]
 80067d2:	4418      	add	r0, r3
 80067d4:	f010 001f 	ands.w	r0, r0, #31
 80067d8:	d077      	beq.n	80068ca <_dtoa_r+0x8f2>
 80067da:	f1c0 0320 	rsb	r3, r0, #32
 80067de:	2b04      	cmp	r3, #4
 80067e0:	dd6b      	ble.n	80068ba <_dtoa_r+0x8e2>
 80067e2:	9b08      	ldr	r3, [sp, #32]
 80067e4:	f1c0 001c 	rsb	r0, r0, #28
 80067e8:	4403      	add	r3, r0
 80067ea:	4480      	add	r8, r0
 80067ec:	4406      	add	r6, r0
 80067ee:	9308      	str	r3, [sp, #32]
 80067f0:	f1b8 0f00 	cmp.w	r8, #0
 80067f4:	dd05      	ble.n	8006802 <_dtoa_r+0x82a>
 80067f6:	4649      	mov	r1, r9
 80067f8:	4642      	mov	r2, r8
 80067fa:	4658      	mov	r0, fp
 80067fc:	f000 fcbe 	bl	800717c <__lshift>
 8006800:	4681      	mov	r9, r0
 8006802:	9b08      	ldr	r3, [sp, #32]
 8006804:	2b00      	cmp	r3, #0
 8006806:	dd05      	ble.n	8006814 <_dtoa_r+0x83c>
 8006808:	4621      	mov	r1, r4
 800680a:	461a      	mov	r2, r3
 800680c:	4658      	mov	r0, fp
 800680e:	f000 fcb5 	bl	800717c <__lshift>
 8006812:	4604      	mov	r4, r0
 8006814:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006816:	2b00      	cmp	r3, #0
 8006818:	d059      	beq.n	80068ce <_dtoa_r+0x8f6>
 800681a:	4621      	mov	r1, r4
 800681c:	4648      	mov	r0, r9
 800681e:	f000 fd19 	bl	8007254 <__mcmp>
 8006822:	2800      	cmp	r0, #0
 8006824:	da53      	bge.n	80068ce <_dtoa_r+0x8f6>
 8006826:	1e7b      	subs	r3, r7, #1
 8006828:	9304      	str	r3, [sp, #16]
 800682a:	4649      	mov	r1, r9
 800682c:	2300      	movs	r3, #0
 800682e:	220a      	movs	r2, #10
 8006830:	4658      	mov	r0, fp
 8006832:	f000 faf7 	bl	8006e24 <__multadd>
 8006836:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006838:	4681      	mov	r9, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	f000 8172 	beq.w	8006b24 <_dtoa_r+0xb4c>
 8006840:	2300      	movs	r3, #0
 8006842:	4629      	mov	r1, r5
 8006844:	220a      	movs	r2, #10
 8006846:	4658      	mov	r0, fp
 8006848:	f000 faec 	bl	8006e24 <__multadd>
 800684c:	9b00      	ldr	r3, [sp, #0]
 800684e:	2b00      	cmp	r3, #0
 8006850:	4605      	mov	r5, r0
 8006852:	dc67      	bgt.n	8006924 <_dtoa_r+0x94c>
 8006854:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006856:	2b02      	cmp	r3, #2
 8006858:	dc41      	bgt.n	80068de <_dtoa_r+0x906>
 800685a:	e063      	b.n	8006924 <_dtoa_r+0x94c>
 800685c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800685e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006862:	e746      	b.n	80066f2 <_dtoa_r+0x71a>
 8006864:	9b07      	ldr	r3, [sp, #28]
 8006866:	1e5c      	subs	r4, r3, #1
 8006868:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800686a:	42a3      	cmp	r3, r4
 800686c:	bfbf      	itttt	lt
 800686e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006870:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006872:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006874:	1ae3      	sublt	r3, r4, r3
 8006876:	bfb4      	ite	lt
 8006878:	18d2      	addlt	r2, r2, r3
 800687a:	1b1c      	subge	r4, r3, r4
 800687c:	9b07      	ldr	r3, [sp, #28]
 800687e:	bfbc      	itt	lt
 8006880:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006882:	2400      	movlt	r4, #0
 8006884:	2b00      	cmp	r3, #0
 8006886:	bfb5      	itete	lt
 8006888:	eba8 0603 	sublt.w	r6, r8, r3
 800688c:	9b07      	ldrge	r3, [sp, #28]
 800688e:	2300      	movlt	r3, #0
 8006890:	4646      	movge	r6, r8
 8006892:	e730      	b.n	80066f6 <_dtoa_r+0x71e>
 8006894:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006896:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006898:	4646      	mov	r6, r8
 800689a:	e735      	b.n	8006708 <_dtoa_r+0x730>
 800689c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800689e:	e75c      	b.n	800675a <_dtoa_r+0x782>
 80068a0:	2300      	movs	r3, #0
 80068a2:	e788      	b.n	80067b6 <_dtoa_r+0x7de>
 80068a4:	3fe00000 	.word	0x3fe00000
 80068a8:	40240000 	.word	0x40240000
 80068ac:	40140000 	.word	0x40140000
 80068b0:	9b02      	ldr	r3, [sp, #8]
 80068b2:	e780      	b.n	80067b6 <_dtoa_r+0x7de>
 80068b4:	2300      	movs	r3, #0
 80068b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80068b8:	e782      	b.n	80067c0 <_dtoa_r+0x7e8>
 80068ba:	d099      	beq.n	80067f0 <_dtoa_r+0x818>
 80068bc:	9a08      	ldr	r2, [sp, #32]
 80068be:	331c      	adds	r3, #28
 80068c0:	441a      	add	r2, r3
 80068c2:	4498      	add	r8, r3
 80068c4:	441e      	add	r6, r3
 80068c6:	9208      	str	r2, [sp, #32]
 80068c8:	e792      	b.n	80067f0 <_dtoa_r+0x818>
 80068ca:	4603      	mov	r3, r0
 80068cc:	e7f6      	b.n	80068bc <_dtoa_r+0x8e4>
 80068ce:	9b07      	ldr	r3, [sp, #28]
 80068d0:	9704      	str	r7, [sp, #16]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	dc20      	bgt.n	8006918 <_dtoa_r+0x940>
 80068d6:	9300      	str	r3, [sp, #0]
 80068d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068da:	2b02      	cmp	r3, #2
 80068dc:	dd1e      	ble.n	800691c <_dtoa_r+0x944>
 80068de:	9b00      	ldr	r3, [sp, #0]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	f47f aec0 	bne.w	8006666 <_dtoa_r+0x68e>
 80068e6:	4621      	mov	r1, r4
 80068e8:	2205      	movs	r2, #5
 80068ea:	4658      	mov	r0, fp
 80068ec:	f000 fa9a 	bl	8006e24 <__multadd>
 80068f0:	4601      	mov	r1, r0
 80068f2:	4604      	mov	r4, r0
 80068f4:	4648      	mov	r0, r9
 80068f6:	f000 fcad 	bl	8007254 <__mcmp>
 80068fa:	2800      	cmp	r0, #0
 80068fc:	f77f aeb3 	ble.w	8006666 <_dtoa_r+0x68e>
 8006900:	4656      	mov	r6, sl
 8006902:	2331      	movs	r3, #49	@ 0x31
 8006904:	f806 3b01 	strb.w	r3, [r6], #1
 8006908:	9b04      	ldr	r3, [sp, #16]
 800690a:	3301      	adds	r3, #1
 800690c:	9304      	str	r3, [sp, #16]
 800690e:	e6ae      	b.n	800666e <_dtoa_r+0x696>
 8006910:	9c07      	ldr	r4, [sp, #28]
 8006912:	9704      	str	r7, [sp, #16]
 8006914:	4625      	mov	r5, r4
 8006916:	e7f3      	b.n	8006900 <_dtoa_r+0x928>
 8006918:	9b07      	ldr	r3, [sp, #28]
 800691a:	9300      	str	r3, [sp, #0]
 800691c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800691e:	2b00      	cmp	r3, #0
 8006920:	f000 8104 	beq.w	8006b2c <_dtoa_r+0xb54>
 8006924:	2e00      	cmp	r6, #0
 8006926:	dd05      	ble.n	8006934 <_dtoa_r+0x95c>
 8006928:	4629      	mov	r1, r5
 800692a:	4632      	mov	r2, r6
 800692c:	4658      	mov	r0, fp
 800692e:	f000 fc25 	bl	800717c <__lshift>
 8006932:	4605      	mov	r5, r0
 8006934:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006936:	2b00      	cmp	r3, #0
 8006938:	d05a      	beq.n	80069f0 <_dtoa_r+0xa18>
 800693a:	6869      	ldr	r1, [r5, #4]
 800693c:	4658      	mov	r0, fp
 800693e:	f000 fa0f 	bl	8006d60 <_Balloc>
 8006942:	4606      	mov	r6, r0
 8006944:	b928      	cbnz	r0, 8006952 <_dtoa_r+0x97a>
 8006946:	4b84      	ldr	r3, [pc, #528]	@ (8006b58 <_dtoa_r+0xb80>)
 8006948:	4602      	mov	r2, r0
 800694a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800694e:	f7ff bb5a 	b.w	8006006 <_dtoa_r+0x2e>
 8006952:	692a      	ldr	r2, [r5, #16]
 8006954:	3202      	adds	r2, #2
 8006956:	0092      	lsls	r2, r2, #2
 8006958:	f105 010c 	add.w	r1, r5, #12
 800695c:	300c      	adds	r0, #12
 800695e:	f000 ffaf 	bl	80078c0 <memcpy>
 8006962:	2201      	movs	r2, #1
 8006964:	4631      	mov	r1, r6
 8006966:	4658      	mov	r0, fp
 8006968:	f000 fc08 	bl	800717c <__lshift>
 800696c:	f10a 0301 	add.w	r3, sl, #1
 8006970:	9307      	str	r3, [sp, #28]
 8006972:	9b00      	ldr	r3, [sp, #0]
 8006974:	4453      	add	r3, sl
 8006976:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006978:	9b02      	ldr	r3, [sp, #8]
 800697a:	f003 0301 	and.w	r3, r3, #1
 800697e:	462f      	mov	r7, r5
 8006980:	930a      	str	r3, [sp, #40]	@ 0x28
 8006982:	4605      	mov	r5, r0
 8006984:	9b07      	ldr	r3, [sp, #28]
 8006986:	4621      	mov	r1, r4
 8006988:	3b01      	subs	r3, #1
 800698a:	4648      	mov	r0, r9
 800698c:	9300      	str	r3, [sp, #0]
 800698e:	f7ff fa9a 	bl	8005ec6 <quorem>
 8006992:	4639      	mov	r1, r7
 8006994:	9002      	str	r0, [sp, #8]
 8006996:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800699a:	4648      	mov	r0, r9
 800699c:	f000 fc5a 	bl	8007254 <__mcmp>
 80069a0:	462a      	mov	r2, r5
 80069a2:	9008      	str	r0, [sp, #32]
 80069a4:	4621      	mov	r1, r4
 80069a6:	4658      	mov	r0, fp
 80069a8:	f000 fc70 	bl	800728c <__mdiff>
 80069ac:	68c2      	ldr	r2, [r0, #12]
 80069ae:	4606      	mov	r6, r0
 80069b0:	bb02      	cbnz	r2, 80069f4 <_dtoa_r+0xa1c>
 80069b2:	4601      	mov	r1, r0
 80069b4:	4648      	mov	r0, r9
 80069b6:	f000 fc4d 	bl	8007254 <__mcmp>
 80069ba:	4602      	mov	r2, r0
 80069bc:	4631      	mov	r1, r6
 80069be:	4658      	mov	r0, fp
 80069c0:	920e      	str	r2, [sp, #56]	@ 0x38
 80069c2:	f000 fa0d 	bl	8006de0 <_Bfree>
 80069c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069c8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80069ca:	9e07      	ldr	r6, [sp, #28]
 80069cc:	ea43 0102 	orr.w	r1, r3, r2
 80069d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80069d2:	4319      	orrs	r1, r3
 80069d4:	d110      	bne.n	80069f8 <_dtoa_r+0xa20>
 80069d6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80069da:	d029      	beq.n	8006a30 <_dtoa_r+0xa58>
 80069dc:	9b08      	ldr	r3, [sp, #32]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	dd02      	ble.n	80069e8 <_dtoa_r+0xa10>
 80069e2:	9b02      	ldr	r3, [sp, #8]
 80069e4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80069e8:	9b00      	ldr	r3, [sp, #0]
 80069ea:	f883 8000 	strb.w	r8, [r3]
 80069ee:	e63f      	b.n	8006670 <_dtoa_r+0x698>
 80069f0:	4628      	mov	r0, r5
 80069f2:	e7bb      	b.n	800696c <_dtoa_r+0x994>
 80069f4:	2201      	movs	r2, #1
 80069f6:	e7e1      	b.n	80069bc <_dtoa_r+0x9e4>
 80069f8:	9b08      	ldr	r3, [sp, #32]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	db04      	blt.n	8006a08 <_dtoa_r+0xa30>
 80069fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006a00:	430b      	orrs	r3, r1
 8006a02:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006a04:	430b      	orrs	r3, r1
 8006a06:	d120      	bne.n	8006a4a <_dtoa_r+0xa72>
 8006a08:	2a00      	cmp	r2, #0
 8006a0a:	dded      	ble.n	80069e8 <_dtoa_r+0xa10>
 8006a0c:	4649      	mov	r1, r9
 8006a0e:	2201      	movs	r2, #1
 8006a10:	4658      	mov	r0, fp
 8006a12:	f000 fbb3 	bl	800717c <__lshift>
 8006a16:	4621      	mov	r1, r4
 8006a18:	4681      	mov	r9, r0
 8006a1a:	f000 fc1b 	bl	8007254 <__mcmp>
 8006a1e:	2800      	cmp	r0, #0
 8006a20:	dc03      	bgt.n	8006a2a <_dtoa_r+0xa52>
 8006a22:	d1e1      	bne.n	80069e8 <_dtoa_r+0xa10>
 8006a24:	f018 0f01 	tst.w	r8, #1
 8006a28:	d0de      	beq.n	80069e8 <_dtoa_r+0xa10>
 8006a2a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006a2e:	d1d8      	bne.n	80069e2 <_dtoa_r+0xa0a>
 8006a30:	9a00      	ldr	r2, [sp, #0]
 8006a32:	2339      	movs	r3, #57	@ 0x39
 8006a34:	7013      	strb	r3, [r2, #0]
 8006a36:	4633      	mov	r3, r6
 8006a38:	461e      	mov	r6, r3
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006a40:	2a39      	cmp	r2, #57	@ 0x39
 8006a42:	d052      	beq.n	8006aea <_dtoa_r+0xb12>
 8006a44:	3201      	adds	r2, #1
 8006a46:	701a      	strb	r2, [r3, #0]
 8006a48:	e612      	b.n	8006670 <_dtoa_r+0x698>
 8006a4a:	2a00      	cmp	r2, #0
 8006a4c:	dd07      	ble.n	8006a5e <_dtoa_r+0xa86>
 8006a4e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006a52:	d0ed      	beq.n	8006a30 <_dtoa_r+0xa58>
 8006a54:	9a00      	ldr	r2, [sp, #0]
 8006a56:	f108 0301 	add.w	r3, r8, #1
 8006a5a:	7013      	strb	r3, [r2, #0]
 8006a5c:	e608      	b.n	8006670 <_dtoa_r+0x698>
 8006a5e:	9b07      	ldr	r3, [sp, #28]
 8006a60:	9a07      	ldr	r2, [sp, #28]
 8006a62:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006a66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d028      	beq.n	8006abe <_dtoa_r+0xae6>
 8006a6c:	4649      	mov	r1, r9
 8006a6e:	2300      	movs	r3, #0
 8006a70:	220a      	movs	r2, #10
 8006a72:	4658      	mov	r0, fp
 8006a74:	f000 f9d6 	bl	8006e24 <__multadd>
 8006a78:	42af      	cmp	r7, r5
 8006a7a:	4681      	mov	r9, r0
 8006a7c:	f04f 0300 	mov.w	r3, #0
 8006a80:	f04f 020a 	mov.w	r2, #10
 8006a84:	4639      	mov	r1, r7
 8006a86:	4658      	mov	r0, fp
 8006a88:	d107      	bne.n	8006a9a <_dtoa_r+0xac2>
 8006a8a:	f000 f9cb 	bl	8006e24 <__multadd>
 8006a8e:	4607      	mov	r7, r0
 8006a90:	4605      	mov	r5, r0
 8006a92:	9b07      	ldr	r3, [sp, #28]
 8006a94:	3301      	adds	r3, #1
 8006a96:	9307      	str	r3, [sp, #28]
 8006a98:	e774      	b.n	8006984 <_dtoa_r+0x9ac>
 8006a9a:	f000 f9c3 	bl	8006e24 <__multadd>
 8006a9e:	4629      	mov	r1, r5
 8006aa0:	4607      	mov	r7, r0
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	220a      	movs	r2, #10
 8006aa6:	4658      	mov	r0, fp
 8006aa8:	f000 f9bc 	bl	8006e24 <__multadd>
 8006aac:	4605      	mov	r5, r0
 8006aae:	e7f0      	b.n	8006a92 <_dtoa_r+0xaba>
 8006ab0:	9b00      	ldr	r3, [sp, #0]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	bfcc      	ite	gt
 8006ab6:	461e      	movgt	r6, r3
 8006ab8:	2601      	movle	r6, #1
 8006aba:	4456      	add	r6, sl
 8006abc:	2700      	movs	r7, #0
 8006abe:	4649      	mov	r1, r9
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	4658      	mov	r0, fp
 8006ac4:	f000 fb5a 	bl	800717c <__lshift>
 8006ac8:	4621      	mov	r1, r4
 8006aca:	4681      	mov	r9, r0
 8006acc:	f000 fbc2 	bl	8007254 <__mcmp>
 8006ad0:	2800      	cmp	r0, #0
 8006ad2:	dcb0      	bgt.n	8006a36 <_dtoa_r+0xa5e>
 8006ad4:	d102      	bne.n	8006adc <_dtoa_r+0xb04>
 8006ad6:	f018 0f01 	tst.w	r8, #1
 8006ada:	d1ac      	bne.n	8006a36 <_dtoa_r+0xa5e>
 8006adc:	4633      	mov	r3, r6
 8006ade:	461e      	mov	r6, r3
 8006ae0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ae4:	2a30      	cmp	r2, #48	@ 0x30
 8006ae6:	d0fa      	beq.n	8006ade <_dtoa_r+0xb06>
 8006ae8:	e5c2      	b.n	8006670 <_dtoa_r+0x698>
 8006aea:	459a      	cmp	sl, r3
 8006aec:	d1a4      	bne.n	8006a38 <_dtoa_r+0xa60>
 8006aee:	9b04      	ldr	r3, [sp, #16]
 8006af0:	3301      	adds	r3, #1
 8006af2:	9304      	str	r3, [sp, #16]
 8006af4:	2331      	movs	r3, #49	@ 0x31
 8006af6:	f88a 3000 	strb.w	r3, [sl]
 8006afa:	e5b9      	b.n	8006670 <_dtoa_r+0x698>
 8006afc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006afe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006b5c <_dtoa_r+0xb84>
 8006b02:	b11b      	cbz	r3, 8006b0c <_dtoa_r+0xb34>
 8006b04:	f10a 0308 	add.w	r3, sl, #8
 8006b08:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006b0a:	6013      	str	r3, [r2, #0]
 8006b0c:	4650      	mov	r0, sl
 8006b0e:	b019      	add	sp, #100	@ 0x64
 8006b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	f77f ae37 	ble.w	800678a <_dtoa_r+0x7b2>
 8006b1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006b1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b20:	2001      	movs	r0, #1
 8006b22:	e655      	b.n	80067d0 <_dtoa_r+0x7f8>
 8006b24:	9b00      	ldr	r3, [sp, #0]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f77f aed6 	ble.w	80068d8 <_dtoa_r+0x900>
 8006b2c:	4656      	mov	r6, sl
 8006b2e:	4621      	mov	r1, r4
 8006b30:	4648      	mov	r0, r9
 8006b32:	f7ff f9c8 	bl	8005ec6 <quorem>
 8006b36:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006b3a:	f806 8b01 	strb.w	r8, [r6], #1
 8006b3e:	9b00      	ldr	r3, [sp, #0]
 8006b40:	eba6 020a 	sub.w	r2, r6, sl
 8006b44:	4293      	cmp	r3, r2
 8006b46:	ddb3      	ble.n	8006ab0 <_dtoa_r+0xad8>
 8006b48:	4649      	mov	r1, r9
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	220a      	movs	r2, #10
 8006b4e:	4658      	mov	r0, fp
 8006b50:	f000 f968 	bl	8006e24 <__multadd>
 8006b54:	4681      	mov	r9, r0
 8006b56:	e7ea      	b.n	8006b2e <_dtoa_r+0xb56>
 8006b58:	08008f0c 	.word	0x08008f0c
 8006b5c:	08008e90 	.word	0x08008e90

08006b60 <_free_r>:
 8006b60:	b538      	push	{r3, r4, r5, lr}
 8006b62:	4605      	mov	r5, r0
 8006b64:	2900      	cmp	r1, #0
 8006b66:	d041      	beq.n	8006bec <_free_r+0x8c>
 8006b68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b6c:	1f0c      	subs	r4, r1, #4
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	bfb8      	it	lt
 8006b72:	18e4      	addlt	r4, r4, r3
 8006b74:	f000 f8e8 	bl	8006d48 <__malloc_lock>
 8006b78:	4a1d      	ldr	r2, [pc, #116]	@ (8006bf0 <_free_r+0x90>)
 8006b7a:	6813      	ldr	r3, [r2, #0]
 8006b7c:	b933      	cbnz	r3, 8006b8c <_free_r+0x2c>
 8006b7e:	6063      	str	r3, [r4, #4]
 8006b80:	6014      	str	r4, [r2, #0]
 8006b82:	4628      	mov	r0, r5
 8006b84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b88:	f000 b8e4 	b.w	8006d54 <__malloc_unlock>
 8006b8c:	42a3      	cmp	r3, r4
 8006b8e:	d908      	bls.n	8006ba2 <_free_r+0x42>
 8006b90:	6820      	ldr	r0, [r4, #0]
 8006b92:	1821      	adds	r1, r4, r0
 8006b94:	428b      	cmp	r3, r1
 8006b96:	bf01      	itttt	eq
 8006b98:	6819      	ldreq	r1, [r3, #0]
 8006b9a:	685b      	ldreq	r3, [r3, #4]
 8006b9c:	1809      	addeq	r1, r1, r0
 8006b9e:	6021      	streq	r1, [r4, #0]
 8006ba0:	e7ed      	b.n	8006b7e <_free_r+0x1e>
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	b10b      	cbz	r3, 8006bac <_free_r+0x4c>
 8006ba8:	42a3      	cmp	r3, r4
 8006baa:	d9fa      	bls.n	8006ba2 <_free_r+0x42>
 8006bac:	6811      	ldr	r1, [r2, #0]
 8006bae:	1850      	adds	r0, r2, r1
 8006bb0:	42a0      	cmp	r0, r4
 8006bb2:	d10b      	bne.n	8006bcc <_free_r+0x6c>
 8006bb4:	6820      	ldr	r0, [r4, #0]
 8006bb6:	4401      	add	r1, r0
 8006bb8:	1850      	adds	r0, r2, r1
 8006bba:	4283      	cmp	r3, r0
 8006bbc:	6011      	str	r1, [r2, #0]
 8006bbe:	d1e0      	bne.n	8006b82 <_free_r+0x22>
 8006bc0:	6818      	ldr	r0, [r3, #0]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	6053      	str	r3, [r2, #4]
 8006bc6:	4408      	add	r0, r1
 8006bc8:	6010      	str	r0, [r2, #0]
 8006bca:	e7da      	b.n	8006b82 <_free_r+0x22>
 8006bcc:	d902      	bls.n	8006bd4 <_free_r+0x74>
 8006bce:	230c      	movs	r3, #12
 8006bd0:	602b      	str	r3, [r5, #0]
 8006bd2:	e7d6      	b.n	8006b82 <_free_r+0x22>
 8006bd4:	6820      	ldr	r0, [r4, #0]
 8006bd6:	1821      	adds	r1, r4, r0
 8006bd8:	428b      	cmp	r3, r1
 8006bda:	bf04      	itt	eq
 8006bdc:	6819      	ldreq	r1, [r3, #0]
 8006bde:	685b      	ldreq	r3, [r3, #4]
 8006be0:	6063      	str	r3, [r4, #4]
 8006be2:	bf04      	itt	eq
 8006be4:	1809      	addeq	r1, r1, r0
 8006be6:	6021      	streq	r1, [r4, #0]
 8006be8:	6054      	str	r4, [r2, #4]
 8006bea:	e7ca      	b.n	8006b82 <_free_r+0x22>
 8006bec:	bd38      	pop	{r3, r4, r5, pc}
 8006bee:	bf00      	nop
 8006bf0:	200004e0 	.word	0x200004e0

08006bf4 <malloc>:
 8006bf4:	4b02      	ldr	r3, [pc, #8]	@ (8006c00 <malloc+0xc>)
 8006bf6:	4601      	mov	r1, r0
 8006bf8:	6818      	ldr	r0, [r3, #0]
 8006bfa:	f000 b825 	b.w	8006c48 <_malloc_r>
 8006bfe:	bf00      	nop
 8006c00:	20000018 	.word	0x20000018

08006c04 <sbrk_aligned>:
 8006c04:	b570      	push	{r4, r5, r6, lr}
 8006c06:	4e0f      	ldr	r6, [pc, #60]	@ (8006c44 <sbrk_aligned+0x40>)
 8006c08:	460c      	mov	r4, r1
 8006c0a:	6831      	ldr	r1, [r6, #0]
 8006c0c:	4605      	mov	r5, r0
 8006c0e:	b911      	cbnz	r1, 8006c16 <sbrk_aligned+0x12>
 8006c10:	f000 fe46 	bl	80078a0 <_sbrk_r>
 8006c14:	6030      	str	r0, [r6, #0]
 8006c16:	4621      	mov	r1, r4
 8006c18:	4628      	mov	r0, r5
 8006c1a:	f000 fe41 	bl	80078a0 <_sbrk_r>
 8006c1e:	1c43      	adds	r3, r0, #1
 8006c20:	d103      	bne.n	8006c2a <sbrk_aligned+0x26>
 8006c22:	f04f 34ff 	mov.w	r4, #4294967295
 8006c26:	4620      	mov	r0, r4
 8006c28:	bd70      	pop	{r4, r5, r6, pc}
 8006c2a:	1cc4      	adds	r4, r0, #3
 8006c2c:	f024 0403 	bic.w	r4, r4, #3
 8006c30:	42a0      	cmp	r0, r4
 8006c32:	d0f8      	beq.n	8006c26 <sbrk_aligned+0x22>
 8006c34:	1a21      	subs	r1, r4, r0
 8006c36:	4628      	mov	r0, r5
 8006c38:	f000 fe32 	bl	80078a0 <_sbrk_r>
 8006c3c:	3001      	adds	r0, #1
 8006c3e:	d1f2      	bne.n	8006c26 <sbrk_aligned+0x22>
 8006c40:	e7ef      	b.n	8006c22 <sbrk_aligned+0x1e>
 8006c42:	bf00      	nop
 8006c44:	200004dc 	.word	0x200004dc

08006c48 <_malloc_r>:
 8006c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c4c:	1ccd      	adds	r5, r1, #3
 8006c4e:	f025 0503 	bic.w	r5, r5, #3
 8006c52:	3508      	adds	r5, #8
 8006c54:	2d0c      	cmp	r5, #12
 8006c56:	bf38      	it	cc
 8006c58:	250c      	movcc	r5, #12
 8006c5a:	2d00      	cmp	r5, #0
 8006c5c:	4606      	mov	r6, r0
 8006c5e:	db01      	blt.n	8006c64 <_malloc_r+0x1c>
 8006c60:	42a9      	cmp	r1, r5
 8006c62:	d904      	bls.n	8006c6e <_malloc_r+0x26>
 8006c64:	230c      	movs	r3, #12
 8006c66:	6033      	str	r3, [r6, #0]
 8006c68:	2000      	movs	r0, #0
 8006c6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006d44 <_malloc_r+0xfc>
 8006c72:	f000 f869 	bl	8006d48 <__malloc_lock>
 8006c76:	f8d8 3000 	ldr.w	r3, [r8]
 8006c7a:	461c      	mov	r4, r3
 8006c7c:	bb44      	cbnz	r4, 8006cd0 <_malloc_r+0x88>
 8006c7e:	4629      	mov	r1, r5
 8006c80:	4630      	mov	r0, r6
 8006c82:	f7ff ffbf 	bl	8006c04 <sbrk_aligned>
 8006c86:	1c43      	adds	r3, r0, #1
 8006c88:	4604      	mov	r4, r0
 8006c8a:	d158      	bne.n	8006d3e <_malloc_r+0xf6>
 8006c8c:	f8d8 4000 	ldr.w	r4, [r8]
 8006c90:	4627      	mov	r7, r4
 8006c92:	2f00      	cmp	r7, #0
 8006c94:	d143      	bne.n	8006d1e <_malloc_r+0xd6>
 8006c96:	2c00      	cmp	r4, #0
 8006c98:	d04b      	beq.n	8006d32 <_malloc_r+0xea>
 8006c9a:	6823      	ldr	r3, [r4, #0]
 8006c9c:	4639      	mov	r1, r7
 8006c9e:	4630      	mov	r0, r6
 8006ca0:	eb04 0903 	add.w	r9, r4, r3
 8006ca4:	f000 fdfc 	bl	80078a0 <_sbrk_r>
 8006ca8:	4581      	cmp	r9, r0
 8006caa:	d142      	bne.n	8006d32 <_malloc_r+0xea>
 8006cac:	6821      	ldr	r1, [r4, #0]
 8006cae:	1a6d      	subs	r5, r5, r1
 8006cb0:	4629      	mov	r1, r5
 8006cb2:	4630      	mov	r0, r6
 8006cb4:	f7ff ffa6 	bl	8006c04 <sbrk_aligned>
 8006cb8:	3001      	adds	r0, #1
 8006cba:	d03a      	beq.n	8006d32 <_malloc_r+0xea>
 8006cbc:	6823      	ldr	r3, [r4, #0]
 8006cbe:	442b      	add	r3, r5
 8006cc0:	6023      	str	r3, [r4, #0]
 8006cc2:	f8d8 3000 	ldr.w	r3, [r8]
 8006cc6:	685a      	ldr	r2, [r3, #4]
 8006cc8:	bb62      	cbnz	r2, 8006d24 <_malloc_r+0xdc>
 8006cca:	f8c8 7000 	str.w	r7, [r8]
 8006cce:	e00f      	b.n	8006cf0 <_malloc_r+0xa8>
 8006cd0:	6822      	ldr	r2, [r4, #0]
 8006cd2:	1b52      	subs	r2, r2, r5
 8006cd4:	d420      	bmi.n	8006d18 <_malloc_r+0xd0>
 8006cd6:	2a0b      	cmp	r2, #11
 8006cd8:	d917      	bls.n	8006d0a <_malloc_r+0xc2>
 8006cda:	1961      	adds	r1, r4, r5
 8006cdc:	42a3      	cmp	r3, r4
 8006cde:	6025      	str	r5, [r4, #0]
 8006ce0:	bf18      	it	ne
 8006ce2:	6059      	strne	r1, [r3, #4]
 8006ce4:	6863      	ldr	r3, [r4, #4]
 8006ce6:	bf08      	it	eq
 8006ce8:	f8c8 1000 	streq.w	r1, [r8]
 8006cec:	5162      	str	r2, [r4, r5]
 8006cee:	604b      	str	r3, [r1, #4]
 8006cf0:	4630      	mov	r0, r6
 8006cf2:	f000 f82f 	bl	8006d54 <__malloc_unlock>
 8006cf6:	f104 000b 	add.w	r0, r4, #11
 8006cfa:	1d23      	adds	r3, r4, #4
 8006cfc:	f020 0007 	bic.w	r0, r0, #7
 8006d00:	1ac2      	subs	r2, r0, r3
 8006d02:	bf1c      	itt	ne
 8006d04:	1a1b      	subne	r3, r3, r0
 8006d06:	50a3      	strne	r3, [r4, r2]
 8006d08:	e7af      	b.n	8006c6a <_malloc_r+0x22>
 8006d0a:	6862      	ldr	r2, [r4, #4]
 8006d0c:	42a3      	cmp	r3, r4
 8006d0e:	bf0c      	ite	eq
 8006d10:	f8c8 2000 	streq.w	r2, [r8]
 8006d14:	605a      	strne	r2, [r3, #4]
 8006d16:	e7eb      	b.n	8006cf0 <_malloc_r+0xa8>
 8006d18:	4623      	mov	r3, r4
 8006d1a:	6864      	ldr	r4, [r4, #4]
 8006d1c:	e7ae      	b.n	8006c7c <_malloc_r+0x34>
 8006d1e:	463c      	mov	r4, r7
 8006d20:	687f      	ldr	r7, [r7, #4]
 8006d22:	e7b6      	b.n	8006c92 <_malloc_r+0x4a>
 8006d24:	461a      	mov	r2, r3
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	42a3      	cmp	r3, r4
 8006d2a:	d1fb      	bne.n	8006d24 <_malloc_r+0xdc>
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	6053      	str	r3, [r2, #4]
 8006d30:	e7de      	b.n	8006cf0 <_malloc_r+0xa8>
 8006d32:	230c      	movs	r3, #12
 8006d34:	6033      	str	r3, [r6, #0]
 8006d36:	4630      	mov	r0, r6
 8006d38:	f000 f80c 	bl	8006d54 <__malloc_unlock>
 8006d3c:	e794      	b.n	8006c68 <_malloc_r+0x20>
 8006d3e:	6005      	str	r5, [r0, #0]
 8006d40:	e7d6      	b.n	8006cf0 <_malloc_r+0xa8>
 8006d42:	bf00      	nop
 8006d44:	200004e0 	.word	0x200004e0

08006d48 <__malloc_lock>:
 8006d48:	4801      	ldr	r0, [pc, #4]	@ (8006d50 <__malloc_lock+0x8>)
 8006d4a:	f7ff b8ba 	b.w	8005ec2 <__retarget_lock_acquire_recursive>
 8006d4e:	bf00      	nop
 8006d50:	200004d8 	.word	0x200004d8

08006d54 <__malloc_unlock>:
 8006d54:	4801      	ldr	r0, [pc, #4]	@ (8006d5c <__malloc_unlock+0x8>)
 8006d56:	f7ff b8b5 	b.w	8005ec4 <__retarget_lock_release_recursive>
 8006d5a:	bf00      	nop
 8006d5c:	200004d8 	.word	0x200004d8

08006d60 <_Balloc>:
 8006d60:	b570      	push	{r4, r5, r6, lr}
 8006d62:	69c6      	ldr	r6, [r0, #28]
 8006d64:	4604      	mov	r4, r0
 8006d66:	460d      	mov	r5, r1
 8006d68:	b976      	cbnz	r6, 8006d88 <_Balloc+0x28>
 8006d6a:	2010      	movs	r0, #16
 8006d6c:	f7ff ff42 	bl	8006bf4 <malloc>
 8006d70:	4602      	mov	r2, r0
 8006d72:	61e0      	str	r0, [r4, #28]
 8006d74:	b920      	cbnz	r0, 8006d80 <_Balloc+0x20>
 8006d76:	4b18      	ldr	r3, [pc, #96]	@ (8006dd8 <_Balloc+0x78>)
 8006d78:	4818      	ldr	r0, [pc, #96]	@ (8006ddc <_Balloc+0x7c>)
 8006d7a:	216b      	movs	r1, #107	@ 0x6b
 8006d7c:	f000 fdae 	bl	80078dc <__assert_func>
 8006d80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d84:	6006      	str	r6, [r0, #0]
 8006d86:	60c6      	str	r6, [r0, #12]
 8006d88:	69e6      	ldr	r6, [r4, #28]
 8006d8a:	68f3      	ldr	r3, [r6, #12]
 8006d8c:	b183      	cbz	r3, 8006db0 <_Balloc+0x50>
 8006d8e:	69e3      	ldr	r3, [r4, #28]
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006d96:	b9b8      	cbnz	r0, 8006dc8 <_Balloc+0x68>
 8006d98:	2101      	movs	r1, #1
 8006d9a:	fa01 f605 	lsl.w	r6, r1, r5
 8006d9e:	1d72      	adds	r2, r6, #5
 8006da0:	0092      	lsls	r2, r2, #2
 8006da2:	4620      	mov	r0, r4
 8006da4:	f000 fdb8 	bl	8007918 <_calloc_r>
 8006da8:	b160      	cbz	r0, 8006dc4 <_Balloc+0x64>
 8006daa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006dae:	e00e      	b.n	8006dce <_Balloc+0x6e>
 8006db0:	2221      	movs	r2, #33	@ 0x21
 8006db2:	2104      	movs	r1, #4
 8006db4:	4620      	mov	r0, r4
 8006db6:	f000 fdaf 	bl	8007918 <_calloc_r>
 8006dba:	69e3      	ldr	r3, [r4, #28]
 8006dbc:	60f0      	str	r0, [r6, #12]
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d1e4      	bne.n	8006d8e <_Balloc+0x2e>
 8006dc4:	2000      	movs	r0, #0
 8006dc6:	bd70      	pop	{r4, r5, r6, pc}
 8006dc8:	6802      	ldr	r2, [r0, #0]
 8006dca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006dce:	2300      	movs	r3, #0
 8006dd0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006dd4:	e7f7      	b.n	8006dc6 <_Balloc+0x66>
 8006dd6:	bf00      	nop
 8006dd8:	08008e9d 	.word	0x08008e9d
 8006ddc:	08008f1d 	.word	0x08008f1d

08006de0 <_Bfree>:
 8006de0:	b570      	push	{r4, r5, r6, lr}
 8006de2:	69c6      	ldr	r6, [r0, #28]
 8006de4:	4605      	mov	r5, r0
 8006de6:	460c      	mov	r4, r1
 8006de8:	b976      	cbnz	r6, 8006e08 <_Bfree+0x28>
 8006dea:	2010      	movs	r0, #16
 8006dec:	f7ff ff02 	bl	8006bf4 <malloc>
 8006df0:	4602      	mov	r2, r0
 8006df2:	61e8      	str	r0, [r5, #28]
 8006df4:	b920      	cbnz	r0, 8006e00 <_Bfree+0x20>
 8006df6:	4b09      	ldr	r3, [pc, #36]	@ (8006e1c <_Bfree+0x3c>)
 8006df8:	4809      	ldr	r0, [pc, #36]	@ (8006e20 <_Bfree+0x40>)
 8006dfa:	218f      	movs	r1, #143	@ 0x8f
 8006dfc:	f000 fd6e 	bl	80078dc <__assert_func>
 8006e00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e04:	6006      	str	r6, [r0, #0]
 8006e06:	60c6      	str	r6, [r0, #12]
 8006e08:	b13c      	cbz	r4, 8006e1a <_Bfree+0x3a>
 8006e0a:	69eb      	ldr	r3, [r5, #28]
 8006e0c:	6862      	ldr	r2, [r4, #4]
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e14:	6021      	str	r1, [r4, #0]
 8006e16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006e1a:	bd70      	pop	{r4, r5, r6, pc}
 8006e1c:	08008e9d 	.word	0x08008e9d
 8006e20:	08008f1d 	.word	0x08008f1d

08006e24 <__multadd>:
 8006e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e28:	690d      	ldr	r5, [r1, #16]
 8006e2a:	4607      	mov	r7, r0
 8006e2c:	460c      	mov	r4, r1
 8006e2e:	461e      	mov	r6, r3
 8006e30:	f101 0c14 	add.w	ip, r1, #20
 8006e34:	2000      	movs	r0, #0
 8006e36:	f8dc 3000 	ldr.w	r3, [ip]
 8006e3a:	b299      	uxth	r1, r3
 8006e3c:	fb02 6101 	mla	r1, r2, r1, r6
 8006e40:	0c1e      	lsrs	r6, r3, #16
 8006e42:	0c0b      	lsrs	r3, r1, #16
 8006e44:	fb02 3306 	mla	r3, r2, r6, r3
 8006e48:	b289      	uxth	r1, r1
 8006e4a:	3001      	adds	r0, #1
 8006e4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006e50:	4285      	cmp	r5, r0
 8006e52:	f84c 1b04 	str.w	r1, [ip], #4
 8006e56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006e5a:	dcec      	bgt.n	8006e36 <__multadd+0x12>
 8006e5c:	b30e      	cbz	r6, 8006ea2 <__multadd+0x7e>
 8006e5e:	68a3      	ldr	r3, [r4, #8]
 8006e60:	42ab      	cmp	r3, r5
 8006e62:	dc19      	bgt.n	8006e98 <__multadd+0x74>
 8006e64:	6861      	ldr	r1, [r4, #4]
 8006e66:	4638      	mov	r0, r7
 8006e68:	3101      	adds	r1, #1
 8006e6a:	f7ff ff79 	bl	8006d60 <_Balloc>
 8006e6e:	4680      	mov	r8, r0
 8006e70:	b928      	cbnz	r0, 8006e7e <__multadd+0x5a>
 8006e72:	4602      	mov	r2, r0
 8006e74:	4b0c      	ldr	r3, [pc, #48]	@ (8006ea8 <__multadd+0x84>)
 8006e76:	480d      	ldr	r0, [pc, #52]	@ (8006eac <__multadd+0x88>)
 8006e78:	21ba      	movs	r1, #186	@ 0xba
 8006e7a:	f000 fd2f 	bl	80078dc <__assert_func>
 8006e7e:	6922      	ldr	r2, [r4, #16]
 8006e80:	3202      	adds	r2, #2
 8006e82:	f104 010c 	add.w	r1, r4, #12
 8006e86:	0092      	lsls	r2, r2, #2
 8006e88:	300c      	adds	r0, #12
 8006e8a:	f000 fd19 	bl	80078c0 <memcpy>
 8006e8e:	4621      	mov	r1, r4
 8006e90:	4638      	mov	r0, r7
 8006e92:	f7ff ffa5 	bl	8006de0 <_Bfree>
 8006e96:	4644      	mov	r4, r8
 8006e98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006e9c:	3501      	adds	r5, #1
 8006e9e:	615e      	str	r6, [r3, #20]
 8006ea0:	6125      	str	r5, [r4, #16]
 8006ea2:	4620      	mov	r0, r4
 8006ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ea8:	08008f0c 	.word	0x08008f0c
 8006eac:	08008f1d 	.word	0x08008f1d

08006eb0 <__hi0bits>:
 8006eb0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	bf36      	itet	cc
 8006eb8:	0403      	lslcc	r3, r0, #16
 8006eba:	2000      	movcs	r0, #0
 8006ebc:	2010      	movcc	r0, #16
 8006ebe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ec2:	bf3c      	itt	cc
 8006ec4:	021b      	lslcc	r3, r3, #8
 8006ec6:	3008      	addcc	r0, #8
 8006ec8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ecc:	bf3c      	itt	cc
 8006ece:	011b      	lslcc	r3, r3, #4
 8006ed0:	3004      	addcc	r0, #4
 8006ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ed6:	bf3c      	itt	cc
 8006ed8:	009b      	lslcc	r3, r3, #2
 8006eda:	3002      	addcc	r0, #2
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	db05      	blt.n	8006eec <__hi0bits+0x3c>
 8006ee0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006ee4:	f100 0001 	add.w	r0, r0, #1
 8006ee8:	bf08      	it	eq
 8006eea:	2020      	moveq	r0, #32
 8006eec:	4770      	bx	lr

08006eee <__lo0bits>:
 8006eee:	6803      	ldr	r3, [r0, #0]
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	f013 0007 	ands.w	r0, r3, #7
 8006ef6:	d00b      	beq.n	8006f10 <__lo0bits+0x22>
 8006ef8:	07d9      	lsls	r1, r3, #31
 8006efa:	d421      	bmi.n	8006f40 <__lo0bits+0x52>
 8006efc:	0798      	lsls	r0, r3, #30
 8006efe:	bf49      	itett	mi
 8006f00:	085b      	lsrmi	r3, r3, #1
 8006f02:	089b      	lsrpl	r3, r3, #2
 8006f04:	2001      	movmi	r0, #1
 8006f06:	6013      	strmi	r3, [r2, #0]
 8006f08:	bf5c      	itt	pl
 8006f0a:	6013      	strpl	r3, [r2, #0]
 8006f0c:	2002      	movpl	r0, #2
 8006f0e:	4770      	bx	lr
 8006f10:	b299      	uxth	r1, r3
 8006f12:	b909      	cbnz	r1, 8006f18 <__lo0bits+0x2a>
 8006f14:	0c1b      	lsrs	r3, r3, #16
 8006f16:	2010      	movs	r0, #16
 8006f18:	b2d9      	uxtb	r1, r3
 8006f1a:	b909      	cbnz	r1, 8006f20 <__lo0bits+0x32>
 8006f1c:	3008      	adds	r0, #8
 8006f1e:	0a1b      	lsrs	r3, r3, #8
 8006f20:	0719      	lsls	r1, r3, #28
 8006f22:	bf04      	itt	eq
 8006f24:	091b      	lsreq	r3, r3, #4
 8006f26:	3004      	addeq	r0, #4
 8006f28:	0799      	lsls	r1, r3, #30
 8006f2a:	bf04      	itt	eq
 8006f2c:	089b      	lsreq	r3, r3, #2
 8006f2e:	3002      	addeq	r0, #2
 8006f30:	07d9      	lsls	r1, r3, #31
 8006f32:	d403      	bmi.n	8006f3c <__lo0bits+0x4e>
 8006f34:	085b      	lsrs	r3, r3, #1
 8006f36:	f100 0001 	add.w	r0, r0, #1
 8006f3a:	d003      	beq.n	8006f44 <__lo0bits+0x56>
 8006f3c:	6013      	str	r3, [r2, #0]
 8006f3e:	4770      	bx	lr
 8006f40:	2000      	movs	r0, #0
 8006f42:	4770      	bx	lr
 8006f44:	2020      	movs	r0, #32
 8006f46:	4770      	bx	lr

08006f48 <__i2b>:
 8006f48:	b510      	push	{r4, lr}
 8006f4a:	460c      	mov	r4, r1
 8006f4c:	2101      	movs	r1, #1
 8006f4e:	f7ff ff07 	bl	8006d60 <_Balloc>
 8006f52:	4602      	mov	r2, r0
 8006f54:	b928      	cbnz	r0, 8006f62 <__i2b+0x1a>
 8006f56:	4b05      	ldr	r3, [pc, #20]	@ (8006f6c <__i2b+0x24>)
 8006f58:	4805      	ldr	r0, [pc, #20]	@ (8006f70 <__i2b+0x28>)
 8006f5a:	f240 1145 	movw	r1, #325	@ 0x145
 8006f5e:	f000 fcbd 	bl	80078dc <__assert_func>
 8006f62:	2301      	movs	r3, #1
 8006f64:	6144      	str	r4, [r0, #20]
 8006f66:	6103      	str	r3, [r0, #16]
 8006f68:	bd10      	pop	{r4, pc}
 8006f6a:	bf00      	nop
 8006f6c:	08008f0c 	.word	0x08008f0c
 8006f70:	08008f1d 	.word	0x08008f1d

08006f74 <__multiply>:
 8006f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f78:	4614      	mov	r4, r2
 8006f7a:	690a      	ldr	r2, [r1, #16]
 8006f7c:	6923      	ldr	r3, [r4, #16]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	bfa8      	it	ge
 8006f82:	4623      	movge	r3, r4
 8006f84:	460f      	mov	r7, r1
 8006f86:	bfa4      	itt	ge
 8006f88:	460c      	movge	r4, r1
 8006f8a:	461f      	movge	r7, r3
 8006f8c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006f90:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006f94:	68a3      	ldr	r3, [r4, #8]
 8006f96:	6861      	ldr	r1, [r4, #4]
 8006f98:	eb0a 0609 	add.w	r6, sl, r9
 8006f9c:	42b3      	cmp	r3, r6
 8006f9e:	b085      	sub	sp, #20
 8006fa0:	bfb8      	it	lt
 8006fa2:	3101      	addlt	r1, #1
 8006fa4:	f7ff fedc 	bl	8006d60 <_Balloc>
 8006fa8:	b930      	cbnz	r0, 8006fb8 <__multiply+0x44>
 8006faa:	4602      	mov	r2, r0
 8006fac:	4b44      	ldr	r3, [pc, #272]	@ (80070c0 <__multiply+0x14c>)
 8006fae:	4845      	ldr	r0, [pc, #276]	@ (80070c4 <__multiply+0x150>)
 8006fb0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006fb4:	f000 fc92 	bl	80078dc <__assert_func>
 8006fb8:	f100 0514 	add.w	r5, r0, #20
 8006fbc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006fc0:	462b      	mov	r3, r5
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	4543      	cmp	r3, r8
 8006fc6:	d321      	bcc.n	800700c <__multiply+0x98>
 8006fc8:	f107 0114 	add.w	r1, r7, #20
 8006fcc:	f104 0214 	add.w	r2, r4, #20
 8006fd0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006fd4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006fd8:	9302      	str	r3, [sp, #8]
 8006fda:	1b13      	subs	r3, r2, r4
 8006fdc:	3b15      	subs	r3, #21
 8006fde:	f023 0303 	bic.w	r3, r3, #3
 8006fe2:	3304      	adds	r3, #4
 8006fe4:	f104 0715 	add.w	r7, r4, #21
 8006fe8:	42ba      	cmp	r2, r7
 8006fea:	bf38      	it	cc
 8006fec:	2304      	movcc	r3, #4
 8006fee:	9301      	str	r3, [sp, #4]
 8006ff0:	9b02      	ldr	r3, [sp, #8]
 8006ff2:	9103      	str	r1, [sp, #12]
 8006ff4:	428b      	cmp	r3, r1
 8006ff6:	d80c      	bhi.n	8007012 <__multiply+0x9e>
 8006ff8:	2e00      	cmp	r6, #0
 8006ffa:	dd03      	ble.n	8007004 <__multiply+0x90>
 8006ffc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007000:	2b00      	cmp	r3, #0
 8007002:	d05b      	beq.n	80070bc <__multiply+0x148>
 8007004:	6106      	str	r6, [r0, #16]
 8007006:	b005      	add	sp, #20
 8007008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800700c:	f843 2b04 	str.w	r2, [r3], #4
 8007010:	e7d8      	b.n	8006fc4 <__multiply+0x50>
 8007012:	f8b1 a000 	ldrh.w	sl, [r1]
 8007016:	f1ba 0f00 	cmp.w	sl, #0
 800701a:	d024      	beq.n	8007066 <__multiply+0xf2>
 800701c:	f104 0e14 	add.w	lr, r4, #20
 8007020:	46a9      	mov	r9, r5
 8007022:	f04f 0c00 	mov.w	ip, #0
 8007026:	f85e 7b04 	ldr.w	r7, [lr], #4
 800702a:	f8d9 3000 	ldr.w	r3, [r9]
 800702e:	fa1f fb87 	uxth.w	fp, r7
 8007032:	b29b      	uxth	r3, r3
 8007034:	fb0a 330b 	mla	r3, sl, fp, r3
 8007038:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800703c:	f8d9 7000 	ldr.w	r7, [r9]
 8007040:	4463      	add	r3, ip
 8007042:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007046:	fb0a c70b 	mla	r7, sl, fp, ip
 800704a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800704e:	b29b      	uxth	r3, r3
 8007050:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007054:	4572      	cmp	r2, lr
 8007056:	f849 3b04 	str.w	r3, [r9], #4
 800705a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800705e:	d8e2      	bhi.n	8007026 <__multiply+0xb2>
 8007060:	9b01      	ldr	r3, [sp, #4]
 8007062:	f845 c003 	str.w	ip, [r5, r3]
 8007066:	9b03      	ldr	r3, [sp, #12]
 8007068:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800706c:	3104      	adds	r1, #4
 800706e:	f1b9 0f00 	cmp.w	r9, #0
 8007072:	d021      	beq.n	80070b8 <__multiply+0x144>
 8007074:	682b      	ldr	r3, [r5, #0]
 8007076:	f104 0c14 	add.w	ip, r4, #20
 800707a:	46ae      	mov	lr, r5
 800707c:	f04f 0a00 	mov.w	sl, #0
 8007080:	f8bc b000 	ldrh.w	fp, [ip]
 8007084:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007088:	fb09 770b 	mla	r7, r9, fp, r7
 800708c:	4457      	add	r7, sl
 800708e:	b29b      	uxth	r3, r3
 8007090:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007094:	f84e 3b04 	str.w	r3, [lr], #4
 8007098:	f85c 3b04 	ldr.w	r3, [ip], #4
 800709c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80070a0:	f8be 3000 	ldrh.w	r3, [lr]
 80070a4:	fb09 330a 	mla	r3, r9, sl, r3
 80070a8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80070ac:	4562      	cmp	r2, ip
 80070ae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80070b2:	d8e5      	bhi.n	8007080 <__multiply+0x10c>
 80070b4:	9f01      	ldr	r7, [sp, #4]
 80070b6:	51eb      	str	r3, [r5, r7]
 80070b8:	3504      	adds	r5, #4
 80070ba:	e799      	b.n	8006ff0 <__multiply+0x7c>
 80070bc:	3e01      	subs	r6, #1
 80070be:	e79b      	b.n	8006ff8 <__multiply+0x84>
 80070c0:	08008f0c 	.word	0x08008f0c
 80070c4:	08008f1d 	.word	0x08008f1d

080070c8 <__pow5mult>:
 80070c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070cc:	4615      	mov	r5, r2
 80070ce:	f012 0203 	ands.w	r2, r2, #3
 80070d2:	4607      	mov	r7, r0
 80070d4:	460e      	mov	r6, r1
 80070d6:	d007      	beq.n	80070e8 <__pow5mult+0x20>
 80070d8:	4c25      	ldr	r4, [pc, #148]	@ (8007170 <__pow5mult+0xa8>)
 80070da:	3a01      	subs	r2, #1
 80070dc:	2300      	movs	r3, #0
 80070de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80070e2:	f7ff fe9f 	bl	8006e24 <__multadd>
 80070e6:	4606      	mov	r6, r0
 80070e8:	10ad      	asrs	r5, r5, #2
 80070ea:	d03d      	beq.n	8007168 <__pow5mult+0xa0>
 80070ec:	69fc      	ldr	r4, [r7, #28]
 80070ee:	b97c      	cbnz	r4, 8007110 <__pow5mult+0x48>
 80070f0:	2010      	movs	r0, #16
 80070f2:	f7ff fd7f 	bl	8006bf4 <malloc>
 80070f6:	4602      	mov	r2, r0
 80070f8:	61f8      	str	r0, [r7, #28]
 80070fa:	b928      	cbnz	r0, 8007108 <__pow5mult+0x40>
 80070fc:	4b1d      	ldr	r3, [pc, #116]	@ (8007174 <__pow5mult+0xac>)
 80070fe:	481e      	ldr	r0, [pc, #120]	@ (8007178 <__pow5mult+0xb0>)
 8007100:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007104:	f000 fbea 	bl	80078dc <__assert_func>
 8007108:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800710c:	6004      	str	r4, [r0, #0]
 800710e:	60c4      	str	r4, [r0, #12]
 8007110:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007114:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007118:	b94c      	cbnz	r4, 800712e <__pow5mult+0x66>
 800711a:	f240 2171 	movw	r1, #625	@ 0x271
 800711e:	4638      	mov	r0, r7
 8007120:	f7ff ff12 	bl	8006f48 <__i2b>
 8007124:	2300      	movs	r3, #0
 8007126:	f8c8 0008 	str.w	r0, [r8, #8]
 800712a:	4604      	mov	r4, r0
 800712c:	6003      	str	r3, [r0, #0]
 800712e:	f04f 0900 	mov.w	r9, #0
 8007132:	07eb      	lsls	r3, r5, #31
 8007134:	d50a      	bpl.n	800714c <__pow5mult+0x84>
 8007136:	4631      	mov	r1, r6
 8007138:	4622      	mov	r2, r4
 800713a:	4638      	mov	r0, r7
 800713c:	f7ff ff1a 	bl	8006f74 <__multiply>
 8007140:	4631      	mov	r1, r6
 8007142:	4680      	mov	r8, r0
 8007144:	4638      	mov	r0, r7
 8007146:	f7ff fe4b 	bl	8006de0 <_Bfree>
 800714a:	4646      	mov	r6, r8
 800714c:	106d      	asrs	r5, r5, #1
 800714e:	d00b      	beq.n	8007168 <__pow5mult+0xa0>
 8007150:	6820      	ldr	r0, [r4, #0]
 8007152:	b938      	cbnz	r0, 8007164 <__pow5mult+0x9c>
 8007154:	4622      	mov	r2, r4
 8007156:	4621      	mov	r1, r4
 8007158:	4638      	mov	r0, r7
 800715a:	f7ff ff0b 	bl	8006f74 <__multiply>
 800715e:	6020      	str	r0, [r4, #0]
 8007160:	f8c0 9000 	str.w	r9, [r0]
 8007164:	4604      	mov	r4, r0
 8007166:	e7e4      	b.n	8007132 <__pow5mult+0x6a>
 8007168:	4630      	mov	r0, r6
 800716a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800716e:	bf00      	nop
 8007170:	08008f78 	.word	0x08008f78
 8007174:	08008e9d 	.word	0x08008e9d
 8007178:	08008f1d 	.word	0x08008f1d

0800717c <__lshift>:
 800717c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007180:	460c      	mov	r4, r1
 8007182:	6849      	ldr	r1, [r1, #4]
 8007184:	6923      	ldr	r3, [r4, #16]
 8007186:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800718a:	68a3      	ldr	r3, [r4, #8]
 800718c:	4607      	mov	r7, r0
 800718e:	4691      	mov	r9, r2
 8007190:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007194:	f108 0601 	add.w	r6, r8, #1
 8007198:	42b3      	cmp	r3, r6
 800719a:	db0b      	blt.n	80071b4 <__lshift+0x38>
 800719c:	4638      	mov	r0, r7
 800719e:	f7ff fddf 	bl	8006d60 <_Balloc>
 80071a2:	4605      	mov	r5, r0
 80071a4:	b948      	cbnz	r0, 80071ba <__lshift+0x3e>
 80071a6:	4602      	mov	r2, r0
 80071a8:	4b28      	ldr	r3, [pc, #160]	@ (800724c <__lshift+0xd0>)
 80071aa:	4829      	ldr	r0, [pc, #164]	@ (8007250 <__lshift+0xd4>)
 80071ac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80071b0:	f000 fb94 	bl	80078dc <__assert_func>
 80071b4:	3101      	adds	r1, #1
 80071b6:	005b      	lsls	r3, r3, #1
 80071b8:	e7ee      	b.n	8007198 <__lshift+0x1c>
 80071ba:	2300      	movs	r3, #0
 80071bc:	f100 0114 	add.w	r1, r0, #20
 80071c0:	f100 0210 	add.w	r2, r0, #16
 80071c4:	4618      	mov	r0, r3
 80071c6:	4553      	cmp	r3, sl
 80071c8:	db33      	blt.n	8007232 <__lshift+0xb6>
 80071ca:	6920      	ldr	r0, [r4, #16]
 80071cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80071d0:	f104 0314 	add.w	r3, r4, #20
 80071d4:	f019 091f 	ands.w	r9, r9, #31
 80071d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80071dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80071e0:	d02b      	beq.n	800723a <__lshift+0xbe>
 80071e2:	f1c9 0e20 	rsb	lr, r9, #32
 80071e6:	468a      	mov	sl, r1
 80071e8:	2200      	movs	r2, #0
 80071ea:	6818      	ldr	r0, [r3, #0]
 80071ec:	fa00 f009 	lsl.w	r0, r0, r9
 80071f0:	4310      	orrs	r0, r2
 80071f2:	f84a 0b04 	str.w	r0, [sl], #4
 80071f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80071fa:	459c      	cmp	ip, r3
 80071fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8007200:	d8f3      	bhi.n	80071ea <__lshift+0x6e>
 8007202:	ebac 0304 	sub.w	r3, ip, r4
 8007206:	3b15      	subs	r3, #21
 8007208:	f023 0303 	bic.w	r3, r3, #3
 800720c:	3304      	adds	r3, #4
 800720e:	f104 0015 	add.w	r0, r4, #21
 8007212:	4584      	cmp	ip, r0
 8007214:	bf38      	it	cc
 8007216:	2304      	movcc	r3, #4
 8007218:	50ca      	str	r2, [r1, r3]
 800721a:	b10a      	cbz	r2, 8007220 <__lshift+0xa4>
 800721c:	f108 0602 	add.w	r6, r8, #2
 8007220:	3e01      	subs	r6, #1
 8007222:	4638      	mov	r0, r7
 8007224:	612e      	str	r6, [r5, #16]
 8007226:	4621      	mov	r1, r4
 8007228:	f7ff fdda 	bl	8006de0 <_Bfree>
 800722c:	4628      	mov	r0, r5
 800722e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007232:	f842 0f04 	str.w	r0, [r2, #4]!
 8007236:	3301      	adds	r3, #1
 8007238:	e7c5      	b.n	80071c6 <__lshift+0x4a>
 800723a:	3904      	subs	r1, #4
 800723c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007240:	f841 2f04 	str.w	r2, [r1, #4]!
 8007244:	459c      	cmp	ip, r3
 8007246:	d8f9      	bhi.n	800723c <__lshift+0xc0>
 8007248:	e7ea      	b.n	8007220 <__lshift+0xa4>
 800724a:	bf00      	nop
 800724c:	08008f0c 	.word	0x08008f0c
 8007250:	08008f1d 	.word	0x08008f1d

08007254 <__mcmp>:
 8007254:	690a      	ldr	r2, [r1, #16]
 8007256:	4603      	mov	r3, r0
 8007258:	6900      	ldr	r0, [r0, #16]
 800725a:	1a80      	subs	r0, r0, r2
 800725c:	b530      	push	{r4, r5, lr}
 800725e:	d10e      	bne.n	800727e <__mcmp+0x2a>
 8007260:	3314      	adds	r3, #20
 8007262:	3114      	adds	r1, #20
 8007264:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007268:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800726c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007270:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007274:	4295      	cmp	r5, r2
 8007276:	d003      	beq.n	8007280 <__mcmp+0x2c>
 8007278:	d205      	bcs.n	8007286 <__mcmp+0x32>
 800727a:	f04f 30ff 	mov.w	r0, #4294967295
 800727e:	bd30      	pop	{r4, r5, pc}
 8007280:	42a3      	cmp	r3, r4
 8007282:	d3f3      	bcc.n	800726c <__mcmp+0x18>
 8007284:	e7fb      	b.n	800727e <__mcmp+0x2a>
 8007286:	2001      	movs	r0, #1
 8007288:	e7f9      	b.n	800727e <__mcmp+0x2a>
	...

0800728c <__mdiff>:
 800728c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007290:	4689      	mov	r9, r1
 8007292:	4606      	mov	r6, r0
 8007294:	4611      	mov	r1, r2
 8007296:	4648      	mov	r0, r9
 8007298:	4614      	mov	r4, r2
 800729a:	f7ff ffdb 	bl	8007254 <__mcmp>
 800729e:	1e05      	subs	r5, r0, #0
 80072a0:	d112      	bne.n	80072c8 <__mdiff+0x3c>
 80072a2:	4629      	mov	r1, r5
 80072a4:	4630      	mov	r0, r6
 80072a6:	f7ff fd5b 	bl	8006d60 <_Balloc>
 80072aa:	4602      	mov	r2, r0
 80072ac:	b928      	cbnz	r0, 80072ba <__mdiff+0x2e>
 80072ae:	4b3f      	ldr	r3, [pc, #252]	@ (80073ac <__mdiff+0x120>)
 80072b0:	f240 2137 	movw	r1, #567	@ 0x237
 80072b4:	483e      	ldr	r0, [pc, #248]	@ (80073b0 <__mdiff+0x124>)
 80072b6:	f000 fb11 	bl	80078dc <__assert_func>
 80072ba:	2301      	movs	r3, #1
 80072bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80072c0:	4610      	mov	r0, r2
 80072c2:	b003      	add	sp, #12
 80072c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072c8:	bfbc      	itt	lt
 80072ca:	464b      	movlt	r3, r9
 80072cc:	46a1      	movlt	r9, r4
 80072ce:	4630      	mov	r0, r6
 80072d0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80072d4:	bfba      	itte	lt
 80072d6:	461c      	movlt	r4, r3
 80072d8:	2501      	movlt	r5, #1
 80072da:	2500      	movge	r5, #0
 80072dc:	f7ff fd40 	bl	8006d60 <_Balloc>
 80072e0:	4602      	mov	r2, r0
 80072e2:	b918      	cbnz	r0, 80072ec <__mdiff+0x60>
 80072e4:	4b31      	ldr	r3, [pc, #196]	@ (80073ac <__mdiff+0x120>)
 80072e6:	f240 2145 	movw	r1, #581	@ 0x245
 80072ea:	e7e3      	b.n	80072b4 <__mdiff+0x28>
 80072ec:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80072f0:	6926      	ldr	r6, [r4, #16]
 80072f2:	60c5      	str	r5, [r0, #12]
 80072f4:	f109 0310 	add.w	r3, r9, #16
 80072f8:	f109 0514 	add.w	r5, r9, #20
 80072fc:	f104 0e14 	add.w	lr, r4, #20
 8007300:	f100 0b14 	add.w	fp, r0, #20
 8007304:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007308:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800730c:	9301      	str	r3, [sp, #4]
 800730e:	46d9      	mov	r9, fp
 8007310:	f04f 0c00 	mov.w	ip, #0
 8007314:	9b01      	ldr	r3, [sp, #4]
 8007316:	f85e 0b04 	ldr.w	r0, [lr], #4
 800731a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800731e:	9301      	str	r3, [sp, #4]
 8007320:	fa1f f38a 	uxth.w	r3, sl
 8007324:	4619      	mov	r1, r3
 8007326:	b283      	uxth	r3, r0
 8007328:	1acb      	subs	r3, r1, r3
 800732a:	0c00      	lsrs	r0, r0, #16
 800732c:	4463      	add	r3, ip
 800732e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007332:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007336:	b29b      	uxth	r3, r3
 8007338:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800733c:	4576      	cmp	r6, lr
 800733e:	f849 3b04 	str.w	r3, [r9], #4
 8007342:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007346:	d8e5      	bhi.n	8007314 <__mdiff+0x88>
 8007348:	1b33      	subs	r3, r6, r4
 800734a:	3b15      	subs	r3, #21
 800734c:	f023 0303 	bic.w	r3, r3, #3
 8007350:	3415      	adds	r4, #21
 8007352:	3304      	adds	r3, #4
 8007354:	42a6      	cmp	r6, r4
 8007356:	bf38      	it	cc
 8007358:	2304      	movcc	r3, #4
 800735a:	441d      	add	r5, r3
 800735c:	445b      	add	r3, fp
 800735e:	461e      	mov	r6, r3
 8007360:	462c      	mov	r4, r5
 8007362:	4544      	cmp	r4, r8
 8007364:	d30e      	bcc.n	8007384 <__mdiff+0xf8>
 8007366:	f108 0103 	add.w	r1, r8, #3
 800736a:	1b49      	subs	r1, r1, r5
 800736c:	f021 0103 	bic.w	r1, r1, #3
 8007370:	3d03      	subs	r5, #3
 8007372:	45a8      	cmp	r8, r5
 8007374:	bf38      	it	cc
 8007376:	2100      	movcc	r1, #0
 8007378:	440b      	add	r3, r1
 800737a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800737e:	b191      	cbz	r1, 80073a6 <__mdiff+0x11a>
 8007380:	6117      	str	r7, [r2, #16]
 8007382:	e79d      	b.n	80072c0 <__mdiff+0x34>
 8007384:	f854 1b04 	ldr.w	r1, [r4], #4
 8007388:	46e6      	mov	lr, ip
 800738a:	0c08      	lsrs	r0, r1, #16
 800738c:	fa1c fc81 	uxtah	ip, ip, r1
 8007390:	4471      	add	r1, lr
 8007392:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007396:	b289      	uxth	r1, r1
 8007398:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800739c:	f846 1b04 	str.w	r1, [r6], #4
 80073a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80073a4:	e7dd      	b.n	8007362 <__mdiff+0xd6>
 80073a6:	3f01      	subs	r7, #1
 80073a8:	e7e7      	b.n	800737a <__mdiff+0xee>
 80073aa:	bf00      	nop
 80073ac:	08008f0c 	.word	0x08008f0c
 80073b0:	08008f1d 	.word	0x08008f1d

080073b4 <__d2b>:
 80073b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80073b8:	460f      	mov	r7, r1
 80073ba:	2101      	movs	r1, #1
 80073bc:	ec59 8b10 	vmov	r8, r9, d0
 80073c0:	4616      	mov	r6, r2
 80073c2:	f7ff fccd 	bl	8006d60 <_Balloc>
 80073c6:	4604      	mov	r4, r0
 80073c8:	b930      	cbnz	r0, 80073d8 <__d2b+0x24>
 80073ca:	4602      	mov	r2, r0
 80073cc:	4b23      	ldr	r3, [pc, #140]	@ (800745c <__d2b+0xa8>)
 80073ce:	4824      	ldr	r0, [pc, #144]	@ (8007460 <__d2b+0xac>)
 80073d0:	f240 310f 	movw	r1, #783	@ 0x30f
 80073d4:	f000 fa82 	bl	80078dc <__assert_func>
 80073d8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80073dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80073e0:	b10d      	cbz	r5, 80073e6 <__d2b+0x32>
 80073e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80073e6:	9301      	str	r3, [sp, #4]
 80073e8:	f1b8 0300 	subs.w	r3, r8, #0
 80073ec:	d023      	beq.n	8007436 <__d2b+0x82>
 80073ee:	4668      	mov	r0, sp
 80073f0:	9300      	str	r3, [sp, #0]
 80073f2:	f7ff fd7c 	bl	8006eee <__lo0bits>
 80073f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80073fa:	b1d0      	cbz	r0, 8007432 <__d2b+0x7e>
 80073fc:	f1c0 0320 	rsb	r3, r0, #32
 8007400:	fa02 f303 	lsl.w	r3, r2, r3
 8007404:	430b      	orrs	r3, r1
 8007406:	40c2      	lsrs	r2, r0
 8007408:	6163      	str	r3, [r4, #20]
 800740a:	9201      	str	r2, [sp, #4]
 800740c:	9b01      	ldr	r3, [sp, #4]
 800740e:	61a3      	str	r3, [r4, #24]
 8007410:	2b00      	cmp	r3, #0
 8007412:	bf0c      	ite	eq
 8007414:	2201      	moveq	r2, #1
 8007416:	2202      	movne	r2, #2
 8007418:	6122      	str	r2, [r4, #16]
 800741a:	b1a5      	cbz	r5, 8007446 <__d2b+0x92>
 800741c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007420:	4405      	add	r5, r0
 8007422:	603d      	str	r5, [r7, #0]
 8007424:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007428:	6030      	str	r0, [r6, #0]
 800742a:	4620      	mov	r0, r4
 800742c:	b003      	add	sp, #12
 800742e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007432:	6161      	str	r1, [r4, #20]
 8007434:	e7ea      	b.n	800740c <__d2b+0x58>
 8007436:	a801      	add	r0, sp, #4
 8007438:	f7ff fd59 	bl	8006eee <__lo0bits>
 800743c:	9b01      	ldr	r3, [sp, #4]
 800743e:	6163      	str	r3, [r4, #20]
 8007440:	3020      	adds	r0, #32
 8007442:	2201      	movs	r2, #1
 8007444:	e7e8      	b.n	8007418 <__d2b+0x64>
 8007446:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800744a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800744e:	6038      	str	r0, [r7, #0]
 8007450:	6918      	ldr	r0, [r3, #16]
 8007452:	f7ff fd2d 	bl	8006eb0 <__hi0bits>
 8007456:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800745a:	e7e5      	b.n	8007428 <__d2b+0x74>
 800745c:	08008f0c 	.word	0x08008f0c
 8007460:	08008f1d 	.word	0x08008f1d

08007464 <__ssputs_r>:
 8007464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007468:	688e      	ldr	r6, [r1, #8]
 800746a:	461f      	mov	r7, r3
 800746c:	42be      	cmp	r6, r7
 800746e:	680b      	ldr	r3, [r1, #0]
 8007470:	4682      	mov	sl, r0
 8007472:	460c      	mov	r4, r1
 8007474:	4690      	mov	r8, r2
 8007476:	d82d      	bhi.n	80074d4 <__ssputs_r+0x70>
 8007478:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800747c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007480:	d026      	beq.n	80074d0 <__ssputs_r+0x6c>
 8007482:	6965      	ldr	r5, [r4, #20]
 8007484:	6909      	ldr	r1, [r1, #16]
 8007486:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800748a:	eba3 0901 	sub.w	r9, r3, r1
 800748e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007492:	1c7b      	adds	r3, r7, #1
 8007494:	444b      	add	r3, r9
 8007496:	106d      	asrs	r5, r5, #1
 8007498:	429d      	cmp	r5, r3
 800749a:	bf38      	it	cc
 800749c:	461d      	movcc	r5, r3
 800749e:	0553      	lsls	r3, r2, #21
 80074a0:	d527      	bpl.n	80074f2 <__ssputs_r+0x8e>
 80074a2:	4629      	mov	r1, r5
 80074a4:	f7ff fbd0 	bl	8006c48 <_malloc_r>
 80074a8:	4606      	mov	r6, r0
 80074aa:	b360      	cbz	r0, 8007506 <__ssputs_r+0xa2>
 80074ac:	6921      	ldr	r1, [r4, #16]
 80074ae:	464a      	mov	r2, r9
 80074b0:	f000 fa06 	bl	80078c0 <memcpy>
 80074b4:	89a3      	ldrh	r3, [r4, #12]
 80074b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80074ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074be:	81a3      	strh	r3, [r4, #12]
 80074c0:	6126      	str	r6, [r4, #16]
 80074c2:	6165      	str	r5, [r4, #20]
 80074c4:	444e      	add	r6, r9
 80074c6:	eba5 0509 	sub.w	r5, r5, r9
 80074ca:	6026      	str	r6, [r4, #0]
 80074cc:	60a5      	str	r5, [r4, #8]
 80074ce:	463e      	mov	r6, r7
 80074d0:	42be      	cmp	r6, r7
 80074d2:	d900      	bls.n	80074d6 <__ssputs_r+0x72>
 80074d4:	463e      	mov	r6, r7
 80074d6:	6820      	ldr	r0, [r4, #0]
 80074d8:	4632      	mov	r2, r6
 80074da:	4641      	mov	r1, r8
 80074dc:	f000 f9c6 	bl	800786c <memmove>
 80074e0:	68a3      	ldr	r3, [r4, #8]
 80074e2:	1b9b      	subs	r3, r3, r6
 80074e4:	60a3      	str	r3, [r4, #8]
 80074e6:	6823      	ldr	r3, [r4, #0]
 80074e8:	4433      	add	r3, r6
 80074ea:	6023      	str	r3, [r4, #0]
 80074ec:	2000      	movs	r0, #0
 80074ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074f2:	462a      	mov	r2, r5
 80074f4:	f000 fa36 	bl	8007964 <_realloc_r>
 80074f8:	4606      	mov	r6, r0
 80074fa:	2800      	cmp	r0, #0
 80074fc:	d1e0      	bne.n	80074c0 <__ssputs_r+0x5c>
 80074fe:	6921      	ldr	r1, [r4, #16]
 8007500:	4650      	mov	r0, sl
 8007502:	f7ff fb2d 	bl	8006b60 <_free_r>
 8007506:	230c      	movs	r3, #12
 8007508:	f8ca 3000 	str.w	r3, [sl]
 800750c:	89a3      	ldrh	r3, [r4, #12]
 800750e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007512:	81a3      	strh	r3, [r4, #12]
 8007514:	f04f 30ff 	mov.w	r0, #4294967295
 8007518:	e7e9      	b.n	80074ee <__ssputs_r+0x8a>
	...

0800751c <_svfiprintf_r>:
 800751c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007520:	4698      	mov	r8, r3
 8007522:	898b      	ldrh	r3, [r1, #12]
 8007524:	061b      	lsls	r3, r3, #24
 8007526:	b09d      	sub	sp, #116	@ 0x74
 8007528:	4607      	mov	r7, r0
 800752a:	460d      	mov	r5, r1
 800752c:	4614      	mov	r4, r2
 800752e:	d510      	bpl.n	8007552 <_svfiprintf_r+0x36>
 8007530:	690b      	ldr	r3, [r1, #16]
 8007532:	b973      	cbnz	r3, 8007552 <_svfiprintf_r+0x36>
 8007534:	2140      	movs	r1, #64	@ 0x40
 8007536:	f7ff fb87 	bl	8006c48 <_malloc_r>
 800753a:	6028      	str	r0, [r5, #0]
 800753c:	6128      	str	r0, [r5, #16]
 800753e:	b930      	cbnz	r0, 800754e <_svfiprintf_r+0x32>
 8007540:	230c      	movs	r3, #12
 8007542:	603b      	str	r3, [r7, #0]
 8007544:	f04f 30ff 	mov.w	r0, #4294967295
 8007548:	b01d      	add	sp, #116	@ 0x74
 800754a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800754e:	2340      	movs	r3, #64	@ 0x40
 8007550:	616b      	str	r3, [r5, #20]
 8007552:	2300      	movs	r3, #0
 8007554:	9309      	str	r3, [sp, #36]	@ 0x24
 8007556:	2320      	movs	r3, #32
 8007558:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800755c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007560:	2330      	movs	r3, #48	@ 0x30
 8007562:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007700 <_svfiprintf_r+0x1e4>
 8007566:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800756a:	f04f 0901 	mov.w	r9, #1
 800756e:	4623      	mov	r3, r4
 8007570:	469a      	mov	sl, r3
 8007572:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007576:	b10a      	cbz	r2, 800757c <_svfiprintf_r+0x60>
 8007578:	2a25      	cmp	r2, #37	@ 0x25
 800757a:	d1f9      	bne.n	8007570 <_svfiprintf_r+0x54>
 800757c:	ebba 0b04 	subs.w	fp, sl, r4
 8007580:	d00b      	beq.n	800759a <_svfiprintf_r+0x7e>
 8007582:	465b      	mov	r3, fp
 8007584:	4622      	mov	r2, r4
 8007586:	4629      	mov	r1, r5
 8007588:	4638      	mov	r0, r7
 800758a:	f7ff ff6b 	bl	8007464 <__ssputs_r>
 800758e:	3001      	adds	r0, #1
 8007590:	f000 80a7 	beq.w	80076e2 <_svfiprintf_r+0x1c6>
 8007594:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007596:	445a      	add	r2, fp
 8007598:	9209      	str	r2, [sp, #36]	@ 0x24
 800759a:	f89a 3000 	ldrb.w	r3, [sl]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	f000 809f 	beq.w	80076e2 <_svfiprintf_r+0x1c6>
 80075a4:	2300      	movs	r3, #0
 80075a6:	f04f 32ff 	mov.w	r2, #4294967295
 80075aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075ae:	f10a 0a01 	add.w	sl, sl, #1
 80075b2:	9304      	str	r3, [sp, #16]
 80075b4:	9307      	str	r3, [sp, #28]
 80075b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80075ba:	931a      	str	r3, [sp, #104]	@ 0x68
 80075bc:	4654      	mov	r4, sl
 80075be:	2205      	movs	r2, #5
 80075c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075c4:	484e      	ldr	r0, [pc, #312]	@ (8007700 <_svfiprintf_r+0x1e4>)
 80075c6:	f7f8 fe0b 	bl	80001e0 <memchr>
 80075ca:	9a04      	ldr	r2, [sp, #16]
 80075cc:	b9d8      	cbnz	r0, 8007606 <_svfiprintf_r+0xea>
 80075ce:	06d0      	lsls	r0, r2, #27
 80075d0:	bf44      	itt	mi
 80075d2:	2320      	movmi	r3, #32
 80075d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80075d8:	0711      	lsls	r1, r2, #28
 80075da:	bf44      	itt	mi
 80075dc:	232b      	movmi	r3, #43	@ 0x2b
 80075de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80075e2:	f89a 3000 	ldrb.w	r3, [sl]
 80075e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80075e8:	d015      	beq.n	8007616 <_svfiprintf_r+0xfa>
 80075ea:	9a07      	ldr	r2, [sp, #28]
 80075ec:	4654      	mov	r4, sl
 80075ee:	2000      	movs	r0, #0
 80075f0:	f04f 0c0a 	mov.w	ip, #10
 80075f4:	4621      	mov	r1, r4
 80075f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075fa:	3b30      	subs	r3, #48	@ 0x30
 80075fc:	2b09      	cmp	r3, #9
 80075fe:	d94b      	bls.n	8007698 <_svfiprintf_r+0x17c>
 8007600:	b1b0      	cbz	r0, 8007630 <_svfiprintf_r+0x114>
 8007602:	9207      	str	r2, [sp, #28]
 8007604:	e014      	b.n	8007630 <_svfiprintf_r+0x114>
 8007606:	eba0 0308 	sub.w	r3, r0, r8
 800760a:	fa09 f303 	lsl.w	r3, r9, r3
 800760e:	4313      	orrs	r3, r2
 8007610:	9304      	str	r3, [sp, #16]
 8007612:	46a2      	mov	sl, r4
 8007614:	e7d2      	b.n	80075bc <_svfiprintf_r+0xa0>
 8007616:	9b03      	ldr	r3, [sp, #12]
 8007618:	1d19      	adds	r1, r3, #4
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	9103      	str	r1, [sp, #12]
 800761e:	2b00      	cmp	r3, #0
 8007620:	bfbb      	ittet	lt
 8007622:	425b      	neglt	r3, r3
 8007624:	f042 0202 	orrlt.w	r2, r2, #2
 8007628:	9307      	strge	r3, [sp, #28]
 800762a:	9307      	strlt	r3, [sp, #28]
 800762c:	bfb8      	it	lt
 800762e:	9204      	strlt	r2, [sp, #16]
 8007630:	7823      	ldrb	r3, [r4, #0]
 8007632:	2b2e      	cmp	r3, #46	@ 0x2e
 8007634:	d10a      	bne.n	800764c <_svfiprintf_r+0x130>
 8007636:	7863      	ldrb	r3, [r4, #1]
 8007638:	2b2a      	cmp	r3, #42	@ 0x2a
 800763a:	d132      	bne.n	80076a2 <_svfiprintf_r+0x186>
 800763c:	9b03      	ldr	r3, [sp, #12]
 800763e:	1d1a      	adds	r2, r3, #4
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	9203      	str	r2, [sp, #12]
 8007644:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007648:	3402      	adds	r4, #2
 800764a:	9305      	str	r3, [sp, #20]
 800764c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007710 <_svfiprintf_r+0x1f4>
 8007650:	7821      	ldrb	r1, [r4, #0]
 8007652:	2203      	movs	r2, #3
 8007654:	4650      	mov	r0, sl
 8007656:	f7f8 fdc3 	bl	80001e0 <memchr>
 800765a:	b138      	cbz	r0, 800766c <_svfiprintf_r+0x150>
 800765c:	9b04      	ldr	r3, [sp, #16]
 800765e:	eba0 000a 	sub.w	r0, r0, sl
 8007662:	2240      	movs	r2, #64	@ 0x40
 8007664:	4082      	lsls	r2, r0
 8007666:	4313      	orrs	r3, r2
 8007668:	3401      	adds	r4, #1
 800766a:	9304      	str	r3, [sp, #16]
 800766c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007670:	4824      	ldr	r0, [pc, #144]	@ (8007704 <_svfiprintf_r+0x1e8>)
 8007672:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007676:	2206      	movs	r2, #6
 8007678:	f7f8 fdb2 	bl	80001e0 <memchr>
 800767c:	2800      	cmp	r0, #0
 800767e:	d036      	beq.n	80076ee <_svfiprintf_r+0x1d2>
 8007680:	4b21      	ldr	r3, [pc, #132]	@ (8007708 <_svfiprintf_r+0x1ec>)
 8007682:	bb1b      	cbnz	r3, 80076cc <_svfiprintf_r+0x1b0>
 8007684:	9b03      	ldr	r3, [sp, #12]
 8007686:	3307      	adds	r3, #7
 8007688:	f023 0307 	bic.w	r3, r3, #7
 800768c:	3308      	adds	r3, #8
 800768e:	9303      	str	r3, [sp, #12]
 8007690:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007692:	4433      	add	r3, r6
 8007694:	9309      	str	r3, [sp, #36]	@ 0x24
 8007696:	e76a      	b.n	800756e <_svfiprintf_r+0x52>
 8007698:	fb0c 3202 	mla	r2, ip, r2, r3
 800769c:	460c      	mov	r4, r1
 800769e:	2001      	movs	r0, #1
 80076a0:	e7a8      	b.n	80075f4 <_svfiprintf_r+0xd8>
 80076a2:	2300      	movs	r3, #0
 80076a4:	3401      	adds	r4, #1
 80076a6:	9305      	str	r3, [sp, #20]
 80076a8:	4619      	mov	r1, r3
 80076aa:	f04f 0c0a 	mov.w	ip, #10
 80076ae:	4620      	mov	r0, r4
 80076b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076b4:	3a30      	subs	r2, #48	@ 0x30
 80076b6:	2a09      	cmp	r2, #9
 80076b8:	d903      	bls.n	80076c2 <_svfiprintf_r+0x1a6>
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d0c6      	beq.n	800764c <_svfiprintf_r+0x130>
 80076be:	9105      	str	r1, [sp, #20]
 80076c0:	e7c4      	b.n	800764c <_svfiprintf_r+0x130>
 80076c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80076c6:	4604      	mov	r4, r0
 80076c8:	2301      	movs	r3, #1
 80076ca:	e7f0      	b.n	80076ae <_svfiprintf_r+0x192>
 80076cc:	ab03      	add	r3, sp, #12
 80076ce:	9300      	str	r3, [sp, #0]
 80076d0:	462a      	mov	r2, r5
 80076d2:	4b0e      	ldr	r3, [pc, #56]	@ (800770c <_svfiprintf_r+0x1f0>)
 80076d4:	a904      	add	r1, sp, #16
 80076d6:	4638      	mov	r0, r7
 80076d8:	f7fd fe98 	bl	800540c <_printf_float>
 80076dc:	1c42      	adds	r2, r0, #1
 80076de:	4606      	mov	r6, r0
 80076e0:	d1d6      	bne.n	8007690 <_svfiprintf_r+0x174>
 80076e2:	89ab      	ldrh	r3, [r5, #12]
 80076e4:	065b      	lsls	r3, r3, #25
 80076e6:	f53f af2d 	bmi.w	8007544 <_svfiprintf_r+0x28>
 80076ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80076ec:	e72c      	b.n	8007548 <_svfiprintf_r+0x2c>
 80076ee:	ab03      	add	r3, sp, #12
 80076f0:	9300      	str	r3, [sp, #0]
 80076f2:	462a      	mov	r2, r5
 80076f4:	4b05      	ldr	r3, [pc, #20]	@ (800770c <_svfiprintf_r+0x1f0>)
 80076f6:	a904      	add	r1, sp, #16
 80076f8:	4638      	mov	r0, r7
 80076fa:	f7fe f91f 	bl	800593c <_printf_i>
 80076fe:	e7ed      	b.n	80076dc <_svfiprintf_r+0x1c0>
 8007700:	08009078 	.word	0x08009078
 8007704:	08009082 	.word	0x08009082
 8007708:	0800540d 	.word	0x0800540d
 800770c:	08007465 	.word	0x08007465
 8007710:	0800907e 	.word	0x0800907e

08007714 <__sflush_r>:
 8007714:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800771c:	0716      	lsls	r6, r2, #28
 800771e:	4605      	mov	r5, r0
 8007720:	460c      	mov	r4, r1
 8007722:	d454      	bmi.n	80077ce <__sflush_r+0xba>
 8007724:	684b      	ldr	r3, [r1, #4]
 8007726:	2b00      	cmp	r3, #0
 8007728:	dc02      	bgt.n	8007730 <__sflush_r+0x1c>
 800772a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800772c:	2b00      	cmp	r3, #0
 800772e:	dd48      	ble.n	80077c2 <__sflush_r+0xae>
 8007730:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007732:	2e00      	cmp	r6, #0
 8007734:	d045      	beq.n	80077c2 <__sflush_r+0xae>
 8007736:	2300      	movs	r3, #0
 8007738:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800773c:	682f      	ldr	r7, [r5, #0]
 800773e:	6a21      	ldr	r1, [r4, #32]
 8007740:	602b      	str	r3, [r5, #0]
 8007742:	d030      	beq.n	80077a6 <__sflush_r+0x92>
 8007744:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007746:	89a3      	ldrh	r3, [r4, #12]
 8007748:	0759      	lsls	r1, r3, #29
 800774a:	d505      	bpl.n	8007758 <__sflush_r+0x44>
 800774c:	6863      	ldr	r3, [r4, #4]
 800774e:	1ad2      	subs	r2, r2, r3
 8007750:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007752:	b10b      	cbz	r3, 8007758 <__sflush_r+0x44>
 8007754:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007756:	1ad2      	subs	r2, r2, r3
 8007758:	2300      	movs	r3, #0
 800775a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800775c:	6a21      	ldr	r1, [r4, #32]
 800775e:	4628      	mov	r0, r5
 8007760:	47b0      	blx	r6
 8007762:	1c43      	adds	r3, r0, #1
 8007764:	89a3      	ldrh	r3, [r4, #12]
 8007766:	d106      	bne.n	8007776 <__sflush_r+0x62>
 8007768:	6829      	ldr	r1, [r5, #0]
 800776a:	291d      	cmp	r1, #29
 800776c:	d82b      	bhi.n	80077c6 <__sflush_r+0xb2>
 800776e:	4a2a      	ldr	r2, [pc, #168]	@ (8007818 <__sflush_r+0x104>)
 8007770:	410a      	asrs	r2, r1
 8007772:	07d6      	lsls	r6, r2, #31
 8007774:	d427      	bmi.n	80077c6 <__sflush_r+0xb2>
 8007776:	2200      	movs	r2, #0
 8007778:	6062      	str	r2, [r4, #4]
 800777a:	04d9      	lsls	r1, r3, #19
 800777c:	6922      	ldr	r2, [r4, #16]
 800777e:	6022      	str	r2, [r4, #0]
 8007780:	d504      	bpl.n	800778c <__sflush_r+0x78>
 8007782:	1c42      	adds	r2, r0, #1
 8007784:	d101      	bne.n	800778a <__sflush_r+0x76>
 8007786:	682b      	ldr	r3, [r5, #0]
 8007788:	b903      	cbnz	r3, 800778c <__sflush_r+0x78>
 800778a:	6560      	str	r0, [r4, #84]	@ 0x54
 800778c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800778e:	602f      	str	r7, [r5, #0]
 8007790:	b1b9      	cbz	r1, 80077c2 <__sflush_r+0xae>
 8007792:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007796:	4299      	cmp	r1, r3
 8007798:	d002      	beq.n	80077a0 <__sflush_r+0x8c>
 800779a:	4628      	mov	r0, r5
 800779c:	f7ff f9e0 	bl	8006b60 <_free_r>
 80077a0:	2300      	movs	r3, #0
 80077a2:	6363      	str	r3, [r4, #52]	@ 0x34
 80077a4:	e00d      	b.n	80077c2 <__sflush_r+0xae>
 80077a6:	2301      	movs	r3, #1
 80077a8:	4628      	mov	r0, r5
 80077aa:	47b0      	blx	r6
 80077ac:	4602      	mov	r2, r0
 80077ae:	1c50      	adds	r0, r2, #1
 80077b0:	d1c9      	bne.n	8007746 <__sflush_r+0x32>
 80077b2:	682b      	ldr	r3, [r5, #0]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d0c6      	beq.n	8007746 <__sflush_r+0x32>
 80077b8:	2b1d      	cmp	r3, #29
 80077ba:	d001      	beq.n	80077c0 <__sflush_r+0xac>
 80077bc:	2b16      	cmp	r3, #22
 80077be:	d11e      	bne.n	80077fe <__sflush_r+0xea>
 80077c0:	602f      	str	r7, [r5, #0]
 80077c2:	2000      	movs	r0, #0
 80077c4:	e022      	b.n	800780c <__sflush_r+0xf8>
 80077c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077ca:	b21b      	sxth	r3, r3
 80077cc:	e01b      	b.n	8007806 <__sflush_r+0xf2>
 80077ce:	690f      	ldr	r7, [r1, #16]
 80077d0:	2f00      	cmp	r7, #0
 80077d2:	d0f6      	beq.n	80077c2 <__sflush_r+0xae>
 80077d4:	0793      	lsls	r3, r2, #30
 80077d6:	680e      	ldr	r6, [r1, #0]
 80077d8:	bf08      	it	eq
 80077da:	694b      	ldreq	r3, [r1, #20]
 80077dc:	600f      	str	r7, [r1, #0]
 80077de:	bf18      	it	ne
 80077e0:	2300      	movne	r3, #0
 80077e2:	eba6 0807 	sub.w	r8, r6, r7
 80077e6:	608b      	str	r3, [r1, #8]
 80077e8:	f1b8 0f00 	cmp.w	r8, #0
 80077ec:	dde9      	ble.n	80077c2 <__sflush_r+0xae>
 80077ee:	6a21      	ldr	r1, [r4, #32]
 80077f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80077f2:	4643      	mov	r3, r8
 80077f4:	463a      	mov	r2, r7
 80077f6:	4628      	mov	r0, r5
 80077f8:	47b0      	blx	r6
 80077fa:	2800      	cmp	r0, #0
 80077fc:	dc08      	bgt.n	8007810 <__sflush_r+0xfc>
 80077fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007802:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007806:	81a3      	strh	r3, [r4, #12]
 8007808:	f04f 30ff 	mov.w	r0, #4294967295
 800780c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007810:	4407      	add	r7, r0
 8007812:	eba8 0800 	sub.w	r8, r8, r0
 8007816:	e7e7      	b.n	80077e8 <__sflush_r+0xd4>
 8007818:	dfbffffe 	.word	0xdfbffffe

0800781c <_fflush_r>:
 800781c:	b538      	push	{r3, r4, r5, lr}
 800781e:	690b      	ldr	r3, [r1, #16]
 8007820:	4605      	mov	r5, r0
 8007822:	460c      	mov	r4, r1
 8007824:	b913      	cbnz	r3, 800782c <_fflush_r+0x10>
 8007826:	2500      	movs	r5, #0
 8007828:	4628      	mov	r0, r5
 800782a:	bd38      	pop	{r3, r4, r5, pc}
 800782c:	b118      	cbz	r0, 8007836 <_fflush_r+0x1a>
 800782e:	6a03      	ldr	r3, [r0, #32]
 8007830:	b90b      	cbnz	r3, 8007836 <_fflush_r+0x1a>
 8007832:	f7fe fa2f 	bl	8005c94 <__sinit>
 8007836:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d0f3      	beq.n	8007826 <_fflush_r+0xa>
 800783e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007840:	07d0      	lsls	r0, r2, #31
 8007842:	d404      	bmi.n	800784e <_fflush_r+0x32>
 8007844:	0599      	lsls	r1, r3, #22
 8007846:	d402      	bmi.n	800784e <_fflush_r+0x32>
 8007848:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800784a:	f7fe fb3a 	bl	8005ec2 <__retarget_lock_acquire_recursive>
 800784e:	4628      	mov	r0, r5
 8007850:	4621      	mov	r1, r4
 8007852:	f7ff ff5f 	bl	8007714 <__sflush_r>
 8007856:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007858:	07da      	lsls	r2, r3, #31
 800785a:	4605      	mov	r5, r0
 800785c:	d4e4      	bmi.n	8007828 <_fflush_r+0xc>
 800785e:	89a3      	ldrh	r3, [r4, #12]
 8007860:	059b      	lsls	r3, r3, #22
 8007862:	d4e1      	bmi.n	8007828 <_fflush_r+0xc>
 8007864:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007866:	f7fe fb2d 	bl	8005ec4 <__retarget_lock_release_recursive>
 800786a:	e7dd      	b.n	8007828 <_fflush_r+0xc>

0800786c <memmove>:
 800786c:	4288      	cmp	r0, r1
 800786e:	b510      	push	{r4, lr}
 8007870:	eb01 0402 	add.w	r4, r1, r2
 8007874:	d902      	bls.n	800787c <memmove+0x10>
 8007876:	4284      	cmp	r4, r0
 8007878:	4623      	mov	r3, r4
 800787a:	d807      	bhi.n	800788c <memmove+0x20>
 800787c:	1e43      	subs	r3, r0, #1
 800787e:	42a1      	cmp	r1, r4
 8007880:	d008      	beq.n	8007894 <memmove+0x28>
 8007882:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007886:	f803 2f01 	strb.w	r2, [r3, #1]!
 800788a:	e7f8      	b.n	800787e <memmove+0x12>
 800788c:	4402      	add	r2, r0
 800788e:	4601      	mov	r1, r0
 8007890:	428a      	cmp	r2, r1
 8007892:	d100      	bne.n	8007896 <memmove+0x2a>
 8007894:	bd10      	pop	{r4, pc}
 8007896:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800789a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800789e:	e7f7      	b.n	8007890 <memmove+0x24>

080078a0 <_sbrk_r>:
 80078a0:	b538      	push	{r3, r4, r5, lr}
 80078a2:	4d06      	ldr	r5, [pc, #24]	@ (80078bc <_sbrk_r+0x1c>)
 80078a4:	2300      	movs	r3, #0
 80078a6:	4604      	mov	r4, r0
 80078a8:	4608      	mov	r0, r1
 80078aa:	602b      	str	r3, [r5, #0]
 80078ac:	f7fa f90a 	bl	8001ac4 <_sbrk>
 80078b0:	1c43      	adds	r3, r0, #1
 80078b2:	d102      	bne.n	80078ba <_sbrk_r+0x1a>
 80078b4:	682b      	ldr	r3, [r5, #0]
 80078b6:	b103      	cbz	r3, 80078ba <_sbrk_r+0x1a>
 80078b8:	6023      	str	r3, [r4, #0]
 80078ba:	bd38      	pop	{r3, r4, r5, pc}
 80078bc:	200004d4 	.word	0x200004d4

080078c0 <memcpy>:
 80078c0:	440a      	add	r2, r1
 80078c2:	4291      	cmp	r1, r2
 80078c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80078c8:	d100      	bne.n	80078cc <memcpy+0xc>
 80078ca:	4770      	bx	lr
 80078cc:	b510      	push	{r4, lr}
 80078ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078d6:	4291      	cmp	r1, r2
 80078d8:	d1f9      	bne.n	80078ce <memcpy+0xe>
 80078da:	bd10      	pop	{r4, pc}

080078dc <__assert_func>:
 80078dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80078de:	4614      	mov	r4, r2
 80078e0:	461a      	mov	r2, r3
 80078e2:	4b09      	ldr	r3, [pc, #36]	@ (8007908 <__assert_func+0x2c>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4605      	mov	r5, r0
 80078e8:	68d8      	ldr	r0, [r3, #12]
 80078ea:	b954      	cbnz	r4, 8007902 <__assert_func+0x26>
 80078ec:	4b07      	ldr	r3, [pc, #28]	@ (800790c <__assert_func+0x30>)
 80078ee:	461c      	mov	r4, r3
 80078f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80078f4:	9100      	str	r1, [sp, #0]
 80078f6:	462b      	mov	r3, r5
 80078f8:	4905      	ldr	r1, [pc, #20]	@ (8007910 <__assert_func+0x34>)
 80078fa:	f000 f86f 	bl	80079dc <fiprintf>
 80078fe:	f000 f87f 	bl	8007a00 <abort>
 8007902:	4b04      	ldr	r3, [pc, #16]	@ (8007914 <__assert_func+0x38>)
 8007904:	e7f4      	b.n	80078f0 <__assert_func+0x14>
 8007906:	bf00      	nop
 8007908:	20000018 	.word	0x20000018
 800790c:	080090ce 	.word	0x080090ce
 8007910:	080090a0 	.word	0x080090a0
 8007914:	08009093 	.word	0x08009093

08007918 <_calloc_r>:
 8007918:	b570      	push	{r4, r5, r6, lr}
 800791a:	fba1 5402 	umull	r5, r4, r1, r2
 800791e:	b93c      	cbnz	r4, 8007930 <_calloc_r+0x18>
 8007920:	4629      	mov	r1, r5
 8007922:	f7ff f991 	bl	8006c48 <_malloc_r>
 8007926:	4606      	mov	r6, r0
 8007928:	b928      	cbnz	r0, 8007936 <_calloc_r+0x1e>
 800792a:	2600      	movs	r6, #0
 800792c:	4630      	mov	r0, r6
 800792e:	bd70      	pop	{r4, r5, r6, pc}
 8007930:	220c      	movs	r2, #12
 8007932:	6002      	str	r2, [r0, #0]
 8007934:	e7f9      	b.n	800792a <_calloc_r+0x12>
 8007936:	462a      	mov	r2, r5
 8007938:	4621      	mov	r1, r4
 800793a:	f7fe fa44 	bl	8005dc6 <memset>
 800793e:	e7f5      	b.n	800792c <_calloc_r+0x14>

08007940 <__ascii_mbtowc>:
 8007940:	b082      	sub	sp, #8
 8007942:	b901      	cbnz	r1, 8007946 <__ascii_mbtowc+0x6>
 8007944:	a901      	add	r1, sp, #4
 8007946:	b142      	cbz	r2, 800795a <__ascii_mbtowc+0x1a>
 8007948:	b14b      	cbz	r3, 800795e <__ascii_mbtowc+0x1e>
 800794a:	7813      	ldrb	r3, [r2, #0]
 800794c:	600b      	str	r3, [r1, #0]
 800794e:	7812      	ldrb	r2, [r2, #0]
 8007950:	1e10      	subs	r0, r2, #0
 8007952:	bf18      	it	ne
 8007954:	2001      	movne	r0, #1
 8007956:	b002      	add	sp, #8
 8007958:	4770      	bx	lr
 800795a:	4610      	mov	r0, r2
 800795c:	e7fb      	b.n	8007956 <__ascii_mbtowc+0x16>
 800795e:	f06f 0001 	mvn.w	r0, #1
 8007962:	e7f8      	b.n	8007956 <__ascii_mbtowc+0x16>

08007964 <_realloc_r>:
 8007964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007968:	4680      	mov	r8, r0
 800796a:	4615      	mov	r5, r2
 800796c:	460c      	mov	r4, r1
 800796e:	b921      	cbnz	r1, 800797a <_realloc_r+0x16>
 8007970:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007974:	4611      	mov	r1, r2
 8007976:	f7ff b967 	b.w	8006c48 <_malloc_r>
 800797a:	b92a      	cbnz	r2, 8007988 <_realloc_r+0x24>
 800797c:	f7ff f8f0 	bl	8006b60 <_free_r>
 8007980:	2400      	movs	r4, #0
 8007982:	4620      	mov	r0, r4
 8007984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007988:	f000 f841 	bl	8007a0e <_malloc_usable_size_r>
 800798c:	4285      	cmp	r5, r0
 800798e:	4606      	mov	r6, r0
 8007990:	d802      	bhi.n	8007998 <_realloc_r+0x34>
 8007992:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007996:	d8f4      	bhi.n	8007982 <_realloc_r+0x1e>
 8007998:	4629      	mov	r1, r5
 800799a:	4640      	mov	r0, r8
 800799c:	f7ff f954 	bl	8006c48 <_malloc_r>
 80079a0:	4607      	mov	r7, r0
 80079a2:	2800      	cmp	r0, #0
 80079a4:	d0ec      	beq.n	8007980 <_realloc_r+0x1c>
 80079a6:	42b5      	cmp	r5, r6
 80079a8:	462a      	mov	r2, r5
 80079aa:	4621      	mov	r1, r4
 80079ac:	bf28      	it	cs
 80079ae:	4632      	movcs	r2, r6
 80079b0:	f7ff ff86 	bl	80078c0 <memcpy>
 80079b4:	4621      	mov	r1, r4
 80079b6:	4640      	mov	r0, r8
 80079b8:	f7ff f8d2 	bl	8006b60 <_free_r>
 80079bc:	463c      	mov	r4, r7
 80079be:	e7e0      	b.n	8007982 <_realloc_r+0x1e>

080079c0 <__ascii_wctomb>:
 80079c0:	4603      	mov	r3, r0
 80079c2:	4608      	mov	r0, r1
 80079c4:	b141      	cbz	r1, 80079d8 <__ascii_wctomb+0x18>
 80079c6:	2aff      	cmp	r2, #255	@ 0xff
 80079c8:	d904      	bls.n	80079d4 <__ascii_wctomb+0x14>
 80079ca:	228a      	movs	r2, #138	@ 0x8a
 80079cc:	601a      	str	r2, [r3, #0]
 80079ce:	f04f 30ff 	mov.w	r0, #4294967295
 80079d2:	4770      	bx	lr
 80079d4:	700a      	strb	r2, [r1, #0]
 80079d6:	2001      	movs	r0, #1
 80079d8:	4770      	bx	lr
	...

080079dc <fiprintf>:
 80079dc:	b40e      	push	{r1, r2, r3}
 80079de:	b503      	push	{r0, r1, lr}
 80079e0:	4601      	mov	r1, r0
 80079e2:	ab03      	add	r3, sp, #12
 80079e4:	4805      	ldr	r0, [pc, #20]	@ (80079fc <fiprintf+0x20>)
 80079e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80079ea:	6800      	ldr	r0, [r0, #0]
 80079ec:	9301      	str	r3, [sp, #4]
 80079ee:	f000 f83f 	bl	8007a70 <_vfiprintf_r>
 80079f2:	b002      	add	sp, #8
 80079f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80079f8:	b003      	add	sp, #12
 80079fa:	4770      	bx	lr
 80079fc:	20000018 	.word	0x20000018

08007a00 <abort>:
 8007a00:	b508      	push	{r3, lr}
 8007a02:	2006      	movs	r0, #6
 8007a04:	f000 fa08 	bl	8007e18 <raise>
 8007a08:	2001      	movs	r0, #1
 8007a0a:	f7f9 ffe3 	bl	80019d4 <_exit>

08007a0e <_malloc_usable_size_r>:
 8007a0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a12:	1f18      	subs	r0, r3, #4
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	bfbc      	itt	lt
 8007a18:	580b      	ldrlt	r3, [r1, r0]
 8007a1a:	18c0      	addlt	r0, r0, r3
 8007a1c:	4770      	bx	lr

08007a1e <__sfputc_r>:
 8007a1e:	6893      	ldr	r3, [r2, #8]
 8007a20:	3b01      	subs	r3, #1
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	b410      	push	{r4}
 8007a26:	6093      	str	r3, [r2, #8]
 8007a28:	da08      	bge.n	8007a3c <__sfputc_r+0x1e>
 8007a2a:	6994      	ldr	r4, [r2, #24]
 8007a2c:	42a3      	cmp	r3, r4
 8007a2e:	db01      	blt.n	8007a34 <__sfputc_r+0x16>
 8007a30:	290a      	cmp	r1, #10
 8007a32:	d103      	bne.n	8007a3c <__sfputc_r+0x1e>
 8007a34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a38:	f000 b932 	b.w	8007ca0 <__swbuf_r>
 8007a3c:	6813      	ldr	r3, [r2, #0]
 8007a3e:	1c58      	adds	r0, r3, #1
 8007a40:	6010      	str	r0, [r2, #0]
 8007a42:	7019      	strb	r1, [r3, #0]
 8007a44:	4608      	mov	r0, r1
 8007a46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a4a:	4770      	bx	lr

08007a4c <__sfputs_r>:
 8007a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a4e:	4606      	mov	r6, r0
 8007a50:	460f      	mov	r7, r1
 8007a52:	4614      	mov	r4, r2
 8007a54:	18d5      	adds	r5, r2, r3
 8007a56:	42ac      	cmp	r4, r5
 8007a58:	d101      	bne.n	8007a5e <__sfputs_r+0x12>
 8007a5a:	2000      	movs	r0, #0
 8007a5c:	e007      	b.n	8007a6e <__sfputs_r+0x22>
 8007a5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a62:	463a      	mov	r2, r7
 8007a64:	4630      	mov	r0, r6
 8007a66:	f7ff ffda 	bl	8007a1e <__sfputc_r>
 8007a6a:	1c43      	adds	r3, r0, #1
 8007a6c:	d1f3      	bne.n	8007a56 <__sfputs_r+0xa>
 8007a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007a70 <_vfiprintf_r>:
 8007a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a74:	460d      	mov	r5, r1
 8007a76:	b09d      	sub	sp, #116	@ 0x74
 8007a78:	4614      	mov	r4, r2
 8007a7a:	4698      	mov	r8, r3
 8007a7c:	4606      	mov	r6, r0
 8007a7e:	b118      	cbz	r0, 8007a88 <_vfiprintf_r+0x18>
 8007a80:	6a03      	ldr	r3, [r0, #32]
 8007a82:	b90b      	cbnz	r3, 8007a88 <_vfiprintf_r+0x18>
 8007a84:	f7fe f906 	bl	8005c94 <__sinit>
 8007a88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007a8a:	07d9      	lsls	r1, r3, #31
 8007a8c:	d405      	bmi.n	8007a9a <_vfiprintf_r+0x2a>
 8007a8e:	89ab      	ldrh	r3, [r5, #12]
 8007a90:	059a      	lsls	r2, r3, #22
 8007a92:	d402      	bmi.n	8007a9a <_vfiprintf_r+0x2a>
 8007a94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007a96:	f7fe fa14 	bl	8005ec2 <__retarget_lock_acquire_recursive>
 8007a9a:	89ab      	ldrh	r3, [r5, #12]
 8007a9c:	071b      	lsls	r3, r3, #28
 8007a9e:	d501      	bpl.n	8007aa4 <_vfiprintf_r+0x34>
 8007aa0:	692b      	ldr	r3, [r5, #16]
 8007aa2:	b99b      	cbnz	r3, 8007acc <_vfiprintf_r+0x5c>
 8007aa4:	4629      	mov	r1, r5
 8007aa6:	4630      	mov	r0, r6
 8007aa8:	f000 f938 	bl	8007d1c <__swsetup_r>
 8007aac:	b170      	cbz	r0, 8007acc <_vfiprintf_r+0x5c>
 8007aae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ab0:	07dc      	lsls	r4, r3, #31
 8007ab2:	d504      	bpl.n	8007abe <_vfiprintf_r+0x4e>
 8007ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ab8:	b01d      	add	sp, #116	@ 0x74
 8007aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007abe:	89ab      	ldrh	r3, [r5, #12]
 8007ac0:	0598      	lsls	r0, r3, #22
 8007ac2:	d4f7      	bmi.n	8007ab4 <_vfiprintf_r+0x44>
 8007ac4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007ac6:	f7fe f9fd 	bl	8005ec4 <__retarget_lock_release_recursive>
 8007aca:	e7f3      	b.n	8007ab4 <_vfiprintf_r+0x44>
 8007acc:	2300      	movs	r3, #0
 8007ace:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ad0:	2320      	movs	r3, #32
 8007ad2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007ad6:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ada:	2330      	movs	r3, #48	@ 0x30
 8007adc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007c8c <_vfiprintf_r+0x21c>
 8007ae0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007ae4:	f04f 0901 	mov.w	r9, #1
 8007ae8:	4623      	mov	r3, r4
 8007aea:	469a      	mov	sl, r3
 8007aec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007af0:	b10a      	cbz	r2, 8007af6 <_vfiprintf_r+0x86>
 8007af2:	2a25      	cmp	r2, #37	@ 0x25
 8007af4:	d1f9      	bne.n	8007aea <_vfiprintf_r+0x7a>
 8007af6:	ebba 0b04 	subs.w	fp, sl, r4
 8007afa:	d00b      	beq.n	8007b14 <_vfiprintf_r+0xa4>
 8007afc:	465b      	mov	r3, fp
 8007afe:	4622      	mov	r2, r4
 8007b00:	4629      	mov	r1, r5
 8007b02:	4630      	mov	r0, r6
 8007b04:	f7ff ffa2 	bl	8007a4c <__sfputs_r>
 8007b08:	3001      	adds	r0, #1
 8007b0a:	f000 80a7 	beq.w	8007c5c <_vfiprintf_r+0x1ec>
 8007b0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b10:	445a      	add	r2, fp
 8007b12:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b14:	f89a 3000 	ldrb.w	r3, [sl]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	f000 809f 	beq.w	8007c5c <_vfiprintf_r+0x1ec>
 8007b1e:	2300      	movs	r3, #0
 8007b20:	f04f 32ff 	mov.w	r2, #4294967295
 8007b24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b28:	f10a 0a01 	add.w	sl, sl, #1
 8007b2c:	9304      	str	r3, [sp, #16]
 8007b2e:	9307      	str	r3, [sp, #28]
 8007b30:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007b34:	931a      	str	r3, [sp, #104]	@ 0x68
 8007b36:	4654      	mov	r4, sl
 8007b38:	2205      	movs	r2, #5
 8007b3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b3e:	4853      	ldr	r0, [pc, #332]	@ (8007c8c <_vfiprintf_r+0x21c>)
 8007b40:	f7f8 fb4e 	bl	80001e0 <memchr>
 8007b44:	9a04      	ldr	r2, [sp, #16]
 8007b46:	b9d8      	cbnz	r0, 8007b80 <_vfiprintf_r+0x110>
 8007b48:	06d1      	lsls	r1, r2, #27
 8007b4a:	bf44      	itt	mi
 8007b4c:	2320      	movmi	r3, #32
 8007b4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b52:	0713      	lsls	r3, r2, #28
 8007b54:	bf44      	itt	mi
 8007b56:	232b      	movmi	r3, #43	@ 0x2b
 8007b58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b5c:	f89a 3000 	ldrb.w	r3, [sl]
 8007b60:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b62:	d015      	beq.n	8007b90 <_vfiprintf_r+0x120>
 8007b64:	9a07      	ldr	r2, [sp, #28]
 8007b66:	4654      	mov	r4, sl
 8007b68:	2000      	movs	r0, #0
 8007b6a:	f04f 0c0a 	mov.w	ip, #10
 8007b6e:	4621      	mov	r1, r4
 8007b70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b74:	3b30      	subs	r3, #48	@ 0x30
 8007b76:	2b09      	cmp	r3, #9
 8007b78:	d94b      	bls.n	8007c12 <_vfiprintf_r+0x1a2>
 8007b7a:	b1b0      	cbz	r0, 8007baa <_vfiprintf_r+0x13a>
 8007b7c:	9207      	str	r2, [sp, #28]
 8007b7e:	e014      	b.n	8007baa <_vfiprintf_r+0x13a>
 8007b80:	eba0 0308 	sub.w	r3, r0, r8
 8007b84:	fa09 f303 	lsl.w	r3, r9, r3
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	9304      	str	r3, [sp, #16]
 8007b8c:	46a2      	mov	sl, r4
 8007b8e:	e7d2      	b.n	8007b36 <_vfiprintf_r+0xc6>
 8007b90:	9b03      	ldr	r3, [sp, #12]
 8007b92:	1d19      	adds	r1, r3, #4
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	9103      	str	r1, [sp, #12]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	bfbb      	ittet	lt
 8007b9c:	425b      	neglt	r3, r3
 8007b9e:	f042 0202 	orrlt.w	r2, r2, #2
 8007ba2:	9307      	strge	r3, [sp, #28]
 8007ba4:	9307      	strlt	r3, [sp, #28]
 8007ba6:	bfb8      	it	lt
 8007ba8:	9204      	strlt	r2, [sp, #16]
 8007baa:	7823      	ldrb	r3, [r4, #0]
 8007bac:	2b2e      	cmp	r3, #46	@ 0x2e
 8007bae:	d10a      	bne.n	8007bc6 <_vfiprintf_r+0x156>
 8007bb0:	7863      	ldrb	r3, [r4, #1]
 8007bb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8007bb4:	d132      	bne.n	8007c1c <_vfiprintf_r+0x1ac>
 8007bb6:	9b03      	ldr	r3, [sp, #12]
 8007bb8:	1d1a      	adds	r2, r3, #4
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	9203      	str	r2, [sp, #12]
 8007bbe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007bc2:	3402      	adds	r4, #2
 8007bc4:	9305      	str	r3, [sp, #20]
 8007bc6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007c9c <_vfiprintf_r+0x22c>
 8007bca:	7821      	ldrb	r1, [r4, #0]
 8007bcc:	2203      	movs	r2, #3
 8007bce:	4650      	mov	r0, sl
 8007bd0:	f7f8 fb06 	bl	80001e0 <memchr>
 8007bd4:	b138      	cbz	r0, 8007be6 <_vfiprintf_r+0x176>
 8007bd6:	9b04      	ldr	r3, [sp, #16]
 8007bd8:	eba0 000a 	sub.w	r0, r0, sl
 8007bdc:	2240      	movs	r2, #64	@ 0x40
 8007bde:	4082      	lsls	r2, r0
 8007be0:	4313      	orrs	r3, r2
 8007be2:	3401      	adds	r4, #1
 8007be4:	9304      	str	r3, [sp, #16]
 8007be6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bea:	4829      	ldr	r0, [pc, #164]	@ (8007c90 <_vfiprintf_r+0x220>)
 8007bec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007bf0:	2206      	movs	r2, #6
 8007bf2:	f7f8 faf5 	bl	80001e0 <memchr>
 8007bf6:	2800      	cmp	r0, #0
 8007bf8:	d03f      	beq.n	8007c7a <_vfiprintf_r+0x20a>
 8007bfa:	4b26      	ldr	r3, [pc, #152]	@ (8007c94 <_vfiprintf_r+0x224>)
 8007bfc:	bb1b      	cbnz	r3, 8007c46 <_vfiprintf_r+0x1d6>
 8007bfe:	9b03      	ldr	r3, [sp, #12]
 8007c00:	3307      	adds	r3, #7
 8007c02:	f023 0307 	bic.w	r3, r3, #7
 8007c06:	3308      	adds	r3, #8
 8007c08:	9303      	str	r3, [sp, #12]
 8007c0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c0c:	443b      	add	r3, r7
 8007c0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c10:	e76a      	b.n	8007ae8 <_vfiprintf_r+0x78>
 8007c12:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c16:	460c      	mov	r4, r1
 8007c18:	2001      	movs	r0, #1
 8007c1a:	e7a8      	b.n	8007b6e <_vfiprintf_r+0xfe>
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	3401      	adds	r4, #1
 8007c20:	9305      	str	r3, [sp, #20]
 8007c22:	4619      	mov	r1, r3
 8007c24:	f04f 0c0a 	mov.w	ip, #10
 8007c28:	4620      	mov	r0, r4
 8007c2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c2e:	3a30      	subs	r2, #48	@ 0x30
 8007c30:	2a09      	cmp	r2, #9
 8007c32:	d903      	bls.n	8007c3c <_vfiprintf_r+0x1cc>
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d0c6      	beq.n	8007bc6 <_vfiprintf_r+0x156>
 8007c38:	9105      	str	r1, [sp, #20]
 8007c3a:	e7c4      	b.n	8007bc6 <_vfiprintf_r+0x156>
 8007c3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c40:	4604      	mov	r4, r0
 8007c42:	2301      	movs	r3, #1
 8007c44:	e7f0      	b.n	8007c28 <_vfiprintf_r+0x1b8>
 8007c46:	ab03      	add	r3, sp, #12
 8007c48:	9300      	str	r3, [sp, #0]
 8007c4a:	462a      	mov	r2, r5
 8007c4c:	4b12      	ldr	r3, [pc, #72]	@ (8007c98 <_vfiprintf_r+0x228>)
 8007c4e:	a904      	add	r1, sp, #16
 8007c50:	4630      	mov	r0, r6
 8007c52:	f7fd fbdb 	bl	800540c <_printf_float>
 8007c56:	4607      	mov	r7, r0
 8007c58:	1c78      	adds	r0, r7, #1
 8007c5a:	d1d6      	bne.n	8007c0a <_vfiprintf_r+0x19a>
 8007c5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c5e:	07d9      	lsls	r1, r3, #31
 8007c60:	d405      	bmi.n	8007c6e <_vfiprintf_r+0x1fe>
 8007c62:	89ab      	ldrh	r3, [r5, #12]
 8007c64:	059a      	lsls	r2, r3, #22
 8007c66:	d402      	bmi.n	8007c6e <_vfiprintf_r+0x1fe>
 8007c68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c6a:	f7fe f92b 	bl	8005ec4 <__retarget_lock_release_recursive>
 8007c6e:	89ab      	ldrh	r3, [r5, #12]
 8007c70:	065b      	lsls	r3, r3, #25
 8007c72:	f53f af1f 	bmi.w	8007ab4 <_vfiprintf_r+0x44>
 8007c76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c78:	e71e      	b.n	8007ab8 <_vfiprintf_r+0x48>
 8007c7a:	ab03      	add	r3, sp, #12
 8007c7c:	9300      	str	r3, [sp, #0]
 8007c7e:	462a      	mov	r2, r5
 8007c80:	4b05      	ldr	r3, [pc, #20]	@ (8007c98 <_vfiprintf_r+0x228>)
 8007c82:	a904      	add	r1, sp, #16
 8007c84:	4630      	mov	r0, r6
 8007c86:	f7fd fe59 	bl	800593c <_printf_i>
 8007c8a:	e7e4      	b.n	8007c56 <_vfiprintf_r+0x1e6>
 8007c8c:	08009078 	.word	0x08009078
 8007c90:	08009082 	.word	0x08009082
 8007c94:	0800540d 	.word	0x0800540d
 8007c98:	08007a4d 	.word	0x08007a4d
 8007c9c:	0800907e 	.word	0x0800907e

08007ca0 <__swbuf_r>:
 8007ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ca2:	460e      	mov	r6, r1
 8007ca4:	4614      	mov	r4, r2
 8007ca6:	4605      	mov	r5, r0
 8007ca8:	b118      	cbz	r0, 8007cb2 <__swbuf_r+0x12>
 8007caa:	6a03      	ldr	r3, [r0, #32]
 8007cac:	b90b      	cbnz	r3, 8007cb2 <__swbuf_r+0x12>
 8007cae:	f7fd fff1 	bl	8005c94 <__sinit>
 8007cb2:	69a3      	ldr	r3, [r4, #24]
 8007cb4:	60a3      	str	r3, [r4, #8]
 8007cb6:	89a3      	ldrh	r3, [r4, #12]
 8007cb8:	071a      	lsls	r2, r3, #28
 8007cba:	d501      	bpl.n	8007cc0 <__swbuf_r+0x20>
 8007cbc:	6923      	ldr	r3, [r4, #16]
 8007cbe:	b943      	cbnz	r3, 8007cd2 <__swbuf_r+0x32>
 8007cc0:	4621      	mov	r1, r4
 8007cc2:	4628      	mov	r0, r5
 8007cc4:	f000 f82a 	bl	8007d1c <__swsetup_r>
 8007cc8:	b118      	cbz	r0, 8007cd2 <__swbuf_r+0x32>
 8007cca:	f04f 37ff 	mov.w	r7, #4294967295
 8007cce:	4638      	mov	r0, r7
 8007cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cd2:	6823      	ldr	r3, [r4, #0]
 8007cd4:	6922      	ldr	r2, [r4, #16]
 8007cd6:	1a98      	subs	r0, r3, r2
 8007cd8:	6963      	ldr	r3, [r4, #20]
 8007cda:	b2f6      	uxtb	r6, r6
 8007cdc:	4283      	cmp	r3, r0
 8007cde:	4637      	mov	r7, r6
 8007ce0:	dc05      	bgt.n	8007cee <__swbuf_r+0x4e>
 8007ce2:	4621      	mov	r1, r4
 8007ce4:	4628      	mov	r0, r5
 8007ce6:	f7ff fd99 	bl	800781c <_fflush_r>
 8007cea:	2800      	cmp	r0, #0
 8007cec:	d1ed      	bne.n	8007cca <__swbuf_r+0x2a>
 8007cee:	68a3      	ldr	r3, [r4, #8]
 8007cf0:	3b01      	subs	r3, #1
 8007cf2:	60a3      	str	r3, [r4, #8]
 8007cf4:	6823      	ldr	r3, [r4, #0]
 8007cf6:	1c5a      	adds	r2, r3, #1
 8007cf8:	6022      	str	r2, [r4, #0]
 8007cfa:	701e      	strb	r6, [r3, #0]
 8007cfc:	6962      	ldr	r2, [r4, #20]
 8007cfe:	1c43      	adds	r3, r0, #1
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d004      	beq.n	8007d0e <__swbuf_r+0x6e>
 8007d04:	89a3      	ldrh	r3, [r4, #12]
 8007d06:	07db      	lsls	r3, r3, #31
 8007d08:	d5e1      	bpl.n	8007cce <__swbuf_r+0x2e>
 8007d0a:	2e0a      	cmp	r6, #10
 8007d0c:	d1df      	bne.n	8007cce <__swbuf_r+0x2e>
 8007d0e:	4621      	mov	r1, r4
 8007d10:	4628      	mov	r0, r5
 8007d12:	f7ff fd83 	bl	800781c <_fflush_r>
 8007d16:	2800      	cmp	r0, #0
 8007d18:	d0d9      	beq.n	8007cce <__swbuf_r+0x2e>
 8007d1a:	e7d6      	b.n	8007cca <__swbuf_r+0x2a>

08007d1c <__swsetup_r>:
 8007d1c:	b538      	push	{r3, r4, r5, lr}
 8007d1e:	4b29      	ldr	r3, [pc, #164]	@ (8007dc4 <__swsetup_r+0xa8>)
 8007d20:	4605      	mov	r5, r0
 8007d22:	6818      	ldr	r0, [r3, #0]
 8007d24:	460c      	mov	r4, r1
 8007d26:	b118      	cbz	r0, 8007d30 <__swsetup_r+0x14>
 8007d28:	6a03      	ldr	r3, [r0, #32]
 8007d2a:	b90b      	cbnz	r3, 8007d30 <__swsetup_r+0x14>
 8007d2c:	f7fd ffb2 	bl	8005c94 <__sinit>
 8007d30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d34:	0719      	lsls	r1, r3, #28
 8007d36:	d422      	bmi.n	8007d7e <__swsetup_r+0x62>
 8007d38:	06da      	lsls	r2, r3, #27
 8007d3a:	d407      	bmi.n	8007d4c <__swsetup_r+0x30>
 8007d3c:	2209      	movs	r2, #9
 8007d3e:	602a      	str	r2, [r5, #0]
 8007d40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d44:	81a3      	strh	r3, [r4, #12]
 8007d46:	f04f 30ff 	mov.w	r0, #4294967295
 8007d4a:	e033      	b.n	8007db4 <__swsetup_r+0x98>
 8007d4c:	0758      	lsls	r0, r3, #29
 8007d4e:	d512      	bpl.n	8007d76 <__swsetup_r+0x5a>
 8007d50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007d52:	b141      	cbz	r1, 8007d66 <__swsetup_r+0x4a>
 8007d54:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007d58:	4299      	cmp	r1, r3
 8007d5a:	d002      	beq.n	8007d62 <__swsetup_r+0x46>
 8007d5c:	4628      	mov	r0, r5
 8007d5e:	f7fe feff 	bl	8006b60 <_free_r>
 8007d62:	2300      	movs	r3, #0
 8007d64:	6363      	str	r3, [r4, #52]	@ 0x34
 8007d66:	89a3      	ldrh	r3, [r4, #12]
 8007d68:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007d6c:	81a3      	strh	r3, [r4, #12]
 8007d6e:	2300      	movs	r3, #0
 8007d70:	6063      	str	r3, [r4, #4]
 8007d72:	6923      	ldr	r3, [r4, #16]
 8007d74:	6023      	str	r3, [r4, #0]
 8007d76:	89a3      	ldrh	r3, [r4, #12]
 8007d78:	f043 0308 	orr.w	r3, r3, #8
 8007d7c:	81a3      	strh	r3, [r4, #12]
 8007d7e:	6923      	ldr	r3, [r4, #16]
 8007d80:	b94b      	cbnz	r3, 8007d96 <__swsetup_r+0x7a>
 8007d82:	89a3      	ldrh	r3, [r4, #12]
 8007d84:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007d88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d8c:	d003      	beq.n	8007d96 <__swsetup_r+0x7a>
 8007d8e:	4621      	mov	r1, r4
 8007d90:	4628      	mov	r0, r5
 8007d92:	f000 f883 	bl	8007e9c <__smakebuf_r>
 8007d96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d9a:	f013 0201 	ands.w	r2, r3, #1
 8007d9e:	d00a      	beq.n	8007db6 <__swsetup_r+0x9a>
 8007da0:	2200      	movs	r2, #0
 8007da2:	60a2      	str	r2, [r4, #8]
 8007da4:	6962      	ldr	r2, [r4, #20]
 8007da6:	4252      	negs	r2, r2
 8007da8:	61a2      	str	r2, [r4, #24]
 8007daa:	6922      	ldr	r2, [r4, #16]
 8007dac:	b942      	cbnz	r2, 8007dc0 <__swsetup_r+0xa4>
 8007dae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007db2:	d1c5      	bne.n	8007d40 <__swsetup_r+0x24>
 8007db4:	bd38      	pop	{r3, r4, r5, pc}
 8007db6:	0799      	lsls	r1, r3, #30
 8007db8:	bf58      	it	pl
 8007dba:	6962      	ldrpl	r2, [r4, #20]
 8007dbc:	60a2      	str	r2, [r4, #8]
 8007dbe:	e7f4      	b.n	8007daa <__swsetup_r+0x8e>
 8007dc0:	2000      	movs	r0, #0
 8007dc2:	e7f7      	b.n	8007db4 <__swsetup_r+0x98>
 8007dc4:	20000018 	.word	0x20000018

08007dc8 <_raise_r>:
 8007dc8:	291f      	cmp	r1, #31
 8007dca:	b538      	push	{r3, r4, r5, lr}
 8007dcc:	4605      	mov	r5, r0
 8007dce:	460c      	mov	r4, r1
 8007dd0:	d904      	bls.n	8007ddc <_raise_r+0x14>
 8007dd2:	2316      	movs	r3, #22
 8007dd4:	6003      	str	r3, [r0, #0]
 8007dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8007dda:	bd38      	pop	{r3, r4, r5, pc}
 8007ddc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007dde:	b112      	cbz	r2, 8007de6 <_raise_r+0x1e>
 8007de0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007de4:	b94b      	cbnz	r3, 8007dfa <_raise_r+0x32>
 8007de6:	4628      	mov	r0, r5
 8007de8:	f000 f830 	bl	8007e4c <_getpid_r>
 8007dec:	4622      	mov	r2, r4
 8007dee:	4601      	mov	r1, r0
 8007df0:	4628      	mov	r0, r5
 8007df2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007df6:	f000 b817 	b.w	8007e28 <_kill_r>
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	d00a      	beq.n	8007e14 <_raise_r+0x4c>
 8007dfe:	1c59      	adds	r1, r3, #1
 8007e00:	d103      	bne.n	8007e0a <_raise_r+0x42>
 8007e02:	2316      	movs	r3, #22
 8007e04:	6003      	str	r3, [r0, #0]
 8007e06:	2001      	movs	r0, #1
 8007e08:	e7e7      	b.n	8007dda <_raise_r+0x12>
 8007e0a:	2100      	movs	r1, #0
 8007e0c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007e10:	4620      	mov	r0, r4
 8007e12:	4798      	blx	r3
 8007e14:	2000      	movs	r0, #0
 8007e16:	e7e0      	b.n	8007dda <_raise_r+0x12>

08007e18 <raise>:
 8007e18:	4b02      	ldr	r3, [pc, #8]	@ (8007e24 <raise+0xc>)
 8007e1a:	4601      	mov	r1, r0
 8007e1c:	6818      	ldr	r0, [r3, #0]
 8007e1e:	f7ff bfd3 	b.w	8007dc8 <_raise_r>
 8007e22:	bf00      	nop
 8007e24:	20000018 	.word	0x20000018

08007e28 <_kill_r>:
 8007e28:	b538      	push	{r3, r4, r5, lr}
 8007e2a:	4d07      	ldr	r5, [pc, #28]	@ (8007e48 <_kill_r+0x20>)
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	4604      	mov	r4, r0
 8007e30:	4608      	mov	r0, r1
 8007e32:	4611      	mov	r1, r2
 8007e34:	602b      	str	r3, [r5, #0]
 8007e36:	f7f9 fdbd 	bl	80019b4 <_kill>
 8007e3a:	1c43      	adds	r3, r0, #1
 8007e3c:	d102      	bne.n	8007e44 <_kill_r+0x1c>
 8007e3e:	682b      	ldr	r3, [r5, #0]
 8007e40:	b103      	cbz	r3, 8007e44 <_kill_r+0x1c>
 8007e42:	6023      	str	r3, [r4, #0]
 8007e44:	bd38      	pop	{r3, r4, r5, pc}
 8007e46:	bf00      	nop
 8007e48:	200004d4 	.word	0x200004d4

08007e4c <_getpid_r>:
 8007e4c:	f7f9 bdaa 	b.w	80019a4 <_getpid>

08007e50 <__swhatbuf_r>:
 8007e50:	b570      	push	{r4, r5, r6, lr}
 8007e52:	460c      	mov	r4, r1
 8007e54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e58:	2900      	cmp	r1, #0
 8007e5a:	b096      	sub	sp, #88	@ 0x58
 8007e5c:	4615      	mov	r5, r2
 8007e5e:	461e      	mov	r6, r3
 8007e60:	da0d      	bge.n	8007e7e <__swhatbuf_r+0x2e>
 8007e62:	89a3      	ldrh	r3, [r4, #12]
 8007e64:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007e68:	f04f 0100 	mov.w	r1, #0
 8007e6c:	bf14      	ite	ne
 8007e6e:	2340      	movne	r3, #64	@ 0x40
 8007e70:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007e74:	2000      	movs	r0, #0
 8007e76:	6031      	str	r1, [r6, #0]
 8007e78:	602b      	str	r3, [r5, #0]
 8007e7a:	b016      	add	sp, #88	@ 0x58
 8007e7c:	bd70      	pop	{r4, r5, r6, pc}
 8007e7e:	466a      	mov	r2, sp
 8007e80:	f000 f848 	bl	8007f14 <_fstat_r>
 8007e84:	2800      	cmp	r0, #0
 8007e86:	dbec      	blt.n	8007e62 <__swhatbuf_r+0x12>
 8007e88:	9901      	ldr	r1, [sp, #4]
 8007e8a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007e8e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007e92:	4259      	negs	r1, r3
 8007e94:	4159      	adcs	r1, r3
 8007e96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007e9a:	e7eb      	b.n	8007e74 <__swhatbuf_r+0x24>

08007e9c <__smakebuf_r>:
 8007e9c:	898b      	ldrh	r3, [r1, #12]
 8007e9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ea0:	079d      	lsls	r5, r3, #30
 8007ea2:	4606      	mov	r6, r0
 8007ea4:	460c      	mov	r4, r1
 8007ea6:	d507      	bpl.n	8007eb8 <__smakebuf_r+0x1c>
 8007ea8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007eac:	6023      	str	r3, [r4, #0]
 8007eae:	6123      	str	r3, [r4, #16]
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	6163      	str	r3, [r4, #20]
 8007eb4:	b003      	add	sp, #12
 8007eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007eb8:	ab01      	add	r3, sp, #4
 8007eba:	466a      	mov	r2, sp
 8007ebc:	f7ff ffc8 	bl	8007e50 <__swhatbuf_r>
 8007ec0:	9f00      	ldr	r7, [sp, #0]
 8007ec2:	4605      	mov	r5, r0
 8007ec4:	4639      	mov	r1, r7
 8007ec6:	4630      	mov	r0, r6
 8007ec8:	f7fe febe 	bl	8006c48 <_malloc_r>
 8007ecc:	b948      	cbnz	r0, 8007ee2 <__smakebuf_r+0x46>
 8007ece:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ed2:	059a      	lsls	r2, r3, #22
 8007ed4:	d4ee      	bmi.n	8007eb4 <__smakebuf_r+0x18>
 8007ed6:	f023 0303 	bic.w	r3, r3, #3
 8007eda:	f043 0302 	orr.w	r3, r3, #2
 8007ede:	81a3      	strh	r3, [r4, #12]
 8007ee0:	e7e2      	b.n	8007ea8 <__smakebuf_r+0xc>
 8007ee2:	89a3      	ldrh	r3, [r4, #12]
 8007ee4:	6020      	str	r0, [r4, #0]
 8007ee6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007eea:	81a3      	strh	r3, [r4, #12]
 8007eec:	9b01      	ldr	r3, [sp, #4]
 8007eee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007ef2:	b15b      	cbz	r3, 8007f0c <__smakebuf_r+0x70>
 8007ef4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ef8:	4630      	mov	r0, r6
 8007efa:	f000 f81d 	bl	8007f38 <_isatty_r>
 8007efe:	b128      	cbz	r0, 8007f0c <__smakebuf_r+0x70>
 8007f00:	89a3      	ldrh	r3, [r4, #12]
 8007f02:	f023 0303 	bic.w	r3, r3, #3
 8007f06:	f043 0301 	orr.w	r3, r3, #1
 8007f0a:	81a3      	strh	r3, [r4, #12]
 8007f0c:	89a3      	ldrh	r3, [r4, #12]
 8007f0e:	431d      	orrs	r5, r3
 8007f10:	81a5      	strh	r5, [r4, #12]
 8007f12:	e7cf      	b.n	8007eb4 <__smakebuf_r+0x18>

08007f14 <_fstat_r>:
 8007f14:	b538      	push	{r3, r4, r5, lr}
 8007f16:	4d07      	ldr	r5, [pc, #28]	@ (8007f34 <_fstat_r+0x20>)
 8007f18:	2300      	movs	r3, #0
 8007f1a:	4604      	mov	r4, r0
 8007f1c:	4608      	mov	r0, r1
 8007f1e:	4611      	mov	r1, r2
 8007f20:	602b      	str	r3, [r5, #0]
 8007f22:	f7f9 fda7 	bl	8001a74 <_fstat>
 8007f26:	1c43      	adds	r3, r0, #1
 8007f28:	d102      	bne.n	8007f30 <_fstat_r+0x1c>
 8007f2a:	682b      	ldr	r3, [r5, #0]
 8007f2c:	b103      	cbz	r3, 8007f30 <_fstat_r+0x1c>
 8007f2e:	6023      	str	r3, [r4, #0]
 8007f30:	bd38      	pop	{r3, r4, r5, pc}
 8007f32:	bf00      	nop
 8007f34:	200004d4 	.word	0x200004d4

08007f38 <_isatty_r>:
 8007f38:	b538      	push	{r3, r4, r5, lr}
 8007f3a:	4d06      	ldr	r5, [pc, #24]	@ (8007f54 <_isatty_r+0x1c>)
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	4604      	mov	r4, r0
 8007f40:	4608      	mov	r0, r1
 8007f42:	602b      	str	r3, [r5, #0]
 8007f44:	f7f9 fda6 	bl	8001a94 <_isatty>
 8007f48:	1c43      	adds	r3, r0, #1
 8007f4a:	d102      	bne.n	8007f52 <_isatty_r+0x1a>
 8007f4c:	682b      	ldr	r3, [r5, #0]
 8007f4e:	b103      	cbz	r3, 8007f52 <_isatty_r+0x1a>
 8007f50:	6023      	str	r3, [r4, #0]
 8007f52:	bd38      	pop	{r3, r4, r5, pc}
 8007f54:	200004d4 	.word	0x200004d4

08007f58 <pow>:
 8007f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f5a:	ed2d 8b02 	vpush	{d8}
 8007f5e:	eeb0 8a40 	vmov.f32	s16, s0
 8007f62:	eef0 8a60 	vmov.f32	s17, s1
 8007f66:	ec55 4b11 	vmov	r4, r5, d1
 8007f6a:	f000 f871 	bl	8008050 <__ieee754_pow>
 8007f6e:	4622      	mov	r2, r4
 8007f70:	462b      	mov	r3, r5
 8007f72:	4620      	mov	r0, r4
 8007f74:	4629      	mov	r1, r5
 8007f76:	ec57 6b10 	vmov	r6, r7, d0
 8007f7a:	f7f8 fddf 	bl	8000b3c <__aeabi_dcmpun>
 8007f7e:	2800      	cmp	r0, #0
 8007f80:	d13b      	bne.n	8007ffa <pow+0xa2>
 8007f82:	ec51 0b18 	vmov	r0, r1, d8
 8007f86:	2200      	movs	r2, #0
 8007f88:	2300      	movs	r3, #0
 8007f8a:	f7f8 fda5 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f8e:	b1b8      	cbz	r0, 8007fc0 <pow+0x68>
 8007f90:	2200      	movs	r2, #0
 8007f92:	2300      	movs	r3, #0
 8007f94:	4620      	mov	r0, r4
 8007f96:	4629      	mov	r1, r5
 8007f98:	f7f8 fd9e 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f9c:	2800      	cmp	r0, #0
 8007f9e:	d146      	bne.n	800802e <pow+0xd6>
 8007fa0:	ec45 4b10 	vmov	d0, r4, r5
 8007fa4:	f000 f848 	bl	8008038 <finite>
 8007fa8:	b338      	cbz	r0, 8007ffa <pow+0xa2>
 8007faa:	2200      	movs	r2, #0
 8007fac:	2300      	movs	r3, #0
 8007fae:	4620      	mov	r0, r4
 8007fb0:	4629      	mov	r1, r5
 8007fb2:	f7f8 fd9b 	bl	8000aec <__aeabi_dcmplt>
 8007fb6:	b300      	cbz	r0, 8007ffa <pow+0xa2>
 8007fb8:	f7fd ff58 	bl	8005e6c <__errno>
 8007fbc:	2322      	movs	r3, #34	@ 0x22
 8007fbe:	e01b      	b.n	8007ff8 <pow+0xa0>
 8007fc0:	ec47 6b10 	vmov	d0, r6, r7
 8007fc4:	f000 f838 	bl	8008038 <finite>
 8007fc8:	b9e0      	cbnz	r0, 8008004 <pow+0xac>
 8007fca:	eeb0 0a48 	vmov.f32	s0, s16
 8007fce:	eef0 0a68 	vmov.f32	s1, s17
 8007fd2:	f000 f831 	bl	8008038 <finite>
 8007fd6:	b1a8      	cbz	r0, 8008004 <pow+0xac>
 8007fd8:	ec45 4b10 	vmov	d0, r4, r5
 8007fdc:	f000 f82c 	bl	8008038 <finite>
 8007fe0:	b180      	cbz	r0, 8008004 <pow+0xac>
 8007fe2:	4632      	mov	r2, r6
 8007fe4:	463b      	mov	r3, r7
 8007fe6:	4630      	mov	r0, r6
 8007fe8:	4639      	mov	r1, r7
 8007fea:	f7f8 fda7 	bl	8000b3c <__aeabi_dcmpun>
 8007fee:	2800      	cmp	r0, #0
 8007ff0:	d0e2      	beq.n	8007fb8 <pow+0x60>
 8007ff2:	f7fd ff3b 	bl	8005e6c <__errno>
 8007ff6:	2321      	movs	r3, #33	@ 0x21
 8007ff8:	6003      	str	r3, [r0, #0]
 8007ffa:	ecbd 8b02 	vpop	{d8}
 8007ffe:	ec47 6b10 	vmov	d0, r6, r7
 8008002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008004:	2200      	movs	r2, #0
 8008006:	2300      	movs	r3, #0
 8008008:	4630      	mov	r0, r6
 800800a:	4639      	mov	r1, r7
 800800c:	f7f8 fd64 	bl	8000ad8 <__aeabi_dcmpeq>
 8008010:	2800      	cmp	r0, #0
 8008012:	d0f2      	beq.n	8007ffa <pow+0xa2>
 8008014:	eeb0 0a48 	vmov.f32	s0, s16
 8008018:	eef0 0a68 	vmov.f32	s1, s17
 800801c:	f000 f80c 	bl	8008038 <finite>
 8008020:	2800      	cmp	r0, #0
 8008022:	d0ea      	beq.n	8007ffa <pow+0xa2>
 8008024:	ec45 4b10 	vmov	d0, r4, r5
 8008028:	f000 f806 	bl	8008038 <finite>
 800802c:	e7c3      	b.n	8007fb6 <pow+0x5e>
 800802e:	4f01      	ldr	r7, [pc, #4]	@ (8008034 <pow+0xdc>)
 8008030:	2600      	movs	r6, #0
 8008032:	e7e2      	b.n	8007ffa <pow+0xa2>
 8008034:	3ff00000 	.word	0x3ff00000

08008038 <finite>:
 8008038:	b082      	sub	sp, #8
 800803a:	ed8d 0b00 	vstr	d0, [sp]
 800803e:	9801      	ldr	r0, [sp, #4]
 8008040:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8008044:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8008048:	0fc0      	lsrs	r0, r0, #31
 800804a:	b002      	add	sp, #8
 800804c:	4770      	bx	lr
	...

08008050 <__ieee754_pow>:
 8008050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008054:	b091      	sub	sp, #68	@ 0x44
 8008056:	ed8d 1b00 	vstr	d1, [sp]
 800805a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800805e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8008062:	ea5a 0001 	orrs.w	r0, sl, r1
 8008066:	ec57 6b10 	vmov	r6, r7, d0
 800806a:	d113      	bne.n	8008094 <__ieee754_pow+0x44>
 800806c:	19b3      	adds	r3, r6, r6
 800806e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8008072:	4152      	adcs	r2, r2
 8008074:	4298      	cmp	r0, r3
 8008076:	4b98      	ldr	r3, [pc, #608]	@ (80082d8 <__ieee754_pow+0x288>)
 8008078:	4193      	sbcs	r3, r2
 800807a:	f080 84ea 	bcs.w	8008a52 <__ieee754_pow+0xa02>
 800807e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008082:	4630      	mov	r0, r6
 8008084:	4639      	mov	r1, r7
 8008086:	f7f8 f909 	bl	800029c <__adddf3>
 800808a:	ec41 0b10 	vmov	d0, r0, r1
 800808e:	b011      	add	sp, #68	@ 0x44
 8008090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008094:	4a91      	ldr	r2, [pc, #580]	@ (80082dc <__ieee754_pow+0x28c>)
 8008096:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800809a:	4590      	cmp	r8, r2
 800809c:	463d      	mov	r5, r7
 800809e:	4633      	mov	r3, r6
 80080a0:	d806      	bhi.n	80080b0 <__ieee754_pow+0x60>
 80080a2:	d101      	bne.n	80080a8 <__ieee754_pow+0x58>
 80080a4:	2e00      	cmp	r6, #0
 80080a6:	d1ea      	bne.n	800807e <__ieee754_pow+0x2e>
 80080a8:	4592      	cmp	sl, r2
 80080aa:	d801      	bhi.n	80080b0 <__ieee754_pow+0x60>
 80080ac:	d10e      	bne.n	80080cc <__ieee754_pow+0x7c>
 80080ae:	b169      	cbz	r1, 80080cc <__ieee754_pow+0x7c>
 80080b0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80080b4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80080b8:	431d      	orrs	r5, r3
 80080ba:	d1e0      	bne.n	800807e <__ieee754_pow+0x2e>
 80080bc:	e9dd 3200 	ldrd	r3, r2, [sp]
 80080c0:	18db      	adds	r3, r3, r3
 80080c2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80080c6:	4152      	adcs	r2, r2
 80080c8:	429d      	cmp	r5, r3
 80080ca:	e7d4      	b.n	8008076 <__ieee754_pow+0x26>
 80080cc:	2d00      	cmp	r5, #0
 80080ce:	46c3      	mov	fp, r8
 80080d0:	da3a      	bge.n	8008148 <__ieee754_pow+0xf8>
 80080d2:	4a83      	ldr	r2, [pc, #524]	@ (80082e0 <__ieee754_pow+0x290>)
 80080d4:	4592      	cmp	sl, r2
 80080d6:	d84d      	bhi.n	8008174 <__ieee754_pow+0x124>
 80080d8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80080dc:	4592      	cmp	sl, r2
 80080de:	f240 84c7 	bls.w	8008a70 <__ieee754_pow+0xa20>
 80080e2:	ea4f 522a 	mov.w	r2, sl, asr #20
 80080e6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80080ea:	2a14      	cmp	r2, #20
 80080ec:	dd0f      	ble.n	800810e <__ieee754_pow+0xbe>
 80080ee:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80080f2:	fa21 f402 	lsr.w	r4, r1, r2
 80080f6:	fa04 f202 	lsl.w	r2, r4, r2
 80080fa:	428a      	cmp	r2, r1
 80080fc:	f040 84b8 	bne.w	8008a70 <__ieee754_pow+0xa20>
 8008100:	f004 0401 	and.w	r4, r4, #1
 8008104:	f1c4 0402 	rsb	r4, r4, #2
 8008108:	2900      	cmp	r1, #0
 800810a:	d158      	bne.n	80081be <__ieee754_pow+0x16e>
 800810c:	e00e      	b.n	800812c <__ieee754_pow+0xdc>
 800810e:	2900      	cmp	r1, #0
 8008110:	d154      	bne.n	80081bc <__ieee754_pow+0x16c>
 8008112:	f1c2 0214 	rsb	r2, r2, #20
 8008116:	fa4a f402 	asr.w	r4, sl, r2
 800811a:	fa04 f202 	lsl.w	r2, r4, r2
 800811e:	4552      	cmp	r2, sl
 8008120:	f040 84a3 	bne.w	8008a6a <__ieee754_pow+0xa1a>
 8008124:	f004 0401 	and.w	r4, r4, #1
 8008128:	f1c4 0402 	rsb	r4, r4, #2
 800812c:	4a6d      	ldr	r2, [pc, #436]	@ (80082e4 <__ieee754_pow+0x294>)
 800812e:	4592      	cmp	sl, r2
 8008130:	d12e      	bne.n	8008190 <__ieee754_pow+0x140>
 8008132:	f1b9 0f00 	cmp.w	r9, #0
 8008136:	f280 8494 	bge.w	8008a62 <__ieee754_pow+0xa12>
 800813a:	496a      	ldr	r1, [pc, #424]	@ (80082e4 <__ieee754_pow+0x294>)
 800813c:	4632      	mov	r2, r6
 800813e:	463b      	mov	r3, r7
 8008140:	2000      	movs	r0, #0
 8008142:	f7f8 fb8b 	bl	800085c <__aeabi_ddiv>
 8008146:	e7a0      	b.n	800808a <__ieee754_pow+0x3a>
 8008148:	2400      	movs	r4, #0
 800814a:	bbc1      	cbnz	r1, 80081be <__ieee754_pow+0x16e>
 800814c:	4a63      	ldr	r2, [pc, #396]	@ (80082dc <__ieee754_pow+0x28c>)
 800814e:	4592      	cmp	sl, r2
 8008150:	d1ec      	bne.n	800812c <__ieee754_pow+0xdc>
 8008152:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8008156:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800815a:	431a      	orrs	r2, r3
 800815c:	f000 8479 	beq.w	8008a52 <__ieee754_pow+0xa02>
 8008160:	4b61      	ldr	r3, [pc, #388]	@ (80082e8 <__ieee754_pow+0x298>)
 8008162:	4598      	cmp	r8, r3
 8008164:	d908      	bls.n	8008178 <__ieee754_pow+0x128>
 8008166:	f1b9 0f00 	cmp.w	r9, #0
 800816a:	f2c0 8476 	blt.w	8008a5a <__ieee754_pow+0xa0a>
 800816e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008172:	e78a      	b.n	800808a <__ieee754_pow+0x3a>
 8008174:	2402      	movs	r4, #2
 8008176:	e7e8      	b.n	800814a <__ieee754_pow+0xfa>
 8008178:	f1b9 0f00 	cmp.w	r9, #0
 800817c:	f04f 0000 	mov.w	r0, #0
 8008180:	f04f 0100 	mov.w	r1, #0
 8008184:	da81      	bge.n	800808a <__ieee754_pow+0x3a>
 8008186:	e9dd 0300 	ldrd	r0, r3, [sp]
 800818a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800818e:	e77c      	b.n	800808a <__ieee754_pow+0x3a>
 8008190:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8008194:	d106      	bne.n	80081a4 <__ieee754_pow+0x154>
 8008196:	4632      	mov	r2, r6
 8008198:	463b      	mov	r3, r7
 800819a:	4630      	mov	r0, r6
 800819c:	4639      	mov	r1, r7
 800819e:	f7f8 fa33 	bl	8000608 <__aeabi_dmul>
 80081a2:	e772      	b.n	800808a <__ieee754_pow+0x3a>
 80081a4:	4a51      	ldr	r2, [pc, #324]	@ (80082ec <__ieee754_pow+0x29c>)
 80081a6:	4591      	cmp	r9, r2
 80081a8:	d109      	bne.n	80081be <__ieee754_pow+0x16e>
 80081aa:	2d00      	cmp	r5, #0
 80081ac:	db07      	blt.n	80081be <__ieee754_pow+0x16e>
 80081ae:	ec47 6b10 	vmov	d0, r6, r7
 80081b2:	b011      	add	sp, #68	@ 0x44
 80081b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081b8:	f000 bd52 	b.w	8008c60 <__ieee754_sqrt>
 80081bc:	2400      	movs	r4, #0
 80081be:	ec47 6b10 	vmov	d0, r6, r7
 80081c2:	9302      	str	r3, [sp, #8]
 80081c4:	f000 fc88 	bl	8008ad8 <fabs>
 80081c8:	9b02      	ldr	r3, [sp, #8]
 80081ca:	ec51 0b10 	vmov	r0, r1, d0
 80081ce:	bb53      	cbnz	r3, 8008226 <__ieee754_pow+0x1d6>
 80081d0:	4b44      	ldr	r3, [pc, #272]	@ (80082e4 <__ieee754_pow+0x294>)
 80081d2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d002      	beq.n	80081e0 <__ieee754_pow+0x190>
 80081da:	f1b8 0f00 	cmp.w	r8, #0
 80081de:	d122      	bne.n	8008226 <__ieee754_pow+0x1d6>
 80081e0:	f1b9 0f00 	cmp.w	r9, #0
 80081e4:	da05      	bge.n	80081f2 <__ieee754_pow+0x1a2>
 80081e6:	4602      	mov	r2, r0
 80081e8:	460b      	mov	r3, r1
 80081ea:	2000      	movs	r0, #0
 80081ec:	493d      	ldr	r1, [pc, #244]	@ (80082e4 <__ieee754_pow+0x294>)
 80081ee:	f7f8 fb35 	bl	800085c <__aeabi_ddiv>
 80081f2:	2d00      	cmp	r5, #0
 80081f4:	f6bf af49 	bge.w	800808a <__ieee754_pow+0x3a>
 80081f8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80081fc:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8008200:	ea58 0804 	orrs.w	r8, r8, r4
 8008204:	d108      	bne.n	8008218 <__ieee754_pow+0x1c8>
 8008206:	4602      	mov	r2, r0
 8008208:	460b      	mov	r3, r1
 800820a:	4610      	mov	r0, r2
 800820c:	4619      	mov	r1, r3
 800820e:	f7f8 f843 	bl	8000298 <__aeabi_dsub>
 8008212:	4602      	mov	r2, r0
 8008214:	460b      	mov	r3, r1
 8008216:	e794      	b.n	8008142 <__ieee754_pow+0xf2>
 8008218:	2c01      	cmp	r4, #1
 800821a:	f47f af36 	bne.w	800808a <__ieee754_pow+0x3a>
 800821e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008222:	4619      	mov	r1, r3
 8008224:	e731      	b.n	800808a <__ieee754_pow+0x3a>
 8008226:	0feb      	lsrs	r3, r5, #31
 8008228:	3b01      	subs	r3, #1
 800822a:	ea53 0204 	orrs.w	r2, r3, r4
 800822e:	d102      	bne.n	8008236 <__ieee754_pow+0x1e6>
 8008230:	4632      	mov	r2, r6
 8008232:	463b      	mov	r3, r7
 8008234:	e7e9      	b.n	800820a <__ieee754_pow+0x1ba>
 8008236:	3c01      	subs	r4, #1
 8008238:	431c      	orrs	r4, r3
 800823a:	d016      	beq.n	800826a <__ieee754_pow+0x21a>
 800823c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 80082c8 <__ieee754_pow+0x278>
 8008240:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8008244:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008248:	f240 8112 	bls.w	8008470 <__ieee754_pow+0x420>
 800824c:	4b28      	ldr	r3, [pc, #160]	@ (80082f0 <__ieee754_pow+0x2a0>)
 800824e:	459a      	cmp	sl, r3
 8008250:	4b25      	ldr	r3, [pc, #148]	@ (80082e8 <__ieee754_pow+0x298>)
 8008252:	d916      	bls.n	8008282 <__ieee754_pow+0x232>
 8008254:	4598      	cmp	r8, r3
 8008256:	d80b      	bhi.n	8008270 <__ieee754_pow+0x220>
 8008258:	f1b9 0f00 	cmp.w	r9, #0
 800825c:	da0b      	bge.n	8008276 <__ieee754_pow+0x226>
 800825e:	2000      	movs	r0, #0
 8008260:	b011      	add	sp, #68	@ 0x44
 8008262:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008266:	f000 bcf3 	b.w	8008c50 <__math_oflow>
 800826a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 80082d0 <__ieee754_pow+0x280>
 800826e:	e7e7      	b.n	8008240 <__ieee754_pow+0x1f0>
 8008270:	f1b9 0f00 	cmp.w	r9, #0
 8008274:	dcf3      	bgt.n	800825e <__ieee754_pow+0x20e>
 8008276:	2000      	movs	r0, #0
 8008278:	b011      	add	sp, #68	@ 0x44
 800827a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800827e:	f000 bcdf 	b.w	8008c40 <__math_uflow>
 8008282:	4598      	cmp	r8, r3
 8008284:	d20c      	bcs.n	80082a0 <__ieee754_pow+0x250>
 8008286:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800828a:	2200      	movs	r2, #0
 800828c:	2300      	movs	r3, #0
 800828e:	f7f8 fc2d 	bl	8000aec <__aeabi_dcmplt>
 8008292:	3800      	subs	r0, #0
 8008294:	bf18      	it	ne
 8008296:	2001      	movne	r0, #1
 8008298:	f1b9 0f00 	cmp.w	r9, #0
 800829c:	daec      	bge.n	8008278 <__ieee754_pow+0x228>
 800829e:	e7df      	b.n	8008260 <__ieee754_pow+0x210>
 80082a0:	4b10      	ldr	r3, [pc, #64]	@ (80082e4 <__ieee754_pow+0x294>)
 80082a2:	4598      	cmp	r8, r3
 80082a4:	f04f 0200 	mov.w	r2, #0
 80082a8:	d924      	bls.n	80082f4 <__ieee754_pow+0x2a4>
 80082aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082ae:	2300      	movs	r3, #0
 80082b0:	f7f8 fc1c 	bl	8000aec <__aeabi_dcmplt>
 80082b4:	3800      	subs	r0, #0
 80082b6:	bf18      	it	ne
 80082b8:	2001      	movne	r0, #1
 80082ba:	f1b9 0f00 	cmp.w	r9, #0
 80082be:	dccf      	bgt.n	8008260 <__ieee754_pow+0x210>
 80082c0:	e7da      	b.n	8008278 <__ieee754_pow+0x228>
 80082c2:	bf00      	nop
 80082c4:	f3af 8000 	nop.w
 80082c8:	00000000 	.word	0x00000000
 80082cc:	3ff00000 	.word	0x3ff00000
 80082d0:	00000000 	.word	0x00000000
 80082d4:	bff00000 	.word	0xbff00000
 80082d8:	fff00000 	.word	0xfff00000
 80082dc:	7ff00000 	.word	0x7ff00000
 80082e0:	433fffff 	.word	0x433fffff
 80082e4:	3ff00000 	.word	0x3ff00000
 80082e8:	3fefffff 	.word	0x3fefffff
 80082ec:	3fe00000 	.word	0x3fe00000
 80082f0:	43f00000 	.word	0x43f00000
 80082f4:	4b5a      	ldr	r3, [pc, #360]	@ (8008460 <__ieee754_pow+0x410>)
 80082f6:	f7f7 ffcf 	bl	8000298 <__aeabi_dsub>
 80082fa:	a351      	add	r3, pc, #324	@ (adr r3, 8008440 <__ieee754_pow+0x3f0>)
 80082fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008300:	4604      	mov	r4, r0
 8008302:	460d      	mov	r5, r1
 8008304:	f7f8 f980 	bl	8000608 <__aeabi_dmul>
 8008308:	a34f      	add	r3, pc, #316	@ (adr r3, 8008448 <__ieee754_pow+0x3f8>)
 800830a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800830e:	4606      	mov	r6, r0
 8008310:	460f      	mov	r7, r1
 8008312:	4620      	mov	r0, r4
 8008314:	4629      	mov	r1, r5
 8008316:	f7f8 f977 	bl	8000608 <__aeabi_dmul>
 800831a:	4b52      	ldr	r3, [pc, #328]	@ (8008464 <__ieee754_pow+0x414>)
 800831c:	4682      	mov	sl, r0
 800831e:	468b      	mov	fp, r1
 8008320:	2200      	movs	r2, #0
 8008322:	4620      	mov	r0, r4
 8008324:	4629      	mov	r1, r5
 8008326:	f7f8 f96f 	bl	8000608 <__aeabi_dmul>
 800832a:	4602      	mov	r2, r0
 800832c:	460b      	mov	r3, r1
 800832e:	a148      	add	r1, pc, #288	@ (adr r1, 8008450 <__ieee754_pow+0x400>)
 8008330:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008334:	f7f7 ffb0 	bl	8000298 <__aeabi_dsub>
 8008338:	4622      	mov	r2, r4
 800833a:	462b      	mov	r3, r5
 800833c:	f7f8 f964 	bl	8000608 <__aeabi_dmul>
 8008340:	4602      	mov	r2, r0
 8008342:	460b      	mov	r3, r1
 8008344:	2000      	movs	r0, #0
 8008346:	4948      	ldr	r1, [pc, #288]	@ (8008468 <__ieee754_pow+0x418>)
 8008348:	f7f7 ffa6 	bl	8000298 <__aeabi_dsub>
 800834c:	4622      	mov	r2, r4
 800834e:	4680      	mov	r8, r0
 8008350:	4689      	mov	r9, r1
 8008352:	462b      	mov	r3, r5
 8008354:	4620      	mov	r0, r4
 8008356:	4629      	mov	r1, r5
 8008358:	f7f8 f956 	bl	8000608 <__aeabi_dmul>
 800835c:	4602      	mov	r2, r0
 800835e:	460b      	mov	r3, r1
 8008360:	4640      	mov	r0, r8
 8008362:	4649      	mov	r1, r9
 8008364:	f7f8 f950 	bl	8000608 <__aeabi_dmul>
 8008368:	a33b      	add	r3, pc, #236	@ (adr r3, 8008458 <__ieee754_pow+0x408>)
 800836a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800836e:	f7f8 f94b 	bl	8000608 <__aeabi_dmul>
 8008372:	4602      	mov	r2, r0
 8008374:	460b      	mov	r3, r1
 8008376:	4650      	mov	r0, sl
 8008378:	4659      	mov	r1, fp
 800837a:	f7f7 ff8d 	bl	8000298 <__aeabi_dsub>
 800837e:	4602      	mov	r2, r0
 8008380:	460b      	mov	r3, r1
 8008382:	4680      	mov	r8, r0
 8008384:	4689      	mov	r9, r1
 8008386:	4630      	mov	r0, r6
 8008388:	4639      	mov	r1, r7
 800838a:	f7f7 ff87 	bl	800029c <__adddf3>
 800838e:	2400      	movs	r4, #0
 8008390:	4632      	mov	r2, r6
 8008392:	463b      	mov	r3, r7
 8008394:	4620      	mov	r0, r4
 8008396:	460d      	mov	r5, r1
 8008398:	f7f7 ff7e 	bl	8000298 <__aeabi_dsub>
 800839c:	4602      	mov	r2, r0
 800839e:	460b      	mov	r3, r1
 80083a0:	4640      	mov	r0, r8
 80083a2:	4649      	mov	r1, r9
 80083a4:	f7f7 ff78 	bl	8000298 <__aeabi_dsub>
 80083a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80083ac:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80083b0:	2300      	movs	r3, #0
 80083b2:	9304      	str	r3, [sp, #16]
 80083b4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80083b8:	4606      	mov	r6, r0
 80083ba:	460f      	mov	r7, r1
 80083bc:	4652      	mov	r2, sl
 80083be:	465b      	mov	r3, fp
 80083c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80083c4:	f7f7 ff68 	bl	8000298 <__aeabi_dsub>
 80083c8:	4622      	mov	r2, r4
 80083ca:	462b      	mov	r3, r5
 80083cc:	f7f8 f91c 	bl	8000608 <__aeabi_dmul>
 80083d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80083d4:	4680      	mov	r8, r0
 80083d6:	4689      	mov	r9, r1
 80083d8:	4630      	mov	r0, r6
 80083da:	4639      	mov	r1, r7
 80083dc:	f7f8 f914 	bl	8000608 <__aeabi_dmul>
 80083e0:	4602      	mov	r2, r0
 80083e2:	460b      	mov	r3, r1
 80083e4:	4640      	mov	r0, r8
 80083e6:	4649      	mov	r1, r9
 80083e8:	f7f7 ff58 	bl	800029c <__adddf3>
 80083ec:	4652      	mov	r2, sl
 80083ee:	465b      	mov	r3, fp
 80083f0:	4606      	mov	r6, r0
 80083f2:	460f      	mov	r7, r1
 80083f4:	4620      	mov	r0, r4
 80083f6:	4629      	mov	r1, r5
 80083f8:	f7f8 f906 	bl	8000608 <__aeabi_dmul>
 80083fc:	460b      	mov	r3, r1
 80083fe:	4602      	mov	r2, r0
 8008400:	4680      	mov	r8, r0
 8008402:	4689      	mov	r9, r1
 8008404:	4630      	mov	r0, r6
 8008406:	4639      	mov	r1, r7
 8008408:	f7f7 ff48 	bl	800029c <__adddf3>
 800840c:	4b17      	ldr	r3, [pc, #92]	@ (800846c <__ieee754_pow+0x41c>)
 800840e:	4299      	cmp	r1, r3
 8008410:	4604      	mov	r4, r0
 8008412:	460d      	mov	r5, r1
 8008414:	468a      	mov	sl, r1
 8008416:	468b      	mov	fp, r1
 8008418:	f340 82ef 	ble.w	80089fa <__ieee754_pow+0x9aa>
 800841c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8008420:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8008424:	4303      	orrs	r3, r0
 8008426:	f000 81e8 	beq.w	80087fa <__ieee754_pow+0x7aa>
 800842a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800842e:	2200      	movs	r2, #0
 8008430:	2300      	movs	r3, #0
 8008432:	f7f8 fb5b 	bl	8000aec <__aeabi_dcmplt>
 8008436:	3800      	subs	r0, #0
 8008438:	bf18      	it	ne
 800843a:	2001      	movne	r0, #1
 800843c:	e710      	b.n	8008260 <__ieee754_pow+0x210>
 800843e:	bf00      	nop
 8008440:	60000000 	.word	0x60000000
 8008444:	3ff71547 	.word	0x3ff71547
 8008448:	f85ddf44 	.word	0xf85ddf44
 800844c:	3e54ae0b 	.word	0x3e54ae0b
 8008450:	55555555 	.word	0x55555555
 8008454:	3fd55555 	.word	0x3fd55555
 8008458:	652b82fe 	.word	0x652b82fe
 800845c:	3ff71547 	.word	0x3ff71547
 8008460:	3ff00000 	.word	0x3ff00000
 8008464:	3fd00000 	.word	0x3fd00000
 8008468:	3fe00000 	.word	0x3fe00000
 800846c:	408fffff 	.word	0x408fffff
 8008470:	4bd5      	ldr	r3, [pc, #852]	@ (80087c8 <__ieee754_pow+0x778>)
 8008472:	402b      	ands	r3, r5
 8008474:	2200      	movs	r2, #0
 8008476:	b92b      	cbnz	r3, 8008484 <__ieee754_pow+0x434>
 8008478:	4bd4      	ldr	r3, [pc, #848]	@ (80087cc <__ieee754_pow+0x77c>)
 800847a:	f7f8 f8c5 	bl	8000608 <__aeabi_dmul>
 800847e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8008482:	468b      	mov	fp, r1
 8008484:	ea4f 532b 	mov.w	r3, fp, asr #20
 8008488:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800848c:	4413      	add	r3, r2
 800848e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008490:	4bcf      	ldr	r3, [pc, #828]	@ (80087d0 <__ieee754_pow+0x780>)
 8008492:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8008496:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800849a:	459b      	cmp	fp, r3
 800849c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80084a0:	dd08      	ble.n	80084b4 <__ieee754_pow+0x464>
 80084a2:	4bcc      	ldr	r3, [pc, #816]	@ (80087d4 <__ieee754_pow+0x784>)
 80084a4:	459b      	cmp	fp, r3
 80084a6:	f340 81a5 	ble.w	80087f4 <__ieee754_pow+0x7a4>
 80084aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084ac:	3301      	adds	r3, #1
 80084ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80084b0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80084b4:	f04f 0a00 	mov.w	sl, #0
 80084b8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80084bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80084be:	4bc6      	ldr	r3, [pc, #792]	@ (80087d8 <__ieee754_pow+0x788>)
 80084c0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80084c4:	ed93 7b00 	vldr	d7, [r3]
 80084c8:	4629      	mov	r1, r5
 80084ca:	ec53 2b17 	vmov	r2, r3, d7
 80084ce:	ed8d 7b06 	vstr	d7, [sp, #24]
 80084d2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80084d6:	f7f7 fedf 	bl	8000298 <__aeabi_dsub>
 80084da:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80084de:	4606      	mov	r6, r0
 80084e0:	460f      	mov	r7, r1
 80084e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80084e6:	f7f7 fed9 	bl	800029c <__adddf3>
 80084ea:	4602      	mov	r2, r0
 80084ec:	460b      	mov	r3, r1
 80084ee:	2000      	movs	r0, #0
 80084f0:	49ba      	ldr	r1, [pc, #744]	@ (80087dc <__ieee754_pow+0x78c>)
 80084f2:	f7f8 f9b3 	bl	800085c <__aeabi_ddiv>
 80084f6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80084fa:	4602      	mov	r2, r0
 80084fc:	460b      	mov	r3, r1
 80084fe:	4630      	mov	r0, r6
 8008500:	4639      	mov	r1, r7
 8008502:	f7f8 f881 	bl	8000608 <__aeabi_dmul>
 8008506:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800850a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800850e:	106d      	asrs	r5, r5, #1
 8008510:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8008514:	f04f 0b00 	mov.w	fp, #0
 8008518:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800851c:	4661      	mov	r1, ip
 800851e:	2200      	movs	r2, #0
 8008520:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8008524:	4658      	mov	r0, fp
 8008526:	46e1      	mov	r9, ip
 8008528:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800852c:	4614      	mov	r4, r2
 800852e:	461d      	mov	r5, r3
 8008530:	f7f8 f86a 	bl	8000608 <__aeabi_dmul>
 8008534:	4602      	mov	r2, r0
 8008536:	460b      	mov	r3, r1
 8008538:	4630      	mov	r0, r6
 800853a:	4639      	mov	r1, r7
 800853c:	f7f7 feac 	bl	8000298 <__aeabi_dsub>
 8008540:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008544:	4606      	mov	r6, r0
 8008546:	460f      	mov	r7, r1
 8008548:	4620      	mov	r0, r4
 800854a:	4629      	mov	r1, r5
 800854c:	f7f7 fea4 	bl	8000298 <__aeabi_dsub>
 8008550:	4602      	mov	r2, r0
 8008552:	460b      	mov	r3, r1
 8008554:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008558:	f7f7 fe9e 	bl	8000298 <__aeabi_dsub>
 800855c:	465a      	mov	r2, fp
 800855e:	464b      	mov	r3, r9
 8008560:	f7f8 f852 	bl	8000608 <__aeabi_dmul>
 8008564:	4602      	mov	r2, r0
 8008566:	460b      	mov	r3, r1
 8008568:	4630      	mov	r0, r6
 800856a:	4639      	mov	r1, r7
 800856c:	f7f7 fe94 	bl	8000298 <__aeabi_dsub>
 8008570:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008574:	f7f8 f848 	bl	8000608 <__aeabi_dmul>
 8008578:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800857c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008580:	4610      	mov	r0, r2
 8008582:	4619      	mov	r1, r3
 8008584:	f7f8 f840 	bl	8000608 <__aeabi_dmul>
 8008588:	a37d      	add	r3, pc, #500	@ (adr r3, 8008780 <__ieee754_pow+0x730>)
 800858a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800858e:	4604      	mov	r4, r0
 8008590:	460d      	mov	r5, r1
 8008592:	f7f8 f839 	bl	8000608 <__aeabi_dmul>
 8008596:	a37c      	add	r3, pc, #496	@ (adr r3, 8008788 <__ieee754_pow+0x738>)
 8008598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800859c:	f7f7 fe7e 	bl	800029c <__adddf3>
 80085a0:	4622      	mov	r2, r4
 80085a2:	462b      	mov	r3, r5
 80085a4:	f7f8 f830 	bl	8000608 <__aeabi_dmul>
 80085a8:	a379      	add	r3, pc, #484	@ (adr r3, 8008790 <__ieee754_pow+0x740>)
 80085aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ae:	f7f7 fe75 	bl	800029c <__adddf3>
 80085b2:	4622      	mov	r2, r4
 80085b4:	462b      	mov	r3, r5
 80085b6:	f7f8 f827 	bl	8000608 <__aeabi_dmul>
 80085ba:	a377      	add	r3, pc, #476	@ (adr r3, 8008798 <__ieee754_pow+0x748>)
 80085bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c0:	f7f7 fe6c 	bl	800029c <__adddf3>
 80085c4:	4622      	mov	r2, r4
 80085c6:	462b      	mov	r3, r5
 80085c8:	f7f8 f81e 	bl	8000608 <__aeabi_dmul>
 80085cc:	a374      	add	r3, pc, #464	@ (adr r3, 80087a0 <__ieee754_pow+0x750>)
 80085ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d2:	f7f7 fe63 	bl	800029c <__adddf3>
 80085d6:	4622      	mov	r2, r4
 80085d8:	462b      	mov	r3, r5
 80085da:	f7f8 f815 	bl	8000608 <__aeabi_dmul>
 80085de:	a372      	add	r3, pc, #456	@ (adr r3, 80087a8 <__ieee754_pow+0x758>)
 80085e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e4:	f7f7 fe5a 	bl	800029c <__adddf3>
 80085e8:	4622      	mov	r2, r4
 80085ea:	4606      	mov	r6, r0
 80085ec:	460f      	mov	r7, r1
 80085ee:	462b      	mov	r3, r5
 80085f0:	4620      	mov	r0, r4
 80085f2:	4629      	mov	r1, r5
 80085f4:	f7f8 f808 	bl	8000608 <__aeabi_dmul>
 80085f8:	4602      	mov	r2, r0
 80085fa:	460b      	mov	r3, r1
 80085fc:	4630      	mov	r0, r6
 80085fe:	4639      	mov	r1, r7
 8008600:	f7f8 f802 	bl	8000608 <__aeabi_dmul>
 8008604:	465a      	mov	r2, fp
 8008606:	4604      	mov	r4, r0
 8008608:	460d      	mov	r5, r1
 800860a:	464b      	mov	r3, r9
 800860c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008610:	f7f7 fe44 	bl	800029c <__adddf3>
 8008614:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008618:	f7f7 fff6 	bl	8000608 <__aeabi_dmul>
 800861c:	4622      	mov	r2, r4
 800861e:	462b      	mov	r3, r5
 8008620:	f7f7 fe3c 	bl	800029c <__adddf3>
 8008624:	465a      	mov	r2, fp
 8008626:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800862a:	464b      	mov	r3, r9
 800862c:	4658      	mov	r0, fp
 800862e:	4649      	mov	r1, r9
 8008630:	f7f7 ffea 	bl	8000608 <__aeabi_dmul>
 8008634:	4b6a      	ldr	r3, [pc, #424]	@ (80087e0 <__ieee754_pow+0x790>)
 8008636:	2200      	movs	r2, #0
 8008638:	4606      	mov	r6, r0
 800863a:	460f      	mov	r7, r1
 800863c:	f7f7 fe2e 	bl	800029c <__adddf3>
 8008640:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008644:	f7f7 fe2a 	bl	800029c <__adddf3>
 8008648:	46d8      	mov	r8, fp
 800864a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800864e:	460d      	mov	r5, r1
 8008650:	465a      	mov	r2, fp
 8008652:	460b      	mov	r3, r1
 8008654:	4640      	mov	r0, r8
 8008656:	4649      	mov	r1, r9
 8008658:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800865c:	f7f7 ffd4 	bl	8000608 <__aeabi_dmul>
 8008660:	465c      	mov	r4, fp
 8008662:	4680      	mov	r8, r0
 8008664:	4689      	mov	r9, r1
 8008666:	4b5e      	ldr	r3, [pc, #376]	@ (80087e0 <__ieee754_pow+0x790>)
 8008668:	2200      	movs	r2, #0
 800866a:	4620      	mov	r0, r4
 800866c:	4629      	mov	r1, r5
 800866e:	f7f7 fe13 	bl	8000298 <__aeabi_dsub>
 8008672:	4632      	mov	r2, r6
 8008674:	463b      	mov	r3, r7
 8008676:	f7f7 fe0f 	bl	8000298 <__aeabi_dsub>
 800867a:	4602      	mov	r2, r0
 800867c:	460b      	mov	r3, r1
 800867e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008682:	f7f7 fe09 	bl	8000298 <__aeabi_dsub>
 8008686:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800868a:	f7f7 ffbd 	bl	8000608 <__aeabi_dmul>
 800868e:	4622      	mov	r2, r4
 8008690:	4606      	mov	r6, r0
 8008692:	460f      	mov	r7, r1
 8008694:	462b      	mov	r3, r5
 8008696:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800869a:	f7f7 ffb5 	bl	8000608 <__aeabi_dmul>
 800869e:	4602      	mov	r2, r0
 80086a0:	460b      	mov	r3, r1
 80086a2:	4630      	mov	r0, r6
 80086a4:	4639      	mov	r1, r7
 80086a6:	f7f7 fdf9 	bl	800029c <__adddf3>
 80086aa:	4606      	mov	r6, r0
 80086ac:	460f      	mov	r7, r1
 80086ae:	4602      	mov	r2, r0
 80086b0:	460b      	mov	r3, r1
 80086b2:	4640      	mov	r0, r8
 80086b4:	4649      	mov	r1, r9
 80086b6:	f7f7 fdf1 	bl	800029c <__adddf3>
 80086ba:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80086be:	a33c      	add	r3, pc, #240	@ (adr r3, 80087b0 <__ieee754_pow+0x760>)
 80086c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c4:	4658      	mov	r0, fp
 80086c6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80086ca:	460d      	mov	r5, r1
 80086cc:	f7f7 ff9c 	bl	8000608 <__aeabi_dmul>
 80086d0:	465c      	mov	r4, fp
 80086d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80086d6:	4642      	mov	r2, r8
 80086d8:	464b      	mov	r3, r9
 80086da:	4620      	mov	r0, r4
 80086dc:	4629      	mov	r1, r5
 80086de:	f7f7 fddb 	bl	8000298 <__aeabi_dsub>
 80086e2:	4602      	mov	r2, r0
 80086e4:	460b      	mov	r3, r1
 80086e6:	4630      	mov	r0, r6
 80086e8:	4639      	mov	r1, r7
 80086ea:	f7f7 fdd5 	bl	8000298 <__aeabi_dsub>
 80086ee:	a332      	add	r3, pc, #200	@ (adr r3, 80087b8 <__ieee754_pow+0x768>)
 80086f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f4:	f7f7 ff88 	bl	8000608 <__aeabi_dmul>
 80086f8:	a331      	add	r3, pc, #196	@ (adr r3, 80087c0 <__ieee754_pow+0x770>)
 80086fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fe:	4606      	mov	r6, r0
 8008700:	460f      	mov	r7, r1
 8008702:	4620      	mov	r0, r4
 8008704:	4629      	mov	r1, r5
 8008706:	f7f7 ff7f 	bl	8000608 <__aeabi_dmul>
 800870a:	4602      	mov	r2, r0
 800870c:	460b      	mov	r3, r1
 800870e:	4630      	mov	r0, r6
 8008710:	4639      	mov	r1, r7
 8008712:	f7f7 fdc3 	bl	800029c <__adddf3>
 8008716:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008718:	4b32      	ldr	r3, [pc, #200]	@ (80087e4 <__ieee754_pow+0x794>)
 800871a:	4413      	add	r3, r2
 800871c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008720:	f7f7 fdbc 	bl	800029c <__adddf3>
 8008724:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008728:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800872a:	f7f7 ff03 	bl	8000534 <__aeabi_i2d>
 800872e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008730:	4b2d      	ldr	r3, [pc, #180]	@ (80087e8 <__ieee754_pow+0x798>)
 8008732:	4413      	add	r3, r2
 8008734:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008738:	4606      	mov	r6, r0
 800873a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800873e:	460f      	mov	r7, r1
 8008740:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008744:	f7f7 fdaa 	bl	800029c <__adddf3>
 8008748:	4642      	mov	r2, r8
 800874a:	464b      	mov	r3, r9
 800874c:	f7f7 fda6 	bl	800029c <__adddf3>
 8008750:	4632      	mov	r2, r6
 8008752:	463b      	mov	r3, r7
 8008754:	f7f7 fda2 	bl	800029c <__adddf3>
 8008758:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800875c:	4632      	mov	r2, r6
 800875e:	463b      	mov	r3, r7
 8008760:	4658      	mov	r0, fp
 8008762:	460d      	mov	r5, r1
 8008764:	f7f7 fd98 	bl	8000298 <__aeabi_dsub>
 8008768:	4642      	mov	r2, r8
 800876a:	464b      	mov	r3, r9
 800876c:	f7f7 fd94 	bl	8000298 <__aeabi_dsub>
 8008770:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008774:	f7f7 fd90 	bl	8000298 <__aeabi_dsub>
 8008778:	465c      	mov	r4, fp
 800877a:	4602      	mov	r2, r0
 800877c:	e036      	b.n	80087ec <__ieee754_pow+0x79c>
 800877e:	bf00      	nop
 8008780:	4a454eef 	.word	0x4a454eef
 8008784:	3fca7e28 	.word	0x3fca7e28
 8008788:	93c9db65 	.word	0x93c9db65
 800878c:	3fcd864a 	.word	0x3fcd864a
 8008790:	a91d4101 	.word	0xa91d4101
 8008794:	3fd17460 	.word	0x3fd17460
 8008798:	518f264d 	.word	0x518f264d
 800879c:	3fd55555 	.word	0x3fd55555
 80087a0:	db6fabff 	.word	0xdb6fabff
 80087a4:	3fdb6db6 	.word	0x3fdb6db6
 80087a8:	33333303 	.word	0x33333303
 80087ac:	3fe33333 	.word	0x3fe33333
 80087b0:	e0000000 	.word	0xe0000000
 80087b4:	3feec709 	.word	0x3feec709
 80087b8:	dc3a03fd 	.word	0xdc3a03fd
 80087bc:	3feec709 	.word	0x3feec709
 80087c0:	145b01f5 	.word	0x145b01f5
 80087c4:	be3e2fe0 	.word	0xbe3e2fe0
 80087c8:	7ff00000 	.word	0x7ff00000
 80087cc:	43400000 	.word	0x43400000
 80087d0:	0003988e 	.word	0x0003988e
 80087d4:	000bb679 	.word	0x000bb679
 80087d8:	080091f0 	.word	0x080091f0
 80087dc:	3ff00000 	.word	0x3ff00000
 80087e0:	40080000 	.word	0x40080000
 80087e4:	080091d0 	.word	0x080091d0
 80087e8:	080091e0 	.word	0x080091e0
 80087ec:	460b      	mov	r3, r1
 80087ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80087f2:	e5d7      	b.n	80083a4 <__ieee754_pow+0x354>
 80087f4:	f04f 0a01 	mov.w	sl, #1
 80087f8:	e65e      	b.n	80084b8 <__ieee754_pow+0x468>
 80087fa:	a3b4      	add	r3, pc, #720	@ (adr r3, 8008acc <__ieee754_pow+0xa7c>)
 80087fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008800:	4630      	mov	r0, r6
 8008802:	4639      	mov	r1, r7
 8008804:	f7f7 fd4a 	bl	800029c <__adddf3>
 8008808:	4642      	mov	r2, r8
 800880a:	e9cd 0100 	strd	r0, r1, [sp]
 800880e:	464b      	mov	r3, r9
 8008810:	4620      	mov	r0, r4
 8008812:	4629      	mov	r1, r5
 8008814:	f7f7 fd40 	bl	8000298 <__aeabi_dsub>
 8008818:	4602      	mov	r2, r0
 800881a:	460b      	mov	r3, r1
 800881c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008820:	f7f8 f982 	bl	8000b28 <__aeabi_dcmpgt>
 8008824:	2800      	cmp	r0, #0
 8008826:	f47f ae00 	bne.w	800842a <__ieee754_pow+0x3da>
 800882a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800882e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8008832:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8008836:	fa43 fa0a 	asr.w	sl, r3, sl
 800883a:	44da      	add	sl, fp
 800883c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8008840:	489d      	ldr	r0, [pc, #628]	@ (8008ab8 <__ieee754_pow+0xa68>)
 8008842:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8008846:	4108      	asrs	r0, r1
 8008848:	ea00 030a 	and.w	r3, r0, sl
 800884c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8008850:	f1c1 0114 	rsb	r1, r1, #20
 8008854:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8008858:	fa4a fa01 	asr.w	sl, sl, r1
 800885c:	f1bb 0f00 	cmp.w	fp, #0
 8008860:	4640      	mov	r0, r8
 8008862:	4649      	mov	r1, r9
 8008864:	f04f 0200 	mov.w	r2, #0
 8008868:	bfb8      	it	lt
 800886a:	f1ca 0a00 	rsblt	sl, sl, #0
 800886e:	f7f7 fd13 	bl	8000298 <__aeabi_dsub>
 8008872:	4680      	mov	r8, r0
 8008874:	4689      	mov	r9, r1
 8008876:	4632      	mov	r2, r6
 8008878:	463b      	mov	r3, r7
 800887a:	4640      	mov	r0, r8
 800887c:	4649      	mov	r1, r9
 800887e:	f7f7 fd0d 	bl	800029c <__adddf3>
 8008882:	2400      	movs	r4, #0
 8008884:	a37c      	add	r3, pc, #496	@ (adr r3, 8008a78 <__ieee754_pow+0xa28>)
 8008886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800888a:	4620      	mov	r0, r4
 800888c:	460d      	mov	r5, r1
 800888e:	f7f7 febb 	bl	8000608 <__aeabi_dmul>
 8008892:	4642      	mov	r2, r8
 8008894:	e9cd 0100 	strd	r0, r1, [sp]
 8008898:	464b      	mov	r3, r9
 800889a:	4620      	mov	r0, r4
 800889c:	4629      	mov	r1, r5
 800889e:	f7f7 fcfb 	bl	8000298 <__aeabi_dsub>
 80088a2:	4602      	mov	r2, r0
 80088a4:	460b      	mov	r3, r1
 80088a6:	4630      	mov	r0, r6
 80088a8:	4639      	mov	r1, r7
 80088aa:	f7f7 fcf5 	bl	8000298 <__aeabi_dsub>
 80088ae:	a374      	add	r3, pc, #464	@ (adr r3, 8008a80 <__ieee754_pow+0xa30>)
 80088b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b4:	f7f7 fea8 	bl	8000608 <__aeabi_dmul>
 80088b8:	a373      	add	r3, pc, #460	@ (adr r3, 8008a88 <__ieee754_pow+0xa38>)
 80088ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088be:	4680      	mov	r8, r0
 80088c0:	4689      	mov	r9, r1
 80088c2:	4620      	mov	r0, r4
 80088c4:	4629      	mov	r1, r5
 80088c6:	f7f7 fe9f 	bl	8000608 <__aeabi_dmul>
 80088ca:	4602      	mov	r2, r0
 80088cc:	460b      	mov	r3, r1
 80088ce:	4640      	mov	r0, r8
 80088d0:	4649      	mov	r1, r9
 80088d2:	f7f7 fce3 	bl	800029c <__adddf3>
 80088d6:	4604      	mov	r4, r0
 80088d8:	460d      	mov	r5, r1
 80088da:	4602      	mov	r2, r0
 80088dc:	460b      	mov	r3, r1
 80088de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80088e2:	f7f7 fcdb 	bl	800029c <__adddf3>
 80088e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80088ea:	4680      	mov	r8, r0
 80088ec:	4689      	mov	r9, r1
 80088ee:	f7f7 fcd3 	bl	8000298 <__aeabi_dsub>
 80088f2:	4602      	mov	r2, r0
 80088f4:	460b      	mov	r3, r1
 80088f6:	4620      	mov	r0, r4
 80088f8:	4629      	mov	r1, r5
 80088fa:	f7f7 fccd 	bl	8000298 <__aeabi_dsub>
 80088fe:	4642      	mov	r2, r8
 8008900:	4606      	mov	r6, r0
 8008902:	460f      	mov	r7, r1
 8008904:	464b      	mov	r3, r9
 8008906:	4640      	mov	r0, r8
 8008908:	4649      	mov	r1, r9
 800890a:	f7f7 fe7d 	bl	8000608 <__aeabi_dmul>
 800890e:	a360      	add	r3, pc, #384	@ (adr r3, 8008a90 <__ieee754_pow+0xa40>)
 8008910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008914:	4604      	mov	r4, r0
 8008916:	460d      	mov	r5, r1
 8008918:	f7f7 fe76 	bl	8000608 <__aeabi_dmul>
 800891c:	a35e      	add	r3, pc, #376	@ (adr r3, 8008a98 <__ieee754_pow+0xa48>)
 800891e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008922:	f7f7 fcb9 	bl	8000298 <__aeabi_dsub>
 8008926:	4622      	mov	r2, r4
 8008928:	462b      	mov	r3, r5
 800892a:	f7f7 fe6d 	bl	8000608 <__aeabi_dmul>
 800892e:	a35c      	add	r3, pc, #368	@ (adr r3, 8008aa0 <__ieee754_pow+0xa50>)
 8008930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008934:	f7f7 fcb2 	bl	800029c <__adddf3>
 8008938:	4622      	mov	r2, r4
 800893a:	462b      	mov	r3, r5
 800893c:	f7f7 fe64 	bl	8000608 <__aeabi_dmul>
 8008940:	a359      	add	r3, pc, #356	@ (adr r3, 8008aa8 <__ieee754_pow+0xa58>)
 8008942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008946:	f7f7 fca7 	bl	8000298 <__aeabi_dsub>
 800894a:	4622      	mov	r2, r4
 800894c:	462b      	mov	r3, r5
 800894e:	f7f7 fe5b 	bl	8000608 <__aeabi_dmul>
 8008952:	a357      	add	r3, pc, #348	@ (adr r3, 8008ab0 <__ieee754_pow+0xa60>)
 8008954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008958:	f7f7 fca0 	bl	800029c <__adddf3>
 800895c:	4622      	mov	r2, r4
 800895e:	462b      	mov	r3, r5
 8008960:	f7f7 fe52 	bl	8000608 <__aeabi_dmul>
 8008964:	4602      	mov	r2, r0
 8008966:	460b      	mov	r3, r1
 8008968:	4640      	mov	r0, r8
 800896a:	4649      	mov	r1, r9
 800896c:	f7f7 fc94 	bl	8000298 <__aeabi_dsub>
 8008970:	4604      	mov	r4, r0
 8008972:	460d      	mov	r5, r1
 8008974:	4602      	mov	r2, r0
 8008976:	460b      	mov	r3, r1
 8008978:	4640      	mov	r0, r8
 800897a:	4649      	mov	r1, r9
 800897c:	f7f7 fe44 	bl	8000608 <__aeabi_dmul>
 8008980:	2200      	movs	r2, #0
 8008982:	e9cd 0100 	strd	r0, r1, [sp]
 8008986:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800898a:	4620      	mov	r0, r4
 800898c:	4629      	mov	r1, r5
 800898e:	f7f7 fc83 	bl	8000298 <__aeabi_dsub>
 8008992:	4602      	mov	r2, r0
 8008994:	460b      	mov	r3, r1
 8008996:	e9dd 0100 	ldrd	r0, r1, [sp]
 800899a:	f7f7 ff5f 	bl	800085c <__aeabi_ddiv>
 800899e:	4632      	mov	r2, r6
 80089a0:	4604      	mov	r4, r0
 80089a2:	460d      	mov	r5, r1
 80089a4:	463b      	mov	r3, r7
 80089a6:	4640      	mov	r0, r8
 80089a8:	4649      	mov	r1, r9
 80089aa:	f7f7 fe2d 	bl	8000608 <__aeabi_dmul>
 80089ae:	4632      	mov	r2, r6
 80089b0:	463b      	mov	r3, r7
 80089b2:	f7f7 fc73 	bl	800029c <__adddf3>
 80089b6:	4602      	mov	r2, r0
 80089b8:	460b      	mov	r3, r1
 80089ba:	4620      	mov	r0, r4
 80089bc:	4629      	mov	r1, r5
 80089be:	f7f7 fc6b 	bl	8000298 <__aeabi_dsub>
 80089c2:	4642      	mov	r2, r8
 80089c4:	464b      	mov	r3, r9
 80089c6:	f7f7 fc67 	bl	8000298 <__aeabi_dsub>
 80089ca:	460b      	mov	r3, r1
 80089cc:	4602      	mov	r2, r0
 80089ce:	493b      	ldr	r1, [pc, #236]	@ (8008abc <__ieee754_pow+0xa6c>)
 80089d0:	2000      	movs	r0, #0
 80089d2:	f7f7 fc61 	bl	8000298 <__aeabi_dsub>
 80089d6:	ec41 0b10 	vmov	d0, r0, r1
 80089da:	ee10 3a90 	vmov	r3, s1
 80089de:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80089e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80089e6:	da30      	bge.n	8008a4a <__ieee754_pow+0x9fa>
 80089e8:	4650      	mov	r0, sl
 80089ea:	f000 f87d 	bl	8008ae8 <scalbn>
 80089ee:	ec51 0b10 	vmov	r0, r1, d0
 80089f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80089f6:	f7ff bbd2 	b.w	800819e <__ieee754_pow+0x14e>
 80089fa:	4c31      	ldr	r4, [pc, #196]	@ (8008ac0 <__ieee754_pow+0xa70>)
 80089fc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008a00:	42a3      	cmp	r3, r4
 8008a02:	d91a      	bls.n	8008a3a <__ieee754_pow+0x9ea>
 8008a04:	4b2f      	ldr	r3, [pc, #188]	@ (8008ac4 <__ieee754_pow+0xa74>)
 8008a06:	440b      	add	r3, r1
 8008a08:	4303      	orrs	r3, r0
 8008a0a:	d009      	beq.n	8008a20 <__ieee754_pow+0x9d0>
 8008a0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a10:	2200      	movs	r2, #0
 8008a12:	2300      	movs	r3, #0
 8008a14:	f7f8 f86a 	bl	8000aec <__aeabi_dcmplt>
 8008a18:	3800      	subs	r0, #0
 8008a1a:	bf18      	it	ne
 8008a1c:	2001      	movne	r0, #1
 8008a1e:	e42b      	b.n	8008278 <__ieee754_pow+0x228>
 8008a20:	4642      	mov	r2, r8
 8008a22:	464b      	mov	r3, r9
 8008a24:	f7f7 fc38 	bl	8000298 <__aeabi_dsub>
 8008a28:	4632      	mov	r2, r6
 8008a2a:	463b      	mov	r3, r7
 8008a2c:	f7f8 f872 	bl	8000b14 <__aeabi_dcmpge>
 8008a30:	2800      	cmp	r0, #0
 8008a32:	d1eb      	bne.n	8008a0c <__ieee754_pow+0x9bc>
 8008a34:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8008ad4 <__ieee754_pow+0xa84>
 8008a38:	e6f7      	b.n	800882a <__ieee754_pow+0x7da>
 8008a3a:	469a      	mov	sl, r3
 8008a3c:	4b22      	ldr	r3, [pc, #136]	@ (8008ac8 <__ieee754_pow+0xa78>)
 8008a3e:	459a      	cmp	sl, r3
 8008a40:	f63f aef3 	bhi.w	800882a <__ieee754_pow+0x7da>
 8008a44:	f8dd a010 	ldr.w	sl, [sp, #16]
 8008a48:	e715      	b.n	8008876 <__ieee754_pow+0x826>
 8008a4a:	ec51 0b10 	vmov	r0, r1, d0
 8008a4e:	4619      	mov	r1, r3
 8008a50:	e7cf      	b.n	80089f2 <__ieee754_pow+0x9a2>
 8008a52:	491a      	ldr	r1, [pc, #104]	@ (8008abc <__ieee754_pow+0xa6c>)
 8008a54:	2000      	movs	r0, #0
 8008a56:	f7ff bb18 	b.w	800808a <__ieee754_pow+0x3a>
 8008a5a:	2000      	movs	r0, #0
 8008a5c:	2100      	movs	r1, #0
 8008a5e:	f7ff bb14 	b.w	800808a <__ieee754_pow+0x3a>
 8008a62:	4630      	mov	r0, r6
 8008a64:	4639      	mov	r1, r7
 8008a66:	f7ff bb10 	b.w	800808a <__ieee754_pow+0x3a>
 8008a6a:	460c      	mov	r4, r1
 8008a6c:	f7ff bb5e 	b.w	800812c <__ieee754_pow+0xdc>
 8008a70:	2400      	movs	r4, #0
 8008a72:	f7ff bb49 	b.w	8008108 <__ieee754_pow+0xb8>
 8008a76:	bf00      	nop
 8008a78:	00000000 	.word	0x00000000
 8008a7c:	3fe62e43 	.word	0x3fe62e43
 8008a80:	fefa39ef 	.word	0xfefa39ef
 8008a84:	3fe62e42 	.word	0x3fe62e42
 8008a88:	0ca86c39 	.word	0x0ca86c39
 8008a8c:	be205c61 	.word	0xbe205c61
 8008a90:	72bea4d0 	.word	0x72bea4d0
 8008a94:	3e663769 	.word	0x3e663769
 8008a98:	c5d26bf1 	.word	0xc5d26bf1
 8008a9c:	3ebbbd41 	.word	0x3ebbbd41
 8008aa0:	af25de2c 	.word	0xaf25de2c
 8008aa4:	3f11566a 	.word	0x3f11566a
 8008aa8:	16bebd93 	.word	0x16bebd93
 8008aac:	3f66c16c 	.word	0x3f66c16c
 8008ab0:	5555553e 	.word	0x5555553e
 8008ab4:	3fc55555 	.word	0x3fc55555
 8008ab8:	fff00000 	.word	0xfff00000
 8008abc:	3ff00000 	.word	0x3ff00000
 8008ac0:	4090cbff 	.word	0x4090cbff
 8008ac4:	3f6f3400 	.word	0x3f6f3400
 8008ac8:	3fe00000 	.word	0x3fe00000
 8008acc:	652b82fe 	.word	0x652b82fe
 8008ad0:	3c971547 	.word	0x3c971547
 8008ad4:	4090cc00 	.word	0x4090cc00

08008ad8 <fabs>:
 8008ad8:	ec51 0b10 	vmov	r0, r1, d0
 8008adc:	4602      	mov	r2, r0
 8008ade:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008ae2:	ec43 2b10 	vmov	d0, r2, r3
 8008ae6:	4770      	bx	lr

08008ae8 <scalbn>:
 8008ae8:	b570      	push	{r4, r5, r6, lr}
 8008aea:	ec55 4b10 	vmov	r4, r5, d0
 8008aee:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8008af2:	4606      	mov	r6, r0
 8008af4:	462b      	mov	r3, r5
 8008af6:	b991      	cbnz	r1, 8008b1e <scalbn+0x36>
 8008af8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8008afc:	4323      	orrs	r3, r4
 8008afe:	d03d      	beq.n	8008b7c <scalbn+0x94>
 8008b00:	4b35      	ldr	r3, [pc, #212]	@ (8008bd8 <scalbn+0xf0>)
 8008b02:	4620      	mov	r0, r4
 8008b04:	4629      	mov	r1, r5
 8008b06:	2200      	movs	r2, #0
 8008b08:	f7f7 fd7e 	bl	8000608 <__aeabi_dmul>
 8008b0c:	4b33      	ldr	r3, [pc, #204]	@ (8008bdc <scalbn+0xf4>)
 8008b0e:	429e      	cmp	r6, r3
 8008b10:	4604      	mov	r4, r0
 8008b12:	460d      	mov	r5, r1
 8008b14:	da0f      	bge.n	8008b36 <scalbn+0x4e>
 8008b16:	a328      	add	r3, pc, #160	@ (adr r3, 8008bb8 <scalbn+0xd0>)
 8008b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b1c:	e01e      	b.n	8008b5c <scalbn+0x74>
 8008b1e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8008b22:	4291      	cmp	r1, r2
 8008b24:	d10b      	bne.n	8008b3e <scalbn+0x56>
 8008b26:	4622      	mov	r2, r4
 8008b28:	4620      	mov	r0, r4
 8008b2a:	4629      	mov	r1, r5
 8008b2c:	f7f7 fbb6 	bl	800029c <__adddf3>
 8008b30:	4604      	mov	r4, r0
 8008b32:	460d      	mov	r5, r1
 8008b34:	e022      	b.n	8008b7c <scalbn+0x94>
 8008b36:	460b      	mov	r3, r1
 8008b38:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008b3c:	3936      	subs	r1, #54	@ 0x36
 8008b3e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8008b42:	4296      	cmp	r6, r2
 8008b44:	dd0d      	ble.n	8008b62 <scalbn+0x7a>
 8008b46:	2d00      	cmp	r5, #0
 8008b48:	a11d      	add	r1, pc, #116	@ (adr r1, 8008bc0 <scalbn+0xd8>)
 8008b4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b4e:	da02      	bge.n	8008b56 <scalbn+0x6e>
 8008b50:	a11d      	add	r1, pc, #116	@ (adr r1, 8008bc8 <scalbn+0xe0>)
 8008b52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b56:	a31a      	add	r3, pc, #104	@ (adr r3, 8008bc0 <scalbn+0xd8>)
 8008b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b5c:	f7f7 fd54 	bl	8000608 <__aeabi_dmul>
 8008b60:	e7e6      	b.n	8008b30 <scalbn+0x48>
 8008b62:	1872      	adds	r2, r6, r1
 8008b64:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8008b68:	428a      	cmp	r2, r1
 8008b6a:	dcec      	bgt.n	8008b46 <scalbn+0x5e>
 8008b6c:	2a00      	cmp	r2, #0
 8008b6e:	dd08      	ble.n	8008b82 <scalbn+0x9a>
 8008b70:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008b74:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008b78:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008b7c:	ec45 4b10 	vmov	d0, r4, r5
 8008b80:	bd70      	pop	{r4, r5, r6, pc}
 8008b82:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8008b86:	da08      	bge.n	8008b9a <scalbn+0xb2>
 8008b88:	2d00      	cmp	r5, #0
 8008b8a:	a10b      	add	r1, pc, #44	@ (adr r1, 8008bb8 <scalbn+0xd0>)
 8008b8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b90:	dac1      	bge.n	8008b16 <scalbn+0x2e>
 8008b92:	a10f      	add	r1, pc, #60	@ (adr r1, 8008bd0 <scalbn+0xe8>)
 8008b94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b98:	e7bd      	b.n	8008b16 <scalbn+0x2e>
 8008b9a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008b9e:	3236      	adds	r2, #54	@ 0x36
 8008ba0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008ba4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008ba8:	4620      	mov	r0, r4
 8008baa:	4b0d      	ldr	r3, [pc, #52]	@ (8008be0 <scalbn+0xf8>)
 8008bac:	4629      	mov	r1, r5
 8008bae:	2200      	movs	r2, #0
 8008bb0:	e7d4      	b.n	8008b5c <scalbn+0x74>
 8008bb2:	bf00      	nop
 8008bb4:	f3af 8000 	nop.w
 8008bb8:	c2f8f359 	.word	0xc2f8f359
 8008bbc:	01a56e1f 	.word	0x01a56e1f
 8008bc0:	8800759c 	.word	0x8800759c
 8008bc4:	7e37e43c 	.word	0x7e37e43c
 8008bc8:	8800759c 	.word	0x8800759c
 8008bcc:	fe37e43c 	.word	0xfe37e43c
 8008bd0:	c2f8f359 	.word	0xc2f8f359
 8008bd4:	81a56e1f 	.word	0x81a56e1f
 8008bd8:	43500000 	.word	0x43500000
 8008bdc:	ffff3cb0 	.word	0xffff3cb0
 8008be0:	3c900000 	.word	0x3c900000

08008be4 <with_errno>:
 8008be4:	b510      	push	{r4, lr}
 8008be6:	ed2d 8b02 	vpush	{d8}
 8008bea:	eeb0 8a40 	vmov.f32	s16, s0
 8008bee:	eef0 8a60 	vmov.f32	s17, s1
 8008bf2:	4604      	mov	r4, r0
 8008bf4:	f7fd f93a 	bl	8005e6c <__errno>
 8008bf8:	eeb0 0a48 	vmov.f32	s0, s16
 8008bfc:	eef0 0a68 	vmov.f32	s1, s17
 8008c00:	ecbd 8b02 	vpop	{d8}
 8008c04:	6004      	str	r4, [r0, #0]
 8008c06:	bd10      	pop	{r4, pc}

08008c08 <xflow>:
 8008c08:	4603      	mov	r3, r0
 8008c0a:	b507      	push	{r0, r1, r2, lr}
 8008c0c:	ec51 0b10 	vmov	r0, r1, d0
 8008c10:	b183      	cbz	r3, 8008c34 <xflow+0x2c>
 8008c12:	4602      	mov	r2, r0
 8008c14:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008c18:	e9cd 2300 	strd	r2, r3, [sp]
 8008c1c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c20:	f7f7 fcf2 	bl	8000608 <__aeabi_dmul>
 8008c24:	ec41 0b10 	vmov	d0, r0, r1
 8008c28:	2022      	movs	r0, #34	@ 0x22
 8008c2a:	b003      	add	sp, #12
 8008c2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c30:	f7ff bfd8 	b.w	8008be4 <with_errno>
 8008c34:	4602      	mov	r2, r0
 8008c36:	460b      	mov	r3, r1
 8008c38:	e7ee      	b.n	8008c18 <xflow+0x10>
 8008c3a:	0000      	movs	r0, r0
 8008c3c:	0000      	movs	r0, r0
	...

08008c40 <__math_uflow>:
 8008c40:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008c48 <__math_uflow+0x8>
 8008c44:	f7ff bfe0 	b.w	8008c08 <xflow>
 8008c48:	00000000 	.word	0x00000000
 8008c4c:	10000000 	.word	0x10000000

08008c50 <__math_oflow>:
 8008c50:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008c58 <__math_oflow+0x8>
 8008c54:	f7ff bfd8 	b.w	8008c08 <xflow>
 8008c58:	00000000 	.word	0x00000000
 8008c5c:	70000000 	.word	0x70000000

08008c60 <__ieee754_sqrt>:
 8008c60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c64:	4a68      	ldr	r2, [pc, #416]	@ (8008e08 <__ieee754_sqrt+0x1a8>)
 8008c66:	ec55 4b10 	vmov	r4, r5, d0
 8008c6a:	43aa      	bics	r2, r5
 8008c6c:	462b      	mov	r3, r5
 8008c6e:	4621      	mov	r1, r4
 8008c70:	d110      	bne.n	8008c94 <__ieee754_sqrt+0x34>
 8008c72:	4622      	mov	r2, r4
 8008c74:	4620      	mov	r0, r4
 8008c76:	4629      	mov	r1, r5
 8008c78:	f7f7 fcc6 	bl	8000608 <__aeabi_dmul>
 8008c7c:	4602      	mov	r2, r0
 8008c7e:	460b      	mov	r3, r1
 8008c80:	4620      	mov	r0, r4
 8008c82:	4629      	mov	r1, r5
 8008c84:	f7f7 fb0a 	bl	800029c <__adddf3>
 8008c88:	4604      	mov	r4, r0
 8008c8a:	460d      	mov	r5, r1
 8008c8c:	ec45 4b10 	vmov	d0, r4, r5
 8008c90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c94:	2d00      	cmp	r5, #0
 8008c96:	dc0e      	bgt.n	8008cb6 <__ieee754_sqrt+0x56>
 8008c98:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8008c9c:	4322      	orrs	r2, r4
 8008c9e:	d0f5      	beq.n	8008c8c <__ieee754_sqrt+0x2c>
 8008ca0:	b19d      	cbz	r5, 8008cca <__ieee754_sqrt+0x6a>
 8008ca2:	4622      	mov	r2, r4
 8008ca4:	4620      	mov	r0, r4
 8008ca6:	4629      	mov	r1, r5
 8008ca8:	f7f7 faf6 	bl	8000298 <__aeabi_dsub>
 8008cac:	4602      	mov	r2, r0
 8008cae:	460b      	mov	r3, r1
 8008cb0:	f7f7 fdd4 	bl	800085c <__aeabi_ddiv>
 8008cb4:	e7e8      	b.n	8008c88 <__ieee754_sqrt+0x28>
 8008cb6:	152a      	asrs	r2, r5, #20
 8008cb8:	d115      	bne.n	8008ce6 <__ieee754_sqrt+0x86>
 8008cba:	2000      	movs	r0, #0
 8008cbc:	e009      	b.n	8008cd2 <__ieee754_sqrt+0x72>
 8008cbe:	0acb      	lsrs	r3, r1, #11
 8008cc0:	3a15      	subs	r2, #21
 8008cc2:	0549      	lsls	r1, r1, #21
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d0fa      	beq.n	8008cbe <__ieee754_sqrt+0x5e>
 8008cc8:	e7f7      	b.n	8008cba <__ieee754_sqrt+0x5a>
 8008cca:	462a      	mov	r2, r5
 8008ccc:	e7fa      	b.n	8008cc4 <__ieee754_sqrt+0x64>
 8008cce:	005b      	lsls	r3, r3, #1
 8008cd0:	3001      	adds	r0, #1
 8008cd2:	02dc      	lsls	r4, r3, #11
 8008cd4:	d5fb      	bpl.n	8008cce <__ieee754_sqrt+0x6e>
 8008cd6:	1e44      	subs	r4, r0, #1
 8008cd8:	1b12      	subs	r2, r2, r4
 8008cda:	f1c0 0420 	rsb	r4, r0, #32
 8008cde:	fa21 f404 	lsr.w	r4, r1, r4
 8008ce2:	4323      	orrs	r3, r4
 8008ce4:	4081      	lsls	r1, r0
 8008ce6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008cea:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8008cee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008cf2:	07d2      	lsls	r2, r2, #31
 8008cf4:	bf5c      	itt	pl
 8008cf6:	005b      	lslpl	r3, r3, #1
 8008cf8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8008cfc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008d00:	bf58      	it	pl
 8008d02:	0049      	lslpl	r1, r1, #1
 8008d04:	2600      	movs	r6, #0
 8008d06:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8008d0a:	106d      	asrs	r5, r5, #1
 8008d0c:	0049      	lsls	r1, r1, #1
 8008d0e:	2016      	movs	r0, #22
 8008d10:	4632      	mov	r2, r6
 8008d12:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8008d16:	1917      	adds	r7, r2, r4
 8008d18:	429f      	cmp	r7, r3
 8008d1a:	bfde      	ittt	le
 8008d1c:	193a      	addle	r2, r7, r4
 8008d1e:	1bdb      	suble	r3, r3, r7
 8008d20:	1936      	addle	r6, r6, r4
 8008d22:	0fcf      	lsrs	r7, r1, #31
 8008d24:	3801      	subs	r0, #1
 8008d26:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8008d2a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008d2e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8008d32:	d1f0      	bne.n	8008d16 <__ieee754_sqrt+0xb6>
 8008d34:	4604      	mov	r4, r0
 8008d36:	2720      	movs	r7, #32
 8008d38:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	eb00 0e0c 	add.w	lr, r0, ip
 8008d42:	db02      	blt.n	8008d4a <__ieee754_sqrt+0xea>
 8008d44:	d113      	bne.n	8008d6e <__ieee754_sqrt+0x10e>
 8008d46:	458e      	cmp	lr, r1
 8008d48:	d811      	bhi.n	8008d6e <__ieee754_sqrt+0x10e>
 8008d4a:	f1be 0f00 	cmp.w	lr, #0
 8008d4e:	eb0e 000c 	add.w	r0, lr, ip
 8008d52:	da42      	bge.n	8008dda <__ieee754_sqrt+0x17a>
 8008d54:	2800      	cmp	r0, #0
 8008d56:	db40      	blt.n	8008dda <__ieee754_sqrt+0x17a>
 8008d58:	f102 0801 	add.w	r8, r2, #1
 8008d5c:	1a9b      	subs	r3, r3, r2
 8008d5e:	458e      	cmp	lr, r1
 8008d60:	bf88      	it	hi
 8008d62:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008d66:	eba1 010e 	sub.w	r1, r1, lr
 8008d6a:	4464      	add	r4, ip
 8008d6c:	4642      	mov	r2, r8
 8008d6e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8008d72:	3f01      	subs	r7, #1
 8008d74:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8008d78:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008d7c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8008d80:	d1dc      	bne.n	8008d3c <__ieee754_sqrt+0xdc>
 8008d82:	4319      	orrs	r1, r3
 8008d84:	d01b      	beq.n	8008dbe <__ieee754_sqrt+0x15e>
 8008d86:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8008e0c <__ieee754_sqrt+0x1ac>
 8008d8a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8008e10 <__ieee754_sqrt+0x1b0>
 8008d8e:	e9da 0100 	ldrd	r0, r1, [sl]
 8008d92:	e9db 2300 	ldrd	r2, r3, [fp]
 8008d96:	f7f7 fa7f 	bl	8000298 <__aeabi_dsub>
 8008d9a:	e9da 8900 	ldrd	r8, r9, [sl]
 8008d9e:	4602      	mov	r2, r0
 8008da0:	460b      	mov	r3, r1
 8008da2:	4640      	mov	r0, r8
 8008da4:	4649      	mov	r1, r9
 8008da6:	f7f7 feab 	bl	8000b00 <__aeabi_dcmple>
 8008daa:	b140      	cbz	r0, 8008dbe <__ieee754_sqrt+0x15e>
 8008dac:	f1b4 3fff 	cmp.w	r4, #4294967295
 8008db0:	e9da 0100 	ldrd	r0, r1, [sl]
 8008db4:	e9db 2300 	ldrd	r2, r3, [fp]
 8008db8:	d111      	bne.n	8008dde <__ieee754_sqrt+0x17e>
 8008dba:	3601      	adds	r6, #1
 8008dbc:	463c      	mov	r4, r7
 8008dbe:	1072      	asrs	r2, r6, #1
 8008dc0:	0863      	lsrs	r3, r4, #1
 8008dc2:	07f1      	lsls	r1, r6, #31
 8008dc4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8008dc8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8008dcc:	bf48      	it	mi
 8008dce:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8008dd2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	e756      	b.n	8008c88 <__ieee754_sqrt+0x28>
 8008dda:	4690      	mov	r8, r2
 8008ddc:	e7be      	b.n	8008d5c <__ieee754_sqrt+0xfc>
 8008dde:	f7f7 fa5d 	bl	800029c <__adddf3>
 8008de2:	e9da 8900 	ldrd	r8, r9, [sl]
 8008de6:	4602      	mov	r2, r0
 8008de8:	460b      	mov	r3, r1
 8008dea:	4640      	mov	r0, r8
 8008dec:	4649      	mov	r1, r9
 8008dee:	f7f7 fe7d 	bl	8000aec <__aeabi_dcmplt>
 8008df2:	b120      	cbz	r0, 8008dfe <__ieee754_sqrt+0x19e>
 8008df4:	1ca0      	adds	r0, r4, #2
 8008df6:	bf08      	it	eq
 8008df8:	3601      	addeq	r6, #1
 8008dfa:	3402      	adds	r4, #2
 8008dfc:	e7df      	b.n	8008dbe <__ieee754_sqrt+0x15e>
 8008dfe:	1c63      	adds	r3, r4, #1
 8008e00:	f023 0401 	bic.w	r4, r3, #1
 8008e04:	e7db      	b.n	8008dbe <__ieee754_sqrt+0x15e>
 8008e06:	bf00      	nop
 8008e08:	7ff00000 	.word	0x7ff00000
 8008e0c:	200001e0 	.word	0x200001e0
 8008e10:	200001d8 	.word	0x200001d8

08008e14 <_init>:
 8008e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e16:	bf00      	nop
 8008e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e1a:	bc08      	pop	{r3}
 8008e1c:	469e      	mov	lr, r3
 8008e1e:	4770      	bx	lr

08008e20 <_fini>:
 8008e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e22:	bf00      	nop
 8008e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e26:	bc08      	pop	{r3}
 8008e28:	469e      	mov	lr, r3
 8008e2a:	4770      	bx	lr
