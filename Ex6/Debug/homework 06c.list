
homework 06c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d98  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000400  08009f38  08009f38  0000af38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a338  0800a338  0000c1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a338  0800a338  0000b338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a340  0800a340  0000c1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a340  0800a340  0000b340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a344  0800a344  0000b344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800a348  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000032c  200001d8  0800a520  0000c1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000504  0800a520  0000c504  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001046a  00000000  00000000  0000c208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021c9  00000000  00000000  0001c672  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa8  00000000  00000000  0001e840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c64  00000000  00000000  0001f7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017546  00000000  00000000  0002044c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012865  00000000  00000000  00037992  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091719  00000000  00000000  0004a1f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000db910  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005498  00000000  00000000  000db954  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000e0dec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009f20 	.word	0x08009f20

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	08009f20 	.word	0x08009f20

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	if (htim != &htim1) return;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4a06      	ldr	r2, [pc, #24]	@ (8000f6c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d103      	bne.n	8000f60 <HAL_TIM_PeriodElapsedCallback+0x18>
	timer_finished = 1;
 8000f58:	4b05      	ldr	r3, [pc, #20]	@ (8000f70 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	701a      	strb	r2, [r3, #0]
 8000f5e:	e000      	b.n	8000f62 <HAL_TIM_PeriodElapsedCallback+0x1a>
	if (htim != &htim1) return;
 8000f60:	bf00      	nop
}
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	200002a8 	.word	0x200002a8
 8000f70:	20000398 	.word	0x20000398

08000f74 <HAL_I2C_MasterRxCpltCallback>:
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8000f74:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f78:	b0a2      	sub	sp, #136	@ 0x88
 8000f7a:	af06      	add	r7, sp, #24
 8000f7c:	6078      	str	r0, [r7, #4]
	acc_g_x=values[0]/64.0;
 8000f7e:	4b35      	ldr	r3, [pc, #212]	@ (8001054 <HAL_I2C_MasterRxCpltCallback+0xe0>)
 8000f80:	f993 3000 	ldrsb.w	r3, [r3]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff fad5 	bl	8000534 <__aeabi_i2d>
 8000f8a:	f04f 0200 	mov.w	r2, #0
 8000f8e:	4b32      	ldr	r3, [pc, #200]	@ (8001058 <HAL_I2C_MasterRxCpltCallback+0xe4>)
 8000f90:	f7ff fc64 	bl	800085c <__aeabi_ddiv>
 8000f94:	4602      	mov	r2, r0
 8000f96:	460b      	mov	r3, r1
 8000f98:	4610      	mov	r0, r2
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	f7ff fe0c 	bl	8000bb8 <__aeabi_d2f>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	4a2e      	ldr	r2, [pc, #184]	@ (800105c <HAL_I2C_MasterRxCpltCallback+0xe8>)
 8000fa4:	6013      	str	r3, [r2, #0]
	acc_g_y=values[2]/64.0;
 8000fa6:	4b2b      	ldr	r3, [pc, #172]	@ (8001054 <HAL_I2C_MasterRxCpltCallback+0xe0>)
 8000fa8:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff fac1 	bl	8000534 <__aeabi_i2d>
 8000fb2:	f04f 0200 	mov.w	r2, #0
 8000fb6:	4b28      	ldr	r3, [pc, #160]	@ (8001058 <HAL_I2C_MasterRxCpltCallback+0xe4>)
 8000fb8:	f7ff fc50 	bl	800085c <__aeabi_ddiv>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	4610      	mov	r0, r2
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	f7ff fdf8 	bl	8000bb8 <__aeabi_d2f>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	4a25      	ldr	r2, [pc, #148]	@ (8001060 <HAL_I2C_MasterRxCpltCallback+0xec>)
 8000fcc:	6013      	str	r3, [r2, #0]
	acc_g_z=values[4]/64.0;
 8000fce:	4b21      	ldr	r3, [pc, #132]	@ (8001054 <HAL_I2C_MasterRxCpltCallback+0xe0>)
 8000fd0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff faad 	bl	8000534 <__aeabi_i2d>
 8000fda:	f04f 0200 	mov.w	r2, #0
 8000fde:	4b1e      	ldr	r3, [pc, #120]	@ (8001058 <HAL_I2C_MasterRxCpltCallback+0xe4>)
 8000fe0:	f7ff fc3c 	bl	800085c <__aeabi_ddiv>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	4610      	mov	r0, r2
 8000fea:	4619      	mov	r1, r3
 8000fec:	f7ff fde4 	bl	8000bb8 <__aeabi_d2f>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	4a1c      	ldr	r2, [pc, #112]	@ (8001064 <HAL_I2C_MasterRxCpltCallback+0xf0>)
 8000ff4:	6013      	str	r3, [r2, #0]
	char stringa[100];
	int length = snprintf(stringa, sizeof(stringa), "X: %.2fg, Y: %.2fg, Z: %.2fg\n\r", acc_g_x, acc_g_y, acc_g_z);
 8000ff6:	4b19      	ldr	r3, [pc, #100]	@ (800105c <HAL_I2C_MasterRxCpltCallback+0xe8>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff faac 	bl	8000558 <__aeabi_f2d>
 8001000:	4604      	mov	r4, r0
 8001002:	460d      	mov	r5, r1
 8001004:	4b16      	ldr	r3, [pc, #88]	@ (8001060 <HAL_I2C_MasterRxCpltCallback+0xec>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff faa5 	bl	8000558 <__aeabi_f2d>
 800100e:	4680      	mov	r8, r0
 8001010:	4689      	mov	r9, r1
 8001012:	4b14      	ldr	r3, [pc, #80]	@ (8001064 <HAL_I2C_MasterRxCpltCallback+0xf0>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff fa9e 	bl	8000558 <__aeabi_f2d>
 800101c:	4602      	mov	r2, r0
 800101e:	460b      	mov	r3, r1
 8001020:	f107 0008 	add.w	r0, r7, #8
 8001024:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001028:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800102c:	e9cd 4500 	strd	r4, r5, [sp]
 8001030:	4a0d      	ldr	r2, [pc, #52]	@ (8001068 <HAL_I2C_MasterRxCpltCallback+0xf4>)
 8001032:	2164      	movs	r1, #100	@ 0x64
 8001034:	f006 fe32 	bl	8007c9c <sniprintf>
 8001038:	66f8      	str	r0, [r7, #108]	@ 0x6c
	HAL_UART_Transmit(&huart2, stringa, length, 100);
 800103a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800103c:	b29a      	uxth	r2, r3
 800103e:	f107 0108 	add.w	r1, r7, #8
 8001042:	2364      	movs	r3, #100	@ 0x64
 8001044:	4809      	ldr	r0, [pc, #36]	@ (800106c <HAL_I2C_MasterRxCpltCallback+0xf8>)
 8001046:	f004 fff2 	bl	800602e <HAL_UART_Transmit>
}
 800104a:	bf00      	nop
 800104c:	3770      	adds	r7, #112	@ 0x70
 800104e:	46bd      	mov	sp, r7
 8001050:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001054:	2000039c 	.word	0x2000039c
 8001058:	40500000 	.word	0x40500000
 800105c:	200003a4 	.word	0x200003a4
 8001060:	200003a8 	.word	0x200003a8
 8001064:	200003ac 	.word	0x200003ac
 8001068:	08009f38 	.word	0x08009f38
 800106c:	200002f0 	.word	0x200002f0

08001070 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b09c      	sub	sp, #112	@ 0x70
 8001074:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001076:	f000 fd49 	bl	8001b0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800107a:	f000 f8dd 	bl	8001238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800107e:	f000 fa19 	bl	80014b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001082:	f000 f9ef 	bl	8001464 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001086:	f000 f9c3 	bl	8001410 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800108a:	f000 f941 	bl	8001310 <MX_I2C1_Init>
  MX_TIM1_Init();
 800108e:	f000 f96d 	bl	800136c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  char stringa[64];
	uint8_t data[5];

	int length = snprintf(stringa, sizeof(stringa), "-----\n\r");
 8001092:	f107 0314 	add.w	r3, r7, #20
 8001096:	4a5d      	ldr	r2, [pc, #372]	@ (800120c <main+0x19c>)
 8001098:	2140      	movs	r1, #64	@ 0x40
 800109a:	4618      	mov	r0, r3
 800109c:	f006 fdfe 	bl	8007c9c <sniprintf>
 80010a0:	6678      	str	r0, [r7, #100]	@ 0x64
	HAL_UART_Transmit(&huart2, stringa, length, 100);
 80010a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	f107 0114 	add.w	r1, r7, #20
 80010aa:	2364      	movs	r3, #100	@ 0x64
 80010ac:	4858      	ldr	r0, [pc, #352]	@ (8001210 <main+0x1a0>)
 80010ae:	f004 ffbe 	bl	800602e <HAL_UART_Transmit>

	// REG_ADDRESS | 4-bit config | LOW_POWER | ZYX
	uint8_t mode = 0b0001;
 80010b2:	2301      	movs	r3, #1
 80010b4:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
	uint8_t low_power = 0b0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
	uint8_t axis = 0b111;
 80010be:	2307      	movs	r3, #7
 80010c0:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61

	uint8_t CTRL_REG1[] = {0x20, (mode << 4) | (low_power << 3) | (axis)};
 80010c4:	2320      	movs	r3, #32
 80010c6:	723b      	strb	r3, [r7, #8]
 80010c8:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 80010cc:	011b      	lsls	r3, r3, #4
 80010ce:	b25a      	sxtb	r2, r3
 80010d0:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 80010d4:	00db      	lsls	r3, r3, #3
 80010d6:	b25b      	sxtb	r3, r3
 80010d8:	4313      	orrs	r3, r2
 80010da:	b25a      	sxtb	r2, r3
 80010dc:	f997 3061 	ldrsb.w	r3, [r7, #97]	@ 0x61
 80010e0:	4313      	orrs	r3, r2
 80010e2:	b25b      	sxtb	r3, r3
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	727b      	strb	r3, [r7, #9]
	uint8_t CTRL_REG2[] = {0x21, 0x00};
 80010e8:	2321      	movs	r3, #33	@ 0x21
 80010ea:	80bb      	strh	r3, [r7, #4]
	uint8_t CTRL_REG4[] = {0x23, 0x00};
 80010ec:	2323      	movs	r3, #35	@ 0x23
 80010ee:	803b      	strh	r3, [r7, #0]

	if (HAL_I2C_Master_Transmit(&hi2c1, (ACCEL_ADDRESS_V1 << 1) | WRITEBIT, CTRL_REG1, sizeof(CTRL_REG1), 200) == HAL_OK) {
 80010f0:	f107 0208 	add.w	r2, r7, #8
 80010f4:	23c8      	movs	r3, #200	@ 0xc8
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	2302      	movs	r3, #2
 80010fa:	2150      	movs	r1, #80	@ 0x50
 80010fc:	4845      	ldr	r0, [pc, #276]	@ (8001214 <main+0x1a4>)
 80010fe:	f001 fd87 	bl	8002c10 <HAL_I2C_Master_Transmit>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d113      	bne.n	8001130 <main+0xc0>
	  int length = snprintf(stringa, sizeof(stringa), "V1 is correct\n\r");
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	4a42      	ldr	r2, [pc, #264]	@ (8001218 <main+0x1a8>)
 800110e:	2140      	movs	r1, #64	@ 0x40
 8001110:	4618      	mov	r0, r3
 8001112:	f006 fdc3 	bl	8007c9c <sniprintf>
 8001116:	6578      	str	r0, [r7, #84]	@ 0x54
	  HAL_UART_Transmit_DMA(&huart2, stringa, length);
 8001118:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800111a:	b29a      	uxth	r2, r3
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	4619      	mov	r1, r3
 8001122:	483b      	ldr	r0, [pc, #236]	@ (8001210 <main+0x1a0>)
 8001124:	f005 f816 	bl	8006154 <HAL_UART_Transmit_DMA>
	  ACCEL_ADDRESS = ACCEL_ADDRESS_V1;
 8001128:	4b3c      	ldr	r3, [pc, #240]	@ (800121c <main+0x1ac>)
 800112a:	2228      	movs	r2, #40	@ 0x28
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	e02f      	b.n	8001190 <main+0x120>
	} else if (HAL_I2C_Master_Transmit(&hi2c1, (ACCEL_ADDRESS_V2 << 1) | WRITEBIT, CTRL_REG1, sizeof(CTRL_REG1), 200) == HAL_OK) {
 8001130:	f107 0208 	add.w	r2, r7, #8
 8001134:	23c8      	movs	r3, #200	@ 0xc8
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	2302      	movs	r3, #2
 800113a:	2150      	movs	r1, #80	@ 0x50
 800113c:	4835      	ldr	r0, [pc, #212]	@ (8001214 <main+0x1a4>)
 800113e:	f001 fd67 	bl	8002c10 <HAL_I2C_Master_Transmit>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d113      	bne.n	8001170 <main+0x100>
	  int length = snprintf(stringa, sizeof(stringa), "V2 is correct\n\r");
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	4a34      	ldr	r2, [pc, #208]	@ (8001220 <main+0x1b0>)
 800114e:	2140      	movs	r1, #64	@ 0x40
 8001150:	4618      	mov	r0, r3
 8001152:	f006 fda3 	bl	8007c9c <sniprintf>
 8001156:	65b8      	str	r0, [r7, #88]	@ 0x58
	  HAL_UART_Transmit_DMA(&huart2, stringa, length);
 8001158:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800115a:	b29a      	uxth	r2, r3
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	4619      	mov	r1, r3
 8001162:	482b      	ldr	r0, [pc, #172]	@ (8001210 <main+0x1a0>)
 8001164:	f004 fff6 	bl	8006154 <HAL_UART_Transmit_DMA>
	  ACCEL_ADDRESS = ACCEL_ADDRESS_V2;
 8001168:	4b2c      	ldr	r3, [pc, #176]	@ (800121c <main+0x1ac>)
 800116a:	2228      	movs	r2, #40	@ 0x28
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	e00f      	b.n	8001190 <main+0x120>
	} else {
	  int length = snprintf(stringa, sizeof(stringa), "Error: incorrect accelerator address\n\r");
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	4a2b      	ldr	r2, [pc, #172]	@ (8001224 <main+0x1b4>)
 8001176:	2140      	movs	r1, #64	@ 0x40
 8001178:	4618      	mov	r0, r3
 800117a:	f006 fd8f 	bl	8007c9c <sniprintf>
 800117e:	65f8      	str	r0, [r7, #92]	@ 0x5c
	  HAL_UART_Transmit_DMA(&huart2, stringa, length);
 8001180:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001182:	b29a      	uxth	r2, r3
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	4619      	mov	r1, r3
 800118a:	4821      	ldr	r0, [pc, #132]	@ (8001210 <main+0x1a0>)
 800118c:	f004 ffe2 	bl	8006154 <HAL_UART_Transmit_DMA>
	}

	HAL_I2C_Master_Transmit(&hi2c1, (ACCEL_ADDRESS << 1) | WRITEBIT, CTRL_REG2, sizeof(CTRL_REG2), 200);
 8001190:	4b22      	ldr	r3, [pc, #136]	@ (800121c <main+0x1ac>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	b29b      	uxth	r3, r3
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	b299      	uxth	r1, r3
 800119a:	1d3a      	adds	r2, r7, #4
 800119c:	23c8      	movs	r3, #200	@ 0xc8
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	2302      	movs	r3, #2
 80011a2:	481c      	ldr	r0, [pc, #112]	@ (8001214 <main+0x1a4>)
 80011a4:	f001 fd34 	bl	8002c10 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c1, (ACCEL_ADDRESS << 1) | WRITEBIT, CTRL_REG4, sizeof(CTRL_REG4), 200);
 80011a8:	4b1c      	ldr	r3, [pc, #112]	@ (800121c <main+0x1ac>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	b299      	uxth	r1, r3
 80011b2:	463a      	mov	r2, r7
 80011b4:	23c8      	movs	r3, #200	@ 0xc8
 80011b6:	9300      	str	r3, [sp, #0]
 80011b8:	2302      	movs	r3, #2
 80011ba:	4816      	ldr	r0, [pc, #88]	@ (8001214 <main+0x1a4>)
 80011bc:	f001 fd28 	bl	8002c10 <HAL_I2C_Master_Transmit>

	HAL_TIM_Base_Start_IT(&htim1);
 80011c0:	4819      	ldr	r0, [pc, #100]	@ (8001228 <main+0x1b8>)
 80011c2:	f004 faf1 	bl	80057a8 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (!timer_finished) continue;
 80011c6:	4b19      	ldr	r3, [pc, #100]	@ (800122c <main+0x1bc>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d01b      	beq.n	8001208 <main+0x198>
	  timer_finished = 0;
 80011d0:	4b16      	ldr	r3, [pc, #88]	@ (800122c <main+0x1bc>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	701a      	strb	r2, [r3, #0]

	  HAL_I2C_Master_Transmit(&hi2c1, (ACCEL_ADDRESS<<1), &out_add, 1, 200);
 80011d6:	4b11      	ldr	r3, [pc, #68]	@ (800121c <main+0x1ac>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	b29b      	uxth	r3, r3
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	b299      	uxth	r1, r3
 80011e0:	23c8      	movs	r3, #200	@ 0xc8
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	2301      	movs	r3, #1
 80011e6:	4a12      	ldr	r2, [pc, #72]	@ (8001230 <main+0x1c0>)
 80011e8:	480a      	ldr	r0, [pc, #40]	@ (8001214 <main+0x1a4>)
 80011ea:	f001 fd11 	bl	8002c10 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive_DMA(&hi2c1, (ACCEL_ADDRESS<<1)+1, values, 5);
 80011ee:	4b0b      	ldr	r3, [pc, #44]	@ (800121c <main+0x1ac>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	3301      	adds	r3, #1
 80011fa:	b299      	uxth	r1, r3
 80011fc:	2305      	movs	r3, #5
 80011fe:	4a0d      	ldr	r2, [pc, #52]	@ (8001234 <main+0x1c4>)
 8001200:	4804      	ldr	r0, [pc, #16]	@ (8001214 <main+0x1a4>)
 8001202:	f001 fe03 	bl	8002e0c <HAL_I2C_Master_Receive_DMA>
 8001206:	e7de      	b.n	80011c6 <main+0x156>
	  if (!timer_finished) continue;
 8001208:	bf00      	nop
 800120a:	e7dc      	b.n	80011c6 <main+0x156>
 800120c:	08009f58 	.word	0x08009f58
 8001210:	200002f0 	.word	0x200002f0
 8001214:	200001f4 	.word	0x200001f4
 8001218:	08009f60 	.word	0x08009f60
 800121c:	20000394 	.word	0x20000394
 8001220:	08009f70 	.word	0x08009f70
 8001224:	08009f80 	.word	0x08009f80
 8001228:	200002a8 	.word	0x200002a8
 800122c:	20000398 	.word	0x20000398
 8001230:	20000000 	.word	0x20000000
 8001234:	2000039c 	.word	0x2000039c

08001238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b094      	sub	sp, #80	@ 0x50
 800123c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800123e:	f107 0320 	add.w	r3, r7, #32
 8001242:	2230      	movs	r2, #48	@ 0x30
 8001244:	2100      	movs	r1, #0
 8001246:	4618      	mov	r0, r3
 8001248:	f006 fd9f 	bl	8007d8a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800124c:	f107 030c 	add.w	r3, r7, #12
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800125c:	2300      	movs	r3, #0
 800125e:	60bb      	str	r3, [r7, #8]
 8001260:	4b29      	ldr	r3, [pc, #164]	@ (8001308 <SystemClock_Config+0xd0>)
 8001262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001264:	4a28      	ldr	r2, [pc, #160]	@ (8001308 <SystemClock_Config+0xd0>)
 8001266:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800126a:	6413      	str	r3, [r2, #64]	@ 0x40
 800126c:	4b26      	ldr	r3, [pc, #152]	@ (8001308 <SystemClock_Config+0xd0>)
 800126e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001270:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001278:	2300      	movs	r3, #0
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	4b23      	ldr	r3, [pc, #140]	@ (800130c <SystemClock_Config+0xd4>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001284:	4a21      	ldr	r2, [pc, #132]	@ (800130c <SystemClock_Config+0xd4>)
 8001286:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800128a:	6013      	str	r3, [r2, #0]
 800128c:	4b1f      	ldr	r3, [pc, #124]	@ (800130c <SystemClock_Config+0xd4>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001294:	607b      	str	r3, [r7, #4]
 8001296:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001298:	2302      	movs	r3, #2
 800129a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800129c:	2301      	movs	r3, #1
 800129e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012a0:	2310      	movs	r3, #16
 80012a2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012a4:	2302      	movs	r3, #2
 80012a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012a8:	2300      	movs	r3, #0
 80012aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80012ac:	2310      	movs	r3, #16
 80012ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80012b0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80012b4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80012b6:	2304      	movs	r3, #4
 80012b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80012ba:	2307      	movs	r3, #7
 80012bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012be:	f107 0320 	add.w	r3, r7, #32
 80012c2:	4618      	mov	r0, r3
 80012c4:	f003 fd88 	bl	8004dd8 <HAL_RCC_OscConfig>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80012ce:	f000 f95f 	bl	8001590 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012d2:	230f      	movs	r3, #15
 80012d4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012d6:	2302      	movs	r3, #2
 80012d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012e4:	2300      	movs	r3, #0
 80012e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012e8:	f107 030c 	add.w	r3, r7, #12
 80012ec:	2102      	movs	r1, #2
 80012ee:	4618      	mov	r0, r3
 80012f0:	f003 ffea 	bl	80052c8 <HAL_RCC_ClockConfig>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80012fa:	f000 f949 	bl	8001590 <Error_Handler>
  }
}
 80012fe:	bf00      	nop
 8001300:	3750      	adds	r7, #80	@ 0x50
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40023800 	.word	0x40023800
 800130c:	40007000 	.word	0x40007000

08001310 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001314:	4b12      	ldr	r3, [pc, #72]	@ (8001360 <MX_I2C1_Init+0x50>)
 8001316:	4a13      	ldr	r2, [pc, #76]	@ (8001364 <MX_I2C1_Init+0x54>)
 8001318:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800131a:	4b11      	ldr	r3, [pc, #68]	@ (8001360 <MX_I2C1_Init+0x50>)
 800131c:	4a12      	ldr	r2, [pc, #72]	@ (8001368 <MX_I2C1_Init+0x58>)
 800131e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001320:	4b0f      	ldr	r3, [pc, #60]	@ (8001360 <MX_I2C1_Init+0x50>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001326:	4b0e      	ldr	r3, [pc, #56]	@ (8001360 <MX_I2C1_Init+0x50>)
 8001328:	2200      	movs	r2, #0
 800132a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800132c:	4b0c      	ldr	r3, [pc, #48]	@ (8001360 <MX_I2C1_Init+0x50>)
 800132e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001332:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001334:	4b0a      	ldr	r3, [pc, #40]	@ (8001360 <MX_I2C1_Init+0x50>)
 8001336:	2200      	movs	r2, #0
 8001338:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800133a:	4b09      	ldr	r3, [pc, #36]	@ (8001360 <MX_I2C1_Init+0x50>)
 800133c:	2200      	movs	r2, #0
 800133e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001340:	4b07      	ldr	r3, [pc, #28]	@ (8001360 <MX_I2C1_Init+0x50>)
 8001342:	2200      	movs	r2, #0
 8001344:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001346:	4b06      	ldr	r3, [pc, #24]	@ (8001360 <MX_I2C1_Init+0x50>)
 8001348:	2200      	movs	r2, #0
 800134a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800134c:	4804      	ldr	r0, [pc, #16]	@ (8001360 <MX_I2C1_Init+0x50>)
 800134e:	f001 fb1b 	bl	8002988 <HAL_I2C_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001358:	f000 f91a 	bl	8001590 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}
 8001360:	200001f4 	.word	0x200001f4
 8001364:	40005400 	.word	0x40005400
 8001368:	000186a0 	.word	0x000186a0

0800136c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001372:	f107 0308 	add.w	r3, r7, #8
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]
 800137e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001380:	463b      	mov	r3, r7
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001388:	4b1f      	ldr	r3, [pc, #124]	@ (8001408 <MX_TIM1_Init+0x9c>)
 800138a:	4a20      	ldr	r2, [pc, #128]	@ (800140c <MX_TIM1_Init+0xa0>)
 800138c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8400-1;
 800138e:	4b1e      	ldr	r3, [pc, #120]	@ (8001408 <MX_TIM1_Init+0x9c>)
 8001390:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001394:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001396:	4b1c      	ldr	r3, [pc, #112]	@ (8001408 <MX_TIM1_Init+0x9c>)
 8001398:	2200      	movs	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 800139c:	4b1a      	ldr	r3, [pc, #104]	@ (8001408 <MX_TIM1_Init+0x9c>)
 800139e:	f242 720f 	movw	r2, #9999	@ 0x270f
 80013a2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a4:	4b18      	ldr	r3, [pc, #96]	@ (8001408 <MX_TIM1_Init+0x9c>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013aa:	4b17      	ldr	r3, [pc, #92]	@ (8001408 <MX_TIM1_Init+0x9c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b0:	4b15      	ldr	r3, [pc, #84]	@ (8001408 <MX_TIM1_Init+0x9c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013b6:	4814      	ldr	r0, [pc, #80]	@ (8001408 <MX_TIM1_Init+0x9c>)
 80013b8:	f004 f9a6 	bl	8005708 <HAL_TIM_Base_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80013c2:	f000 f8e5 	bl	8001590 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013cc:	f107 0308 	add.w	r3, r7, #8
 80013d0:	4619      	mov	r1, r3
 80013d2:	480d      	ldr	r0, [pc, #52]	@ (8001408 <MX_TIM1_Init+0x9c>)
 80013d4:	f004 fb52 	bl	8005a7c <HAL_TIM_ConfigClockSource>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80013de:	f000 f8d7 	bl	8001590 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e2:	2300      	movs	r3, #0
 80013e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e6:	2300      	movs	r3, #0
 80013e8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013ea:	463b      	mov	r3, r7
 80013ec:	4619      	mov	r1, r3
 80013ee:	4806      	ldr	r0, [pc, #24]	@ (8001408 <MX_TIM1_Init+0x9c>)
 80013f0:	f004 fd4e 	bl	8005e90 <HAL_TIMEx_MasterConfigSynchronization>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80013fa:	f000 f8c9 	bl	8001590 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80013fe:	bf00      	nop
 8001400:	3718      	adds	r7, #24
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	200002a8 	.word	0x200002a8
 800140c:	40010000 	.word	0x40010000

08001410 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001414:	4b11      	ldr	r3, [pc, #68]	@ (800145c <MX_USART2_UART_Init+0x4c>)
 8001416:	4a12      	ldr	r2, [pc, #72]	@ (8001460 <MX_USART2_UART_Init+0x50>)
 8001418:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800141a:	4b10      	ldr	r3, [pc, #64]	@ (800145c <MX_USART2_UART_Init+0x4c>)
 800141c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001420:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001422:	4b0e      	ldr	r3, [pc, #56]	@ (800145c <MX_USART2_UART_Init+0x4c>)
 8001424:	2200      	movs	r2, #0
 8001426:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001428:	4b0c      	ldr	r3, [pc, #48]	@ (800145c <MX_USART2_UART_Init+0x4c>)
 800142a:	2200      	movs	r2, #0
 800142c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800142e:	4b0b      	ldr	r3, [pc, #44]	@ (800145c <MX_USART2_UART_Init+0x4c>)
 8001430:	2200      	movs	r2, #0
 8001432:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001434:	4b09      	ldr	r3, [pc, #36]	@ (800145c <MX_USART2_UART_Init+0x4c>)
 8001436:	220c      	movs	r2, #12
 8001438:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800143a:	4b08      	ldr	r3, [pc, #32]	@ (800145c <MX_USART2_UART_Init+0x4c>)
 800143c:	2200      	movs	r2, #0
 800143e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001440:	4b06      	ldr	r3, [pc, #24]	@ (800145c <MX_USART2_UART_Init+0x4c>)
 8001442:	2200      	movs	r2, #0
 8001444:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001446:	4805      	ldr	r0, [pc, #20]	@ (800145c <MX_USART2_UART_Init+0x4c>)
 8001448:	f004 fda4 	bl	8005f94 <HAL_UART_Init>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001452:	f000 f89d 	bl	8001590 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	200002f0 	.word	0x200002f0
 8001460:	40004400 	.word	0x40004400

08001464 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	607b      	str	r3, [r7, #4]
 800146e:	4b10      	ldr	r3, [pc, #64]	@ (80014b0 <MX_DMA_Init+0x4c>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001472:	4a0f      	ldr	r2, [pc, #60]	@ (80014b0 <MX_DMA_Init+0x4c>)
 8001474:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001478:	6313      	str	r3, [r2, #48]	@ 0x30
 800147a:	4b0d      	ldr	r3, [pc, #52]	@ (80014b0 <MX_DMA_Init+0x4c>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001486:	2200      	movs	r2, #0
 8001488:	2100      	movs	r1, #0
 800148a:	200b      	movs	r0, #11
 800148c:	f000 fc8b 	bl	8001da6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001490:	200b      	movs	r0, #11
 8001492:	f000 fca4 	bl	8001dde <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001496:	2200      	movs	r2, #0
 8001498:	2100      	movs	r1, #0
 800149a:	2011      	movs	r0, #17
 800149c:	f000 fc83 	bl	8001da6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80014a0:	2011      	movs	r0, #17
 80014a2:	f000 fc9c 	bl	8001dde <HAL_NVIC_EnableIRQ>

}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40023800 	.word	0x40023800

080014b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08a      	sub	sp, #40	@ 0x28
 80014b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ba:	f107 0314 	add.w	r3, r7, #20
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	60da      	str	r2, [r3, #12]
 80014c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	613b      	str	r3, [r7, #16]
 80014ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001584 <MX_GPIO_Init+0xd0>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d2:	4a2c      	ldr	r2, [pc, #176]	@ (8001584 <MX_GPIO_Init+0xd0>)
 80014d4:	f043 0304 	orr.w	r3, r3, #4
 80014d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014da:	4b2a      	ldr	r3, [pc, #168]	@ (8001584 <MX_GPIO_Init+0xd0>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014de:	f003 0304 	and.w	r3, r3, #4
 80014e2:	613b      	str	r3, [r7, #16]
 80014e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	4b26      	ldr	r3, [pc, #152]	@ (8001584 <MX_GPIO_Init+0xd0>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ee:	4a25      	ldr	r2, [pc, #148]	@ (8001584 <MX_GPIO_Init+0xd0>)
 80014f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f6:	4b23      	ldr	r3, [pc, #140]	@ (8001584 <MX_GPIO_Init+0xd0>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60bb      	str	r3, [r7, #8]
 8001506:	4b1f      	ldr	r3, [pc, #124]	@ (8001584 <MX_GPIO_Init+0xd0>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150a:	4a1e      	ldr	r2, [pc, #120]	@ (8001584 <MX_GPIO_Init+0xd0>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	6313      	str	r3, [r2, #48]	@ 0x30
 8001512:	4b1c      	ldr	r3, [pc, #112]	@ (8001584 <MX_GPIO_Init+0xd0>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	607b      	str	r3, [r7, #4]
 8001522:	4b18      	ldr	r3, [pc, #96]	@ (8001584 <MX_GPIO_Init+0xd0>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001526:	4a17      	ldr	r2, [pc, #92]	@ (8001584 <MX_GPIO_Init+0xd0>)
 8001528:	f043 0302 	orr.w	r3, r3, #2
 800152c:	6313      	str	r3, [r2, #48]	@ 0x30
 800152e:	4b15      	ldr	r3, [pc, #84]	@ (8001584 <MX_GPIO_Init+0xd0>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800153a:	2200      	movs	r2, #0
 800153c:	2120      	movs	r1, #32
 800153e:	4812      	ldr	r0, [pc, #72]	@ (8001588 <MX_GPIO_Init+0xd4>)
 8001540:	f001 fa08 	bl	8002954 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001544:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001548:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800154a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800154e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	4619      	mov	r1, r3
 800155a:	480c      	ldr	r0, [pc, #48]	@ (800158c <MX_GPIO_Init+0xd8>)
 800155c:	f001 f876 	bl	800264c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001560:	2320      	movs	r3, #32
 8001562:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001564:	2301      	movs	r3, #1
 8001566:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156c:	2300      	movs	r3, #0
 800156e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	4619      	mov	r1, r3
 8001576:	4804      	ldr	r0, [pc, #16]	@ (8001588 <MX_GPIO_Init+0xd4>)
 8001578:	f001 f868 	bl	800264c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800157c:	bf00      	nop
 800157e:	3728      	adds	r7, #40	@ 0x28
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40023800 	.word	0x40023800
 8001588:	40020000 	.word	0x40020000
 800158c:	40020800 	.word	0x40020800

08001590 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001594:	b672      	cpsid	i
}
 8001596:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001598:	bf00      	nop
 800159a:	e7fd      	b.n	8001598 <Error_Handler+0x8>

0800159c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	607b      	str	r3, [r7, #4]
 80015a6:	4b10      	ldr	r3, [pc, #64]	@ (80015e8 <HAL_MspInit+0x4c>)
 80015a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015aa:	4a0f      	ldr	r2, [pc, #60]	@ (80015e8 <HAL_MspInit+0x4c>)
 80015ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80015b2:	4b0d      	ldr	r3, [pc, #52]	@ (80015e8 <HAL_MspInit+0x4c>)
 80015b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015ba:	607b      	str	r3, [r7, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	603b      	str	r3, [r7, #0]
 80015c2:	4b09      	ldr	r3, [pc, #36]	@ (80015e8 <HAL_MspInit+0x4c>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c6:	4a08      	ldr	r2, [pc, #32]	@ (80015e8 <HAL_MspInit+0x4c>)
 80015c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80015ce:	4b06      	ldr	r3, [pc, #24]	@ (80015e8 <HAL_MspInit+0x4c>)
 80015d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015d6:	603b      	str	r3, [r7, #0]
 80015d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015da:	2007      	movs	r0, #7
 80015dc:	f000 fbd8 	bl	8001d90 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015e0:	bf00      	nop
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40023800 	.word	0x40023800

080015ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08a      	sub	sp, #40	@ 0x28
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f4:	f107 0314 	add.w	r3, r7, #20
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a34      	ldr	r2, [pc, #208]	@ (80016dc <HAL_I2C_MspInit+0xf0>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d162      	bne.n	80016d4 <HAL_I2C_MspInit+0xe8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	613b      	str	r3, [r7, #16]
 8001612:	4b33      	ldr	r3, [pc, #204]	@ (80016e0 <HAL_I2C_MspInit+0xf4>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001616:	4a32      	ldr	r2, [pc, #200]	@ (80016e0 <HAL_I2C_MspInit+0xf4>)
 8001618:	f043 0302 	orr.w	r3, r3, #2
 800161c:	6313      	str	r3, [r2, #48]	@ 0x30
 800161e:	4b30      	ldr	r3, [pc, #192]	@ (80016e0 <HAL_I2C_MspInit+0xf4>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	613b      	str	r3, [r7, #16]
 8001628:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800162a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800162e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001630:	2312      	movs	r3, #18
 8001632:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001638:	2303      	movs	r3, #3
 800163a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800163c:	2304      	movs	r3, #4
 800163e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	4619      	mov	r1, r3
 8001646:	4827      	ldr	r0, [pc, #156]	@ (80016e4 <HAL_I2C_MspInit+0xf8>)
 8001648:	f001 f800 	bl	800264c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800164c:	2300      	movs	r3, #0
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	4b23      	ldr	r3, [pc, #140]	@ (80016e0 <HAL_I2C_MspInit+0xf4>)
 8001652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001654:	4a22      	ldr	r2, [pc, #136]	@ (80016e0 <HAL_I2C_MspInit+0xf4>)
 8001656:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800165a:	6413      	str	r3, [r2, #64]	@ 0x40
 800165c:	4b20      	ldr	r3, [pc, #128]	@ (80016e0 <HAL_I2C_MspInit+0xf4>)
 800165e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001660:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001668:	4b1f      	ldr	r3, [pc, #124]	@ (80016e8 <HAL_I2C_MspInit+0xfc>)
 800166a:	4a20      	ldr	r2, [pc, #128]	@ (80016ec <HAL_I2C_MspInit+0x100>)
 800166c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800166e:	4b1e      	ldr	r3, [pc, #120]	@ (80016e8 <HAL_I2C_MspInit+0xfc>)
 8001670:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001674:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001676:	4b1c      	ldr	r3, [pc, #112]	@ (80016e8 <HAL_I2C_MspInit+0xfc>)
 8001678:	2200      	movs	r2, #0
 800167a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800167c:	4b1a      	ldr	r3, [pc, #104]	@ (80016e8 <HAL_I2C_MspInit+0xfc>)
 800167e:	2200      	movs	r2, #0
 8001680:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001682:	4b19      	ldr	r3, [pc, #100]	@ (80016e8 <HAL_I2C_MspInit+0xfc>)
 8001684:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001688:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800168a:	4b17      	ldr	r3, [pc, #92]	@ (80016e8 <HAL_I2C_MspInit+0xfc>)
 800168c:	2200      	movs	r2, #0
 800168e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001690:	4b15      	ldr	r3, [pc, #84]	@ (80016e8 <HAL_I2C_MspInit+0xfc>)
 8001692:	2200      	movs	r2, #0
 8001694:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001696:	4b14      	ldr	r3, [pc, #80]	@ (80016e8 <HAL_I2C_MspInit+0xfc>)
 8001698:	2200      	movs	r2, #0
 800169a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800169c:	4b12      	ldr	r3, [pc, #72]	@ (80016e8 <HAL_I2C_MspInit+0xfc>)
 800169e:	2200      	movs	r2, #0
 80016a0:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016a2:	4b11      	ldr	r3, [pc, #68]	@ (80016e8 <HAL_I2C_MspInit+0xfc>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80016a8:	480f      	ldr	r0, [pc, #60]	@ (80016e8 <HAL_I2C_MspInit+0xfc>)
 80016aa:	f000 fbb3 	bl	8001e14 <HAL_DMA_Init>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 80016b4:	f7ff ff6c 	bl	8001590 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a0b      	ldr	r2, [pc, #44]	@ (80016e8 <HAL_I2C_MspInit+0xfc>)
 80016bc:	639a      	str	r2, [r3, #56]	@ 0x38
 80016be:	4a0a      	ldr	r2, [pc, #40]	@ (80016e8 <HAL_I2C_MspInit+0xfc>)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80016c4:	2200      	movs	r2, #0
 80016c6:	2100      	movs	r1, #0
 80016c8:	201f      	movs	r0, #31
 80016ca:	f000 fb6c 	bl	8001da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80016ce:	201f      	movs	r0, #31
 80016d0:	f000 fb85 	bl	8001dde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016d4:	bf00      	nop
 80016d6:	3728      	adds	r7, #40	@ 0x28
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40005400 	.word	0x40005400
 80016e0:	40023800 	.word	0x40023800
 80016e4:	40020400 	.word	0x40020400
 80016e8:	20000248 	.word	0x20000248
 80016ec:	40026010 	.word	0x40026010

080016f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a0e      	ldr	r2, [pc, #56]	@ (8001738 <HAL_TIM_Base_MspInit+0x48>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d115      	bne.n	800172e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	4b0d      	ldr	r3, [pc, #52]	@ (800173c <HAL_TIM_Base_MspInit+0x4c>)
 8001708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800170a:	4a0c      	ldr	r2, [pc, #48]	@ (800173c <HAL_TIM_Base_MspInit+0x4c>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	6453      	str	r3, [r2, #68]	@ 0x44
 8001712:	4b0a      	ldr	r3, [pc, #40]	@ (800173c <HAL_TIM_Base_MspInit+0x4c>)
 8001714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800171e:	2200      	movs	r2, #0
 8001720:	2100      	movs	r1, #0
 8001722:	2019      	movs	r0, #25
 8001724:	f000 fb3f 	bl	8001da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001728:	2019      	movs	r0, #25
 800172a:	f000 fb58 	bl	8001dde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800172e:	bf00      	nop
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40010000 	.word	0x40010000
 800173c:	40023800 	.word	0x40023800

08001740 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b08a      	sub	sp, #40	@ 0x28
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001748:	f107 0314 	add.w	r3, r7, #20
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	60da      	str	r2, [r3, #12]
 8001756:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a34      	ldr	r2, [pc, #208]	@ (8001830 <HAL_UART_MspInit+0xf0>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d161      	bne.n	8001826 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	613b      	str	r3, [r7, #16]
 8001766:	4b33      	ldr	r3, [pc, #204]	@ (8001834 <HAL_UART_MspInit+0xf4>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176a:	4a32      	ldr	r2, [pc, #200]	@ (8001834 <HAL_UART_MspInit+0xf4>)
 800176c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001770:	6413      	str	r3, [r2, #64]	@ 0x40
 8001772:	4b30      	ldr	r3, [pc, #192]	@ (8001834 <HAL_UART_MspInit+0xf4>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800177a:	613b      	str	r3, [r7, #16]
 800177c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	4b2c      	ldr	r3, [pc, #176]	@ (8001834 <HAL_UART_MspInit+0xf4>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001786:	4a2b      	ldr	r2, [pc, #172]	@ (8001834 <HAL_UART_MspInit+0xf4>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	6313      	str	r3, [r2, #48]	@ 0x30
 800178e:	4b29      	ldr	r3, [pc, #164]	@ (8001834 <HAL_UART_MspInit+0xf4>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800179a:	230c      	movs	r3, #12
 800179c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179e:	2302      	movs	r3, #2
 80017a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a6:	2300      	movs	r3, #0
 80017a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017aa:	2307      	movs	r3, #7
 80017ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ae:	f107 0314 	add.w	r3, r7, #20
 80017b2:	4619      	mov	r1, r3
 80017b4:	4820      	ldr	r0, [pc, #128]	@ (8001838 <HAL_UART_MspInit+0xf8>)
 80017b6:	f000 ff49 	bl	800264c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80017ba:	4b20      	ldr	r3, [pc, #128]	@ (800183c <HAL_UART_MspInit+0xfc>)
 80017bc:	4a20      	ldr	r2, [pc, #128]	@ (8001840 <HAL_UART_MspInit+0x100>)
 80017be:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80017c0:	4b1e      	ldr	r3, [pc, #120]	@ (800183c <HAL_UART_MspInit+0xfc>)
 80017c2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80017c6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017c8:	4b1c      	ldr	r3, [pc, #112]	@ (800183c <HAL_UART_MspInit+0xfc>)
 80017ca:	2240      	movs	r2, #64	@ 0x40
 80017cc:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017ce:	4b1b      	ldr	r3, [pc, #108]	@ (800183c <HAL_UART_MspInit+0xfc>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017d4:	4b19      	ldr	r3, [pc, #100]	@ (800183c <HAL_UART_MspInit+0xfc>)
 80017d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017da:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017dc:	4b17      	ldr	r3, [pc, #92]	@ (800183c <HAL_UART_MspInit+0xfc>)
 80017de:	2200      	movs	r2, #0
 80017e0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017e2:	4b16      	ldr	r3, [pc, #88]	@ (800183c <HAL_UART_MspInit+0xfc>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80017e8:	4b14      	ldr	r3, [pc, #80]	@ (800183c <HAL_UART_MspInit+0xfc>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80017ee:	4b13      	ldr	r3, [pc, #76]	@ (800183c <HAL_UART_MspInit+0xfc>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017f4:	4b11      	ldr	r3, [pc, #68]	@ (800183c <HAL_UART_MspInit+0xfc>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80017fa:	4810      	ldr	r0, [pc, #64]	@ (800183c <HAL_UART_MspInit+0xfc>)
 80017fc:	f000 fb0a 	bl	8001e14 <HAL_DMA_Init>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001806:	f7ff fec3 	bl	8001590 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a0b      	ldr	r2, [pc, #44]	@ (800183c <HAL_UART_MspInit+0xfc>)
 800180e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001810:	4a0a      	ldr	r2, [pc, #40]	@ (800183c <HAL_UART_MspInit+0xfc>)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001816:	2200      	movs	r2, #0
 8001818:	2100      	movs	r1, #0
 800181a:	2026      	movs	r0, #38	@ 0x26
 800181c:	f000 fac3 	bl	8001da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001820:	2026      	movs	r0, #38	@ 0x26
 8001822:	f000 fadc 	bl	8001dde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001826:	bf00      	nop
 8001828:	3728      	adds	r7, #40	@ 0x28
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40004400 	.word	0x40004400
 8001834:	40023800 	.word	0x40023800
 8001838:	40020000 	.word	0x40020000
 800183c:	20000334 	.word	0x20000334
 8001840:	400260a0 	.word	0x400260a0

08001844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001848:	bf00      	nop
 800184a:	e7fd      	b.n	8001848 <NMI_Handler+0x4>

0800184c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001850:	bf00      	nop
 8001852:	e7fd      	b.n	8001850 <HardFault_Handler+0x4>

08001854 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001858:	bf00      	nop
 800185a:	e7fd      	b.n	8001858 <MemManage_Handler+0x4>

0800185c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001860:	bf00      	nop
 8001862:	e7fd      	b.n	8001860 <BusFault_Handler+0x4>

08001864 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001868:	bf00      	nop
 800186a:	e7fd      	b.n	8001868 <UsageFault_Handler+0x4>

0800186c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800189a:	f000 f989 	bl	8001bb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
	...

080018a4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80018a8:	4802      	ldr	r0, [pc, #8]	@ (80018b4 <DMA1_Stream0_IRQHandler+0x10>)
 80018aa:	f000 fc4b 	bl	8002144 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000248 	.word	0x20000248

080018b8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80018bc:	4802      	ldr	r0, [pc, #8]	@ (80018c8 <DMA1_Stream6_IRQHandler+0x10>)
 80018be:	f000 fc41 	bl	8002144 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	20000334 	.word	0x20000334

080018cc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018d0:	4802      	ldr	r0, [pc, #8]	@ (80018dc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80018d2:	f003 ffcb 	bl	800586c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	200002a8 	.word	0x200002a8

080018e0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80018e4:	4802      	ldr	r0, [pc, #8]	@ (80018f0 <I2C1_EV_IRQHandler+0x10>)
 80018e6:	f001 fbc1 	bl	800306c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	200001f4 	.word	0x200001f4

080018f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018f8:	4802      	ldr	r0, [pc, #8]	@ (8001904 <USART2_IRQHandler+0x10>)
 80018fa:	f004 fca9 	bl	8006250 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	200002f0 	.word	0x200002f0

08001908 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  return 1;
 800190c:	2301      	movs	r3, #1
}
 800190e:	4618      	mov	r0, r3
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <_kill>:

int _kill(int pid, int sig)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001922:	f006 fa85 	bl	8007e30 <__errno>
 8001926:	4603      	mov	r3, r0
 8001928:	2216      	movs	r2, #22
 800192a:	601a      	str	r2, [r3, #0]
  return -1;
 800192c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001930:	4618      	mov	r0, r3
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <_exit>:

void _exit (int status)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001940:	f04f 31ff 	mov.w	r1, #4294967295
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f7ff ffe7 	bl	8001918 <_kill>
  while (1) {}    /* Make sure we hang here */
 800194a:	bf00      	nop
 800194c:	e7fd      	b.n	800194a <_exit+0x12>

0800194e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b086      	sub	sp, #24
 8001952:	af00      	add	r7, sp, #0
 8001954:	60f8      	str	r0, [r7, #12]
 8001956:	60b9      	str	r1, [r7, #8]
 8001958:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]
 800195e:	e00a      	b.n	8001976 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001960:	f3af 8000 	nop.w
 8001964:	4601      	mov	r1, r0
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	1c5a      	adds	r2, r3, #1
 800196a:	60ba      	str	r2, [r7, #8]
 800196c:	b2ca      	uxtb	r2, r1
 800196e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	3301      	adds	r3, #1
 8001974:	617b      	str	r3, [r7, #20]
 8001976:	697a      	ldr	r2, [r7, #20]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	429a      	cmp	r2, r3
 800197c:	dbf0      	blt.n	8001960 <_read+0x12>
  }

  return len;
 800197e:	687b      	ldr	r3, [r7, #4]
}
 8001980:	4618      	mov	r0, r3
 8001982:	3718      	adds	r7, #24
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]
 8001998:	e009      	b.n	80019ae <_write+0x26>
  {
    __io_putchar(*ptr++);
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	1c5a      	adds	r2, r3, #1
 800199e:	60ba      	str	r2, [r7, #8]
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	3301      	adds	r3, #1
 80019ac:	617b      	str	r3, [r7, #20]
 80019ae:	697a      	ldr	r2, [r7, #20]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	dbf1      	blt.n	800199a <_write+0x12>
  }
  return len;
 80019b6:	687b      	ldr	r3, [r7, #4]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3718      	adds	r7, #24
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <_close>:

int _close(int file)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019e8:	605a      	str	r2, [r3, #4]
  return 0;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <_isatty>:

int _isatty(int file)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a00:	2301      	movs	r3, #1
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b085      	sub	sp, #20
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	60f8      	str	r0, [r7, #12]
 8001a16:	60b9      	str	r1, [r7, #8]
 8001a18:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a30:	4a14      	ldr	r2, [pc, #80]	@ (8001a84 <_sbrk+0x5c>)
 8001a32:	4b15      	ldr	r3, [pc, #84]	@ (8001a88 <_sbrk+0x60>)
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a3c:	4b13      	ldr	r3, [pc, #76]	@ (8001a8c <_sbrk+0x64>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d102      	bne.n	8001a4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a44:	4b11      	ldr	r3, [pc, #68]	@ (8001a8c <_sbrk+0x64>)
 8001a46:	4a12      	ldr	r2, [pc, #72]	@ (8001a90 <_sbrk+0x68>)
 8001a48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a4a:	4b10      	ldr	r3, [pc, #64]	@ (8001a8c <_sbrk+0x64>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4413      	add	r3, r2
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d207      	bcs.n	8001a68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a58:	f006 f9ea 	bl	8007e30 <__errno>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	220c      	movs	r2, #12
 8001a60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a62:	f04f 33ff 	mov.w	r3, #4294967295
 8001a66:	e009      	b.n	8001a7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a68:	4b08      	ldr	r3, [pc, #32]	@ (8001a8c <_sbrk+0x64>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a6e:	4b07      	ldr	r3, [pc, #28]	@ (8001a8c <_sbrk+0x64>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4413      	add	r3, r2
 8001a76:	4a05      	ldr	r2, [pc, #20]	@ (8001a8c <_sbrk+0x64>)
 8001a78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3718      	adds	r7, #24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20018000 	.word	0x20018000
 8001a88:	00000400 	.word	0x00000400
 8001a8c:	200003b0 	.word	0x200003b0
 8001a90:	20000508 	.word	0x20000508

08001a94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a98:	4b06      	ldr	r3, [pc, #24]	@ (8001ab4 <SystemInit+0x20>)
 8001a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a9e:	4a05      	ldr	r2, [pc, #20]	@ (8001ab4 <SystemInit+0x20>)
 8001aa0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001aa4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	e000ed00 	.word	0xe000ed00

08001ab8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ab8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001af0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001abc:	480d      	ldr	r0, [pc, #52]	@ (8001af4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001abe:	490e      	ldr	r1, [pc, #56]	@ (8001af8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ac0:	4a0e      	ldr	r2, [pc, #56]	@ (8001afc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ac2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ac4:	e002      	b.n	8001acc <LoopCopyDataInit>

08001ac6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ac6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ac8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aca:	3304      	adds	r3, #4

08001acc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001acc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ace:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ad0:	d3f9      	bcc.n	8001ac6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ad2:	4a0b      	ldr	r2, [pc, #44]	@ (8001b00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ad4:	4c0b      	ldr	r4, [pc, #44]	@ (8001b04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ad6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ad8:	e001      	b.n	8001ade <LoopFillZerobss>

08001ada <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ada:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001adc:	3204      	adds	r2, #4

08001ade <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ade:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ae0:	d3fb      	bcc.n	8001ada <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ae2:	f7ff ffd7 	bl	8001a94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ae6:	f006 f9a9 	bl	8007e3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001aea:	f7ff fac1 	bl	8001070 <main>
  bx  lr    
 8001aee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001af0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001af4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001af8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001afc:	0800a348 	.word	0x0800a348
  ldr r2, =_sbss
 8001b00:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001b04:	20000504 	.word	0x20000504

08001b08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b08:	e7fe      	b.n	8001b08 <ADC_IRQHandler>
	...

08001b0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b10:	4b0e      	ldr	r3, [pc, #56]	@ (8001b4c <HAL_Init+0x40>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a0d      	ldr	r2, [pc, #52]	@ (8001b4c <HAL_Init+0x40>)
 8001b16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b4c <HAL_Init+0x40>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a0a      	ldr	r2, [pc, #40]	@ (8001b4c <HAL_Init+0x40>)
 8001b22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b28:	4b08      	ldr	r3, [pc, #32]	@ (8001b4c <HAL_Init+0x40>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a07      	ldr	r2, [pc, #28]	@ (8001b4c <HAL_Init+0x40>)
 8001b2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b34:	2003      	movs	r0, #3
 8001b36:	f000 f92b 	bl	8001d90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	f000 f808 	bl	8001b50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b40:	f7ff fd2c 	bl	800159c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40023c00 	.word	0x40023c00

08001b50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b58:	4b12      	ldr	r3, [pc, #72]	@ (8001ba4 <HAL_InitTick+0x54>)
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	4b12      	ldr	r3, [pc, #72]	@ (8001ba8 <HAL_InitTick+0x58>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	4619      	mov	r1, r3
 8001b62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f000 f943 	bl	8001dfa <HAL_SYSTICK_Config>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e00e      	b.n	8001b9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2b0f      	cmp	r3, #15
 8001b82:	d80a      	bhi.n	8001b9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b84:	2200      	movs	r2, #0
 8001b86:	6879      	ldr	r1, [r7, #4]
 8001b88:	f04f 30ff 	mov.w	r0, #4294967295
 8001b8c:	f000 f90b 	bl	8001da6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b90:	4a06      	ldr	r2, [pc, #24]	@ (8001bac <HAL_InitTick+0x5c>)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
 8001b98:	e000      	b.n	8001b9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20000004 	.word	0x20000004
 8001ba8:	2000000c 	.word	0x2000000c
 8001bac:	20000008 	.word	0x20000008

08001bb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bb4:	4b06      	ldr	r3, [pc, #24]	@ (8001bd0 <HAL_IncTick+0x20>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	461a      	mov	r2, r3
 8001bba:	4b06      	ldr	r3, [pc, #24]	@ (8001bd4 <HAL_IncTick+0x24>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	4a04      	ldr	r2, [pc, #16]	@ (8001bd4 <HAL_IncTick+0x24>)
 8001bc2:	6013      	str	r3, [r2, #0]
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	2000000c 	.word	0x2000000c
 8001bd4:	200003b4 	.word	0x200003b4

08001bd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  return uwTick;
 8001bdc:	4b03      	ldr	r3, [pc, #12]	@ (8001bec <HAL_GetTick+0x14>)
 8001bde:	681b      	ldr	r3, [r3, #0]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	200003b4 	.word	0x200003b4

08001bf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c00:	4b0c      	ldr	r3, [pc, #48]	@ (8001c34 <__NVIC_SetPriorityGrouping+0x44>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c06:	68ba      	ldr	r2, [r7, #8]
 8001c08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c22:	4a04      	ldr	r2, [pc, #16]	@ (8001c34 <__NVIC_SetPriorityGrouping+0x44>)
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	60d3      	str	r3, [r2, #12]
}
 8001c28:	bf00      	nop
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	e000ed00 	.word	0xe000ed00

08001c38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c3c:	4b04      	ldr	r3, [pc, #16]	@ (8001c50 <__NVIC_GetPriorityGrouping+0x18>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	0a1b      	lsrs	r3, r3, #8
 8001c42:	f003 0307 	and.w	r3, r3, #7
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	e000ed00 	.word	0xe000ed00

08001c54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	db0b      	blt.n	8001c7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c66:	79fb      	ldrb	r3, [r7, #7]
 8001c68:	f003 021f 	and.w	r2, r3, #31
 8001c6c:	4907      	ldr	r1, [pc, #28]	@ (8001c8c <__NVIC_EnableIRQ+0x38>)
 8001c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c72:	095b      	lsrs	r3, r3, #5
 8001c74:	2001      	movs	r0, #1
 8001c76:	fa00 f202 	lsl.w	r2, r0, r2
 8001c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	e000e100 	.word	0xe000e100

08001c90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	6039      	str	r1, [r7, #0]
 8001c9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	db0a      	blt.n	8001cba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	b2da      	uxtb	r2, r3
 8001ca8:	490c      	ldr	r1, [pc, #48]	@ (8001cdc <__NVIC_SetPriority+0x4c>)
 8001caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cae:	0112      	lsls	r2, r2, #4
 8001cb0:	b2d2      	uxtb	r2, r2
 8001cb2:	440b      	add	r3, r1
 8001cb4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cb8:	e00a      	b.n	8001cd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	4908      	ldr	r1, [pc, #32]	@ (8001ce0 <__NVIC_SetPriority+0x50>)
 8001cc0:	79fb      	ldrb	r3, [r7, #7]
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	3b04      	subs	r3, #4
 8001cc8:	0112      	lsls	r2, r2, #4
 8001cca:	b2d2      	uxtb	r2, r2
 8001ccc:	440b      	add	r3, r1
 8001cce:	761a      	strb	r2, [r3, #24]
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	e000e100 	.word	0xe000e100
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b089      	sub	sp, #36	@ 0x24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	f1c3 0307 	rsb	r3, r3, #7
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	bf28      	it	cs
 8001d02:	2304      	movcs	r3, #4
 8001d04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	3304      	adds	r3, #4
 8001d0a:	2b06      	cmp	r3, #6
 8001d0c:	d902      	bls.n	8001d14 <NVIC_EncodePriority+0x30>
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	3b03      	subs	r3, #3
 8001d12:	e000      	b.n	8001d16 <NVIC_EncodePriority+0x32>
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d18:	f04f 32ff 	mov.w	r2, #4294967295
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	43da      	mvns	r2, r3
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	401a      	ands	r2, r3
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	fa01 f303 	lsl.w	r3, r1, r3
 8001d36:	43d9      	mvns	r1, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d3c:	4313      	orrs	r3, r2
         );
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3724      	adds	r7, #36	@ 0x24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
	...

08001d4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3b01      	subs	r3, #1
 8001d58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d5c:	d301      	bcc.n	8001d62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e00f      	b.n	8001d82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d62:	4a0a      	ldr	r2, [pc, #40]	@ (8001d8c <SysTick_Config+0x40>)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3b01      	subs	r3, #1
 8001d68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d6a:	210f      	movs	r1, #15
 8001d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d70:	f7ff ff8e 	bl	8001c90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d74:	4b05      	ldr	r3, [pc, #20]	@ (8001d8c <SysTick_Config+0x40>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d7a:	4b04      	ldr	r3, [pc, #16]	@ (8001d8c <SysTick_Config+0x40>)
 8001d7c:	2207      	movs	r2, #7
 8001d7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	e000e010 	.word	0xe000e010

08001d90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f7ff ff29 	bl	8001bf0 <__NVIC_SetPriorityGrouping>
}
 8001d9e:	bf00      	nop
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b086      	sub	sp, #24
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	4603      	mov	r3, r0
 8001dae:	60b9      	str	r1, [r7, #8]
 8001db0:	607a      	str	r2, [r7, #4]
 8001db2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001db4:	2300      	movs	r3, #0
 8001db6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001db8:	f7ff ff3e 	bl	8001c38 <__NVIC_GetPriorityGrouping>
 8001dbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	68b9      	ldr	r1, [r7, #8]
 8001dc2:	6978      	ldr	r0, [r7, #20]
 8001dc4:	f7ff ff8e 	bl	8001ce4 <NVIC_EncodePriority>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dce:	4611      	mov	r1, r2
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff ff5d 	bl	8001c90 <__NVIC_SetPriority>
}
 8001dd6:	bf00      	nop
 8001dd8:	3718      	adds	r7, #24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b082      	sub	sp, #8
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	4603      	mov	r3, r0
 8001de6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff ff31 	bl	8001c54 <__NVIC_EnableIRQ>
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b082      	sub	sp, #8
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7ff ffa2 	bl	8001d4c <SysTick_Config>
 8001e08:	4603      	mov	r3, r0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
	...

08001e14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e20:	f7ff feda 	bl	8001bd8 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d101      	bne.n	8001e30 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e099      	b.n	8001f64 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2202      	movs	r2, #2
 8001e34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f022 0201 	bic.w	r2, r2, #1
 8001e4e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e50:	e00f      	b.n	8001e72 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e52:	f7ff fec1 	bl	8001bd8 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b05      	cmp	r3, #5
 8001e5e:	d908      	bls.n	8001e72 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2220      	movs	r2, #32
 8001e64:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2203      	movs	r2, #3
 8001e6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e078      	b.n	8001f64 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1e8      	bne.n	8001e52 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	4b38      	ldr	r3, [pc, #224]	@ (8001f6c <HAL_DMA_Init+0x158>)
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685a      	ldr	r2, [r3, #4]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	691b      	ldr	r3, [r3, #16]
 8001ea4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eaa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eb6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a1b      	ldr	r3, [r3, #32]
 8001ebc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ebe:	697a      	ldr	r2, [r7, #20]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec8:	2b04      	cmp	r3, #4
 8001eca:	d107      	bne.n	8001edc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	697a      	ldr	r2, [r7, #20]
 8001ee2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	f023 0307 	bic.w	r3, r3, #7
 8001ef2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef8:	697a      	ldr	r2, [r7, #20]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f02:	2b04      	cmp	r3, #4
 8001f04:	d117      	bne.n	8001f36 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f0a:	697a      	ldr	r2, [r7, #20]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d00e      	beq.n	8001f36 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f000 fb1b 	bl	8002554 <DMA_CheckFifoParam>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d008      	beq.n	8001f36 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2240      	movs	r2, #64	@ 0x40
 8001f28:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001f32:	2301      	movs	r3, #1
 8001f34:	e016      	b.n	8001f64 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	697a      	ldr	r2, [r7, #20]
 8001f3c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 fad2 	bl	80024e8 <DMA_CalcBaseAndBitshift>
 8001f44:	4603      	mov	r3, r0
 8001f46:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f4c:	223f      	movs	r2, #63	@ 0x3f
 8001f4e:	409a      	lsls	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3718      	adds	r7, #24
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	f010803f 	.word	0xf010803f

08001f70 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
 8001f7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f86:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d101      	bne.n	8001f96 <HAL_DMA_Start_IT+0x26>
 8001f92:	2302      	movs	r3, #2
 8001f94:	e040      	b.n	8002018 <HAL_DMA_Start_IT+0xa8>
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d12f      	bne.n	800200a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2202      	movs	r2, #2
 8001fae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	68b9      	ldr	r1, [r7, #8]
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	f000 fa64 	bl	800248c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fc8:	223f      	movs	r2, #63	@ 0x3f
 8001fca:	409a      	lsls	r2, r3
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f042 0216 	orr.w	r2, r2, #22
 8001fde:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d007      	beq.n	8001ff8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f042 0208 	orr.w	r2, r2, #8
 8001ff6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f042 0201 	orr.w	r2, r2, #1
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	e005      	b.n	8002016 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002012:	2302      	movs	r3, #2
 8002014:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002016:	7dfb      	ldrb	r3, [r7, #23]
}
 8002018:	4618      	mov	r0, r3
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800202c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800202e:	f7ff fdd3 	bl	8001bd8 <HAL_GetTick>
 8002032:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800203a:	b2db      	uxtb	r3, r3
 800203c:	2b02      	cmp	r3, #2
 800203e:	d008      	beq.n	8002052 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2280      	movs	r2, #128	@ 0x80
 8002044:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e052      	b.n	80020f8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f022 0216 	bic.w	r2, r2, #22
 8002060:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	695a      	ldr	r2, [r3, #20]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002070:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002076:	2b00      	cmp	r3, #0
 8002078:	d103      	bne.n	8002082 <HAL_DMA_Abort+0x62>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800207e:	2b00      	cmp	r3, #0
 8002080:	d007      	beq.n	8002092 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 0208 	bic.w	r2, r2, #8
 8002090:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 0201 	bic.w	r2, r2, #1
 80020a0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020a2:	e013      	b.n	80020cc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020a4:	f7ff fd98 	bl	8001bd8 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b05      	cmp	r3, #5
 80020b0:	d90c      	bls.n	80020cc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2220      	movs	r2, #32
 80020b6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2203      	movs	r2, #3
 80020bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e015      	b.n	80020f8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1e4      	bne.n	80020a4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020de:	223f      	movs	r2, #63	@ 0x3f
 80020e0:	409a      	lsls	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800210e:	b2db      	uxtb	r3, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d004      	beq.n	800211e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2280      	movs	r2, #128	@ 0x80
 8002118:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e00c      	b.n	8002138 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2205      	movs	r2, #5
 8002122:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 0201 	bic.w	r2, r2, #1
 8002134:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800214c:	2300      	movs	r3, #0
 800214e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002150:	4b8e      	ldr	r3, [pc, #568]	@ (800238c <HAL_DMA_IRQHandler+0x248>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a8e      	ldr	r2, [pc, #568]	@ (8002390 <HAL_DMA_IRQHandler+0x24c>)
 8002156:	fba2 2303 	umull	r2, r3, r2, r3
 800215a:	0a9b      	lsrs	r3, r3, #10
 800215c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002162:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800216e:	2208      	movs	r2, #8
 8002170:	409a      	lsls	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	4013      	ands	r3, r2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d01a      	beq.n	80021b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	2b00      	cmp	r3, #0
 8002186:	d013      	beq.n	80021b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 0204 	bic.w	r2, r2, #4
 8002196:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800219c:	2208      	movs	r2, #8
 800219e:	409a      	lsls	r2, r3
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021a8:	f043 0201 	orr.w	r2, r3, #1
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021b4:	2201      	movs	r2, #1
 80021b6:	409a      	lsls	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	4013      	ands	r3, r2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d012      	beq.n	80021e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00b      	beq.n	80021e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021d2:	2201      	movs	r2, #1
 80021d4:	409a      	lsls	r2, r3
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021de:	f043 0202 	orr.w	r2, r3, #2
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ea:	2204      	movs	r2, #4
 80021ec:	409a      	lsls	r2, r3
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	4013      	ands	r3, r2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d012      	beq.n	800221c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d00b      	beq.n	800221c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002208:	2204      	movs	r2, #4
 800220a:	409a      	lsls	r2, r3
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002214:	f043 0204 	orr.w	r2, r3, #4
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002220:	2210      	movs	r2, #16
 8002222:	409a      	lsls	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	4013      	ands	r3, r2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d043      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0308 	and.w	r3, r3, #8
 8002236:	2b00      	cmp	r3, #0
 8002238:	d03c      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800223e:	2210      	movs	r2, #16
 8002240:	409a      	lsls	r2, r3
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d018      	beq.n	8002286 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d108      	bne.n	8002274 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002266:	2b00      	cmp	r3, #0
 8002268:	d024      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	4798      	blx	r3
 8002272:	e01f      	b.n	80022b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002278:	2b00      	cmp	r3, #0
 800227a:	d01b      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	4798      	blx	r3
 8002284:	e016      	b.n	80022b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002290:	2b00      	cmp	r3, #0
 8002292:	d107      	bne.n	80022a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f022 0208 	bic.w	r2, r2, #8
 80022a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d003      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022b8:	2220      	movs	r2, #32
 80022ba:	409a      	lsls	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	4013      	ands	r3, r2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f000 808f 	beq.w	80023e4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0310 	and.w	r3, r3, #16
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f000 8087 	beq.w	80023e4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022da:	2220      	movs	r2, #32
 80022dc:	409a      	lsls	r2, r3
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b05      	cmp	r3, #5
 80022ec:	d136      	bne.n	800235c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f022 0216 	bic.w	r2, r2, #22
 80022fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	695a      	ldr	r2, [r3, #20]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800230c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002312:	2b00      	cmp	r3, #0
 8002314:	d103      	bne.n	800231e <HAL_DMA_IRQHandler+0x1da>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800231a:	2b00      	cmp	r3, #0
 800231c:	d007      	beq.n	800232e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f022 0208 	bic.w	r2, r2, #8
 800232c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002332:	223f      	movs	r2, #63	@ 0x3f
 8002334:	409a      	lsls	r2, r3
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2201      	movs	r2, #1
 800233e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800234e:	2b00      	cmp	r3, #0
 8002350:	d07e      	beq.n	8002450 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	4798      	blx	r3
        }
        return;
 800235a:	e079      	b.n	8002450 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d01d      	beq.n	80023a6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d10d      	bne.n	8002394 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800237c:	2b00      	cmp	r3, #0
 800237e:	d031      	beq.n	80023e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	4798      	blx	r3
 8002388:	e02c      	b.n	80023e4 <HAL_DMA_IRQHandler+0x2a0>
 800238a:	bf00      	nop
 800238c:	20000004 	.word	0x20000004
 8002390:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002398:	2b00      	cmp	r3, #0
 800239a:	d023      	beq.n	80023e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	4798      	blx	r3
 80023a4:	e01e      	b.n	80023e4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d10f      	bne.n	80023d4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f022 0210 	bic.w	r2, r2, #16
 80023c2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d003      	beq.n	80023e4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d032      	beq.n	8002452 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d022      	beq.n	800243e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2205      	movs	r2, #5
 80023fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f022 0201 	bic.w	r2, r2, #1
 800240e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	3301      	adds	r3, #1
 8002414:	60bb      	str	r3, [r7, #8]
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	429a      	cmp	r2, r3
 800241a:	d307      	bcc.n	800242c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1f2      	bne.n	8002410 <HAL_DMA_IRQHandler+0x2cc>
 800242a:	e000      	b.n	800242e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800242c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002442:	2b00      	cmp	r3, #0
 8002444:	d005      	beq.n	8002452 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	4798      	blx	r3
 800244e:	e000      	b.n	8002452 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002450:	bf00      	nop
    }
  }
}
 8002452:	3718      	adds	r7, #24
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002466:	b2db      	uxtb	r3, r3
}
 8002468:	4618      	mov	r0, r3
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002480:	4618      	mov	r0, r3
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
 8002498:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80024a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	2b40      	cmp	r3, #64	@ 0x40
 80024b8:	d108      	bne.n	80024cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68ba      	ldr	r2, [r7, #8]
 80024c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80024ca:	e007      	b.n	80024dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68ba      	ldr	r2, [r7, #8]
 80024d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	60da      	str	r2, [r3, #12]
}
 80024dc:	bf00      	nop
 80024de:	3714      	adds	r7, #20
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	3b10      	subs	r3, #16
 80024f8:	4a14      	ldr	r2, [pc, #80]	@ (800254c <DMA_CalcBaseAndBitshift+0x64>)
 80024fa:	fba2 2303 	umull	r2, r3, r2, r3
 80024fe:	091b      	lsrs	r3, r3, #4
 8002500:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002502:	4a13      	ldr	r2, [pc, #76]	@ (8002550 <DMA_CalcBaseAndBitshift+0x68>)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	4413      	add	r3, r2
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	461a      	mov	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2b03      	cmp	r3, #3
 8002514:	d909      	bls.n	800252a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800251e:	f023 0303 	bic.w	r3, r3, #3
 8002522:	1d1a      	adds	r2, r3, #4
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	659a      	str	r2, [r3, #88]	@ 0x58
 8002528:	e007      	b.n	800253a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002532:	f023 0303 	bic.w	r3, r3, #3
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800253e:	4618      	mov	r0, r3
 8002540:	3714      	adds	r7, #20
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	aaaaaaab 	.word	0xaaaaaaab
 8002550:	08009fc0 	.word	0x08009fc0

08002554 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800255c:	2300      	movs	r3, #0
 800255e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002564:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d11f      	bne.n	80025ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	2b03      	cmp	r3, #3
 8002572:	d856      	bhi.n	8002622 <DMA_CheckFifoParam+0xce>
 8002574:	a201      	add	r2, pc, #4	@ (adr r2, 800257c <DMA_CheckFifoParam+0x28>)
 8002576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800257a:	bf00      	nop
 800257c:	0800258d 	.word	0x0800258d
 8002580:	0800259f 	.word	0x0800259f
 8002584:	0800258d 	.word	0x0800258d
 8002588:	08002623 	.word	0x08002623
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002590:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d046      	beq.n	8002626 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800259c:	e043      	b.n	8002626 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80025a6:	d140      	bne.n	800262a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025ac:	e03d      	b.n	800262a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025b6:	d121      	bne.n	80025fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	2b03      	cmp	r3, #3
 80025bc:	d837      	bhi.n	800262e <DMA_CheckFifoParam+0xda>
 80025be:	a201      	add	r2, pc, #4	@ (adr r2, 80025c4 <DMA_CheckFifoParam+0x70>)
 80025c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025c4:	080025d5 	.word	0x080025d5
 80025c8:	080025db 	.word	0x080025db
 80025cc:	080025d5 	.word	0x080025d5
 80025d0:	080025ed 	.word	0x080025ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	73fb      	strb	r3, [r7, #15]
      break;
 80025d8:	e030      	b.n	800263c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d025      	beq.n	8002632 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025ea:	e022      	b.n	8002632 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025f0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80025f4:	d11f      	bne.n	8002636 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025fa:	e01c      	b.n	8002636 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d903      	bls.n	800260a <DMA_CheckFifoParam+0xb6>
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	2b03      	cmp	r3, #3
 8002606:	d003      	beq.n	8002610 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002608:	e018      	b.n	800263c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	73fb      	strb	r3, [r7, #15]
      break;
 800260e:	e015      	b.n	800263c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002614:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00e      	beq.n	800263a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	73fb      	strb	r3, [r7, #15]
      break;
 8002620:	e00b      	b.n	800263a <DMA_CheckFifoParam+0xe6>
      break;
 8002622:	bf00      	nop
 8002624:	e00a      	b.n	800263c <DMA_CheckFifoParam+0xe8>
      break;
 8002626:	bf00      	nop
 8002628:	e008      	b.n	800263c <DMA_CheckFifoParam+0xe8>
      break;
 800262a:	bf00      	nop
 800262c:	e006      	b.n	800263c <DMA_CheckFifoParam+0xe8>
      break;
 800262e:	bf00      	nop
 8002630:	e004      	b.n	800263c <DMA_CheckFifoParam+0xe8>
      break;
 8002632:	bf00      	nop
 8002634:	e002      	b.n	800263c <DMA_CheckFifoParam+0xe8>
      break;   
 8002636:	bf00      	nop
 8002638:	e000      	b.n	800263c <DMA_CheckFifoParam+0xe8>
      break;
 800263a:	bf00      	nop
    }
  } 
  
  return status; 
 800263c:	7bfb      	ldrb	r3, [r7, #15]
}
 800263e:	4618      	mov	r0, r3
 8002640:	3714      	adds	r7, #20
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop

0800264c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800264c:	b480      	push	{r7}
 800264e:	b089      	sub	sp, #36	@ 0x24
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002656:	2300      	movs	r3, #0
 8002658:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800265a:	2300      	movs	r3, #0
 800265c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800265e:	2300      	movs	r3, #0
 8002660:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002662:	2300      	movs	r3, #0
 8002664:	61fb      	str	r3, [r7, #28]
 8002666:	e159      	b.n	800291c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002668:	2201      	movs	r2, #1
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	4013      	ands	r3, r2
 800267a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	429a      	cmp	r2, r3
 8002682:	f040 8148 	bne.w	8002916 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f003 0303 	and.w	r3, r3, #3
 800268e:	2b01      	cmp	r3, #1
 8002690:	d005      	beq.n	800269e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800269a:	2b02      	cmp	r3, #2
 800269c:	d130      	bne.n	8002700 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	2203      	movs	r2, #3
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	43db      	mvns	r3, r3
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	4013      	ands	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	68da      	ldr	r2, [r3, #12]
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026d4:	2201      	movs	r2, #1
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	43db      	mvns	r3, r3
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	4013      	ands	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	091b      	lsrs	r3, r3, #4
 80026ea:	f003 0201 	and.w	r2, r3, #1
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f003 0303 	and.w	r3, r3, #3
 8002708:	2b03      	cmp	r3, #3
 800270a:	d017      	beq.n	800273c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	2203      	movs	r2, #3
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	43db      	mvns	r3, r3
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4013      	ands	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	689a      	ldr	r2, [r3, #8]
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4313      	orrs	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f003 0303 	and.w	r3, r3, #3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d123      	bne.n	8002790 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	08da      	lsrs	r2, r3, #3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	3208      	adds	r2, #8
 8002750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002754:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	f003 0307 	and.w	r3, r3, #7
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	220f      	movs	r2, #15
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	43db      	mvns	r3, r3
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4013      	ands	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	691a      	ldr	r2, [r3, #16]
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f003 0307 	and.w	r3, r3, #7
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	4313      	orrs	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	08da      	lsrs	r2, r3, #3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	3208      	adds	r2, #8
 800278a:	69b9      	ldr	r1, [r7, #24]
 800278c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	2203      	movs	r2, #3
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	43db      	mvns	r3, r3
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	4013      	ands	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f003 0203 	and.w	r2, r3, #3
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 80a2 	beq.w	8002916 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027d2:	2300      	movs	r3, #0
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	4b57      	ldr	r3, [pc, #348]	@ (8002934 <HAL_GPIO_Init+0x2e8>)
 80027d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027da:	4a56      	ldr	r2, [pc, #344]	@ (8002934 <HAL_GPIO_Init+0x2e8>)
 80027dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80027e2:	4b54      	ldr	r3, [pc, #336]	@ (8002934 <HAL_GPIO_Init+0x2e8>)
 80027e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027ea:	60fb      	str	r3, [r7, #12]
 80027ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027ee:	4a52      	ldr	r2, [pc, #328]	@ (8002938 <HAL_GPIO_Init+0x2ec>)
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	089b      	lsrs	r3, r3, #2
 80027f4:	3302      	adds	r3, #2
 80027f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	f003 0303 	and.w	r3, r3, #3
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	220f      	movs	r2, #15
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	43db      	mvns	r3, r3
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	4013      	ands	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a49      	ldr	r2, [pc, #292]	@ (800293c <HAL_GPIO_Init+0x2f0>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d019      	beq.n	800284e <HAL_GPIO_Init+0x202>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a48      	ldr	r2, [pc, #288]	@ (8002940 <HAL_GPIO_Init+0x2f4>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d013      	beq.n	800284a <HAL_GPIO_Init+0x1fe>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a47      	ldr	r2, [pc, #284]	@ (8002944 <HAL_GPIO_Init+0x2f8>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d00d      	beq.n	8002846 <HAL_GPIO_Init+0x1fa>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a46      	ldr	r2, [pc, #280]	@ (8002948 <HAL_GPIO_Init+0x2fc>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d007      	beq.n	8002842 <HAL_GPIO_Init+0x1f6>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a45      	ldr	r2, [pc, #276]	@ (800294c <HAL_GPIO_Init+0x300>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d101      	bne.n	800283e <HAL_GPIO_Init+0x1f2>
 800283a:	2304      	movs	r3, #4
 800283c:	e008      	b.n	8002850 <HAL_GPIO_Init+0x204>
 800283e:	2307      	movs	r3, #7
 8002840:	e006      	b.n	8002850 <HAL_GPIO_Init+0x204>
 8002842:	2303      	movs	r3, #3
 8002844:	e004      	b.n	8002850 <HAL_GPIO_Init+0x204>
 8002846:	2302      	movs	r3, #2
 8002848:	e002      	b.n	8002850 <HAL_GPIO_Init+0x204>
 800284a:	2301      	movs	r3, #1
 800284c:	e000      	b.n	8002850 <HAL_GPIO_Init+0x204>
 800284e:	2300      	movs	r3, #0
 8002850:	69fa      	ldr	r2, [r7, #28]
 8002852:	f002 0203 	and.w	r2, r2, #3
 8002856:	0092      	lsls	r2, r2, #2
 8002858:	4093      	lsls	r3, r2
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	4313      	orrs	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002860:	4935      	ldr	r1, [pc, #212]	@ (8002938 <HAL_GPIO_Init+0x2ec>)
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	089b      	lsrs	r3, r3, #2
 8002866:	3302      	adds	r3, #2
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800286e:	4b38      	ldr	r3, [pc, #224]	@ (8002950 <HAL_GPIO_Init+0x304>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	43db      	mvns	r3, r3
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	4013      	ands	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d003      	beq.n	8002892 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	4313      	orrs	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002892:	4a2f      	ldr	r2, [pc, #188]	@ (8002950 <HAL_GPIO_Init+0x304>)
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002898:	4b2d      	ldr	r3, [pc, #180]	@ (8002950 <HAL_GPIO_Init+0x304>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	43db      	mvns	r3, r3
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4013      	ands	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d003      	beq.n	80028bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028bc:	4a24      	ldr	r2, [pc, #144]	@ (8002950 <HAL_GPIO_Init+0x304>)
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028c2:	4b23      	ldr	r3, [pc, #140]	@ (8002950 <HAL_GPIO_Init+0x304>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	43db      	mvns	r3, r3
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	4013      	ands	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d003      	beq.n	80028e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028e6:	4a1a      	ldr	r2, [pc, #104]	@ (8002950 <HAL_GPIO_Init+0x304>)
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028ec:	4b18      	ldr	r3, [pc, #96]	@ (8002950 <HAL_GPIO_Init+0x304>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	43db      	mvns	r3, r3
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	4013      	ands	r3, r2
 80028fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d003      	beq.n	8002910 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	4313      	orrs	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002910:	4a0f      	ldr	r2, [pc, #60]	@ (8002950 <HAL_GPIO_Init+0x304>)
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	3301      	adds	r3, #1
 800291a:	61fb      	str	r3, [r7, #28]
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	2b0f      	cmp	r3, #15
 8002920:	f67f aea2 	bls.w	8002668 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002924:	bf00      	nop
 8002926:	bf00      	nop
 8002928:	3724      	adds	r7, #36	@ 0x24
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	40023800 	.word	0x40023800
 8002938:	40013800 	.word	0x40013800
 800293c:	40020000 	.word	0x40020000
 8002940:	40020400 	.word	0x40020400
 8002944:	40020800 	.word	0x40020800
 8002948:	40020c00 	.word	0x40020c00
 800294c:	40021000 	.word	0x40021000
 8002950:	40013c00 	.word	0x40013c00

08002954 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	460b      	mov	r3, r1
 800295e:	807b      	strh	r3, [r7, #2]
 8002960:	4613      	mov	r3, r2
 8002962:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002964:	787b      	ldrb	r3, [r7, #1]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800296a:	887a      	ldrh	r2, [r7, #2]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002970:	e003      	b.n	800297a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002972:	887b      	ldrh	r3, [r7, #2]
 8002974:	041a      	lsls	r2, r3, #16
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	619a      	str	r2, [r3, #24]
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
	...

08002988 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e12b      	b.n	8002bf2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d106      	bne.n	80029b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7fe fe1c 	bl	80015ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2224      	movs	r2, #36	@ 0x24
 80029b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 0201 	bic.w	r2, r2, #1
 80029ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80029da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029ec:	f002 fe64 	bl	80056b8 <HAL_RCC_GetPCLK1Freq>
 80029f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	4a81      	ldr	r2, [pc, #516]	@ (8002bfc <HAL_I2C_Init+0x274>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d807      	bhi.n	8002a0c <HAL_I2C_Init+0x84>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	4a80      	ldr	r2, [pc, #512]	@ (8002c00 <HAL_I2C_Init+0x278>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	bf94      	ite	ls
 8002a04:	2301      	movls	r3, #1
 8002a06:	2300      	movhi	r3, #0
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	e006      	b.n	8002a1a <HAL_I2C_Init+0x92>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	4a7d      	ldr	r2, [pc, #500]	@ (8002c04 <HAL_I2C_Init+0x27c>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	bf94      	ite	ls
 8002a14:	2301      	movls	r3, #1
 8002a16:	2300      	movhi	r3, #0
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e0e7      	b.n	8002bf2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	4a78      	ldr	r2, [pc, #480]	@ (8002c08 <HAL_I2C_Init+0x280>)
 8002a26:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2a:	0c9b      	lsrs	r3, r3, #18
 8002a2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68ba      	ldr	r2, [r7, #8]
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6a1b      	ldr	r3, [r3, #32]
 8002a48:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	4a6a      	ldr	r2, [pc, #424]	@ (8002bfc <HAL_I2C_Init+0x274>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d802      	bhi.n	8002a5c <HAL_I2C_Init+0xd4>
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	e009      	b.n	8002a70 <HAL_I2C_Init+0xe8>
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002a62:	fb02 f303 	mul.w	r3, r2, r3
 8002a66:	4a69      	ldr	r2, [pc, #420]	@ (8002c0c <HAL_I2C_Init+0x284>)
 8002a68:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6c:	099b      	lsrs	r3, r3, #6
 8002a6e:	3301      	adds	r3, #1
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	6812      	ldr	r2, [r2, #0]
 8002a74:	430b      	orrs	r3, r1
 8002a76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002a82:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	495c      	ldr	r1, [pc, #368]	@ (8002bfc <HAL_I2C_Init+0x274>)
 8002a8c:	428b      	cmp	r3, r1
 8002a8e:	d819      	bhi.n	8002ac4 <HAL_I2C_Init+0x13c>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	1e59      	subs	r1, r3, #1
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a9e:	1c59      	adds	r1, r3, #1
 8002aa0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002aa4:	400b      	ands	r3, r1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00a      	beq.n	8002ac0 <HAL_I2C_Init+0x138>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	1e59      	subs	r1, r3, #1
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ab8:	3301      	adds	r3, #1
 8002aba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002abe:	e051      	b.n	8002b64 <HAL_I2C_Init+0x1dc>
 8002ac0:	2304      	movs	r3, #4
 8002ac2:	e04f      	b.n	8002b64 <HAL_I2C_Init+0x1dc>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d111      	bne.n	8002af0 <HAL_I2C_Init+0x168>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	1e58      	subs	r0, r3, #1
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6859      	ldr	r1, [r3, #4]
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	440b      	add	r3, r1
 8002ada:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ade:	3301      	adds	r3, #1
 8002ae0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	bf0c      	ite	eq
 8002ae8:	2301      	moveq	r3, #1
 8002aea:	2300      	movne	r3, #0
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	e012      	b.n	8002b16 <HAL_I2C_Init+0x18e>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	1e58      	subs	r0, r3, #1
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6859      	ldr	r1, [r3, #4]
 8002af8:	460b      	mov	r3, r1
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	440b      	add	r3, r1
 8002afe:	0099      	lsls	r1, r3, #2
 8002b00:	440b      	add	r3, r1
 8002b02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b06:	3301      	adds	r3, #1
 8002b08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	bf0c      	ite	eq
 8002b10:	2301      	moveq	r3, #1
 8002b12:	2300      	movne	r3, #0
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <HAL_I2C_Init+0x196>
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e022      	b.n	8002b64 <HAL_I2C_Init+0x1dc>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10e      	bne.n	8002b44 <HAL_I2C_Init+0x1bc>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	1e58      	subs	r0, r3, #1
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6859      	ldr	r1, [r3, #4]
 8002b2e:	460b      	mov	r3, r1
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	440b      	add	r3, r1
 8002b34:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b38:	3301      	adds	r3, #1
 8002b3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b42:	e00f      	b.n	8002b64 <HAL_I2C_Init+0x1dc>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	1e58      	subs	r0, r3, #1
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6859      	ldr	r1, [r3, #4]
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	440b      	add	r3, r1
 8002b52:	0099      	lsls	r1, r3, #2
 8002b54:	440b      	add	r3, r1
 8002b56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b60:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b64:	6879      	ldr	r1, [r7, #4]
 8002b66:	6809      	ldr	r1, [r1, #0]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	69da      	ldr	r2, [r3, #28]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	430a      	orrs	r2, r1
 8002b86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002b92:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	6911      	ldr	r1, [r2, #16]
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	68d2      	ldr	r2, [r2, #12]
 8002b9e:	4311      	orrs	r1, r2
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	6812      	ldr	r2, [r2, #0]
 8002ba4:	430b      	orrs	r3, r1
 8002ba6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	695a      	ldr	r2, [r3, #20]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f042 0201 	orr.w	r2, r2, #1
 8002bd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2220      	movs	r2, #32
 8002bde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	000186a0 	.word	0x000186a0
 8002c00:	001e847f 	.word	0x001e847f
 8002c04:	003d08ff 	.word	0x003d08ff
 8002c08:	431bde83 	.word	0x431bde83
 8002c0c:	10624dd3 	.word	0x10624dd3

08002c10 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b088      	sub	sp, #32
 8002c14:	af02      	add	r7, sp, #8
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	607a      	str	r2, [r7, #4]
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	817b      	strh	r3, [r7, #10]
 8002c20:	4613      	mov	r3, r2
 8002c22:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c24:	f7fe ffd8 	bl	8001bd8 <HAL_GetTick>
 8002c28:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b20      	cmp	r3, #32
 8002c34:	f040 80e0 	bne.w	8002df8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	2319      	movs	r3, #25
 8002c3e:	2201      	movs	r2, #1
 8002c40:	4970      	ldr	r1, [pc, #448]	@ (8002e04 <HAL_I2C_Master_Transmit+0x1f4>)
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f001 fef4 	bl	8004a30 <I2C_WaitOnFlagUntilTimeout>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c4e:	2302      	movs	r3, #2
 8002c50:	e0d3      	b.n	8002dfa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d101      	bne.n	8002c60 <HAL_I2C_Master_Transmit+0x50>
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	e0cc      	b.n	8002dfa <HAL_I2C_Master_Transmit+0x1ea>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d007      	beq.n	8002c86 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f042 0201 	orr.w	r2, r2, #1
 8002c84:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c94:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2221      	movs	r2, #33	@ 0x21
 8002c9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2210      	movs	r2, #16
 8002ca2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	893a      	ldrh	r2, [r7, #8]
 8002cb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	4a50      	ldr	r2, [pc, #320]	@ (8002e08 <HAL_I2C_Master_Transmit+0x1f8>)
 8002cc6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002cc8:	8979      	ldrh	r1, [r7, #10]
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	6a3a      	ldr	r2, [r7, #32]
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f001 fc72 	bl	80045b8 <I2C_MasterRequestWrite>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e08d      	b.n	8002dfa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cde:	2300      	movs	r3, #0
 8002ce0:	613b      	str	r3, [r7, #16]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	613b      	str	r3, [r7, #16]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	613b      	str	r3, [r7, #16]
 8002cf2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002cf4:	e066      	b.n	8002dc4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	6a39      	ldr	r1, [r7, #32]
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f001 ff6e 	bl	8004bdc <I2C_WaitOnTXEFlagUntilTimeout>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00d      	beq.n	8002d22 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	d107      	bne.n	8002d1e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d1c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e06b      	b.n	8002dfa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d26:	781a      	ldrb	r2, [r3, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d32:	1c5a      	adds	r2, r3, #1
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	695b      	ldr	r3, [r3, #20]
 8002d58:	f003 0304 	and.w	r3, r3, #4
 8002d5c:	2b04      	cmp	r3, #4
 8002d5e:	d11b      	bne.n	8002d98 <HAL_I2C_Master_Transmit+0x188>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d017      	beq.n	8002d98 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6c:	781a      	ldrb	r2, [r3, #0]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d78:	1c5a      	adds	r2, r3, #1
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	3b01      	subs	r3, #1
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d90:	3b01      	subs	r3, #1
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d98:	697a      	ldr	r2, [r7, #20]
 8002d9a:	6a39      	ldr	r1, [r7, #32]
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f001 ff5e 	bl	8004c5e <I2C_WaitOnBTFFlagUntilTimeout>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00d      	beq.n	8002dc4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dac:	2b04      	cmp	r3, #4
 8002dae:	d107      	bne.n	8002dc0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dbe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e01a      	b.n	8002dfa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d194      	bne.n	8002cf6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2220      	movs	r2, #32
 8002de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002df4:	2300      	movs	r3, #0
 8002df6:	e000      	b.n	8002dfa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002df8:	2302      	movs	r3, #2
  }
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3718      	adds	r7, #24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	00100002 	.word	0x00100002
 8002e08:	ffff0000 	.word	0xffff0000

08002e0c <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	607a      	str	r2, [r7, #4]
 8002e16:	461a      	mov	r2, r3
 8002e18:	460b      	mov	r3, r1
 8002e1a:	817b      	strh	r3, [r7, #10]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002e20:	2300      	movs	r3, #0
 8002e22:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2b20      	cmp	r3, #32
 8002e2e:	f040 810d 	bne.w	800304c <HAL_I2C_Master_Receive_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002e32:	4b89      	ldr	r3, [pc, #548]	@ (8003058 <HAL_I2C_Master_Receive_DMA+0x24c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	08db      	lsrs	r3, r3, #3
 8002e38:	4a88      	ldr	r2, [pc, #544]	@ (800305c <HAL_I2C_Master_Receive_DMA+0x250>)
 8002e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3e:	0a1a      	lsrs	r2, r3, #8
 8002e40:	4613      	mov	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4413      	add	r3, r2
 8002e46:	009a      	lsls	r2, r3, #2
 8002e48:	4413      	add	r3, r2
 8002e4a:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d116      	bne.n	8002e86 <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2220      	movs	r2, #32
 8002e62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e72:	f043 0220 	orr.w	r2, r3, #32
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e0e3      	b.n	800304e <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d0db      	beq.n	8002e4c <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d101      	bne.n	8002ea2 <HAL_I2C_Master_Receive_DMA+0x96>
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	e0d5      	b.n	800304e <HAL_I2C_Master_Receive_DMA+0x242>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0301 	and.w	r3, r3, #1
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d007      	beq.n	8002ec8 <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f042 0201 	orr.w	r2, r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ed6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2222      	movs	r2, #34	@ 0x22
 8002edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2210      	movs	r2, #16
 8002ee4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	893a      	ldrh	r2, [r7, #8]
 8002ef8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	4a56      	ldr	r2, [pc, #344]	@ (8003060 <HAL_I2C_Master_Receive_DMA+0x254>)
 8002f08:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8002f0a:	897a      	ldrh	r2, [r7, #10]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	645a      	str	r2, [r3, #68]	@ 0x44

    if (hi2c->XferSize > 0U)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d07b      	beq.n	8003010 <HAL_I2C_Master_Receive_DMA+0x204>
    {
      if (hi2c->hdmarx != NULL)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d02a      	beq.n	8002f76 <HAL_I2C_Master_Receive_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f24:	4a4f      	ldr	r2, [pc, #316]	@ (8003064 <HAL_I2C_Master_Receive_DMA+0x258>)
 8002f26:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f2c:	4a4e      	ldr	r2, [pc, #312]	@ (8003068 <HAL_I2C_Master_Receive_DMA+0x25c>)
 8002f2e:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f34:	2200      	movs	r2, #0
 8002f36:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f44:	2200      	movs	r2, #0
 8002f46:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	3310      	adds	r3, #16
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f60:	461a      	mov	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f66:	f7ff f803 	bl	8001f70 <HAL_DMA_Start_IT>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8002f6e:	7dfb      	ldrb	r3, [r7, #23]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d139      	bne.n	8002fe8 <HAL_I2C_Master_Receive_DMA+0x1dc>
 8002f74:	e013      	b.n	8002f9e <HAL_I2C_Master_Receive_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2220      	movs	r2, #32
 8002f7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f8a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e057      	b.n	800304e <HAL_I2C_Master_Receive_DMA+0x242>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002fac:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fbc:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002fd4:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	685a      	ldr	r2, [r3, #4]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fe4:	605a      	str	r2, [r3, #4]
 8002fe6:	e02f      	b.n	8003048 <HAL_I2C_Master_Receive_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2220      	movs	r2, #32
 8002fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffc:	f043 0210 	orr.w	r2, r3, #16
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e01e      	b.n	800304e <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	685a      	ldr	r2, [r3, #4]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8003026:	605a      	str	r2, [r3, #4]

      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003036:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003046:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8003048:	2300      	movs	r3, #0
 800304a:	e000      	b.n	800304e <HAL_I2C_Master_Receive_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 800304c:	2302      	movs	r3, #2
  }
}
 800304e:	4618      	mov	r0, r3
 8003050:	3718      	adds	r7, #24
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	20000004 	.word	0x20000004
 800305c:	14f8b589 	.word	0x14f8b589
 8003060:	ffff0000 	.word	0xffff0000
 8003064:	080046bd 	.word	0x080046bd
 8003068:	08004867 	.word	0x08004867

0800306c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b088      	sub	sp, #32
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003074:	2300      	movs	r3, #0
 8003076:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003084:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800308c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003094:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003096:	7bfb      	ldrb	r3, [r7, #15]
 8003098:	2b10      	cmp	r3, #16
 800309a:	d003      	beq.n	80030a4 <HAL_I2C_EV_IRQHandler+0x38>
 800309c:	7bfb      	ldrb	r3, [r7, #15]
 800309e:	2b40      	cmp	r3, #64	@ 0x40
 80030a0:	f040 80b1 	bne.w	8003206 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10d      	bne.n	80030da <HAL_I2C_EV_IRQHandler+0x6e>
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80030c4:	d003      	beq.n	80030ce <HAL_I2C_EV_IRQHandler+0x62>
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80030cc:	d101      	bne.n	80030d2 <HAL_I2C_EV_IRQHandler+0x66>
 80030ce:	2301      	movs	r3, #1
 80030d0:	e000      	b.n	80030d4 <HAL_I2C_EV_IRQHandler+0x68>
 80030d2:	2300      	movs	r3, #0
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	f000 8114 	beq.w	8003302 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	f003 0301 	and.w	r3, r3, #1
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00b      	beq.n	80030fc <HAL_I2C_EV_IRQHandler+0x90>
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d006      	beq.n	80030fc <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f001 fe57 	bl	8004da2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f000 fcb5 	bl	8003a64 <I2C_Master_SB>
 80030fa:	e083      	b.n	8003204 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	f003 0308 	and.w	r3, r3, #8
 8003102:	2b00      	cmp	r3, #0
 8003104:	d008      	beq.n	8003118 <HAL_I2C_EV_IRQHandler+0xac>
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800310c:	2b00      	cmp	r3, #0
 800310e:	d003      	beq.n	8003118 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 fd2d 	bl	8003b70 <I2C_Master_ADD10>
 8003116:	e075      	b.n	8003204 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d008      	beq.n	8003134 <HAL_I2C_EV_IRQHandler+0xc8>
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003128:	2b00      	cmp	r3, #0
 800312a:	d003      	beq.n	8003134 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 fd49 	bl	8003bc4 <I2C_Master_ADDR>
 8003132:	e067      	b.n	8003204 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	f003 0304 	and.w	r3, r3, #4
 800313a:	2b00      	cmp	r3, #0
 800313c:	d036      	beq.n	80031ac <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003148:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800314c:	f000 80db 	beq.w	8003306 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00d      	beq.n	8003176 <HAL_I2C_EV_IRQHandler+0x10a>
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003160:	2b00      	cmp	r3, #0
 8003162:	d008      	beq.n	8003176 <HAL_I2C_EV_IRQHandler+0x10a>
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	f003 0304 	and.w	r3, r3, #4
 800316a:	2b00      	cmp	r3, #0
 800316c:	d103      	bne.n	8003176 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 f92d 	bl	80033ce <I2C_MasterTransmit_TXE>
 8003174:	e046      	b.n	8003204 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	f003 0304 	and.w	r3, r3, #4
 800317c:	2b00      	cmp	r3, #0
 800317e:	f000 80c2 	beq.w	8003306 <HAL_I2C_EV_IRQHandler+0x29a>
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 80bc 	beq.w	8003306 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800318e:	7bbb      	ldrb	r3, [r7, #14]
 8003190:	2b21      	cmp	r3, #33	@ 0x21
 8003192:	d103      	bne.n	800319c <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 f9b6 	bl	8003506 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800319a:	e0b4      	b.n	8003306 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800319c:	7bfb      	ldrb	r3, [r7, #15]
 800319e:	2b40      	cmp	r3, #64	@ 0x40
 80031a0:	f040 80b1 	bne.w	8003306 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 fa24 	bl	80035f2 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031aa:	e0ac      	b.n	8003306 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031ba:	f000 80a4 	beq.w	8003306 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00d      	beq.n	80031e4 <HAL_I2C_EV_IRQHandler+0x178>
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d008      	beq.n	80031e4 <HAL_I2C_EV_IRQHandler+0x178>
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	f003 0304 	and.w	r3, r3, #4
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d103      	bne.n	80031e4 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 fa9c 	bl	800371a <I2C_MasterReceive_RXNE>
 80031e2:	e00f      	b.n	8003204 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	f003 0304 	and.w	r3, r3, #4
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f000 808b 	beq.w	8003306 <HAL_I2C_EV_IRQHandler+0x29a>
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f000 8085 	beq.w	8003306 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 fb47 	bl	8003890 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003202:	e080      	b.n	8003306 <HAL_I2C_EV_IRQHandler+0x29a>
 8003204:	e07f      	b.n	8003306 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320a:	2b00      	cmp	r3, #0
 800320c:	d004      	beq.n	8003218 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	61fb      	str	r3, [r7, #28]
 8003216:	e007      	b.n	8003228 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d011      	beq.n	8003256 <HAL_I2C_EV_IRQHandler+0x1ea>
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00c      	beq.n	8003256 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003240:	2b00      	cmp	r3, #0
 8003242:	d003      	beq.n	800324c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800324c:	69b9      	ldr	r1, [r7, #24]
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 ff07 	bl	8004062 <I2C_Slave_ADDR>
 8003254:	e05a      	b.n	800330c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	f003 0310 	and.w	r3, r3, #16
 800325c:	2b00      	cmp	r3, #0
 800325e:	d008      	beq.n	8003272 <HAL_I2C_EV_IRQHandler+0x206>
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003266:	2b00      	cmp	r3, #0
 8003268:	d003      	beq.n	8003272 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 ff42 	bl	80040f4 <I2C_Slave_STOPF>
 8003270:	e04c      	b.n	800330c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003272:	7bbb      	ldrb	r3, [r7, #14]
 8003274:	2b21      	cmp	r3, #33	@ 0x21
 8003276:	d002      	beq.n	800327e <HAL_I2C_EV_IRQHandler+0x212>
 8003278:	7bbb      	ldrb	r3, [r7, #14]
 800327a:	2b29      	cmp	r3, #41	@ 0x29
 800327c:	d120      	bne.n	80032c0 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00d      	beq.n	80032a4 <HAL_I2C_EV_IRQHandler+0x238>
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800328e:	2b00      	cmp	r3, #0
 8003290:	d008      	beq.n	80032a4 <HAL_I2C_EV_IRQHandler+0x238>
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	f003 0304 	and.w	r3, r3, #4
 8003298:	2b00      	cmp	r3, #0
 800329a:	d103      	bne.n	80032a4 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 fe22 	bl	8003ee6 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032a2:	e032      	b.n	800330a <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	f003 0304 	and.w	r3, r3, #4
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d02d      	beq.n	800330a <HAL_I2C_EV_IRQHandler+0x29e>
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d028      	beq.n	800330a <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 fe51 	bl	8003f60 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032be:	e024      	b.n	800330a <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00d      	beq.n	80032e6 <HAL_I2C_EV_IRQHandler+0x27a>
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d008      	beq.n	80032e6 <HAL_I2C_EV_IRQHandler+0x27a>
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	f003 0304 	and.w	r3, r3, #4
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d103      	bne.n	80032e6 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 fe5f 	bl	8003fa2 <I2C_SlaveReceive_RXNE>
 80032e4:	e012      	b.n	800330c <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	f003 0304 	and.w	r3, r3, #4
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00d      	beq.n	800330c <HAL_I2C_EV_IRQHandler+0x2a0>
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d008      	beq.n	800330c <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 fe8f 	bl	800401e <I2C_SlaveReceive_BTF>
 8003300:	e004      	b.n	800330c <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8003302:	bf00      	nop
 8003304:	e002      	b.n	800330c <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003306:	bf00      	nop
 8003308:	e000      	b.n	800330c <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800330a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800330c:	3720      	adds	r7, #32
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003312:	b480      	push	{r7}
 8003314:	b083      	sub	sp, #12
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800331a:	bf00      	nop
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr

08003326 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003326:	b480      	push	{r7}
 8003328:	b083      	sub	sp, #12
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800332e:	bf00      	nop
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800333a:	b480      	push	{r7}
 800333c:	b083      	sub	sp, #12
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003342:	bf00      	nop
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr

0800334e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800334e:	b480      	push	{r7}
 8003350:	b083      	sub	sp, #12
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
 8003356:	460b      	mov	r3, r1
 8003358:	70fb      	strb	r3, [r7, #3]
 800335a:	4613      	mov	r3, r2
 800335c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800335e:	bf00      	nop
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr

0800336a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800336a:	b480      	push	{r7}
 800336c:	b083      	sub	sp, #12
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003372:	bf00      	nop
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr

0800337e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800337e:	b480      	push	{r7}
 8003380:	b083      	sub	sp, #12
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003386:	bf00      	nop
 8003388:	370c      	adds	r7, #12
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr

08003392 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003392:	b480      	push	{r7}
 8003394:	b083      	sub	sp, #12
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800339a:	bf00      	nop
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr

080033a6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80033a6:	b480      	push	{r7}
 80033a8:	b083      	sub	sp, #12
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80033ae:	bf00      	nop
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr

080033ba <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033ba:	b480      	push	{r7}
 80033bc:	b083      	sub	sp, #12
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80033c2:	bf00      	nop
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr

080033ce <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b084      	sub	sp, #16
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033dc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80033e4:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ea:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d150      	bne.n	8003496 <I2C_MasterTransmit_TXE+0xc8>
 80033f4:	7bfb      	ldrb	r3, [r7, #15]
 80033f6:	2b21      	cmp	r3, #33	@ 0x21
 80033f8:	d14d      	bne.n	8003496 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	2b08      	cmp	r3, #8
 80033fe:	d01d      	beq.n	800343c <I2C_MasterTransmit_TXE+0x6e>
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	2b20      	cmp	r3, #32
 8003404:	d01a      	beq.n	800343c <I2C_MasterTransmit_TXE+0x6e>
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800340c:	d016      	beq.n	800343c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800341c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2211      	movs	r2, #17
 8003422:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2220      	movs	r2, #32
 8003430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f7ff ff6c 	bl	8003312 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800343a:	e060      	b.n	80034fe <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	685a      	ldr	r2, [r3, #4]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800344a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800345a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2220      	movs	r2, #32
 8003466:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b40      	cmp	r3, #64	@ 0x40
 8003474:	d107      	bne.n	8003486 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f7ff ff7d 	bl	800337e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003484:	e03b      	b.n	80034fe <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7ff ff3f 	bl	8003312 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003494:	e033      	b.n	80034fe <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003496:	7bfb      	ldrb	r3, [r7, #15]
 8003498:	2b21      	cmp	r3, #33	@ 0x21
 800349a:	d005      	beq.n	80034a8 <I2C_MasterTransmit_TXE+0xda>
 800349c:	7bbb      	ldrb	r3, [r7, #14]
 800349e:	2b40      	cmp	r3, #64	@ 0x40
 80034a0:	d12d      	bne.n	80034fe <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80034a2:	7bfb      	ldrb	r3, [r7, #15]
 80034a4:	2b22      	cmp	r3, #34	@ 0x22
 80034a6:	d12a      	bne.n	80034fe <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d108      	bne.n	80034c4 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	685a      	ldr	r2, [r3, #4]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034c0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80034c2:	e01c      	b.n	80034fe <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2b40      	cmp	r3, #64	@ 0x40
 80034ce:	d103      	bne.n	80034d8 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 f88e 	bl	80035f2 <I2C_MemoryTransmit_TXE_BTF>
}
 80034d6:	e012      	b.n	80034fe <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034dc:	781a      	ldrb	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e8:	1c5a      	adds	r2, r3, #1
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	3b01      	subs	r3, #1
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80034fc:	e7ff      	b.n	80034fe <I2C_MasterTransmit_TXE+0x130>
 80034fe:	bf00      	nop
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b084      	sub	sp, #16
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003512:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2b21      	cmp	r3, #33	@ 0x21
 800351e:	d164      	bne.n	80035ea <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003524:	b29b      	uxth	r3, r3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d012      	beq.n	8003550 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352e:	781a      	ldrb	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800353a:	1c5a      	adds	r2, r3, #1
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003544:	b29b      	uxth	r3, r3
 8003546:	3b01      	subs	r3, #1
 8003548:	b29a      	uxth	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800354e:	e04c      	b.n	80035ea <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2b08      	cmp	r3, #8
 8003554:	d01d      	beq.n	8003592 <I2C_MasterTransmit_BTF+0x8c>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2b20      	cmp	r3, #32
 800355a:	d01a      	beq.n	8003592 <I2C_MasterTransmit_BTF+0x8c>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003562:	d016      	beq.n	8003592 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685a      	ldr	r2, [r3, #4]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003572:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2211      	movs	r2, #17
 8003578:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2220      	movs	r2, #32
 8003586:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7ff fec1 	bl	8003312 <HAL_I2C_MasterTxCpltCallback>
}
 8003590:	e02b      	b.n	80035ea <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80035a0:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035b0:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2220      	movs	r2, #32
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	2b40      	cmp	r3, #64	@ 0x40
 80035ca:	d107      	bne.n	80035dc <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f7ff fed2 	bl	800337e <HAL_I2C_MemTxCpltCallback>
}
 80035da:	e006      	b.n	80035ea <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f7ff fe94 	bl	8003312 <HAL_I2C_MasterTxCpltCallback>
}
 80035ea:	bf00      	nop
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b084      	sub	sp, #16
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003600:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003606:	2b00      	cmp	r3, #0
 8003608:	d11d      	bne.n	8003646 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800360e:	2b01      	cmp	r3, #1
 8003610:	d10b      	bne.n	800362a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003616:	b2da      	uxtb	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003622:	1c9a      	adds	r2, r3, #2
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003628:	e073      	b.n	8003712 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800362e:	b29b      	uxth	r3, r3
 8003630:	121b      	asrs	r3, r3, #8
 8003632:	b2da      	uxtb	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800363e:	1c5a      	adds	r2, r3, #1
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003644:	e065      	b.n	8003712 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800364a:	2b01      	cmp	r3, #1
 800364c:	d10b      	bne.n	8003666 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003652:	b2da      	uxtb	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800365e:	1c5a      	adds	r2, r3, #1
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003664:	e055      	b.n	8003712 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800366a:	2b02      	cmp	r3, #2
 800366c:	d151      	bne.n	8003712 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800366e:	7bfb      	ldrb	r3, [r7, #15]
 8003670:	2b22      	cmp	r3, #34	@ 0x22
 8003672:	d10d      	bne.n	8003690 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003682:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003688:	1c5a      	adds	r2, r3, #1
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800368e:	e040      	b.n	8003712 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003694:	b29b      	uxth	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d015      	beq.n	80036c6 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800369a:	7bfb      	ldrb	r3, [r7, #15]
 800369c:	2b21      	cmp	r3, #33	@ 0x21
 800369e:	d112      	bne.n	80036c6 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a4:	781a      	ldrb	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b0:	1c5a      	adds	r2, r3, #1
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	3b01      	subs	r3, #1
 80036be:	b29a      	uxth	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80036c4:	e025      	b.n	8003712 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d120      	bne.n	8003712 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80036d0:	7bfb      	ldrb	r3, [r7, #15]
 80036d2:	2b21      	cmp	r3, #33	@ 0x21
 80036d4:	d11d      	bne.n	8003712 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	685a      	ldr	r2, [r3, #4]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80036e4:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036f4:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2220      	movs	r2, #32
 8003700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f7ff fe36 	bl	800337e <HAL_I2C_MemTxCpltCallback>
}
 8003712:	bf00      	nop
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800371a:	b580      	push	{r7, lr}
 800371c:	b084      	sub	sp, #16
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b22      	cmp	r3, #34	@ 0x22
 800372c:	f040 80ac 	bne.w	8003888 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003734:	b29b      	uxth	r3, r3
 8003736:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2b03      	cmp	r3, #3
 800373c:	d921      	bls.n	8003782 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	691a      	ldr	r2, [r3, #16]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003748:	b2d2      	uxtb	r2, r2
 800374a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003750:	1c5a      	adds	r2, r3, #1
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800375a:	b29b      	uxth	r3, r3
 800375c:	3b01      	subs	r3, #1
 800375e:	b29a      	uxth	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003768:	b29b      	uxth	r3, r3
 800376a:	2b03      	cmp	r3, #3
 800376c:	f040 808c 	bne.w	8003888 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	685a      	ldr	r2, [r3, #4]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800377e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003780:	e082      	b.n	8003888 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003786:	2b02      	cmp	r3, #2
 8003788:	d075      	beq.n	8003876 <I2C_MasterReceive_RXNE+0x15c>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d002      	beq.n	8003796 <I2C_MasterReceive_RXNE+0x7c>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d16f      	bne.n	8003876 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f001 faa2 	bl	8004ce0 <I2C_WaitOnSTOPRequestThroughIT>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d142      	bne.n	8003828 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037b0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	685a      	ldr	r2, [r3, #4]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80037c0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	691a      	ldr	r2, [r3, #16]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037cc:	b2d2      	uxtb	r2, r2
 80037ce:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d4:	1c5a      	adds	r2, r3, #1
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037de:	b29b      	uxth	r3, r3
 80037e0:	3b01      	subs	r3, #1
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2220      	movs	r2, #32
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	2b40      	cmp	r3, #64	@ 0x40
 80037fa:	d10a      	bne.n	8003812 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7ff fdc1 	bl	8003392 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003810:	e03a      	b.n	8003888 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2212      	movs	r2, #18
 800381e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f7fd fba7 	bl	8000f74 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003826:	e02f      	b.n	8003888 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685a      	ldr	r2, [r3, #4]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003836:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	691a      	ldr	r2, [r3, #16]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003842:	b2d2      	uxtb	r2, r2
 8003844:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384a:	1c5a      	adds	r2, r3, #1
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003854:	b29b      	uxth	r3, r3
 8003856:	3b01      	subs	r3, #1
 8003858:	b29a      	uxth	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2220      	movs	r2, #32
 8003862:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f7ff fd99 	bl	80033a6 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003874:	e008      	b.n	8003888 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003884:	605a      	str	r2, [r3, #4]
}
 8003886:	e7ff      	b.n	8003888 <I2C_MasterReceive_RXNE+0x16e>
 8003888:	bf00      	nop
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800389c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	2b04      	cmp	r3, #4
 80038a6:	d11b      	bne.n	80038e0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685a      	ldr	r2, [r3, #4]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038b6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	691a      	ldr	r2, [r3, #16]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c2:	b2d2      	uxtb	r2, r2
 80038c4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ca:	1c5a      	adds	r2, r3, #1
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	3b01      	subs	r3, #1
 80038d8:	b29a      	uxth	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80038de:	e0bd      	b.n	8003a5c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	2b03      	cmp	r3, #3
 80038e8:	d129      	bne.n	800393e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038f8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2b04      	cmp	r3, #4
 80038fe:	d00a      	beq.n	8003916 <I2C_MasterReceive_BTF+0x86>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2b02      	cmp	r3, #2
 8003904:	d007      	beq.n	8003916 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003914:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	691a      	ldr	r2, [r3, #16]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003920:	b2d2      	uxtb	r2, r2
 8003922:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003928:	1c5a      	adds	r2, r3, #1
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003932:	b29b      	uxth	r3, r3
 8003934:	3b01      	subs	r3, #1
 8003936:	b29a      	uxth	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800393c:	e08e      	b.n	8003a5c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003942:	b29b      	uxth	r3, r3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d176      	bne.n	8003a36 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d002      	beq.n	8003954 <I2C_MasterReceive_BTF+0xc4>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2b10      	cmp	r3, #16
 8003952:	d108      	bne.n	8003966 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003962:	601a      	str	r2, [r3, #0]
 8003964:	e019      	b.n	800399a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2b04      	cmp	r3, #4
 800396a:	d002      	beq.n	8003972 <I2C_MasterReceive_BTF+0xe2>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2b02      	cmp	r3, #2
 8003970:	d108      	bne.n	8003984 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003980:	601a      	str	r2, [r3, #0]
 8003982:	e00a      	b.n	800399a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2b10      	cmp	r3, #16
 8003988:	d007      	beq.n	800399a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003998:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	691a      	ldr	r2, [r3, #16]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a4:	b2d2      	uxtb	r2, r2
 80039a6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ac:	1c5a      	adds	r2, r3, #1
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	3b01      	subs	r3, #1
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	691a      	ldr	r2, [r3, #16]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ca:	b2d2      	uxtb	r2, r2
 80039cc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d2:	1c5a      	adds	r2, r3, #1
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039dc:	b29b      	uxth	r3, r3
 80039de:	3b01      	subs	r3, #1
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80039f4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2220      	movs	r2, #32
 80039fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b40      	cmp	r3, #64	@ 0x40
 8003a08:	d10a      	bne.n	8003a20 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f7ff fcba 	bl	8003392 <HAL_I2C_MemRxCpltCallback>
}
 8003a1e:	e01d      	b.n	8003a5c <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2212      	movs	r2, #18
 8003a2c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f7fd faa0 	bl	8000f74 <HAL_I2C_MasterRxCpltCallback>
}
 8003a34:	e012      	b.n	8003a5c <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	691a      	ldr	r2, [r3, #16]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a40:	b2d2      	uxtb	r2, r2
 8003a42:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a48:	1c5a      	adds	r2, r3, #1
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	3b01      	subs	r3, #1
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003a5c:	bf00      	nop
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	2b40      	cmp	r3, #64	@ 0x40
 8003a76:	d117      	bne.n	8003aa8 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d109      	bne.n	8003a94 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	461a      	mov	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003a90:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003a92:	e067      	b.n	8003b64 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	f043 0301 	orr.w	r3, r3, #1
 8003a9e:	b2da      	uxtb	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	611a      	str	r2, [r3, #16]
}
 8003aa6:	e05d      	b.n	8003b64 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ab0:	d133      	bne.n	8003b1a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b21      	cmp	r3, #33	@ 0x21
 8003abc:	d109      	bne.n	8003ad2 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003ace:	611a      	str	r2, [r3, #16]
 8003ad0:	e008      	b.n	8003ae4 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	f043 0301 	orr.w	r3, r3, #1
 8003adc:	b2da      	uxtb	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d004      	beq.n	8003af6 <I2C_Master_SB+0x92>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003af0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d108      	bne.n	8003b08 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d032      	beq.n	8003b64 <I2C_Master_SB+0x100>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d02d      	beq.n	8003b64 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b16:	605a      	str	r2, [r3, #4]
}
 8003b18:	e024      	b.n	8003b64 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10e      	bne.n	8003b40 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	11db      	asrs	r3, r3, #7
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	f003 0306 	and.w	r3, r3, #6
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	f063 030f 	orn	r3, r3, #15
 8003b36:	b2da      	uxtb	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	611a      	str	r2, [r3, #16]
}
 8003b3e:	e011      	b.n	8003b64 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d10d      	bne.n	8003b64 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	11db      	asrs	r3, r3, #7
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	f003 0306 	and.w	r3, r3, #6
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	f063 030e 	orn	r3, r3, #14
 8003b5c:	b2da      	uxtb	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	611a      	str	r2, [r3, #16]
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b7c:	b2da      	uxtb	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d004      	beq.n	8003b96 <I2C_Master_ADD10+0x26>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d108      	bne.n	8003ba8 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00c      	beq.n	8003bb8 <I2C_Master_ADD10+0x48>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ba2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d007      	beq.n	8003bb8 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bb6:	605a      	str	r2, [r3, #4]
  }
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b091      	sub	sp, #68	@ 0x44
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003bd2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bda:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be0:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b22      	cmp	r3, #34	@ 0x22
 8003bec:	f040 8169 	bne.w	8003ec2 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10f      	bne.n	8003c18 <I2C_Master_ADDR+0x54>
 8003bf8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003bfc:	2b40      	cmp	r3, #64	@ 0x40
 8003bfe:	d10b      	bne.n	8003c18 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c00:	2300      	movs	r3, #0
 8003c02:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c16:	e160      	b.n	8003eda <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d11d      	bne.n	8003c5c <I2C_Master_ADDR+0x98>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003c28:	d118      	bne.n	8003c5c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c4e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c54:	1c5a      	adds	r2, r3, #1
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	651a      	str	r2, [r3, #80]	@ 0x50
 8003c5a:	e13e      	b.n	8003eda <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d113      	bne.n	8003c8e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c66:	2300      	movs	r3, #0
 8003c68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	695b      	ldr	r3, [r3, #20]
 8003c70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c8a:	601a      	str	r2, [r3, #0]
 8003c8c:	e115      	b.n	8003eba <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	f040 808a 	bne.w	8003dae <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c9c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ca0:	d137      	bne.n	8003d12 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cb0:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cc0:	d113      	bne.n	8003cea <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cd0:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce8:	e0e7      	b.n	8003eba <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cea:	2300      	movs	r3, #0
 8003cec:	623b      	str	r3, [r7, #32]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	695b      	ldr	r3, [r3, #20]
 8003cf4:	623b      	str	r3, [r7, #32]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	623b      	str	r3, [r7, #32]
 8003cfe:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d0e:	601a      	str	r2, [r3, #0]
 8003d10:	e0d3      	b.n	8003eba <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d14:	2b08      	cmp	r3, #8
 8003d16:	d02e      	beq.n	8003d76 <I2C_Master_ADDR+0x1b2>
 8003d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d1a:	2b20      	cmp	r3, #32
 8003d1c:	d02b      	beq.n	8003d76 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003d1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d20:	2b12      	cmp	r3, #18
 8003d22:	d102      	bne.n	8003d2a <I2C_Master_ADDR+0x166>
 8003d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d125      	bne.n	8003d76 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d2c:	2b04      	cmp	r3, #4
 8003d2e:	d00e      	beq.n	8003d4e <I2C_Master_ADDR+0x18a>
 8003d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d00b      	beq.n	8003d4e <I2C_Master_ADDR+0x18a>
 8003d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d38:	2b10      	cmp	r3, #16
 8003d3a:	d008      	beq.n	8003d4e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d4a:	601a      	str	r2, [r3, #0]
 8003d4c:	e007      	b.n	8003d5e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003d5c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d5e:	2300      	movs	r3, #0
 8003d60:	61fb      	str	r3, [r7, #28]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	61fb      	str	r3, [r7, #28]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	61fb      	str	r3, [r7, #28]
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	e0a1      	b.n	8003eba <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d84:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d86:	2300      	movs	r3, #0
 8003d88:	61bb      	str	r3, [r7, #24]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	695b      	ldr	r3, [r3, #20]
 8003d90:	61bb      	str	r3, [r7, #24]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	61bb      	str	r3, [r7, #24]
 8003d9a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003daa:	601a      	str	r2, [r3, #0]
 8003dac:	e085      	b.n	8003eba <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d14d      	bne.n	8003e54 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dba:	2b04      	cmp	r3, #4
 8003dbc:	d016      	beq.n	8003dec <I2C_Master_ADDR+0x228>
 8003dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d013      	beq.n	8003dec <I2C_Master_ADDR+0x228>
 8003dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dc6:	2b10      	cmp	r3, #16
 8003dc8:	d010      	beq.n	8003dec <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dd8:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003de8:	601a      	str	r2, [r3, #0]
 8003dea:	e007      	b.n	8003dfc <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003dfa:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e0a:	d117      	bne.n	8003e3c <I2C_Master_ADDR+0x278>
 8003e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e0e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003e12:	d00b      	beq.n	8003e2c <I2C_Master_ADDR+0x268>
 8003e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d008      	beq.n	8003e2c <I2C_Master_ADDR+0x268>
 8003e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e1c:	2b08      	cmp	r3, #8
 8003e1e:	d005      	beq.n	8003e2c <I2C_Master_ADDR+0x268>
 8003e20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e22:	2b10      	cmp	r3, #16
 8003e24:	d002      	beq.n	8003e2c <I2C_Master_ADDR+0x268>
 8003e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e28:	2b20      	cmp	r3, #32
 8003e2a:	d107      	bne.n	8003e3c <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	685a      	ldr	r2, [r3, #4]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003e3a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	617b      	str	r3, [r7, #20]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	617b      	str	r3, [r7, #20]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	617b      	str	r3, [r7, #20]
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	e032      	b.n	8003eba <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e62:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e72:	d117      	bne.n	8003ea4 <I2C_Master_ADDR+0x2e0>
 8003e74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e76:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003e7a:	d00b      	beq.n	8003e94 <I2C_Master_ADDR+0x2d0>
 8003e7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d008      	beq.n	8003e94 <I2C_Master_ADDR+0x2d0>
 8003e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e84:	2b08      	cmp	r3, #8
 8003e86:	d005      	beq.n	8003e94 <I2C_Master_ADDR+0x2d0>
 8003e88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e8a:	2b10      	cmp	r3, #16
 8003e8c:	d002      	beq.n	8003e94 <I2C_Master_ADDR+0x2d0>
 8003e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e90:	2b20      	cmp	r3, #32
 8003e92:	d107      	bne.n	8003ea4 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003ea2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	613b      	str	r3, [r7, #16]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	613b      	str	r3, [r7, #16]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	613b      	str	r3, [r7, #16]
 8003eb8:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003ec0:	e00b      	b.n	8003eda <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	60fb      	str	r3, [r7, #12]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	60fb      	str	r3, [r7, #12]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	60fb      	str	r3, [r7, #12]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
}
 8003ed8:	e7ff      	b.n	8003eda <I2C_Master_ADDR+0x316>
 8003eda:	bf00      	nop
 8003edc:	3744      	adds	r7, #68	@ 0x44
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b084      	sub	sp, #16
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ef4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d02b      	beq.n	8003f58 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f04:	781a      	ldrb	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f10:	1c5a      	adds	r2, r3, #1
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d114      	bne.n	8003f58 <I2C_SlaveTransmit_TXE+0x72>
 8003f2e:	7bfb      	ldrb	r3, [r7, #15]
 8003f30:	2b29      	cmp	r3, #41	@ 0x29
 8003f32:	d111      	bne.n	8003f58 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	685a      	ldr	r2, [r3, #4]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f42:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2221      	movs	r2, #33	@ 0x21
 8003f48:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2228      	movs	r2, #40	@ 0x28
 8003f4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f7ff f9e7 	bl	8003326 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003f58:	bf00      	nop
 8003f5a:	3710      	adds	r7, #16
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d011      	beq.n	8003f96 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f76:	781a      	ldrb	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f82:	1c5a      	adds	r2, r3, #1
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	b29a      	uxth	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003f96:	bf00      	nop
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr

08003fa2 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b084      	sub	sp, #16
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fb0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d02c      	beq.n	8004016 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	691a      	ldr	r2, [r3, #16]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc6:	b2d2      	uxtb	r2, r2
 8003fc8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fce:	1c5a      	adds	r2, r3, #1
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d114      	bne.n	8004016 <I2C_SlaveReceive_RXNE+0x74>
 8003fec:	7bfb      	ldrb	r3, [r7, #15]
 8003fee:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ff0:	d111      	bne.n	8004016 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004000:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2222      	movs	r2, #34	@ 0x22
 8004006:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2228      	movs	r2, #40	@ 0x28
 800400c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f7ff f992 	bl	800333a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004016:	bf00      	nop
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}

0800401e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800401e:	b480      	push	{r7}
 8004020:	b083      	sub	sp, #12
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800402a:	b29b      	uxth	r3, r3
 800402c:	2b00      	cmp	r3, #0
 800402e:	d012      	beq.n	8004056 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	691a      	ldr	r2, [r3, #16]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800403a:	b2d2      	uxtb	r2, r2
 800403c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004042:	1c5a      	adds	r2, r3, #1
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800404c:	b29b      	uxth	r3, r3
 800404e:	3b01      	subs	r3, #1
 8004050:	b29a      	uxth	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004056:	bf00      	nop
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr

08004062 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b084      	sub	sp, #16
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
 800406a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800406c:	2300      	movs	r3, #0
 800406e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004076:	b2db      	uxtb	r3, r3
 8004078:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800407c:	2b28      	cmp	r3, #40	@ 0x28
 800407e:	d125      	bne.n	80040cc <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	685a      	ldr	r2, [r3, #4]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800408e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	f003 0304 	and.w	r3, r3, #4
 8004096:	2b00      	cmp	r3, #0
 8004098:	d101      	bne.n	800409e <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800409a:	2301      	movs	r3, #1
 800409c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d103      	bne.n	80040b0 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	81bb      	strh	r3, [r7, #12]
 80040ae:	e002      	b.n	80040b6 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80040be:	89ba      	ldrh	r2, [r7, #12]
 80040c0:	7bfb      	ldrb	r3, [r7, #15]
 80040c2:	4619      	mov	r1, r3
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f7ff f942 	bl	800334e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80040ca:	e00e      	b.n	80040ea <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040cc:	2300      	movs	r3, #0
 80040ce:	60bb      	str	r3, [r7, #8]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	60bb      	str	r3, [r7, #8]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	60bb      	str	r3, [r7, #8]
 80040e0:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80040ea:	bf00      	nop
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
	...

080040f4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004102:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	685a      	ldr	r2, [r3, #4]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004112:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004114:	2300      	movs	r3, #0
 8004116:	60bb      	str	r3, [r7, #8]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	60bb      	str	r3, [r7, #8]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f042 0201 	orr.w	r2, r2, #1
 800412e:	601a      	str	r2, [r3, #0]
 8004130:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004140:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800414c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004150:	d172      	bne.n	8004238 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004152:	7bfb      	ldrb	r3, [r7, #15]
 8004154:	2b22      	cmp	r3, #34	@ 0x22
 8004156:	d002      	beq.n	800415e <I2C_Slave_STOPF+0x6a>
 8004158:	7bfb      	ldrb	r3, [r7, #15]
 800415a:	2b2a      	cmp	r3, #42	@ 0x2a
 800415c:	d135      	bne.n	80041ca <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	b29a      	uxth	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004170:	b29b      	uxth	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d005      	beq.n	8004182 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800417a:	f043 0204 	orr.w	r2, r3, #4
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	685a      	ldr	r2, [r3, #4]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004190:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004196:	4618      	mov	r0, r3
 8004198:	f7fe f95e 	bl	8002458 <HAL_DMA_GetState>
 800419c:	4603      	mov	r3, r0
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d049      	beq.n	8004236 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041a6:	4a69      	ldr	r2, [pc, #420]	@ (800434c <I2C_Slave_STOPF+0x258>)
 80041a8:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7fd ffa6 	bl	8002100 <HAL_DMA_Abort_IT>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d03d      	beq.n	8004236 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80041c4:	4610      	mov	r0, r2
 80041c6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80041c8:	e035      	b.n	8004236 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041dc:	b29b      	uxth	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d005      	beq.n	80041ee <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e6:	f043 0204 	orr.w	r2, r3, #4
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	685a      	ldr	r2, [r3, #4]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041fc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004202:	4618      	mov	r0, r3
 8004204:	f7fe f928 	bl	8002458 <HAL_DMA_GetState>
 8004208:	4603      	mov	r3, r0
 800420a:	2b01      	cmp	r3, #1
 800420c:	d014      	beq.n	8004238 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004212:	4a4e      	ldr	r2, [pc, #312]	@ (800434c <I2C_Slave_STOPF+0x258>)
 8004214:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800421a:	4618      	mov	r0, r3
 800421c:	f7fd ff70 	bl	8002100 <HAL_DMA_Abort_IT>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d008      	beq.n	8004238 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800422a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004230:	4610      	mov	r0, r2
 8004232:	4798      	blx	r3
 8004234:	e000      	b.n	8004238 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004236:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800423c:	b29b      	uxth	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d03e      	beq.n	80042c0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	695b      	ldr	r3, [r3, #20]
 8004248:	f003 0304 	and.w	r3, r3, #4
 800424c:	2b04      	cmp	r3, #4
 800424e:	d112      	bne.n	8004276 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	691a      	ldr	r2, [r3, #16]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800425a:	b2d2      	uxtb	r2, r2
 800425c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004262:	1c5a      	adds	r2, r3, #1
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800426c:	b29b      	uxth	r3, r3
 800426e:	3b01      	subs	r3, #1
 8004270:	b29a      	uxth	r2, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004280:	2b40      	cmp	r3, #64	@ 0x40
 8004282:	d112      	bne.n	80042aa <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	691a      	ldr	r2, [r3, #16]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800428e:	b2d2      	uxtb	r2, r2
 8004290:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004296:	1c5a      	adds	r2, r3, #1
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	3b01      	subs	r3, #1
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d005      	beq.n	80042c0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b8:	f043 0204 	orr.w	r2, r3, #4
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d003      	beq.n	80042d0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f000 f843 	bl	8004354 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80042ce:	e039      	b.n	8004344 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80042d0:	7bfb      	ldrb	r3, [r7, #15]
 80042d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80042d4:	d109      	bne.n	80042ea <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2228      	movs	r2, #40	@ 0x28
 80042e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f7ff f828 	bl	800333a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b28      	cmp	r3, #40	@ 0x28
 80042f4:	d111      	bne.n	800431a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a15      	ldr	r2, [pc, #84]	@ (8004350 <I2C_Slave_STOPF+0x25c>)
 80042fa:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2220      	movs	r2, #32
 8004306:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f7ff f829 	bl	800336a <HAL_I2C_ListenCpltCallback>
}
 8004318:	e014      	b.n	8004344 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800431e:	2b22      	cmp	r3, #34	@ 0x22
 8004320:	d002      	beq.n	8004328 <I2C_Slave_STOPF+0x234>
 8004322:	7bfb      	ldrb	r3, [r7, #15]
 8004324:	2b22      	cmp	r3, #34	@ 0x22
 8004326:	d10d      	bne.n	8004344 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2220      	movs	r2, #32
 8004332:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f7fe fffb 	bl	800333a <HAL_I2C_SlaveRxCpltCallback>
}
 8004344:	bf00      	nop
 8004346:	3710      	adds	r7, #16
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	080048e1 	.word	0x080048e1
 8004350:	ffff0000 	.word	0xffff0000

08004354 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004362:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800436a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800436c:	7bbb      	ldrb	r3, [r7, #14]
 800436e:	2b10      	cmp	r3, #16
 8004370:	d002      	beq.n	8004378 <I2C_ITError+0x24>
 8004372:	7bbb      	ldrb	r3, [r7, #14]
 8004374:	2b40      	cmp	r3, #64	@ 0x40
 8004376:	d10a      	bne.n	800438e <I2C_ITError+0x3a>
 8004378:	7bfb      	ldrb	r3, [r7, #15]
 800437a:	2b22      	cmp	r3, #34	@ 0x22
 800437c:	d107      	bne.n	800438e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800438c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800438e:	7bfb      	ldrb	r3, [r7, #15]
 8004390:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004394:	2b28      	cmp	r3, #40	@ 0x28
 8004396:	d107      	bne.n	80043a8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2228      	movs	r2, #40	@ 0x28
 80043a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80043a6:	e015      	b.n	80043d4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043b6:	d00a      	beq.n	80043ce <I2C_ITError+0x7a>
 80043b8:	7bfb      	ldrb	r3, [r7, #15]
 80043ba:	2b60      	cmp	r3, #96	@ 0x60
 80043bc:	d007      	beq.n	80043ce <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2220      	movs	r2, #32
 80043c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043e2:	d162      	bne.n	80044aa <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	685a      	ldr	r2, [r3, #4]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043f2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d020      	beq.n	8004444 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004406:	4a6a      	ldr	r2, [pc, #424]	@ (80045b0 <I2C_ITError+0x25c>)
 8004408:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800440e:	4618      	mov	r0, r3
 8004410:	f7fd fe76 	bl	8002100 <HAL_DMA_Abort_IT>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	f000 8089 	beq.w	800452e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f022 0201 	bic.w	r2, r2, #1
 800442a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2220      	movs	r2, #32
 8004430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004438:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800443e:	4610      	mov	r0, r2
 8004440:	4798      	blx	r3
 8004442:	e074      	b.n	800452e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004448:	4a59      	ldr	r2, [pc, #356]	@ (80045b0 <I2C_ITError+0x25c>)
 800444a:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004450:	4618      	mov	r0, r3
 8004452:	f7fd fe55 	bl	8002100 <HAL_DMA_Abort_IT>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d068      	beq.n	800452e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004466:	2b40      	cmp	r3, #64	@ 0x40
 8004468:	d10b      	bne.n	8004482 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	691a      	ldr	r2, [r3, #16]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004474:	b2d2      	uxtb	r2, r2
 8004476:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800447c:	1c5a      	adds	r2, r3, #1
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 0201 	bic.w	r2, r2, #1
 8004490:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2220      	movs	r2, #32
 8004496:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800449e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80044a4:	4610      	mov	r0, r2
 80044a6:	4798      	blx	r3
 80044a8:	e041      	b.n	800452e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	2b60      	cmp	r3, #96	@ 0x60
 80044b4:	d125      	bne.n	8004502 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2220      	movs	r2, #32
 80044ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044ce:	2b40      	cmp	r3, #64	@ 0x40
 80044d0:	d10b      	bne.n	80044ea <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	691a      	ldr	r2, [r3, #16]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044dc:	b2d2      	uxtb	r2, r2
 80044de:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e4:	1c5a      	adds	r2, r3, #1
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f022 0201 	bic.w	r2, r2, #1
 80044f8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f7fe ff5d 	bl	80033ba <HAL_I2C_AbortCpltCallback>
 8004500:	e015      	b.n	800452e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	695b      	ldr	r3, [r3, #20]
 8004508:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800450c:	2b40      	cmp	r3, #64	@ 0x40
 800450e:	d10b      	bne.n	8004528 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	691a      	ldr	r2, [r3, #16]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800451a:	b2d2      	uxtb	r2, r2
 800451c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004522:	1c5a      	adds	r2, r3, #1
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f7fe ff3c 	bl	80033a6 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004532:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10e      	bne.n	800455c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004544:	2b00      	cmp	r3, #0
 8004546:	d109      	bne.n	800455c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800454e:	2b00      	cmp	r3, #0
 8004550:	d104      	bne.n	800455c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004558:	2b00      	cmp	r3, #0
 800455a:	d007      	beq.n	800456c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685a      	ldr	r2, [r3, #4]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800456a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004572:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004578:	f003 0304 	and.w	r3, r3, #4
 800457c:	2b04      	cmp	r3, #4
 800457e:	d113      	bne.n	80045a8 <I2C_ITError+0x254>
 8004580:	7bfb      	ldrb	r3, [r7, #15]
 8004582:	2b28      	cmp	r3, #40	@ 0x28
 8004584:	d110      	bne.n	80045a8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a0a      	ldr	r2, [pc, #40]	@ (80045b4 <I2C_ITError+0x260>)
 800458a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2220      	movs	r2, #32
 8004596:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f7fe fee1 	bl	800336a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80045a8:	bf00      	nop
 80045aa:	3710      	adds	r7, #16
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	080048e1 	.word	0x080048e1
 80045b4:	ffff0000 	.word	0xffff0000

080045b8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b088      	sub	sp, #32
 80045bc:	af02      	add	r7, sp, #8
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	607a      	str	r2, [r7, #4]
 80045c2:	603b      	str	r3, [r7, #0]
 80045c4:	460b      	mov	r3, r1
 80045c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045cc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	2b08      	cmp	r3, #8
 80045d2:	d006      	beq.n	80045e2 <I2C_MasterRequestWrite+0x2a>
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d003      	beq.n	80045e2 <I2C_MasterRequestWrite+0x2a>
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80045e0:	d108      	bne.n	80045f4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045f0:	601a      	str	r2, [r3, #0]
 80045f2:	e00b      	b.n	800460c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f8:	2b12      	cmp	r3, #18
 80045fa:	d107      	bne.n	800460c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800460a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	9300      	str	r3, [sp, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f000 fa09 	bl	8004a30 <I2C_WaitOnFlagUntilTimeout>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00d      	beq.n	8004640 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800462e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004632:	d103      	bne.n	800463c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800463a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e035      	b.n	80046ac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004648:	d108      	bne.n	800465c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800464a:	897b      	ldrh	r3, [r7, #10]
 800464c:	b2db      	uxtb	r3, r3
 800464e:	461a      	mov	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004658:	611a      	str	r2, [r3, #16]
 800465a:	e01b      	b.n	8004694 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800465c:	897b      	ldrh	r3, [r7, #10]
 800465e:	11db      	asrs	r3, r3, #7
 8004660:	b2db      	uxtb	r3, r3
 8004662:	f003 0306 	and.w	r3, r3, #6
 8004666:	b2db      	uxtb	r3, r3
 8004668:	f063 030f 	orn	r3, r3, #15
 800466c:	b2da      	uxtb	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	490e      	ldr	r1, [pc, #56]	@ (80046b4 <I2C_MasterRequestWrite+0xfc>)
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f000 fa2f 	bl	8004ade <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d001      	beq.n	800468a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e010      	b.n	80046ac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800468a:	897b      	ldrh	r3, [r7, #10]
 800468c:	b2da      	uxtb	r2, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	4907      	ldr	r1, [pc, #28]	@ (80046b8 <I2C_MasterRequestWrite+0x100>)
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f000 fa1f 	bl	8004ade <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e000      	b.n	80046ac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3718      	adds	r7, #24
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	00010008 	.word	0x00010008
 80046b8:	00010002 	.word	0x00010002

080046bc <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b086      	sub	sp, #24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046c8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046d0:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80046d8:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046de:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	685a      	ldr	r2, [r3, #4]
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80046ee:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d003      	beq.n	8004700 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046fc:	2200      	movs	r2, #0
 80046fe:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004704:	2b00      	cmp	r3, #0
 8004706:	d003      	beq.n	8004710 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800470c:	2200      	movs	r2, #0
 800470e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8004710:	7cfb      	ldrb	r3, [r7, #19]
 8004712:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8004716:	2b21      	cmp	r3, #33	@ 0x21
 8004718:	d007      	beq.n	800472a <I2C_DMAXferCplt+0x6e>
 800471a:	7cfb      	ldrb	r3, [r7, #19]
 800471c:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8004720:	2b22      	cmp	r3, #34	@ 0x22
 8004722:	d131      	bne.n	8004788 <I2C_DMAXferCplt+0xcc>
 8004724:	7cbb      	ldrb	r3, [r7, #18]
 8004726:	2b20      	cmp	r3, #32
 8004728:	d12e      	bne.n	8004788 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	685a      	ldr	r2, [r3, #4]
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004738:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	2200      	movs	r2, #0
 800473e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004740:	7cfb      	ldrb	r3, [r7, #19]
 8004742:	2b29      	cmp	r3, #41	@ 0x29
 8004744:	d10a      	bne.n	800475c <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	2221      	movs	r2, #33	@ 0x21
 800474a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	2228      	movs	r2, #40	@ 0x28
 8004750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004754:	6978      	ldr	r0, [r7, #20]
 8004756:	f7fe fde6 	bl	8003326 <HAL_I2C_SlaveTxCpltCallback>
 800475a:	e00c      	b.n	8004776 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800475c:	7cfb      	ldrb	r3, [r7, #19]
 800475e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004760:	d109      	bne.n	8004776 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	2222      	movs	r2, #34	@ 0x22
 8004766:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	2228      	movs	r2, #40	@ 0x28
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004770:	6978      	ldr	r0, [r7, #20]
 8004772:	f7fe fde2 	bl	800333a <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	685a      	ldr	r2, [r3, #4]
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004784:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004786:	e06a      	b.n	800485e <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800478e:	b2db      	uxtb	r3, r3
 8004790:	2b00      	cmp	r3, #0
 8004792:	d064      	beq.n	800485e <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004798:	b29b      	uxth	r3, r3
 800479a:	2b01      	cmp	r3, #1
 800479c:	d107      	bne.n	80047ae <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047ac:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	685a      	ldr	r2, [r3, #4]
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80047bc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80047c4:	d009      	beq.n	80047da <I2C_DMAXferCplt+0x11e>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2b08      	cmp	r3, #8
 80047ca:	d006      	beq.n	80047da <I2C_DMAXferCplt+0x11e>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80047d2:	d002      	beq.n	80047da <I2C_DMAXferCplt+0x11e>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2b20      	cmp	r3, #32
 80047d8:	d107      	bne.n	80047ea <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047e8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	685a      	ldr	r2, [r3, #4]
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80047f8:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	685a      	ldr	r2, [r3, #4]
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004808:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	2200      	movs	r2, #0
 800480e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004814:	2b00      	cmp	r3, #0
 8004816:	d003      	beq.n	8004820 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8004818:	6978      	ldr	r0, [r7, #20]
 800481a:	f7fe fdc4 	bl	80033a6 <HAL_I2C_ErrorCallback>
}
 800481e:	e01e      	b.n	800485e <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	2220      	movs	r2, #32
 8004824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800482e:	b2db      	uxtb	r3, r3
 8004830:	2b40      	cmp	r3, #64	@ 0x40
 8004832:	d10a      	bne.n	800484a <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	2200      	movs	r2, #0
 8004840:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004842:	6978      	ldr	r0, [r7, #20]
 8004844:	f7fe fda5 	bl	8003392 <HAL_I2C_MemRxCpltCallback>
}
 8004848:	e009      	b.n	800485e <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	2212      	movs	r2, #18
 8004856:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004858:	6978      	ldr	r0, [r7, #20]
 800485a:	f7fc fb8b 	bl	8000f74 <HAL_I2C_MasterRxCpltCallback>
}
 800485e:	bf00      	nop
 8004860:	3718      	adds	r7, #24
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}

08004866 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004866:	b580      	push	{r7, lr}
 8004868:	b084      	sub	sp, #16
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004872:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004878:	2b00      	cmp	r3, #0
 800487a:	d003      	beq.n	8004884 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004880:	2200      	movs	r2, #0
 8004882:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004888:	2b00      	cmp	r3, #0
 800488a:	d003      	beq.n	8004894 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004890:	2200      	movs	r2, #0
 8004892:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f7fd fded 	bl	8002474 <HAL_DMA_GetError>
 800489a:	4603      	mov	r3, r0
 800489c:	2b02      	cmp	r3, #2
 800489e:	d01b      	beq.n	80048d8 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048ae:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2200      	movs	r2, #0
 80048b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2220      	movs	r2, #32
 80048ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ca:	f043 0210 	orr.w	r2, r3, #16
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80048d2:	68f8      	ldr	r0, [r7, #12]
 80048d4:	f7fe fd67 	bl	80033a6 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80048d8:	bf00      	nop
 80048da:	3710      	adds	r7, #16
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b086      	sub	sp, #24
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048e8:	2300      	movs	r3, #0
 80048ea:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048f0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048f8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80048fa:	4b4b      	ldr	r3, [pc, #300]	@ (8004a28 <I2C_DMAAbort+0x148>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	08db      	lsrs	r3, r3, #3
 8004900:	4a4a      	ldr	r2, [pc, #296]	@ (8004a2c <I2C_DMAAbort+0x14c>)
 8004902:	fba2 2303 	umull	r2, r3, r2, r3
 8004906:	0a1a      	lsrs	r2, r3, #8
 8004908:	4613      	mov	r3, r2
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	4413      	add	r3, r2
 800490e:	00da      	lsls	r2, r3, #3
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d106      	bne.n	8004928 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800491e:	f043 0220 	orr.w	r2, r3, #32
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004926:	e00a      	b.n	800493e <I2C_DMAAbort+0x5e>
    }
    count--;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	3b01      	subs	r3, #1
 800492c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004938:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800493c:	d0ea      	beq.n	8004914 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004942:	2b00      	cmp	r3, #0
 8004944:	d003      	beq.n	800494e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800494a:	2200      	movs	r2, #0
 800494c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004952:	2b00      	cmp	r3, #0
 8004954:	d003      	beq.n	800495e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800495a:	2200      	movs	r2, #0
 800495c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800496c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	2200      	movs	r2, #0
 8004972:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004978:	2b00      	cmp	r3, #0
 800497a:	d003      	beq.n	8004984 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004980:	2200      	movs	r2, #0
 8004982:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004988:	2b00      	cmp	r3, #0
 800498a:	d003      	beq.n	8004994 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004990:	2200      	movs	r2, #0
 8004992:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f022 0201 	bic.w	r2, r2, #1
 80049a2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	2b60      	cmp	r3, #96	@ 0x60
 80049ae:	d10e      	bne.n	80049ce <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	2220      	movs	r2, #32
 80049b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	2200      	movs	r2, #0
 80049c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80049c6:	6978      	ldr	r0, [r7, #20]
 80049c8:	f7fe fcf7 	bl	80033ba <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80049cc:	e027      	b.n	8004a1e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80049ce:	7cfb      	ldrb	r3, [r7, #19]
 80049d0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80049d4:	2b28      	cmp	r3, #40	@ 0x28
 80049d6:	d117      	bne.n	8004a08 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f042 0201 	orr.w	r2, r2, #1
 80049e6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80049f6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	2200      	movs	r2, #0
 80049fc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	2228      	movs	r2, #40	@ 0x28
 8004a02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004a06:	e007      	b.n	8004a18 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	2220      	movs	r2, #32
 8004a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004a18:	6978      	ldr	r0, [r7, #20]
 8004a1a:	f7fe fcc4 	bl	80033a6 <HAL_I2C_ErrorCallback>
}
 8004a1e:	bf00      	nop
 8004a20:	3718      	adds	r7, #24
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	20000004 	.word	0x20000004
 8004a2c:	14f8b589 	.word	0x14f8b589

08004a30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	603b      	str	r3, [r7, #0]
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a40:	e025      	b.n	8004a8e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a48:	d021      	beq.n	8004a8e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a4a:	f7fd f8c5 	bl	8001bd8 <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	683a      	ldr	r2, [r7, #0]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d302      	bcc.n	8004a60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d116      	bne.n	8004a8e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2220      	movs	r2, #32
 8004a6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a7a:	f043 0220 	orr.w	r2, r3, #32
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e023      	b.n	8004ad6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	0c1b      	lsrs	r3, r3, #16
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d10d      	bne.n	8004ab4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	43da      	mvns	r2, r3
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	bf0c      	ite	eq
 8004aaa:	2301      	moveq	r3, #1
 8004aac:	2300      	movne	r3, #0
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	e00c      	b.n	8004ace <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	43da      	mvns	r2, r3
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	4013      	ands	r3, r2
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	bf0c      	ite	eq
 8004ac6:	2301      	moveq	r3, #1
 8004ac8:	2300      	movne	r3, #0
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	461a      	mov	r2, r3
 8004ace:	79fb      	ldrb	r3, [r7, #7]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d0b6      	beq.n	8004a42 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3710      	adds	r7, #16
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}

08004ade <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004ade:	b580      	push	{r7, lr}
 8004ae0:	b084      	sub	sp, #16
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	60f8      	str	r0, [r7, #12]
 8004ae6:	60b9      	str	r1, [r7, #8]
 8004ae8:	607a      	str	r2, [r7, #4]
 8004aea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004aec:	e051      	b.n	8004b92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004af8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004afc:	d123      	bne.n	8004b46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b0c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004b16:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2220      	movs	r2, #32
 8004b22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b32:	f043 0204 	orr.w	r2, r3, #4
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e046      	b.n	8004bd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b4c:	d021      	beq.n	8004b92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b4e:	f7fd f843 	bl	8001bd8 <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d302      	bcc.n	8004b64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d116      	bne.n	8004b92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2200      	movs	r2, #0
 8004b68:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2220      	movs	r2, #32
 8004b6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b7e:	f043 0220 	orr.w	r2, r3, #32
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e020      	b.n	8004bd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	0c1b      	lsrs	r3, r3, #16
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d10c      	bne.n	8004bb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	43da      	mvns	r2, r3
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	bf14      	ite	ne
 8004bae:	2301      	movne	r3, #1
 8004bb0:	2300      	moveq	r3, #0
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	e00b      	b.n	8004bce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	43da      	mvns	r2, r3
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	bf14      	ite	ne
 8004bc8:	2301      	movne	r3, #1
 8004bca:	2300      	moveq	r3, #0
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d18d      	bne.n	8004aee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3710      	adds	r7, #16
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004be8:	e02d      	b.n	8004c46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f000 f8aa 	bl	8004d44 <I2C_IsAcknowledgeFailed>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d001      	beq.n	8004bfa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e02d      	b.n	8004c56 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c00:	d021      	beq.n	8004c46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c02:	f7fc ffe9 	bl	8001bd8 <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d302      	bcc.n	8004c18 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d116      	bne.n	8004c46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2220      	movs	r2, #32
 8004c22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c32:	f043 0220 	orr.w	r2, r3, #32
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e007      	b.n	8004c56 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c50:	2b80      	cmp	r3, #128	@ 0x80
 8004c52:	d1ca      	bne.n	8004bea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3710      	adds	r7, #16
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b084      	sub	sp, #16
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	60f8      	str	r0, [r7, #12]
 8004c66:	60b9      	str	r1, [r7, #8]
 8004c68:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c6a:	e02d      	b.n	8004cc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c6c:	68f8      	ldr	r0, [r7, #12]
 8004c6e:	f000 f869 	bl	8004d44 <I2C_IsAcknowledgeFailed>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d001      	beq.n	8004c7c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e02d      	b.n	8004cd8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c82:	d021      	beq.n	8004cc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c84:	f7fc ffa8 	bl	8001bd8 <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d302      	bcc.n	8004c9a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d116      	bne.n	8004cc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb4:	f043 0220 	orr.w	r2, r3, #32
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e007      	b.n	8004cd8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	f003 0304 	and.w	r3, r3, #4
 8004cd2:	2b04      	cmp	r3, #4
 8004cd4:	d1ca      	bne.n	8004c6c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3710      	adds	r7, #16
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b085      	sub	sp, #20
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004cec:	4b13      	ldr	r3, [pc, #76]	@ (8004d3c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	08db      	lsrs	r3, r3, #3
 8004cf2:	4a13      	ldr	r2, [pc, #76]	@ (8004d40 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf8:	0a1a      	lsrs	r2, r3, #8
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	4413      	add	r3, r2
 8004d00:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	3b01      	subs	r3, #1
 8004d06:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d107      	bne.n	8004d1e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d12:	f043 0220 	orr.w	r2, r3, #32
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e008      	b.n	8004d30 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d2c:	d0e9      	beq.n	8004d02 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3714      	adds	r7, #20
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr
 8004d3c:	20000004 	.word	0x20000004
 8004d40:	14f8b589 	.word	0x14f8b589

08004d44 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d5a:	d11b      	bne.n	8004d94 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004d64:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d80:	f043 0204 	orr.w	r2, r3, #4
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e000      	b.n	8004d96 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	370c      	adds	r7, #12
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr

08004da2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004da2:	b480      	push	{r7}
 8004da4:	b083      	sub	sp, #12
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dae:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004db2:	d103      	bne.n	8004dbc <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004dba:	e007      	b.n	8004dcc <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc0:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004dc4:	d102      	bne.n	8004dcc <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2208      	movs	r2, #8
 8004dca:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b086      	sub	sp, #24
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d101      	bne.n	8004dea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e267      	b.n	80052ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0301 	and.w	r3, r3, #1
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d075      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004df6:	4b88      	ldr	r3, [pc, #544]	@ (8005018 <HAL_RCC_OscConfig+0x240>)
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f003 030c 	and.w	r3, r3, #12
 8004dfe:	2b04      	cmp	r3, #4
 8004e00:	d00c      	beq.n	8004e1c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e02:	4b85      	ldr	r3, [pc, #532]	@ (8005018 <HAL_RCC_OscConfig+0x240>)
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e0a:	2b08      	cmp	r3, #8
 8004e0c:	d112      	bne.n	8004e34 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e0e:	4b82      	ldr	r3, [pc, #520]	@ (8005018 <HAL_RCC_OscConfig+0x240>)
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e16:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e1a:	d10b      	bne.n	8004e34 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e1c:	4b7e      	ldr	r3, [pc, #504]	@ (8005018 <HAL_RCC_OscConfig+0x240>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d05b      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x108>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d157      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e242      	b.n	80052ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e3c:	d106      	bne.n	8004e4c <HAL_RCC_OscConfig+0x74>
 8004e3e:	4b76      	ldr	r3, [pc, #472]	@ (8005018 <HAL_RCC_OscConfig+0x240>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a75      	ldr	r2, [pc, #468]	@ (8005018 <HAL_RCC_OscConfig+0x240>)
 8004e44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e48:	6013      	str	r3, [r2, #0]
 8004e4a:	e01d      	b.n	8004e88 <HAL_RCC_OscConfig+0xb0>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e54:	d10c      	bne.n	8004e70 <HAL_RCC_OscConfig+0x98>
 8004e56:	4b70      	ldr	r3, [pc, #448]	@ (8005018 <HAL_RCC_OscConfig+0x240>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a6f      	ldr	r2, [pc, #444]	@ (8005018 <HAL_RCC_OscConfig+0x240>)
 8004e5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e60:	6013      	str	r3, [r2, #0]
 8004e62:	4b6d      	ldr	r3, [pc, #436]	@ (8005018 <HAL_RCC_OscConfig+0x240>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a6c      	ldr	r2, [pc, #432]	@ (8005018 <HAL_RCC_OscConfig+0x240>)
 8004e68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e6c:	6013      	str	r3, [r2, #0]
 8004e6e:	e00b      	b.n	8004e88 <HAL_RCC_OscConfig+0xb0>
 8004e70:	4b69      	ldr	r3, [pc, #420]	@ (8005018 <HAL_RCC_OscConfig+0x240>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a68      	ldr	r2, [pc, #416]	@ (8005018 <HAL_RCC_OscConfig+0x240>)
 8004e76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e7a:	6013      	str	r3, [r2, #0]
 8004e7c:	4b66      	ldr	r3, [pc, #408]	@ (8005018 <HAL_RCC_OscConfig+0x240>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a65      	ldr	r2, [pc, #404]	@ (8005018 <HAL_RCC_OscConfig+0x240>)
 8004e82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d013      	beq.n	8004eb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e90:	f7fc fea2 	bl	8001bd8 <HAL_GetTick>
 8004e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e96:	e008      	b.n	8004eaa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e98:	f7fc fe9e 	bl	8001bd8 <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	2b64      	cmp	r3, #100	@ 0x64
 8004ea4:	d901      	bls.n	8004eaa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e207      	b.n	80052ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eaa:	4b5b      	ldr	r3, [pc, #364]	@ (8005018 <HAL_RCC_OscConfig+0x240>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d0f0      	beq.n	8004e98 <HAL_RCC_OscConfig+0xc0>
 8004eb6:	e014      	b.n	8004ee2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eb8:	f7fc fe8e 	bl	8001bd8 <HAL_GetTick>
 8004ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ebe:	e008      	b.n	8004ed2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ec0:	f7fc fe8a 	bl	8001bd8 <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	2b64      	cmp	r3, #100	@ 0x64
 8004ecc:	d901      	bls.n	8004ed2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e1f3      	b.n	80052ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ed2:	4b51      	ldr	r3, [pc, #324]	@ (8005018 <HAL_RCC_OscConfig+0x240>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1f0      	bne.n	8004ec0 <HAL_RCC_OscConfig+0xe8>
 8004ede:	e000      	b.n	8004ee2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ee0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0302 	and.w	r3, r3, #2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d063      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004eee:	4b4a      	ldr	r3, [pc, #296]	@ (8005018 <HAL_RCC_OscConfig+0x240>)
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f003 030c 	and.w	r3, r3, #12
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00b      	beq.n	8004f12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004efa:	4b47      	ldr	r3, [pc, #284]	@ (8005018 <HAL_RCC_OscConfig+0x240>)
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f02:	2b08      	cmp	r3, #8
 8004f04:	d11c      	bne.n	8004f40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f06:	4b44      	ldr	r3, [pc, #272]	@ (8005018 <HAL_RCC_OscConfig+0x240>)
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d116      	bne.n	8004f40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f12:	4b41      	ldr	r3, [pc, #260]	@ (8005018 <HAL_RCC_OscConfig+0x240>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0302 	and.w	r3, r3, #2
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d005      	beq.n	8004f2a <HAL_RCC_OscConfig+0x152>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d001      	beq.n	8004f2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e1c7      	b.n	80052ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f2a:	4b3b      	ldr	r3, [pc, #236]	@ (8005018 <HAL_RCC_OscConfig+0x240>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	00db      	lsls	r3, r3, #3
 8004f38:	4937      	ldr	r1, [pc, #220]	@ (8005018 <HAL_RCC_OscConfig+0x240>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f3e:	e03a      	b.n	8004fb6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d020      	beq.n	8004f8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f48:	4b34      	ldr	r3, [pc, #208]	@ (800501c <HAL_RCC_OscConfig+0x244>)
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f4e:	f7fc fe43 	bl	8001bd8 <HAL_GetTick>
 8004f52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f54:	e008      	b.n	8004f68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f56:	f7fc fe3f 	bl	8001bd8 <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d901      	bls.n	8004f68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e1a8      	b.n	80052ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f68:	4b2b      	ldr	r3, [pc, #172]	@ (8005018 <HAL_RCC_OscConfig+0x240>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0302 	and.w	r3, r3, #2
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d0f0      	beq.n	8004f56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f74:	4b28      	ldr	r3, [pc, #160]	@ (8005018 <HAL_RCC_OscConfig+0x240>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	691b      	ldr	r3, [r3, #16]
 8004f80:	00db      	lsls	r3, r3, #3
 8004f82:	4925      	ldr	r1, [pc, #148]	@ (8005018 <HAL_RCC_OscConfig+0x240>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	600b      	str	r3, [r1, #0]
 8004f88:	e015      	b.n	8004fb6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f8a:	4b24      	ldr	r3, [pc, #144]	@ (800501c <HAL_RCC_OscConfig+0x244>)
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f90:	f7fc fe22 	bl	8001bd8 <HAL_GetTick>
 8004f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f96:	e008      	b.n	8004faa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f98:	f7fc fe1e 	bl	8001bd8 <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d901      	bls.n	8004faa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e187      	b.n	80052ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004faa:	4b1b      	ldr	r3, [pc, #108]	@ (8005018 <HAL_RCC_OscConfig+0x240>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0302 	and.w	r3, r3, #2
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d1f0      	bne.n	8004f98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0308 	and.w	r3, r3, #8
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d036      	beq.n	8005030 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d016      	beq.n	8004ff8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fca:	4b15      	ldr	r3, [pc, #84]	@ (8005020 <HAL_RCC_OscConfig+0x248>)
 8004fcc:	2201      	movs	r2, #1
 8004fce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fd0:	f7fc fe02 	bl	8001bd8 <HAL_GetTick>
 8004fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fd6:	e008      	b.n	8004fea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fd8:	f7fc fdfe 	bl	8001bd8 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d901      	bls.n	8004fea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e167      	b.n	80052ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fea:	4b0b      	ldr	r3, [pc, #44]	@ (8005018 <HAL_RCC_OscConfig+0x240>)
 8004fec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fee:	f003 0302 	and.w	r3, r3, #2
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d0f0      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x200>
 8004ff6:	e01b      	b.n	8005030 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ff8:	4b09      	ldr	r3, [pc, #36]	@ (8005020 <HAL_RCC_OscConfig+0x248>)
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ffe:	f7fc fdeb 	bl	8001bd8 <HAL_GetTick>
 8005002:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005004:	e00e      	b.n	8005024 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005006:	f7fc fde7 	bl	8001bd8 <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	2b02      	cmp	r3, #2
 8005012:	d907      	bls.n	8005024 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e150      	b.n	80052ba <HAL_RCC_OscConfig+0x4e2>
 8005018:	40023800 	.word	0x40023800
 800501c:	42470000 	.word	0x42470000
 8005020:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005024:	4b88      	ldr	r3, [pc, #544]	@ (8005248 <HAL_RCC_OscConfig+0x470>)
 8005026:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005028:	f003 0302 	and.w	r3, r3, #2
 800502c:	2b00      	cmp	r3, #0
 800502e:	d1ea      	bne.n	8005006 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0304 	and.w	r3, r3, #4
 8005038:	2b00      	cmp	r3, #0
 800503a:	f000 8097 	beq.w	800516c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800503e:	2300      	movs	r3, #0
 8005040:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005042:	4b81      	ldr	r3, [pc, #516]	@ (8005248 <HAL_RCC_OscConfig+0x470>)
 8005044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005046:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d10f      	bne.n	800506e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800504e:	2300      	movs	r3, #0
 8005050:	60bb      	str	r3, [r7, #8]
 8005052:	4b7d      	ldr	r3, [pc, #500]	@ (8005248 <HAL_RCC_OscConfig+0x470>)
 8005054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005056:	4a7c      	ldr	r2, [pc, #496]	@ (8005248 <HAL_RCC_OscConfig+0x470>)
 8005058:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800505c:	6413      	str	r3, [r2, #64]	@ 0x40
 800505e:	4b7a      	ldr	r3, [pc, #488]	@ (8005248 <HAL_RCC_OscConfig+0x470>)
 8005060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005062:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005066:	60bb      	str	r3, [r7, #8]
 8005068:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800506a:	2301      	movs	r3, #1
 800506c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800506e:	4b77      	ldr	r3, [pc, #476]	@ (800524c <HAL_RCC_OscConfig+0x474>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005076:	2b00      	cmp	r3, #0
 8005078:	d118      	bne.n	80050ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800507a:	4b74      	ldr	r3, [pc, #464]	@ (800524c <HAL_RCC_OscConfig+0x474>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a73      	ldr	r2, [pc, #460]	@ (800524c <HAL_RCC_OscConfig+0x474>)
 8005080:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005084:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005086:	f7fc fda7 	bl	8001bd8 <HAL_GetTick>
 800508a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800508c:	e008      	b.n	80050a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800508e:	f7fc fda3 	bl	8001bd8 <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	2b02      	cmp	r3, #2
 800509a:	d901      	bls.n	80050a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	e10c      	b.n	80052ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050a0:	4b6a      	ldr	r3, [pc, #424]	@ (800524c <HAL_RCC_OscConfig+0x474>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d0f0      	beq.n	800508e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d106      	bne.n	80050c2 <HAL_RCC_OscConfig+0x2ea>
 80050b4:	4b64      	ldr	r3, [pc, #400]	@ (8005248 <HAL_RCC_OscConfig+0x470>)
 80050b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050b8:	4a63      	ldr	r2, [pc, #396]	@ (8005248 <HAL_RCC_OscConfig+0x470>)
 80050ba:	f043 0301 	orr.w	r3, r3, #1
 80050be:	6713      	str	r3, [r2, #112]	@ 0x70
 80050c0:	e01c      	b.n	80050fc <HAL_RCC_OscConfig+0x324>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	2b05      	cmp	r3, #5
 80050c8:	d10c      	bne.n	80050e4 <HAL_RCC_OscConfig+0x30c>
 80050ca:	4b5f      	ldr	r3, [pc, #380]	@ (8005248 <HAL_RCC_OscConfig+0x470>)
 80050cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ce:	4a5e      	ldr	r2, [pc, #376]	@ (8005248 <HAL_RCC_OscConfig+0x470>)
 80050d0:	f043 0304 	orr.w	r3, r3, #4
 80050d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80050d6:	4b5c      	ldr	r3, [pc, #368]	@ (8005248 <HAL_RCC_OscConfig+0x470>)
 80050d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050da:	4a5b      	ldr	r2, [pc, #364]	@ (8005248 <HAL_RCC_OscConfig+0x470>)
 80050dc:	f043 0301 	orr.w	r3, r3, #1
 80050e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80050e2:	e00b      	b.n	80050fc <HAL_RCC_OscConfig+0x324>
 80050e4:	4b58      	ldr	r3, [pc, #352]	@ (8005248 <HAL_RCC_OscConfig+0x470>)
 80050e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050e8:	4a57      	ldr	r2, [pc, #348]	@ (8005248 <HAL_RCC_OscConfig+0x470>)
 80050ea:	f023 0301 	bic.w	r3, r3, #1
 80050ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80050f0:	4b55      	ldr	r3, [pc, #340]	@ (8005248 <HAL_RCC_OscConfig+0x470>)
 80050f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050f4:	4a54      	ldr	r2, [pc, #336]	@ (8005248 <HAL_RCC_OscConfig+0x470>)
 80050f6:	f023 0304 	bic.w	r3, r3, #4
 80050fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d015      	beq.n	8005130 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005104:	f7fc fd68 	bl	8001bd8 <HAL_GetTick>
 8005108:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800510a:	e00a      	b.n	8005122 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800510c:	f7fc fd64 	bl	8001bd8 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	f241 3288 	movw	r2, #5000	@ 0x1388
 800511a:	4293      	cmp	r3, r2
 800511c:	d901      	bls.n	8005122 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e0cb      	b.n	80052ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005122:	4b49      	ldr	r3, [pc, #292]	@ (8005248 <HAL_RCC_OscConfig+0x470>)
 8005124:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005126:	f003 0302 	and.w	r3, r3, #2
 800512a:	2b00      	cmp	r3, #0
 800512c:	d0ee      	beq.n	800510c <HAL_RCC_OscConfig+0x334>
 800512e:	e014      	b.n	800515a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005130:	f7fc fd52 	bl	8001bd8 <HAL_GetTick>
 8005134:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005136:	e00a      	b.n	800514e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005138:	f7fc fd4e 	bl	8001bd8 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005146:	4293      	cmp	r3, r2
 8005148:	d901      	bls.n	800514e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e0b5      	b.n	80052ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800514e:	4b3e      	ldr	r3, [pc, #248]	@ (8005248 <HAL_RCC_OscConfig+0x470>)
 8005150:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005152:	f003 0302 	and.w	r3, r3, #2
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1ee      	bne.n	8005138 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800515a:	7dfb      	ldrb	r3, [r7, #23]
 800515c:	2b01      	cmp	r3, #1
 800515e:	d105      	bne.n	800516c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005160:	4b39      	ldr	r3, [pc, #228]	@ (8005248 <HAL_RCC_OscConfig+0x470>)
 8005162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005164:	4a38      	ldr	r2, [pc, #224]	@ (8005248 <HAL_RCC_OscConfig+0x470>)
 8005166:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800516a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	699b      	ldr	r3, [r3, #24]
 8005170:	2b00      	cmp	r3, #0
 8005172:	f000 80a1 	beq.w	80052b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005176:	4b34      	ldr	r3, [pc, #208]	@ (8005248 <HAL_RCC_OscConfig+0x470>)
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	f003 030c 	and.w	r3, r3, #12
 800517e:	2b08      	cmp	r3, #8
 8005180:	d05c      	beq.n	800523c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	2b02      	cmp	r3, #2
 8005188:	d141      	bne.n	800520e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800518a:	4b31      	ldr	r3, [pc, #196]	@ (8005250 <HAL_RCC_OscConfig+0x478>)
 800518c:	2200      	movs	r2, #0
 800518e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005190:	f7fc fd22 	bl	8001bd8 <HAL_GetTick>
 8005194:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005196:	e008      	b.n	80051aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005198:	f7fc fd1e 	bl	8001bd8 <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d901      	bls.n	80051aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e087      	b.n	80052ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051aa:	4b27      	ldr	r3, [pc, #156]	@ (8005248 <HAL_RCC_OscConfig+0x470>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1f0      	bne.n	8005198 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	69da      	ldr	r2, [r3, #28]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	431a      	orrs	r2, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c4:	019b      	lsls	r3, r3, #6
 80051c6:	431a      	orrs	r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051cc:	085b      	lsrs	r3, r3, #1
 80051ce:	3b01      	subs	r3, #1
 80051d0:	041b      	lsls	r3, r3, #16
 80051d2:	431a      	orrs	r2, r3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d8:	061b      	lsls	r3, r3, #24
 80051da:	491b      	ldr	r1, [pc, #108]	@ (8005248 <HAL_RCC_OscConfig+0x470>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051e0:	4b1b      	ldr	r3, [pc, #108]	@ (8005250 <HAL_RCC_OscConfig+0x478>)
 80051e2:	2201      	movs	r2, #1
 80051e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051e6:	f7fc fcf7 	bl	8001bd8 <HAL_GetTick>
 80051ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051ec:	e008      	b.n	8005200 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051ee:	f7fc fcf3 	bl	8001bd8 <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d901      	bls.n	8005200 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80051fc:	2303      	movs	r3, #3
 80051fe:	e05c      	b.n	80052ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005200:	4b11      	ldr	r3, [pc, #68]	@ (8005248 <HAL_RCC_OscConfig+0x470>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d0f0      	beq.n	80051ee <HAL_RCC_OscConfig+0x416>
 800520c:	e054      	b.n	80052b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800520e:	4b10      	ldr	r3, [pc, #64]	@ (8005250 <HAL_RCC_OscConfig+0x478>)
 8005210:	2200      	movs	r2, #0
 8005212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005214:	f7fc fce0 	bl	8001bd8 <HAL_GetTick>
 8005218:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800521a:	e008      	b.n	800522e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800521c:	f7fc fcdc 	bl	8001bd8 <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	2b02      	cmp	r3, #2
 8005228:	d901      	bls.n	800522e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e045      	b.n	80052ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800522e:	4b06      	ldr	r3, [pc, #24]	@ (8005248 <HAL_RCC_OscConfig+0x470>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1f0      	bne.n	800521c <HAL_RCC_OscConfig+0x444>
 800523a:	e03d      	b.n	80052b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	2b01      	cmp	r3, #1
 8005242:	d107      	bne.n	8005254 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e038      	b.n	80052ba <HAL_RCC_OscConfig+0x4e2>
 8005248:	40023800 	.word	0x40023800
 800524c:	40007000 	.word	0x40007000
 8005250:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005254:	4b1b      	ldr	r3, [pc, #108]	@ (80052c4 <HAL_RCC_OscConfig+0x4ec>)
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	2b01      	cmp	r3, #1
 8005260:	d028      	beq.n	80052b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800526c:	429a      	cmp	r2, r3
 800526e:	d121      	bne.n	80052b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800527a:	429a      	cmp	r2, r3
 800527c:	d11a      	bne.n	80052b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005284:	4013      	ands	r3, r2
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800528a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800528c:	4293      	cmp	r3, r2
 800528e:	d111      	bne.n	80052b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800529a:	085b      	lsrs	r3, r3, #1
 800529c:	3b01      	subs	r3, #1
 800529e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d107      	bne.n	80052b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d001      	beq.n	80052b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e000      	b.n	80052ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3718      	adds	r7, #24
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	40023800 	.word	0x40023800

080052c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d101      	bne.n	80052dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e0cc      	b.n	8005476 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052dc:	4b68      	ldr	r3, [pc, #416]	@ (8005480 <HAL_RCC_ClockConfig+0x1b8>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0307 	and.w	r3, r3, #7
 80052e4:	683a      	ldr	r2, [r7, #0]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d90c      	bls.n	8005304 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ea:	4b65      	ldr	r3, [pc, #404]	@ (8005480 <HAL_RCC_ClockConfig+0x1b8>)
 80052ec:	683a      	ldr	r2, [r7, #0]
 80052ee:	b2d2      	uxtb	r2, r2
 80052f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052f2:	4b63      	ldr	r3, [pc, #396]	@ (8005480 <HAL_RCC_ClockConfig+0x1b8>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0307 	and.w	r3, r3, #7
 80052fa:	683a      	ldr	r2, [r7, #0]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d001      	beq.n	8005304 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e0b8      	b.n	8005476 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0302 	and.w	r3, r3, #2
 800530c:	2b00      	cmp	r3, #0
 800530e:	d020      	beq.n	8005352 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0304 	and.w	r3, r3, #4
 8005318:	2b00      	cmp	r3, #0
 800531a:	d005      	beq.n	8005328 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800531c:	4b59      	ldr	r3, [pc, #356]	@ (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	4a58      	ldr	r2, [pc, #352]	@ (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 8005322:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005326:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0308 	and.w	r3, r3, #8
 8005330:	2b00      	cmp	r3, #0
 8005332:	d005      	beq.n	8005340 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005334:	4b53      	ldr	r3, [pc, #332]	@ (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	4a52      	ldr	r2, [pc, #328]	@ (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 800533a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800533e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005340:	4b50      	ldr	r3, [pc, #320]	@ (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	494d      	ldr	r1, [pc, #308]	@ (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 800534e:	4313      	orrs	r3, r2
 8005350:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0301 	and.w	r3, r3, #1
 800535a:	2b00      	cmp	r3, #0
 800535c:	d044      	beq.n	80053e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d107      	bne.n	8005376 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005366:	4b47      	ldr	r3, [pc, #284]	@ (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d119      	bne.n	80053a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e07f      	b.n	8005476 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	2b02      	cmp	r3, #2
 800537c:	d003      	beq.n	8005386 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005382:	2b03      	cmp	r3, #3
 8005384:	d107      	bne.n	8005396 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005386:	4b3f      	ldr	r3, [pc, #252]	@ (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d109      	bne.n	80053a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e06f      	b.n	8005476 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005396:	4b3b      	ldr	r3, [pc, #236]	@ (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0302 	and.w	r3, r3, #2
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d101      	bne.n	80053a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e067      	b.n	8005476 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053a6:	4b37      	ldr	r3, [pc, #220]	@ (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f023 0203 	bic.w	r2, r3, #3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	4934      	ldr	r1, [pc, #208]	@ (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053b8:	f7fc fc0e 	bl	8001bd8 <HAL_GetTick>
 80053bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053be:	e00a      	b.n	80053d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053c0:	f7fc fc0a 	bl	8001bd8 <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d901      	bls.n	80053d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e04f      	b.n	8005476 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053d6:	4b2b      	ldr	r3, [pc, #172]	@ (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f003 020c 	and.w	r2, r3, #12
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d1eb      	bne.n	80053c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053e8:	4b25      	ldr	r3, [pc, #148]	@ (8005480 <HAL_RCC_ClockConfig+0x1b8>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0307 	and.w	r3, r3, #7
 80053f0:	683a      	ldr	r2, [r7, #0]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d20c      	bcs.n	8005410 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053f6:	4b22      	ldr	r3, [pc, #136]	@ (8005480 <HAL_RCC_ClockConfig+0x1b8>)
 80053f8:	683a      	ldr	r2, [r7, #0]
 80053fa:	b2d2      	uxtb	r2, r2
 80053fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053fe:	4b20      	ldr	r3, [pc, #128]	@ (8005480 <HAL_RCC_ClockConfig+0x1b8>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0307 	and.w	r3, r3, #7
 8005406:	683a      	ldr	r2, [r7, #0]
 8005408:	429a      	cmp	r2, r3
 800540a:	d001      	beq.n	8005410 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e032      	b.n	8005476 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0304 	and.w	r3, r3, #4
 8005418:	2b00      	cmp	r3, #0
 800541a:	d008      	beq.n	800542e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800541c:	4b19      	ldr	r3, [pc, #100]	@ (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	4916      	ldr	r1, [pc, #88]	@ (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 800542a:	4313      	orrs	r3, r2
 800542c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0308 	and.w	r3, r3, #8
 8005436:	2b00      	cmp	r3, #0
 8005438:	d009      	beq.n	800544e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800543a:	4b12      	ldr	r3, [pc, #72]	@ (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	00db      	lsls	r3, r3, #3
 8005448:	490e      	ldr	r1, [pc, #56]	@ (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 800544a:	4313      	orrs	r3, r2
 800544c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800544e:	f000 f821 	bl	8005494 <HAL_RCC_GetSysClockFreq>
 8005452:	4602      	mov	r2, r0
 8005454:	4b0b      	ldr	r3, [pc, #44]	@ (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	091b      	lsrs	r3, r3, #4
 800545a:	f003 030f 	and.w	r3, r3, #15
 800545e:	490a      	ldr	r1, [pc, #40]	@ (8005488 <HAL_RCC_ClockConfig+0x1c0>)
 8005460:	5ccb      	ldrb	r3, [r1, r3]
 8005462:	fa22 f303 	lsr.w	r3, r2, r3
 8005466:	4a09      	ldr	r2, [pc, #36]	@ (800548c <HAL_RCC_ClockConfig+0x1c4>)
 8005468:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800546a:	4b09      	ldr	r3, [pc, #36]	@ (8005490 <HAL_RCC_ClockConfig+0x1c8>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4618      	mov	r0, r3
 8005470:	f7fc fb6e 	bl	8001b50 <HAL_InitTick>

  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3710      	adds	r7, #16
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	40023c00 	.word	0x40023c00
 8005484:	40023800 	.word	0x40023800
 8005488:	08009fa8 	.word	0x08009fa8
 800548c:	20000004 	.word	0x20000004
 8005490:	20000008 	.word	0x20000008

08005494 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005494:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005498:	b094      	sub	sp, #80	@ 0x50
 800549a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800549c:	2300      	movs	r3, #0
 800549e:	647b      	str	r3, [r7, #68]	@ 0x44
 80054a0:	2300      	movs	r3, #0
 80054a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054a4:	2300      	movs	r3, #0
 80054a6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80054a8:	2300      	movs	r3, #0
 80054aa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054ac:	4b79      	ldr	r3, [pc, #484]	@ (8005694 <HAL_RCC_GetSysClockFreq+0x200>)
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f003 030c 	and.w	r3, r3, #12
 80054b4:	2b08      	cmp	r3, #8
 80054b6:	d00d      	beq.n	80054d4 <HAL_RCC_GetSysClockFreq+0x40>
 80054b8:	2b08      	cmp	r3, #8
 80054ba:	f200 80e1 	bhi.w	8005680 <HAL_RCC_GetSysClockFreq+0x1ec>
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d002      	beq.n	80054c8 <HAL_RCC_GetSysClockFreq+0x34>
 80054c2:	2b04      	cmp	r3, #4
 80054c4:	d003      	beq.n	80054ce <HAL_RCC_GetSysClockFreq+0x3a>
 80054c6:	e0db      	b.n	8005680 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054c8:	4b73      	ldr	r3, [pc, #460]	@ (8005698 <HAL_RCC_GetSysClockFreq+0x204>)
 80054ca:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80054cc:	e0db      	b.n	8005686 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054ce:	4b73      	ldr	r3, [pc, #460]	@ (800569c <HAL_RCC_GetSysClockFreq+0x208>)
 80054d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80054d2:	e0d8      	b.n	8005686 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054d4:	4b6f      	ldr	r3, [pc, #444]	@ (8005694 <HAL_RCC_GetSysClockFreq+0x200>)
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80054dc:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054de:	4b6d      	ldr	r3, [pc, #436]	@ (8005694 <HAL_RCC_GetSysClockFreq+0x200>)
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d063      	beq.n	80055b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054ea:	4b6a      	ldr	r3, [pc, #424]	@ (8005694 <HAL_RCC_GetSysClockFreq+0x200>)
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	099b      	lsrs	r3, r3, #6
 80054f0:	2200      	movs	r2, #0
 80054f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80054f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80054f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80054fe:	2300      	movs	r3, #0
 8005500:	637b      	str	r3, [r7, #52]	@ 0x34
 8005502:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005506:	4622      	mov	r2, r4
 8005508:	462b      	mov	r3, r5
 800550a:	f04f 0000 	mov.w	r0, #0
 800550e:	f04f 0100 	mov.w	r1, #0
 8005512:	0159      	lsls	r1, r3, #5
 8005514:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005518:	0150      	lsls	r0, r2, #5
 800551a:	4602      	mov	r2, r0
 800551c:	460b      	mov	r3, r1
 800551e:	4621      	mov	r1, r4
 8005520:	1a51      	subs	r1, r2, r1
 8005522:	6139      	str	r1, [r7, #16]
 8005524:	4629      	mov	r1, r5
 8005526:	eb63 0301 	sbc.w	r3, r3, r1
 800552a:	617b      	str	r3, [r7, #20]
 800552c:	f04f 0200 	mov.w	r2, #0
 8005530:	f04f 0300 	mov.w	r3, #0
 8005534:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005538:	4659      	mov	r1, fp
 800553a:	018b      	lsls	r3, r1, #6
 800553c:	4651      	mov	r1, sl
 800553e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005542:	4651      	mov	r1, sl
 8005544:	018a      	lsls	r2, r1, #6
 8005546:	4651      	mov	r1, sl
 8005548:	ebb2 0801 	subs.w	r8, r2, r1
 800554c:	4659      	mov	r1, fp
 800554e:	eb63 0901 	sbc.w	r9, r3, r1
 8005552:	f04f 0200 	mov.w	r2, #0
 8005556:	f04f 0300 	mov.w	r3, #0
 800555a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800555e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005562:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005566:	4690      	mov	r8, r2
 8005568:	4699      	mov	r9, r3
 800556a:	4623      	mov	r3, r4
 800556c:	eb18 0303 	adds.w	r3, r8, r3
 8005570:	60bb      	str	r3, [r7, #8]
 8005572:	462b      	mov	r3, r5
 8005574:	eb49 0303 	adc.w	r3, r9, r3
 8005578:	60fb      	str	r3, [r7, #12]
 800557a:	f04f 0200 	mov.w	r2, #0
 800557e:	f04f 0300 	mov.w	r3, #0
 8005582:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005586:	4629      	mov	r1, r5
 8005588:	024b      	lsls	r3, r1, #9
 800558a:	4621      	mov	r1, r4
 800558c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005590:	4621      	mov	r1, r4
 8005592:	024a      	lsls	r2, r1, #9
 8005594:	4610      	mov	r0, r2
 8005596:	4619      	mov	r1, r3
 8005598:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800559a:	2200      	movs	r2, #0
 800559c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800559e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80055a4:	f7fb fb58 	bl	8000c58 <__aeabi_uldivmod>
 80055a8:	4602      	mov	r2, r0
 80055aa:	460b      	mov	r3, r1
 80055ac:	4613      	mov	r3, r2
 80055ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055b0:	e058      	b.n	8005664 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055b2:	4b38      	ldr	r3, [pc, #224]	@ (8005694 <HAL_RCC_GetSysClockFreq+0x200>)
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	099b      	lsrs	r3, r3, #6
 80055b8:	2200      	movs	r2, #0
 80055ba:	4618      	mov	r0, r3
 80055bc:	4611      	mov	r1, r2
 80055be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80055c2:	623b      	str	r3, [r7, #32]
 80055c4:	2300      	movs	r3, #0
 80055c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80055c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80055cc:	4642      	mov	r2, r8
 80055ce:	464b      	mov	r3, r9
 80055d0:	f04f 0000 	mov.w	r0, #0
 80055d4:	f04f 0100 	mov.w	r1, #0
 80055d8:	0159      	lsls	r1, r3, #5
 80055da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055de:	0150      	lsls	r0, r2, #5
 80055e0:	4602      	mov	r2, r0
 80055e2:	460b      	mov	r3, r1
 80055e4:	4641      	mov	r1, r8
 80055e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80055ea:	4649      	mov	r1, r9
 80055ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80055f0:	f04f 0200 	mov.w	r2, #0
 80055f4:	f04f 0300 	mov.w	r3, #0
 80055f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80055fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005600:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005604:	ebb2 040a 	subs.w	r4, r2, sl
 8005608:	eb63 050b 	sbc.w	r5, r3, fp
 800560c:	f04f 0200 	mov.w	r2, #0
 8005610:	f04f 0300 	mov.w	r3, #0
 8005614:	00eb      	lsls	r3, r5, #3
 8005616:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800561a:	00e2      	lsls	r2, r4, #3
 800561c:	4614      	mov	r4, r2
 800561e:	461d      	mov	r5, r3
 8005620:	4643      	mov	r3, r8
 8005622:	18e3      	adds	r3, r4, r3
 8005624:	603b      	str	r3, [r7, #0]
 8005626:	464b      	mov	r3, r9
 8005628:	eb45 0303 	adc.w	r3, r5, r3
 800562c:	607b      	str	r3, [r7, #4]
 800562e:	f04f 0200 	mov.w	r2, #0
 8005632:	f04f 0300 	mov.w	r3, #0
 8005636:	e9d7 4500 	ldrd	r4, r5, [r7]
 800563a:	4629      	mov	r1, r5
 800563c:	028b      	lsls	r3, r1, #10
 800563e:	4621      	mov	r1, r4
 8005640:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005644:	4621      	mov	r1, r4
 8005646:	028a      	lsls	r2, r1, #10
 8005648:	4610      	mov	r0, r2
 800564a:	4619      	mov	r1, r3
 800564c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800564e:	2200      	movs	r2, #0
 8005650:	61bb      	str	r3, [r7, #24]
 8005652:	61fa      	str	r2, [r7, #28]
 8005654:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005658:	f7fb fafe 	bl	8000c58 <__aeabi_uldivmod>
 800565c:	4602      	mov	r2, r0
 800565e:	460b      	mov	r3, r1
 8005660:	4613      	mov	r3, r2
 8005662:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005664:	4b0b      	ldr	r3, [pc, #44]	@ (8005694 <HAL_RCC_GetSysClockFreq+0x200>)
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	0c1b      	lsrs	r3, r3, #16
 800566a:	f003 0303 	and.w	r3, r3, #3
 800566e:	3301      	adds	r3, #1
 8005670:	005b      	lsls	r3, r3, #1
 8005672:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8005674:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005676:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005678:	fbb2 f3f3 	udiv	r3, r2, r3
 800567c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800567e:	e002      	b.n	8005686 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005680:	4b05      	ldr	r3, [pc, #20]	@ (8005698 <HAL_RCC_GetSysClockFreq+0x204>)
 8005682:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005684:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005686:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005688:	4618      	mov	r0, r3
 800568a:	3750      	adds	r7, #80	@ 0x50
 800568c:	46bd      	mov	sp, r7
 800568e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005692:	bf00      	nop
 8005694:	40023800 	.word	0x40023800
 8005698:	00f42400 	.word	0x00f42400
 800569c:	007a1200 	.word	0x007a1200

080056a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056a0:	b480      	push	{r7}
 80056a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056a4:	4b03      	ldr	r3, [pc, #12]	@ (80056b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80056a6:	681b      	ldr	r3, [r3, #0]
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop
 80056b4:	20000004 	.word	0x20000004

080056b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80056bc:	f7ff fff0 	bl	80056a0 <HAL_RCC_GetHCLKFreq>
 80056c0:	4602      	mov	r2, r0
 80056c2:	4b05      	ldr	r3, [pc, #20]	@ (80056d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	0a9b      	lsrs	r3, r3, #10
 80056c8:	f003 0307 	and.w	r3, r3, #7
 80056cc:	4903      	ldr	r1, [pc, #12]	@ (80056dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80056ce:	5ccb      	ldrb	r3, [r1, r3]
 80056d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	40023800 	.word	0x40023800
 80056dc:	08009fb8 	.word	0x08009fb8

080056e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80056e4:	f7ff ffdc 	bl	80056a0 <HAL_RCC_GetHCLKFreq>
 80056e8:	4602      	mov	r2, r0
 80056ea:	4b05      	ldr	r3, [pc, #20]	@ (8005700 <HAL_RCC_GetPCLK2Freq+0x20>)
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	0b5b      	lsrs	r3, r3, #13
 80056f0:	f003 0307 	and.w	r3, r3, #7
 80056f4:	4903      	ldr	r1, [pc, #12]	@ (8005704 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056f6:	5ccb      	ldrb	r3, [r1, r3]
 80056f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	40023800 	.word	0x40023800
 8005704:	08009fb8 	.word	0x08009fb8

08005708 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d101      	bne.n	800571a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e041      	b.n	800579e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005720:	b2db      	uxtb	r3, r3
 8005722:	2b00      	cmp	r3, #0
 8005724:	d106      	bne.n	8005734 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f7fb ffde 	bl	80016f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2202      	movs	r2, #2
 8005738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	3304      	adds	r3, #4
 8005744:	4619      	mov	r1, r3
 8005746:	4610      	mov	r0, r2
 8005748:	f000 fa88 	bl	8005c5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3708      	adds	r7, #8
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
	...

080057a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d001      	beq.n	80057c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e044      	b.n	800584a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2202      	movs	r2, #2
 80057c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68da      	ldr	r2, [r3, #12]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f042 0201 	orr.w	r2, r2, #1
 80057d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a1e      	ldr	r2, [pc, #120]	@ (8005858 <HAL_TIM_Base_Start_IT+0xb0>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d018      	beq.n	8005814 <HAL_TIM_Base_Start_IT+0x6c>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057ea:	d013      	beq.n	8005814 <HAL_TIM_Base_Start_IT+0x6c>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a1a      	ldr	r2, [pc, #104]	@ (800585c <HAL_TIM_Base_Start_IT+0xb4>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d00e      	beq.n	8005814 <HAL_TIM_Base_Start_IT+0x6c>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a19      	ldr	r2, [pc, #100]	@ (8005860 <HAL_TIM_Base_Start_IT+0xb8>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d009      	beq.n	8005814 <HAL_TIM_Base_Start_IT+0x6c>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a17      	ldr	r2, [pc, #92]	@ (8005864 <HAL_TIM_Base_Start_IT+0xbc>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d004      	beq.n	8005814 <HAL_TIM_Base_Start_IT+0x6c>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a16      	ldr	r2, [pc, #88]	@ (8005868 <HAL_TIM_Base_Start_IT+0xc0>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d111      	bne.n	8005838 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f003 0307 	and.w	r3, r3, #7
 800581e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2b06      	cmp	r3, #6
 8005824:	d010      	beq.n	8005848 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f042 0201 	orr.w	r2, r2, #1
 8005834:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005836:	e007      	b.n	8005848 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f042 0201 	orr.w	r2, r2, #1
 8005846:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3714      	adds	r7, #20
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop
 8005858:	40010000 	.word	0x40010000
 800585c:	40000400 	.word	0x40000400
 8005860:	40000800 	.word	0x40000800
 8005864:	40000c00 	.word	0x40000c00
 8005868:	40014000 	.word	0x40014000

0800586c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	f003 0302 	and.w	r3, r3, #2
 800587e:	2b02      	cmp	r3, #2
 8005880:	d122      	bne.n	80058c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	f003 0302 	and.w	r3, r3, #2
 800588c:	2b02      	cmp	r3, #2
 800588e:	d11b      	bne.n	80058c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f06f 0202 	mvn.w	r2, #2
 8005898:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2201      	movs	r2, #1
 800589e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	699b      	ldr	r3, [r3, #24]
 80058a6:	f003 0303 	and.w	r3, r3, #3
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d003      	beq.n	80058b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 f9b5 	bl	8005c1e <HAL_TIM_IC_CaptureCallback>
 80058b4:	e005      	b.n	80058c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 f9a7 	bl	8005c0a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 f9b8 	bl	8005c32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	f003 0304 	and.w	r3, r3, #4
 80058d2:	2b04      	cmp	r3, #4
 80058d4:	d122      	bne.n	800591c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	f003 0304 	and.w	r3, r3, #4
 80058e0:	2b04      	cmp	r3, #4
 80058e2:	d11b      	bne.n	800591c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f06f 0204 	mvn.w	r2, #4
 80058ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2202      	movs	r2, #2
 80058f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d003      	beq.n	800590a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 f98b 	bl	8005c1e <HAL_TIM_IC_CaptureCallback>
 8005908:	e005      	b.n	8005916 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 f97d 	bl	8005c0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 f98e 	bl	8005c32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	f003 0308 	and.w	r3, r3, #8
 8005926:	2b08      	cmp	r3, #8
 8005928:	d122      	bne.n	8005970 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	f003 0308 	and.w	r3, r3, #8
 8005934:	2b08      	cmp	r3, #8
 8005936:	d11b      	bne.n	8005970 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f06f 0208 	mvn.w	r2, #8
 8005940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2204      	movs	r2, #4
 8005946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	69db      	ldr	r3, [r3, #28]
 800594e:	f003 0303 	and.w	r3, r3, #3
 8005952:	2b00      	cmp	r3, #0
 8005954:	d003      	beq.n	800595e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 f961 	bl	8005c1e <HAL_TIM_IC_CaptureCallback>
 800595c:	e005      	b.n	800596a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 f953 	bl	8005c0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 f964 	bl	8005c32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	f003 0310 	and.w	r3, r3, #16
 800597a:	2b10      	cmp	r3, #16
 800597c:	d122      	bne.n	80059c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	f003 0310 	and.w	r3, r3, #16
 8005988:	2b10      	cmp	r3, #16
 800598a:	d11b      	bne.n	80059c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f06f 0210 	mvn.w	r2, #16
 8005994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2208      	movs	r2, #8
 800599a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	69db      	ldr	r3, [r3, #28]
 80059a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d003      	beq.n	80059b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 f937 	bl	8005c1e <HAL_TIM_IC_CaptureCallback>
 80059b0:	e005      	b.n	80059be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 f929 	bl	8005c0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 f93a 	bl	8005c32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	f003 0301 	and.w	r3, r3, #1
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d10e      	bne.n	80059f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	f003 0301 	and.w	r3, r3, #1
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d107      	bne.n	80059f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f06f 0201 	mvn.w	r2, #1
 80059e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f7fb faac 	bl	8000f48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059fa:	2b80      	cmp	r3, #128	@ 0x80
 80059fc:	d10e      	bne.n	8005a1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a08:	2b80      	cmp	r3, #128	@ 0x80
 8005a0a:	d107      	bne.n	8005a1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 fab2 	bl	8005f80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a26:	2b40      	cmp	r3, #64	@ 0x40
 8005a28:	d10e      	bne.n	8005a48 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a34:	2b40      	cmp	r3, #64	@ 0x40
 8005a36:	d107      	bne.n	8005a48 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 f8ff 	bl	8005c46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	f003 0320 	and.w	r3, r3, #32
 8005a52:	2b20      	cmp	r3, #32
 8005a54:	d10e      	bne.n	8005a74 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	f003 0320 	and.w	r3, r3, #32
 8005a60:	2b20      	cmp	r3, #32
 8005a62:	d107      	bne.n	8005a74 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f06f 0220 	mvn.w	r2, #32
 8005a6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 fa7c 	bl	8005f6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a74:	bf00      	nop
 8005a76:	3708      	adds	r7, #8
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a86:	2300      	movs	r3, #0
 8005a88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d101      	bne.n	8005a98 <HAL_TIM_ConfigClockSource+0x1c>
 8005a94:	2302      	movs	r3, #2
 8005a96:	e0b4      	b.n	8005c02 <HAL_TIM_ConfigClockSource+0x186>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005ab6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005abe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68ba      	ldr	r2, [r7, #8]
 8005ac6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ad0:	d03e      	beq.n	8005b50 <HAL_TIM_ConfigClockSource+0xd4>
 8005ad2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ad6:	f200 8087 	bhi.w	8005be8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ada:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ade:	f000 8086 	beq.w	8005bee <HAL_TIM_ConfigClockSource+0x172>
 8005ae2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ae6:	d87f      	bhi.n	8005be8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ae8:	2b70      	cmp	r3, #112	@ 0x70
 8005aea:	d01a      	beq.n	8005b22 <HAL_TIM_ConfigClockSource+0xa6>
 8005aec:	2b70      	cmp	r3, #112	@ 0x70
 8005aee:	d87b      	bhi.n	8005be8 <HAL_TIM_ConfigClockSource+0x16c>
 8005af0:	2b60      	cmp	r3, #96	@ 0x60
 8005af2:	d050      	beq.n	8005b96 <HAL_TIM_ConfigClockSource+0x11a>
 8005af4:	2b60      	cmp	r3, #96	@ 0x60
 8005af6:	d877      	bhi.n	8005be8 <HAL_TIM_ConfigClockSource+0x16c>
 8005af8:	2b50      	cmp	r3, #80	@ 0x50
 8005afa:	d03c      	beq.n	8005b76 <HAL_TIM_ConfigClockSource+0xfa>
 8005afc:	2b50      	cmp	r3, #80	@ 0x50
 8005afe:	d873      	bhi.n	8005be8 <HAL_TIM_ConfigClockSource+0x16c>
 8005b00:	2b40      	cmp	r3, #64	@ 0x40
 8005b02:	d058      	beq.n	8005bb6 <HAL_TIM_ConfigClockSource+0x13a>
 8005b04:	2b40      	cmp	r3, #64	@ 0x40
 8005b06:	d86f      	bhi.n	8005be8 <HAL_TIM_ConfigClockSource+0x16c>
 8005b08:	2b30      	cmp	r3, #48	@ 0x30
 8005b0a:	d064      	beq.n	8005bd6 <HAL_TIM_ConfigClockSource+0x15a>
 8005b0c:	2b30      	cmp	r3, #48	@ 0x30
 8005b0e:	d86b      	bhi.n	8005be8 <HAL_TIM_ConfigClockSource+0x16c>
 8005b10:	2b20      	cmp	r3, #32
 8005b12:	d060      	beq.n	8005bd6 <HAL_TIM_ConfigClockSource+0x15a>
 8005b14:	2b20      	cmp	r3, #32
 8005b16:	d867      	bhi.n	8005be8 <HAL_TIM_ConfigClockSource+0x16c>
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d05c      	beq.n	8005bd6 <HAL_TIM_ConfigClockSource+0x15a>
 8005b1c:	2b10      	cmp	r3, #16
 8005b1e:	d05a      	beq.n	8005bd6 <HAL_TIM_ConfigClockSource+0x15a>
 8005b20:	e062      	b.n	8005be8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6818      	ldr	r0, [r3, #0]
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	6899      	ldr	r1, [r3, #8]
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	685a      	ldr	r2, [r3, #4]
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	f000 f98d 	bl	8005e50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005b44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68ba      	ldr	r2, [r7, #8]
 8005b4c:	609a      	str	r2, [r3, #8]
      break;
 8005b4e:	e04f      	b.n	8005bf0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6818      	ldr	r0, [r3, #0]
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	6899      	ldr	r1, [r3, #8]
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	685a      	ldr	r2, [r3, #4]
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	f000 f976 	bl	8005e50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	689a      	ldr	r2, [r3, #8]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b72:	609a      	str	r2, [r3, #8]
      break;
 8005b74:	e03c      	b.n	8005bf0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6818      	ldr	r0, [r3, #0]
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	6859      	ldr	r1, [r3, #4]
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	461a      	mov	r2, r3
 8005b84:	f000 f8ea 	bl	8005d5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2150      	movs	r1, #80	@ 0x50
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f000 f943 	bl	8005e1a <TIM_ITRx_SetConfig>
      break;
 8005b94:	e02c      	b.n	8005bf0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6818      	ldr	r0, [r3, #0]
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	6859      	ldr	r1, [r3, #4]
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	f000 f909 	bl	8005dba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2160      	movs	r1, #96	@ 0x60
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f000 f933 	bl	8005e1a <TIM_ITRx_SetConfig>
      break;
 8005bb4:	e01c      	b.n	8005bf0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6818      	ldr	r0, [r3, #0]
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	6859      	ldr	r1, [r3, #4]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	f000 f8ca 	bl	8005d5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2140      	movs	r1, #64	@ 0x40
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f000 f923 	bl	8005e1a <TIM_ITRx_SetConfig>
      break;
 8005bd4:	e00c      	b.n	8005bf0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4619      	mov	r1, r3
 8005be0:	4610      	mov	r0, r2
 8005be2:	f000 f91a 	bl	8005e1a <TIM_ITRx_SetConfig>
      break;
 8005be6:	e003      	b.n	8005bf0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	73fb      	strb	r3, [r7, #15]
      break;
 8005bec:	e000      	b.n	8005bf0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005bee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3710      	adds	r7, #16
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}

08005c0a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c0a:	b480      	push	{r7}
 8005c0c:	b083      	sub	sp, #12
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c12:	bf00      	nop
 8005c14:	370c      	adds	r7, #12
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr

08005c1e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c1e:	b480      	push	{r7}
 8005c20:	b083      	sub	sp, #12
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c26:	bf00      	nop
 8005c28:	370c      	adds	r7, #12
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr

08005c32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c32:	b480      	push	{r7}
 8005c34:	b083      	sub	sp, #12
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c3a:	bf00      	nop
 8005c3c:	370c      	adds	r7, #12
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr

08005c46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c46:	b480      	push	{r7}
 8005c48:	b083      	sub	sp, #12
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c4e:	bf00      	nop
 8005c50:	370c      	adds	r7, #12
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
	...

08005c5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a34      	ldr	r2, [pc, #208]	@ (8005d40 <TIM_Base_SetConfig+0xe4>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d00f      	beq.n	8005c94 <TIM_Base_SetConfig+0x38>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c7a:	d00b      	beq.n	8005c94 <TIM_Base_SetConfig+0x38>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a31      	ldr	r2, [pc, #196]	@ (8005d44 <TIM_Base_SetConfig+0xe8>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d007      	beq.n	8005c94 <TIM_Base_SetConfig+0x38>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a30      	ldr	r2, [pc, #192]	@ (8005d48 <TIM_Base_SetConfig+0xec>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d003      	beq.n	8005c94 <TIM_Base_SetConfig+0x38>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a2f      	ldr	r2, [pc, #188]	@ (8005d4c <TIM_Base_SetConfig+0xf0>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d108      	bne.n	8005ca6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a25      	ldr	r2, [pc, #148]	@ (8005d40 <TIM_Base_SetConfig+0xe4>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d01b      	beq.n	8005ce6 <TIM_Base_SetConfig+0x8a>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cb4:	d017      	beq.n	8005ce6 <TIM_Base_SetConfig+0x8a>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a22      	ldr	r2, [pc, #136]	@ (8005d44 <TIM_Base_SetConfig+0xe8>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d013      	beq.n	8005ce6 <TIM_Base_SetConfig+0x8a>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a21      	ldr	r2, [pc, #132]	@ (8005d48 <TIM_Base_SetConfig+0xec>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d00f      	beq.n	8005ce6 <TIM_Base_SetConfig+0x8a>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a20      	ldr	r2, [pc, #128]	@ (8005d4c <TIM_Base_SetConfig+0xf0>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d00b      	beq.n	8005ce6 <TIM_Base_SetConfig+0x8a>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a1f      	ldr	r2, [pc, #124]	@ (8005d50 <TIM_Base_SetConfig+0xf4>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d007      	beq.n	8005ce6 <TIM_Base_SetConfig+0x8a>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a1e      	ldr	r2, [pc, #120]	@ (8005d54 <TIM_Base_SetConfig+0xf8>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d003      	beq.n	8005ce6 <TIM_Base_SetConfig+0x8a>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a1d      	ldr	r2, [pc, #116]	@ (8005d58 <TIM_Base_SetConfig+0xfc>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d108      	bne.n	8005cf8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	689a      	ldr	r2, [r3, #8]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a08      	ldr	r2, [pc, #32]	@ (8005d40 <TIM_Base_SetConfig+0xe4>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d103      	bne.n	8005d2c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	691a      	ldr	r2, [r3, #16]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	615a      	str	r2, [r3, #20]
}
 8005d32:	bf00      	nop
 8005d34:	3714      	adds	r7, #20
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	40010000 	.word	0x40010000
 8005d44:	40000400 	.word	0x40000400
 8005d48:	40000800 	.word	0x40000800
 8005d4c:	40000c00 	.word	0x40000c00
 8005d50:	40014000 	.word	0x40014000
 8005d54:	40014400 	.word	0x40014400
 8005d58:	40014800 	.word	0x40014800

08005d5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b087      	sub	sp, #28
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6a1b      	ldr	r3, [r3, #32]
 8005d6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6a1b      	ldr	r3, [r3, #32]
 8005d72:	f023 0201 	bic.w	r2, r3, #1
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	699b      	ldr	r3, [r3, #24]
 8005d7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	011b      	lsls	r3, r3, #4
 8005d8c:	693a      	ldr	r2, [r7, #16]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	f023 030a 	bic.w	r3, r3, #10
 8005d98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d9a:	697a      	ldr	r2, [r7, #20]
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	621a      	str	r2, [r3, #32]
}
 8005dae:	bf00      	nop
 8005db0:	371c      	adds	r7, #28
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr

08005dba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dba:	b480      	push	{r7}
 8005dbc:	b087      	sub	sp, #28
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	60f8      	str	r0, [r7, #12]
 8005dc2:	60b9      	str	r1, [r7, #8]
 8005dc4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6a1b      	ldr	r3, [r3, #32]
 8005dca:	f023 0210 	bic.w	r2, r3, #16
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	699b      	ldr	r3, [r3, #24]
 8005dd6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6a1b      	ldr	r3, [r3, #32]
 8005ddc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005de4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	031b      	lsls	r3, r3, #12
 8005dea:	697a      	ldr	r2, [r7, #20]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005df6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	011b      	lsls	r3, r3, #4
 8005dfc:	693a      	ldr	r2, [r7, #16]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	621a      	str	r2, [r3, #32]
}
 8005e0e:	bf00      	nop
 8005e10:	371c      	adds	r7, #28
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr

08005e1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e1a:	b480      	push	{r7}
 8005e1c:	b085      	sub	sp, #20
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
 8005e22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e32:	683a      	ldr	r2, [r7, #0]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	f043 0307 	orr.w	r3, r3, #7
 8005e3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	609a      	str	r2, [r3, #8]
}
 8005e44:	bf00      	nop
 8005e46:	3714      	adds	r7, #20
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b087      	sub	sp, #28
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	607a      	str	r2, [r7, #4]
 8005e5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	021a      	lsls	r2, r3, #8
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	431a      	orrs	r2, r3
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	697a      	ldr	r2, [r7, #20]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	609a      	str	r2, [r3, #8]
}
 8005e84:	bf00      	nop
 8005e86:	371c      	adds	r7, #28
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b085      	sub	sp, #20
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d101      	bne.n	8005ea8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ea4:	2302      	movs	r3, #2
 8005ea6:	e050      	b.n	8005f4a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2202      	movs	r2, #2
 8005eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ece:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a1c      	ldr	r2, [pc, #112]	@ (8005f58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d018      	beq.n	8005f1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ef4:	d013      	beq.n	8005f1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a18      	ldr	r2, [pc, #96]	@ (8005f5c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d00e      	beq.n	8005f1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a16      	ldr	r2, [pc, #88]	@ (8005f60 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d009      	beq.n	8005f1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a15      	ldr	r2, [pc, #84]	@ (8005f64 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d004      	beq.n	8005f1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a13      	ldr	r2, [pc, #76]	@ (8005f68 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d10c      	bne.n	8005f38 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	68ba      	ldr	r2, [r7, #8]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68ba      	ldr	r2, [r7, #8]
 8005f36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3714      	adds	r7, #20
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop
 8005f58:	40010000 	.word	0x40010000
 8005f5c:	40000400 	.word	0x40000400
 8005f60:	40000800 	.word	0x40000800
 8005f64:	40000c00 	.word	0x40000c00
 8005f68:	40014000 	.word	0x40014000

08005f6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f88:	bf00      	nop
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d101      	bne.n	8005fa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e03f      	b.n	8006026 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d106      	bne.n	8005fc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f7fb fbc0 	bl	8001740 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2224      	movs	r2, #36	@ 0x24
 8005fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68da      	ldr	r2, [r3, #12]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005fd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 fed1 	bl	8006d80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	691a      	ldr	r2, [r3, #16]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005fec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	695a      	ldr	r2, [r3, #20]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005ffc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68da      	ldr	r2, [r3, #12]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800600c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2220      	movs	r2, #32
 8006018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2220      	movs	r2, #32
 8006020:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	3708      	adds	r7, #8
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}

0800602e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800602e:	b580      	push	{r7, lr}
 8006030:	b08a      	sub	sp, #40	@ 0x28
 8006032:	af02      	add	r7, sp, #8
 8006034:	60f8      	str	r0, [r7, #12]
 8006036:	60b9      	str	r1, [r7, #8]
 8006038:	603b      	str	r3, [r7, #0]
 800603a:	4613      	mov	r3, r2
 800603c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800603e:	2300      	movs	r3, #0
 8006040:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006048:	b2db      	uxtb	r3, r3
 800604a:	2b20      	cmp	r3, #32
 800604c:	d17c      	bne.n	8006148 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d002      	beq.n	800605a <HAL_UART_Transmit+0x2c>
 8006054:	88fb      	ldrh	r3, [r7, #6]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d101      	bne.n	800605e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e075      	b.n	800614a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006064:	2b01      	cmp	r3, #1
 8006066:	d101      	bne.n	800606c <HAL_UART_Transmit+0x3e>
 8006068:	2302      	movs	r3, #2
 800606a:	e06e      	b.n	800614a <HAL_UART_Transmit+0x11c>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2200      	movs	r2, #0
 8006078:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2221      	movs	r2, #33	@ 0x21
 800607e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006082:	f7fb fda9 	bl	8001bd8 <HAL_GetTick>
 8006086:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	88fa      	ldrh	r2, [r7, #6]
 800608c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	88fa      	ldrh	r2, [r7, #6]
 8006092:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800609c:	d108      	bne.n	80060b0 <HAL_UART_Transmit+0x82>
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d104      	bne.n	80060b0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80060a6:	2300      	movs	r3, #0
 80060a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	61bb      	str	r3, [r7, #24]
 80060ae:	e003      	b.n	80060b8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060b4:	2300      	movs	r3, #0
 80060b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 80060c0:	e02a      	b.n	8006118 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	9300      	str	r3, [sp, #0]
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	2200      	movs	r2, #0
 80060ca:	2180      	movs	r1, #128	@ 0x80
 80060cc:	68f8      	ldr	r0, [r7, #12]
 80060ce:	f000 fc26 	bl	800691e <UART_WaitOnFlagUntilTimeout>
 80060d2:	4603      	mov	r3, r0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d001      	beq.n	80060dc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80060d8:	2303      	movs	r3, #3
 80060da:	e036      	b.n	800614a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d10b      	bne.n	80060fa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	881b      	ldrh	r3, [r3, #0]
 80060e6:	461a      	mov	r2, r3
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	3302      	adds	r3, #2
 80060f6:	61bb      	str	r3, [r7, #24]
 80060f8:	e007      	b.n	800610a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	781a      	ldrb	r2, [r3, #0]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	3301      	adds	r3, #1
 8006108:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800610e:	b29b      	uxth	r3, r3
 8006110:	3b01      	subs	r3, #1
 8006112:	b29a      	uxth	r2, r3
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800611c:	b29b      	uxth	r3, r3
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1cf      	bne.n	80060c2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	9300      	str	r3, [sp, #0]
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	2200      	movs	r2, #0
 800612a:	2140      	movs	r1, #64	@ 0x40
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	f000 fbf6 	bl	800691e <UART_WaitOnFlagUntilTimeout>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d001      	beq.n	800613c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006138:	2303      	movs	r3, #3
 800613a:	e006      	b.n	800614a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2220      	movs	r2, #32
 8006140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8006144:	2300      	movs	r3, #0
 8006146:	e000      	b.n	800614a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006148:	2302      	movs	r3, #2
  }
}
 800614a:	4618      	mov	r0, r3
 800614c:	3720      	adds	r7, #32
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
	...

08006154 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b08c      	sub	sp, #48	@ 0x30
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	4613      	mov	r3, r2
 8006160:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006168:	b2db      	uxtb	r3, r3
 800616a:	2b20      	cmp	r3, #32
 800616c:	d165      	bne.n	800623a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d002      	beq.n	800617a <HAL_UART_Transmit_DMA+0x26>
 8006174:	88fb      	ldrh	r3, [r7, #6]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d101      	bne.n	800617e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e05e      	b.n	800623c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006184:	2b01      	cmp	r3, #1
 8006186:	d101      	bne.n	800618c <HAL_UART_Transmit_DMA+0x38>
 8006188:	2302      	movs	r3, #2
 800618a:	e057      	b.n	800623c <HAL_UART_Transmit_DMA+0xe8>
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 8006194:	68ba      	ldr	r2, [r7, #8]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	88fa      	ldrh	r2, [r7, #6]
 800619e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	88fa      	ldrh	r2, [r7, #6]
 80061a4:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2200      	movs	r2, #0
 80061aa:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2221      	movs	r2, #33	@ 0x21
 80061b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061b8:	4a22      	ldr	r2, [pc, #136]	@ (8006244 <HAL_UART_Transmit_DMA+0xf0>)
 80061ba:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061c0:	4a21      	ldr	r2, [pc, #132]	@ (8006248 <HAL_UART_Transmit_DMA+0xf4>)
 80061c2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061c8:	4a20      	ldr	r2, [pc, #128]	@ (800624c <HAL_UART_Transmit_DMA+0xf8>)
 80061ca:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061d0:	2200      	movs	r2, #0
 80061d2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80061d4:	f107 0308 	add.w	r3, r7, #8
 80061d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80061de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061e0:	6819      	ldr	r1, [r3, #0]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	3304      	adds	r3, #4
 80061e8:	461a      	mov	r2, r3
 80061ea:	88fb      	ldrh	r3, [r7, #6]
 80061ec:	f7fb fec0 	bl	8001f70 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80061f8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	3314      	adds	r3, #20
 8006208:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	e853 3f00 	ldrex	r3, [r3]
 8006210:	617b      	str	r3, [r7, #20]
   return(result);
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006218:	62bb      	str	r3, [r7, #40]	@ 0x28
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	3314      	adds	r3, #20
 8006220:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006222:	627a      	str	r2, [r7, #36]	@ 0x24
 8006224:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006226:	6a39      	ldr	r1, [r7, #32]
 8006228:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800622a:	e841 2300 	strex	r3, r2, [r1]
 800622e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d1e5      	bne.n	8006202 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8006236:	2300      	movs	r3, #0
 8006238:	e000      	b.n	800623c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800623a:	2302      	movs	r3, #2
  }
}
 800623c:	4618      	mov	r0, r3
 800623e:	3730      	adds	r7, #48	@ 0x30
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}
 8006244:	080067d5 	.word	0x080067d5
 8006248:	0800686f 	.word	0x0800686f
 800624c:	0800688b 	.word	0x0800688b

08006250 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b0ba      	sub	sp, #232	@ 0xe8
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	695b      	ldr	r3, [r3, #20]
 8006272:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006276:	2300      	movs	r3, #0
 8006278:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800627c:	2300      	movs	r3, #0
 800627e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006286:	f003 030f 	and.w	r3, r3, #15
 800628a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800628e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006292:	2b00      	cmp	r3, #0
 8006294:	d10f      	bne.n	80062b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800629a:	f003 0320 	and.w	r3, r3, #32
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d009      	beq.n	80062b6 <HAL_UART_IRQHandler+0x66>
 80062a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062a6:	f003 0320 	and.w	r3, r3, #32
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d003      	beq.n	80062b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 fcaa 	bl	8006c08 <UART_Receive_IT>
      return;
 80062b4:	e256      	b.n	8006764 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80062b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	f000 80de 	beq.w	800647c <HAL_UART_IRQHandler+0x22c>
 80062c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062c4:	f003 0301 	and.w	r3, r3, #1
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d106      	bne.n	80062da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80062cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062d0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	f000 80d1 	beq.w	800647c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80062da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062de:	f003 0301 	and.w	r3, r3, #1
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d00b      	beq.n	80062fe <HAL_UART_IRQHandler+0xae>
 80062e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d005      	beq.n	80062fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062f6:	f043 0201 	orr.w	r2, r3, #1
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006302:	f003 0304 	and.w	r3, r3, #4
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00b      	beq.n	8006322 <HAL_UART_IRQHandler+0xd2>
 800630a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800630e:	f003 0301 	and.w	r3, r3, #1
 8006312:	2b00      	cmp	r3, #0
 8006314:	d005      	beq.n	8006322 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800631a:	f043 0202 	orr.w	r2, r3, #2
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006326:	f003 0302 	and.w	r3, r3, #2
 800632a:	2b00      	cmp	r3, #0
 800632c:	d00b      	beq.n	8006346 <HAL_UART_IRQHandler+0xf6>
 800632e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006332:	f003 0301 	and.w	r3, r3, #1
 8006336:	2b00      	cmp	r3, #0
 8006338:	d005      	beq.n	8006346 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800633e:	f043 0204 	orr.w	r2, r3, #4
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800634a:	f003 0308 	and.w	r3, r3, #8
 800634e:	2b00      	cmp	r3, #0
 8006350:	d011      	beq.n	8006376 <HAL_UART_IRQHandler+0x126>
 8006352:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006356:	f003 0320 	and.w	r3, r3, #32
 800635a:	2b00      	cmp	r3, #0
 800635c:	d105      	bne.n	800636a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800635e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006362:	f003 0301 	and.w	r3, r3, #1
 8006366:	2b00      	cmp	r3, #0
 8006368:	d005      	beq.n	8006376 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800636e:	f043 0208 	orr.w	r2, r3, #8
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800637a:	2b00      	cmp	r3, #0
 800637c:	f000 81ed 	beq.w	800675a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006384:	f003 0320 	and.w	r3, r3, #32
 8006388:	2b00      	cmp	r3, #0
 800638a:	d008      	beq.n	800639e <HAL_UART_IRQHandler+0x14e>
 800638c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006390:	f003 0320 	and.w	r3, r3, #32
 8006394:	2b00      	cmp	r3, #0
 8006396:	d002      	beq.n	800639e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 fc35 	bl	8006c08 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	695b      	ldr	r3, [r3, #20]
 80063a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063a8:	2b40      	cmp	r3, #64	@ 0x40
 80063aa:	bf0c      	ite	eq
 80063ac:	2301      	moveq	r3, #1
 80063ae:	2300      	movne	r3, #0
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ba:	f003 0308 	and.w	r3, r3, #8
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d103      	bne.n	80063ca <HAL_UART_IRQHandler+0x17a>
 80063c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d04f      	beq.n	800646a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 fb3d 	bl	8006a4a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	695b      	ldr	r3, [r3, #20]
 80063d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063da:	2b40      	cmp	r3, #64	@ 0x40
 80063dc:	d141      	bne.n	8006462 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	3314      	adds	r3, #20
 80063e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80063ec:	e853 3f00 	ldrex	r3, [r3]
 80063f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80063f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80063f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	3314      	adds	r3, #20
 8006406:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800640a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800640e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006412:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006416:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800641a:	e841 2300 	strex	r3, r2, [r1]
 800641e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006422:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1d9      	bne.n	80063de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800642e:	2b00      	cmp	r3, #0
 8006430:	d013      	beq.n	800645a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006436:	4a7d      	ldr	r2, [pc, #500]	@ (800662c <HAL_UART_IRQHandler+0x3dc>)
 8006438:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800643e:	4618      	mov	r0, r3
 8006440:	f7fb fe5e 	bl	8002100 <HAL_DMA_Abort_IT>
 8006444:	4603      	mov	r3, r0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d016      	beq.n	8006478 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800644e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006454:	4610      	mov	r0, r2
 8006456:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006458:	e00e      	b.n	8006478 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 f9a4 	bl	80067a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006460:	e00a      	b.n	8006478 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 f9a0 	bl	80067a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006468:	e006      	b.n	8006478 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 f99c 	bl	80067a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8006476:	e170      	b.n	800675a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006478:	bf00      	nop
    return;
 800647a:	e16e      	b.n	800675a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006480:	2b01      	cmp	r3, #1
 8006482:	f040 814a 	bne.w	800671a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800648a:	f003 0310 	and.w	r3, r3, #16
 800648e:	2b00      	cmp	r3, #0
 8006490:	f000 8143 	beq.w	800671a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006498:	f003 0310 	and.w	r3, r3, #16
 800649c:	2b00      	cmp	r3, #0
 800649e:	f000 813c 	beq.w	800671a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80064a2:	2300      	movs	r3, #0
 80064a4:	60bb      	str	r3, [r7, #8]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	60bb      	str	r3, [r7, #8]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	60bb      	str	r3, [r7, #8]
 80064b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	695b      	ldr	r3, [r3, #20]
 80064be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064c2:	2b40      	cmp	r3, #64	@ 0x40
 80064c4:	f040 80b4 	bne.w	8006630 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80064d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f000 8140 	beq.w	800675e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80064e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80064e6:	429a      	cmp	r2, r3
 80064e8:	f080 8139 	bcs.w	800675e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80064f2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064f8:	69db      	ldr	r3, [r3, #28]
 80064fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064fe:	f000 8088 	beq.w	8006612 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	330c      	adds	r3, #12
 8006508:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800650c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006510:	e853 3f00 	ldrex	r3, [r3]
 8006514:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006518:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800651c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006520:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	330c      	adds	r3, #12
 800652a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800652e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006532:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006536:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800653a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800653e:	e841 2300 	strex	r3, r2, [r1]
 8006542:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006546:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800654a:	2b00      	cmp	r3, #0
 800654c:	d1d9      	bne.n	8006502 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	3314      	adds	r3, #20
 8006554:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006556:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006558:	e853 3f00 	ldrex	r3, [r3]
 800655c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800655e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006560:	f023 0301 	bic.w	r3, r3, #1
 8006564:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	3314      	adds	r3, #20
 800656e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006572:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006576:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006578:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800657a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800657e:	e841 2300 	strex	r3, r2, [r1]
 8006582:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006584:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006586:	2b00      	cmp	r3, #0
 8006588:	d1e1      	bne.n	800654e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	3314      	adds	r3, #20
 8006590:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006592:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006594:	e853 3f00 	ldrex	r3, [r3]
 8006598:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800659a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800659c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	3314      	adds	r3, #20
 80065aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80065ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80065b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80065b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80065b6:	e841 2300 	strex	r3, r2, [r1]
 80065ba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80065bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d1e3      	bne.n	800658a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2220      	movs	r2, #32
 80065c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	330c      	adds	r3, #12
 80065d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065da:	e853 3f00 	ldrex	r3, [r3]
 80065de:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80065e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065e2:	f023 0310 	bic.w	r3, r3, #16
 80065e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	330c      	adds	r3, #12
 80065f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80065f4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80065f6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80065fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80065fc:	e841 2300 	strex	r3, r2, [r1]
 8006600:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006602:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006604:	2b00      	cmp	r3, #0
 8006606:	d1e3      	bne.n	80065d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800660c:	4618      	mov	r0, r3
 800660e:	f7fb fd07 	bl	8002020 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800661a:	b29b      	uxth	r3, r3
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	b29b      	uxth	r3, r3
 8006620:	4619      	mov	r1, r3
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 f8ca 	bl	80067bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006628:	e099      	b.n	800675e <HAL_UART_IRQHandler+0x50e>
 800662a:	bf00      	nop
 800662c:	08006b11 	.word	0x08006b11
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006638:	b29b      	uxth	r3, r3
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006644:	b29b      	uxth	r3, r3
 8006646:	2b00      	cmp	r3, #0
 8006648:	f000 808b 	beq.w	8006762 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800664c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006650:	2b00      	cmp	r3, #0
 8006652:	f000 8086 	beq.w	8006762 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	330c      	adds	r3, #12
 800665c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800665e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006660:	e853 3f00 	ldrex	r3, [r3]
 8006664:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006666:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006668:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800666c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	330c      	adds	r3, #12
 8006676:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800667a:	647a      	str	r2, [r7, #68]	@ 0x44
 800667c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800667e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006680:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006682:	e841 2300 	strex	r3, r2, [r1]
 8006686:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006688:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800668a:	2b00      	cmp	r3, #0
 800668c:	d1e3      	bne.n	8006656 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	3314      	adds	r3, #20
 8006694:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006698:	e853 3f00 	ldrex	r3, [r3]
 800669c:	623b      	str	r3, [r7, #32]
   return(result);
 800669e:	6a3b      	ldr	r3, [r7, #32]
 80066a0:	f023 0301 	bic.w	r3, r3, #1
 80066a4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	3314      	adds	r3, #20
 80066ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80066b2:	633a      	str	r2, [r7, #48]	@ 0x30
 80066b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066ba:	e841 2300 	strex	r3, r2, [r1]
 80066be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80066c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1e3      	bne.n	800668e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2220      	movs	r2, #32
 80066ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	330c      	adds	r3, #12
 80066da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	e853 3f00 	ldrex	r3, [r3]
 80066e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f023 0310 	bic.w	r3, r3, #16
 80066ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	330c      	adds	r3, #12
 80066f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80066f8:	61fa      	str	r2, [r7, #28]
 80066fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fc:	69b9      	ldr	r1, [r7, #24]
 80066fe:	69fa      	ldr	r2, [r7, #28]
 8006700:	e841 2300 	strex	r3, r2, [r1]
 8006704:	617b      	str	r3, [r7, #20]
   return(result);
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d1e3      	bne.n	80066d4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800670c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006710:	4619      	mov	r1, r3
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 f852 	bl	80067bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006718:	e023      	b.n	8006762 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800671a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800671e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006722:	2b00      	cmp	r3, #0
 8006724:	d009      	beq.n	800673a <HAL_UART_IRQHandler+0x4ea>
 8006726:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800672a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800672e:	2b00      	cmp	r3, #0
 8006730:	d003      	beq.n	800673a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 fa00 	bl	8006b38 <UART_Transmit_IT>
    return;
 8006738:	e014      	b.n	8006764 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800673a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800673e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00e      	beq.n	8006764 <HAL_UART_IRQHandler+0x514>
 8006746:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800674a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800674e:	2b00      	cmp	r3, #0
 8006750:	d008      	beq.n	8006764 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 fa40 	bl	8006bd8 <UART_EndTransmit_IT>
    return;
 8006758:	e004      	b.n	8006764 <HAL_UART_IRQHandler+0x514>
    return;
 800675a:	bf00      	nop
 800675c:	e002      	b.n	8006764 <HAL_UART_IRQHandler+0x514>
      return;
 800675e:	bf00      	nop
 8006760:	e000      	b.n	8006764 <HAL_UART_IRQHandler+0x514>
      return;
 8006762:	bf00      	nop
  }
}
 8006764:	37e8      	adds	r7, #232	@ 0xe8
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
 800676a:	bf00      	nop

0800676c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006774:	bf00      	nop
 8006776:	370c      	adds	r7, #12
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006788:	bf00      	nop
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800679c:	bf00      	nop
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80067b0:	bf00      	nop
 80067b2:	370c      	adds	r7, #12
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr

080067bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	460b      	mov	r3, r1
 80067c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80067c8:	bf00      	nop
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b090      	sub	sp, #64	@ 0x40
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d137      	bne.n	8006860 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80067f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067f2:	2200      	movs	r2, #0
 80067f4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80067f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	3314      	adds	r3, #20
 80067fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006800:	e853 3f00 	ldrex	r3, [r3]
 8006804:	623b      	str	r3, [r7, #32]
   return(result);
 8006806:	6a3b      	ldr	r3, [r7, #32]
 8006808:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800680c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800680e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	3314      	adds	r3, #20
 8006814:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006816:	633a      	str	r2, [r7, #48]	@ 0x30
 8006818:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800681a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800681c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800681e:	e841 2300 	strex	r3, r2, [r1]
 8006822:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006826:	2b00      	cmp	r3, #0
 8006828:	d1e5      	bne.n	80067f6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800682a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	330c      	adds	r3, #12
 8006830:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	e853 3f00 	ldrex	r3, [r3]
 8006838:	60fb      	str	r3, [r7, #12]
   return(result);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006840:	637b      	str	r3, [r7, #52]	@ 0x34
 8006842:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	330c      	adds	r3, #12
 8006848:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800684a:	61fa      	str	r2, [r7, #28]
 800684c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800684e:	69b9      	ldr	r1, [r7, #24]
 8006850:	69fa      	ldr	r2, [r7, #28]
 8006852:	e841 2300 	strex	r3, r2, [r1]
 8006856:	617b      	str	r3, [r7, #20]
   return(result);
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d1e5      	bne.n	800682a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800685e:	e002      	b.n	8006866 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006860:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006862:	f7ff ff83 	bl	800676c <HAL_UART_TxCpltCallback>
}
 8006866:	bf00      	nop
 8006868:	3740      	adds	r7, #64	@ 0x40
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}

0800686e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800686e:	b580      	push	{r7, lr}
 8006870:	b084      	sub	sp, #16
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800687a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800687c:	68f8      	ldr	r0, [r7, #12]
 800687e:	f7ff ff7f 	bl	8006780 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006882:	bf00      	nop
 8006884:	3710      	adds	r7, #16
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}

0800688a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800688a:	b580      	push	{r7, lr}
 800688c:	b084      	sub	sp, #16
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006892:	2300      	movs	r3, #0
 8006894:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800689a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	695b      	ldr	r3, [r3, #20]
 80068a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068a6:	2b80      	cmp	r3, #128	@ 0x80
 80068a8:	bf0c      	ite	eq
 80068aa:	2301      	moveq	r3, #1
 80068ac:	2300      	movne	r3, #0
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	2b21      	cmp	r3, #33	@ 0x21
 80068bc:	d108      	bne.n	80068d0 <UART_DMAError+0x46>
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d005      	beq.n	80068d0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	2200      	movs	r2, #0
 80068c8:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80068ca:	68b8      	ldr	r0, [r7, #8]
 80068cc:	f000 f895 	bl	80069fa <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	695b      	ldr	r3, [r3, #20]
 80068d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068da:	2b40      	cmp	r3, #64	@ 0x40
 80068dc:	bf0c      	ite	eq
 80068de:	2301      	moveq	r3, #1
 80068e0:	2300      	movne	r3, #0
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	2b22      	cmp	r3, #34	@ 0x22
 80068f0:	d108      	bne.n	8006904 <UART_DMAError+0x7a>
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d005      	beq.n	8006904 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	2200      	movs	r2, #0
 80068fc:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80068fe:	68b8      	ldr	r0, [r7, #8]
 8006900:	f000 f8a3 	bl	8006a4a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006908:	f043 0210 	orr.w	r2, r3, #16
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006910:	68b8      	ldr	r0, [r7, #8]
 8006912:	f7ff ff49 	bl	80067a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006916:	bf00      	nop
 8006918:	3710      	adds	r7, #16
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}

0800691e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800691e:	b580      	push	{r7, lr}
 8006920:	b090      	sub	sp, #64	@ 0x40
 8006922:	af00      	add	r7, sp, #0
 8006924:	60f8      	str	r0, [r7, #12]
 8006926:	60b9      	str	r1, [r7, #8]
 8006928:	603b      	str	r3, [r7, #0]
 800692a:	4613      	mov	r3, r2
 800692c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800692e:	e050      	b.n	80069d2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006930:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006936:	d04c      	beq.n	80069d2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006938:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800693a:	2b00      	cmp	r3, #0
 800693c:	d007      	beq.n	800694e <UART_WaitOnFlagUntilTimeout+0x30>
 800693e:	f7fb f94b 	bl	8001bd8 <HAL_GetTick>
 8006942:	4602      	mov	r2, r0
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800694a:	429a      	cmp	r2, r3
 800694c:	d241      	bcs.n	80069d2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	330c      	adds	r3, #12
 8006954:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006958:	e853 3f00 	ldrex	r3, [r3]
 800695c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800695e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006960:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006964:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	330c      	adds	r3, #12
 800696c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800696e:	637a      	str	r2, [r7, #52]	@ 0x34
 8006970:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006972:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006974:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006976:	e841 2300 	strex	r3, r2, [r1]
 800697a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800697c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800697e:	2b00      	cmp	r3, #0
 8006980:	d1e5      	bne.n	800694e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	3314      	adds	r3, #20
 8006988:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	e853 3f00 	ldrex	r3, [r3]
 8006990:	613b      	str	r3, [r7, #16]
   return(result);
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	f023 0301 	bic.w	r3, r3, #1
 8006998:	63bb      	str	r3, [r7, #56]	@ 0x38
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	3314      	adds	r3, #20
 80069a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80069a2:	623a      	str	r2, [r7, #32]
 80069a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a6:	69f9      	ldr	r1, [r7, #28]
 80069a8:	6a3a      	ldr	r2, [r7, #32]
 80069aa:	e841 2300 	strex	r3, r2, [r1]
 80069ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80069b0:	69bb      	ldr	r3, [r7, #24]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d1e5      	bne.n	8006982 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2220      	movs	r2, #32
 80069ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2220      	movs	r2, #32
 80069c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e00f      	b.n	80069f2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	4013      	ands	r3, r2
 80069dc:	68ba      	ldr	r2, [r7, #8]
 80069de:	429a      	cmp	r2, r3
 80069e0:	bf0c      	ite	eq
 80069e2:	2301      	moveq	r3, #1
 80069e4:	2300      	movne	r3, #0
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	461a      	mov	r2, r3
 80069ea:	79fb      	ldrb	r3, [r7, #7]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d09f      	beq.n	8006930 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80069f0:	2300      	movs	r3, #0
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3740      	adds	r7, #64	@ 0x40
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}

080069fa <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80069fa:	b480      	push	{r7}
 80069fc:	b089      	sub	sp, #36	@ 0x24
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	330c      	adds	r3, #12
 8006a08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	e853 3f00 	ldrex	r3, [r3]
 8006a10:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006a18:	61fb      	str	r3, [r7, #28]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	330c      	adds	r3, #12
 8006a20:	69fa      	ldr	r2, [r7, #28]
 8006a22:	61ba      	str	r2, [r7, #24]
 8006a24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a26:	6979      	ldr	r1, [r7, #20]
 8006a28:	69ba      	ldr	r2, [r7, #24]
 8006a2a:	e841 2300 	strex	r3, r2, [r1]
 8006a2e:	613b      	str	r3, [r7, #16]
   return(result);
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d1e5      	bne.n	8006a02 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2220      	movs	r2, #32
 8006a3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 8006a3e:	bf00      	nop
 8006a40:	3724      	adds	r7, #36	@ 0x24
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr

08006a4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a4a:	b480      	push	{r7}
 8006a4c:	b095      	sub	sp, #84	@ 0x54
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	330c      	adds	r3, #12
 8006a58:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a5c:	e853 3f00 	ldrex	r3, [r3]
 8006a60:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	330c      	adds	r3, #12
 8006a70:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006a72:	643a      	str	r2, [r7, #64]	@ 0x40
 8006a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a76:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006a78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a7a:	e841 2300 	strex	r3, r2, [r1]
 8006a7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d1e5      	bne.n	8006a52 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	3314      	adds	r3, #20
 8006a8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8e:	6a3b      	ldr	r3, [r7, #32]
 8006a90:	e853 3f00 	ldrex	r3, [r3]
 8006a94:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	f023 0301 	bic.w	r3, r3, #1
 8006a9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	3314      	adds	r3, #20
 8006aa4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006aa6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aaa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006aac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006aae:	e841 2300 	strex	r3, r2, [r1]
 8006ab2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d1e5      	bne.n	8006a86 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d119      	bne.n	8006af6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	330c      	adds	r3, #12
 8006ac8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	e853 3f00 	ldrex	r3, [r3]
 8006ad0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	f023 0310 	bic.w	r3, r3, #16
 8006ad8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	330c      	adds	r3, #12
 8006ae0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ae2:	61ba      	str	r2, [r7, #24]
 8006ae4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae6:	6979      	ldr	r1, [r7, #20]
 8006ae8:	69ba      	ldr	r2, [r7, #24]
 8006aea:	e841 2300 	strex	r3, r2, [r1]
 8006aee:	613b      	str	r3, [r7, #16]
   return(result);
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d1e5      	bne.n	8006ac2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2220      	movs	r2, #32
 8006afa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006b04:	bf00      	nop
 8006b06:	3754      	adds	r7, #84	@ 0x54
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2200      	movs	r2, #0
 8006b22:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2200      	movs	r2, #0
 8006b28:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b2a:	68f8      	ldr	r0, [r7, #12]
 8006b2c:	f7ff fe3c 	bl	80067a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b30:	bf00      	nop
 8006b32:	3710      	adds	r7, #16
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b085      	sub	sp, #20
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	2b21      	cmp	r3, #33	@ 0x21
 8006b4a:	d13e      	bne.n	8006bca <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b54:	d114      	bne.n	8006b80 <UART_Transmit_IT+0x48>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	691b      	ldr	r3, [r3, #16]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d110      	bne.n	8006b80 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a1b      	ldr	r3, [r3, #32]
 8006b62:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	881b      	ldrh	r3, [r3, #0]
 8006b68:	461a      	mov	r2, r3
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b72:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6a1b      	ldr	r3, [r3, #32]
 8006b78:	1c9a      	adds	r2, r3, #2
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	621a      	str	r2, [r3, #32]
 8006b7e:	e008      	b.n	8006b92 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6a1b      	ldr	r3, [r3, #32]
 8006b84:	1c59      	adds	r1, r3, #1
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	6211      	str	r1, [r2, #32]
 8006b8a:	781a      	ldrb	r2, [r3, #0]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	3b01      	subs	r3, #1
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d10f      	bne.n	8006bc6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	68da      	ldr	r2, [r3, #12]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006bb4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	68da      	ldr	r2, [r3, #12]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006bc4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	e000      	b.n	8006bcc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006bca:	2302      	movs	r3, #2
  }
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3714      	adds	r7, #20
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	68da      	ldr	r2, [r3, #12]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006bee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2220      	movs	r2, #32
 8006bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f7ff fdb7 	bl	800676c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006bfe:	2300      	movs	r3, #0
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3708      	adds	r7, #8
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b08c      	sub	sp, #48	@ 0x30
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	2b22      	cmp	r3, #34	@ 0x22
 8006c1a:	f040 80ab 	bne.w	8006d74 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c26:	d117      	bne.n	8006c58 <UART_Receive_IT+0x50>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	691b      	ldr	r3, [r3, #16]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d113      	bne.n	8006c58 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006c30:	2300      	movs	r3, #0
 8006c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c38:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c46:	b29a      	uxth	r2, r3
 8006c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c4a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c50:	1c9a      	adds	r2, r3, #2
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	629a      	str	r2, [r3, #40]	@ 0x28
 8006c56:	e026      	b.n	8006ca6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c6a:	d007      	beq.n	8006c7c <UART_Receive_IT+0x74>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d10a      	bne.n	8006c8a <UART_Receive_IT+0x82>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d106      	bne.n	8006c8a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	b2da      	uxtb	r2, r3
 8006c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c86:	701a      	strb	r2, [r3, #0]
 8006c88:	e008      	b.n	8006c9c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c96:	b2da      	uxtb	r2, r3
 8006c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c9a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ca0:	1c5a      	adds	r2, r3, #1
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	3b01      	subs	r3, #1
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d15a      	bne.n	8006d70 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	68da      	ldr	r2, [r3, #12]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f022 0220 	bic.w	r2, r2, #32
 8006cc8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	68da      	ldr	r2, [r3, #12]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006cd8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	695a      	ldr	r2, [r3, #20]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f022 0201 	bic.w	r2, r2, #1
 8006ce8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2220      	movs	r2, #32
 8006cee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d135      	bne.n	8006d66 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	330c      	adds	r3, #12
 8006d06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	e853 3f00 	ldrex	r3, [r3]
 8006d0e:	613b      	str	r3, [r7, #16]
   return(result);
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	f023 0310 	bic.w	r3, r3, #16
 8006d16:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	330c      	adds	r3, #12
 8006d1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d20:	623a      	str	r2, [r7, #32]
 8006d22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d24:	69f9      	ldr	r1, [r7, #28]
 8006d26:	6a3a      	ldr	r2, [r7, #32]
 8006d28:	e841 2300 	strex	r3, r2, [r1]
 8006d2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d2e:	69bb      	ldr	r3, [r7, #24]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d1e5      	bne.n	8006d00 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 0310 	and.w	r3, r3, #16
 8006d3e:	2b10      	cmp	r3, #16
 8006d40:	d10a      	bne.n	8006d58 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d42:	2300      	movs	r3, #0
 8006d44:	60fb      	str	r3, [r7, #12]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	60fb      	str	r3, [r7, #12]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	60fb      	str	r3, [r7, #12]
 8006d56:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f7ff fd2c 	bl	80067bc <HAL_UARTEx_RxEventCallback>
 8006d64:	e002      	b.n	8006d6c <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f7ff fd14 	bl	8006794 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	e002      	b.n	8006d76 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006d70:	2300      	movs	r3, #0
 8006d72:	e000      	b.n	8006d76 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006d74:	2302      	movs	r3, #2
  }
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3730      	adds	r7, #48	@ 0x30
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
	...

08006d80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d84:	b0c0      	sub	sp, #256	@ 0x100
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	691b      	ldr	r3, [r3, #16]
 8006d94:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d9c:	68d9      	ldr	r1, [r3, #12]
 8006d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	ea40 0301 	orr.w	r3, r0, r1
 8006da8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dae:	689a      	ldr	r2, [r3, #8]
 8006db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	431a      	orrs	r2, r3
 8006db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dbc:	695b      	ldr	r3, [r3, #20]
 8006dbe:	431a      	orrs	r2, r3
 8006dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dc4:	69db      	ldr	r3, [r3, #28]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006dd8:	f021 010c 	bic.w	r1, r1, #12
 8006ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006de6:	430b      	orrs	r3, r1
 8006de8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	695b      	ldr	r3, [r3, #20]
 8006df2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dfa:	6999      	ldr	r1, [r3, #24]
 8006dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	ea40 0301 	orr.w	r3, r0, r1
 8006e06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	4b8f      	ldr	r3, [pc, #572]	@ (800704c <UART_SetConfig+0x2cc>)
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d005      	beq.n	8006e20 <UART_SetConfig+0xa0>
 8006e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	4b8d      	ldr	r3, [pc, #564]	@ (8007050 <UART_SetConfig+0x2d0>)
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d104      	bne.n	8006e2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e20:	f7fe fc5e 	bl	80056e0 <HAL_RCC_GetPCLK2Freq>
 8006e24:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006e28:	e003      	b.n	8006e32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e2a:	f7fe fc45 	bl	80056b8 <HAL_RCC_GetPCLK1Freq>
 8006e2e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e36:	69db      	ldr	r3, [r3, #28]
 8006e38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e3c:	f040 810c 	bne.w	8007058 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e44:	2200      	movs	r2, #0
 8006e46:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006e4a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006e4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006e52:	4622      	mov	r2, r4
 8006e54:	462b      	mov	r3, r5
 8006e56:	1891      	adds	r1, r2, r2
 8006e58:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006e5a:	415b      	adcs	r3, r3
 8006e5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006e62:	4621      	mov	r1, r4
 8006e64:	eb12 0801 	adds.w	r8, r2, r1
 8006e68:	4629      	mov	r1, r5
 8006e6a:	eb43 0901 	adc.w	r9, r3, r1
 8006e6e:	f04f 0200 	mov.w	r2, #0
 8006e72:	f04f 0300 	mov.w	r3, #0
 8006e76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e82:	4690      	mov	r8, r2
 8006e84:	4699      	mov	r9, r3
 8006e86:	4623      	mov	r3, r4
 8006e88:	eb18 0303 	adds.w	r3, r8, r3
 8006e8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006e90:	462b      	mov	r3, r5
 8006e92:	eb49 0303 	adc.w	r3, r9, r3
 8006e96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006ea6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006eaa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006eae:	460b      	mov	r3, r1
 8006eb0:	18db      	adds	r3, r3, r3
 8006eb2:	653b      	str	r3, [r7, #80]	@ 0x50
 8006eb4:	4613      	mov	r3, r2
 8006eb6:	eb42 0303 	adc.w	r3, r2, r3
 8006eba:	657b      	str	r3, [r7, #84]	@ 0x54
 8006ebc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006ec0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006ec4:	f7f9 fec8 	bl	8000c58 <__aeabi_uldivmod>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	460b      	mov	r3, r1
 8006ecc:	4b61      	ldr	r3, [pc, #388]	@ (8007054 <UART_SetConfig+0x2d4>)
 8006ece:	fba3 2302 	umull	r2, r3, r3, r2
 8006ed2:	095b      	lsrs	r3, r3, #5
 8006ed4:	011c      	lsls	r4, r3, #4
 8006ed6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006eda:	2200      	movs	r2, #0
 8006edc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006ee0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006ee4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006ee8:	4642      	mov	r2, r8
 8006eea:	464b      	mov	r3, r9
 8006eec:	1891      	adds	r1, r2, r2
 8006eee:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006ef0:	415b      	adcs	r3, r3
 8006ef2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ef4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006ef8:	4641      	mov	r1, r8
 8006efa:	eb12 0a01 	adds.w	sl, r2, r1
 8006efe:	4649      	mov	r1, r9
 8006f00:	eb43 0b01 	adc.w	fp, r3, r1
 8006f04:	f04f 0200 	mov.w	r2, #0
 8006f08:	f04f 0300 	mov.w	r3, #0
 8006f0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006f10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006f14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f18:	4692      	mov	sl, r2
 8006f1a:	469b      	mov	fp, r3
 8006f1c:	4643      	mov	r3, r8
 8006f1e:	eb1a 0303 	adds.w	r3, sl, r3
 8006f22:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006f26:	464b      	mov	r3, r9
 8006f28:	eb4b 0303 	adc.w	r3, fp, r3
 8006f2c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006f3c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006f40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006f44:	460b      	mov	r3, r1
 8006f46:	18db      	adds	r3, r3, r3
 8006f48:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	eb42 0303 	adc.w	r3, r2, r3
 8006f50:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006f56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006f5a:	f7f9 fe7d 	bl	8000c58 <__aeabi_uldivmod>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	460b      	mov	r3, r1
 8006f62:	4611      	mov	r1, r2
 8006f64:	4b3b      	ldr	r3, [pc, #236]	@ (8007054 <UART_SetConfig+0x2d4>)
 8006f66:	fba3 2301 	umull	r2, r3, r3, r1
 8006f6a:	095b      	lsrs	r3, r3, #5
 8006f6c:	2264      	movs	r2, #100	@ 0x64
 8006f6e:	fb02 f303 	mul.w	r3, r2, r3
 8006f72:	1acb      	subs	r3, r1, r3
 8006f74:	00db      	lsls	r3, r3, #3
 8006f76:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006f7a:	4b36      	ldr	r3, [pc, #216]	@ (8007054 <UART_SetConfig+0x2d4>)
 8006f7c:	fba3 2302 	umull	r2, r3, r3, r2
 8006f80:	095b      	lsrs	r3, r3, #5
 8006f82:	005b      	lsls	r3, r3, #1
 8006f84:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006f88:	441c      	add	r4, r3
 8006f8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006f94:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006f98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006f9c:	4642      	mov	r2, r8
 8006f9e:	464b      	mov	r3, r9
 8006fa0:	1891      	adds	r1, r2, r2
 8006fa2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006fa4:	415b      	adcs	r3, r3
 8006fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006fa8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006fac:	4641      	mov	r1, r8
 8006fae:	1851      	adds	r1, r2, r1
 8006fb0:	6339      	str	r1, [r7, #48]	@ 0x30
 8006fb2:	4649      	mov	r1, r9
 8006fb4:	414b      	adcs	r3, r1
 8006fb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fb8:	f04f 0200 	mov.w	r2, #0
 8006fbc:	f04f 0300 	mov.w	r3, #0
 8006fc0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006fc4:	4659      	mov	r1, fp
 8006fc6:	00cb      	lsls	r3, r1, #3
 8006fc8:	4651      	mov	r1, sl
 8006fca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fce:	4651      	mov	r1, sl
 8006fd0:	00ca      	lsls	r2, r1, #3
 8006fd2:	4610      	mov	r0, r2
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	4642      	mov	r2, r8
 8006fda:	189b      	adds	r3, r3, r2
 8006fdc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006fe0:	464b      	mov	r3, r9
 8006fe2:	460a      	mov	r2, r1
 8006fe4:	eb42 0303 	adc.w	r3, r2, r3
 8006fe8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006ff8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006ffc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007000:	460b      	mov	r3, r1
 8007002:	18db      	adds	r3, r3, r3
 8007004:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007006:	4613      	mov	r3, r2
 8007008:	eb42 0303 	adc.w	r3, r2, r3
 800700c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800700e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007012:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007016:	f7f9 fe1f 	bl	8000c58 <__aeabi_uldivmod>
 800701a:	4602      	mov	r2, r0
 800701c:	460b      	mov	r3, r1
 800701e:	4b0d      	ldr	r3, [pc, #52]	@ (8007054 <UART_SetConfig+0x2d4>)
 8007020:	fba3 1302 	umull	r1, r3, r3, r2
 8007024:	095b      	lsrs	r3, r3, #5
 8007026:	2164      	movs	r1, #100	@ 0x64
 8007028:	fb01 f303 	mul.w	r3, r1, r3
 800702c:	1ad3      	subs	r3, r2, r3
 800702e:	00db      	lsls	r3, r3, #3
 8007030:	3332      	adds	r3, #50	@ 0x32
 8007032:	4a08      	ldr	r2, [pc, #32]	@ (8007054 <UART_SetConfig+0x2d4>)
 8007034:	fba2 2303 	umull	r2, r3, r2, r3
 8007038:	095b      	lsrs	r3, r3, #5
 800703a:	f003 0207 	and.w	r2, r3, #7
 800703e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4422      	add	r2, r4
 8007046:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007048:	e106      	b.n	8007258 <UART_SetConfig+0x4d8>
 800704a:	bf00      	nop
 800704c:	40011000 	.word	0x40011000
 8007050:	40011400 	.word	0x40011400
 8007054:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007058:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800705c:	2200      	movs	r2, #0
 800705e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007062:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007066:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800706a:	4642      	mov	r2, r8
 800706c:	464b      	mov	r3, r9
 800706e:	1891      	adds	r1, r2, r2
 8007070:	6239      	str	r1, [r7, #32]
 8007072:	415b      	adcs	r3, r3
 8007074:	627b      	str	r3, [r7, #36]	@ 0x24
 8007076:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800707a:	4641      	mov	r1, r8
 800707c:	1854      	adds	r4, r2, r1
 800707e:	4649      	mov	r1, r9
 8007080:	eb43 0501 	adc.w	r5, r3, r1
 8007084:	f04f 0200 	mov.w	r2, #0
 8007088:	f04f 0300 	mov.w	r3, #0
 800708c:	00eb      	lsls	r3, r5, #3
 800708e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007092:	00e2      	lsls	r2, r4, #3
 8007094:	4614      	mov	r4, r2
 8007096:	461d      	mov	r5, r3
 8007098:	4643      	mov	r3, r8
 800709a:	18e3      	adds	r3, r4, r3
 800709c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80070a0:	464b      	mov	r3, r9
 80070a2:	eb45 0303 	adc.w	r3, r5, r3
 80070a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80070aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80070b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80070ba:	f04f 0200 	mov.w	r2, #0
 80070be:	f04f 0300 	mov.w	r3, #0
 80070c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80070c6:	4629      	mov	r1, r5
 80070c8:	008b      	lsls	r3, r1, #2
 80070ca:	4621      	mov	r1, r4
 80070cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070d0:	4621      	mov	r1, r4
 80070d2:	008a      	lsls	r2, r1, #2
 80070d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80070d8:	f7f9 fdbe 	bl	8000c58 <__aeabi_uldivmod>
 80070dc:	4602      	mov	r2, r0
 80070de:	460b      	mov	r3, r1
 80070e0:	4b60      	ldr	r3, [pc, #384]	@ (8007264 <UART_SetConfig+0x4e4>)
 80070e2:	fba3 2302 	umull	r2, r3, r3, r2
 80070e6:	095b      	lsrs	r3, r3, #5
 80070e8:	011c      	lsls	r4, r3, #4
 80070ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070ee:	2200      	movs	r2, #0
 80070f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80070f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80070f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80070fc:	4642      	mov	r2, r8
 80070fe:	464b      	mov	r3, r9
 8007100:	1891      	adds	r1, r2, r2
 8007102:	61b9      	str	r1, [r7, #24]
 8007104:	415b      	adcs	r3, r3
 8007106:	61fb      	str	r3, [r7, #28]
 8007108:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800710c:	4641      	mov	r1, r8
 800710e:	1851      	adds	r1, r2, r1
 8007110:	6139      	str	r1, [r7, #16]
 8007112:	4649      	mov	r1, r9
 8007114:	414b      	adcs	r3, r1
 8007116:	617b      	str	r3, [r7, #20]
 8007118:	f04f 0200 	mov.w	r2, #0
 800711c:	f04f 0300 	mov.w	r3, #0
 8007120:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007124:	4659      	mov	r1, fp
 8007126:	00cb      	lsls	r3, r1, #3
 8007128:	4651      	mov	r1, sl
 800712a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800712e:	4651      	mov	r1, sl
 8007130:	00ca      	lsls	r2, r1, #3
 8007132:	4610      	mov	r0, r2
 8007134:	4619      	mov	r1, r3
 8007136:	4603      	mov	r3, r0
 8007138:	4642      	mov	r2, r8
 800713a:	189b      	adds	r3, r3, r2
 800713c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007140:	464b      	mov	r3, r9
 8007142:	460a      	mov	r2, r1
 8007144:	eb42 0303 	adc.w	r3, r2, r3
 8007148:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800714c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007156:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007158:	f04f 0200 	mov.w	r2, #0
 800715c:	f04f 0300 	mov.w	r3, #0
 8007160:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007164:	4649      	mov	r1, r9
 8007166:	008b      	lsls	r3, r1, #2
 8007168:	4641      	mov	r1, r8
 800716a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800716e:	4641      	mov	r1, r8
 8007170:	008a      	lsls	r2, r1, #2
 8007172:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007176:	f7f9 fd6f 	bl	8000c58 <__aeabi_uldivmod>
 800717a:	4602      	mov	r2, r0
 800717c:	460b      	mov	r3, r1
 800717e:	4611      	mov	r1, r2
 8007180:	4b38      	ldr	r3, [pc, #224]	@ (8007264 <UART_SetConfig+0x4e4>)
 8007182:	fba3 2301 	umull	r2, r3, r3, r1
 8007186:	095b      	lsrs	r3, r3, #5
 8007188:	2264      	movs	r2, #100	@ 0x64
 800718a:	fb02 f303 	mul.w	r3, r2, r3
 800718e:	1acb      	subs	r3, r1, r3
 8007190:	011b      	lsls	r3, r3, #4
 8007192:	3332      	adds	r3, #50	@ 0x32
 8007194:	4a33      	ldr	r2, [pc, #204]	@ (8007264 <UART_SetConfig+0x4e4>)
 8007196:	fba2 2303 	umull	r2, r3, r2, r3
 800719a:	095b      	lsrs	r3, r3, #5
 800719c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80071a0:	441c      	add	r4, r3
 80071a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071a6:	2200      	movs	r2, #0
 80071a8:	673b      	str	r3, [r7, #112]	@ 0x70
 80071aa:	677a      	str	r2, [r7, #116]	@ 0x74
 80071ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80071b0:	4642      	mov	r2, r8
 80071b2:	464b      	mov	r3, r9
 80071b4:	1891      	adds	r1, r2, r2
 80071b6:	60b9      	str	r1, [r7, #8]
 80071b8:	415b      	adcs	r3, r3
 80071ba:	60fb      	str	r3, [r7, #12]
 80071bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80071c0:	4641      	mov	r1, r8
 80071c2:	1851      	adds	r1, r2, r1
 80071c4:	6039      	str	r1, [r7, #0]
 80071c6:	4649      	mov	r1, r9
 80071c8:	414b      	adcs	r3, r1
 80071ca:	607b      	str	r3, [r7, #4]
 80071cc:	f04f 0200 	mov.w	r2, #0
 80071d0:	f04f 0300 	mov.w	r3, #0
 80071d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80071d8:	4659      	mov	r1, fp
 80071da:	00cb      	lsls	r3, r1, #3
 80071dc:	4651      	mov	r1, sl
 80071de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071e2:	4651      	mov	r1, sl
 80071e4:	00ca      	lsls	r2, r1, #3
 80071e6:	4610      	mov	r0, r2
 80071e8:	4619      	mov	r1, r3
 80071ea:	4603      	mov	r3, r0
 80071ec:	4642      	mov	r2, r8
 80071ee:	189b      	adds	r3, r3, r2
 80071f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80071f2:	464b      	mov	r3, r9
 80071f4:	460a      	mov	r2, r1
 80071f6:	eb42 0303 	adc.w	r3, r2, r3
 80071fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80071fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	663b      	str	r3, [r7, #96]	@ 0x60
 8007206:	667a      	str	r2, [r7, #100]	@ 0x64
 8007208:	f04f 0200 	mov.w	r2, #0
 800720c:	f04f 0300 	mov.w	r3, #0
 8007210:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007214:	4649      	mov	r1, r9
 8007216:	008b      	lsls	r3, r1, #2
 8007218:	4641      	mov	r1, r8
 800721a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800721e:	4641      	mov	r1, r8
 8007220:	008a      	lsls	r2, r1, #2
 8007222:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007226:	f7f9 fd17 	bl	8000c58 <__aeabi_uldivmod>
 800722a:	4602      	mov	r2, r0
 800722c:	460b      	mov	r3, r1
 800722e:	4b0d      	ldr	r3, [pc, #52]	@ (8007264 <UART_SetConfig+0x4e4>)
 8007230:	fba3 1302 	umull	r1, r3, r3, r2
 8007234:	095b      	lsrs	r3, r3, #5
 8007236:	2164      	movs	r1, #100	@ 0x64
 8007238:	fb01 f303 	mul.w	r3, r1, r3
 800723c:	1ad3      	subs	r3, r2, r3
 800723e:	011b      	lsls	r3, r3, #4
 8007240:	3332      	adds	r3, #50	@ 0x32
 8007242:	4a08      	ldr	r2, [pc, #32]	@ (8007264 <UART_SetConfig+0x4e4>)
 8007244:	fba2 2303 	umull	r2, r3, r2, r3
 8007248:	095b      	lsrs	r3, r3, #5
 800724a:	f003 020f 	and.w	r2, r3, #15
 800724e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4422      	add	r2, r4
 8007256:	609a      	str	r2, [r3, #8]
}
 8007258:	bf00      	nop
 800725a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800725e:	46bd      	mov	sp, r7
 8007260:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007264:	51eb851f 	.word	0x51eb851f

08007268 <__cvt>:
 8007268:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800726c:	ec57 6b10 	vmov	r6, r7, d0
 8007270:	2f00      	cmp	r7, #0
 8007272:	460c      	mov	r4, r1
 8007274:	4619      	mov	r1, r3
 8007276:	463b      	mov	r3, r7
 8007278:	bfbb      	ittet	lt
 800727a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800727e:	461f      	movlt	r7, r3
 8007280:	2300      	movge	r3, #0
 8007282:	232d      	movlt	r3, #45	@ 0x2d
 8007284:	700b      	strb	r3, [r1, #0]
 8007286:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007288:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800728c:	4691      	mov	r9, r2
 800728e:	f023 0820 	bic.w	r8, r3, #32
 8007292:	bfbc      	itt	lt
 8007294:	4632      	movlt	r2, r6
 8007296:	4616      	movlt	r6, r2
 8007298:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800729c:	d005      	beq.n	80072aa <__cvt+0x42>
 800729e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80072a2:	d100      	bne.n	80072a6 <__cvt+0x3e>
 80072a4:	3401      	adds	r4, #1
 80072a6:	2102      	movs	r1, #2
 80072a8:	e000      	b.n	80072ac <__cvt+0x44>
 80072aa:	2103      	movs	r1, #3
 80072ac:	ab03      	add	r3, sp, #12
 80072ae:	9301      	str	r3, [sp, #4]
 80072b0:	ab02      	add	r3, sp, #8
 80072b2:	9300      	str	r3, [sp, #0]
 80072b4:	ec47 6b10 	vmov	d0, r6, r7
 80072b8:	4653      	mov	r3, sl
 80072ba:	4622      	mov	r2, r4
 80072bc:	f000 fe70 	bl	8007fa0 <_dtoa_r>
 80072c0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80072c4:	4605      	mov	r5, r0
 80072c6:	d119      	bne.n	80072fc <__cvt+0x94>
 80072c8:	f019 0f01 	tst.w	r9, #1
 80072cc:	d00e      	beq.n	80072ec <__cvt+0x84>
 80072ce:	eb00 0904 	add.w	r9, r0, r4
 80072d2:	2200      	movs	r2, #0
 80072d4:	2300      	movs	r3, #0
 80072d6:	4630      	mov	r0, r6
 80072d8:	4639      	mov	r1, r7
 80072da:	f7f9 fbfd 	bl	8000ad8 <__aeabi_dcmpeq>
 80072de:	b108      	cbz	r0, 80072e4 <__cvt+0x7c>
 80072e0:	f8cd 900c 	str.w	r9, [sp, #12]
 80072e4:	2230      	movs	r2, #48	@ 0x30
 80072e6:	9b03      	ldr	r3, [sp, #12]
 80072e8:	454b      	cmp	r3, r9
 80072ea:	d31e      	bcc.n	800732a <__cvt+0xc2>
 80072ec:	9b03      	ldr	r3, [sp, #12]
 80072ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80072f0:	1b5b      	subs	r3, r3, r5
 80072f2:	4628      	mov	r0, r5
 80072f4:	6013      	str	r3, [r2, #0]
 80072f6:	b004      	add	sp, #16
 80072f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072fc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007300:	eb00 0904 	add.w	r9, r0, r4
 8007304:	d1e5      	bne.n	80072d2 <__cvt+0x6a>
 8007306:	7803      	ldrb	r3, [r0, #0]
 8007308:	2b30      	cmp	r3, #48	@ 0x30
 800730a:	d10a      	bne.n	8007322 <__cvt+0xba>
 800730c:	2200      	movs	r2, #0
 800730e:	2300      	movs	r3, #0
 8007310:	4630      	mov	r0, r6
 8007312:	4639      	mov	r1, r7
 8007314:	f7f9 fbe0 	bl	8000ad8 <__aeabi_dcmpeq>
 8007318:	b918      	cbnz	r0, 8007322 <__cvt+0xba>
 800731a:	f1c4 0401 	rsb	r4, r4, #1
 800731e:	f8ca 4000 	str.w	r4, [sl]
 8007322:	f8da 3000 	ldr.w	r3, [sl]
 8007326:	4499      	add	r9, r3
 8007328:	e7d3      	b.n	80072d2 <__cvt+0x6a>
 800732a:	1c59      	adds	r1, r3, #1
 800732c:	9103      	str	r1, [sp, #12]
 800732e:	701a      	strb	r2, [r3, #0]
 8007330:	e7d9      	b.n	80072e6 <__cvt+0x7e>

08007332 <__exponent>:
 8007332:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007334:	2900      	cmp	r1, #0
 8007336:	bfba      	itte	lt
 8007338:	4249      	neglt	r1, r1
 800733a:	232d      	movlt	r3, #45	@ 0x2d
 800733c:	232b      	movge	r3, #43	@ 0x2b
 800733e:	2909      	cmp	r1, #9
 8007340:	7002      	strb	r2, [r0, #0]
 8007342:	7043      	strb	r3, [r0, #1]
 8007344:	dd29      	ble.n	800739a <__exponent+0x68>
 8007346:	f10d 0307 	add.w	r3, sp, #7
 800734a:	461d      	mov	r5, r3
 800734c:	270a      	movs	r7, #10
 800734e:	461a      	mov	r2, r3
 8007350:	fbb1 f6f7 	udiv	r6, r1, r7
 8007354:	fb07 1416 	mls	r4, r7, r6, r1
 8007358:	3430      	adds	r4, #48	@ 0x30
 800735a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800735e:	460c      	mov	r4, r1
 8007360:	2c63      	cmp	r4, #99	@ 0x63
 8007362:	f103 33ff 	add.w	r3, r3, #4294967295
 8007366:	4631      	mov	r1, r6
 8007368:	dcf1      	bgt.n	800734e <__exponent+0x1c>
 800736a:	3130      	adds	r1, #48	@ 0x30
 800736c:	1e94      	subs	r4, r2, #2
 800736e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007372:	1c41      	adds	r1, r0, #1
 8007374:	4623      	mov	r3, r4
 8007376:	42ab      	cmp	r3, r5
 8007378:	d30a      	bcc.n	8007390 <__exponent+0x5e>
 800737a:	f10d 0309 	add.w	r3, sp, #9
 800737e:	1a9b      	subs	r3, r3, r2
 8007380:	42ac      	cmp	r4, r5
 8007382:	bf88      	it	hi
 8007384:	2300      	movhi	r3, #0
 8007386:	3302      	adds	r3, #2
 8007388:	4403      	add	r3, r0
 800738a:	1a18      	subs	r0, r3, r0
 800738c:	b003      	add	sp, #12
 800738e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007390:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007394:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007398:	e7ed      	b.n	8007376 <__exponent+0x44>
 800739a:	2330      	movs	r3, #48	@ 0x30
 800739c:	3130      	adds	r1, #48	@ 0x30
 800739e:	7083      	strb	r3, [r0, #2]
 80073a0:	70c1      	strb	r1, [r0, #3]
 80073a2:	1d03      	adds	r3, r0, #4
 80073a4:	e7f1      	b.n	800738a <__exponent+0x58>
	...

080073a8 <_printf_float>:
 80073a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073ac:	b08d      	sub	sp, #52	@ 0x34
 80073ae:	460c      	mov	r4, r1
 80073b0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80073b4:	4616      	mov	r6, r2
 80073b6:	461f      	mov	r7, r3
 80073b8:	4605      	mov	r5, r0
 80073ba:	f000 fcef 	bl	8007d9c <_localeconv_r>
 80073be:	6803      	ldr	r3, [r0, #0]
 80073c0:	9304      	str	r3, [sp, #16]
 80073c2:	4618      	mov	r0, r3
 80073c4:	f7f8 ff5c 	bl	8000280 <strlen>
 80073c8:	2300      	movs	r3, #0
 80073ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80073cc:	f8d8 3000 	ldr.w	r3, [r8]
 80073d0:	9005      	str	r0, [sp, #20]
 80073d2:	3307      	adds	r3, #7
 80073d4:	f023 0307 	bic.w	r3, r3, #7
 80073d8:	f103 0208 	add.w	r2, r3, #8
 80073dc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80073e0:	f8d4 b000 	ldr.w	fp, [r4]
 80073e4:	f8c8 2000 	str.w	r2, [r8]
 80073e8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80073ec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80073f0:	9307      	str	r3, [sp, #28]
 80073f2:	f8cd 8018 	str.w	r8, [sp, #24]
 80073f6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80073fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80073fe:	4b9c      	ldr	r3, [pc, #624]	@ (8007670 <_printf_float+0x2c8>)
 8007400:	f04f 32ff 	mov.w	r2, #4294967295
 8007404:	f7f9 fb9a 	bl	8000b3c <__aeabi_dcmpun>
 8007408:	bb70      	cbnz	r0, 8007468 <_printf_float+0xc0>
 800740a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800740e:	4b98      	ldr	r3, [pc, #608]	@ (8007670 <_printf_float+0x2c8>)
 8007410:	f04f 32ff 	mov.w	r2, #4294967295
 8007414:	f7f9 fb74 	bl	8000b00 <__aeabi_dcmple>
 8007418:	bb30      	cbnz	r0, 8007468 <_printf_float+0xc0>
 800741a:	2200      	movs	r2, #0
 800741c:	2300      	movs	r3, #0
 800741e:	4640      	mov	r0, r8
 8007420:	4649      	mov	r1, r9
 8007422:	f7f9 fb63 	bl	8000aec <__aeabi_dcmplt>
 8007426:	b110      	cbz	r0, 800742e <_printf_float+0x86>
 8007428:	232d      	movs	r3, #45	@ 0x2d
 800742a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800742e:	4a91      	ldr	r2, [pc, #580]	@ (8007674 <_printf_float+0x2cc>)
 8007430:	4b91      	ldr	r3, [pc, #580]	@ (8007678 <_printf_float+0x2d0>)
 8007432:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007436:	bf94      	ite	ls
 8007438:	4690      	movls	r8, r2
 800743a:	4698      	movhi	r8, r3
 800743c:	2303      	movs	r3, #3
 800743e:	6123      	str	r3, [r4, #16]
 8007440:	f02b 0304 	bic.w	r3, fp, #4
 8007444:	6023      	str	r3, [r4, #0]
 8007446:	f04f 0900 	mov.w	r9, #0
 800744a:	9700      	str	r7, [sp, #0]
 800744c:	4633      	mov	r3, r6
 800744e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007450:	4621      	mov	r1, r4
 8007452:	4628      	mov	r0, r5
 8007454:	f000 f9d2 	bl	80077fc <_printf_common>
 8007458:	3001      	adds	r0, #1
 800745a:	f040 808d 	bne.w	8007578 <_printf_float+0x1d0>
 800745e:	f04f 30ff 	mov.w	r0, #4294967295
 8007462:	b00d      	add	sp, #52	@ 0x34
 8007464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007468:	4642      	mov	r2, r8
 800746a:	464b      	mov	r3, r9
 800746c:	4640      	mov	r0, r8
 800746e:	4649      	mov	r1, r9
 8007470:	f7f9 fb64 	bl	8000b3c <__aeabi_dcmpun>
 8007474:	b140      	cbz	r0, 8007488 <_printf_float+0xe0>
 8007476:	464b      	mov	r3, r9
 8007478:	2b00      	cmp	r3, #0
 800747a:	bfbc      	itt	lt
 800747c:	232d      	movlt	r3, #45	@ 0x2d
 800747e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007482:	4a7e      	ldr	r2, [pc, #504]	@ (800767c <_printf_float+0x2d4>)
 8007484:	4b7e      	ldr	r3, [pc, #504]	@ (8007680 <_printf_float+0x2d8>)
 8007486:	e7d4      	b.n	8007432 <_printf_float+0x8a>
 8007488:	6863      	ldr	r3, [r4, #4]
 800748a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800748e:	9206      	str	r2, [sp, #24]
 8007490:	1c5a      	adds	r2, r3, #1
 8007492:	d13b      	bne.n	800750c <_printf_float+0x164>
 8007494:	2306      	movs	r3, #6
 8007496:	6063      	str	r3, [r4, #4]
 8007498:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800749c:	2300      	movs	r3, #0
 800749e:	6022      	str	r2, [r4, #0]
 80074a0:	9303      	str	r3, [sp, #12]
 80074a2:	ab0a      	add	r3, sp, #40	@ 0x28
 80074a4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80074a8:	ab09      	add	r3, sp, #36	@ 0x24
 80074aa:	9300      	str	r3, [sp, #0]
 80074ac:	6861      	ldr	r1, [r4, #4]
 80074ae:	ec49 8b10 	vmov	d0, r8, r9
 80074b2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80074b6:	4628      	mov	r0, r5
 80074b8:	f7ff fed6 	bl	8007268 <__cvt>
 80074bc:	9b06      	ldr	r3, [sp, #24]
 80074be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80074c0:	2b47      	cmp	r3, #71	@ 0x47
 80074c2:	4680      	mov	r8, r0
 80074c4:	d129      	bne.n	800751a <_printf_float+0x172>
 80074c6:	1cc8      	adds	r0, r1, #3
 80074c8:	db02      	blt.n	80074d0 <_printf_float+0x128>
 80074ca:	6863      	ldr	r3, [r4, #4]
 80074cc:	4299      	cmp	r1, r3
 80074ce:	dd41      	ble.n	8007554 <_printf_float+0x1ac>
 80074d0:	f1aa 0a02 	sub.w	sl, sl, #2
 80074d4:	fa5f fa8a 	uxtb.w	sl, sl
 80074d8:	3901      	subs	r1, #1
 80074da:	4652      	mov	r2, sl
 80074dc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80074e0:	9109      	str	r1, [sp, #36]	@ 0x24
 80074e2:	f7ff ff26 	bl	8007332 <__exponent>
 80074e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80074e8:	1813      	adds	r3, r2, r0
 80074ea:	2a01      	cmp	r2, #1
 80074ec:	4681      	mov	r9, r0
 80074ee:	6123      	str	r3, [r4, #16]
 80074f0:	dc02      	bgt.n	80074f8 <_printf_float+0x150>
 80074f2:	6822      	ldr	r2, [r4, #0]
 80074f4:	07d2      	lsls	r2, r2, #31
 80074f6:	d501      	bpl.n	80074fc <_printf_float+0x154>
 80074f8:	3301      	adds	r3, #1
 80074fa:	6123      	str	r3, [r4, #16]
 80074fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007500:	2b00      	cmp	r3, #0
 8007502:	d0a2      	beq.n	800744a <_printf_float+0xa2>
 8007504:	232d      	movs	r3, #45	@ 0x2d
 8007506:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800750a:	e79e      	b.n	800744a <_printf_float+0xa2>
 800750c:	9a06      	ldr	r2, [sp, #24]
 800750e:	2a47      	cmp	r2, #71	@ 0x47
 8007510:	d1c2      	bne.n	8007498 <_printf_float+0xf0>
 8007512:	2b00      	cmp	r3, #0
 8007514:	d1c0      	bne.n	8007498 <_printf_float+0xf0>
 8007516:	2301      	movs	r3, #1
 8007518:	e7bd      	b.n	8007496 <_printf_float+0xee>
 800751a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800751e:	d9db      	bls.n	80074d8 <_printf_float+0x130>
 8007520:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007524:	d118      	bne.n	8007558 <_printf_float+0x1b0>
 8007526:	2900      	cmp	r1, #0
 8007528:	6863      	ldr	r3, [r4, #4]
 800752a:	dd0b      	ble.n	8007544 <_printf_float+0x19c>
 800752c:	6121      	str	r1, [r4, #16]
 800752e:	b913      	cbnz	r3, 8007536 <_printf_float+0x18e>
 8007530:	6822      	ldr	r2, [r4, #0]
 8007532:	07d0      	lsls	r0, r2, #31
 8007534:	d502      	bpl.n	800753c <_printf_float+0x194>
 8007536:	3301      	adds	r3, #1
 8007538:	440b      	add	r3, r1
 800753a:	6123      	str	r3, [r4, #16]
 800753c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800753e:	f04f 0900 	mov.w	r9, #0
 8007542:	e7db      	b.n	80074fc <_printf_float+0x154>
 8007544:	b913      	cbnz	r3, 800754c <_printf_float+0x1a4>
 8007546:	6822      	ldr	r2, [r4, #0]
 8007548:	07d2      	lsls	r2, r2, #31
 800754a:	d501      	bpl.n	8007550 <_printf_float+0x1a8>
 800754c:	3302      	adds	r3, #2
 800754e:	e7f4      	b.n	800753a <_printf_float+0x192>
 8007550:	2301      	movs	r3, #1
 8007552:	e7f2      	b.n	800753a <_printf_float+0x192>
 8007554:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007558:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800755a:	4299      	cmp	r1, r3
 800755c:	db05      	blt.n	800756a <_printf_float+0x1c2>
 800755e:	6823      	ldr	r3, [r4, #0]
 8007560:	6121      	str	r1, [r4, #16]
 8007562:	07d8      	lsls	r0, r3, #31
 8007564:	d5ea      	bpl.n	800753c <_printf_float+0x194>
 8007566:	1c4b      	adds	r3, r1, #1
 8007568:	e7e7      	b.n	800753a <_printf_float+0x192>
 800756a:	2900      	cmp	r1, #0
 800756c:	bfd4      	ite	le
 800756e:	f1c1 0202 	rsble	r2, r1, #2
 8007572:	2201      	movgt	r2, #1
 8007574:	4413      	add	r3, r2
 8007576:	e7e0      	b.n	800753a <_printf_float+0x192>
 8007578:	6823      	ldr	r3, [r4, #0]
 800757a:	055a      	lsls	r2, r3, #21
 800757c:	d407      	bmi.n	800758e <_printf_float+0x1e6>
 800757e:	6923      	ldr	r3, [r4, #16]
 8007580:	4642      	mov	r2, r8
 8007582:	4631      	mov	r1, r6
 8007584:	4628      	mov	r0, r5
 8007586:	47b8      	blx	r7
 8007588:	3001      	adds	r0, #1
 800758a:	d12b      	bne.n	80075e4 <_printf_float+0x23c>
 800758c:	e767      	b.n	800745e <_printf_float+0xb6>
 800758e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007592:	f240 80dd 	bls.w	8007750 <_printf_float+0x3a8>
 8007596:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800759a:	2200      	movs	r2, #0
 800759c:	2300      	movs	r3, #0
 800759e:	f7f9 fa9b 	bl	8000ad8 <__aeabi_dcmpeq>
 80075a2:	2800      	cmp	r0, #0
 80075a4:	d033      	beq.n	800760e <_printf_float+0x266>
 80075a6:	4a37      	ldr	r2, [pc, #220]	@ (8007684 <_printf_float+0x2dc>)
 80075a8:	2301      	movs	r3, #1
 80075aa:	4631      	mov	r1, r6
 80075ac:	4628      	mov	r0, r5
 80075ae:	47b8      	blx	r7
 80075b0:	3001      	adds	r0, #1
 80075b2:	f43f af54 	beq.w	800745e <_printf_float+0xb6>
 80075b6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80075ba:	4543      	cmp	r3, r8
 80075bc:	db02      	blt.n	80075c4 <_printf_float+0x21c>
 80075be:	6823      	ldr	r3, [r4, #0]
 80075c0:	07d8      	lsls	r0, r3, #31
 80075c2:	d50f      	bpl.n	80075e4 <_printf_float+0x23c>
 80075c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075c8:	4631      	mov	r1, r6
 80075ca:	4628      	mov	r0, r5
 80075cc:	47b8      	blx	r7
 80075ce:	3001      	adds	r0, #1
 80075d0:	f43f af45 	beq.w	800745e <_printf_float+0xb6>
 80075d4:	f04f 0900 	mov.w	r9, #0
 80075d8:	f108 38ff 	add.w	r8, r8, #4294967295
 80075dc:	f104 0a1a 	add.w	sl, r4, #26
 80075e0:	45c8      	cmp	r8, r9
 80075e2:	dc09      	bgt.n	80075f8 <_printf_float+0x250>
 80075e4:	6823      	ldr	r3, [r4, #0]
 80075e6:	079b      	lsls	r3, r3, #30
 80075e8:	f100 8103 	bmi.w	80077f2 <_printf_float+0x44a>
 80075ec:	68e0      	ldr	r0, [r4, #12]
 80075ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80075f0:	4298      	cmp	r0, r3
 80075f2:	bfb8      	it	lt
 80075f4:	4618      	movlt	r0, r3
 80075f6:	e734      	b.n	8007462 <_printf_float+0xba>
 80075f8:	2301      	movs	r3, #1
 80075fa:	4652      	mov	r2, sl
 80075fc:	4631      	mov	r1, r6
 80075fe:	4628      	mov	r0, r5
 8007600:	47b8      	blx	r7
 8007602:	3001      	adds	r0, #1
 8007604:	f43f af2b 	beq.w	800745e <_printf_float+0xb6>
 8007608:	f109 0901 	add.w	r9, r9, #1
 800760c:	e7e8      	b.n	80075e0 <_printf_float+0x238>
 800760e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007610:	2b00      	cmp	r3, #0
 8007612:	dc39      	bgt.n	8007688 <_printf_float+0x2e0>
 8007614:	4a1b      	ldr	r2, [pc, #108]	@ (8007684 <_printf_float+0x2dc>)
 8007616:	2301      	movs	r3, #1
 8007618:	4631      	mov	r1, r6
 800761a:	4628      	mov	r0, r5
 800761c:	47b8      	blx	r7
 800761e:	3001      	adds	r0, #1
 8007620:	f43f af1d 	beq.w	800745e <_printf_float+0xb6>
 8007624:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007628:	ea59 0303 	orrs.w	r3, r9, r3
 800762c:	d102      	bne.n	8007634 <_printf_float+0x28c>
 800762e:	6823      	ldr	r3, [r4, #0]
 8007630:	07d9      	lsls	r1, r3, #31
 8007632:	d5d7      	bpl.n	80075e4 <_printf_float+0x23c>
 8007634:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007638:	4631      	mov	r1, r6
 800763a:	4628      	mov	r0, r5
 800763c:	47b8      	blx	r7
 800763e:	3001      	adds	r0, #1
 8007640:	f43f af0d 	beq.w	800745e <_printf_float+0xb6>
 8007644:	f04f 0a00 	mov.w	sl, #0
 8007648:	f104 0b1a 	add.w	fp, r4, #26
 800764c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800764e:	425b      	negs	r3, r3
 8007650:	4553      	cmp	r3, sl
 8007652:	dc01      	bgt.n	8007658 <_printf_float+0x2b0>
 8007654:	464b      	mov	r3, r9
 8007656:	e793      	b.n	8007580 <_printf_float+0x1d8>
 8007658:	2301      	movs	r3, #1
 800765a:	465a      	mov	r2, fp
 800765c:	4631      	mov	r1, r6
 800765e:	4628      	mov	r0, r5
 8007660:	47b8      	blx	r7
 8007662:	3001      	adds	r0, #1
 8007664:	f43f aefb 	beq.w	800745e <_printf_float+0xb6>
 8007668:	f10a 0a01 	add.w	sl, sl, #1
 800766c:	e7ee      	b.n	800764c <_printf_float+0x2a4>
 800766e:	bf00      	nop
 8007670:	7fefffff 	.word	0x7fefffff
 8007674:	08009fc8 	.word	0x08009fc8
 8007678:	08009fcc 	.word	0x08009fcc
 800767c:	08009fd0 	.word	0x08009fd0
 8007680:	08009fd4 	.word	0x08009fd4
 8007684:	08009fd8 	.word	0x08009fd8
 8007688:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800768a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800768e:	4553      	cmp	r3, sl
 8007690:	bfa8      	it	ge
 8007692:	4653      	movge	r3, sl
 8007694:	2b00      	cmp	r3, #0
 8007696:	4699      	mov	r9, r3
 8007698:	dc36      	bgt.n	8007708 <_printf_float+0x360>
 800769a:	f04f 0b00 	mov.w	fp, #0
 800769e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80076a2:	f104 021a 	add.w	r2, r4, #26
 80076a6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80076a8:	9306      	str	r3, [sp, #24]
 80076aa:	eba3 0309 	sub.w	r3, r3, r9
 80076ae:	455b      	cmp	r3, fp
 80076b0:	dc31      	bgt.n	8007716 <_printf_float+0x36e>
 80076b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076b4:	459a      	cmp	sl, r3
 80076b6:	dc3a      	bgt.n	800772e <_printf_float+0x386>
 80076b8:	6823      	ldr	r3, [r4, #0]
 80076ba:	07da      	lsls	r2, r3, #31
 80076bc:	d437      	bmi.n	800772e <_printf_float+0x386>
 80076be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076c0:	ebaa 0903 	sub.w	r9, sl, r3
 80076c4:	9b06      	ldr	r3, [sp, #24]
 80076c6:	ebaa 0303 	sub.w	r3, sl, r3
 80076ca:	4599      	cmp	r9, r3
 80076cc:	bfa8      	it	ge
 80076ce:	4699      	movge	r9, r3
 80076d0:	f1b9 0f00 	cmp.w	r9, #0
 80076d4:	dc33      	bgt.n	800773e <_printf_float+0x396>
 80076d6:	f04f 0800 	mov.w	r8, #0
 80076da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80076de:	f104 0b1a 	add.w	fp, r4, #26
 80076e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076e4:	ebaa 0303 	sub.w	r3, sl, r3
 80076e8:	eba3 0309 	sub.w	r3, r3, r9
 80076ec:	4543      	cmp	r3, r8
 80076ee:	f77f af79 	ble.w	80075e4 <_printf_float+0x23c>
 80076f2:	2301      	movs	r3, #1
 80076f4:	465a      	mov	r2, fp
 80076f6:	4631      	mov	r1, r6
 80076f8:	4628      	mov	r0, r5
 80076fa:	47b8      	blx	r7
 80076fc:	3001      	adds	r0, #1
 80076fe:	f43f aeae 	beq.w	800745e <_printf_float+0xb6>
 8007702:	f108 0801 	add.w	r8, r8, #1
 8007706:	e7ec      	b.n	80076e2 <_printf_float+0x33a>
 8007708:	4642      	mov	r2, r8
 800770a:	4631      	mov	r1, r6
 800770c:	4628      	mov	r0, r5
 800770e:	47b8      	blx	r7
 8007710:	3001      	adds	r0, #1
 8007712:	d1c2      	bne.n	800769a <_printf_float+0x2f2>
 8007714:	e6a3      	b.n	800745e <_printf_float+0xb6>
 8007716:	2301      	movs	r3, #1
 8007718:	4631      	mov	r1, r6
 800771a:	4628      	mov	r0, r5
 800771c:	9206      	str	r2, [sp, #24]
 800771e:	47b8      	blx	r7
 8007720:	3001      	adds	r0, #1
 8007722:	f43f ae9c 	beq.w	800745e <_printf_float+0xb6>
 8007726:	9a06      	ldr	r2, [sp, #24]
 8007728:	f10b 0b01 	add.w	fp, fp, #1
 800772c:	e7bb      	b.n	80076a6 <_printf_float+0x2fe>
 800772e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007732:	4631      	mov	r1, r6
 8007734:	4628      	mov	r0, r5
 8007736:	47b8      	blx	r7
 8007738:	3001      	adds	r0, #1
 800773a:	d1c0      	bne.n	80076be <_printf_float+0x316>
 800773c:	e68f      	b.n	800745e <_printf_float+0xb6>
 800773e:	9a06      	ldr	r2, [sp, #24]
 8007740:	464b      	mov	r3, r9
 8007742:	4442      	add	r2, r8
 8007744:	4631      	mov	r1, r6
 8007746:	4628      	mov	r0, r5
 8007748:	47b8      	blx	r7
 800774a:	3001      	adds	r0, #1
 800774c:	d1c3      	bne.n	80076d6 <_printf_float+0x32e>
 800774e:	e686      	b.n	800745e <_printf_float+0xb6>
 8007750:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007754:	f1ba 0f01 	cmp.w	sl, #1
 8007758:	dc01      	bgt.n	800775e <_printf_float+0x3b6>
 800775a:	07db      	lsls	r3, r3, #31
 800775c:	d536      	bpl.n	80077cc <_printf_float+0x424>
 800775e:	2301      	movs	r3, #1
 8007760:	4642      	mov	r2, r8
 8007762:	4631      	mov	r1, r6
 8007764:	4628      	mov	r0, r5
 8007766:	47b8      	blx	r7
 8007768:	3001      	adds	r0, #1
 800776a:	f43f ae78 	beq.w	800745e <_printf_float+0xb6>
 800776e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007772:	4631      	mov	r1, r6
 8007774:	4628      	mov	r0, r5
 8007776:	47b8      	blx	r7
 8007778:	3001      	adds	r0, #1
 800777a:	f43f ae70 	beq.w	800745e <_printf_float+0xb6>
 800777e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007782:	2200      	movs	r2, #0
 8007784:	2300      	movs	r3, #0
 8007786:	f10a 3aff 	add.w	sl, sl, #4294967295
 800778a:	f7f9 f9a5 	bl	8000ad8 <__aeabi_dcmpeq>
 800778e:	b9c0      	cbnz	r0, 80077c2 <_printf_float+0x41a>
 8007790:	4653      	mov	r3, sl
 8007792:	f108 0201 	add.w	r2, r8, #1
 8007796:	4631      	mov	r1, r6
 8007798:	4628      	mov	r0, r5
 800779a:	47b8      	blx	r7
 800779c:	3001      	adds	r0, #1
 800779e:	d10c      	bne.n	80077ba <_printf_float+0x412>
 80077a0:	e65d      	b.n	800745e <_printf_float+0xb6>
 80077a2:	2301      	movs	r3, #1
 80077a4:	465a      	mov	r2, fp
 80077a6:	4631      	mov	r1, r6
 80077a8:	4628      	mov	r0, r5
 80077aa:	47b8      	blx	r7
 80077ac:	3001      	adds	r0, #1
 80077ae:	f43f ae56 	beq.w	800745e <_printf_float+0xb6>
 80077b2:	f108 0801 	add.w	r8, r8, #1
 80077b6:	45d0      	cmp	r8, sl
 80077b8:	dbf3      	blt.n	80077a2 <_printf_float+0x3fa>
 80077ba:	464b      	mov	r3, r9
 80077bc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80077c0:	e6df      	b.n	8007582 <_printf_float+0x1da>
 80077c2:	f04f 0800 	mov.w	r8, #0
 80077c6:	f104 0b1a 	add.w	fp, r4, #26
 80077ca:	e7f4      	b.n	80077b6 <_printf_float+0x40e>
 80077cc:	2301      	movs	r3, #1
 80077ce:	4642      	mov	r2, r8
 80077d0:	e7e1      	b.n	8007796 <_printf_float+0x3ee>
 80077d2:	2301      	movs	r3, #1
 80077d4:	464a      	mov	r2, r9
 80077d6:	4631      	mov	r1, r6
 80077d8:	4628      	mov	r0, r5
 80077da:	47b8      	blx	r7
 80077dc:	3001      	adds	r0, #1
 80077de:	f43f ae3e 	beq.w	800745e <_printf_float+0xb6>
 80077e2:	f108 0801 	add.w	r8, r8, #1
 80077e6:	68e3      	ldr	r3, [r4, #12]
 80077e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80077ea:	1a5b      	subs	r3, r3, r1
 80077ec:	4543      	cmp	r3, r8
 80077ee:	dcf0      	bgt.n	80077d2 <_printf_float+0x42a>
 80077f0:	e6fc      	b.n	80075ec <_printf_float+0x244>
 80077f2:	f04f 0800 	mov.w	r8, #0
 80077f6:	f104 0919 	add.w	r9, r4, #25
 80077fa:	e7f4      	b.n	80077e6 <_printf_float+0x43e>

080077fc <_printf_common>:
 80077fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007800:	4616      	mov	r6, r2
 8007802:	4698      	mov	r8, r3
 8007804:	688a      	ldr	r2, [r1, #8]
 8007806:	690b      	ldr	r3, [r1, #16]
 8007808:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800780c:	4293      	cmp	r3, r2
 800780e:	bfb8      	it	lt
 8007810:	4613      	movlt	r3, r2
 8007812:	6033      	str	r3, [r6, #0]
 8007814:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007818:	4607      	mov	r7, r0
 800781a:	460c      	mov	r4, r1
 800781c:	b10a      	cbz	r2, 8007822 <_printf_common+0x26>
 800781e:	3301      	adds	r3, #1
 8007820:	6033      	str	r3, [r6, #0]
 8007822:	6823      	ldr	r3, [r4, #0]
 8007824:	0699      	lsls	r1, r3, #26
 8007826:	bf42      	ittt	mi
 8007828:	6833      	ldrmi	r3, [r6, #0]
 800782a:	3302      	addmi	r3, #2
 800782c:	6033      	strmi	r3, [r6, #0]
 800782e:	6825      	ldr	r5, [r4, #0]
 8007830:	f015 0506 	ands.w	r5, r5, #6
 8007834:	d106      	bne.n	8007844 <_printf_common+0x48>
 8007836:	f104 0a19 	add.w	sl, r4, #25
 800783a:	68e3      	ldr	r3, [r4, #12]
 800783c:	6832      	ldr	r2, [r6, #0]
 800783e:	1a9b      	subs	r3, r3, r2
 8007840:	42ab      	cmp	r3, r5
 8007842:	dc26      	bgt.n	8007892 <_printf_common+0x96>
 8007844:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007848:	6822      	ldr	r2, [r4, #0]
 800784a:	3b00      	subs	r3, #0
 800784c:	bf18      	it	ne
 800784e:	2301      	movne	r3, #1
 8007850:	0692      	lsls	r2, r2, #26
 8007852:	d42b      	bmi.n	80078ac <_printf_common+0xb0>
 8007854:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007858:	4641      	mov	r1, r8
 800785a:	4638      	mov	r0, r7
 800785c:	47c8      	blx	r9
 800785e:	3001      	adds	r0, #1
 8007860:	d01e      	beq.n	80078a0 <_printf_common+0xa4>
 8007862:	6823      	ldr	r3, [r4, #0]
 8007864:	6922      	ldr	r2, [r4, #16]
 8007866:	f003 0306 	and.w	r3, r3, #6
 800786a:	2b04      	cmp	r3, #4
 800786c:	bf02      	ittt	eq
 800786e:	68e5      	ldreq	r5, [r4, #12]
 8007870:	6833      	ldreq	r3, [r6, #0]
 8007872:	1aed      	subeq	r5, r5, r3
 8007874:	68a3      	ldr	r3, [r4, #8]
 8007876:	bf0c      	ite	eq
 8007878:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800787c:	2500      	movne	r5, #0
 800787e:	4293      	cmp	r3, r2
 8007880:	bfc4      	itt	gt
 8007882:	1a9b      	subgt	r3, r3, r2
 8007884:	18ed      	addgt	r5, r5, r3
 8007886:	2600      	movs	r6, #0
 8007888:	341a      	adds	r4, #26
 800788a:	42b5      	cmp	r5, r6
 800788c:	d11a      	bne.n	80078c4 <_printf_common+0xc8>
 800788e:	2000      	movs	r0, #0
 8007890:	e008      	b.n	80078a4 <_printf_common+0xa8>
 8007892:	2301      	movs	r3, #1
 8007894:	4652      	mov	r2, sl
 8007896:	4641      	mov	r1, r8
 8007898:	4638      	mov	r0, r7
 800789a:	47c8      	blx	r9
 800789c:	3001      	adds	r0, #1
 800789e:	d103      	bne.n	80078a8 <_printf_common+0xac>
 80078a0:	f04f 30ff 	mov.w	r0, #4294967295
 80078a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078a8:	3501      	adds	r5, #1
 80078aa:	e7c6      	b.n	800783a <_printf_common+0x3e>
 80078ac:	18e1      	adds	r1, r4, r3
 80078ae:	1c5a      	adds	r2, r3, #1
 80078b0:	2030      	movs	r0, #48	@ 0x30
 80078b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80078b6:	4422      	add	r2, r4
 80078b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80078bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80078c0:	3302      	adds	r3, #2
 80078c2:	e7c7      	b.n	8007854 <_printf_common+0x58>
 80078c4:	2301      	movs	r3, #1
 80078c6:	4622      	mov	r2, r4
 80078c8:	4641      	mov	r1, r8
 80078ca:	4638      	mov	r0, r7
 80078cc:	47c8      	blx	r9
 80078ce:	3001      	adds	r0, #1
 80078d0:	d0e6      	beq.n	80078a0 <_printf_common+0xa4>
 80078d2:	3601      	adds	r6, #1
 80078d4:	e7d9      	b.n	800788a <_printf_common+0x8e>
	...

080078d8 <_printf_i>:
 80078d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078dc:	7e0f      	ldrb	r7, [r1, #24]
 80078de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80078e0:	2f78      	cmp	r7, #120	@ 0x78
 80078e2:	4691      	mov	r9, r2
 80078e4:	4680      	mov	r8, r0
 80078e6:	460c      	mov	r4, r1
 80078e8:	469a      	mov	sl, r3
 80078ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80078ee:	d807      	bhi.n	8007900 <_printf_i+0x28>
 80078f0:	2f62      	cmp	r7, #98	@ 0x62
 80078f2:	d80a      	bhi.n	800790a <_printf_i+0x32>
 80078f4:	2f00      	cmp	r7, #0
 80078f6:	f000 80d2 	beq.w	8007a9e <_printf_i+0x1c6>
 80078fa:	2f58      	cmp	r7, #88	@ 0x58
 80078fc:	f000 80b9 	beq.w	8007a72 <_printf_i+0x19a>
 8007900:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007904:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007908:	e03a      	b.n	8007980 <_printf_i+0xa8>
 800790a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800790e:	2b15      	cmp	r3, #21
 8007910:	d8f6      	bhi.n	8007900 <_printf_i+0x28>
 8007912:	a101      	add	r1, pc, #4	@ (adr r1, 8007918 <_printf_i+0x40>)
 8007914:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007918:	08007971 	.word	0x08007971
 800791c:	08007985 	.word	0x08007985
 8007920:	08007901 	.word	0x08007901
 8007924:	08007901 	.word	0x08007901
 8007928:	08007901 	.word	0x08007901
 800792c:	08007901 	.word	0x08007901
 8007930:	08007985 	.word	0x08007985
 8007934:	08007901 	.word	0x08007901
 8007938:	08007901 	.word	0x08007901
 800793c:	08007901 	.word	0x08007901
 8007940:	08007901 	.word	0x08007901
 8007944:	08007a85 	.word	0x08007a85
 8007948:	080079af 	.word	0x080079af
 800794c:	08007a3f 	.word	0x08007a3f
 8007950:	08007901 	.word	0x08007901
 8007954:	08007901 	.word	0x08007901
 8007958:	08007aa7 	.word	0x08007aa7
 800795c:	08007901 	.word	0x08007901
 8007960:	080079af 	.word	0x080079af
 8007964:	08007901 	.word	0x08007901
 8007968:	08007901 	.word	0x08007901
 800796c:	08007a47 	.word	0x08007a47
 8007970:	6833      	ldr	r3, [r6, #0]
 8007972:	1d1a      	adds	r2, r3, #4
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	6032      	str	r2, [r6, #0]
 8007978:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800797c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007980:	2301      	movs	r3, #1
 8007982:	e09d      	b.n	8007ac0 <_printf_i+0x1e8>
 8007984:	6833      	ldr	r3, [r6, #0]
 8007986:	6820      	ldr	r0, [r4, #0]
 8007988:	1d19      	adds	r1, r3, #4
 800798a:	6031      	str	r1, [r6, #0]
 800798c:	0606      	lsls	r6, r0, #24
 800798e:	d501      	bpl.n	8007994 <_printf_i+0xbc>
 8007990:	681d      	ldr	r5, [r3, #0]
 8007992:	e003      	b.n	800799c <_printf_i+0xc4>
 8007994:	0645      	lsls	r5, r0, #25
 8007996:	d5fb      	bpl.n	8007990 <_printf_i+0xb8>
 8007998:	f9b3 5000 	ldrsh.w	r5, [r3]
 800799c:	2d00      	cmp	r5, #0
 800799e:	da03      	bge.n	80079a8 <_printf_i+0xd0>
 80079a0:	232d      	movs	r3, #45	@ 0x2d
 80079a2:	426d      	negs	r5, r5
 80079a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079a8:	4859      	ldr	r0, [pc, #356]	@ (8007b10 <_printf_i+0x238>)
 80079aa:	230a      	movs	r3, #10
 80079ac:	e011      	b.n	80079d2 <_printf_i+0xfa>
 80079ae:	6821      	ldr	r1, [r4, #0]
 80079b0:	6833      	ldr	r3, [r6, #0]
 80079b2:	0608      	lsls	r0, r1, #24
 80079b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80079b8:	d402      	bmi.n	80079c0 <_printf_i+0xe8>
 80079ba:	0649      	lsls	r1, r1, #25
 80079bc:	bf48      	it	mi
 80079be:	b2ad      	uxthmi	r5, r5
 80079c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80079c2:	4853      	ldr	r0, [pc, #332]	@ (8007b10 <_printf_i+0x238>)
 80079c4:	6033      	str	r3, [r6, #0]
 80079c6:	bf14      	ite	ne
 80079c8:	230a      	movne	r3, #10
 80079ca:	2308      	moveq	r3, #8
 80079cc:	2100      	movs	r1, #0
 80079ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80079d2:	6866      	ldr	r6, [r4, #4]
 80079d4:	60a6      	str	r6, [r4, #8]
 80079d6:	2e00      	cmp	r6, #0
 80079d8:	bfa2      	ittt	ge
 80079da:	6821      	ldrge	r1, [r4, #0]
 80079dc:	f021 0104 	bicge.w	r1, r1, #4
 80079e0:	6021      	strge	r1, [r4, #0]
 80079e2:	b90d      	cbnz	r5, 80079e8 <_printf_i+0x110>
 80079e4:	2e00      	cmp	r6, #0
 80079e6:	d04b      	beq.n	8007a80 <_printf_i+0x1a8>
 80079e8:	4616      	mov	r6, r2
 80079ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80079ee:	fb03 5711 	mls	r7, r3, r1, r5
 80079f2:	5dc7      	ldrb	r7, [r0, r7]
 80079f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80079f8:	462f      	mov	r7, r5
 80079fa:	42bb      	cmp	r3, r7
 80079fc:	460d      	mov	r5, r1
 80079fe:	d9f4      	bls.n	80079ea <_printf_i+0x112>
 8007a00:	2b08      	cmp	r3, #8
 8007a02:	d10b      	bne.n	8007a1c <_printf_i+0x144>
 8007a04:	6823      	ldr	r3, [r4, #0]
 8007a06:	07df      	lsls	r7, r3, #31
 8007a08:	d508      	bpl.n	8007a1c <_printf_i+0x144>
 8007a0a:	6923      	ldr	r3, [r4, #16]
 8007a0c:	6861      	ldr	r1, [r4, #4]
 8007a0e:	4299      	cmp	r1, r3
 8007a10:	bfde      	ittt	le
 8007a12:	2330      	movle	r3, #48	@ 0x30
 8007a14:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007a18:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007a1c:	1b92      	subs	r2, r2, r6
 8007a1e:	6122      	str	r2, [r4, #16]
 8007a20:	f8cd a000 	str.w	sl, [sp]
 8007a24:	464b      	mov	r3, r9
 8007a26:	aa03      	add	r2, sp, #12
 8007a28:	4621      	mov	r1, r4
 8007a2a:	4640      	mov	r0, r8
 8007a2c:	f7ff fee6 	bl	80077fc <_printf_common>
 8007a30:	3001      	adds	r0, #1
 8007a32:	d14a      	bne.n	8007aca <_printf_i+0x1f2>
 8007a34:	f04f 30ff 	mov.w	r0, #4294967295
 8007a38:	b004      	add	sp, #16
 8007a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a3e:	6823      	ldr	r3, [r4, #0]
 8007a40:	f043 0320 	orr.w	r3, r3, #32
 8007a44:	6023      	str	r3, [r4, #0]
 8007a46:	4833      	ldr	r0, [pc, #204]	@ (8007b14 <_printf_i+0x23c>)
 8007a48:	2778      	movs	r7, #120	@ 0x78
 8007a4a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007a4e:	6823      	ldr	r3, [r4, #0]
 8007a50:	6831      	ldr	r1, [r6, #0]
 8007a52:	061f      	lsls	r7, r3, #24
 8007a54:	f851 5b04 	ldr.w	r5, [r1], #4
 8007a58:	d402      	bmi.n	8007a60 <_printf_i+0x188>
 8007a5a:	065f      	lsls	r7, r3, #25
 8007a5c:	bf48      	it	mi
 8007a5e:	b2ad      	uxthmi	r5, r5
 8007a60:	6031      	str	r1, [r6, #0]
 8007a62:	07d9      	lsls	r1, r3, #31
 8007a64:	bf44      	itt	mi
 8007a66:	f043 0320 	orrmi.w	r3, r3, #32
 8007a6a:	6023      	strmi	r3, [r4, #0]
 8007a6c:	b11d      	cbz	r5, 8007a76 <_printf_i+0x19e>
 8007a6e:	2310      	movs	r3, #16
 8007a70:	e7ac      	b.n	80079cc <_printf_i+0xf4>
 8007a72:	4827      	ldr	r0, [pc, #156]	@ (8007b10 <_printf_i+0x238>)
 8007a74:	e7e9      	b.n	8007a4a <_printf_i+0x172>
 8007a76:	6823      	ldr	r3, [r4, #0]
 8007a78:	f023 0320 	bic.w	r3, r3, #32
 8007a7c:	6023      	str	r3, [r4, #0]
 8007a7e:	e7f6      	b.n	8007a6e <_printf_i+0x196>
 8007a80:	4616      	mov	r6, r2
 8007a82:	e7bd      	b.n	8007a00 <_printf_i+0x128>
 8007a84:	6833      	ldr	r3, [r6, #0]
 8007a86:	6825      	ldr	r5, [r4, #0]
 8007a88:	6961      	ldr	r1, [r4, #20]
 8007a8a:	1d18      	adds	r0, r3, #4
 8007a8c:	6030      	str	r0, [r6, #0]
 8007a8e:	062e      	lsls	r6, r5, #24
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	d501      	bpl.n	8007a98 <_printf_i+0x1c0>
 8007a94:	6019      	str	r1, [r3, #0]
 8007a96:	e002      	b.n	8007a9e <_printf_i+0x1c6>
 8007a98:	0668      	lsls	r0, r5, #25
 8007a9a:	d5fb      	bpl.n	8007a94 <_printf_i+0x1bc>
 8007a9c:	8019      	strh	r1, [r3, #0]
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	6123      	str	r3, [r4, #16]
 8007aa2:	4616      	mov	r6, r2
 8007aa4:	e7bc      	b.n	8007a20 <_printf_i+0x148>
 8007aa6:	6833      	ldr	r3, [r6, #0]
 8007aa8:	1d1a      	adds	r2, r3, #4
 8007aaa:	6032      	str	r2, [r6, #0]
 8007aac:	681e      	ldr	r6, [r3, #0]
 8007aae:	6862      	ldr	r2, [r4, #4]
 8007ab0:	2100      	movs	r1, #0
 8007ab2:	4630      	mov	r0, r6
 8007ab4:	f7f8 fb94 	bl	80001e0 <memchr>
 8007ab8:	b108      	cbz	r0, 8007abe <_printf_i+0x1e6>
 8007aba:	1b80      	subs	r0, r0, r6
 8007abc:	6060      	str	r0, [r4, #4]
 8007abe:	6863      	ldr	r3, [r4, #4]
 8007ac0:	6123      	str	r3, [r4, #16]
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ac8:	e7aa      	b.n	8007a20 <_printf_i+0x148>
 8007aca:	6923      	ldr	r3, [r4, #16]
 8007acc:	4632      	mov	r2, r6
 8007ace:	4649      	mov	r1, r9
 8007ad0:	4640      	mov	r0, r8
 8007ad2:	47d0      	blx	sl
 8007ad4:	3001      	adds	r0, #1
 8007ad6:	d0ad      	beq.n	8007a34 <_printf_i+0x15c>
 8007ad8:	6823      	ldr	r3, [r4, #0]
 8007ada:	079b      	lsls	r3, r3, #30
 8007adc:	d413      	bmi.n	8007b06 <_printf_i+0x22e>
 8007ade:	68e0      	ldr	r0, [r4, #12]
 8007ae0:	9b03      	ldr	r3, [sp, #12]
 8007ae2:	4298      	cmp	r0, r3
 8007ae4:	bfb8      	it	lt
 8007ae6:	4618      	movlt	r0, r3
 8007ae8:	e7a6      	b.n	8007a38 <_printf_i+0x160>
 8007aea:	2301      	movs	r3, #1
 8007aec:	4632      	mov	r2, r6
 8007aee:	4649      	mov	r1, r9
 8007af0:	4640      	mov	r0, r8
 8007af2:	47d0      	blx	sl
 8007af4:	3001      	adds	r0, #1
 8007af6:	d09d      	beq.n	8007a34 <_printf_i+0x15c>
 8007af8:	3501      	adds	r5, #1
 8007afa:	68e3      	ldr	r3, [r4, #12]
 8007afc:	9903      	ldr	r1, [sp, #12]
 8007afe:	1a5b      	subs	r3, r3, r1
 8007b00:	42ab      	cmp	r3, r5
 8007b02:	dcf2      	bgt.n	8007aea <_printf_i+0x212>
 8007b04:	e7eb      	b.n	8007ade <_printf_i+0x206>
 8007b06:	2500      	movs	r5, #0
 8007b08:	f104 0619 	add.w	r6, r4, #25
 8007b0c:	e7f5      	b.n	8007afa <_printf_i+0x222>
 8007b0e:	bf00      	nop
 8007b10:	08009fda 	.word	0x08009fda
 8007b14:	08009feb 	.word	0x08009feb

08007b18 <std>:
 8007b18:	2300      	movs	r3, #0
 8007b1a:	b510      	push	{r4, lr}
 8007b1c:	4604      	mov	r4, r0
 8007b1e:	e9c0 3300 	strd	r3, r3, [r0]
 8007b22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b26:	6083      	str	r3, [r0, #8]
 8007b28:	8181      	strh	r1, [r0, #12]
 8007b2a:	6643      	str	r3, [r0, #100]	@ 0x64
 8007b2c:	81c2      	strh	r2, [r0, #14]
 8007b2e:	6183      	str	r3, [r0, #24]
 8007b30:	4619      	mov	r1, r3
 8007b32:	2208      	movs	r2, #8
 8007b34:	305c      	adds	r0, #92	@ 0x5c
 8007b36:	f000 f928 	bl	8007d8a <memset>
 8007b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8007b70 <std+0x58>)
 8007b3c:	6263      	str	r3, [r4, #36]	@ 0x24
 8007b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8007b74 <std+0x5c>)
 8007b40:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007b42:	4b0d      	ldr	r3, [pc, #52]	@ (8007b78 <std+0x60>)
 8007b44:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007b46:	4b0d      	ldr	r3, [pc, #52]	@ (8007b7c <std+0x64>)
 8007b48:	6323      	str	r3, [r4, #48]	@ 0x30
 8007b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8007b80 <std+0x68>)
 8007b4c:	6224      	str	r4, [r4, #32]
 8007b4e:	429c      	cmp	r4, r3
 8007b50:	d006      	beq.n	8007b60 <std+0x48>
 8007b52:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007b56:	4294      	cmp	r4, r2
 8007b58:	d002      	beq.n	8007b60 <std+0x48>
 8007b5a:	33d0      	adds	r3, #208	@ 0xd0
 8007b5c:	429c      	cmp	r4, r3
 8007b5e:	d105      	bne.n	8007b6c <std+0x54>
 8007b60:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b68:	f000 b98c 	b.w	8007e84 <__retarget_lock_init_recursive>
 8007b6c:	bd10      	pop	{r4, pc}
 8007b6e:	bf00      	nop
 8007b70:	08007d05 	.word	0x08007d05
 8007b74:	08007d27 	.word	0x08007d27
 8007b78:	08007d5f 	.word	0x08007d5f
 8007b7c:	08007d83 	.word	0x08007d83
 8007b80:	200003b8 	.word	0x200003b8

08007b84 <stdio_exit_handler>:
 8007b84:	4a02      	ldr	r2, [pc, #8]	@ (8007b90 <stdio_exit_handler+0xc>)
 8007b86:	4903      	ldr	r1, [pc, #12]	@ (8007b94 <stdio_exit_handler+0x10>)
 8007b88:	4803      	ldr	r0, [pc, #12]	@ (8007b98 <stdio_exit_handler+0x14>)
 8007b8a:	f000 b869 	b.w	8007c60 <_fwalk_sglue>
 8007b8e:	bf00      	nop
 8007b90:	20000010 	.word	0x20000010
 8007b94:	080097e5 	.word	0x080097e5
 8007b98:	20000020 	.word	0x20000020

08007b9c <cleanup_stdio>:
 8007b9c:	6841      	ldr	r1, [r0, #4]
 8007b9e:	4b0c      	ldr	r3, [pc, #48]	@ (8007bd0 <cleanup_stdio+0x34>)
 8007ba0:	4299      	cmp	r1, r3
 8007ba2:	b510      	push	{r4, lr}
 8007ba4:	4604      	mov	r4, r0
 8007ba6:	d001      	beq.n	8007bac <cleanup_stdio+0x10>
 8007ba8:	f001 fe1c 	bl	80097e4 <_fflush_r>
 8007bac:	68a1      	ldr	r1, [r4, #8]
 8007bae:	4b09      	ldr	r3, [pc, #36]	@ (8007bd4 <cleanup_stdio+0x38>)
 8007bb0:	4299      	cmp	r1, r3
 8007bb2:	d002      	beq.n	8007bba <cleanup_stdio+0x1e>
 8007bb4:	4620      	mov	r0, r4
 8007bb6:	f001 fe15 	bl	80097e4 <_fflush_r>
 8007bba:	68e1      	ldr	r1, [r4, #12]
 8007bbc:	4b06      	ldr	r3, [pc, #24]	@ (8007bd8 <cleanup_stdio+0x3c>)
 8007bbe:	4299      	cmp	r1, r3
 8007bc0:	d004      	beq.n	8007bcc <cleanup_stdio+0x30>
 8007bc2:	4620      	mov	r0, r4
 8007bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bc8:	f001 be0c 	b.w	80097e4 <_fflush_r>
 8007bcc:	bd10      	pop	{r4, pc}
 8007bce:	bf00      	nop
 8007bd0:	200003b8 	.word	0x200003b8
 8007bd4:	20000420 	.word	0x20000420
 8007bd8:	20000488 	.word	0x20000488

08007bdc <global_stdio_init.part.0>:
 8007bdc:	b510      	push	{r4, lr}
 8007bde:	4b0b      	ldr	r3, [pc, #44]	@ (8007c0c <global_stdio_init.part.0+0x30>)
 8007be0:	4c0b      	ldr	r4, [pc, #44]	@ (8007c10 <global_stdio_init.part.0+0x34>)
 8007be2:	4a0c      	ldr	r2, [pc, #48]	@ (8007c14 <global_stdio_init.part.0+0x38>)
 8007be4:	601a      	str	r2, [r3, #0]
 8007be6:	4620      	mov	r0, r4
 8007be8:	2200      	movs	r2, #0
 8007bea:	2104      	movs	r1, #4
 8007bec:	f7ff ff94 	bl	8007b18 <std>
 8007bf0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	2109      	movs	r1, #9
 8007bf8:	f7ff ff8e 	bl	8007b18 <std>
 8007bfc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007c00:	2202      	movs	r2, #2
 8007c02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c06:	2112      	movs	r1, #18
 8007c08:	f7ff bf86 	b.w	8007b18 <std>
 8007c0c:	200004f0 	.word	0x200004f0
 8007c10:	200003b8 	.word	0x200003b8
 8007c14:	08007b85 	.word	0x08007b85

08007c18 <__sfp_lock_acquire>:
 8007c18:	4801      	ldr	r0, [pc, #4]	@ (8007c20 <__sfp_lock_acquire+0x8>)
 8007c1a:	f000 b934 	b.w	8007e86 <__retarget_lock_acquire_recursive>
 8007c1e:	bf00      	nop
 8007c20:	200004f9 	.word	0x200004f9

08007c24 <__sfp_lock_release>:
 8007c24:	4801      	ldr	r0, [pc, #4]	@ (8007c2c <__sfp_lock_release+0x8>)
 8007c26:	f000 b92f 	b.w	8007e88 <__retarget_lock_release_recursive>
 8007c2a:	bf00      	nop
 8007c2c:	200004f9 	.word	0x200004f9

08007c30 <__sinit>:
 8007c30:	b510      	push	{r4, lr}
 8007c32:	4604      	mov	r4, r0
 8007c34:	f7ff fff0 	bl	8007c18 <__sfp_lock_acquire>
 8007c38:	6a23      	ldr	r3, [r4, #32]
 8007c3a:	b11b      	cbz	r3, 8007c44 <__sinit+0x14>
 8007c3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c40:	f7ff bff0 	b.w	8007c24 <__sfp_lock_release>
 8007c44:	4b04      	ldr	r3, [pc, #16]	@ (8007c58 <__sinit+0x28>)
 8007c46:	6223      	str	r3, [r4, #32]
 8007c48:	4b04      	ldr	r3, [pc, #16]	@ (8007c5c <__sinit+0x2c>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d1f5      	bne.n	8007c3c <__sinit+0xc>
 8007c50:	f7ff ffc4 	bl	8007bdc <global_stdio_init.part.0>
 8007c54:	e7f2      	b.n	8007c3c <__sinit+0xc>
 8007c56:	bf00      	nop
 8007c58:	08007b9d 	.word	0x08007b9d
 8007c5c:	200004f0 	.word	0x200004f0

08007c60 <_fwalk_sglue>:
 8007c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c64:	4607      	mov	r7, r0
 8007c66:	4688      	mov	r8, r1
 8007c68:	4614      	mov	r4, r2
 8007c6a:	2600      	movs	r6, #0
 8007c6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007c70:	f1b9 0901 	subs.w	r9, r9, #1
 8007c74:	d505      	bpl.n	8007c82 <_fwalk_sglue+0x22>
 8007c76:	6824      	ldr	r4, [r4, #0]
 8007c78:	2c00      	cmp	r4, #0
 8007c7a:	d1f7      	bne.n	8007c6c <_fwalk_sglue+0xc>
 8007c7c:	4630      	mov	r0, r6
 8007c7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c82:	89ab      	ldrh	r3, [r5, #12]
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d907      	bls.n	8007c98 <_fwalk_sglue+0x38>
 8007c88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007c8c:	3301      	adds	r3, #1
 8007c8e:	d003      	beq.n	8007c98 <_fwalk_sglue+0x38>
 8007c90:	4629      	mov	r1, r5
 8007c92:	4638      	mov	r0, r7
 8007c94:	47c0      	blx	r8
 8007c96:	4306      	orrs	r6, r0
 8007c98:	3568      	adds	r5, #104	@ 0x68
 8007c9a:	e7e9      	b.n	8007c70 <_fwalk_sglue+0x10>

08007c9c <sniprintf>:
 8007c9c:	b40c      	push	{r2, r3}
 8007c9e:	b530      	push	{r4, r5, lr}
 8007ca0:	4b17      	ldr	r3, [pc, #92]	@ (8007d00 <sniprintf+0x64>)
 8007ca2:	1e0c      	subs	r4, r1, #0
 8007ca4:	681d      	ldr	r5, [r3, #0]
 8007ca6:	b09d      	sub	sp, #116	@ 0x74
 8007ca8:	da08      	bge.n	8007cbc <sniprintf+0x20>
 8007caa:	238b      	movs	r3, #139	@ 0x8b
 8007cac:	602b      	str	r3, [r5, #0]
 8007cae:	f04f 30ff 	mov.w	r0, #4294967295
 8007cb2:	b01d      	add	sp, #116	@ 0x74
 8007cb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007cb8:	b002      	add	sp, #8
 8007cba:	4770      	bx	lr
 8007cbc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007cc0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007cc4:	bf14      	ite	ne
 8007cc6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007cca:	4623      	moveq	r3, r4
 8007ccc:	9304      	str	r3, [sp, #16]
 8007cce:	9307      	str	r3, [sp, #28]
 8007cd0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007cd4:	9002      	str	r0, [sp, #8]
 8007cd6:	9006      	str	r0, [sp, #24]
 8007cd8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007cdc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007cde:	ab21      	add	r3, sp, #132	@ 0x84
 8007ce0:	a902      	add	r1, sp, #8
 8007ce2:	4628      	mov	r0, r5
 8007ce4:	9301      	str	r3, [sp, #4]
 8007ce6:	f001 fbfd 	bl	80094e4 <_svfiprintf_r>
 8007cea:	1c43      	adds	r3, r0, #1
 8007cec:	bfbc      	itt	lt
 8007cee:	238b      	movlt	r3, #139	@ 0x8b
 8007cf0:	602b      	strlt	r3, [r5, #0]
 8007cf2:	2c00      	cmp	r4, #0
 8007cf4:	d0dd      	beq.n	8007cb2 <sniprintf+0x16>
 8007cf6:	9b02      	ldr	r3, [sp, #8]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	701a      	strb	r2, [r3, #0]
 8007cfc:	e7d9      	b.n	8007cb2 <sniprintf+0x16>
 8007cfe:	bf00      	nop
 8007d00:	2000001c 	.word	0x2000001c

08007d04 <__sread>:
 8007d04:	b510      	push	{r4, lr}
 8007d06:	460c      	mov	r4, r1
 8007d08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d0c:	f000 f86c 	bl	8007de8 <_read_r>
 8007d10:	2800      	cmp	r0, #0
 8007d12:	bfab      	itete	ge
 8007d14:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007d16:	89a3      	ldrhlt	r3, [r4, #12]
 8007d18:	181b      	addge	r3, r3, r0
 8007d1a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007d1e:	bfac      	ite	ge
 8007d20:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007d22:	81a3      	strhlt	r3, [r4, #12]
 8007d24:	bd10      	pop	{r4, pc}

08007d26 <__swrite>:
 8007d26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d2a:	461f      	mov	r7, r3
 8007d2c:	898b      	ldrh	r3, [r1, #12]
 8007d2e:	05db      	lsls	r3, r3, #23
 8007d30:	4605      	mov	r5, r0
 8007d32:	460c      	mov	r4, r1
 8007d34:	4616      	mov	r6, r2
 8007d36:	d505      	bpl.n	8007d44 <__swrite+0x1e>
 8007d38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d3c:	2302      	movs	r3, #2
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f000 f840 	bl	8007dc4 <_lseek_r>
 8007d44:	89a3      	ldrh	r3, [r4, #12]
 8007d46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d4a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007d4e:	81a3      	strh	r3, [r4, #12]
 8007d50:	4632      	mov	r2, r6
 8007d52:	463b      	mov	r3, r7
 8007d54:	4628      	mov	r0, r5
 8007d56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d5a:	f000 b857 	b.w	8007e0c <_write_r>

08007d5e <__sseek>:
 8007d5e:	b510      	push	{r4, lr}
 8007d60:	460c      	mov	r4, r1
 8007d62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d66:	f000 f82d 	bl	8007dc4 <_lseek_r>
 8007d6a:	1c43      	adds	r3, r0, #1
 8007d6c:	89a3      	ldrh	r3, [r4, #12]
 8007d6e:	bf15      	itete	ne
 8007d70:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007d72:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007d76:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007d7a:	81a3      	strheq	r3, [r4, #12]
 8007d7c:	bf18      	it	ne
 8007d7e:	81a3      	strhne	r3, [r4, #12]
 8007d80:	bd10      	pop	{r4, pc}

08007d82 <__sclose>:
 8007d82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d86:	f000 b80d 	b.w	8007da4 <_close_r>

08007d8a <memset>:
 8007d8a:	4402      	add	r2, r0
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d100      	bne.n	8007d94 <memset+0xa>
 8007d92:	4770      	bx	lr
 8007d94:	f803 1b01 	strb.w	r1, [r3], #1
 8007d98:	e7f9      	b.n	8007d8e <memset+0x4>
	...

08007d9c <_localeconv_r>:
 8007d9c:	4800      	ldr	r0, [pc, #0]	@ (8007da0 <_localeconv_r+0x4>)
 8007d9e:	4770      	bx	lr
 8007da0:	2000015c 	.word	0x2000015c

08007da4 <_close_r>:
 8007da4:	b538      	push	{r3, r4, r5, lr}
 8007da6:	4d06      	ldr	r5, [pc, #24]	@ (8007dc0 <_close_r+0x1c>)
 8007da8:	2300      	movs	r3, #0
 8007daa:	4604      	mov	r4, r0
 8007dac:	4608      	mov	r0, r1
 8007dae:	602b      	str	r3, [r5, #0]
 8007db0:	f7f9 fe06 	bl	80019c0 <_close>
 8007db4:	1c43      	adds	r3, r0, #1
 8007db6:	d102      	bne.n	8007dbe <_close_r+0x1a>
 8007db8:	682b      	ldr	r3, [r5, #0]
 8007dba:	b103      	cbz	r3, 8007dbe <_close_r+0x1a>
 8007dbc:	6023      	str	r3, [r4, #0]
 8007dbe:	bd38      	pop	{r3, r4, r5, pc}
 8007dc0:	200004f4 	.word	0x200004f4

08007dc4 <_lseek_r>:
 8007dc4:	b538      	push	{r3, r4, r5, lr}
 8007dc6:	4d07      	ldr	r5, [pc, #28]	@ (8007de4 <_lseek_r+0x20>)
 8007dc8:	4604      	mov	r4, r0
 8007dca:	4608      	mov	r0, r1
 8007dcc:	4611      	mov	r1, r2
 8007dce:	2200      	movs	r2, #0
 8007dd0:	602a      	str	r2, [r5, #0]
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	f7f9 fe1b 	bl	8001a0e <_lseek>
 8007dd8:	1c43      	adds	r3, r0, #1
 8007dda:	d102      	bne.n	8007de2 <_lseek_r+0x1e>
 8007ddc:	682b      	ldr	r3, [r5, #0]
 8007dde:	b103      	cbz	r3, 8007de2 <_lseek_r+0x1e>
 8007de0:	6023      	str	r3, [r4, #0]
 8007de2:	bd38      	pop	{r3, r4, r5, pc}
 8007de4:	200004f4 	.word	0x200004f4

08007de8 <_read_r>:
 8007de8:	b538      	push	{r3, r4, r5, lr}
 8007dea:	4d07      	ldr	r5, [pc, #28]	@ (8007e08 <_read_r+0x20>)
 8007dec:	4604      	mov	r4, r0
 8007dee:	4608      	mov	r0, r1
 8007df0:	4611      	mov	r1, r2
 8007df2:	2200      	movs	r2, #0
 8007df4:	602a      	str	r2, [r5, #0]
 8007df6:	461a      	mov	r2, r3
 8007df8:	f7f9 fda9 	bl	800194e <_read>
 8007dfc:	1c43      	adds	r3, r0, #1
 8007dfe:	d102      	bne.n	8007e06 <_read_r+0x1e>
 8007e00:	682b      	ldr	r3, [r5, #0]
 8007e02:	b103      	cbz	r3, 8007e06 <_read_r+0x1e>
 8007e04:	6023      	str	r3, [r4, #0]
 8007e06:	bd38      	pop	{r3, r4, r5, pc}
 8007e08:	200004f4 	.word	0x200004f4

08007e0c <_write_r>:
 8007e0c:	b538      	push	{r3, r4, r5, lr}
 8007e0e:	4d07      	ldr	r5, [pc, #28]	@ (8007e2c <_write_r+0x20>)
 8007e10:	4604      	mov	r4, r0
 8007e12:	4608      	mov	r0, r1
 8007e14:	4611      	mov	r1, r2
 8007e16:	2200      	movs	r2, #0
 8007e18:	602a      	str	r2, [r5, #0]
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	f7f9 fdb4 	bl	8001988 <_write>
 8007e20:	1c43      	adds	r3, r0, #1
 8007e22:	d102      	bne.n	8007e2a <_write_r+0x1e>
 8007e24:	682b      	ldr	r3, [r5, #0]
 8007e26:	b103      	cbz	r3, 8007e2a <_write_r+0x1e>
 8007e28:	6023      	str	r3, [r4, #0]
 8007e2a:	bd38      	pop	{r3, r4, r5, pc}
 8007e2c:	200004f4 	.word	0x200004f4

08007e30 <__errno>:
 8007e30:	4b01      	ldr	r3, [pc, #4]	@ (8007e38 <__errno+0x8>)
 8007e32:	6818      	ldr	r0, [r3, #0]
 8007e34:	4770      	bx	lr
 8007e36:	bf00      	nop
 8007e38:	2000001c 	.word	0x2000001c

08007e3c <__libc_init_array>:
 8007e3c:	b570      	push	{r4, r5, r6, lr}
 8007e3e:	4d0d      	ldr	r5, [pc, #52]	@ (8007e74 <__libc_init_array+0x38>)
 8007e40:	4c0d      	ldr	r4, [pc, #52]	@ (8007e78 <__libc_init_array+0x3c>)
 8007e42:	1b64      	subs	r4, r4, r5
 8007e44:	10a4      	asrs	r4, r4, #2
 8007e46:	2600      	movs	r6, #0
 8007e48:	42a6      	cmp	r6, r4
 8007e4a:	d109      	bne.n	8007e60 <__libc_init_array+0x24>
 8007e4c:	4d0b      	ldr	r5, [pc, #44]	@ (8007e7c <__libc_init_array+0x40>)
 8007e4e:	4c0c      	ldr	r4, [pc, #48]	@ (8007e80 <__libc_init_array+0x44>)
 8007e50:	f002 f866 	bl	8009f20 <_init>
 8007e54:	1b64      	subs	r4, r4, r5
 8007e56:	10a4      	asrs	r4, r4, #2
 8007e58:	2600      	movs	r6, #0
 8007e5a:	42a6      	cmp	r6, r4
 8007e5c:	d105      	bne.n	8007e6a <__libc_init_array+0x2e>
 8007e5e:	bd70      	pop	{r4, r5, r6, pc}
 8007e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e64:	4798      	blx	r3
 8007e66:	3601      	adds	r6, #1
 8007e68:	e7ee      	b.n	8007e48 <__libc_init_array+0xc>
 8007e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e6e:	4798      	blx	r3
 8007e70:	3601      	adds	r6, #1
 8007e72:	e7f2      	b.n	8007e5a <__libc_init_array+0x1e>
 8007e74:	0800a340 	.word	0x0800a340
 8007e78:	0800a340 	.word	0x0800a340
 8007e7c:	0800a340 	.word	0x0800a340
 8007e80:	0800a344 	.word	0x0800a344

08007e84 <__retarget_lock_init_recursive>:
 8007e84:	4770      	bx	lr

08007e86 <__retarget_lock_acquire_recursive>:
 8007e86:	4770      	bx	lr

08007e88 <__retarget_lock_release_recursive>:
 8007e88:	4770      	bx	lr

08007e8a <quorem>:
 8007e8a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e8e:	6903      	ldr	r3, [r0, #16]
 8007e90:	690c      	ldr	r4, [r1, #16]
 8007e92:	42a3      	cmp	r3, r4
 8007e94:	4607      	mov	r7, r0
 8007e96:	db7e      	blt.n	8007f96 <quorem+0x10c>
 8007e98:	3c01      	subs	r4, #1
 8007e9a:	f101 0814 	add.w	r8, r1, #20
 8007e9e:	00a3      	lsls	r3, r4, #2
 8007ea0:	f100 0514 	add.w	r5, r0, #20
 8007ea4:	9300      	str	r3, [sp, #0]
 8007ea6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007eaa:	9301      	str	r3, [sp, #4]
 8007eac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007eb0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007ebc:	fbb2 f6f3 	udiv	r6, r2, r3
 8007ec0:	d32e      	bcc.n	8007f20 <quorem+0x96>
 8007ec2:	f04f 0a00 	mov.w	sl, #0
 8007ec6:	46c4      	mov	ip, r8
 8007ec8:	46ae      	mov	lr, r5
 8007eca:	46d3      	mov	fp, sl
 8007ecc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007ed0:	b298      	uxth	r0, r3
 8007ed2:	fb06 a000 	mla	r0, r6, r0, sl
 8007ed6:	0c02      	lsrs	r2, r0, #16
 8007ed8:	0c1b      	lsrs	r3, r3, #16
 8007eda:	fb06 2303 	mla	r3, r6, r3, r2
 8007ede:	f8de 2000 	ldr.w	r2, [lr]
 8007ee2:	b280      	uxth	r0, r0
 8007ee4:	b292      	uxth	r2, r2
 8007ee6:	1a12      	subs	r2, r2, r0
 8007ee8:	445a      	add	r2, fp
 8007eea:	f8de 0000 	ldr.w	r0, [lr]
 8007eee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007ef8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007efc:	b292      	uxth	r2, r2
 8007efe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007f02:	45e1      	cmp	r9, ip
 8007f04:	f84e 2b04 	str.w	r2, [lr], #4
 8007f08:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007f0c:	d2de      	bcs.n	8007ecc <quorem+0x42>
 8007f0e:	9b00      	ldr	r3, [sp, #0]
 8007f10:	58eb      	ldr	r3, [r5, r3]
 8007f12:	b92b      	cbnz	r3, 8007f20 <quorem+0x96>
 8007f14:	9b01      	ldr	r3, [sp, #4]
 8007f16:	3b04      	subs	r3, #4
 8007f18:	429d      	cmp	r5, r3
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	d32f      	bcc.n	8007f7e <quorem+0xf4>
 8007f1e:	613c      	str	r4, [r7, #16]
 8007f20:	4638      	mov	r0, r7
 8007f22:	f001 f97b 	bl	800921c <__mcmp>
 8007f26:	2800      	cmp	r0, #0
 8007f28:	db25      	blt.n	8007f76 <quorem+0xec>
 8007f2a:	4629      	mov	r1, r5
 8007f2c:	2000      	movs	r0, #0
 8007f2e:	f858 2b04 	ldr.w	r2, [r8], #4
 8007f32:	f8d1 c000 	ldr.w	ip, [r1]
 8007f36:	fa1f fe82 	uxth.w	lr, r2
 8007f3a:	fa1f f38c 	uxth.w	r3, ip
 8007f3e:	eba3 030e 	sub.w	r3, r3, lr
 8007f42:	4403      	add	r3, r0
 8007f44:	0c12      	lsrs	r2, r2, #16
 8007f46:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007f4a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f54:	45c1      	cmp	r9, r8
 8007f56:	f841 3b04 	str.w	r3, [r1], #4
 8007f5a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007f5e:	d2e6      	bcs.n	8007f2e <quorem+0xa4>
 8007f60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f64:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f68:	b922      	cbnz	r2, 8007f74 <quorem+0xea>
 8007f6a:	3b04      	subs	r3, #4
 8007f6c:	429d      	cmp	r5, r3
 8007f6e:	461a      	mov	r2, r3
 8007f70:	d30b      	bcc.n	8007f8a <quorem+0x100>
 8007f72:	613c      	str	r4, [r7, #16]
 8007f74:	3601      	adds	r6, #1
 8007f76:	4630      	mov	r0, r6
 8007f78:	b003      	add	sp, #12
 8007f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f7e:	6812      	ldr	r2, [r2, #0]
 8007f80:	3b04      	subs	r3, #4
 8007f82:	2a00      	cmp	r2, #0
 8007f84:	d1cb      	bne.n	8007f1e <quorem+0x94>
 8007f86:	3c01      	subs	r4, #1
 8007f88:	e7c6      	b.n	8007f18 <quorem+0x8e>
 8007f8a:	6812      	ldr	r2, [r2, #0]
 8007f8c:	3b04      	subs	r3, #4
 8007f8e:	2a00      	cmp	r2, #0
 8007f90:	d1ef      	bne.n	8007f72 <quorem+0xe8>
 8007f92:	3c01      	subs	r4, #1
 8007f94:	e7ea      	b.n	8007f6c <quorem+0xe2>
 8007f96:	2000      	movs	r0, #0
 8007f98:	e7ee      	b.n	8007f78 <quorem+0xee>
 8007f9a:	0000      	movs	r0, r0
 8007f9c:	0000      	movs	r0, r0
	...

08007fa0 <_dtoa_r>:
 8007fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fa4:	69c7      	ldr	r7, [r0, #28]
 8007fa6:	b099      	sub	sp, #100	@ 0x64
 8007fa8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007fac:	ec55 4b10 	vmov	r4, r5, d0
 8007fb0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007fb2:	9109      	str	r1, [sp, #36]	@ 0x24
 8007fb4:	4683      	mov	fp, r0
 8007fb6:	920e      	str	r2, [sp, #56]	@ 0x38
 8007fb8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007fba:	b97f      	cbnz	r7, 8007fdc <_dtoa_r+0x3c>
 8007fbc:	2010      	movs	r0, #16
 8007fbe:	f000 fdfd 	bl	8008bbc <malloc>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	f8cb 001c 	str.w	r0, [fp, #28]
 8007fc8:	b920      	cbnz	r0, 8007fd4 <_dtoa_r+0x34>
 8007fca:	4ba7      	ldr	r3, [pc, #668]	@ (8008268 <_dtoa_r+0x2c8>)
 8007fcc:	21ef      	movs	r1, #239	@ 0xef
 8007fce:	48a7      	ldr	r0, [pc, #668]	@ (800826c <_dtoa_r+0x2cc>)
 8007fd0:	f001 fc68 	bl	80098a4 <__assert_func>
 8007fd4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007fd8:	6007      	str	r7, [r0, #0]
 8007fda:	60c7      	str	r7, [r0, #12]
 8007fdc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007fe0:	6819      	ldr	r1, [r3, #0]
 8007fe2:	b159      	cbz	r1, 8007ffc <_dtoa_r+0x5c>
 8007fe4:	685a      	ldr	r2, [r3, #4]
 8007fe6:	604a      	str	r2, [r1, #4]
 8007fe8:	2301      	movs	r3, #1
 8007fea:	4093      	lsls	r3, r2
 8007fec:	608b      	str	r3, [r1, #8]
 8007fee:	4658      	mov	r0, fp
 8007ff0:	f000 feda 	bl	8008da8 <_Bfree>
 8007ff4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	601a      	str	r2, [r3, #0]
 8007ffc:	1e2b      	subs	r3, r5, #0
 8007ffe:	bfb9      	ittee	lt
 8008000:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008004:	9303      	strlt	r3, [sp, #12]
 8008006:	2300      	movge	r3, #0
 8008008:	6033      	strge	r3, [r6, #0]
 800800a:	9f03      	ldr	r7, [sp, #12]
 800800c:	4b98      	ldr	r3, [pc, #608]	@ (8008270 <_dtoa_r+0x2d0>)
 800800e:	bfbc      	itt	lt
 8008010:	2201      	movlt	r2, #1
 8008012:	6032      	strlt	r2, [r6, #0]
 8008014:	43bb      	bics	r3, r7
 8008016:	d112      	bne.n	800803e <_dtoa_r+0x9e>
 8008018:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800801a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800801e:	6013      	str	r3, [r2, #0]
 8008020:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008024:	4323      	orrs	r3, r4
 8008026:	f000 854d 	beq.w	8008ac4 <_dtoa_r+0xb24>
 800802a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800802c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008284 <_dtoa_r+0x2e4>
 8008030:	2b00      	cmp	r3, #0
 8008032:	f000 854f 	beq.w	8008ad4 <_dtoa_r+0xb34>
 8008036:	f10a 0303 	add.w	r3, sl, #3
 800803a:	f000 bd49 	b.w	8008ad0 <_dtoa_r+0xb30>
 800803e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008042:	2200      	movs	r2, #0
 8008044:	ec51 0b17 	vmov	r0, r1, d7
 8008048:	2300      	movs	r3, #0
 800804a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800804e:	f7f8 fd43 	bl	8000ad8 <__aeabi_dcmpeq>
 8008052:	4680      	mov	r8, r0
 8008054:	b158      	cbz	r0, 800806e <_dtoa_r+0xce>
 8008056:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008058:	2301      	movs	r3, #1
 800805a:	6013      	str	r3, [r2, #0]
 800805c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800805e:	b113      	cbz	r3, 8008066 <_dtoa_r+0xc6>
 8008060:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008062:	4b84      	ldr	r3, [pc, #528]	@ (8008274 <_dtoa_r+0x2d4>)
 8008064:	6013      	str	r3, [r2, #0]
 8008066:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008288 <_dtoa_r+0x2e8>
 800806a:	f000 bd33 	b.w	8008ad4 <_dtoa_r+0xb34>
 800806e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008072:	aa16      	add	r2, sp, #88	@ 0x58
 8008074:	a917      	add	r1, sp, #92	@ 0x5c
 8008076:	4658      	mov	r0, fp
 8008078:	f001 f980 	bl	800937c <__d2b>
 800807c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008080:	4681      	mov	r9, r0
 8008082:	2e00      	cmp	r6, #0
 8008084:	d077      	beq.n	8008176 <_dtoa_r+0x1d6>
 8008086:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008088:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800808c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008090:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008094:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008098:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800809c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80080a0:	4619      	mov	r1, r3
 80080a2:	2200      	movs	r2, #0
 80080a4:	4b74      	ldr	r3, [pc, #464]	@ (8008278 <_dtoa_r+0x2d8>)
 80080a6:	f7f8 f8f7 	bl	8000298 <__aeabi_dsub>
 80080aa:	a369      	add	r3, pc, #420	@ (adr r3, 8008250 <_dtoa_r+0x2b0>)
 80080ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b0:	f7f8 faaa 	bl	8000608 <__aeabi_dmul>
 80080b4:	a368      	add	r3, pc, #416	@ (adr r3, 8008258 <_dtoa_r+0x2b8>)
 80080b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ba:	f7f8 f8ef 	bl	800029c <__adddf3>
 80080be:	4604      	mov	r4, r0
 80080c0:	4630      	mov	r0, r6
 80080c2:	460d      	mov	r5, r1
 80080c4:	f7f8 fa36 	bl	8000534 <__aeabi_i2d>
 80080c8:	a365      	add	r3, pc, #404	@ (adr r3, 8008260 <_dtoa_r+0x2c0>)
 80080ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ce:	f7f8 fa9b 	bl	8000608 <__aeabi_dmul>
 80080d2:	4602      	mov	r2, r0
 80080d4:	460b      	mov	r3, r1
 80080d6:	4620      	mov	r0, r4
 80080d8:	4629      	mov	r1, r5
 80080da:	f7f8 f8df 	bl	800029c <__adddf3>
 80080de:	4604      	mov	r4, r0
 80080e0:	460d      	mov	r5, r1
 80080e2:	f7f8 fd41 	bl	8000b68 <__aeabi_d2iz>
 80080e6:	2200      	movs	r2, #0
 80080e8:	4607      	mov	r7, r0
 80080ea:	2300      	movs	r3, #0
 80080ec:	4620      	mov	r0, r4
 80080ee:	4629      	mov	r1, r5
 80080f0:	f7f8 fcfc 	bl	8000aec <__aeabi_dcmplt>
 80080f4:	b140      	cbz	r0, 8008108 <_dtoa_r+0x168>
 80080f6:	4638      	mov	r0, r7
 80080f8:	f7f8 fa1c 	bl	8000534 <__aeabi_i2d>
 80080fc:	4622      	mov	r2, r4
 80080fe:	462b      	mov	r3, r5
 8008100:	f7f8 fcea 	bl	8000ad8 <__aeabi_dcmpeq>
 8008104:	b900      	cbnz	r0, 8008108 <_dtoa_r+0x168>
 8008106:	3f01      	subs	r7, #1
 8008108:	2f16      	cmp	r7, #22
 800810a:	d851      	bhi.n	80081b0 <_dtoa_r+0x210>
 800810c:	4b5b      	ldr	r3, [pc, #364]	@ (800827c <_dtoa_r+0x2dc>)
 800810e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008116:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800811a:	f7f8 fce7 	bl	8000aec <__aeabi_dcmplt>
 800811e:	2800      	cmp	r0, #0
 8008120:	d048      	beq.n	80081b4 <_dtoa_r+0x214>
 8008122:	3f01      	subs	r7, #1
 8008124:	2300      	movs	r3, #0
 8008126:	9312      	str	r3, [sp, #72]	@ 0x48
 8008128:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800812a:	1b9b      	subs	r3, r3, r6
 800812c:	1e5a      	subs	r2, r3, #1
 800812e:	bf44      	itt	mi
 8008130:	f1c3 0801 	rsbmi	r8, r3, #1
 8008134:	2300      	movmi	r3, #0
 8008136:	9208      	str	r2, [sp, #32]
 8008138:	bf54      	ite	pl
 800813a:	f04f 0800 	movpl.w	r8, #0
 800813e:	9308      	strmi	r3, [sp, #32]
 8008140:	2f00      	cmp	r7, #0
 8008142:	db39      	blt.n	80081b8 <_dtoa_r+0x218>
 8008144:	9b08      	ldr	r3, [sp, #32]
 8008146:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008148:	443b      	add	r3, r7
 800814a:	9308      	str	r3, [sp, #32]
 800814c:	2300      	movs	r3, #0
 800814e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008150:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008152:	2b09      	cmp	r3, #9
 8008154:	d864      	bhi.n	8008220 <_dtoa_r+0x280>
 8008156:	2b05      	cmp	r3, #5
 8008158:	bfc4      	itt	gt
 800815a:	3b04      	subgt	r3, #4
 800815c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800815e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008160:	f1a3 0302 	sub.w	r3, r3, #2
 8008164:	bfcc      	ite	gt
 8008166:	2400      	movgt	r4, #0
 8008168:	2401      	movle	r4, #1
 800816a:	2b03      	cmp	r3, #3
 800816c:	d863      	bhi.n	8008236 <_dtoa_r+0x296>
 800816e:	e8df f003 	tbb	[pc, r3]
 8008172:	372a      	.short	0x372a
 8008174:	5535      	.short	0x5535
 8008176:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800817a:	441e      	add	r6, r3
 800817c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008180:	2b20      	cmp	r3, #32
 8008182:	bfc1      	itttt	gt
 8008184:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008188:	409f      	lslgt	r7, r3
 800818a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800818e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008192:	bfd6      	itet	le
 8008194:	f1c3 0320 	rsble	r3, r3, #32
 8008198:	ea47 0003 	orrgt.w	r0, r7, r3
 800819c:	fa04 f003 	lslle.w	r0, r4, r3
 80081a0:	f7f8 f9b8 	bl	8000514 <__aeabi_ui2d>
 80081a4:	2201      	movs	r2, #1
 80081a6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80081aa:	3e01      	subs	r6, #1
 80081ac:	9214      	str	r2, [sp, #80]	@ 0x50
 80081ae:	e777      	b.n	80080a0 <_dtoa_r+0x100>
 80081b0:	2301      	movs	r3, #1
 80081b2:	e7b8      	b.n	8008126 <_dtoa_r+0x186>
 80081b4:	9012      	str	r0, [sp, #72]	@ 0x48
 80081b6:	e7b7      	b.n	8008128 <_dtoa_r+0x188>
 80081b8:	427b      	negs	r3, r7
 80081ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80081bc:	2300      	movs	r3, #0
 80081be:	eba8 0807 	sub.w	r8, r8, r7
 80081c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80081c4:	e7c4      	b.n	8008150 <_dtoa_r+0x1b0>
 80081c6:	2300      	movs	r3, #0
 80081c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80081ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	dc35      	bgt.n	800823c <_dtoa_r+0x29c>
 80081d0:	2301      	movs	r3, #1
 80081d2:	9300      	str	r3, [sp, #0]
 80081d4:	9307      	str	r3, [sp, #28]
 80081d6:	461a      	mov	r2, r3
 80081d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80081da:	e00b      	b.n	80081f4 <_dtoa_r+0x254>
 80081dc:	2301      	movs	r3, #1
 80081de:	e7f3      	b.n	80081c8 <_dtoa_r+0x228>
 80081e0:	2300      	movs	r3, #0
 80081e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80081e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80081e6:	18fb      	adds	r3, r7, r3
 80081e8:	9300      	str	r3, [sp, #0]
 80081ea:	3301      	adds	r3, #1
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	9307      	str	r3, [sp, #28]
 80081f0:	bfb8      	it	lt
 80081f2:	2301      	movlt	r3, #1
 80081f4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80081f8:	2100      	movs	r1, #0
 80081fa:	2204      	movs	r2, #4
 80081fc:	f102 0514 	add.w	r5, r2, #20
 8008200:	429d      	cmp	r5, r3
 8008202:	d91f      	bls.n	8008244 <_dtoa_r+0x2a4>
 8008204:	6041      	str	r1, [r0, #4]
 8008206:	4658      	mov	r0, fp
 8008208:	f000 fd8e 	bl	8008d28 <_Balloc>
 800820c:	4682      	mov	sl, r0
 800820e:	2800      	cmp	r0, #0
 8008210:	d13c      	bne.n	800828c <_dtoa_r+0x2ec>
 8008212:	4b1b      	ldr	r3, [pc, #108]	@ (8008280 <_dtoa_r+0x2e0>)
 8008214:	4602      	mov	r2, r0
 8008216:	f240 11af 	movw	r1, #431	@ 0x1af
 800821a:	e6d8      	b.n	8007fce <_dtoa_r+0x2e>
 800821c:	2301      	movs	r3, #1
 800821e:	e7e0      	b.n	80081e2 <_dtoa_r+0x242>
 8008220:	2401      	movs	r4, #1
 8008222:	2300      	movs	r3, #0
 8008224:	9309      	str	r3, [sp, #36]	@ 0x24
 8008226:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008228:	f04f 33ff 	mov.w	r3, #4294967295
 800822c:	9300      	str	r3, [sp, #0]
 800822e:	9307      	str	r3, [sp, #28]
 8008230:	2200      	movs	r2, #0
 8008232:	2312      	movs	r3, #18
 8008234:	e7d0      	b.n	80081d8 <_dtoa_r+0x238>
 8008236:	2301      	movs	r3, #1
 8008238:	930b      	str	r3, [sp, #44]	@ 0x2c
 800823a:	e7f5      	b.n	8008228 <_dtoa_r+0x288>
 800823c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800823e:	9300      	str	r3, [sp, #0]
 8008240:	9307      	str	r3, [sp, #28]
 8008242:	e7d7      	b.n	80081f4 <_dtoa_r+0x254>
 8008244:	3101      	adds	r1, #1
 8008246:	0052      	lsls	r2, r2, #1
 8008248:	e7d8      	b.n	80081fc <_dtoa_r+0x25c>
 800824a:	bf00      	nop
 800824c:	f3af 8000 	nop.w
 8008250:	636f4361 	.word	0x636f4361
 8008254:	3fd287a7 	.word	0x3fd287a7
 8008258:	8b60c8b3 	.word	0x8b60c8b3
 800825c:	3fc68a28 	.word	0x3fc68a28
 8008260:	509f79fb 	.word	0x509f79fb
 8008264:	3fd34413 	.word	0x3fd34413
 8008268:	0800a009 	.word	0x0800a009
 800826c:	0800a020 	.word	0x0800a020
 8008270:	7ff00000 	.word	0x7ff00000
 8008274:	08009fd9 	.word	0x08009fd9
 8008278:	3ff80000 	.word	0x3ff80000
 800827c:	0800a118 	.word	0x0800a118
 8008280:	0800a078 	.word	0x0800a078
 8008284:	0800a005 	.word	0x0800a005
 8008288:	08009fd8 	.word	0x08009fd8
 800828c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008290:	6018      	str	r0, [r3, #0]
 8008292:	9b07      	ldr	r3, [sp, #28]
 8008294:	2b0e      	cmp	r3, #14
 8008296:	f200 80a4 	bhi.w	80083e2 <_dtoa_r+0x442>
 800829a:	2c00      	cmp	r4, #0
 800829c:	f000 80a1 	beq.w	80083e2 <_dtoa_r+0x442>
 80082a0:	2f00      	cmp	r7, #0
 80082a2:	dd33      	ble.n	800830c <_dtoa_r+0x36c>
 80082a4:	4bad      	ldr	r3, [pc, #692]	@ (800855c <_dtoa_r+0x5bc>)
 80082a6:	f007 020f 	and.w	r2, r7, #15
 80082aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80082ae:	ed93 7b00 	vldr	d7, [r3]
 80082b2:	05f8      	lsls	r0, r7, #23
 80082b4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80082b8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80082bc:	d516      	bpl.n	80082ec <_dtoa_r+0x34c>
 80082be:	4ba8      	ldr	r3, [pc, #672]	@ (8008560 <_dtoa_r+0x5c0>)
 80082c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80082c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80082c8:	f7f8 fac8 	bl	800085c <__aeabi_ddiv>
 80082cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082d0:	f004 040f 	and.w	r4, r4, #15
 80082d4:	2603      	movs	r6, #3
 80082d6:	4da2      	ldr	r5, [pc, #648]	@ (8008560 <_dtoa_r+0x5c0>)
 80082d8:	b954      	cbnz	r4, 80082f0 <_dtoa_r+0x350>
 80082da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082e2:	f7f8 fabb 	bl	800085c <__aeabi_ddiv>
 80082e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082ea:	e028      	b.n	800833e <_dtoa_r+0x39e>
 80082ec:	2602      	movs	r6, #2
 80082ee:	e7f2      	b.n	80082d6 <_dtoa_r+0x336>
 80082f0:	07e1      	lsls	r1, r4, #31
 80082f2:	d508      	bpl.n	8008306 <_dtoa_r+0x366>
 80082f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80082f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80082fc:	f7f8 f984 	bl	8000608 <__aeabi_dmul>
 8008300:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008304:	3601      	adds	r6, #1
 8008306:	1064      	asrs	r4, r4, #1
 8008308:	3508      	adds	r5, #8
 800830a:	e7e5      	b.n	80082d8 <_dtoa_r+0x338>
 800830c:	f000 80d2 	beq.w	80084b4 <_dtoa_r+0x514>
 8008310:	427c      	negs	r4, r7
 8008312:	4b92      	ldr	r3, [pc, #584]	@ (800855c <_dtoa_r+0x5bc>)
 8008314:	4d92      	ldr	r5, [pc, #584]	@ (8008560 <_dtoa_r+0x5c0>)
 8008316:	f004 020f 	and.w	r2, r4, #15
 800831a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800831e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008322:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008326:	f7f8 f96f 	bl	8000608 <__aeabi_dmul>
 800832a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800832e:	1124      	asrs	r4, r4, #4
 8008330:	2300      	movs	r3, #0
 8008332:	2602      	movs	r6, #2
 8008334:	2c00      	cmp	r4, #0
 8008336:	f040 80b2 	bne.w	800849e <_dtoa_r+0x4fe>
 800833a:	2b00      	cmp	r3, #0
 800833c:	d1d3      	bne.n	80082e6 <_dtoa_r+0x346>
 800833e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008340:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008344:	2b00      	cmp	r3, #0
 8008346:	f000 80b7 	beq.w	80084b8 <_dtoa_r+0x518>
 800834a:	4b86      	ldr	r3, [pc, #536]	@ (8008564 <_dtoa_r+0x5c4>)
 800834c:	2200      	movs	r2, #0
 800834e:	4620      	mov	r0, r4
 8008350:	4629      	mov	r1, r5
 8008352:	f7f8 fbcb 	bl	8000aec <__aeabi_dcmplt>
 8008356:	2800      	cmp	r0, #0
 8008358:	f000 80ae 	beq.w	80084b8 <_dtoa_r+0x518>
 800835c:	9b07      	ldr	r3, [sp, #28]
 800835e:	2b00      	cmp	r3, #0
 8008360:	f000 80aa 	beq.w	80084b8 <_dtoa_r+0x518>
 8008364:	9b00      	ldr	r3, [sp, #0]
 8008366:	2b00      	cmp	r3, #0
 8008368:	dd37      	ble.n	80083da <_dtoa_r+0x43a>
 800836a:	1e7b      	subs	r3, r7, #1
 800836c:	9304      	str	r3, [sp, #16]
 800836e:	4620      	mov	r0, r4
 8008370:	4b7d      	ldr	r3, [pc, #500]	@ (8008568 <_dtoa_r+0x5c8>)
 8008372:	2200      	movs	r2, #0
 8008374:	4629      	mov	r1, r5
 8008376:	f7f8 f947 	bl	8000608 <__aeabi_dmul>
 800837a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800837e:	9c00      	ldr	r4, [sp, #0]
 8008380:	3601      	adds	r6, #1
 8008382:	4630      	mov	r0, r6
 8008384:	f7f8 f8d6 	bl	8000534 <__aeabi_i2d>
 8008388:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800838c:	f7f8 f93c 	bl	8000608 <__aeabi_dmul>
 8008390:	4b76      	ldr	r3, [pc, #472]	@ (800856c <_dtoa_r+0x5cc>)
 8008392:	2200      	movs	r2, #0
 8008394:	f7f7 ff82 	bl	800029c <__adddf3>
 8008398:	4605      	mov	r5, r0
 800839a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800839e:	2c00      	cmp	r4, #0
 80083a0:	f040 808d 	bne.w	80084be <_dtoa_r+0x51e>
 80083a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083a8:	4b71      	ldr	r3, [pc, #452]	@ (8008570 <_dtoa_r+0x5d0>)
 80083aa:	2200      	movs	r2, #0
 80083ac:	f7f7 ff74 	bl	8000298 <__aeabi_dsub>
 80083b0:	4602      	mov	r2, r0
 80083b2:	460b      	mov	r3, r1
 80083b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80083b8:	462a      	mov	r2, r5
 80083ba:	4633      	mov	r3, r6
 80083bc:	f7f8 fbb4 	bl	8000b28 <__aeabi_dcmpgt>
 80083c0:	2800      	cmp	r0, #0
 80083c2:	f040 828b 	bne.w	80088dc <_dtoa_r+0x93c>
 80083c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083ca:	462a      	mov	r2, r5
 80083cc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80083d0:	f7f8 fb8c 	bl	8000aec <__aeabi_dcmplt>
 80083d4:	2800      	cmp	r0, #0
 80083d6:	f040 8128 	bne.w	800862a <_dtoa_r+0x68a>
 80083da:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80083de:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80083e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	f2c0 815a 	blt.w	800869e <_dtoa_r+0x6fe>
 80083ea:	2f0e      	cmp	r7, #14
 80083ec:	f300 8157 	bgt.w	800869e <_dtoa_r+0x6fe>
 80083f0:	4b5a      	ldr	r3, [pc, #360]	@ (800855c <_dtoa_r+0x5bc>)
 80083f2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80083f6:	ed93 7b00 	vldr	d7, [r3]
 80083fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	ed8d 7b00 	vstr	d7, [sp]
 8008402:	da03      	bge.n	800840c <_dtoa_r+0x46c>
 8008404:	9b07      	ldr	r3, [sp, #28]
 8008406:	2b00      	cmp	r3, #0
 8008408:	f340 8101 	ble.w	800860e <_dtoa_r+0x66e>
 800840c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008410:	4656      	mov	r6, sl
 8008412:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008416:	4620      	mov	r0, r4
 8008418:	4629      	mov	r1, r5
 800841a:	f7f8 fa1f 	bl	800085c <__aeabi_ddiv>
 800841e:	f7f8 fba3 	bl	8000b68 <__aeabi_d2iz>
 8008422:	4680      	mov	r8, r0
 8008424:	f7f8 f886 	bl	8000534 <__aeabi_i2d>
 8008428:	e9dd 2300 	ldrd	r2, r3, [sp]
 800842c:	f7f8 f8ec 	bl	8000608 <__aeabi_dmul>
 8008430:	4602      	mov	r2, r0
 8008432:	460b      	mov	r3, r1
 8008434:	4620      	mov	r0, r4
 8008436:	4629      	mov	r1, r5
 8008438:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800843c:	f7f7 ff2c 	bl	8000298 <__aeabi_dsub>
 8008440:	f806 4b01 	strb.w	r4, [r6], #1
 8008444:	9d07      	ldr	r5, [sp, #28]
 8008446:	eba6 040a 	sub.w	r4, r6, sl
 800844a:	42a5      	cmp	r5, r4
 800844c:	4602      	mov	r2, r0
 800844e:	460b      	mov	r3, r1
 8008450:	f040 8117 	bne.w	8008682 <_dtoa_r+0x6e2>
 8008454:	f7f7 ff22 	bl	800029c <__adddf3>
 8008458:	e9dd 2300 	ldrd	r2, r3, [sp]
 800845c:	4604      	mov	r4, r0
 800845e:	460d      	mov	r5, r1
 8008460:	f7f8 fb62 	bl	8000b28 <__aeabi_dcmpgt>
 8008464:	2800      	cmp	r0, #0
 8008466:	f040 80f9 	bne.w	800865c <_dtoa_r+0x6bc>
 800846a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800846e:	4620      	mov	r0, r4
 8008470:	4629      	mov	r1, r5
 8008472:	f7f8 fb31 	bl	8000ad8 <__aeabi_dcmpeq>
 8008476:	b118      	cbz	r0, 8008480 <_dtoa_r+0x4e0>
 8008478:	f018 0f01 	tst.w	r8, #1
 800847c:	f040 80ee 	bne.w	800865c <_dtoa_r+0x6bc>
 8008480:	4649      	mov	r1, r9
 8008482:	4658      	mov	r0, fp
 8008484:	f000 fc90 	bl	8008da8 <_Bfree>
 8008488:	2300      	movs	r3, #0
 800848a:	7033      	strb	r3, [r6, #0]
 800848c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800848e:	3701      	adds	r7, #1
 8008490:	601f      	str	r7, [r3, #0]
 8008492:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008494:	2b00      	cmp	r3, #0
 8008496:	f000 831d 	beq.w	8008ad4 <_dtoa_r+0xb34>
 800849a:	601e      	str	r6, [r3, #0]
 800849c:	e31a      	b.n	8008ad4 <_dtoa_r+0xb34>
 800849e:	07e2      	lsls	r2, r4, #31
 80084a0:	d505      	bpl.n	80084ae <_dtoa_r+0x50e>
 80084a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80084a6:	f7f8 f8af 	bl	8000608 <__aeabi_dmul>
 80084aa:	3601      	adds	r6, #1
 80084ac:	2301      	movs	r3, #1
 80084ae:	1064      	asrs	r4, r4, #1
 80084b0:	3508      	adds	r5, #8
 80084b2:	e73f      	b.n	8008334 <_dtoa_r+0x394>
 80084b4:	2602      	movs	r6, #2
 80084b6:	e742      	b.n	800833e <_dtoa_r+0x39e>
 80084b8:	9c07      	ldr	r4, [sp, #28]
 80084ba:	9704      	str	r7, [sp, #16]
 80084bc:	e761      	b.n	8008382 <_dtoa_r+0x3e2>
 80084be:	4b27      	ldr	r3, [pc, #156]	@ (800855c <_dtoa_r+0x5bc>)
 80084c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80084c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80084c6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80084ca:	4454      	add	r4, sl
 80084cc:	2900      	cmp	r1, #0
 80084ce:	d053      	beq.n	8008578 <_dtoa_r+0x5d8>
 80084d0:	4928      	ldr	r1, [pc, #160]	@ (8008574 <_dtoa_r+0x5d4>)
 80084d2:	2000      	movs	r0, #0
 80084d4:	f7f8 f9c2 	bl	800085c <__aeabi_ddiv>
 80084d8:	4633      	mov	r3, r6
 80084da:	462a      	mov	r2, r5
 80084dc:	f7f7 fedc 	bl	8000298 <__aeabi_dsub>
 80084e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80084e4:	4656      	mov	r6, sl
 80084e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084ea:	f7f8 fb3d 	bl	8000b68 <__aeabi_d2iz>
 80084ee:	4605      	mov	r5, r0
 80084f0:	f7f8 f820 	bl	8000534 <__aeabi_i2d>
 80084f4:	4602      	mov	r2, r0
 80084f6:	460b      	mov	r3, r1
 80084f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084fc:	f7f7 fecc 	bl	8000298 <__aeabi_dsub>
 8008500:	3530      	adds	r5, #48	@ 0x30
 8008502:	4602      	mov	r2, r0
 8008504:	460b      	mov	r3, r1
 8008506:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800850a:	f806 5b01 	strb.w	r5, [r6], #1
 800850e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008512:	f7f8 faeb 	bl	8000aec <__aeabi_dcmplt>
 8008516:	2800      	cmp	r0, #0
 8008518:	d171      	bne.n	80085fe <_dtoa_r+0x65e>
 800851a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800851e:	4911      	ldr	r1, [pc, #68]	@ (8008564 <_dtoa_r+0x5c4>)
 8008520:	2000      	movs	r0, #0
 8008522:	f7f7 feb9 	bl	8000298 <__aeabi_dsub>
 8008526:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800852a:	f7f8 fadf 	bl	8000aec <__aeabi_dcmplt>
 800852e:	2800      	cmp	r0, #0
 8008530:	f040 8095 	bne.w	800865e <_dtoa_r+0x6be>
 8008534:	42a6      	cmp	r6, r4
 8008536:	f43f af50 	beq.w	80083da <_dtoa_r+0x43a>
 800853a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800853e:	4b0a      	ldr	r3, [pc, #40]	@ (8008568 <_dtoa_r+0x5c8>)
 8008540:	2200      	movs	r2, #0
 8008542:	f7f8 f861 	bl	8000608 <__aeabi_dmul>
 8008546:	4b08      	ldr	r3, [pc, #32]	@ (8008568 <_dtoa_r+0x5c8>)
 8008548:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800854c:	2200      	movs	r2, #0
 800854e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008552:	f7f8 f859 	bl	8000608 <__aeabi_dmul>
 8008556:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800855a:	e7c4      	b.n	80084e6 <_dtoa_r+0x546>
 800855c:	0800a118 	.word	0x0800a118
 8008560:	0800a0f0 	.word	0x0800a0f0
 8008564:	3ff00000 	.word	0x3ff00000
 8008568:	40240000 	.word	0x40240000
 800856c:	401c0000 	.word	0x401c0000
 8008570:	40140000 	.word	0x40140000
 8008574:	3fe00000 	.word	0x3fe00000
 8008578:	4631      	mov	r1, r6
 800857a:	4628      	mov	r0, r5
 800857c:	f7f8 f844 	bl	8000608 <__aeabi_dmul>
 8008580:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008584:	9415      	str	r4, [sp, #84]	@ 0x54
 8008586:	4656      	mov	r6, sl
 8008588:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800858c:	f7f8 faec 	bl	8000b68 <__aeabi_d2iz>
 8008590:	4605      	mov	r5, r0
 8008592:	f7f7 ffcf 	bl	8000534 <__aeabi_i2d>
 8008596:	4602      	mov	r2, r0
 8008598:	460b      	mov	r3, r1
 800859a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800859e:	f7f7 fe7b 	bl	8000298 <__aeabi_dsub>
 80085a2:	3530      	adds	r5, #48	@ 0x30
 80085a4:	f806 5b01 	strb.w	r5, [r6], #1
 80085a8:	4602      	mov	r2, r0
 80085aa:	460b      	mov	r3, r1
 80085ac:	42a6      	cmp	r6, r4
 80085ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80085b2:	f04f 0200 	mov.w	r2, #0
 80085b6:	d124      	bne.n	8008602 <_dtoa_r+0x662>
 80085b8:	4bac      	ldr	r3, [pc, #688]	@ (800886c <_dtoa_r+0x8cc>)
 80085ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80085be:	f7f7 fe6d 	bl	800029c <__adddf3>
 80085c2:	4602      	mov	r2, r0
 80085c4:	460b      	mov	r3, r1
 80085c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085ca:	f7f8 faad 	bl	8000b28 <__aeabi_dcmpgt>
 80085ce:	2800      	cmp	r0, #0
 80085d0:	d145      	bne.n	800865e <_dtoa_r+0x6be>
 80085d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80085d6:	49a5      	ldr	r1, [pc, #660]	@ (800886c <_dtoa_r+0x8cc>)
 80085d8:	2000      	movs	r0, #0
 80085da:	f7f7 fe5d 	bl	8000298 <__aeabi_dsub>
 80085de:	4602      	mov	r2, r0
 80085e0:	460b      	mov	r3, r1
 80085e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085e6:	f7f8 fa81 	bl	8000aec <__aeabi_dcmplt>
 80085ea:	2800      	cmp	r0, #0
 80085ec:	f43f aef5 	beq.w	80083da <_dtoa_r+0x43a>
 80085f0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80085f2:	1e73      	subs	r3, r6, #1
 80085f4:	9315      	str	r3, [sp, #84]	@ 0x54
 80085f6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80085fa:	2b30      	cmp	r3, #48	@ 0x30
 80085fc:	d0f8      	beq.n	80085f0 <_dtoa_r+0x650>
 80085fe:	9f04      	ldr	r7, [sp, #16]
 8008600:	e73e      	b.n	8008480 <_dtoa_r+0x4e0>
 8008602:	4b9b      	ldr	r3, [pc, #620]	@ (8008870 <_dtoa_r+0x8d0>)
 8008604:	f7f8 f800 	bl	8000608 <__aeabi_dmul>
 8008608:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800860c:	e7bc      	b.n	8008588 <_dtoa_r+0x5e8>
 800860e:	d10c      	bne.n	800862a <_dtoa_r+0x68a>
 8008610:	4b98      	ldr	r3, [pc, #608]	@ (8008874 <_dtoa_r+0x8d4>)
 8008612:	2200      	movs	r2, #0
 8008614:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008618:	f7f7 fff6 	bl	8000608 <__aeabi_dmul>
 800861c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008620:	f7f8 fa78 	bl	8000b14 <__aeabi_dcmpge>
 8008624:	2800      	cmp	r0, #0
 8008626:	f000 8157 	beq.w	80088d8 <_dtoa_r+0x938>
 800862a:	2400      	movs	r4, #0
 800862c:	4625      	mov	r5, r4
 800862e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008630:	43db      	mvns	r3, r3
 8008632:	9304      	str	r3, [sp, #16]
 8008634:	4656      	mov	r6, sl
 8008636:	2700      	movs	r7, #0
 8008638:	4621      	mov	r1, r4
 800863a:	4658      	mov	r0, fp
 800863c:	f000 fbb4 	bl	8008da8 <_Bfree>
 8008640:	2d00      	cmp	r5, #0
 8008642:	d0dc      	beq.n	80085fe <_dtoa_r+0x65e>
 8008644:	b12f      	cbz	r7, 8008652 <_dtoa_r+0x6b2>
 8008646:	42af      	cmp	r7, r5
 8008648:	d003      	beq.n	8008652 <_dtoa_r+0x6b2>
 800864a:	4639      	mov	r1, r7
 800864c:	4658      	mov	r0, fp
 800864e:	f000 fbab 	bl	8008da8 <_Bfree>
 8008652:	4629      	mov	r1, r5
 8008654:	4658      	mov	r0, fp
 8008656:	f000 fba7 	bl	8008da8 <_Bfree>
 800865a:	e7d0      	b.n	80085fe <_dtoa_r+0x65e>
 800865c:	9704      	str	r7, [sp, #16]
 800865e:	4633      	mov	r3, r6
 8008660:	461e      	mov	r6, r3
 8008662:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008666:	2a39      	cmp	r2, #57	@ 0x39
 8008668:	d107      	bne.n	800867a <_dtoa_r+0x6da>
 800866a:	459a      	cmp	sl, r3
 800866c:	d1f8      	bne.n	8008660 <_dtoa_r+0x6c0>
 800866e:	9a04      	ldr	r2, [sp, #16]
 8008670:	3201      	adds	r2, #1
 8008672:	9204      	str	r2, [sp, #16]
 8008674:	2230      	movs	r2, #48	@ 0x30
 8008676:	f88a 2000 	strb.w	r2, [sl]
 800867a:	781a      	ldrb	r2, [r3, #0]
 800867c:	3201      	adds	r2, #1
 800867e:	701a      	strb	r2, [r3, #0]
 8008680:	e7bd      	b.n	80085fe <_dtoa_r+0x65e>
 8008682:	4b7b      	ldr	r3, [pc, #492]	@ (8008870 <_dtoa_r+0x8d0>)
 8008684:	2200      	movs	r2, #0
 8008686:	f7f7 ffbf 	bl	8000608 <__aeabi_dmul>
 800868a:	2200      	movs	r2, #0
 800868c:	2300      	movs	r3, #0
 800868e:	4604      	mov	r4, r0
 8008690:	460d      	mov	r5, r1
 8008692:	f7f8 fa21 	bl	8000ad8 <__aeabi_dcmpeq>
 8008696:	2800      	cmp	r0, #0
 8008698:	f43f aebb 	beq.w	8008412 <_dtoa_r+0x472>
 800869c:	e6f0      	b.n	8008480 <_dtoa_r+0x4e0>
 800869e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80086a0:	2a00      	cmp	r2, #0
 80086a2:	f000 80db 	beq.w	800885c <_dtoa_r+0x8bc>
 80086a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80086a8:	2a01      	cmp	r2, #1
 80086aa:	f300 80bf 	bgt.w	800882c <_dtoa_r+0x88c>
 80086ae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80086b0:	2a00      	cmp	r2, #0
 80086b2:	f000 80b7 	beq.w	8008824 <_dtoa_r+0x884>
 80086b6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80086ba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80086bc:	4646      	mov	r6, r8
 80086be:	9a08      	ldr	r2, [sp, #32]
 80086c0:	2101      	movs	r1, #1
 80086c2:	441a      	add	r2, r3
 80086c4:	4658      	mov	r0, fp
 80086c6:	4498      	add	r8, r3
 80086c8:	9208      	str	r2, [sp, #32]
 80086ca:	f000 fc21 	bl	8008f10 <__i2b>
 80086ce:	4605      	mov	r5, r0
 80086d0:	b15e      	cbz	r6, 80086ea <_dtoa_r+0x74a>
 80086d2:	9b08      	ldr	r3, [sp, #32]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	dd08      	ble.n	80086ea <_dtoa_r+0x74a>
 80086d8:	42b3      	cmp	r3, r6
 80086da:	9a08      	ldr	r2, [sp, #32]
 80086dc:	bfa8      	it	ge
 80086de:	4633      	movge	r3, r6
 80086e0:	eba8 0803 	sub.w	r8, r8, r3
 80086e4:	1af6      	subs	r6, r6, r3
 80086e6:	1ad3      	subs	r3, r2, r3
 80086e8:	9308      	str	r3, [sp, #32]
 80086ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086ec:	b1f3      	cbz	r3, 800872c <_dtoa_r+0x78c>
 80086ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	f000 80b7 	beq.w	8008864 <_dtoa_r+0x8c4>
 80086f6:	b18c      	cbz	r4, 800871c <_dtoa_r+0x77c>
 80086f8:	4629      	mov	r1, r5
 80086fa:	4622      	mov	r2, r4
 80086fc:	4658      	mov	r0, fp
 80086fe:	f000 fcc7 	bl	8009090 <__pow5mult>
 8008702:	464a      	mov	r2, r9
 8008704:	4601      	mov	r1, r0
 8008706:	4605      	mov	r5, r0
 8008708:	4658      	mov	r0, fp
 800870a:	f000 fc17 	bl	8008f3c <__multiply>
 800870e:	4649      	mov	r1, r9
 8008710:	9004      	str	r0, [sp, #16]
 8008712:	4658      	mov	r0, fp
 8008714:	f000 fb48 	bl	8008da8 <_Bfree>
 8008718:	9b04      	ldr	r3, [sp, #16]
 800871a:	4699      	mov	r9, r3
 800871c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800871e:	1b1a      	subs	r2, r3, r4
 8008720:	d004      	beq.n	800872c <_dtoa_r+0x78c>
 8008722:	4649      	mov	r1, r9
 8008724:	4658      	mov	r0, fp
 8008726:	f000 fcb3 	bl	8009090 <__pow5mult>
 800872a:	4681      	mov	r9, r0
 800872c:	2101      	movs	r1, #1
 800872e:	4658      	mov	r0, fp
 8008730:	f000 fbee 	bl	8008f10 <__i2b>
 8008734:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008736:	4604      	mov	r4, r0
 8008738:	2b00      	cmp	r3, #0
 800873a:	f000 81cf 	beq.w	8008adc <_dtoa_r+0xb3c>
 800873e:	461a      	mov	r2, r3
 8008740:	4601      	mov	r1, r0
 8008742:	4658      	mov	r0, fp
 8008744:	f000 fca4 	bl	8009090 <__pow5mult>
 8008748:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800874a:	2b01      	cmp	r3, #1
 800874c:	4604      	mov	r4, r0
 800874e:	f300 8095 	bgt.w	800887c <_dtoa_r+0x8dc>
 8008752:	9b02      	ldr	r3, [sp, #8]
 8008754:	2b00      	cmp	r3, #0
 8008756:	f040 8087 	bne.w	8008868 <_dtoa_r+0x8c8>
 800875a:	9b03      	ldr	r3, [sp, #12]
 800875c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008760:	2b00      	cmp	r3, #0
 8008762:	f040 8089 	bne.w	8008878 <_dtoa_r+0x8d8>
 8008766:	9b03      	ldr	r3, [sp, #12]
 8008768:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800876c:	0d1b      	lsrs	r3, r3, #20
 800876e:	051b      	lsls	r3, r3, #20
 8008770:	b12b      	cbz	r3, 800877e <_dtoa_r+0x7de>
 8008772:	9b08      	ldr	r3, [sp, #32]
 8008774:	3301      	adds	r3, #1
 8008776:	9308      	str	r3, [sp, #32]
 8008778:	f108 0801 	add.w	r8, r8, #1
 800877c:	2301      	movs	r3, #1
 800877e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008780:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008782:	2b00      	cmp	r3, #0
 8008784:	f000 81b0 	beq.w	8008ae8 <_dtoa_r+0xb48>
 8008788:	6923      	ldr	r3, [r4, #16]
 800878a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800878e:	6918      	ldr	r0, [r3, #16]
 8008790:	f000 fb72 	bl	8008e78 <__hi0bits>
 8008794:	f1c0 0020 	rsb	r0, r0, #32
 8008798:	9b08      	ldr	r3, [sp, #32]
 800879a:	4418      	add	r0, r3
 800879c:	f010 001f 	ands.w	r0, r0, #31
 80087a0:	d077      	beq.n	8008892 <_dtoa_r+0x8f2>
 80087a2:	f1c0 0320 	rsb	r3, r0, #32
 80087a6:	2b04      	cmp	r3, #4
 80087a8:	dd6b      	ble.n	8008882 <_dtoa_r+0x8e2>
 80087aa:	9b08      	ldr	r3, [sp, #32]
 80087ac:	f1c0 001c 	rsb	r0, r0, #28
 80087b0:	4403      	add	r3, r0
 80087b2:	4480      	add	r8, r0
 80087b4:	4406      	add	r6, r0
 80087b6:	9308      	str	r3, [sp, #32]
 80087b8:	f1b8 0f00 	cmp.w	r8, #0
 80087bc:	dd05      	ble.n	80087ca <_dtoa_r+0x82a>
 80087be:	4649      	mov	r1, r9
 80087c0:	4642      	mov	r2, r8
 80087c2:	4658      	mov	r0, fp
 80087c4:	f000 fcbe 	bl	8009144 <__lshift>
 80087c8:	4681      	mov	r9, r0
 80087ca:	9b08      	ldr	r3, [sp, #32]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	dd05      	ble.n	80087dc <_dtoa_r+0x83c>
 80087d0:	4621      	mov	r1, r4
 80087d2:	461a      	mov	r2, r3
 80087d4:	4658      	mov	r0, fp
 80087d6:	f000 fcb5 	bl	8009144 <__lshift>
 80087da:	4604      	mov	r4, r0
 80087dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d059      	beq.n	8008896 <_dtoa_r+0x8f6>
 80087e2:	4621      	mov	r1, r4
 80087e4:	4648      	mov	r0, r9
 80087e6:	f000 fd19 	bl	800921c <__mcmp>
 80087ea:	2800      	cmp	r0, #0
 80087ec:	da53      	bge.n	8008896 <_dtoa_r+0x8f6>
 80087ee:	1e7b      	subs	r3, r7, #1
 80087f0:	9304      	str	r3, [sp, #16]
 80087f2:	4649      	mov	r1, r9
 80087f4:	2300      	movs	r3, #0
 80087f6:	220a      	movs	r2, #10
 80087f8:	4658      	mov	r0, fp
 80087fa:	f000 faf7 	bl	8008dec <__multadd>
 80087fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008800:	4681      	mov	r9, r0
 8008802:	2b00      	cmp	r3, #0
 8008804:	f000 8172 	beq.w	8008aec <_dtoa_r+0xb4c>
 8008808:	2300      	movs	r3, #0
 800880a:	4629      	mov	r1, r5
 800880c:	220a      	movs	r2, #10
 800880e:	4658      	mov	r0, fp
 8008810:	f000 faec 	bl	8008dec <__multadd>
 8008814:	9b00      	ldr	r3, [sp, #0]
 8008816:	2b00      	cmp	r3, #0
 8008818:	4605      	mov	r5, r0
 800881a:	dc67      	bgt.n	80088ec <_dtoa_r+0x94c>
 800881c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800881e:	2b02      	cmp	r3, #2
 8008820:	dc41      	bgt.n	80088a6 <_dtoa_r+0x906>
 8008822:	e063      	b.n	80088ec <_dtoa_r+0x94c>
 8008824:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008826:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800882a:	e746      	b.n	80086ba <_dtoa_r+0x71a>
 800882c:	9b07      	ldr	r3, [sp, #28]
 800882e:	1e5c      	subs	r4, r3, #1
 8008830:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008832:	42a3      	cmp	r3, r4
 8008834:	bfbf      	itttt	lt
 8008836:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008838:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800883a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800883c:	1ae3      	sublt	r3, r4, r3
 800883e:	bfb4      	ite	lt
 8008840:	18d2      	addlt	r2, r2, r3
 8008842:	1b1c      	subge	r4, r3, r4
 8008844:	9b07      	ldr	r3, [sp, #28]
 8008846:	bfbc      	itt	lt
 8008848:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800884a:	2400      	movlt	r4, #0
 800884c:	2b00      	cmp	r3, #0
 800884e:	bfb5      	itete	lt
 8008850:	eba8 0603 	sublt.w	r6, r8, r3
 8008854:	9b07      	ldrge	r3, [sp, #28]
 8008856:	2300      	movlt	r3, #0
 8008858:	4646      	movge	r6, r8
 800885a:	e730      	b.n	80086be <_dtoa_r+0x71e>
 800885c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800885e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008860:	4646      	mov	r6, r8
 8008862:	e735      	b.n	80086d0 <_dtoa_r+0x730>
 8008864:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008866:	e75c      	b.n	8008722 <_dtoa_r+0x782>
 8008868:	2300      	movs	r3, #0
 800886a:	e788      	b.n	800877e <_dtoa_r+0x7de>
 800886c:	3fe00000 	.word	0x3fe00000
 8008870:	40240000 	.word	0x40240000
 8008874:	40140000 	.word	0x40140000
 8008878:	9b02      	ldr	r3, [sp, #8]
 800887a:	e780      	b.n	800877e <_dtoa_r+0x7de>
 800887c:	2300      	movs	r3, #0
 800887e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008880:	e782      	b.n	8008788 <_dtoa_r+0x7e8>
 8008882:	d099      	beq.n	80087b8 <_dtoa_r+0x818>
 8008884:	9a08      	ldr	r2, [sp, #32]
 8008886:	331c      	adds	r3, #28
 8008888:	441a      	add	r2, r3
 800888a:	4498      	add	r8, r3
 800888c:	441e      	add	r6, r3
 800888e:	9208      	str	r2, [sp, #32]
 8008890:	e792      	b.n	80087b8 <_dtoa_r+0x818>
 8008892:	4603      	mov	r3, r0
 8008894:	e7f6      	b.n	8008884 <_dtoa_r+0x8e4>
 8008896:	9b07      	ldr	r3, [sp, #28]
 8008898:	9704      	str	r7, [sp, #16]
 800889a:	2b00      	cmp	r3, #0
 800889c:	dc20      	bgt.n	80088e0 <_dtoa_r+0x940>
 800889e:	9300      	str	r3, [sp, #0]
 80088a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088a2:	2b02      	cmp	r3, #2
 80088a4:	dd1e      	ble.n	80088e4 <_dtoa_r+0x944>
 80088a6:	9b00      	ldr	r3, [sp, #0]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	f47f aec0 	bne.w	800862e <_dtoa_r+0x68e>
 80088ae:	4621      	mov	r1, r4
 80088b0:	2205      	movs	r2, #5
 80088b2:	4658      	mov	r0, fp
 80088b4:	f000 fa9a 	bl	8008dec <__multadd>
 80088b8:	4601      	mov	r1, r0
 80088ba:	4604      	mov	r4, r0
 80088bc:	4648      	mov	r0, r9
 80088be:	f000 fcad 	bl	800921c <__mcmp>
 80088c2:	2800      	cmp	r0, #0
 80088c4:	f77f aeb3 	ble.w	800862e <_dtoa_r+0x68e>
 80088c8:	4656      	mov	r6, sl
 80088ca:	2331      	movs	r3, #49	@ 0x31
 80088cc:	f806 3b01 	strb.w	r3, [r6], #1
 80088d0:	9b04      	ldr	r3, [sp, #16]
 80088d2:	3301      	adds	r3, #1
 80088d4:	9304      	str	r3, [sp, #16]
 80088d6:	e6ae      	b.n	8008636 <_dtoa_r+0x696>
 80088d8:	9c07      	ldr	r4, [sp, #28]
 80088da:	9704      	str	r7, [sp, #16]
 80088dc:	4625      	mov	r5, r4
 80088de:	e7f3      	b.n	80088c8 <_dtoa_r+0x928>
 80088e0:	9b07      	ldr	r3, [sp, #28]
 80088e2:	9300      	str	r3, [sp, #0]
 80088e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	f000 8104 	beq.w	8008af4 <_dtoa_r+0xb54>
 80088ec:	2e00      	cmp	r6, #0
 80088ee:	dd05      	ble.n	80088fc <_dtoa_r+0x95c>
 80088f0:	4629      	mov	r1, r5
 80088f2:	4632      	mov	r2, r6
 80088f4:	4658      	mov	r0, fp
 80088f6:	f000 fc25 	bl	8009144 <__lshift>
 80088fa:	4605      	mov	r5, r0
 80088fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d05a      	beq.n	80089b8 <_dtoa_r+0xa18>
 8008902:	6869      	ldr	r1, [r5, #4]
 8008904:	4658      	mov	r0, fp
 8008906:	f000 fa0f 	bl	8008d28 <_Balloc>
 800890a:	4606      	mov	r6, r0
 800890c:	b928      	cbnz	r0, 800891a <_dtoa_r+0x97a>
 800890e:	4b84      	ldr	r3, [pc, #528]	@ (8008b20 <_dtoa_r+0xb80>)
 8008910:	4602      	mov	r2, r0
 8008912:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008916:	f7ff bb5a 	b.w	8007fce <_dtoa_r+0x2e>
 800891a:	692a      	ldr	r2, [r5, #16]
 800891c:	3202      	adds	r2, #2
 800891e:	0092      	lsls	r2, r2, #2
 8008920:	f105 010c 	add.w	r1, r5, #12
 8008924:	300c      	adds	r0, #12
 8008926:	f000 ffaf 	bl	8009888 <memcpy>
 800892a:	2201      	movs	r2, #1
 800892c:	4631      	mov	r1, r6
 800892e:	4658      	mov	r0, fp
 8008930:	f000 fc08 	bl	8009144 <__lshift>
 8008934:	f10a 0301 	add.w	r3, sl, #1
 8008938:	9307      	str	r3, [sp, #28]
 800893a:	9b00      	ldr	r3, [sp, #0]
 800893c:	4453      	add	r3, sl
 800893e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008940:	9b02      	ldr	r3, [sp, #8]
 8008942:	f003 0301 	and.w	r3, r3, #1
 8008946:	462f      	mov	r7, r5
 8008948:	930a      	str	r3, [sp, #40]	@ 0x28
 800894a:	4605      	mov	r5, r0
 800894c:	9b07      	ldr	r3, [sp, #28]
 800894e:	4621      	mov	r1, r4
 8008950:	3b01      	subs	r3, #1
 8008952:	4648      	mov	r0, r9
 8008954:	9300      	str	r3, [sp, #0]
 8008956:	f7ff fa98 	bl	8007e8a <quorem>
 800895a:	4639      	mov	r1, r7
 800895c:	9002      	str	r0, [sp, #8]
 800895e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008962:	4648      	mov	r0, r9
 8008964:	f000 fc5a 	bl	800921c <__mcmp>
 8008968:	462a      	mov	r2, r5
 800896a:	9008      	str	r0, [sp, #32]
 800896c:	4621      	mov	r1, r4
 800896e:	4658      	mov	r0, fp
 8008970:	f000 fc70 	bl	8009254 <__mdiff>
 8008974:	68c2      	ldr	r2, [r0, #12]
 8008976:	4606      	mov	r6, r0
 8008978:	bb02      	cbnz	r2, 80089bc <_dtoa_r+0xa1c>
 800897a:	4601      	mov	r1, r0
 800897c:	4648      	mov	r0, r9
 800897e:	f000 fc4d 	bl	800921c <__mcmp>
 8008982:	4602      	mov	r2, r0
 8008984:	4631      	mov	r1, r6
 8008986:	4658      	mov	r0, fp
 8008988:	920e      	str	r2, [sp, #56]	@ 0x38
 800898a:	f000 fa0d 	bl	8008da8 <_Bfree>
 800898e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008990:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008992:	9e07      	ldr	r6, [sp, #28]
 8008994:	ea43 0102 	orr.w	r1, r3, r2
 8008998:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800899a:	4319      	orrs	r1, r3
 800899c:	d110      	bne.n	80089c0 <_dtoa_r+0xa20>
 800899e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80089a2:	d029      	beq.n	80089f8 <_dtoa_r+0xa58>
 80089a4:	9b08      	ldr	r3, [sp, #32]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	dd02      	ble.n	80089b0 <_dtoa_r+0xa10>
 80089aa:	9b02      	ldr	r3, [sp, #8]
 80089ac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80089b0:	9b00      	ldr	r3, [sp, #0]
 80089b2:	f883 8000 	strb.w	r8, [r3]
 80089b6:	e63f      	b.n	8008638 <_dtoa_r+0x698>
 80089b8:	4628      	mov	r0, r5
 80089ba:	e7bb      	b.n	8008934 <_dtoa_r+0x994>
 80089bc:	2201      	movs	r2, #1
 80089be:	e7e1      	b.n	8008984 <_dtoa_r+0x9e4>
 80089c0:	9b08      	ldr	r3, [sp, #32]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	db04      	blt.n	80089d0 <_dtoa_r+0xa30>
 80089c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80089c8:	430b      	orrs	r3, r1
 80089ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80089cc:	430b      	orrs	r3, r1
 80089ce:	d120      	bne.n	8008a12 <_dtoa_r+0xa72>
 80089d0:	2a00      	cmp	r2, #0
 80089d2:	dded      	ble.n	80089b0 <_dtoa_r+0xa10>
 80089d4:	4649      	mov	r1, r9
 80089d6:	2201      	movs	r2, #1
 80089d8:	4658      	mov	r0, fp
 80089da:	f000 fbb3 	bl	8009144 <__lshift>
 80089de:	4621      	mov	r1, r4
 80089e0:	4681      	mov	r9, r0
 80089e2:	f000 fc1b 	bl	800921c <__mcmp>
 80089e6:	2800      	cmp	r0, #0
 80089e8:	dc03      	bgt.n	80089f2 <_dtoa_r+0xa52>
 80089ea:	d1e1      	bne.n	80089b0 <_dtoa_r+0xa10>
 80089ec:	f018 0f01 	tst.w	r8, #1
 80089f0:	d0de      	beq.n	80089b0 <_dtoa_r+0xa10>
 80089f2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80089f6:	d1d8      	bne.n	80089aa <_dtoa_r+0xa0a>
 80089f8:	9a00      	ldr	r2, [sp, #0]
 80089fa:	2339      	movs	r3, #57	@ 0x39
 80089fc:	7013      	strb	r3, [r2, #0]
 80089fe:	4633      	mov	r3, r6
 8008a00:	461e      	mov	r6, r3
 8008a02:	3b01      	subs	r3, #1
 8008a04:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008a08:	2a39      	cmp	r2, #57	@ 0x39
 8008a0a:	d052      	beq.n	8008ab2 <_dtoa_r+0xb12>
 8008a0c:	3201      	adds	r2, #1
 8008a0e:	701a      	strb	r2, [r3, #0]
 8008a10:	e612      	b.n	8008638 <_dtoa_r+0x698>
 8008a12:	2a00      	cmp	r2, #0
 8008a14:	dd07      	ble.n	8008a26 <_dtoa_r+0xa86>
 8008a16:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008a1a:	d0ed      	beq.n	80089f8 <_dtoa_r+0xa58>
 8008a1c:	9a00      	ldr	r2, [sp, #0]
 8008a1e:	f108 0301 	add.w	r3, r8, #1
 8008a22:	7013      	strb	r3, [r2, #0]
 8008a24:	e608      	b.n	8008638 <_dtoa_r+0x698>
 8008a26:	9b07      	ldr	r3, [sp, #28]
 8008a28:	9a07      	ldr	r2, [sp, #28]
 8008a2a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008a2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d028      	beq.n	8008a86 <_dtoa_r+0xae6>
 8008a34:	4649      	mov	r1, r9
 8008a36:	2300      	movs	r3, #0
 8008a38:	220a      	movs	r2, #10
 8008a3a:	4658      	mov	r0, fp
 8008a3c:	f000 f9d6 	bl	8008dec <__multadd>
 8008a40:	42af      	cmp	r7, r5
 8008a42:	4681      	mov	r9, r0
 8008a44:	f04f 0300 	mov.w	r3, #0
 8008a48:	f04f 020a 	mov.w	r2, #10
 8008a4c:	4639      	mov	r1, r7
 8008a4e:	4658      	mov	r0, fp
 8008a50:	d107      	bne.n	8008a62 <_dtoa_r+0xac2>
 8008a52:	f000 f9cb 	bl	8008dec <__multadd>
 8008a56:	4607      	mov	r7, r0
 8008a58:	4605      	mov	r5, r0
 8008a5a:	9b07      	ldr	r3, [sp, #28]
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	9307      	str	r3, [sp, #28]
 8008a60:	e774      	b.n	800894c <_dtoa_r+0x9ac>
 8008a62:	f000 f9c3 	bl	8008dec <__multadd>
 8008a66:	4629      	mov	r1, r5
 8008a68:	4607      	mov	r7, r0
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	220a      	movs	r2, #10
 8008a6e:	4658      	mov	r0, fp
 8008a70:	f000 f9bc 	bl	8008dec <__multadd>
 8008a74:	4605      	mov	r5, r0
 8008a76:	e7f0      	b.n	8008a5a <_dtoa_r+0xaba>
 8008a78:	9b00      	ldr	r3, [sp, #0]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	bfcc      	ite	gt
 8008a7e:	461e      	movgt	r6, r3
 8008a80:	2601      	movle	r6, #1
 8008a82:	4456      	add	r6, sl
 8008a84:	2700      	movs	r7, #0
 8008a86:	4649      	mov	r1, r9
 8008a88:	2201      	movs	r2, #1
 8008a8a:	4658      	mov	r0, fp
 8008a8c:	f000 fb5a 	bl	8009144 <__lshift>
 8008a90:	4621      	mov	r1, r4
 8008a92:	4681      	mov	r9, r0
 8008a94:	f000 fbc2 	bl	800921c <__mcmp>
 8008a98:	2800      	cmp	r0, #0
 8008a9a:	dcb0      	bgt.n	80089fe <_dtoa_r+0xa5e>
 8008a9c:	d102      	bne.n	8008aa4 <_dtoa_r+0xb04>
 8008a9e:	f018 0f01 	tst.w	r8, #1
 8008aa2:	d1ac      	bne.n	80089fe <_dtoa_r+0xa5e>
 8008aa4:	4633      	mov	r3, r6
 8008aa6:	461e      	mov	r6, r3
 8008aa8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008aac:	2a30      	cmp	r2, #48	@ 0x30
 8008aae:	d0fa      	beq.n	8008aa6 <_dtoa_r+0xb06>
 8008ab0:	e5c2      	b.n	8008638 <_dtoa_r+0x698>
 8008ab2:	459a      	cmp	sl, r3
 8008ab4:	d1a4      	bne.n	8008a00 <_dtoa_r+0xa60>
 8008ab6:	9b04      	ldr	r3, [sp, #16]
 8008ab8:	3301      	adds	r3, #1
 8008aba:	9304      	str	r3, [sp, #16]
 8008abc:	2331      	movs	r3, #49	@ 0x31
 8008abe:	f88a 3000 	strb.w	r3, [sl]
 8008ac2:	e5b9      	b.n	8008638 <_dtoa_r+0x698>
 8008ac4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008ac6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008b24 <_dtoa_r+0xb84>
 8008aca:	b11b      	cbz	r3, 8008ad4 <_dtoa_r+0xb34>
 8008acc:	f10a 0308 	add.w	r3, sl, #8
 8008ad0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008ad2:	6013      	str	r3, [r2, #0]
 8008ad4:	4650      	mov	r0, sl
 8008ad6:	b019      	add	sp, #100	@ 0x64
 8008ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008adc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ade:	2b01      	cmp	r3, #1
 8008ae0:	f77f ae37 	ble.w	8008752 <_dtoa_r+0x7b2>
 8008ae4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ae6:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ae8:	2001      	movs	r0, #1
 8008aea:	e655      	b.n	8008798 <_dtoa_r+0x7f8>
 8008aec:	9b00      	ldr	r3, [sp, #0]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	f77f aed6 	ble.w	80088a0 <_dtoa_r+0x900>
 8008af4:	4656      	mov	r6, sl
 8008af6:	4621      	mov	r1, r4
 8008af8:	4648      	mov	r0, r9
 8008afa:	f7ff f9c6 	bl	8007e8a <quorem>
 8008afe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008b02:	f806 8b01 	strb.w	r8, [r6], #1
 8008b06:	9b00      	ldr	r3, [sp, #0]
 8008b08:	eba6 020a 	sub.w	r2, r6, sl
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	ddb3      	ble.n	8008a78 <_dtoa_r+0xad8>
 8008b10:	4649      	mov	r1, r9
 8008b12:	2300      	movs	r3, #0
 8008b14:	220a      	movs	r2, #10
 8008b16:	4658      	mov	r0, fp
 8008b18:	f000 f968 	bl	8008dec <__multadd>
 8008b1c:	4681      	mov	r9, r0
 8008b1e:	e7ea      	b.n	8008af6 <_dtoa_r+0xb56>
 8008b20:	0800a078 	.word	0x0800a078
 8008b24:	08009ffc 	.word	0x08009ffc

08008b28 <_free_r>:
 8008b28:	b538      	push	{r3, r4, r5, lr}
 8008b2a:	4605      	mov	r5, r0
 8008b2c:	2900      	cmp	r1, #0
 8008b2e:	d041      	beq.n	8008bb4 <_free_r+0x8c>
 8008b30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b34:	1f0c      	subs	r4, r1, #4
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	bfb8      	it	lt
 8008b3a:	18e4      	addlt	r4, r4, r3
 8008b3c:	f000 f8e8 	bl	8008d10 <__malloc_lock>
 8008b40:	4a1d      	ldr	r2, [pc, #116]	@ (8008bb8 <_free_r+0x90>)
 8008b42:	6813      	ldr	r3, [r2, #0]
 8008b44:	b933      	cbnz	r3, 8008b54 <_free_r+0x2c>
 8008b46:	6063      	str	r3, [r4, #4]
 8008b48:	6014      	str	r4, [r2, #0]
 8008b4a:	4628      	mov	r0, r5
 8008b4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b50:	f000 b8e4 	b.w	8008d1c <__malloc_unlock>
 8008b54:	42a3      	cmp	r3, r4
 8008b56:	d908      	bls.n	8008b6a <_free_r+0x42>
 8008b58:	6820      	ldr	r0, [r4, #0]
 8008b5a:	1821      	adds	r1, r4, r0
 8008b5c:	428b      	cmp	r3, r1
 8008b5e:	bf01      	itttt	eq
 8008b60:	6819      	ldreq	r1, [r3, #0]
 8008b62:	685b      	ldreq	r3, [r3, #4]
 8008b64:	1809      	addeq	r1, r1, r0
 8008b66:	6021      	streq	r1, [r4, #0]
 8008b68:	e7ed      	b.n	8008b46 <_free_r+0x1e>
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	b10b      	cbz	r3, 8008b74 <_free_r+0x4c>
 8008b70:	42a3      	cmp	r3, r4
 8008b72:	d9fa      	bls.n	8008b6a <_free_r+0x42>
 8008b74:	6811      	ldr	r1, [r2, #0]
 8008b76:	1850      	adds	r0, r2, r1
 8008b78:	42a0      	cmp	r0, r4
 8008b7a:	d10b      	bne.n	8008b94 <_free_r+0x6c>
 8008b7c:	6820      	ldr	r0, [r4, #0]
 8008b7e:	4401      	add	r1, r0
 8008b80:	1850      	adds	r0, r2, r1
 8008b82:	4283      	cmp	r3, r0
 8008b84:	6011      	str	r1, [r2, #0]
 8008b86:	d1e0      	bne.n	8008b4a <_free_r+0x22>
 8008b88:	6818      	ldr	r0, [r3, #0]
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	6053      	str	r3, [r2, #4]
 8008b8e:	4408      	add	r0, r1
 8008b90:	6010      	str	r0, [r2, #0]
 8008b92:	e7da      	b.n	8008b4a <_free_r+0x22>
 8008b94:	d902      	bls.n	8008b9c <_free_r+0x74>
 8008b96:	230c      	movs	r3, #12
 8008b98:	602b      	str	r3, [r5, #0]
 8008b9a:	e7d6      	b.n	8008b4a <_free_r+0x22>
 8008b9c:	6820      	ldr	r0, [r4, #0]
 8008b9e:	1821      	adds	r1, r4, r0
 8008ba0:	428b      	cmp	r3, r1
 8008ba2:	bf04      	itt	eq
 8008ba4:	6819      	ldreq	r1, [r3, #0]
 8008ba6:	685b      	ldreq	r3, [r3, #4]
 8008ba8:	6063      	str	r3, [r4, #4]
 8008baa:	bf04      	itt	eq
 8008bac:	1809      	addeq	r1, r1, r0
 8008bae:	6021      	streq	r1, [r4, #0]
 8008bb0:	6054      	str	r4, [r2, #4]
 8008bb2:	e7ca      	b.n	8008b4a <_free_r+0x22>
 8008bb4:	bd38      	pop	{r3, r4, r5, pc}
 8008bb6:	bf00      	nop
 8008bb8:	20000500 	.word	0x20000500

08008bbc <malloc>:
 8008bbc:	4b02      	ldr	r3, [pc, #8]	@ (8008bc8 <malloc+0xc>)
 8008bbe:	4601      	mov	r1, r0
 8008bc0:	6818      	ldr	r0, [r3, #0]
 8008bc2:	f000 b825 	b.w	8008c10 <_malloc_r>
 8008bc6:	bf00      	nop
 8008bc8:	2000001c 	.word	0x2000001c

08008bcc <sbrk_aligned>:
 8008bcc:	b570      	push	{r4, r5, r6, lr}
 8008bce:	4e0f      	ldr	r6, [pc, #60]	@ (8008c0c <sbrk_aligned+0x40>)
 8008bd0:	460c      	mov	r4, r1
 8008bd2:	6831      	ldr	r1, [r6, #0]
 8008bd4:	4605      	mov	r5, r0
 8008bd6:	b911      	cbnz	r1, 8008bde <sbrk_aligned+0x12>
 8008bd8:	f000 fe46 	bl	8009868 <_sbrk_r>
 8008bdc:	6030      	str	r0, [r6, #0]
 8008bde:	4621      	mov	r1, r4
 8008be0:	4628      	mov	r0, r5
 8008be2:	f000 fe41 	bl	8009868 <_sbrk_r>
 8008be6:	1c43      	adds	r3, r0, #1
 8008be8:	d103      	bne.n	8008bf2 <sbrk_aligned+0x26>
 8008bea:	f04f 34ff 	mov.w	r4, #4294967295
 8008bee:	4620      	mov	r0, r4
 8008bf0:	bd70      	pop	{r4, r5, r6, pc}
 8008bf2:	1cc4      	adds	r4, r0, #3
 8008bf4:	f024 0403 	bic.w	r4, r4, #3
 8008bf8:	42a0      	cmp	r0, r4
 8008bfa:	d0f8      	beq.n	8008bee <sbrk_aligned+0x22>
 8008bfc:	1a21      	subs	r1, r4, r0
 8008bfe:	4628      	mov	r0, r5
 8008c00:	f000 fe32 	bl	8009868 <_sbrk_r>
 8008c04:	3001      	adds	r0, #1
 8008c06:	d1f2      	bne.n	8008bee <sbrk_aligned+0x22>
 8008c08:	e7ef      	b.n	8008bea <sbrk_aligned+0x1e>
 8008c0a:	bf00      	nop
 8008c0c:	200004fc 	.word	0x200004fc

08008c10 <_malloc_r>:
 8008c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c14:	1ccd      	adds	r5, r1, #3
 8008c16:	f025 0503 	bic.w	r5, r5, #3
 8008c1a:	3508      	adds	r5, #8
 8008c1c:	2d0c      	cmp	r5, #12
 8008c1e:	bf38      	it	cc
 8008c20:	250c      	movcc	r5, #12
 8008c22:	2d00      	cmp	r5, #0
 8008c24:	4606      	mov	r6, r0
 8008c26:	db01      	blt.n	8008c2c <_malloc_r+0x1c>
 8008c28:	42a9      	cmp	r1, r5
 8008c2a:	d904      	bls.n	8008c36 <_malloc_r+0x26>
 8008c2c:	230c      	movs	r3, #12
 8008c2e:	6033      	str	r3, [r6, #0]
 8008c30:	2000      	movs	r0, #0
 8008c32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008d0c <_malloc_r+0xfc>
 8008c3a:	f000 f869 	bl	8008d10 <__malloc_lock>
 8008c3e:	f8d8 3000 	ldr.w	r3, [r8]
 8008c42:	461c      	mov	r4, r3
 8008c44:	bb44      	cbnz	r4, 8008c98 <_malloc_r+0x88>
 8008c46:	4629      	mov	r1, r5
 8008c48:	4630      	mov	r0, r6
 8008c4a:	f7ff ffbf 	bl	8008bcc <sbrk_aligned>
 8008c4e:	1c43      	adds	r3, r0, #1
 8008c50:	4604      	mov	r4, r0
 8008c52:	d158      	bne.n	8008d06 <_malloc_r+0xf6>
 8008c54:	f8d8 4000 	ldr.w	r4, [r8]
 8008c58:	4627      	mov	r7, r4
 8008c5a:	2f00      	cmp	r7, #0
 8008c5c:	d143      	bne.n	8008ce6 <_malloc_r+0xd6>
 8008c5e:	2c00      	cmp	r4, #0
 8008c60:	d04b      	beq.n	8008cfa <_malloc_r+0xea>
 8008c62:	6823      	ldr	r3, [r4, #0]
 8008c64:	4639      	mov	r1, r7
 8008c66:	4630      	mov	r0, r6
 8008c68:	eb04 0903 	add.w	r9, r4, r3
 8008c6c:	f000 fdfc 	bl	8009868 <_sbrk_r>
 8008c70:	4581      	cmp	r9, r0
 8008c72:	d142      	bne.n	8008cfa <_malloc_r+0xea>
 8008c74:	6821      	ldr	r1, [r4, #0]
 8008c76:	1a6d      	subs	r5, r5, r1
 8008c78:	4629      	mov	r1, r5
 8008c7a:	4630      	mov	r0, r6
 8008c7c:	f7ff ffa6 	bl	8008bcc <sbrk_aligned>
 8008c80:	3001      	adds	r0, #1
 8008c82:	d03a      	beq.n	8008cfa <_malloc_r+0xea>
 8008c84:	6823      	ldr	r3, [r4, #0]
 8008c86:	442b      	add	r3, r5
 8008c88:	6023      	str	r3, [r4, #0]
 8008c8a:	f8d8 3000 	ldr.w	r3, [r8]
 8008c8e:	685a      	ldr	r2, [r3, #4]
 8008c90:	bb62      	cbnz	r2, 8008cec <_malloc_r+0xdc>
 8008c92:	f8c8 7000 	str.w	r7, [r8]
 8008c96:	e00f      	b.n	8008cb8 <_malloc_r+0xa8>
 8008c98:	6822      	ldr	r2, [r4, #0]
 8008c9a:	1b52      	subs	r2, r2, r5
 8008c9c:	d420      	bmi.n	8008ce0 <_malloc_r+0xd0>
 8008c9e:	2a0b      	cmp	r2, #11
 8008ca0:	d917      	bls.n	8008cd2 <_malloc_r+0xc2>
 8008ca2:	1961      	adds	r1, r4, r5
 8008ca4:	42a3      	cmp	r3, r4
 8008ca6:	6025      	str	r5, [r4, #0]
 8008ca8:	bf18      	it	ne
 8008caa:	6059      	strne	r1, [r3, #4]
 8008cac:	6863      	ldr	r3, [r4, #4]
 8008cae:	bf08      	it	eq
 8008cb0:	f8c8 1000 	streq.w	r1, [r8]
 8008cb4:	5162      	str	r2, [r4, r5]
 8008cb6:	604b      	str	r3, [r1, #4]
 8008cb8:	4630      	mov	r0, r6
 8008cba:	f000 f82f 	bl	8008d1c <__malloc_unlock>
 8008cbe:	f104 000b 	add.w	r0, r4, #11
 8008cc2:	1d23      	adds	r3, r4, #4
 8008cc4:	f020 0007 	bic.w	r0, r0, #7
 8008cc8:	1ac2      	subs	r2, r0, r3
 8008cca:	bf1c      	itt	ne
 8008ccc:	1a1b      	subne	r3, r3, r0
 8008cce:	50a3      	strne	r3, [r4, r2]
 8008cd0:	e7af      	b.n	8008c32 <_malloc_r+0x22>
 8008cd2:	6862      	ldr	r2, [r4, #4]
 8008cd4:	42a3      	cmp	r3, r4
 8008cd6:	bf0c      	ite	eq
 8008cd8:	f8c8 2000 	streq.w	r2, [r8]
 8008cdc:	605a      	strne	r2, [r3, #4]
 8008cde:	e7eb      	b.n	8008cb8 <_malloc_r+0xa8>
 8008ce0:	4623      	mov	r3, r4
 8008ce2:	6864      	ldr	r4, [r4, #4]
 8008ce4:	e7ae      	b.n	8008c44 <_malloc_r+0x34>
 8008ce6:	463c      	mov	r4, r7
 8008ce8:	687f      	ldr	r7, [r7, #4]
 8008cea:	e7b6      	b.n	8008c5a <_malloc_r+0x4a>
 8008cec:	461a      	mov	r2, r3
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	42a3      	cmp	r3, r4
 8008cf2:	d1fb      	bne.n	8008cec <_malloc_r+0xdc>
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	6053      	str	r3, [r2, #4]
 8008cf8:	e7de      	b.n	8008cb8 <_malloc_r+0xa8>
 8008cfa:	230c      	movs	r3, #12
 8008cfc:	6033      	str	r3, [r6, #0]
 8008cfe:	4630      	mov	r0, r6
 8008d00:	f000 f80c 	bl	8008d1c <__malloc_unlock>
 8008d04:	e794      	b.n	8008c30 <_malloc_r+0x20>
 8008d06:	6005      	str	r5, [r0, #0]
 8008d08:	e7d6      	b.n	8008cb8 <_malloc_r+0xa8>
 8008d0a:	bf00      	nop
 8008d0c:	20000500 	.word	0x20000500

08008d10 <__malloc_lock>:
 8008d10:	4801      	ldr	r0, [pc, #4]	@ (8008d18 <__malloc_lock+0x8>)
 8008d12:	f7ff b8b8 	b.w	8007e86 <__retarget_lock_acquire_recursive>
 8008d16:	bf00      	nop
 8008d18:	200004f8 	.word	0x200004f8

08008d1c <__malloc_unlock>:
 8008d1c:	4801      	ldr	r0, [pc, #4]	@ (8008d24 <__malloc_unlock+0x8>)
 8008d1e:	f7ff b8b3 	b.w	8007e88 <__retarget_lock_release_recursive>
 8008d22:	bf00      	nop
 8008d24:	200004f8 	.word	0x200004f8

08008d28 <_Balloc>:
 8008d28:	b570      	push	{r4, r5, r6, lr}
 8008d2a:	69c6      	ldr	r6, [r0, #28]
 8008d2c:	4604      	mov	r4, r0
 8008d2e:	460d      	mov	r5, r1
 8008d30:	b976      	cbnz	r6, 8008d50 <_Balloc+0x28>
 8008d32:	2010      	movs	r0, #16
 8008d34:	f7ff ff42 	bl	8008bbc <malloc>
 8008d38:	4602      	mov	r2, r0
 8008d3a:	61e0      	str	r0, [r4, #28]
 8008d3c:	b920      	cbnz	r0, 8008d48 <_Balloc+0x20>
 8008d3e:	4b18      	ldr	r3, [pc, #96]	@ (8008da0 <_Balloc+0x78>)
 8008d40:	4818      	ldr	r0, [pc, #96]	@ (8008da4 <_Balloc+0x7c>)
 8008d42:	216b      	movs	r1, #107	@ 0x6b
 8008d44:	f000 fdae 	bl	80098a4 <__assert_func>
 8008d48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d4c:	6006      	str	r6, [r0, #0]
 8008d4e:	60c6      	str	r6, [r0, #12]
 8008d50:	69e6      	ldr	r6, [r4, #28]
 8008d52:	68f3      	ldr	r3, [r6, #12]
 8008d54:	b183      	cbz	r3, 8008d78 <_Balloc+0x50>
 8008d56:	69e3      	ldr	r3, [r4, #28]
 8008d58:	68db      	ldr	r3, [r3, #12]
 8008d5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008d5e:	b9b8      	cbnz	r0, 8008d90 <_Balloc+0x68>
 8008d60:	2101      	movs	r1, #1
 8008d62:	fa01 f605 	lsl.w	r6, r1, r5
 8008d66:	1d72      	adds	r2, r6, #5
 8008d68:	0092      	lsls	r2, r2, #2
 8008d6a:	4620      	mov	r0, r4
 8008d6c:	f000 fdb8 	bl	80098e0 <_calloc_r>
 8008d70:	b160      	cbz	r0, 8008d8c <_Balloc+0x64>
 8008d72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008d76:	e00e      	b.n	8008d96 <_Balloc+0x6e>
 8008d78:	2221      	movs	r2, #33	@ 0x21
 8008d7a:	2104      	movs	r1, #4
 8008d7c:	4620      	mov	r0, r4
 8008d7e:	f000 fdaf 	bl	80098e0 <_calloc_r>
 8008d82:	69e3      	ldr	r3, [r4, #28]
 8008d84:	60f0      	str	r0, [r6, #12]
 8008d86:	68db      	ldr	r3, [r3, #12]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d1e4      	bne.n	8008d56 <_Balloc+0x2e>
 8008d8c:	2000      	movs	r0, #0
 8008d8e:	bd70      	pop	{r4, r5, r6, pc}
 8008d90:	6802      	ldr	r2, [r0, #0]
 8008d92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008d96:	2300      	movs	r3, #0
 8008d98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008d9c:	e7f7      	b.n	8008d8e <_Balloc+0x66>
 8008d9e:	bf00      	nop
 8008da0:	0800a009 	.word	0x0800a009
 8008da4:	0800a089 	.word	0x0800a089

08008da8 <_Bfree>:
 8008da8:	b570      	push	{r4, r5, r6, lr}
 8008daa:	69c6      	ldr	r6, [r0, #28]
 8008dac:	4605      	mov	r5, r0
 8008dae:	460c      	mov	r4, r1
 8008db0:	b976      	cbnz	r6, 8008dd0 <_Bfree+0x28>
 8008db2:	2010      	movs	r0, #16
 8008db4:	f7ff ff02 	bl	8008bbc <malloc>
 8008db8:	4602      	mov	r2, r0
 8008dba:	61e8      	str	r0, [r5, #28]
 8008dbc:	b920      	cbnz	r0, 8008dc8 <_Bfree+0x20>
 8008dbe:	4b09      	ldr	r3, [pc, #36]	@ (8008de4 <_Bfree+0x3c>)
 8008dc0:	4809      	ldr	r0, [pc, #36]	@ (8008de8 <_Bfree+0x40>)
 8008dc2:	218f      	movs	r1, #143	@ 0x8f
 8008dc4:	f000 fd6e 	bl	80098a4 <__assert_func>
 8008dc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008dcc:	6006      	str	r6, [r0, #0]
 8008dce:	60c6      	str	r6, [r0, #12]
 8008dd0:	b13c      	cbz	r4, 8008de2 <_Bfree+0x3a>
 8008dd2:	69eb      	ldr	r3, [r5, #28]
 8008dd4:	6862      	ldr	r2, [r4, #4]
 8008dd6:	68db      	ldr	r3, [r3, #12]
 8008dd8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008ddc:	6021      	str	r1, [r4, #0]
 8008dde:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008de2:	bd70      	pop	{r4, r5, r6, pc}
 8008de4:	0800a009 	.word	0x0800a009
 8008de8:	0800a089 	.word	0x0800a089

08008dec <__multadd>:
 8008dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008df0:	690d      	ldr	r5, [r1, #16]
 8008df2:	4607      	mov	r7, r0
 8008df4:	460c      	mov	r4, r1
 8008df6:	461e      	mov	r6, r3
 8008df8:	f101 0c14 	add.w	ip, r1, #20
 8008dfc:	2000      	movs	r0, #0
 8008dfe:	f8dc 3000 	ldr.w	r3, [ip]
 8008e02:	b299      	uxth	r1, r3
 8008e04:	fb02 6101 	mla	r1, r2, r1, r6
 8008e08:	0c1e      	lsrs	r6, r3, #16
 8008e0a:	0c0b      	lsrs	r3, r1, #16
 8008e0c:	fb02 3306 	mla	r3, r2, r6, r3
 8008e10:	b289      	uxth	r1, r1
 8008e12:	3001      	adds	r0, #1
 8008e14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008e18:	4285      	cmp	r5, r0
 8008e1a:	f84c 1b04 	str.w	r1, [ip], #4
 8008e1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008e22:	dcec      	bgt.n	8008dfe <__multadd+0x12>
 8008e24:	b30e      	cbz	r6, 8008e6a <__multadd+0x7e>
 8008e26:	68a3      	ldr	r3, [r4, #8]
 8008e28:	42ab      	cmp	r3, r5
 8008e2a:	dc19      	bgt.n	8008e60 <__multadd+0x74>
 8008e2c:	6861      	ldr	r1, [r4, #4]
 8008e2e:	4638      	mov	r0, r7
 8008e30:	3101      	adds	r1, #1
 8008e32:	f7ff ff79 	bl	8008d28 <_Balloc>
 8008e36:	4680      	mov	r8, r0
 8008e38:	b928      	cbnz	r0, 8008e46 <__multadd+0x5a>
 8008e3a:	4602      	mov	r2, r0
 8008e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8008e70 <__multadd+0x84>)
 8008e3e:	480d      	ldr	r0, [pc, #52]	@ (8008e74 <__multadd+0x88>)
 8008e40:	21ba      	movs	r1, #186	@ 0xba
 8008e42:	f000 fd2f 	bl	80098a4 <__assert_func>
 8008e46:	6922      	ldr	r2, [r4, #16]
 8008e48:	3202      	adds	r2, #2
 8008e4a:	f104 010c 	add.w	r1, r4, #12
 8008e4e:	0092      	lsls	r2, r2, #2
 8008e50:	300c      	adds	r0, #12
 8008e52:	f000 fd19 	bl	8009888 <memcpy>
 8008e56:	4621      	mov	r1, r4
 8008e58:	4638      	mov	r0, r7
 8008e5a:	f7ff ffa5 	bl	8008da8 <_Bfree>
 8008e5e:	4644      	mov	r4, r8
 8008e60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008e64:	3501      	adds	r5, #1
 8008e66:	615e      	str	r6, [r3, #20]
 8008e68:	6125      	str	r5, [r4, #16]
 8008e6a:	4620      	mov	r0, r4
 8008e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e70:	0800a078 	.word	0x0800a078
 8008e74:	0800a089 	.word	0x0800a089

08008e78 <__hi0bits>:
 8008e78:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	bf36      	itet	cc
 8008e80:	0403      	lslcc	r3, r0, #16
 8008e82:	2000      	movcs	r0, #0
 8008e84:	2010      	movcc	r0, #16
 8008e86:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008e8a:	bf3c      	itt	cc
 8008e8c:	021b      	lslcc	r3, r3, #8
 8008e8e:	3008      	addcc	r0, #8
 8008e90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e94:	bf3c      	itt	cc
 8008e96:	011b      	lslcc	r3, r3, #4
 8008e98:	3004      	addcc	r0, #4
 8008e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e9e:	bf3c      	itt	cc
 8008ea0:	009b      	lslcc	r3, r3, #2
 8008ea2:	3002      	addcc	r0, #2
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	db05      	blt.n	8008eb4 <__hi0bits+0x3c>
 8008ea8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008eac:	f100 0001 	add.w	r0, r0, #1
 8008eb0:	bf08      	it	eq
 8008eb2:	2020      	moveq	r0, #32
 8008eb4:	4770      	bx	lr

08008eb6 <__lo0bits>:
 8008eb6:	6803      	ldr	r3, [r0, #0]
 8008eb8:	4602      	mov	r2, r0
 8008eba:	f013 0007 	ands.w	r0, r3, #7
 8008ebe:	d00b      	beq.n	8008ed8 <__lo0bits+0x22>
 8008ec0:	07d9      	lsls	r1, r3, #31
 8008ec2:	d421      	bmi.n	8008f08 <__lo0bits+0x52>
 8008ec4:	0798      	lsls	r0, r3, #30
 8008ec6:	bf49      	itett	mi
 8008ec8:	085b      	lsrmi	r3, r3, #1
 8008eca:	089b      	lsrpl	r3, r3, #2
 8008ecc:	2001      	movmi	r0, #1
 8008ece:	6013      	strmi	r3, [r2, #0]
 8008ed0:	bf5c      	itt	pl
 8008ed2:	6013      	strpl	r3, [r2, #0]
 8008ed4:	2002      	movpl	r0, #2
 8008ed6:	4770      	bx	lr
 8008ed8:	b299      	uxth	r1, r3
 8008eda:	b909      	cbnz	r1, 8008ee0 <__lo0bits+0x2a>
 8008edc:	0c1b      	lsrs	r3, r3, #16
 8008ede:	2010      	movs	r0, #16
 8008ee0:	b2d9      	uxtb	r1, r3
 8008ee2:	b909      	cbnz	r1, 8008ee8 <__lo0bits+0x32>
 8008ee4:	3008      	adds	r0, #8
 8008ee6:	0a1b      	lsrs	r3, r3, #8
 8008ee8:	0719      	lsls	r1, r3, #28
 8008eea:	bf04      	itt	eq
 8008eec:	091b      	lsreq	r3, r3, #4
 8008eee:	3004      	addeq	r0, #4
 8008ef0:	0799      	lsls	r1, r3, #30
 8008ef2:	bf04      	itt	eq
 8008ef4:	089b      	lsreq	r3, r3, #2
 8008ef6:	3002      	addeq	r0, #2
 8008ef8:	07d9      	lsls	r1, r3, #31
 8008efa:	d403      	bmi.n	8008f04 <__lo0bits+0x4e>
 8008efc:	085b      	lsrs	r3, r3, #1
 8008efe:	f100 0001 	add.w	r0, r0, #1
 8008f02:	d003      	beq.n	8008f0c <__lo0bits+0x56>
 8008f04:	6013      	str	r3, [r2, #0]
 8008f06:	4770      	bx	lr
 8008f08:	2000      	movs	r0, #0
 8008f0a:	4770      	bx	lr
 8008f0c:	2020      	movs	r0, #32
 8008f0e:	4770      	bx	lr

08008f10 <__i2b>:
 8008f10:	b510      	push	{r4, lr}
 8008f12:	460c      	mov	r4, r1
 8008f14:	2101      	movs	r1, #1
 8008f16:	f7ff ff07 	bl	8008d28 <_Balloc>
 8008f1a:	4602      	mov	r2, r0
 8008f1c:	b928      	cbnz	r0, 8008f2a <__i2b+0x1a>
 8008f1e:	4b05      	ldr	r3, [pc, #20]	@ (8008f34 <__i2b+0x24>)
 8008f20:	4805      	ldr	r0, [pc, #20]	@ (8008f38 <__i2b+0x28>)
 8008f22:	f240 1145 	movw	r1, #325	@ 0x145
 8008f26:	f000 fcbd 	bl	80098a4 <__assert_func>
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	6144      	str	r4, [r0, #20]
 8008f2e:	6103      	str	r3, [r0, #16]
 8008f30:	bd10      	pop	{r4, pc}
 8008f32:	bf00      	nop
 8008f34:	0800a078 	.word	0x0800a078
 8008f38:	0800a089 	.word	0x0800a089

08008f3c <__multiply>:
 8008f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f40:	4614      	mov	r4, r2
 8008f42:	690a      	ldr	r2, [r1, #16]
 8008f44:	6923      	ldr	r3, [r4, #16]
 8008f46:	429a      	cmp	r2, r3
 8008f48:	bfa8      	it	ge
 8008f4a:	4623      	movge	r3, r4
 8008f4c:	460f      	mov	r7, r1
 8008f4e:	bfa4      	itt	ge
 8008f50:	460c      	movge	r4, r1
 8008f52:	461f      	movge	r7, r3
 8008f54:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008f58:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008f5c:	68a3      	ldr	r3, [r4, #8]
 8008f5e:	6861      	ldr	r1, [r4, #4]
 8008f60:	eb0a 0609 	add.w	r6, sl, r9
 8008f64:	42b3      	cmp	r3, r6
 8008f66:	b085      	sub	sp, #20
 8008f68:	bfb8      	it	lt
 8008f6a:	3101      	addlt	r1, #1
 8008f6c:	f7ff fedc 	bl	8008d28 <_Balloc>
 8008f70:	b930      	cbnz	r0, 8008f80 <__multiply+0x44>
 8008f72:	4602      	mov	r2, r0
 8008f74:	4b44      	ldr	r3, [pc, #272]	@ (8009088 <__multiply+0x14c>)
 8008f76:	4845      	ldr	r0, [pc, #276]	@ (800908c <__multiply+0x150>)
 8008f78:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008f7c:	f000 fc92 	bl	80098a4 <__assert_func>
 8008f80:	f100 0514 	add.w	r5, r0, #20
 8008f84:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008f88:	462b      	mov	r3, r5
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	4543      	cmp	r3, r8
 8008f8e:	d321      	bcc.n	8008fd4 <__multiply+0x98>
 8008f90:	f107 0114 	add.w	r1, r7, #20
 8008f94:	f104 0214 	add.w	r2, r4, #20
 8008f98:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008f9c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008fa0:	9302      	str	r3, [sp, #8]
 8008fa2:	1b13      	subs	r3, r2, r4
 8008fa4:	3b15      	subs	r3, #21
 8008fa6:	f023 0303 	bic.w	r3, r3, #3
 8008faa:	3304      	adds	r3, #4
 8008fac:	f104 0715 	add.w	r7, r4, #21
 8008fb0:	42ba      	cmp	r2, r7
 8008fb2:	bf38      	it	cc
 8008fb4:	2304      	movcc	r3, #4
 8008fb6:	9301      	str	r3, [sp, #4]
 8008fb8:	9b02      	ldr	r3, [sp, #8]
 8008fba:	9103      	str	r1, [sp, #12]
 8008fbc:	428b      	cmp	r3, r1
 8008fbe:	d80c      	bhi.n	8008fda <__multiply+0x9e>
 8008fc0:	2e00      	cmp	r6, #0
 8008fc2:	dd03      	ble.n	8008fcc <__multiply+0x90>
 8008fc4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d05b      	beq.n	8009084 <__multiply+0x148>
 8008fcc:	6106      	str	r6, [r0, #16]
 8008fce:	b005      	add	sp, #20
 8008fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fd4:	f843 2b04 	str.w	r2, [r3], #4
 8008fd8:	e7d8      	b.n	8008f8c <__multiply+0x50>
 8008fda:	f8b1 a000 	ldrh.w	sl, [r1]
 8008fde:	f1ba 0f00 	cmp.w	sl, #0
 8008fe2:	d024      	beq.n	800902e <__multiply+0xf2>
 8008fe4:	f104 0e14 	add.w	lr, r4, #20
 8008fe8:	46a9      	mov	r9, r5
 8008fea:	f04f 0c00 	mov.w	ip, #0
 8008fee:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008ff2:	f8d9 3000 	ldr.w	r3, [r9]
 8008ff6:	fa1f fb87 	uxth.w	fp, r7
 8008ffa:	b29b      	uxth	r3, r3
 8008ffc:	fb0a 330b 	mla	r3, sl, fp, r3
 8009000:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009004:	f8d9 7000 	ldr.w	r7, [r9]
 8009008:	4463      	add	r3, ip
 800900a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800900e:	fb0a c70b 	mla	r7, sl, fp, ip
 8009012:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009016:	b29b      	uxth	r3, r3
 8009018:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800901c:	4572      	cmp	r2, lr
 800901e:	f849 3b04 	str.w	r3, [r9], #4
 8009022:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009026:	d8e2      	bhi.n	8008fee <__multiply+0xb2>
 8009028:	9b01      	ldr	r3, [sp, #4]
 800902a:	f845 c003 	str.w	ip, [r5, r3]
 800902e:	9b03      	ldr	r3, [sp, #12]
 8009030:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009034:	3104      	adds	r1, #4
 8009036:	f1b9 0f00 	cmp.w	r9, #0
 800903a:	d021      	beq.n	8009080 <__multiply+0x144>
 800903c:	682b      	ldr	r3, [r5, #0]
 800903e:	f104 0c14 	add.w	ip, r4, #20
 8009042:	46ae      	mov	lr, r5
 8009044:	f04f 0a00 	mov.w	sl, #0
 8009048:	f8bc b000 	ldrh.w	fp, [ip]
 800904c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009050:	fb09 770b 	mla	r7, r9, fp, r7
 8009054:	4457      	add	r7, sl
 8009056:	b29b      	uxth	r3, r3
 8009058:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800905c:	f84e 3b04 	str.w	r3, [lr], #4
 8009060:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009064:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009068:	f8be 3000 	ldrh.w	r3, [lr]
 800906c:	fb09 330a 	mla	r3, r9, sl, r3
 8009070:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009074:	4562      	cmp	r2, ip
 8009076:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800907a:	d8e5      	bhi.n	8009048 <__multiply+0x10c>
 800907c:	9f01      	ldr	r7, [sp, #4]
 800907e:	51eb      	str	r3, [r5, r7]
 8009080:	3504      	adds	r5, #4
 8009082:	e799      	b.n	8008fb8 <__multiply+0x7c>
 8009084:	3e01      	subs	r6, #1
 8009086:	e79b      	b.n	8008fc0 <__multiply+0x84>
 8009088:	0800a078 	.word	0x0800a078
 800908c:	0800a089 	.word	0x0800a089

08009090 <__pow5mult>:
 8009090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009094:	4615      	mov	r5, r2
 8009096:	f012 0203 	ands.w	r2, r2, #3
 800909a:	4607      	mov	r7, r0
 800909c:	460e      	mov	r6, r1
 800909e:	d007      	beq.n	80090b0 <__pow5mult+0x20>
 80090a0:	4c25      	ldr	r4, [pc, #148]	@ (8009138 <__pow5mult+0xa8>)
 80090a2:	3a01      	subs	r2, #1
 80090a4:	2300      	movs	r3, #0
 80090a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80090aa:	f7ff fe9f 	bl	8008dec <__multadd>
 80090ae:	4606      	mov	r6, r0
 80090b0:	10ad      	asrs	r5, r5, #2
 80090b2:	d03d      	beq.n	8009130 <__pow5mult+0xa0>
 80090b4:	69fc      	ldr	r4, [r7, #28]
 80090b6:	b97c      	cbnz	r4, 80090d8 <__pow5mult+0x48>
 80090b8:	2010      	movs	r0, #16
 80090ba:	f7ff fd7f 	bl	8008bbc <malloc>
 80090be:	4602      	mov	r2, r0
 80090c0:	61f8      	str	r0, [r7, #28]
 80090c2:	b928      	cbnz	r0, 80090d0 <__pow5mult+0x40>
 80090c4:	4b1d      	ldr	r3, [pc, #116]	@ (800913c <__pow5mult+0xac>)
 80090c6:	481e      	ldr	r0, [pc, #120]	@ (8009140 <__pow5mult+0xb0>)
 80090c8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80090cc:	f000 fbea 	bl	80098a4 <__assert_func>
 80090d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80090d4:	6004      	str	r4, [r0, #0]
 80090d6:	60c4      	str	r4, [r0, #12]
 80090d8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80090dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80090e0:	b94c      	cbnz	r4, 80090f6 <__pow5mult+0x66>
 80090e2:	f240 2171 	movw	r1, #625	@ 0x271
 80090e6:	4638      	mov	r0, r7
 80090e8:	f7ff ff12 	bl	8008f10 <__i2b>
 80090ec:	2300      	movs	r3, #0
 80090ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80090f2:	4604      	mov	r4, r0
 80090f4:	6003      	str	r3, [r0, #0]
 80090f6:	f04f 0900 	mov.w	r9, #0
 80090fa:	07eb      	lsls	r3, r5, #31
 80090fc:	d50a      	bpl.n	8009114 <__pow5mult+0x84>
 80090fe:	4631      	mov	r1, r6
 8009100:	4622      	mov	r2, r4
 8009102:	4638      	mov	r0, r7
 8009104:	f7ff ff1a 	bl	8008f3c <__multiply>
 8009108:	4631      	mov	r1, r6
 800910a:	4680      	mov	r8, r0
 800910c:	4638      	mov	r0, r7
 800910e:	f7ff fe4b 	bl	8008da8 <_Bfree>
 8009112:	4646      	mov	r6, r8
 8009114:	106d      	asrs	r5, r5, #1
 8009116:	d00b      	beq.n	8009130 <__pow5mult+0xa0>
 8009118:	6820      	ldr	r0, [r4, #0]
 800911a:	b938      	cbnz	r0, 800912c <__pow5mult+0x9c>
 800911c:	4622      	mov	r2, r4
 800911e:	4621      	mov	r1, r4
 8009120:	4638      	mov	r0, r7
 8009122:	f7ff ff0b 	bl	8008f3c <__multiply>
 8009126:	6020      	str	r0, [r4, #0]
 8009128:	f8c0 9000 	str.w	r9, [r0]
 800912c:	4604      	mov	r4, r0
 800912e:	e7e4      	b.n	80090fa <__pow5mult+0x6a>
 8009130:	4630      	mov	r0, r6
 8009132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009136:	bf00      	nop
 8009138:	0800a0e4 	.word	0x0800a0e4
 800913c:	0800a009 	.word	0x0800a009
 8009140:	0800a089 	.word	0x0800a089

08009144 <__lshift>:
 8009144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009148:	460c      	mov	r4, r1
 800914a:	6849      	ldr	r1, [r1, #4]
 800914c:	6923      	ldr	r3, [r4, #16]
 800914e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009152:	68a3      	ldr	r3, [r4, #8]
 8009154:	4607      	mov	r7, r0
 8009156:	4691      	mov	r9, r2
 8009158:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800915c:	f108 0601 	add.w	r6, r8, #1
 8009160:	42b3      	cmp	r3, r6
 8009162:	db0b      	blt.n	800917c <__lshift+0x38>
 8009164:	4638      	mov	r0, r7
 8009166:	f7ff fddf 	bl	8008d28 <_Balloc>
 800916a:	4605      	mov	r5, r0
 800916c:	b948      	cbnz	r0, 8009182 <__lshift+0x3e>
 800916e:	4602      	mov	r2, r0
 8009170:	4b28      	ldr	r3, [pc, #160]	@ (8009214 <__lshift+0xd0>)
 8009172:	4829      	ldr	r0, [pc, #164]	@ (8009218 <__lshift+0xd4>)
 8009174:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009178:	f000 fb94 	bl	80098a4 <__assert_func>
 800917c:	3101      	adds	r1, #1
 800917e:	005b      	lsls	r3, r3, #1
 8009180:	e7ee      	b.n	8009160 <__lshift+0x1c>
 8009182:	2300      	movs	r3, #0
 8009184:	f100 0114 	add.w	r1, r0, #20
 8009188:	f100 0210 	add.w	r2, r0, #16
 800918c:	4618      	mov	r0, r3
 800918e:	4553      	cmp	r3, sl
 8009190:	db33      	blt.n	80091fa <__lshift+0xb6>
 8009192:	6920      	ldr	r0, [r4, #16]
 8009194:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009198:	f104 0314 	add.w	r3, r4, #20
 800919c:	f019 091f 	ands.w	r9, r9, #31
 80091a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80091a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80091a8:	d02b      	beq.n	8009202 <__lshift+0xbe>
 80091aa:	f1c9 0e20 	rsb	lr, r9, #32
 80091ae:	468a      	mov	sl, r1
 80091b0:	2200      	movs	r2, #0
 80091b2:	6818      	ldr	r0, [r3, #0]
 80091b4:	fa00 f009 	lsl.w	r0, r0, r9
 80091b8:	4310      	orrs	r0, r2
 80091ba:	f84a 0b04 	str.w	r0, [sl], #4
 80091be:	f853 2b04 	ldr.w	r2, [r3], #4
 80091c2:	459c      	cmp	ip, r3
 80091c4:	fa22 f20e 	lsr.w	r2, r2, lr
 80091c8:	d8f3      	bhi.n	80091b2 <__lshift+0x6e>
 80091ca:	ebac 0304 	sub.w	r3, ip, r4
 80091ce:	3b15      	subs	r3, #21
 80091d0:	f023 0303 	bic.w	r3, r3, #3
 80091d4:	3304      	adds	r3, #4
 80091d6:	f104 0015 	add.w	r0, r4, #21
 80091da:	4584      	cmp	ip, r0
 80091dc:	bf38      	it	cc
 80091de:	2304      	movcc	r3, #4
 80091e0:	50ca      	str	r2, [r1, r3]
 80091e2:	b10a      	cbz	r2, 80091e8 <__lshift+0xa4>
 80091e4:	f108 0602 	add.w	r6, r8, #2
 80091e8:	3e01      	subs	r6, #1
 80091ea:	4638      	mov	r0, r7
 80091ec:	612e      	str	r6, [r5, #16]
 80091ee:	4621      	mov	r1, r4
 80091f0:	f7ff fdda 	bl	8008da8 <_Bfree>
 80091f4:	4628      	mov	r0, r5
 80091f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80091fe:	3301      	adds	r3, #1
 8009200:	e7c5      	b.n	800918e <__lshift+0x4a>
 8009202:	3904      	subs	r1, #4
 8009204:	f853 2b04 	ldr.w	r2, [r3], #4
 8009208:	f841 2f04 	str.w	r2, [r1, #4]!
 800920c:	459c      	cmp	ip, r3
 800920e:	d8f9      	bhi.n	8009204 <__lshift+0xc0>
 8009210:	e7ea      	b.n	80091e8 <__lshift+0xa4>
 8009212:	bf00      	nop
 8009214:	0800a078 	.word	0x0800a078
 8009218:	0800a089 	.word	0x0800a089

0800921c <__mcmp>:
 800921c:	690a      	ldr	r2, [r1, #16]
 800921e:	4603      	mov	r3, r0
 8009220:	6900      	ldr	r0, [r0, #16]
 8009222:	1a80      	subs	r0, r0, r2
 8009224:	b530      	push	{r4, r5, lr}
 8009226:	d10e      	bne.n	8009246 <__mcmp+0x2a>
 8009228:	3314      	adds	r3, #20
 800922a:	3114      	adds	r1, #20
 800922c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009230:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009234:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009238:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800923c:	4295      	cmp	r5, r2
 800923e:	d003      	beq.n	8009248 <__mcmp+0x2c>
 8009240:	d205      	bcs.n	800924e <__mcmp+0x32>
 8009242:	f04f 30ff 	mov.w	r0, #4294967295
 8009246:	bd30      	pop	{r4, r5, pc}
 8009248:	42a3      	cmp	r3, r4
 800924a:	d3f3      	bcc.n	8009234 <__mcmp+0x18>
 800924c:	e7fb      	b.n	8009246 <__mcmp+0x2a>
 800924e:	2001      	movs	r0, #1
 8009250:	e7f9      	b.n	8009246 <__mcmp+0x2a>
	...

08009254 <__mdiff>:
 8009254:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009258:	4689      	mov	r9, r1
 800925a:	4606      	mov	r6, r0
 800925c:	4611      	mov	r1, r2
 800925e:	4648      	mov	r0, r9
 8009260:	4614      	mov	r4, r2
 8009262:	f7ff ffdb 	bl	800921c <__mcmp>
 8009266:	1e05      	subs	r5, r0, #0
 8009268:	d112      	bne.n	8009290 <__mdiff+0x3c>
 800926a:	4629      	mov	r1, r5
 800926c:	4630      	mov	r0, r6
 800926e:	f7ff fd5b 	bl	8008d28 <_Balloc>
 8009272:	4602      	mov	r2, r0
 8009274:	b928      	cbnz	r0, 8009282 <__mdiff+0x2e>
 8009276:	4b3f      	ldr	r3, [pc, #252]	@ (8009374 <__mdiff+0x120>)
 8009278:	f240 2137 	movw	r1, #567	@ 0x237
 800927c:	483e      	ldr	r0, [pc, #248]	@ (8009378 <__mdiff+0x124>)
 800927e:	f000 fb11 	bl	80098a4 <__assert_func>
 8009282:	2301      	movs	r3, #1
 8009284:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009288:	4610      	mov	r0, r2
 800928a:	b003      	add	sp, #12
 800928c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009290:	bfbc      	itt	lt
 8009292:	464b      	movlt	r3, r9
 8009294:	46a1      	movlt	r9, r4
 8009296:	4630      	mov	r0, r6
 8009298:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800929c:	bfba      	itte	lt
 800929e:	461c      	movlt	r4, r3
 80092a0:	2501      	movlt	r5, #1
 80092a2:	2500      	movge	r5, #0
 80092a4:	f7ff fd40 	bl	8008d28 <_Balloc>
 80092a8:	4602      	mov	r2, r0
 80092aa:	b918      	cbnz	r0, 80092b4 <__mdiff+0x60>
 80092ac:	4b31      	ldr	r3, [pc, #196]	@ (8009374 <__mdiff+0x120>)
 80092ae:	f240 2145 	movw	r1, #581	@ 0x245
 80092b2:	e7e3      	b.n	800927c <__mdiff+0x28>
 80092b4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80092b8:	6926      	ldr	r6, [r4, #16]
 80092ba:	60c5      	str	r5, [r0, #12]
 80092bc:	f109 0310 	add.w	r3, r9, #16
 80092c0:	f109 0514 	add.w	r5, r9, #20
 80092c4:	f104 0e14 	add.w	lr, r4, #20
 80092c8:	f100 0b14 	add.w	fp, r0, #20
 80092cc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80092d0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80092d4:	9301      	str	r3, [sp, #4]
 80092d6:	46d9      	mov	r9, fp
 80092d8:	f04f 0c00 	mov.w	ip, #0
 80092dc:	9b01      	ldr	r3, [sp, #4]
 80092de:	f85e 0b04 	ldr.w	r0, [lr], #4
 80092e2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80092e6:	9301      	str	r3, [sp, #4]
 80092e8:	fa1f f38a 	uxth.w	r3, sl
 80092ec:	4619      	mov	r1, r3
 80092ee:	b283      	uxth	r3, r0
 80092f0:	1acb      	subs	r3, r1, r3
 80092f2:	0c00      	lsrs	r0, r0, #16
 80092f4:	4463      	add	r3, ip
 80092f6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80092fa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80092fe:	b29b      	uxth	r3, r3
 8009300:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009304:	4576      	cmp	r6, lr
 8009306:	f849 3b04 	str.w	r3, [r9], #4
 800930a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800930e:	d8e5      	bhi.n	80092dc <__mdiff+0x88>
 8009310:	1b33      	subs	r3, r6, r4
 8009312:	3b15      	subs	r3, #21
 8009314:	f023 0303 	bic.w	r3, r3, #3
 8009318:	3415      	adds	r4, #21
 800931a:	3304      	adds	r3, #4
 800931c:	42a6      	cmp	r6, r4
 800931e:	bf38      	it	cc
 8009320:	2304      	movcc	r3, #4
 8009322:	441d      	add	r5, r3
 8009324:	445b      	add	r3, fp
 8009326:	461e      	mov	r6, r3
 8009328:	462c      	mov	r4, r5
 800932a:	4544      	cmp	r4, r8
 800932c:	d30e      	bcc.n	800934c <__mdiff+0xf8>
 800932e:	f108 0103 	add.w	r1, r8, #3
 8009332:	1b49      	subs	r1, r1, r5
 8009334:	f021 0103 	bic.w	r1, r1, #3
 8009338:	3d03      	subs	r5, #3
 800933a:	45a8      	cmp	r8, r5
 800933c:	bf38      	it	cc
 800933e:	2100      	movcc	r1, #0
 8009340:	440b      	add	r3, r1
 8009342:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009346:	b191      	cbz	r1, 800936e <__mdiff+0x11a>
 8009348:	6117      	str	r7, [r2, #16]
 800934a:	e79d      	b.n	8009288 <__mdiff+0x34>
 800934c:	f854 1b04 	ldr.w	r1, [r4], #4
 8009350:	46e6      	mov	lr, ip
 8009352:	0c08      	lsrs	r0, r1, #16
 8009354:	fa1c fc81 	uxtah	ip, ip, r1
 8009358:	4471      	add	r1, lr
 800935a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800935e:	b289      	uxth	r1, r1
 8009360:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009364:	f846 1b04 	str.w	r1, [r6], #4
 8009368:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800936c:	e7dd      	b.n	800932a <__mdiff+0xd6>
 800936e:	3f01      	subs	r7, #1
 8009370:	e7e7      	b.n	8009342 <__mdiff+0xee>
 8009372:	bf00      	nop
 8009374:	0800a078 	.word	0x0800a078
 8009378:	0800a089 	.word	0x0800a089

0800937c <__d2b>:
 800937c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009380:	460f      	mov	r7, r1
 8009382:	2101      	movs	r1, #1
 8009384:	ec59 8b10 	vmov	r8, r9, d0
 8009388:	4616      	mov	r6, r2
 800938a:	f7ff fccd 	bl	8008d28 <_Balloc>
 800938e:	4604      	mov	r4, r0
 8009390:	b930      	cbnz	r0, 80093a0 <__d2b+0x24>
 8009392:	4602      	mov	r2, r0
 8009394:	4b23      	ldr	r3, [pc, #140]	@ (8009424 <__d2b+0xa8>)
 8009396:	4824      	ldr	r0, [pc, #144]	@ (8009428 <__d2b+0xac>)
 8009398:	f240 310f 	movw	r1, #783	@ 0x30f
 800939c:	f000 fa82 	bl	80098a4 <__assert_func>
 80093a0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80093a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80093a8:	b10d      	cbz	r5, 80093ae <__d2b+0x32>
 80093aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80093ae:	9301      	str	r3, [sp, #4]
 80093b0:	f1b8 0300 	subs.w	r3, r8, #0
 80093b4:	d023      	beq.n	80093fe <__d2b+0x82>
 80093b6:	4668      	mov	r0, sp
 80093b8:	9300      	str	r3, [sp, #0]
 80093ba:	f7ff fd7c 	bl	8008eb6 <__lo0bits>
 80093be:	e9dd 1200 	ldrd	r1, r2, [sp]
 80093c2:	b1d0      	cbz	r0, 80093fa <__d2b+0x7e>
 80093c4:	f1c0 0320 	rsb	r3, r0, #32
 80093c8:	fa02 f303 	lsl.w	r3, r2, r3
 80093cc:	430b      	orrs	r3, r1
 80093ce:	40c2      	lsrs	r2, r0
 80093d0:	6163      	str	r3, [r4, #20]
 80093d2:	9201      	str	r2, [sp, #4]
 80093d4:	9b01      	ldr	r3, [sp, #4]
 80093d6:	61a3      	str	r3, [r4, #24]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	bf0c      	ite	eq
 80093dc:	2201      	moveq	r2, #1
 80093de:	2202      	movne	r2, #2
 80093e0:	6122      	str	r2, [r4, #16]
 80093e2:	b1a5      	cbz	r5, 800940e <__d2b+0x92>
 80093e4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80093e8:	4405      	add	r5, r0
 80093ea:	603d      	str	r5, [r7, #0]
 80093ec:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80093f0:	6030      	str	r0, [r6, #0]
 80093f2:	4620      	mov	r0, r4
 80093f4:	b003      	add	sp, #12
 80093f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093fa:	6161      	str	r1, [r4, #20]
 80093fc:	e7ea      	b.n	80093d4 <__d2b+0x58>
 80093fe:	a801      	add	r0, sp, #4
 8009400:	f7ff fd59 	bl	8008eb6 <__lo0bits>
 8009404:	9b01      	ldr	r3, [sp, #4]
 8009406:	6163      	str	r3, [r4, #20]
 8009408:	3020      	adds	r0, #32
 800940a:	2201      	movs	r2, #1
 800940c:	e7e8      	b.n	80093e0 <__d2b+0x64>
 800940e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009412:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009416:	6038      	str	r0, [r7, #0]
 8009418:	6918      	ldr	r0, [r3, #16]
 800941a:	f7ff fd2d 	bl	8008e78 <__hi0bits>
 800941e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009422:	e7e5      	b.n	80093f0 <__d2b+0x74>
 8009424:	0800a078 	.word	0x0800a078
 8009428:	0800a089 	.word	0x0800a089

0800942c <__ssputs_r>:
 800942c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009430:	688e      	ldr	r6, [r1, #8]
 8009432:	461f      	mov	r7, r3
 8009434:	42be      	cmp	r6, r7
 8009436:	680b      	ldr	r3, [r1, #0]
 8009438:	4682      	mov	sl, r0
 800943a:	460c      	mov	r4, r1
 800943c:	4690      	mov	r8, r2
 800943e:	d82d      	bhi.n	800949c <__ssputs_r+0x70>
 8009440:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009444:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009448:	d026      	beq.n	8009498 <__ssputs_r+0x6c>
 800944a:	6965      	ldr	r5, [r4, #20]
 800944c:	6909      	ldr	r1, [r1, #16]
 800944e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009452:	eba3 0901 	sub.w	r9, r3, r1
 8009456:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800945a:	1c7b      	adds	r3, r7, #1
 800945c:	444b      	add	r3, r9
 800945e:	106d      	asrs	r5, r5, #1
 8009460:	429d      	cmp	r5, r3
 8009462:	bf38      	it	cc
 8009464:	461d      	movcc	r5, r3
 8009466:	0553      	lsls	r3, r2, #21
 8009468:	d527      	bpl.n	80094ba <__ssputs_r+0x8e>
 800946a:	4629      	mov	r1, r5
 800946c:	f7ff fbd0 	bl	8008c10 <_malloc_r>
 8009470:	4606      	mov	r6, r0
 8009472:	b360      	cbz	r0, 80094ce <__ssputs_r+0xa2>
 8009474:	6921      	ldr	r1, [r4, #16]
 8009476:	464a      	mov	r2, r9
 8009478:	f000 fa06 	bl	8009888 <memcpy>
 800947c:	89a3      	ldrh	r3, [r4, #12]
 800947e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009482:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009486:	81a3      	strh	r3, [r4, #12]
 8009488:	6126      	str	r6, [r4, #16]
 800948a:	6165      	str	r5, [r4, #20]
 800948c:	444e      	add	r6, r9
 800948e:	eba5 0509 	sub.w	r5, r5, r9
 8009492:	6026      	str	r6, [r4, #0]
 8009494:	60a5      	str	r5, [r4, #8]
 8009496:	463e      	mov	r6, r7
 8009498:	42be      	cmp	r6, r7
 800949a:	d900      	bls.n	800949e <__ssputs_r+0x72>
 800949c:	463e      	mov	r6, r7
 800949e:	6820      	ldr	r0, [r4, #0]
 80094a0:	4632      	mov	r2, r6
 80094a2:	4641      	mov	r1, r8
 80094a4:	f000 f9c6 	bl	8009834 <memmove>
 80094a8:	68a3      	ldr	r3, [r4, #8]
 80094aa:	1b9b      	subs	r3, r3, r6
 80094ac:	60a3      	str	r3, [r4, #8]
 80094ae:	6823      	ldr	r3, [r4, #0]
 80094b0:	4433      	add	r3, r6
 80094b2:	6023      	str	r3, [r4, #0]
 80094b4:	2000      	movs	r0, #0
 80094b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094ba:	462a      	mov	r2, r5
 80094bc:	f000 fa36 	bl	800992c <_realloc_r>
 80094c0:	4606      	mov	r6, r0
 80094c2:	2800      	cmp	r0, #0
 80094c4:	d1e0      	bne.n	8009488 <__ssputs_r+0x5c>
 80094c6:	6921      	ldr	r1, [r4, #16]
 80094c8:	4650      	mov	r0, sl
 80094ca:	f7ff fb2d 	bl	8008b28 <_free_r>
 80094ce:	230c      	movs	r3, #12
 80094d0:	f8ca 3000 	str.w	r3, [sl]
 80094d4:	89a3      	ldrh	r3, [r4, #12]
 80094d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094da:	81a3      	strh	r3, [r4, #12]
 80094dc:	f04f 30ff 	mov.w	r0, #4294967295
 80094e0:	e7e9      	b.n	80094b6 <__ssputs_r+0x8a>
	...

080094e4 <_svfiprintf_r>:
 80094e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094e8:	4698      	mov	r8, r3
 80094ea:	898b      	ldrh	r3, [r1, #12]
 80094ec:	061b      	lsls	r3, r3, #24
 80094ee:	b09d      	sub	sp, #116	@ 0x74
 80094f0:	4607      	mov	r7, r0
 80094f2:	460d      	mov	r5, r1
 80094f4:	4614      	mov	r4, r2
 80094f6:	d510      	bpl.n	800951a <_svfiprintf_r+0x36>
 80094f8:	690b      	ldr	r3, [r1, #16]
 80094fa:	b973      	cbnz	r3, 800951a <_svfiprintf_r+0x36>
 80094fc:	2140      	movs	r1, #64	@ 0x40
 80094fe:	f7ff fb87 	bl	8008c10 <_malloc_r>
 8009502:	6028      	str	r0, [r5, #0]
 8009504:	6128      	str	r0, [r5, #16]
 8009506:	b930      	cbnz	r0, 8009516 <_svfiprintf_r+0x32>
 8009508:	230c      	movs	r3, #12
 800950a:	603b      	str	r3, [r7, #0]
 800950c:	f04f 30ff 	mov.w	r0, #4294967295
 8009510:	b01d      	add	sp, #116	@ 0x74
 8009512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009516:	2340      	movs	r3, #64	@ 0x40
 8009518:	616b      	str	r3, [r5, #20]
 800951a:	2300      	movs	r3, #0
 800951c:	9309      	str	r3, [sp, #36]	@ 0x24
 800951e:	2320      	movs	r3, #32
 8009520:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009524:	f8cd 800c 	str.w	r8, [sp, #12]
 8009528:	2330      	movs	r3, #48	@ 0x30
 800952a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80096c8 <_svfiprintf_r+0x1e4>
 800952e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009532:	f04f 0901 	mov.w	r9, #1
 8009536:	4623      	mov	r3, r4
 8009538:	469a      	mov	sl, r3
 800953a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800953e:	b10a      	cbz	r2, 8009544 <_svfiprintf_r+0x60>
 8009540:	2a25      	cmp	r2, #37	@ 0x25
 8009542:	d1f9      	bne.n	8009538 <_svfiprintf_r+0x54>
 8009544:	ebba 0b04 	subs.w	fp, sl, r4
 8009548:	d00b      	beq.n	8009562 <_svfiprintf_r+0x7e>
 800954a:	465b      	mov	r3, fp
 800954c:	4622      	mov	r2, r4
 800954e:	4629      	mov	r1, r5
 8009550:	4638      	mov	r0, r7
 8009552:	f7ff ff6b 	bl	800942c <__ssputs_r>
 8009556:	3001      	adds	r0, #1
 8009558:	f000 80a7 	beq.w	80096aa <_svfiprintf_r+0x1c6>
 800955c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800955e:	445a      	add	r2, fp
 8009560:	9209      	str	r2, [sp, #36]	@ 0x24
 8009562:	f89a 3000 	ldrb.w	r3, [sl]
 8009566:	2b00      	cmp	r3, #0
 8009568:	f000 809f 	beq.w	80096aa <_svfiprintf_r+0x1c6>
 800956c:	2300      	movs	r3, #0
 800956e:	f04f 32ff 	mov.w	r2, #4294967295
 8009572:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009576:	f10a 0a01 	add.w	sl, sl, #1
 800957a:	9304      	str	r3, [sp, #16]
 800957c:	9307      	str	r3, [sp, #28]
 800957e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009582:	931a      	str	r3, [sp, #104]	@ 0x68
 8009584:	4654      	mov	r4, sl
 8009586:	2205      	movs	r2, #5
 8009588:	f814 1b01 	ldrb.w	r1, [r4], #1
 800958c:	484e      	ldr	r0, [pc, #312]	@ (80096c8 <_svfiprintf_r+0x1e4>)
 800958e:	f7f6 fe27 	bl	80001e0 <memchr>
 8009592:	9a04      	ldr	r2, [sp, #16]
 8009594:	b9d8      	cbnz	r0, 80095ce <_svfiprintf_r+0xea>
 8009596:	06d0      	lsls	r0, r2, #27
 8009598:	bf44      	itt	mi
 800959a:	2320      	movmi	r3, #32
 800959c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80095a0:	0711      	lsls	r1, r2, #28
 80095a2:	bf44      	itt	mi
 80095a4:	232b      	movmi	r3, #43	@ 0x2b
 80095a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80095aa:	f89a 3000 	ldrb.w	r3, [sl]
 80095ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80095b0:	d015      	beq.n	80095de <_svfiprintf_r+0xfa>
 80095b2:	9a07      	ldr	r2, [sp, #28]
 80095b4:	4654      	mov	r4, sl
 80095b6:	2000      	movs	r0, #0
 80095b8:	f04f 0c0a 	mov.w	ip, #10
 80095bc:	4621      	mov	r1, r4
 80095be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095c2:	3b30      	subs	r3, #48	@ 0x30
 80095c4:	2b09      	cmp	r3, #9
 80095c6:	d94b      	bls.n	8009660 <_svfiprintf_r+0x17c>
 80095c8:	b1b0      	cbz	r0, 80095f8 <_svfiprintf_r+0x114>
 80095ca:	9207      	str	r2, [sp, #28]
 80095cc:	e014      	b.n	80095f8 <_svfiprintf_r+0x114>
 80095ce:	eba0 0308 	sub.w	r3, r0, r8
 80095d2:	fa09 f303 	lsl.w	r3, r9, r3
 80095d6:	4313      	orrs	r3, r2
 80095d8:	9304      	str	r3, [sp, #16]
 80095da:	46a2      	mov	sl, r4
 80095dc:	e7d2      	b.n	8009584 <_svfiprintf_r+0xa0>
 80095de:	9b03      	ldr	r3, [sp, #12]
 80095e0:	1d19      	adds	r1, r3, #4
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	9103      	str	r1, [sp, #12]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	bfbb      	ittet	lt
 80095ea:	425b      	neglt	r3, r3
 80095ec:	f042 0202 	orrlt.w	r2, r2, #2
 80095f0:	9307      	strge	r3, [sp, #28]
 80095f2:	9307      	strlt	r3, [sp, #28]
 80095f4:	bfb8      	it	lt
 80095f6:	9204      	strlt	r2, [sp, #16]
 80095f8:	7823      	ldrb	r3, [r4, #0]
 80095fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80095fc:	d10a      	bne.n	8009614 <_svfiprintf_r+0x130>
 80095fe:	7863      	ldrb	r3, [r4, #1]
 8009600:	2b2a      	cmp	r3, #42	@ 0x2a
 8009602:	d132      	bne.n	800966a <_svfiprintf_r+0x186>
 8009604:	9b03      	ldr	r3, [sp, #12]
 8009606:	1d1a      	adds	r2, r3, #4
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	9203      	str	r2, [sp, #12]
 800960c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009610:	3402      	adds	r4, #2
 8009612:	9305      	str	r3, [sp, #20]
 8009614:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80096d8 <_svfiprintf_r+0x1f4>
 8009618:	7821      	ldrb	r1, [r4, #0]
 800961a:	2203      	movs	r2, #3
 800961c:	4650      	mov	r0, sl
 800961e:	f7f6 fddf 	bl	80001e0 <memchr>
 8009622:	b138      	cbz	r0, 8009634 <_svfiprintf_r+0x150>
 8009624:	9b04      	ldr	r3, [sp, #16]
 8009626:	eba0 000a 	sub.w	r0, r0, sl
 800962a:	2240      	movs	r2, #64	@ 0x40
 800962c:	4082      	lsls	r2, r0
 800962e:	4313      	orrs	r3, r2
 8009630:	3401      	adds	r4, #1
 8009632:	9304      	str	r3, [sp, #16]
 8009634:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009638:	4824      	ldr	r0, [pc, #144]	@ (80096cc <_svfiprintf_r+0x1e8>)
 800963a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800963e:	2206      	movs	r2, #6
 8009640:	f7f6 fdce 	bl	80001e0 <memchr>
 8009644:	2800      	cmp	r0, #0
 8009646:	d036      	beq.n	80096b6 <_svfiprintf_r+0x1d2>
 8009648:	4b21      	ldr	r3, [pc, #132]	@ (80096d0 <_svfiprintf_r+0x1ec>)
 800964a:	bb1b      	cbnz	r3, 8009694 <_svfiprintf_r+0x1b0>
 800964c:	9b03      	ldr	r3, [sp, #12]
 800964e:	3307      	adds	r3, #7
 8009650:	f023 0307 	bic.w	r3, r3, #7
 8009654:	3308      	adds	r3, #8
 8009656:	9303      	str	r3, [sp, #12]
 8009658:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800965a:	4433      	add	r3, r6
 800965c:	9309      	str	r3, [sp, #36]	@ 0x24
 800965e:	e76a      	b.n	8009536 <_svfiprintf_r+0x52>
 8009660:	fb0c 3202 	mla	r2, ip, r2, r3
 8009664:	460c      	mov	r4, r1
 8009666:	2001      	movs	r0, #1
 8009668:	e7a8      	b.n	80095bc <_svfiprintf_r+0xd8>
 800966a:	2300      	movs	r3, #0
 800966c:	3401      	adds	r4, #1
 800966e:	9305      	str	r3, [sp, #20]
 8009670:	4619      	mov	r1, r3
 8009672:	f04f 0c0a 	mov.w	ip, #10
 8009676:	4620      	mov	r0, r4
 8009678:	f810 2b01 	ldrb.w	r2, [r0], #1
 800967c:	3a30      	subs	r2, #48	@ 0x30
 800967e:	2a09      	cmp	r2, #9
 8009680:	d903      	bls.n	800968a <_svfiprintf_r+0x1a6>
 8009682:	2b00      	cmp	r3, #0
 8009684:	d0c6      	beq.n	8009614 <_svfiprintf_r+0x130>
 8009686:	9105      	str	r1, [sp, #20]
 8009688:	e7c4      	b.n	8009614 <_svfiprintf_r+0x130>
 800968a:	fb0c 2101 	mla	r1, ip, r1, r2
 800968e:	4604      	mov	r4, r0
 8009690:	2301      	movs	r3, #1
 8009692:	e7f0      	b.n	8009676 <_svfiprintf_r+0x192>
 8009694:	ab03      	add	r3, sp, #12
 8009696:	9300      	str	r3, [sp, #0]
 8009698:	462a      	mov	r2, r5
 800969a:	4b0e      	ldr	r3, [pc, #56]	@ (80096d4 <_svfiprintf_r+0x1f0>)
 800969c:	a904      	add	r1, sp, #16
 800969e:	4638      	mov	r0, r7
 80096a0:	f7fd fe82 	bl	80073a8 <_printf_float>
 80096a4:	1c42      	adds	r2, r0, #1
 80096a6:	4606      	mov	r6, r0
 80096a8:	d1d6      	bne.n	8009658 <_svfiprintf_r+0x174>
 80096aa:	89ab      	ldrh	r3, [r5, #12]
 80096ac:	065b      	lsls	r3, r3, #25
 80096ae:	f53f af2d 	bmi.w	800950c <_svfiprintf_r+0x28>
 80096b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80096b4:	e72c      	b.n	8009510 <_svfiprintf_r+0x2c>
 80096b6:	ab03      	add	r3, sp, #12
 80096b8:	9300      	str	r3, [sp, #0]
 80096ba:	462a      	mov	r2, r5
 80096bc:	4b05      	ldr	r3, [pc, #20]	@ (80096d4 <_svfiprintf_r+0x1f0>)
 80096be:	a904      	add	r1, sp, #16
 80096c0:	4638      	mov	r0, r7
 80096c2:	f7fe f909 	bl	80078d8 <_printf_i>
 80096c6:	e7ed      	b.n	80096a4 <_svfiprintf_r+0x1c0>
 80096c8:	0800a1e0 	.word	0x0800a1e0
 80096cc:	0800a1ea 	.word	0x0800a1ea
 80096d0:	080073a9 	.word	0x080073a9
 80096d4:	0800942d 	.word	0x0800942d
 80096d8:	0800a1e6 	.word	0x0800a1e6

080096dc <__sflush_r>:
 80096dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80096e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096e4:	0716      	lsls	r6, r2, #28
 80096e6:	4605      	mov	r5, r0
 80096e8:	460c      	mov	r4, r1
 80096ea:	d454      	bmi.n	8009796 <__sflush_r+0xba>
 80096ec:	684b      	ldr	r3, [r1, #4]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	dc02      	bgt.n	80096f8 <__sflush_r+0x1c>
 80096f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	dd48      	ble.n	800978a <__sflush_r+0xae>
 80096f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80096fa:	2e00      	cmp	r6, #0
 80096fc:	d045      	beq.n	800978a <__sflush_r+0xae>
 80096fe:	2300      	movs	r3, #0
 8009700:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009704:	682f      	ldr	r7, [r5, #0]
 8009706:	6a21      	ldr	r1, [r4, #32]
 8009708:	602b      	str	r3, [r5, #0]
 800970a:	d030      	beq.n	800976e <__sflush_r+0x92>
 800970c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800970e:	89a3      	ldrh	r3, [r4, #12]
 8009710:	0759      	lsls	r1, r3, #29
 8009712:	d505      	bpl.n	8009720 <__sflush_r+0x44>
 8009714:	6863      	ldr	r3, [r4, #4]
 8009716:	1ad2      	subs	r2, r2, r3
 8009718:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800971a:	b10b      	cbz	r3, 8009720 <__sflush_r+0x44>
 800971c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800971e:	1ad2      	subs	r2, r2, r3
 8009720:	2300      	movs	r3, #0
 8009722:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009724:	6a21      	ldr	r1, [r4, #32]
 8009726:	4628      	mov	r0, r5
 8009728:	47b0      	blx	r6
 800972a:	1c43      	adds	r3, r0, #1
 800972c:	89a3      	ldrh	r3, [r4, #12]
 800972e:	d106      	bne.n	800973e <__sflush_r+0x62>
 8009730:	6829      	ldr	r1, [r5, #0]
 8009732:	291d      	cmp	r1, #29
 8009734:	d82b      	bhi.n	800978e <__sflush_r+0xb2>
 8009736:	4a2a      	ldr	r2, [pc, #168]	@ (80097e0 <__sflush_r+0x104>)
 8009738:	410a      	asrs	r2, r1
 800973a:	07d6      	lsls	r6, r2, #31
 800973c:	d427      	bmi.n	800978e <__sflush_r+0xb2>
 800973e:	2200      	movs	r2, #0
 8009740:	6062      	str	r2, [r4, #4]
 8009742:	04d9      	lsls	r1, r3, #19
 8009744:	6922      	ldr	r2, [r4, #16]
 8009746:	6022      	str	r2, [r4, #0]
 8009748:	d504      	bpl.n	8009754 <__sflush_r+0x78>
 800974a:	1c42      	adds	r2, r0, #1
 800974c:	d101      	bne.n	8009752 <__sflush_r+0x76>
 800974e:	682b      	ldr	r3, [r5, #0]
 8009750:	b903      	cbnz	r3, 8009754 <__sflush_r+0x78>
 8009752:	6560      	str	r0, [r4, #84]	@ 0x54
 8009754:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009756:	602f      	str	r7, [r5, #0]
 8009758:	b1b9      	cbz	r1, 800978a <__sflush_r+0xae>
 800975a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800975e:	4299      	cmp	r1, r3
 8009760:	d002      	beq.n	8009768 <__sflush_r+0x8c>
 8009762:	4628      	mov	r0, r5
 8009764:	f7ff f9e0 	bl	8008b28 <_free_r>
 8009768:	2300      	movs	r3, #0
 800976a:	6363      	str	r3, [r4, #52]	@ 0x34
 800976c:	e00d      	b.n	800978a <__sflush_r+0xae>
 800976e:	2301      	movs	r3, #1
 8009770:	4628      	mov	r0, r5
 8009772:	47b0      	blx	r6
 8009774:	4602      	mov	r2, r0
 8009776:	1c50      	adds	r0, r2, #1
 8009778:	d1c9      	bne.n	800970e <__sflush_r+0x32>
 800977a:	682b      	ldr	r3, [r5, #0]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d0c6      	beq.n	800970e <__sflush_r+0x32>
 8009780:	2b1d      	cmp	r3, #29
 8009782:	d001      	beq.n	8009788 <__sflush_r+0xac>
 8009784:	2b16      	cmp	r3, #22
 8009786:	d11e      	bne.n	80097c6 <__sflush_r+0xea>
 8009788:	602f      	str	r7, [r5, #0]
 800978a:	2000      	movs	r0, #0
 800978c:	e022      	b.n	80097d4 <__sflush_r+0xf8>
 800978e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009792:	b21b      	sxth	r3, r3
 8009794:	e01b      	b.n	80097ce <__sflush_r+0xf2>
 8009796:	690f      	ldr	r7, [r1, #16]
 8009798:	2f00      	cmp	r7, #0
 800979a:	d0f6      	beq.n	800978a <__sflush_r+0xae>
 800979c:	0793      	lsls	r3, r2, #30
 800979e:	680e      	ldr	r6, [r1, #0]
 80097a0:	bf08      	it	eq
 80097a2:	694b      	ldreq	r3, [r1, #20]
 80097a4:	600f      	str	r7, [r1, #0]
 80097a6:	bf18      	it	ne
 80097a8:	2300      	movne	r3, #0
 80097aa:	eba6 0807 	sub.w	r8, r6, r7
 80097ae:	608b      	str	r3, [r1, #8]
 80097b0:	f1b8 0f00 	cmp.w	r8, #0
 80097b4:	dde9      	ble.n	800978a <__sflush_r+0xae>
 80097b6:	6a21      	ldr	r1, [r4, #32]
 80097b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80097ba:	4643      	mov	r3, r8
 80097bc:	463a      	mov	r2, r7
 80097be:	4628      	mov	r0, r5
 80097c0:	47b0      	blx	r6
 80097c2:	2800      	cmp	r0, #0
 80097c4:	dc08      	bgt.n	80097d8 <__sflush_r+0xfc>
 80097c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097ce:	81a3      	strh	r3, [r4, #12]
 80097d0:	f04f 30ff 	mov.w	r0, #4294967295
 80097d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097d8:	4407      	add	r7, r0
 80097da:	eba8 0800 	sub.w	r8, r8, r0
 80097de:	e7e7      	b.n	80097b0 <__sflush_r+0xd4>
 80097e0:	dfbffffe 	.word	0xdfbffffe

080097e4 <_fflush_r>:
 80097e4:	b538      	push	{r3, r4, r5, lr}
 80097e6:	690b      	ldr	r3, [r1, #16]
 80097e8:	4605      	mov	r5, r0
 80097ea:	460c      	mov	r4, r1
 80097ec:	b913      	cbnz	r3, 80097f4 <_fflush_r+0x10>
 80097ee:	2500      	movs	r5, #0
 80097f0:	4628      	mov	r0, r5
 80097f2:	bd38      	pop	{r3, r4, r5, pc}
 80097f4:	b118      	cbz	r0, 80097fe <_fflush_r+0x1a>
 80097f6:	6a03      	ldr	r3, [r0, #32]
 80097f8:	b90b      	cbnz	r3, 80097fe <_fflush_r+0x1a>
 80097fa:	f7fe fa19 	bl	8007c30 <__sinit>
 80097fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d0f3      	beq.n	80097ee <_fflush_r+0xa>
 8009806:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009808:	07d0      	lsls	r0, r2, #31
 800980a:	d404      	bmi.n	8009816 <_fflush_r+0x32>
 800980c:	0599      	lsls	r1, r3, #22
 800980e:	d402      	bmi.n	8009816 <_fflush_r+0x32>
 8009810:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009812:	f7fe fb38 	bl	8007e86 <__retarget_lock_acquire_recursive>
 8009816:	4628      	mov	r0, r5
 8009818:	4621      	mov	r1, r4
 800981a:	f7ff ff5f 	bl	80096dc <__sflush_r>
 800981e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009820:	07da      	lsls	r2, r3, #31
 8009822:	4605      	mov	r5, r0
 8009824:	d4e4      	bmi.n	80097f0 <_fflush_r+0xc>
 8009826:	89a3      	ldrh	r3, [r4, #12]
 8009828:	059b      	lsls	r3, r3, #22
 800982a:	d4e1      	bmi.n	80097f0 <_fflush_r+0xc>
 800982c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800982e:	f7fe fb2b 	bl	8007e88 <__retarget_lock_release_recursive>
 8009832:	e7dd      	b.n	80097f0 <_fflush_r+0xc>

08009834 <memmove>:
 8009834:	4288      	cmp	r0, r1
 8009836:	b510      	push	{r4, lr}
 8009838:	eb01 0402 	add.w	r4, r1, r2
 800983c:	d902      	bls.n	8009844 <memmove+0x10>
 800983e:	4284      	cmp	r4, r0
 8009840:	4623      	mov	r3, r4
 8009842:	d807      	bhi.n	8009854 <memmove+0x20>
 8009844:	1e43      	subs	r3, r0, #1
 8009846:	42a1      	cmp	r1, r4
 8009848:	d008      	beq.n	800985c <memmove+0x28>
 800984a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800984e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009852:	e7f8      	b.n	8009846 <memmove+0x12>
 8009854:	4402      	add	r2, r0
 8009856:	4601      	mov	r1, r0
 8009858:	428a      	cmp	r2, r1
 800985a:	d100      	bne.n	800985e <memmove+0x2a>
 800985c:	bd10      	pop	{r4, pc}
 800985e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009862:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009866:	e7f7      	b.n	8009858 <memmove+0x24>

08009868 <_sbrk_r>:
 8009868:	b538      	push	{r3, r4, r5, lr}
 800986a:	4d06      	ldr	r5, [pc, #24]	@ (8009884 <_sbrk_r+0x1c>)
 800986c:	2300      	movs	r3, #0
 800986e:	4604      	mov	r4, r0
 8009870:	4608      	mov	r0, r1
 8009872:	602b      	str	r3, [r5, #0]
 8009874:	f7f8 f8d8 	bl	8001a28 <_sbrk>
 8009878:	1c43      	adds	r3, r0, #1
 800987a:	d102      	bne.n	8009882 <_sbrk_r+0x1a>
 800987c:	682b      	ldr	r3, [r5, #0]
 800987e:	b103      	cbz	r3, 8009882 <_sbrk_r+0x1a>
 8009880:	6023      	str	r3, [r4, #0]
 8009882:	bd38      	pop	{r3, r4, r5, pc}
 8009884:	200004f4 	.word	0x200004f4

08009888 <memcpy>:
 8009888:	440a      	add	r2, r1
 800988a:	4291      	cmp	r1, r2
 800988c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009890:	d100      	bne.n	8009894 <memcpy+0xc>
 8009892:	4770      	bx	lr
 8009894:	b510      	push	{r4, lr}
 8009896:	f811 4b01 	ldrb.w	r4, [r1], #1
 800989a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800989e:	4291      	cmp	r1, r2
 80098a0:	d1f9      	bne.n	8009896 <memcpy+0xe>
 80098a2:	bd10      	pop	{r4, pc}

080098a4 <__assert_func>:
 80098a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80098a6:	4614      	mov	r4, r2
 80098a8:	461a      	mov	r2, r3
 80098aa:	4b09      	ldr	r3, [pc, #36]	@ (80098d0 <__assert_func+0x2c>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4605      	mov	r5, r0
 80098b0:	68d8      	ldr	r0, [r3, #12]
 80098b2:	b954      	cbnz	r4, 80098ca <__assert_func+0x26>
 80098b4:	4b07      	ldr	r3, [pc, #28]	@ (80098d4 <__assert_func+0x30>)
 80098b6:	461c      	mov	r4, r3
 80098b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80098bc:	9100      	str	r1, [sp, #0]
 80098be:	462b      	mov	r3, r5
 80098c0:	4905      	ldr	r1, [pc, #20]	@ (80098d8 <__assert_func+0x34>)
 80098c2:	f000 f86f 	bl	80099a4 <fiprintf>
 80098c6:	f000 f87f 	bl	80099c8 <abort>
 80098ca:	4b04      	ldr	r3, [pc, #16]	@ (80098dc <__assert_func+0x38>)
 80098cc:	e7f4      	b.n	80098b8 <__assert_func+0x14>
 80098ce:	bf00      	nop
 80098d0:	2000001c 	.word	0x2000001c
 80098d4:	0800a236 	.word	0x0800a236
 80098d8:	0800a208 	.word	0x0800a208
 80098dc:	0800a1fb 	.word	0x0800a1fb

080098e0 <_calloc_r>:
 80098e0:	b570      	push	{r4, r5, r6, lr}
 80098e2:	fba1 5402 	umull	r5, r4, r1, r2
 80098e6:	b93c      	cbnz	r4, 80098f8 <_calloc_r+0x18>
 80098e8:	4629      	mov	r1, r5
 80098ea:	f7ff f991 	bl	8008c10 <_malloc_r>
 80098ee:	4606      	mov	r6, r0
 80098f0:	b928      	cbnz	r0, 80098fe <_calloc_r+0x1e>
 80098f2:	2600      	movs	r6, #0
 80098f4:	4630      	mov	r0, r6
 80098f6:	bd70      	pop	{r4, r5, r6, pc}
 80098f8:	220c      	movs	r2, #12
 80098fa:	6002      	str	r2, [r0, #0]
 80098fc:	e7f9      	b.n	80098f2 <_calloc_r+0x12>
 80098fe:	462a      	mov	r2, r5
 8009900:	4621      	mov	r1, r4
 8009902:	f7fe fa42 	bl	8007d8a <memset>
 8009906:	e7f5      	b.n	80098f4 <_calloc_r+0x14>

08009908 <__ascii_mbtowc>:
 8009908:	b082      	sub	sp, #8
 800990a:	b901      	cbnz	r1, 800990e <__ascii_mbtowc+0x6>
 800990c:	a901      	add	r1, sp, #4
 800990e:	b142      	cbz	r2, 8009922 <__ascii_mbtowc+0x1a>
 8009910:	b14b      	cbz	r3, 8009926 <__ascii_mbtowc+0x1e>
 8009912:	7813      	ldrb	r3, [r2, #0]
 8009914:	600b      	str	r3, [r1, #0]
 8009916:	7812      	ldrb	r2, [r2, #0]
 8009918:	1e10      	subs	r0, r2, #0
 800991a:	bf18      	it	ne
 800991c:	2001      	movne	r0, #1
 800991e:	b002      	add	sp, #8
 8009920:	4770      	bx	lr
 8009922:	4610      	mov	r0, r2
 8009924:	e7fb      	b.n	800991e <__ascii_mbtowc+0x16>
 8009926:	f06f 0001 	mvn.w	r0, #1
 800992a:	e7f8      	b.n	800991e <__ascii_mbtowc+0x16>

0800992c <_realloc_r>:
 800992c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009930:	4680      	mov	r8, r0
 8009932:	4615      	mov	r5, r2
 8009934:	460c      	mov	r4, r1
 8009936:	b921      	cbnz	r1, 8009942 <_realloc_r+0x16>
 8009938:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800993c:	4611      	mov	r1, r2
 800993e:	f7ff b967 	b.w	8008c10 <_malloc_r>
 8009942:	b92a      	cbnz	r2, 8009950 <_realloc_r+0x24>
 8009944:	f7ff f8f0 	bl	8008b28 <_free_r>
 8009948:	2400      	movs	r4, #0
 800994a:	4620      	mov	r0, r4
 800994c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009950:	f000 f841 	bl	80099d6 <_malloc_usable_size_r>
 8009954:	4285      	cmp	r5, r0
 8009956:	4606      	mov	r6, r0
 8009958:	d802      	bhi.n	8009960 <_realloc_r+0x34>
 800995a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800995e:	d8f4      	bhi.n	800994a <_realloc_r+0x1e>
 8009960:	4629      	mov	r1, r5
 8009962:	4640      	mov	r0, r8
 8009964:	f7ff f954 	bl	8008c10 <_malloc_r>
 8009968:	4607      	mov	r7, r0
 800996a:	2800      	cmp	r0, #0
 800996c:	d0ec      	beq.n	8009948 <_realloc_r+0x1c>
 800996e:	42b5      	cmp	r5, r6
 8009970:	462a      	mov	r2, r5
 8009972:	4621      	mov	r1, r4
 8009974:	bf28      	it	cs
 8009976:	4632      	movcs	r2, r6
 8009978:	f7ff ff86 	bl	8009888 <memcpy>
 800997c:	4621      	mov	r1, r4
 800997e:	4640      	mov	r0, r8
 8009980:	f7ff f8d2 	bl	8008b28 <_free_r>
 8009984:	463c      	mov	r4, r7
 8009986:	e7e0      	b.n	800994a <_realloc_r+0x1e>

08009988 <__ascii_wctomb>:
 8009988:	4603      	mov	r3, r0
 800998a:	4608      	mov	r0, r1
 800998c:	b141      	cbz	r1, 80099a0 <__ascii_wctomb+0x18>
 800998e:	2aff      	cmp	r2, #255	@ 0xff
 8009990:	d904      	bls.n	800999c <__ascii_wctomb+0x14>
 8009992:	228a      	movs	r2, #138	@ 0x8a
 8009994:	601a      	str	r2, [r3, #0]
 8009996:	f04f 30ff 	mov.w	r0, #4294967295
 800999a:	4770      	bx	lr
 800999c:	700a      	strb	r2, [r1, #0]
 800999e:	2001      	movs	r0, #1
 80099a0:	4770      	bx	lr
	...

080099a4 <fiprintf>:
 80099a4:	b40e      	push	{r1, r2, r3}
 80099a6:	b503      	push	{r0, r1, lr}
 80099a8:	4601      	mov	r1, r0
 80099aa:	ab03      	add	r3, sp, #12
 80099ac:	4805      	ldr	r0, [pc, #20]	@ (80099c4 <fiprintf+0x20>)
 80099ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80099b2:	6800      	ldr	r0, [r0, #0]
 80099b4:	9301      	str	r3, [sp, #4]
 80099b6:	f000 f83f 	bl	8009a38 <_vfiprintf_r>
 80099ba:	b002      	add	sp, #8
 80099bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80099c0:	b003      	add	sp, #12
 80099c2:	4770      	bx	lr
 80099c4:	2000001c 	.word	0x2000001c

080099c8 <abort>:
 80099c8:	b508      	push	{r3, lr}
 80099ca:	2006      	movs	r0, #6
 80099cc:	f000 fa08 	bl	8009de0 <raise>
 80099d0:	2001      	movs	r0, #1
 80099d2:	f7f7 ffb1 	bl	8001938 <_exit>

080099d6 <_malloc_usable_size_r>:
 80099d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099da:	1f18      	subs	r0, r3, #4
 80099dc:	2b00      	cmp	r3, #0
 80099de:	bfbc      	itt	lt
 80099e0:	580b      	ldrlt	r3, [r1, r0]
 80099e2:	18c0      	addlt	r0, r0, r3
 80099e4:	4770      	bx	lr

080099e6 <__sfputc_r>:
 80099e6:	6893      	ldr	r3, [r2, #8]
 80099e8:	3b01      	subs	r3, #1
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	b410      	push	{r4}
 80099ee:	6093      	str	r3, [r2, #8]
 80099f0:	da08      	bge.n	8009a04 <__sfputc_r+0x1e>
 80099f2:	6994      	ldr	r4, [r2, #24]
 80099f4:	42a3      	cmp	r3, r4
 80099f6:	db01      	blt.n	80099fc <__sfputc_r+0x16>
 80099f8:	290a      	cmp	r1, #10
 80099fa:	d103      	bne.n	8009a04 <__sfputc_r+0x1e>
 80099fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a00:	f000 b932 	b.w	8009c68 <__swbuf_r>
 8009a04:	6813      	ldr	r3, [r2, #0]
 8009a06:	1c58      	adds	r0, r3, #1
 8009a08:	6010      	str	r0, [r2, #0]
 8009a0a:	7019      	strb	r1, [r3, #0]
 8009a0c:	4608      	mov	r0, r1
 8009a0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a12:	4770      	bx	lr

08009a14 <__sfputs_r>:
 8009a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a16:	4606      	mov	r6, r0
 8009a18:	460f      	mov	r7, r1
 8009a1a:	4614      	mov	r4, r2
 8009a1c:	18d5      	adds	r5, r2, r3
 8009a1e:	42ac      	cmp	r4, r5
 8009a20:	d101      	bne.n	8009a26 <__sfputs_r+0x12>
 8009a22:	2000      	movs	r0, #0
 8009a24:	e007      	b.n	8009a36 <__sfputs_r+0x22>
 8009a26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a2a:	463a      	mov	r2, r7
 8009a2c:	4630      	mov	r0, r6
 8009a2e:	f7ff ffda 	bl	80099e6 <__sfputc_r>
 8009a32:	1c43      	adds	r3, r0, #1
 8009a34:	d1f3      	bne.n	8009a1e <__sfputs_r+0xa>
 8009a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009a38 <_vfiprintf_r>:
 8009a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a3c:	460d      	mov	r5, r1
 8009a3e:	b09d      	sub	sp, #116	@ 0x74
 8009a40:	4614      	mov	r4, r2
 8009a42:	4698      	mov	r8, r3
 8009a44:	4606      	mov	r6, r0
 8009a46:	b118      	cbz	r0, 8009a50 <_vfiprintf_r+0x18>
 8009a48:	6a03      	ldr	r3, [r0, #32]
 8009a4a:	b90b      	cbnz	r3, 8009a50 <_vfiprintf_r+0x18>
 8009a4c:	f7fe f8f0 	bl	8007c30 <__sinit>
 8009a50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a52:	07d9      	lsls	r1, r3, #31
 8009a54:	d405      	bmi.n	8009a62 <_vfiprintf_r+0x2a>
 8009a56:	89ab      	ldrh	r3, [r5, #12]
 8009a58:	059a      	lsls	r2, r3, #22
 8009a5a:	d402      	bmi.n	8009a62 <_vfiprintf_r+0x2a>
 8009a5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a5e:	f7fe fa12 	bl	8007e86 <__retarget_lock_acquire_recursive>
 8009a62:	89ab      	ldrh	r3, [r5, #12]
 8009a64:	071b      	lsls	r3, r3, #28
 8009a66:	d501      	bpl.n	8009a6c <_vfiprintf_r+0x34>
 8009a68:	692b      	ldr	r3, [r5, #16]
 8009a6a:	b99b      	cbnz	r3, 8009a94 <_vfiprintf_r+0x5c>
 8009a6c:	4629      	mov	r1, r5
 8009a6e:	4630      	mov	r0, r6
 8009a70:	f000 f938 	bl	8009ce4 <__swsetup_r>
 8009a74:	b170      	cbz	r0, 8009a94 <_vfiprintf_r+0x5c>
 8009a76:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a78:	07dc      	lsls	r4, r3, #31
 8009a7a:	d504      	bpl.n	8009a86 <_vfiprintf_r+0x4e>
 8009a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a80:	b01d      	add	sp, #116	@ 0x74
 8009a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a86:	89ab      	ldrh	r3, [r5, #12]
 8009a88:	0598      	lsls	r0, r3, #22
 8009a8a:	d4f7      	bmi.n	8009a7c <_vfiprintf_r+0x44>
 8009a8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a8e:	f7fe f9fb 	bl	8007e88 <__retarget_lock_release_recursive>
 8009a92:	e7f3      	b.n	8009a7c <_vfiprintf_r+0x44>
 8009a94:	2300      	movs	r3, #0
 8009a96:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a98:	2320      	movs	r3, #32
 8009a9a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009a9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009aa2:	2330      	movs	r3, #48	@ 0x30
 8009aa4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009c54 <_vfiprintf_r+0x21c>
 8009aa8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009aac:	f04f 0901 	mov.w	r9, #1
 8009ab0:	4623      	mov	r3, r4
 8009ab2:	469a      	mov	sl, r3
 8009ab4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ab8:	b10a      	cbz	r2, 8009abe <_vfiprintf_r+0x86>
 8009aba:	2a25      	cmp	r2, #37	@ 0x25
 8009abc:	d1f9      	bne.n	8009ab2 <_vfiprintf_r+0x7a>
 8009abe:	ebba 0b04 	subs.w	fp, sl, r4
 8009ac2:	d00b      	beq.n	8009adc <_vfiprintf_r+0xa4>
 8009ac4:	465b      	mov	r3, fp
 8009ac6:	4622      	mov	r2, r4
 8009ac8:	4629      	mov	r1, r5
 8009aca:	4630      	mov	r0, r6
 8009acc:	f7ff ffa2 	bl	8009a14 <__sfputs_r>
 8009ad0:	3001      	adds	r0, #1
 8009ad2:	f000 80a7 	beq.w	8009c24 <_vfiprintf_r+0x1ec>
 8009ad6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ad8:	445a      	add	r2, fp
 8009ada:	9209      	str	r2, [sp, #36]	@ 0x24
 8009adc:	f89a 3000 	ldrb.w	r3, [sl]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	f000 809f 	beq.w	8009c24 <_vfiprintf_r+0x1ec>
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8009aec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009af0:	f10a 0a01 	add.w	sl, sl, #1
 8009af4:	9304      	str	r3, [sp, #16]
 8009af6:	9307      	str	r3, [sp, #28]
 8009af8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009afc:	931a      	str	r3, [sp, #104]	@ 0x68
 8009afe:	4654      	mov	r4, sl
 8009b00:	2205      	movs	r2, #5
 8009b02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b06:	4853      	ldr	r0, [pc, #332]	@ (8009c54 <_vfiprintf_r+0x21c>)
 8009b08:	f7f6 fb6a 	bl	80001e0 <memchr>
 8009b0c:	9a04      	ldr	r2, [sp, #16]
 8009b0e:	b9d8      	cbnz	r0, 8009b48 <_vfiprintf_r+0x110>
 8009b10:	06d1      	lsls	r1, r2, #27
 8009b12:	bf44      	itt	mi
 8009b14:	2320      	movmi	r3, #32
 8009b16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b1a:	0713      	lsls	r3, r2, #28
 8009b1c:	bf44      	itt	mi
 8009b1e:	232b      	movmi	r3, #43	@ 0x2b
 8009b20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b24:	f89a 3000 	ldrb.w	r3, [sl]
 8009b28:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b2a:	d015      	beq.n	8009b58 <_vfiprintf_r+0x120>
 8009b2c:	9a07      	ldr	r2, [sp, #28]
 8009b2e:	4654      	mov	r4, sl
 8009b30:	2000      	movs	r0, #0
 8009b32:	f04f 0c0a 	mov.w	ip, #10
 8009b36:	4621      	mov	r1, r4
 8009b38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b3c:	3b30      	subs	r3, #48	@ 0x30
 8009b3e:	2b09      	cmp	r3, #9
 8009b40:	d94b      	bls.n	8009bda <_vfiprintf_r+0x1a2>
 8009b42:	b1b0      	cbz	r0, 8009b72 <_vfiprintf_r+0x13a>
 8009b44:	9207      	str	r2, [sp, #28]
 8009b46:	e014      	b.n	8009b72 <_vfiprintf_r+0x13a>
 8009b48:	eba0 0308 	sub.w	r3, r0, r8
 8009b4c:	fa09 f303 	lsl.w	r3, r9, r3
 8009b50:	4313      	orrs	r3, r2
 8009b52:	9304      	str	r3, [sp, #16]
 8009b54:	46a2      	mov	sl, r4
 8009b56:	e7d2      	b.n	8009afe <_vfiprintf_r+0xc6>
 8009b58:	9b03      	ldr	r3, [sp, #12]
 8009b5a:	1d19      	adds	r1, r3, #4
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	9103      	str	r1, [sp, #12]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	bfbb      	ittet	lt
 8009b64:	425b      	neglt	r3, r3
 8009b66:	f042 0202 	orrlt.w	r2, r2, #2
 8009b6a:	9307      	strge	r3, [sp, #28]
 8009b6c:	9307      	strlt	r3, [sp, #28]
 8009b6e:	bfb8      	it	lt
 8009b70:	9204      	strlt	r2, [sp, #16]
 8009b72:	7823      	ldrb	r3, [r4, #0]
 8009b74:	2b2e      	cmp	r3, #46	@ 0x2e
 8009b76:	d10a      	bne.n	8009b8e <_vfiprintf_r+0x156>
 8009b78:	7863      	ldrb	r3, [r4, #1]
 8009b7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b7c:	d132      	bne.n	8009be4 <_vfiprintf_r+0x1ac>
 8009b7e:	9b03      	ldr	r3, [sp, #12]
 8009b80:	1d1a      	adds	r2, r3, #4
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	9203      	str	r2, [sp, #12]
 8009b86:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009b8a:	3402      	adds	r4, #2
 8009b8c:	9305      	str	r3, [sp, #20]
 8009b8e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009c64 <_vfiprintf_r+0x22c>
 8009b92:	7821      	ldrb	r1, [r4, #0]
 8009b94:	2203      	movs	r2, #3
 8009b96:	4650      	mov	r0, sl
 8009b98:	f7f6 fb22 	bl	80001e0 <memchr>
 8009b9c:	b138      	cbz	r0, 8009bae <_vfiprintf_r+0x176>
 8009b9e:	9b04      	ldr	r3, [sp, #16]
 8009ba0:	eba0 000a 	sub.w	r0, r0, sl
 8009ba4:	2240      	movs	r2, #64	@ 0x40
 8009ba6:	4082      	lsls	r2, r0
 8009ba8:	4313      	orrs	r3, r2
 8009baa:	3401      	adds	r4, #1
 8009bac:	9304      	str	r3, [sp, #16]
 8009bae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bb2:	4829      	ldr	r0, [pc, #164]	@ (8009c58 <_vfiprintf_r+0x220>)
 8009bb4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009bb8:	2206      	movs	r2, #6
 8009bba:	f7f6 fb11 	bl	80001e0 <memchr>
 8009bbe:	2800      	cmp	r0, #0
 8009bc0:	d03f      	beq.n	8009c42 <_vfiprintf_r+0x20a>
 8009bc2:	4b26      	ldr	r3, [pc, #152]	@ (8009c5c <_vfiprintf_r+0x224>)
 8009bc4:	bb1b      	cbnz	r3, 8009c0e <_vfiprintf_r+0x1d6>
 8009bc6:	9b03      	ldr	r3, [sp, #12]
 8009bc8:	3307      	adds	r3, #7
 8009bca:	f023 0307 	bic.w	r3, r3, #7
 8009bce:	3308      	adds	r3, #8
 8009bd0:	9303      	str	r3, [sp, #12]
 8009bd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bd4:	443b      	add	r3, r7
 8009bd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bd8:	e76a      	b.n	8009ab0 <_vfiprintf_r+0x78>
 8009bda:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bde:	460c      	mov	r4, r1
 8009be0:	2001      	movs	r0, #1
 8009be2:	e7a8      	b.n	8009b36 <_vfiprintf_r+0xfe>
 8009be4:	2300      	movs	r3, #0
 8009be6:	3401      	adds	r4, #1
 8009be8:	9305      	str	r3, [sp, #20]
 8009bea:	4619      	mov	r1, r3
 8009bec:	f04f 0c0a 	mov.w	ip, #10
 8009bf0:	4620      	mov	r0, r4
 8009bf2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bf6:	3a30      	subs	r2, #48	@ 0x30
 8009bf8:	2a09      	cmp	r2, #9
 8009bfa:	d903      	bls.n	8009c04 <_vfiprintf_r+0x1cc>
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d0c6      	beq.n	8009b8e <_vfiprintf_r+0x156>
 8009c00:	9105      	str	r1, [sp, #20]
 8009c02:	e7c4      	b.n	8009b8e <_vfiprintf_r+0x156>
 8009c04:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c08:	4604      	mov	r4, r0
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	e7f0      	b.n	8009bf0 <_vfiprintf_r+0x1b8>
 8009c0e:	ab03      	add	r3, sp, #12
 8009c10:	9300      	str	r3, [sp, #0]
 8009c12:	462a      	mov	r2, r5
 8009c14:	4b12      	ldr	r3, [pc, #72]	@ (8009c60 <_vfiprintf_r+0x228>)
 8009c16:	a904      	add	r1, sp, #16
 8009c18:	4630      	mov	r0, r6
 8009c1a:	f7fd fbc5 	bl	80073a8 <_printf_float>
 8009c1e:	4607      	mov	r7, r0
 8009c20:	1c78      	adds	r0, r7, #1
 8009c22:	d1d6      	bne.n	8009bd2 <_vfiprintf_r+0x19a>
 8009c24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c26:	07d9      	lsls	r1, r3, #31
 8009c28:	d405      	bmi.n	8009c36 <_vfiprintf_r+0x1fe>
 8009c2a:	89ab      	ldrh	r3, [r5, #12]
 8009c2c:	059a      	lsls	r2, r3, #22
 8009c2e:	d402      	bmi.n	8009c36 <_vfiprintf_r+0x1fe>
 8009c30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c32:	f7fe f929 	bl	8007e88 <__retarget_lock_release_recursive>
 8009c36:	89ab      	ldrh	r3, [r5, #12]
 8009c38:	065b      	lsls	r3, r3, #25
 8009c3a:	f53f af1f 	bmi.w	8009a7c <_vfiprintf_r+0x44>
 8009c3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009c40:	e71e      	b.n	8009a80 <_vfiprintf_r+0x48>
 8009c42:	ab03      	add	r3, sp, #12
 8009c44:	9300      	str	r3, [sp, #0]
 8009c46:	462a      	mov	r2, r5
 8009c48:	4b05      	ldr	r3, [pc, #20]	@ (8009c60 <_vfiprintf_r+0x228>)
 8009c4a:	a904      	add	r1, sp, #16
 8009c4c:	4630      	mov	r0, r6
 8009c4e:	f7fd fe43 	bl	80078d8 <_printf_i>
 8009c52:	e7e4      	b.n	8009c1e <_vfiprintf_r+0x1e6>
 8009c54:	0800a1e0 	.word	0x0800a1e0
 8009c58:	0800a1ea 	.word	0x0800a1ea
 8009c5c:	080073a9 	.word	0x080073a9
 8009c60:	08009a15 	.word	0x08009a15
 8009c64:	0800a1e6 	.word	0x0800a1e6

08009c68 <__swbuf_r>:
 8009c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c6a:	460e      	mov	r6, r1
 8009c6c:	4614      	mov	r4, r2
 8009c6e:	4605      	mov	r5, r0
 8009c70:	b118      	cbz	r0, 8009c7a <__swbuf_r+0x12>
 8009c72:	6a03      	ldr	r3, [r0, #32]
 8009c74:	b90b      	cbnz	r3, 8009c7a <__swbuf_r+0x12>
 8009c76:	f7fd ffdb 	bl	8007c30 <__sinit>
 8009c7a:	69a3      	ldr	r3, [r4, #24]
 8009c7c:	60a3      	str	r3, [r4, #8]
 8009c7e:	89a3      	ldrh	r3, [r4, #12]
 8009c80:	071a      	lsls	r2, r3, #28
 8009c82:	d501      	bpl.n	8009c88 <__swbuf_r+0x20>
 8009c84:	6923      	ldr	r3, [r4, #16]
 8009c86:	b943      	cbnz	r3, 8009c9a <__swbuf_r+0x32>
 8009c88:	4621      	mov	r1, r4
 8009c8a:	4628      	mov	r0, r5
 8009c8c:	f000 f82a 	bl	8009ce4 <__swsetup_r>
 8009c90:	b118      	cbz	r0, 8009c9a <__swbuf_r+0x32>
 8009c92:	f04f 37ff 	mov.w	r7, #4294967295
 8009c96:	4638      	mov	r0, r7
 8009c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c9a:	6823      	ldr	r3, [r4, #0]
 8009c9c:	6922      	ldr	r2, [r4, #16]
 8009c9e:	1a98      	subs	r0, r3, r2
 8009ca0:	6963      	ldr	r3, [r4, #20]
 8009ca2:	b2f6      	uxtb	r6, r6
 8009ca4:	4283      	cmp	r3, r0
 8009ca6:	4637      	mov	r7, r6
 8009ca8:	dc05      	bgt.n	8009cb6 <__swbuf_r+0x4e>
 8009caa:	4621      	mov	r1, r4
 8009cac:	4628      	mov	r0, r5
 8009cae:	f7ff fd99 	bl	80097e4 <_fflush_r>
 8009cb2:	2800      	cmp	r0, #0
 8009cb4:	d1ed      	bne.n	8009c92 <__swbuf_r+0x2a>
 8009cb6:	68a3      	ldr	r3, [r4, #8]
 8009cb8:	3b01      	subs	r3, #1
 8009cba:	60a3      	str	r3, [r4, #8]
 8009cbc:	6823      	ldr	r3, [r4, #0]
 8009cbe:	1c5a      	adds	r2, r3, #1
 8009cc0:	6022      	str	r2, [r4, #0]
 8009cc2:	701e      	strb	r6, [r3, #0]
 8009cc4:	6962      	ldr	r2, [r4, #20]
 8009cc6:	1c43      	adds	r3, r0, #1
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	d004      	beq.n	8009cd6 <__swbuf_r+0x6e>
 8009ccc:	89a3      	ldrh	r3, [r4, #12]
 8009cce:	07db      	lsls	r3, r3, #31
 8009cd0:	d5e1      	bpl.n	8009c96 <__swbuf_r+0x2e>
 8009cd2:	2e0a      	cmp	r6, #10
 8009cd4:	d1df      	bne.n	8009c96 <__swbuf_r+0x2e>
 8009cd6:	4621      	mov	r1, r4
 8009cd8:	4628      	mov	r0, r5
 8009cda:	f7ff fd83 	bl	80097e4 <_fflush_r>
 8009cde:	2800      	cmp	r0, #0
 8009ce0:	d0d9      	beq.n	8009c96 <__swbuf_r+0x2e>
 8009ce2:	e7d6      	b.n	8009c92 <__swbuf_r+0x2a>

08009ce4 <__swsetup_r>:
 8009ce4:	b538      	push	{r3, r4, r5, lr}
 8009ce6:	4b29      	ldr	r3, [pc, #164]	@ (8009d8c <__swsetup_r+0xa8>)
 8009ce8:	4605      	mov	r5, r0
 8009cea:	6818      	ldr	r0, [r3, #0]
 8009cec:	460c      	mov	r4, r1
 8009cee:	b118      	cbz	r0, 8009cf8 <__swsetup_r+0x14>
 8009cf0:	6a03      	ldr	r3, [r0, #32]
 8009cf2:	b90b      	cbnz	r3, 8009cf8 <__swsetup_r+0x14>
 8009cf4:	f7fd ff9c 	bl	8007c30 <__sinit>
 8009cf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cfc:	0719      	lsls	r1, r3, #28
 8009cfe:	d422      	bmi.n	8009d46 <__swsetup_r+0x62>
 8009d00:	06da      	lsls	r2, r3, #27
 8009d02:	d407      	bmi.n	8009d14 <__swsetup_r+0x30>
 8009d04:	2209      	movs	r2, #9
 8009d06:	602a      	str	r2, [r5, #0]
 8009d08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d0c:	81a3      	strh	r3, [r4, #12]
 8009d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8009d12:	e033      	b.n	8009d7c <__swsetup_r+0x98>
 8009d14:	0758      	lsls	r0, r3, #29
 8009d16:	d512      	bpl.n	8009d3e <__swsetup_r+0x5a>
 8009d18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009d1a:	b141      	cbz	r1, 8009d2e <__swsetup_r+0x4a>
 8009d1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009d20:	4299      	cmp	r1, r3
 8009d22:	d002      	beq.n	8009d2a <__swsetup_r+0x46>
 8009d24:	4628      	mov	r0, r5
 8009d26:	f7fe feff 	bl	8008b28 <_free_r>
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	6363      	str	r3, [r4, #52]	@ 0x34
 8009d2e:	89a3      	ldrh	r3, [r4, #12]
 8009d30:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009d34:	81a3      	strh	r3, [r4, #12]
 8009d36:	2300      	movs	r3, #0
 8009d38:	6063      	str	r3, [r4, #4]
 8009d3a:	6923      	ldr	r3, [r4, #16]
 8009d3c:	6023      	str	r3, [r4, #0]
 8009d3e:	89a3      	ldrh	r3, [r4, #12]
 8009d40:	f043 0308 	orr.w	r3, r3, #8
 8009d44:	81a3      	strh	r3, [r4, #12]
 8009d46:	6923      	ldr	r3, [r4, #16]
 8009d48:	b94b      	cbnz	r3, 8009d5e <__swsetup_r+0x7a>
 8009d4a:	89a3      	ldrh	r3, [r4, #12]
 8009d4c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009d50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d54:	d003      	beq.n	8009d5e <__swsetup_r+0x7a>
 8009d56:	4621      	mov	r1, r4
 8009d58:	4628      	mov	r0, r5
 8009d5a:	f000 f883 	bl	8009e64 <__smakebuf_r>
 8009d5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d62:	f013 0201 	ands.w	r2, r3, #1
 8009d66:	d00a      	beq.n	8009d7e <__swsetup_r+0x9a>
 8009d68:	2200      	movs	r2, #0
 8009d6a:	60a2      	str	r2, [r4, #8]
 8009d6c:	6962      	ldr	r2, [r4, #20]
 8009d6e:	4252      	negs	r2, r2
 8009d70:	61a2      	str	r2, [r4, #24]
 8009d72:	6922      	ldr	r2, [r4, #16]
 8009d74:	b942      	cbnz	r2, 8009d88 <__swsetup_r+0xa4>
 8009d76:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009d7a:	d1c5      	bne.n	8009d08 <__swsetup_r+0x24>
 8009d7c:	bd38      	pop	{r3, r4, r5, pc}
 8009d7e:	0799      	lsls	r1, r3, #30
 8009d80:	bf58      	it	pl
 8009d82:	6962      	ldrpl	r2, [r4, #20]
 8009d84:	60a2      	str	r2, [r4, #8]
 8009d86:	e7f4      	b.n	8009d72 <__swsetup_r+0x8e>
 8009d88:	2000      	movs	r0, #0
 8009d8a:	e7f7      	b.n	8009d7c <__swsetup_r+0x98>
 8009d8c:	2000001c 	.word	0x2000001c

08009d90 <_raise_r>:
 8009d90:	291f      	cmp	r1, #31
 8009d92:	b538      	push	{r3, r4, r5, lr}
 8009d94:	4605      	mov	r5, r0
 8009d96:	460c      	mov	r4, r1
 8009d98:	d904      	bls.n	8009da4 <_raise_r+0x14>
 8009d9a:	2316      	movs	r3, #22
 8009d9c:	6003      	str	r3, [r0, #0]
 8009d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8009da2:	bd38      	pop	{r3, r4, r5, pc}
 8009da4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009da6:	b112      	cbz	r2, 8009dae <_raise_r+0x1e>
 8009da8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009dac:	b94b      	cbnz	r3, 8009dc2 <_raise_r+0x32>
 8009dae:	4628      	mov	r0, r5
 8009db0:	f000 f830 	bl	8009e14 <_getpid_r>
 8009db4:	4622      	mov	r2, r4
 8009db6:	4601      	mov	r1, r0
 8009db8:	4628      	mov	r0, r5
 8009dba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009dbe:	f000 b817 	b.w	8009df0 <_kill_r>
 8009dc2:	2b01      	cmp	r3, #1
 8009dc4:	d00a      	beq.n	8009ddc <_raise_r+0x4c>
 8009dc6:	1c59      	adds	r1, r3, #1
 8009dc8:	d103      	bne.n	8009dd2 <_raise_r+0x42>
 8009dca:	2316      	movs	r3, #22
 8009dcc:	6003      	str	r3, [r0, #0]
 8009dce:	2001      	movs	r0, #1
 8009dd0:	e7e7      	b.n	8009da2 <_raise_r+0x12>
 8009dd2:	2100      	movs	r1, #0
 8009dd4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009dd8:	4620      	mov	r0, r4
 8009dda:	4798      	blx	r3
 8009ddc:	2000      	movs	r0, #0
 8009dde:	e7e0      	b.n	8009da2 <_raise_r+0x12>

08009de0 <raise>:
 8009de0:	4b02      	ldr	r3, [pc, #8]	@ (8009dec <raise+0xc>)
 8009de2:	4601      	mov	r1, r0
 8009de4:	6818      	ldr	r0, [r3, #0]
 8009de6:	f7ff bfd3 	b.w	8009d90 <_raise_r>
 8009dea:	bf00      	nop
 8009dec:	2000001c 	.word	0x2000001c

08009df0 <_kill_r>:
 8009df0:	b538      	push	{r3, r4, r5, lr}
 8009df2:	4d07      	ldr	r5, [pc, #28]	@ (8009e10 <_kill_r+0x20>)
 8009df4:	2300      	movs	r3, #0
 8009df6:	4604      	mov	r4, r0
 8009df8:	4608      	mov	r0, r1
 8009dfa:	4611      	mov	r1, r2
 8009dfc:	602b      	str	r3, [r5, #0]
 8009dfe:	f7f7 fd8b 	bl	8001918 <_kill>
 8009e02:	1c43      	adds	r3, r0, #1
 8009e04:	d102      	bne.n	8009e0c <_kill_r+0x1c>
 8009e06:	682b      	ldr	r3, [r5, #0]
 8009e08:	b103      	cbz	r3, 8009e0c <_kill_r+0x1c>
 8009e0a:	6023      	str	r3, [r4, #0]
 8009e0c:	bd38      	pop	{r3, r4, r5, pc}
 8009e0e:	bf00      	nop
 8009e10:	200004f4 	.word	0x200004f4

08009e14 <_getpid_r>:
 8009e14:	f7f7 bd78 	b.w	8001908 <_getpid>

08009e18 <__swhatbuf_r>:
 8009e18:	b570      	push	{r4, r5, r6, lr}
 8009e1a:	460c      	mov	r4, r1
 8009e1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e20:	2900      	cmp	r1, #0
 8009e22:	b096      	sub	sp, #88	@ 0x58
 8009e24:	4615      	mov	r5, r2
 8009e26:	461e      	mov	r6, r3
 8009e28:	da0d      	bge.n	8009e46 <__swhatbuf_r+0x2e>
 8009e2a:	89a3      	ldrh	r3, [r4, #12]
 8009e2c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009e30:	f04f 0100 	mov.w	r1, #0
 8009e34:	bf14      	ite	ne
 8009e36:	2340      	movne	r3, #64	@ 0x40
 8009e38:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009e3c:	2000      	movs	r0, #0
 8009e3e:	6031      	str	r1, [r6, #0]
 8009e40:	602b      	str	r3, [r5, #0]
 8009e42:	b016      	add	sp, #88	@ 0x58
 8009e44:	bd70      	pop	{r4, r5, r6, pc}
 8009e46:	466a      	mov	r2, sp
 8009e48:	f000 f848 	bl	8009edc <_fstat_r>
 8009e4c:	2800      	cmp	r0, #0
 8009e4e:	dbec      	blt.n	8009e2a <__swhatbuf_r+0x12>
 8009e50:	9901      	ldr	r1, [sp, #4]
 8009e52:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009e56:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009e5a:	4259      	negs	r1, r3
 8009e5c:	4159      	adcs	r1, r3
 8009e5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e62:	e7eb      	b.n	8009e3c <__swhatbuf_r+0x24>

08009e64 <__smakebuf_r>:
 8009e64:	898b      	ldrh	r3, [r1, #12]
 8009e66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e68:	079d      	lsls	r5, r3, #30
 8009e6a:	4606      	mov	r6, r0
 8009e6c:	460c      	mov	r4, r1
 8009e6e:	d507      	bpl.n	8009e80 <__smakebuf_r+0x1c>
 8009e70:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009e74:	6023      	str	r3, [r4, #0]
 8009e76:	6123      	str	r3, [r4, #16]
 8009e78:	2301      	movs	r3, #1
 8009e7a:	6163      	str	r3, [r4, #20]
 8009e7c:	b003      	add	sp, #12
 8009e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e80:	ab01      	add	r3, sp, #4
 8009e82:	466a      	mov	r2, sp
 8009e84:	f7ff ffc8 	bl	8009e18 <__swhatbuf_r>
 8009e88:	9f00      	ldr	r7, [sp, #0]
 8009e8a:	4605      	mov	r5, r0
 8009e8c:	4639      	mov	r1, r7
 8009e8e:	4630      	mov	r0, r6
 8009e90:	f7fe febe 	bl	8008c10 <_malloc_r>
 8009e94:	b948      	cbnz	r0, 8009eaa <__smakebuf_r+0x46>
 8009e96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e9a:	059a      	lsls	r2, r3, #22
 8009e9c:	d4ee      	bmi.n	8009e7c <__smakebuf_r+0x18>
 8009e9e:	f023 0303 	bic.w	r3, r3, #3
 8009ea2:	f043 0302 	orr.w	r3, r3, #2
 8009ea6:	81a3      	strh	r3, [r4, #12]
 8009ea8:	e7e2      	b.n	8009e70 <__smakebuf_r+0xc>
 8009eaa:	89a3      	ldrh	r3, [r4, #12]
 8009eac:	6020      	str	r0, [r4, #0]
 8009eae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009eb2:	81a3      	strh	r3, [r4, #12]
 8009eb4:	9b01      	ldr	r3, [sp, #4]
 8009eb6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009eba:	b15b      	cbz	r3, 8009ed4 <__smakebuf_r+0x70>
 8009ebc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ec0:	4630      	mov	r0, r6
 8009ec2:	f000 f81d 	bl	8009f00 <_isatty_r>
 8009ec6:	b128      	cbz	r0, 8009ed4 <__smakebuf_r+0x70>
 8009ec8:	89a3      	ldrh	r3, [r4, #12]
 8009eca:	f023 0303 	bic.w	r3, r3, #3
 8009ece:	f043 0301 	orr.w	r3, r3, #1
 8009ed2:	81a3      	strh	r3, [r4, #12]
 8009ed4:	89a3      	ldrh	r3, [r4, #12]
 8009ed6:	431d      	orrs	r5, r3
 8009ed8:	81a5      	strh	r5, [r4, #12]
 8009eda:	e7cf      	b.n	8009e7c <__smakebuf_r+0x18>

08009edc <_fstat_r>:
 8009edc:	b538      	push	{r3, r4, r5, lr}
 8009ede:	4d07      	ldr	r5, [pc, #28]	@ (8009efc <_fstat_r+0x20>)
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	4604      	mov	r4, r0
 8009ee4:	4608      	mov	r0, r1
 8009ee6:	4611      	mov	r1, r2
 8009ee8:	602b      	str	r3, [r5, #0]
 8009eea:	f7f7 fd75 	bl	80019d8 <_fstat>
 8009eee:	1c43      	adds	r3, r0, #1
 8009ef0:	d102      	bne.n	8009ef8 <_fstat_r+0x1c>
 8009ef2:	682b      	ldr	r3, [r5, #0]
 8009ef4:	b103      	cbz	r3, 8009ef8 <_fstat_r+0x1c>
 8009ef6:	6023      	str	r3, [r4, #0]
 8009ef8:	bd38      	pop	{r3, r4, r5, pc}
 8009efa:	bf00      	nop
 8009efc:	200004f4 	.word	0x200004f4

08009f00 <_isatty_r>:
 8009f00:	b538      	push	{r3, r4, r5, lr}
 8009f02:	4d06      	ldr	r5, [pc, #24]	@ (8009f1c <_isatty_r+0x1c>)
 8009f04:	2300      	movs	r3, #0
 8009f06:	4604      	mov	r4, r0
 8009f08:	4608      	mov	r0, r1
 8009f0a:	602b      	str	r3, [r5, #0]
 8009f0c:	f7f7 fd74 	bl	80019f8 <_isatty>
 8009f10:	1c43      	adds	r3, r0, #1
 8009f12:	d102      	bne.n	8009f1a <_isatty_r+0x1a>
 8009f14:	682b      	ldr	r3, [r5, #0]
 8009f16:	b103      	cbz	r3, 8009f1a <_isatty_r+0x1a>
 8009f18:	6023      	str	r3, [r4, #0]
 8009f1a:	bd38      	pop	{r3, r4, r5, pc}
 8009f1c:	200004f4 	.word	0x200004f4

08009f20 <_init>:
 8009f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f22:	bf00      	nop
 8009f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f26:	bc08      	pop	{r3}
 8009f28:	469e      	mov	lr, r3
 8009f2a:	4770      	bx	lr

08009f2c <_fini>:
 8009f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f2e:	bf00      	nop
 8009f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f32:	bc08      	pop	{r3}
 8009f34:	469e      	mov	lr, r3
 8009f36:	4770      	bx	lr
