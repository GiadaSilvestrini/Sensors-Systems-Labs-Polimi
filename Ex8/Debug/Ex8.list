
Ex8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c70  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  08009e10  08009e10  0000ae10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a200  0800a200  0000c1fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a200  0800a200  0000b200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a208  0800a208  0000c1fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a208  0800a208  0000b208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a20c  0800a20c  0000b20c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800a210  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d8  200001fc  0800a40c  0000c1fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005d4  0800a40c  0000c5d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c6e  00000000  00000000  0000c22c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000238d  00000000  00000000  0001ce9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001098  00000000  00000000  0001f228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d1b  00000000  00000000  000202c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b6c  00000000  00000000  00020fdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013784  00000000  00000000  00038b47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092043  00000000  00000000  0004c2cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000de30e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000589c  00000000  00000000  000de354  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000e3bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001fc 	.word	0x200001fc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009df8 	.word	0x08009df8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000200 	.word	0x20000200
 80001dc:	08009df8 	.word	0x08009df8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <DWT_Delay_Init>:

//Microsecond delay functions. Credit:
//https://deepbluembedded.com/stm32-delay-microsecond-millisecond-utility-dwt-delay-timer-delay/

uint32_t DWT_Delay_Init(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000f4c:	4b14      	ldr	r3, [pc, #80]	@ (8000fa0 <DWT_Delay_Init+0x58>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	4a13      	ldr	r2, [pc, #76]	@ (8000fa0 <DWT_Delay_Init+0x58>)
 8000f52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000f56:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000f58:	4b11      	ldr	r3, [pc, #68]	@ (8000fa0 <DWT_Delay_Init+0x58>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	4a10      	ldr	r2, [pc, #64]	@ (8000fa0 <DWT_Delay_Init+0x58>)
 8000f5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000f62:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000f64:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa4 <DWT_Delay_Init+0x5c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a0e      	ldr	r2, [pc, #56]	@ (8000fa4 <DWT_Delay_Init+0x5c>)
 8000f6a:	f023 0301 	bic.w	r3, r3, #1
 8000f6e:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000f70:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa4 <DWT_Delay_Init+0x5c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a0b      	ldr	r2, [pc, #44]	@ (8000fa4 <DWT_Delay_Init+0x5c>)
 8000f76:	f043 0301 	orr.w	r3, r3, #1
 8000f7a:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000f7c:	4b09      	ldr	r3, [pc, #36]	@ (8000fa4 <DWT_Delay_Init+0x5c>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000f82:	bf00      	nop
    __ASM volatile ("NOP");
 8000f84:	bf00      	nop
    __ASM volatile ("NOP");
 8000f86:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8000f88:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <DWT_Delay_Init+0x5c>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8000f90:	2300      	movs	r3, #0
 8000f92:	e000      	b.n	8000f96 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8000f94:	2301      	movs	r3, #1
    }
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000edf0 	.word	0xe000edf0
 8000fa4:	e0001000 	.word	0xe0001000

08000fa8 <DWT_Delay_us>:

void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8000fb0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff0 <DWT_Delay_us+0x48>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 8000fb6:	f003 ffd7 	bl	8004f68 <HAL_RCC_GetHCLKFreq>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000ff4 <DWT_Delay_us+0x4c>)
 8000fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc2:	0c9b      	lsrs	r3, r3, #18
 8000fc4:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	68ba      	ldr	r2, [r7, #8]
 8000fca:	fb02 f303 	mul.w	r3, r2, r3
 8000fce:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 8000fd0:	bf00      	nop
 8000fd2:	4b07      	ldr	r3, [pc, #28]	@ (8000ff0 <DWT_Delay_us+0x48>)
 8000fd4:	685a      	ldr	r2, [r3, #4]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	1ad2      	subs	r2, r2, r3
 8000fda:	6879      	ldr	r1, [r7, #4]
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	1acb      	subs	r3, r1, r3
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d3f6      	bcc.n	8000fd2 <DWT_Delay_us+0x2a>
}
 8000fe4:	bf00      	nop
 8000fe6:	bf00      	nop
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	e0001000 	.word	0xe0001000
 8000ff4:	431bde83 	.word	0x431bde83

08000ff8 <lcd_enable>:


//  LCD code


void lcd_enable(){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LCD_E, GPIO_PIN_RESET);
	//HAL_Delay(1);
	//DWT_Delay_us(50);
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_SET);  //pulse needs to be some clock cycles long, we are not in hurry right now
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	2102      	movs	r1, #2
 8001000:	4807      	ldr	r0, [pc, #28]	@ (8001020 <lcd_enable+0x28>)
 8001002:	f001 fd77 	bl	8002af4 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	DWT_Delay_us(50);
 8001006:	2032      	movs	r0, #50	@ 0x32
 8001008:	f7ff ffce 	bl	8000fa8 <DWT_Delay_us>
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_RESET);
 800100c:	2200      	movs	r2, #0
 800100e:	2102      	movs	r1, #2
 8001010:	4803      	ldr	r0, [pc, #12]	@ (8001020 <lcd_enable+0x28>)
 8001012:	f001 fd6f 	bl	8002af4 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	DWT_Delay_us(50);
 8001016:	2032      	movs	r0, #50	@ 0x32
 8001018:	f7ff ffc6 	bl	8000fa8 <DWT_Delay_us>
}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40020400 	.word	0x40020400

08001024 <lcd_write4>:

//  write a nibble (4 bits)
void lcd_write4(uint8_t word){
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(LCD_D4, (word & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET); //we AND the word and the mask. If it's true, we write GPIO_PIN_SET, else _RESET
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	f003 0301 	and.w	r3, r3, #1
 8001034:	b2db      	uxtb	r3, r3
 8001036:	461a      	mov	r2, r3
 8001038:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800103c:	4816      	ldr	r0, [pc, #88]	@ (8001098 <lcd_write4+0x74>)
 800103e:	f001 fd59 	bl	8002af4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_D5, (word & 0x02)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	105b      	asrs	r3, r3, #1
 8001046:	b2db      	uxtb	r3, r3
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	b2db      	uxtb	r3, r3
 800104e:	461a      	mov	r2, r3
 8001050:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001054:	4810      	ldr	r0, [pc, #64]	@ (8001098 <lcd_write4+0x74>)
 8001056:	f001 fd4d 	bl	8002af4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_D6, (word & 0x04)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	109b      	asrs	r3, r3, #2
 800105e:	b2db      	uxtb	r3, r3
 8001060:	f003 0301 	and.w	r3, r3, #1
 8001064:	b2db      	uxtb	r3, r3
 8001066:	461a      	mov	r2, r3
 8001068:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800106c:	480a      	ldr	r0, [pc, #40]	@ (8001098 <lcd_write4+0x74>)
 800106e:	f001 fd41 	bl	8002af4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_D7, (word & 0x08)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	10db      	asrs	r3, r3, #3
 8001076:	b2db      	uxtb	r3, r3
 8001078:	f003 0301 	and.w	r3, r3, #1
 800107c:	b2db      	uxtb	r3, r3
 800107e:	461a      	mov	r2, r3
 8001080:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001084:	4804      	ldr	r0, [pc, #16]	@ (8001098 <lcd_write4+0x74>)
 8001086:	f001 fd35 	bl	8002af4 <HAL_GPIO_WritePin>
		lcd_enable();  //pulse the E line
 800108a:	f7ff ffb5 	bl	8000ff8 <lcd_enable>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40020400 	.word	0x40020400

0800109c <lcd_write>:

//  write a byte (8 bits)
void lcd_write(uint8_t word){	
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
		lcd_write4(word>>4); //we first write the upper nibble
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	091b      	lsrs	r3, r3, #4
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ffb9 	bl	8001024 <lcd_write4>
		lcd_write4(word);    //and then the lower nibble
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ffb5 	bl	8001024 <lcd_write4>
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <lcd_command>:
#define DISPLAY_ON 0x04
#define LCD_SETDRAMADD 0x80
uint8_t _display_ctrl = 0;

//  send an instruction to the LCD
void lcd_command(uint8_t byte){
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET); //write an instruction -> RS must be low
 80010ce:	2200      	movs	r2, #0
 80010d0:	2104      	movs	r1, #4
 80010d2:	4805      	ldr	r0, [pc, #20]	@ (80010e8 <lcd_command+0x24>)
 80010d4:	f001 fd0e 	bl	8002af4 <HAL_GPIO_WritePin>
	lcd_write(byte);
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff ffde 	bl	800109c <lcd_write>
}
 80010e0:	bf00      	nop
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40020400 	.word	0x40020400

080010ec <lcd_clear>:

void lcd_clear(){
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
	lcd_command(LCD_CLEAR_COMMAND);
 80010f0:	2001      	movs	r0, #1
 80010f2:	f7ff ffe7 	bl	80010c4 <lcd_command>
	DWT_Delay_us(2000);
 80010f6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80010fa:	f7ff ff55 	bl	8000fa8 <DWT_Delay_us>
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <lcd_data>:

//  send data to the LCD
void lcd_data(uint8_t byte){
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_SET); //write data, not instruction -> RS must be high
 800110e:	2201      	movs	r2, #1
 8001110:	2104      	movs	r1, #4
 8001112:	4805      	ldr	r0, [pc, #20]	@ (8001128 <lcd_data+0x24>)
 8001114:	f001 fcee 	bl	8002af4 <HAL_GPIO_WritePin>
	lcd_write(byte);
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff ffbe 	bl	800109c <lcd_write>
}
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40020400 	.word	0x40020400

0800112c <setCursor>:

//  set (x, y) position of the cursor
void setCursor(uint8_t col, uint8_t row){
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	460a      	mov	r2, r1
 8001136:	71fb      	strb	r3, [r7, #7]
 8001138:	4613      	mov	r3, r2
 800113a:	71bb      	strb	r3, [r7, #6]
	if ((col+1)*(row+1)<80){
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	3301      	adds	r3, #1
 8001140:	79ba      	ldrb	r2, [r7, #6]
 8001142:	3201      	adds	r2, #1
 8001144:	fb02 f303 	mul.w	r3, r2, r3
 8001148:	2b4f      	cmp	r3, #79	@ 0x4f
 800114a:	dc10      	bgt.n	800116e <setCursor+0x42>
		lcd_command(LCD_SETDRAMADD|(col + 40*row)); //in the second row, address is offset by 40
 800114c:	79bb      	ldrb	r3, [r7, #6]
 800114e:	461a      	mov	r2, r3
 8001150:	0092      	lsls	r2, r2, #2
 8001152:	4413      	add	r3, r2
 8001154:	00db      	lsls	r3, r3, #3
 8001156:	b2da      	uxtb	r2, r3
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	4413      	add	r3, r2
 800115c:	b2db      	uxtb	r3, r3
 800115e:	b25b      	sxtb	r3, r3
 8001160:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001164:	b25b      	sxtb	r3, r3
 8001166:	b2db      	uxtb	r3, r3
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff ffab 	bl	80010c4 <lcd_command>
	}
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <lcd_print>:

//  print a string on the display, starting from the cursor position
void lcd_print(char string[]){  //pointer to first char in the string
 8001176:	b580      	push	{r7, lr}
 8001178:	b084      	sub	sp, #16
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
	
	int size = strlen(string);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff f87e 	bl	8000280 <strlen>
 8001184:	4603      	mov	r3, r0
 8001186:	60fb      	str	r3, [r7, #12]
	
	while (size--){
 8001188:	e006      	b.n	8001198 <lcd_print+0x22>
		lcd_data(*string++);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	1c5a      	adds	r2, r3, #1
 800118e:	607a      	str	r2, [r7, #4]
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff ffb6 	bl	8001104 <lcd_data>
	while (size--){
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	1e5a      	subs	r2, r3, #1
 800119c:	60fa      	str	r2, [r7, #12]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d1f3      	bne.n	800118a <lcd_print+0x14>
	}
}
 80011a2:	bf00      	nop
 80011a4:	bf00      	nop
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <lcd_println>:

void lcd_println(char string[], uint8_t row){
 80011ac:	b5b0      	push	{r4, r5, r7, lr}
 80011ae:	b088      	sub	sp, #32
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	460b      	mov	r3, r1
 80011b6:	70fb      	strb	r3, [r7, #3]
	
	char line[] = "                ";
 80011b8:	4b17      	ldr	r3, [pc, #92]	@ (8001218 <lcd_println+0x6c>)
 80011ba:	f107 0408 	add.w	r4, r7, #8
 80011be:	461d      	mov	r5, r3
 80011c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011c4:	682b      	ldr	r3, [r5, #0]
 80011c6:	7023      	strb	r3, [r4, #0]
	
	int size = strlen(string);
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f7ff f859 	bl	8000280 <strlen>
 80011ce:	4603      	mov	r3, r0
 80011d0:	61fb      	str	r3, [r7, #28]
	
	if (size > 16)
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	2b10      	cmp	r3, #16
 80011d6:	dd0c      	ble.n	80011f2 <lcd_println+0x46>
		size = 16;
 80011d8:	2310      	movs	r3, #16
 80011da:	61fb      	str	r3, [r7, #28]

	while (size--){
 80011dc:	e009      	b.n	80011f2 <lcd_println+0x46>
		line[size] = string[size];
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	4413      	add	r3, r2
 80011e4:	7819      	ldrb	r1, [r3, #0]
 80011e6:	f107 0208 	add.w	r2, r7, #8
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	4413      	add	r3, r2
 80011ee:	460a      	mov	r2, r1
 80011f0:	701a      	strb	r2, [r3, #0]
	while (size--){
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	1e5a      	subs	r2, r3, #1
 80011f6:	61fa      	str	r2, [r7, #28]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d1f0      	bne.n	80011de <lcd_println+0x32>
	}
	setCursor(0, row);
 80011fc:	78fb      	ldrb	r3, [r7, #3]
 80011fe:	4619      	mov	r1, r3
 8001200:	2000      	movs	r0, #0
 8001202:	f7ff ff93 	bl	800112c <setCursor>
	lcd_print(line);
 8001206:	f107 0308 	add.w	r3, r7, #8
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff ffb3 	bl	8001176 <lcd_print>
}
 8001210:	bf00      	nop
 8001212:	3720      	adds	r7, #32
 8001214:	46bd      	mov	sp, r7
 8001216:	bdb0      	pop	{r4, r5, r7, pc}
 8001218:	08009e10 	.word	0x08009e10

0800121c <writeCustomChar>:

void writeCustomChar(uint8_t address, uint8_t map[]){ //fill Character Generator RAM with custom symbols
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	6039      	str	r1, [r7, #0]
 8001226:	71fb      	strb	r3, [r7, #7]
	address &= 0x7; //address must be 0 to 7
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	71fb      	strb	r3, [r7, #7]
	lcd_command(0x40 | (address <<3)); //Set CGRAM address + address shifted left by 3 bits to start writing first byte
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	00db      	lsls	r3, r3, #3
 8001234:	b25b      	sxtb	r3, r3
 8001236:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800123a:	b25b      	sxtb	r3, r3
 800123c:	b2db      	uxtb	r3, r3
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff ff40 	bl	80010c4 <lcd_command>
	for (int i = 0; i<8; i++){
 8001244:	2300      	movs	r3, #0
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	e009      	b.n	800125e <writeCustomChar+0x42>
		lcd_data(map[i]);	
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	683a      	ldr	r2, [r7, #0]
 800124e:	4413      	add	r3, r2
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff ff56 	bl	8001104 <lcd_data>
	for (int i = 0; i<8; i++){
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	3301      	adds	r3, #1
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	2b07      	cmp	r3, #7
 8001262:	ddf2      	ble.n	800124a <writeCustomChar+0x2e>
	}
}
 8001264:	bf00      	nop
 8001266:	bf00      	nop
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
	...

08001270 <loadCustomChars>:

void loadCustomChars(){ //write all custom characters to the LCD module memory
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
	writeCustomChar(CHAR_1_5, CUSTOM_1_5);
 8001274:	490a      	ldr	r1, [pc, #40]	@ (80012a0 <loadCustomChars+0x30>)
 8001276:	2001      	movs	r0, #1
 8001278:	f7ff ffd0 	bl	800121c <writeCustomChar>
	writeCustomChar(CHAR_2_5, CUSTOM_2_5);
 800127c:	4909      	ldr	r1, [pc, #36]	@ (80012a4 <loadCustomChars+0x34>)
 800127e:	2002      	movs	r0, #2
 8001280:	f7ff ffcc 	bl	800121c <writeCustomChar>
	writeCustomChar(CHAR_3_5, CUSTOM_3_5);
 8001284:	4908      	ldr	r1, [pc, #32]	@ (80012a8 <loadCustomChars+0x38>)
 8001286:	2003      	movs	r0, #3
 8001288:	f7ff ffc8 	bl	800121c <writeCustomChar>
	writeCustomChar(CHAR_4_5, CUSTOM_4_5);
 800128c:	4907      	ldr	r1, [pc, #28]	@ (80012ac <loadCustomChars+0x3c>)
 800128e:	2004      	movs	r0, #4
 8001290:	f7ff ffc4 	bl	800121c <writeCustomChar>
	writeCustomChar(CHAR_5_5, CUSTOM_5_5);
 8001294:	4906      	ldr	r1, [pc, #24]	@ (80012b0 <loadCustomChars+0x40>)
 8001296:	2005      	movs	r0, #5
 8001298:	f7ff ffc0 	bl	800121c <writeCustomChar>
}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000000 	.word	0x20000000
 80012a4:	20000008 	.word	0x20000008
 80012a8:	20000010 	.word	0x20000010
 80012ac:	20000018 	.word	0x20000018
 80012b0:	20000020 	.word	0x20000020

080012b4 <lcd_initialize>:
		i++;
	}
	lcd_print(bar); //finally we write to the LCD
}

void lcd_initialize(){  //initialize WH1602C LCD module in 4 bit mode, page 25
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0

	HAL_Delay(50);  //wait >40 ms as per datasheet
 80012b8:	2032      	movs	r0, #50	@ 0x32
 80012ba:	f001 f8c1 	bl	8002440 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET);
 80012be:	2200      	movs	r2, #0
 80012c0:	2104      	movs	r1, #4
 80012c2:	4824      	ldr	r0, [pc, #144]	@ (8001354 <lcd_initialize+0xa0>)
 80012c4:	f001 fc16 	bl	8002af4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_RESET);
 80012c8:	2200      	movs	r2, #0
 80012ca:	2102      	movs	r1, #2
 80012cc:	4821      	ldr	r0, [pc, #132]	@ (8001354 <lcd_initialize+0xa0>)
 80012ce:	f001 fc11 	bl	8002af4 <HAL_GPIO_WritePin>
	//LCD WritePIn is hard-wired low as per board schematic
	DWT_Delay_Init();
 80012d2:	f7ff fe39 	bl	8000f48 <DWT_Delay_Init>
	//Magic reset sequence
	lcd_write4(0x03);  //4-bit mode
 80012d6:	2003      	movs	r0, #3
 80012d8:	f7ff fea4 	bl	8001024 <lcd_write4>
	HAL_Delay(5);
 80012dc:	2005      	movs	r0, #5
 80012de:	f001 f8af 	bl	8002440 <HAL_Delay>
	lcd_write4(0x03);
 80012e2:	2003      	movs	r0, #3
 80012e4:	f7ff fe9e 	bl	8001024 <lcd_write4>
	HAL_Delay(5);
 80012e8:	2005      	movs	r0, #5
 80012ea:	f001 f8a9 	bl	8002440 <HAL_Delay>
	lcd_write4(0x03);
 80012ee:	2003      	movs	r0, #3
 80012f0:	f7ff fe98 	bl	8001024 <lcd_write4>
	HAL_Delay(5);
 80012f4:	2005      	movs	r0, #5
 80012f6:	f001 f8a3 	bl	8002440 <HAL_Delay>
	lcd_write4(0x02); //Set 4-bit mode
 80012fa:	2002      	movs	r0, #2
 80012fc:	f7ff fe92 	bl	8001024 <lcd_write4>
	lcd_write(0x28); //4bit, 2 lines, 5x8 font
 8001300:	2028      	movs	r0, #40	@ 0x28
 8001302:	f7ff fecb 	bl	800109c <lcd_write>
	HAL_Delay(5);
 8001306:	2005      	movs	r0, #5
 8001308:	f001 f89a 	bl	8002440 <HAL_Delay>
	lcd_write(0x08); //display off;
 800130c:	2008      	movs	r0, #8
 800130e:	f7ff fec5 	bl	800109c <lcd_write>
	lcd_write(LCD_CLEAR_COMMAND); 			 //display clear;
 8001312:	2001      	movs	r0, #1
 8001314:	f7ff fec2 	bl	800109c <lcd_write>
	HAL_Delay(5);
 8001318:	2005      	movs	r0, #5
 800131a:	f001 f891 	bl	8002440 <HAL_Delay>
	lcd_write(0x06); //entry mode set: increment
 800131e:	2006      	movs	r0, #6
 8001320:	f7ff febc 	bl	800109c <lcd_write>
	HAL_GPIO_WritePin(LCD_BL_ON, GPIO_PIN_SET);  //enable backlight
 8001324:	2201      	movs	r2, #1
 8001326:	2110      	movs	r1, #16
 8001328:	480b      	ldr	r0, [pc, #44]	@ (8001358 <lcd_initialize+0xa4>)
 800132a:	f001 fbe3 	bl	8002af4 <HAL_GPIO_WritePin>
	//_display_ctrl = DISPLAY_COMMAND|DISPLAY_ON|CURSOR_ON|BLINK_ON;
	_display_ctrl = DISPLAY_COMMAND|DISPLAY_ON;
 800132e:	4b0b      	ldr	r3, [pc, #44]	@ (800135c <lcd_initialize+0xa8>)
 8001330:	220c      	movs	r2, #12
 8001332:	701a      	strb	r2, [r3, #0]
	lcd_write(_display_ctrl); //set as above
 8001334:	4b09      	ldr	r3, [pc, #36]	@ (800135c <lcd_initialize+0xa8>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff feaf 	bl	800109c <lcd_write>
	lcd_write(0x02); //go home
 800133e:	2002      	movs	r0, #2
 8001340:	f7ff feac 	bl	800109c <lcd_write>
	HAL_Delay(2);
 8001344:	2002      	movs	r0, #2
 8001346:	f001 f87b 	bl	8002440 <HAL_Delay>
	loadCustomChars();
 800134a:	f7ff ff91 	bl	8001270 <loadCustomChars>

}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40020400 	.word	0x40020400
 8001358:	40020000 	.word	0x40020000
 800135c:	20000218 	.word	0x20000218

08001360 <lcd_backlight_ON>:

void lcd_backlight_ON(){
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_BL_ON, GPIO_PIN_SET);
 8001364:	2201      	movs	r2, #1
 8001366:	2110      	movs	r1, #16
 8001368:	4802      	ldr	r0, [pc, #8]	@ (8001374 <lcd_backlight_ON+0x14>)
 800136a:	f001 fbc3 	bl	8002af4 <HAL_GPIO_WritePin>
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40020000 	.word	0x40020000

08001378 <HAL_I2C_MasterRxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08a      	sub	sp, #40	@ 0x28
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
	char message[32]={0};
 8001380:	2300      	movs	r3, #0
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	f107 030c 	add.w	r3, r7, #12
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
 8001394:	615a      	str	r2, [r3, #20]
 8001396:	619a      	str	r2, [r3, #24]
	MSB = temp[0] & 0x00FF;
 8001398:	4b14      	ldr	r3, [pc, #80]	@ (80013ec <HAL_I2C_MasterRxCpltCallback+0x74>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	b2da      	uxtb	r2, r3
 800139e:	4b14      	ldr	r3, [pc, #80]	@ (80013f0 <HAL_I2C_MasterRxCpltCallback+0x78>)
 80013a0:	701a      	strb	r2, [r3, #0]
	LSB = (temp[1] >> 5) & 0b00000111;
 80013a2:	4b12      	ldr	r3, [pc, #72]	@ (80013ec <HAL_I2C_MasterRxCpltCallback+0x74>)
 80013a4:	785b      	ldrb	r3, [r3, #1]
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	095b      	lsrs	r3, r3, #5
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	f003 0307 	and.w	r3, r3, #7
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	4b10      	ldr	r3, [pc, #64]	@ (80013f4 <HAL_I2C_MasterRxCpltCallback+0x7c>)
 80013b4:	701a      	strb	r2, [r3, #0]
	//sprintf(message, "%f\n", MSB+LSB);
	sprintf(message, "%d  %d\n", MSB, LSB);
 80013b6:	4b0e      	ldr	r3, [pc, #56]	@ (80013f0 <HAL_I2C_MasterRxCpltCallback+0x78>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	461a      	mov	r2, r3
 80013be:	4b0d      	ldr	r3, [pc, #52]	@ (80013f4 <HAL_I2C_MasterRxCpltCallback+0x7c>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	f107 0008 	add.w	r0, r7, #8
 80013c8:	490b      	ldr	r1, [pc, #44]	@ (80013f8 <HAL_I2C_MasterRxCpltCallback+0x80>)
 80013ca:	f006 fbe7 	bl	8007b9c <siprintf>
	HAL_UART_Transmit(&huart2, message, 32, 1000);
 80013ce:	f107 0108 	add.w	r1, r7, #8
 80013d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013d6:	2220      	movs	r2, #32
 80013d8:	4808      	ldr	r0, [pc, #32]	@ (80013fc <HAL_I2C_MasterRxCpltCallback+0x84>)
 80013da:	f004 fe8b 	bl	80060f4 <HAL_UART_Transmit>
	send=1;
 80013de:	4b08      	ldr	r3, [pc, #32]	@ (8001400 <HAL_I2C_MasterRxCpltCallback+0x88>)
 80013e0:	2201      	movs	r2, #1
 80013e2:	701a      	strb	r2, [r3, #0]
}
 80013e4:	bf00      	nop
 80013e6:	3728      	adds	r7, #40	@ 0x28
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000420 	.word	0x20000420
 80013f0:	2000042c 	.word	0x2000042c
 80013f4:	2000042d 	.word	0x2000042d
 80013f8:	08009e24 	.word	0x08009e24
 80013fc:	200003d8 	.word	0x200003d8
 8001400:	20000423 	.word	0x20000423

08001404 <continue_TX_callback>:

void continue_TX_callback() {
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
	uint16_t bit = *(uint16_t*)buffer;
 800140a:	4b16      	ldr	r3, [pc, #88]	@ (8001464 <continue_TX_callback+0x60>)
 800140c:	881b      	ldrh	r3, [r3, #0]
 800140e:	80fb      	strh	r3, [r7, #6]
	bit = (bit >> my_index) & 1;
 8001410:	88fa      	ldrh	r2, [r7, #6]
 8001412:	4b15      	ldr	r3, [pc, #84]	@ (8001468 <continue_TX_callback+0x64>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	fa42 f303 	asr.w	r3, r2, r3
 800141a:	b29b      	uxth	r3, r3
 800141c:	f003 0301 	and.w	r3, r3, #1
 8001420:	80fb      	strh	r3, [r7, #6]
	my_index++;
 8001422:	4b11      	ldr	r3, [pc, #68]	@ (8001468 <continue_TX_callback+0x64>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	3301      	adds	r3, #1
 8001428:	4a0f      	ldr	r2, [pc, #60]	@ (8001468 <continue_TX_callback+0x64>)
 800142a:	6013      	str	r3, [r2, #0]

	if (bit) {
 800142c:	88fb      	ldrh	r3, [r7, #6]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d004      	beq.n	800143c <continue_TX_callback+0x38>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8001432:	2108      	movs	r1, #8
 8001434:	480d      	ldr	r0, [pc, #52]	@ (800146c <continue_TX_callback+0x68>)
 8001436:	f003 ffad 	bl	8005394 <HAL_TIM_PWM_Stop>
 800143a:	e003      	b.n	8001444 <continue_TX_callback+0x40>
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
	} else {
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800143c:	2108      	movs	r1, #8
 800143e:	480b      	ldr	r0, [pc, #44]	@ (800146c <continue_TX_callback+0x68>)
 8001440:	f003 fef8 	bl	8005234 <HAL_TIM_PWM_Start>
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
	}

	if (my_index > 9) {
 8001444:	4b08      	ldr	r3, [pc, #32]	@ (8001468 <continue_TX_callback+0x64>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2b09      	cmp	r3, #9
 800144a:	dd07      	ble.n	800145c <continue_TX_callback+0x58>
		HAL_TIM_Base_Stop(&htim1);
 800144c:	4808      	ldr	r0, [pc, #32]	@ (8001470 <continue_TX_callback+0x6c>)
 800144e:	f003 fe0e 	bl	800506e <HAL_TIM_Base_Stop>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8001452:	2200      	movs	r2, #0
 8001454:	2120      	movs	r1, #32
 8001456:	4807      	ldr	r0, [pc, #28]	@ (8001474 <continue_TX_callback+0x70>)
 8001458:	f001 fb4c 	bl	8002af4 <HAL_GPIO_WritePin>
	}
}
 800145c:	bf00      	nop
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20000424 	.word	0x20000424
 8001468:	20000428 	.word	0x20000428
 800146c:	200002b8 	.word	0x200002b8
 8001470:	20000270 	.word	0x20000270
 8001474:	40020000 	.word	0x40020000

08001478 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
	if (htim == &htim3) temp_flag=1;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	4a08      	ldr	r2, [pc, #32]	@ (80014a4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d103      	bne.n	8001490 <HAL_TIM_PeriodElapsedCallback+0x18>
 8001488:	4b07      	ldr	r3, [pc, #28]	@ (80014a8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800148a:	2201      	movs	r2, #1
 800148c:	701a      	strb	r2, [r3, #0]
	else if (htim == &htim1) continue_TX_callback();
}
 800148e:	e005      	b.n	800149c <HAL_TIM_PeriodElapsedCallback+0x24>
	else if (htim == &htim1) continue_TX_callback();
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4a06      	ldr	r2, [pc, #24]	@ (80014ac <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d101      	bne.n	800149c <HAL_TIM_PeriodElapsedCallback+0x24>
 8001498:	f7ff ffb4 	bl	8001404 <continue_TX_callback>
}
 800149c:	bf00      	nop
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	20000300 	.word	0x20000300
 80014a8:	20000422 	.word	0x20000422
 80014ac:	20000270 	.word	0x20000270

080014b0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 80014b0:	b5b0      	push	{r4, r5, r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	if (huart != &huart1) return;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4a2e      	ldr	r2, [pc, #184]	@ (8001574 <HAL_UART_RxCpltCallback+0xc4>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d155      	bne.n	800156c <HAL_UART_RxCpltCallback+0xbc>

	//removing the parity bit (non lo faccio se ho messo dall'interfaccia grafica include
	//parity nel protocollo uart)
	//RX_byte = RX_byte & 0b01111111;
	int UART_length = snprintf(stringa, sizeof(stringa), "received: %d\n\r", RX_byte);
 80014c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001578 <HAL_UART_RxCpltCallback+0xc8>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	4a2d      	ldr	r2, [pc, #180]	@ (800157c <HAL_UART_RxCpltCallback+0xcc>)
 80014c8:	2140      	movs	r1, #64	@ 0x40
 80014ca:	482d      	ldr	r0, [pc, #180]	@ (8001580 <HAL_UART_RxCpltCallback+0xd0>)
 80014cc:	f006 fb32 	bl	8007b34 <sniprintf>
 80014d0:	60f8      	str	r0, [r7, #12]
	HAL_UART_Transmit(&huart2, (uint8_t *)stringa, UART_length, 100);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	b29a      	uxth	r2, r3
 80014d6:	2364      	movs	r3, #100	@ 0x64
 80014d8:	4929      	ldr	r1, [pc, #164]	@ (8001580 <HAL_UART_RxCpltCallback+0xd0>)
 80014da:	482a      	ldr	r0, [pc, #168]	@ (8001584 <HAL_UART_RxCpltCallback+0xd4>)
 80014dc:	f004 fe0a 	bl	80060f4 <HAL_UART_Transmit>

	if((RX_byte & 0b01000000) == 0)// we manually set, before the transmission, the seventh bit to 0 if we were sending MSB, and 1 if we were sending LSB
 80014e0:	4b25      	ldr	r3, [pc, #148]	@ (8001578 <HAL_UART_RxCpltCallback+0xc8>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d10a      	bne.n	8001504 <HAL_UART_RxCpltCallback+0x54>
	{

		value = RX_byte;
 80014ee:	4b22      	ldr	r3, [pc, #136]	@ (8001578 <HAL_UART_RxCpltCallback+0xc8>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	ee07 3a90 	vmov	s15, r3
 80014f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014fc:	4b22      	ldr	r3, [pc, #136]	@ (8001588 <HAL_UART_RxCpltCallback+0xd8>)
 80014fe:	edc3 7a00 	vstr	s15, [r3]
 8001502:	e02d      	b.n	8001560 <HAL_UART_RxCpltCallback+0xb0>
	}
	else
	{
		RX_byte = RX_byte & 0b00111111;
 8001504:	4b1c      	ldr	r3, [pc, #112]	@ (8001578 <HAL_UART_RxCpltCallback+0xc8>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	b2db      	uxtb	r3, r3
 800150a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800150e:	b2da      	uxtb	r2, r3
 8001510:	4b19      	ldr	r3, [pc, #100]	@ (8001578 <HAL_UART_RxCpltCallback+0xc8>)
 8001512:	701a      	strb	r2, [r3, #0]
		value = value + (RX_byte & 0b001)*0.5;
 8001514:	4b1c      	ldr	r3, [pc, #112]	@ (8001588 <HAL_UART_RxCpltCallback+0xd8>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff f81d 	bl	8000558 <__aeabi_f2d>
 800151e:	4604      	mov	r4, r0
 8001520:	460d      	mov	r5, r1
 8001522:	4b15      	ldr	r3, [pc, #84]	@ (8001578 <HAL_UART_RxCpltCallback+0xc8>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	b2db      	uxtb	r3, r3
 8001528:	f003 0301 	and.w	r3, r3, #1
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff f801 	bl	8000534 <__aeabi_i2d>
 8001532:	f04f 0200 	mov.w	r2, #0
 8001536:	4b15      	ldr	r3, [pc, #84]	@ (800158c <HAL_UART_RxCpltCallback+0xdc>)
 8001538:	f7ff f866 	bl	8000608 <__aeabi_dmul>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	4620      	mov	r0, r4
 8001542:	4629      	mov	r1, r5
 8001544:	f7fe feaa 	bl	800029c <__adddf3>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	4610      	mov	r0, r2
 800154e:	4619      	mov	r1, r3
 8001550:	f7ff fb32 	bl	8000bb8 <__aeabi_d2f>
 8001554:	4603      	mov	r3, r0
 8001556:	4a0c      	ldr	r2, [pc, #48]	@ (8001588 <HAL_UART_RxCpltCallback+0xd8>)
 8001558:	6013      	str	r3, [r2, #0]
		new_temp = 1;
 800155a:	4b0d      	ldr	r3, [pc, #52]	@ (8001590 <HAL_UART_RxCpltCallback+0xe0>)
 800155c:	2201      	movs	r2, #1
 800155e:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart1, (uint8_t *)&RX_byte, 1);
 8001560:	2201      	movs	r2, #1
 8001562:	4905      	ldr	r1, [pc, #20]	@ (8001578 <HAL_UART_RxCpltCallback+0xc8>)
 8001564:	4803      	ldr	r0, [pc, #12]	@ (8001574 <HAL_UART_RxCpltCallback+0xc4>)
 8001566:	f004 fe50 	bl	800620a <HAL_UART_Receive_IT>
 800156a:	e000      	b.n	800156e <HAL_UART_RxCpltCallback+0xbe>
	if (huart != &huart1) return;
 800156c:	bf00      	nop
}
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bdb0      	pop	{r4, r5, r7, pc}
 8001574:	20000390 	.word	0x20000390
 8001578:	20000470 	.word	0x20000470
 800157c:	08009e2c 	.word	0x08009e2c
 8001580:	20000430 	.word	0x20000430
 8001584:	200003d8 	.word	0x200003d8
 8001588:	20000474 	.word	0x20000474
 800158c:	3fe00000 	.word	0x3fe00000
 8001590:	2000047c 	.word	0x2000047c

08001594 <transmit_byte>:

void transmit_byte(uint8_t data) {
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 800159e:	2201      	movs	r2, #1
 80015a0:	2120      	movs	r1, #32
 80015a2:	4818      	ldr	r0, [pc, #96]	@ (8001604 <transmit_byte+0x70>)
 80015a4:	f001 faa6 	bl	8002af4 <HAL_GPIO_WritePin>

	buffer[0] = (data << 1); // 0000001P xxxxxxx0
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	4b16      	ldr	r3, [pc, #88]	@ (8001608 <transmit_byte+0x74>)
 80015b0:	701a      	strb	r2, [r3, #0]

	uint8_t parity = 0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < 7; i++) {
 80015b6:	2300      	movs	r3, #0
 80015b8:	60bb      	str	r3, [r7, #8]
 80015ba:	e00f      	b.n	80015dc <transmit_byte+0x48>
		parity ^= (data >> i) & 1; // odd parity
 80015bc:	79fa      	ldrb	r2, [r7, #7]
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	fa42 f303 	asr.w	r3, r2, r3
 80015c4:	b25b      	sxtb	r3, r3
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	b25a      	sxtb	r2, r3
 80015cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015d0:	4053      	eors	r3, r2
 80015d2:	b25b      	sxtb	r3, r3
 80015d4:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < 7; i++) {
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	3301      	adds	r3, #1
 80015da:	60bb      	str	r3, [r7, #8]
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	2b06      	cmp	r3, #6
 80015e0:	ddec      	ble.n	80015bc <transmit_byte+0x28>
	}

	buffer[1] = 0b10 | parity;
 80015e2:	7bfb      	ldrb	r3, [r7, #15]
 80015e4:	f043 0302 	orr.w	r3, r3, #2
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	4b07      	ldr	r3, [pc, #28]	@ (8001608 <transmit_byte+0x74>)
 80015ec:	705a      	strb	r2, [r3, #1]

	my_index = 0;
 80015ee:	4b07      	ldr	r3, [pc, #28]	@ (800160c <transmit_byte+0x78>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]

	HAL_TIM_Base_Start_IT(&htim1);
 80015f4:	4806      	ldr	r0, [pc, #24]	@ (8001610 <transmit_byte+0x7c>)
 80015f6:	f003 fd61 	bl	80050bc <HAL_TIM_Base_Start_IT>
}
 80015fa:	bf00      	nop
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40020000 	.word	0x40020000
 8001608:	20000424 	.word	0x20000424
 800160c:	20000428 	.word	0x20000428
 8001610:	20000270 	.word	0x20000270

08001614 <show_new_temp>:

void show_new_temp(float val)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af02      	add	r7, sp, #8
 800161a:	ed87 0a01 	vstr	s0, [r7, #4]
	snprintf(stringa, sizeof(stringa), "Temperature:", val);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7fe ff9a 	bl	8000558 <__aeabi_f2d>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	e9cd 2300 	strd	r2, r3, [sp]
 800162c:	4a0e      	ldr	r2, [pc, #56]	@ (8001668 <show_new_temp+0x54>)
 800162e:	2140      	movs	r1, #64	@ 0x40
 8001630:	480e      	ldr	r0, [pc, #56]	@ (800166c <show_new_temp+0x58>)
 8001632:	f006 fa7f 	bl	8007b34 <sniprintf>
	lcd_println(stringa, 0);
 8001636:	2100      	movs	r1, #0
 8001638:	480c      	ldr	r0, [pc, #48]	@ (800166c <show_new_temp+0x58>)
 800163a:	f7ff fdb7 	bl	80011ac <lcd_println>
	snprintf(stringa, sizeof(stringa), "%0.3f", val);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7fe ff8a 	bl	8000558 <__aeabi_f2d>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	e9cd 2300 	strd	r2, r3, [sp]
 800164c:	4a08      	ldr	r2, [pc, #32]	@ (8001670 <show_new_temp+0x5c>)
 800164e:	2140      	movs	r1, #64	@ 0x40
 8001650:	4806      	ldr	r0, [pc, #24]	@ (800166c <show_new_temp+0x58>)
 8001652:	f006 fa6f 	bl	8007b34 <sniprintf>
		lcd_println(stringa, 1);
 8001656:	2101      	movs	r1, #1
 8001658:	4804      	ldr	r0, [pc, #16]	@ (800166c <show_new_temp+0x58>)
 800165a:	f7ff fda7 	bl	80011ac <lcd_println>
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	08009e3c 	.word	0x08009e3c
 800166c:	20000430 	.word	0x20000430
 8001670:	08009e4c 	.word	0x08009e4c

08001674 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800167a:	f000 fe6f 	bl	800235c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800167e:	f000 f8b3 	bl	80017e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001682:	f000 fad5 	bl	8001c30 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001686:	f000 faa9 	bl	8001bdc <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800168a:	f000 fa0b 	bl	8001aa4 <MX_TIM3_Init>
  MX_TIM10_Init();
 800168e:	f000 fa57 	bl	8001b40 <MX_TIM10_Init>
  MX_USART1_UART_Init();
 8001692:	f000 fa79 	bl	8001b88 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001696:	f000 f941 	bl	800191c <MX_TIM1_Init>
  MX_TIM2_Init();
 800169a:	f000 f98f 	bl	80019bc <MX_TIM2_Init>
  MX_I2C1_Init();
 800169e:	f000 f90f 	bl	80018c0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  int UART_length = snprintf(stringa, sizeof(stringa), "--- INIT ---\n\r");
 80016a2:	4a41      	ldr	r2, [pc, #260]	@ (80017a8 <main+0x134>)
 80016a4:	2140      	movs	r1, #64	@ 0x40
 80016a6:	4841      	ldr	r0, [pc, #260]	@ (80017ac <main+0x138>)
 80016a8:	f006 fa44 	bl	8007b34 <sniprintf>
 80016ac:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)stringa, UART_length, 100);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	b29a      	uxth	r2, r3
 80016b2:	2364      	movs	r3, #100	@ 0x64
 80016b4:	493d      	ldr	r1, [pc, #244]	@ (80017ac <main+0x138>)
 80016b6:	483e      	ldr	r0, [pc, #248]	@ (80017b0 <main+0x13c>)
 80016b8:	f004 fd1c 	bl	80060f4 <HAL_UART_Transmit>
  lcd_initialize();
 80016bc:	f7ff fdfa 	bl	80012b4 <lcd_initialize>
  lcd_clear();
 80016c0:	f7ff fd14 	bl	80010ec <lcd_clear>
  lcd_backlight_ON();
 80016c4:	f7ff fe4c 	bl	8001360 <lcd_backlight_ON>

  HAL_UART_Receive_IT(&huart1, (uint8_t *)&RX_byte, 1);
 80016c8:	2201      	movs	r2, #1
 80016ca:	493a      	ldr	r1, [pc, #232]	@ (80017b4 <main+0x140>)
 80016cc:	483a      	ldr	r0, [pc, #232]	@ (80017b8 <main+0x144>)
 80016ce:	f004 fd9c 	bl	800620a <HAL_UART_Receive_IT>

  HAL_TIM_Base_Start_IT(&htim3);
 80016d2:	483a      	ldr	r0, [pc, #232]	@ (80017bc <main+0x148>)
 80016d4:	f003 fcf2 	bl	80050bc <HAL_TIM_Base_Start_IT>
  //HAL_TIM_Base_Start_IT(&htim10);
  if(HAL_I2C_Master_Receive_IT(&hi2c1, I2CADDRESS << 1, temp, 2) != HAL_OK)
 80016d8:	2302      	movs	r3, #2
 80016da:	4a39      	ldr	r2, [pc, #228]	@ (80017c0 <main+0x14c>)
 80016dc:	2190      	movs	r1, #144	@ 0x90
 80016de:	4839      	ldr	r0, [pc, #228]	@ (80017c4 <main+0x150>)
 80016e0:	f001 fb7c 	bl	8002ddc <HAL_I2C_Master_Receive_IT>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d006      	beq.n	80016f8 <main+0x84>
  			  HAL_UART_Transmit(&huart2, "ERROR IN RECEIVING", 32, 1000);
 80016ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016ee:	2220      	movs	r2, #32
 80016f0:	4935      	ldr	r1, [pc, #212]	@ (80017c8 <main+0x154>)
 80016f2:	482f      	ldr	r0, [pc, #188]	@ (80017b0 <main+0x13c>)
 80016f4:	f004 fcfe 	bl	80060f4 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(temp_flag)
 80016f8:	4b34      	ldr	r3, [pc, #208]	@ (80017cc <main+0x158>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d012      	beq.n	8001728 <main+0xb4>
	  {
		  temp_flag = 0;
 8001702:	4b32      	ldr	r3, [pc, #200]	@ (80017cc <main+0x158>)
 8001704:	2200      	movs	r2, #0
 8001706:	701a      	strb	r2, [r3, #0]
		  if(HAL_I2C_Master_Receive_IT(&hi2c1, I2CADDRESS << 1, temp, 2) != HAL_OK)
 8001708:	2302      	movs	r3, #2
 800170a:	4a2d      	ldr	r2, [pc, #180]	@ (80017c0 <main+0x14c>)
 800170c:	2190      	movs	r1, #144	@ 0x90
 800170e:	482d      	ldr	r0, [pc, #180]	@ (80017c4 <main+0x150>)
 8001710:	f001 fb64 	bl	8002ddc <HAL_I2C_Master_Receive_IT>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d006      	beq.n	8001728 <main+0xb4>
			  HAL_UART_Transmit(&huart2, "ERROR IN RECEIVING", 32, 1000);
 800171a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800171e:	2220      	movs	r2, #32
 8001720:	4929      	ldr	r1, [pc, #164]	@ (80017c8 <main+0x154>)
 8001722:	4823      	ldr	r0, [pc, #140]	@ (80017b0 <main+0x13c>)
 8001724:	f004 fce6 	bl	80060f4 <HAL_UART_Transmit>
	  }
	  if(send)
 8001728:	4b29      	ldr	r3, [pc, #164]	@ (80017d0 <main+0x15c>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	b2db      	uxtb	r3, r3
 800172e:	2b00      	cmp	r3, #0
 8001730:	d02a      	beq.n	8001788 <main+0x114>
	  {
		  // we manually set, before the transmission, the seventh bit to 0 if we' re sending MSB, and 1 if we were sending LSB
		  if(first_tx_byte == 0)
 8001732:	4b28      	ldr	r3, [pc, #160]	@ (80017d4 <main+0x160>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d10f      	bne.n	800175a <main+0xe6>
		  {
			  first_tx_byte = HAL_GetTick();
 800173a:	f000 fe75 	bl	8002428 <HAL_GetTick>
 800173e:	4603      	mov	r3, r0
 8001740:	461a      	mov	r2, r3
 8001742:	4b24      	ldr	r3, [pc, #144]	@ (80017d4 <main+0x160>)
 8001744:	601a      	str	r2, [r3, #0]
			  transmit_byte(MSB & 0b00111111);
 8001746:	4b24      	ldr	r3, [pc, #144]	@ (80017d8 <main+0x164>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	b2db      	uxtb	r3, r3
 800174c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001750:	b2db      	uxtb	r3, r3
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff ff1e 	bl	8001594 <transmit_byte>
 8001758:	e016      	b.n	8001788 <main+0x114>
		  }
		  else if(HAL_GetTick() > first_tx_byte+100)
 800175a:	f000 fe65 	bl	8002428 <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	4b1c      	ldr	r3, [pc, #112]	@ (80017d4 <main+0x160>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	3364      	adds	r3, #100	@ 0x64
 8001766:	429a      	cmp	r2, r3
 8001768:	d90e      	bls.n	8001788 <main+0x114>
		  {
			  send=0;
 800176a:	4b19      	ldr	r3, [pc, #100]	@ (80017d0 <main+0x15c>)
 800176c:	2200      	movs	r2, #0
 800176e:	701a      	strb	r2, [r3, #0]
			  first_tx_byte=0;
 8001770:	4b18      	ldr	r3, [pc, #96]	@ (80017d4 <main+0x160>)
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
			  transmit_byte(LSB | 0b01000000);
 8001776:	4b19      	ldr	r3, [pc, #100]	@ (80017dc <main+0x168>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	b2db      	uxtb	r3, r3
 800177c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001780:	b2db      	uxtb	r3, r3
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff ff06 	bl	8001594 <transmit_byte>
		  }
	  }
	  if(new_temp)
 8001788:	4b15      	ldr	r3, [pc, #84]	@ (80017e0 <main+0x16c>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b00      	cmp	r3, #0
 8001790:	d0b2      	beq.n	80016f8 <main+0x84>
	  {
		  new_temp=0;
 8001792:	4b13      	ldr	r3, [pc, #76]	@ (80017e0 <main+0x16c>)
 8001794:	2200      	movs	r2, #0
 8001796:	701a      	strb	r2, [r3, #0]
		  show_new_temp(value);
 8001798:	4b12      	ldr	r3, [pc, #72]	@ (80017e4 <main+0x170>)
 800179a:	edd3 7a00 	vldr	s15, [r3]
 800179e:	eeb0 0a67 	vmov.f32	s0, s15
 80017a2:	f7ff ff37 	bl	8001614 <show_new_temp>
	  if(temp_flag)
 80017a6:	e7a7      	b.n	80016f8 <main+0x84>
 80017a8:	08009e54 	.word	0x08009e54
 80017ac:	20000430 	.word	0x20000430
 80017b0:	200003d8 	.word	0x200003d8
 80017b4:	20000470 	.word	0x20000470
 80017b8:	20000390 	.word	0x20000390
 80017bc:	20000300 	.word	0x20000300
 80017c0:	20000420 	.word	0x20000420
 80017c4:	2000021c 	.word	0x2000021c
 80017c8:	08009e64 	.word	0x08009e64
 80017cc:	20000422 	.word	0x20000422
 80017d0:	20000423 	.word	0x20000423
 80017d4:	20000478 	.word	0x20000478
 80017d8:	2000042c 	.word	0x2000042c
 80017dc:	2000042d 	.word	0x2000042d
 80017e0:	2000047c 	.word	0x2000047c
 80017e4:	20000474 	.word	0x20000474

080017e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b094      	sub	sp, #80	@ 0x50
 80017ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ee:	f107 0320 	add.w	r3, r7, #32
 80017f2:	2230      	movs	r2, #48	@ 0x30
 80017f4:	2100      	movs	r1, #0
 80017f6:	4618      	mov	r0, r3
 80017f8:	f006 fa33 	bl	8007c62 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017fc:	f107 030c 	add.w	r3, r7, #12
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
 800180a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800180c:	2300      	movs	r3, #0
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	4b29      	ldr	r3, [pc, #164]	@ (80018b8 <SystemClock_Config+0xd0>)
 8001812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001814:	4a28      	ldr	r2, [pc, #160]	@ (80018b8 <SystemClock_Config+0xd0>)
 8001816:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800181a:	6413      	str	r3, [r2, #64]	@ 0x40
 800181c:	4b26      	ldr	r3, [pc, #152]	@ (80018b8 <SystemClock_Config+0xd0>)
 800181e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001820:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001828:	2300      	movs	r3, #0
 800182a:	607b      	str	r3, [r7, #4]
 800182c:	4b23      	ldr	r3, [pc, #140]	@ (80018bc <SystemClock_Config+0xd4>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001834:	4a21      	ldr	r2, [pc, #132]	@ (80018bc <SystemClock_Config+0xd4>)
 8001836:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800183a:	6013      	str	r3, [r2, #0]
 800183c:	4b1f      	ldr	r3, [pc, #124]	@ (80018bc <SystemClock_Config+0xd4>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001844:	607b      	str	r3, [r7, #4]
 8001846:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001848:	2302      	movs	r3, #2
 800184a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800184c:	2301      	movs	r3, #1
 800184e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001850:	2310      	movs	r3, #16
 8001852:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001854:	2302      	movs	r3, #2
 8001856:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001858:	2300      	movs	r3, #0
 800185a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800185c:	2310      	movs	r3, #16
 800185e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001860:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001864:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001866:	2304      	movs	r3, #4
 8001868:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800186a:	2307      	movs	r3, #7
 800186c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800186e:	f107 0320 	add.w	r3, r7, #32
 8001872:	4618      	mov	r0, r3
 8001874:	f002 ff14 	bl	80046a0 <HAL_RCC_OscConfig>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800187e:	f000 fa5d 	bl	8001d3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001882:	230f      	movs	r3, #15
 8001884:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001886:	2302      	movs	r3, #2
 8001888:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800188e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001892:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001894:	2300      	movs	r3, #0
 8001896:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001898:	f107 030c 	add.w	r3, r7, #12
 800189c:	2102      	movs	r1, #2
 800189e:	4618      	mov	r0, r3
 80018a0:	f003 f976 	bl	8004b90 <HAL_RCC_ClockConfig>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80018aa:	f000 fa47 	bl	8001d3c <Error_Handler>
  }
}
 80018ae:	bf00      	nop
 80018b0:	3750      	adds	r7, #80	@ 0x50
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40023800 	.word	0x40023800
 80018bc:	40007000 	.word	0x40007000

080018c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018c4:	4b12      	ldr	r3, [pc, #72]	@ (8001910 <MX_I2C1_Init+0x50>)
 80018c6:	4a13      	ldr	r2, [pc, #76]	@ (8001914 <MX_I2C1_Init+0x54>)
 80018c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80018ca:	4b11      	ldr	r3, [pc, #68]	@ (8001910 <MX_I2C1_Init+0x50>)
 80018cc:	4a12      	ldr	r2, [pc, #72]	@ (8001918 <MX_I2C1_Init+0x58>)
 80018ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001910 <MX_I2C1_Init+0x50>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001910 <MX_I2C1_Init+0x50>)
 80018d8:	2200      	movs	r2, #0
 80018da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001910 <MX_I2C1_Init+0x50>)
 80018de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80018e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001910 <MX_I2C1_Init+0x50>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018ea:	4b09      	ldr	r3, [pc, #36]	@ (8001910 <MX_I2C1_Init+0x50>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018f0:	4b07      	ldr	r3, [pc, #28]	@ (8001910 <MX_I2C1_Init+0x50>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018f6:	4b06      	ldr	r3, [pc, #24]	@ (8001910 <MX_I2C1_Init+0x50>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018fc:	4804      	ldr	r0, [pc, #16]	@ (8001910 <MX_I2C1_Init+0x50>)
 80018fe:	f001 f913 	bl	8002b28 <HAL_I2C_Init>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001908:	f000 fa18 	bl	8001d3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800190c:	bf00      	nop
 800190e:	bd80      	pop	{r7, pc}
 8001910:	2000021c 	.word	0x2000021c
 8001914:	40005400 	.word	0x40005400
 8001918:	000186a0 	.word	0x000186a0

0800191c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001922:	f107 0308 	add.w	r3, r7, #8
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	605a      	str	r2, [r3, #4]
 800192c:	609a      	str	r2, [r3, #8]
 800192e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001930:	463b      	mov	r3, r7
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001938:	4b1e      	ldr	r3, [pc, #120]	@ (80019b4 <MX_TIM1_Init+0x98>)
 800193a:	4a1f      	ldr	r2, [pc, #124]	@ (80019b8 <MX_TIM1_Init+0x9c>)
 800193c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3500-1;
 800193e:	4b1d      	ldr	r3, [pc, #116]	@ (80019b4 <MX_TIM1_Init+0x98>)
 8001940:	f640 52ab 	movw	r2, #3499	@ 0xdab
 8001944:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001946:	4b1b      	ldr	r3, [pc, #108]	@ (80019b4 <MX_TIM1_Init+0x98>)
 8001948:	2200      	movs	r2, #0
 800194a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10-1;
 800194c:	4b19      	ldr	r3, [pc, #100]	@ (80019b4 <MX_TIM1_Init+0x98>)
 800194e:	2209      	movs	r2, #9
 8001950:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001952:	4b18      	ldr	r3, [pc, #96]	@ (80019b4 <MX_TIM1_Init+0x98>)
 8001954:	2200      	movs	r2, #0
 8001956:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001958:	4b16      	ldr	r3, [pc, #88]	@ (80019b4 <MX_TIM1_Init+0x98>)
 800195a:	2200      	movs	r2, #0
 800195c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800195e:	4b15      	ldr	r3, [pc, #84]	@ (80019b4 <MX_TIM1_Init+0x98>)
 8001960:	2200      	movs	r2, #0
 8001962:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001964:	4813      	ldr	r0, [pc, #76]	@ (80019b4 <MX_TIM1_Init+0x98>)
 8001966:	f003 fb33 	bl	8004fd0 <HAL_TIM_Base_Init>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001970:	f000 f9e4 	bl	8001d3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001974:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001978:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800197a:	f107 0308 	add.w	r3, r7, #8
 800197e:	4619      	mov	r1, r3
 8001980:	480c      	ldr	r0, [pc, #48]	@ (80019b4 <MX_TIM1_Init+0x98>)
 8001982:	f003 ff1d 	bl	80057c0 <HAL_TIM_ConfigClockSource>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800198c:	f000 f9d6 	bl	8001d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001990:	2300      	movs	r3, #0
 8001992:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001994:	2300      	movs	r3, #0
 8001996:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001998:	463b      	mov	r3, r7
 800199a:	4619      	mov	r1, r3
 800199c:	4805      	ldr	r0, [pc, #20]	@ (80019b4 <MX_TIM1_Init+0x98>)
 800199e:	f004 fad7 	bl	8005f50 <HAL_TIMEx_MasterConfigSynchronization>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80019a8:	f000 f9c8 	bl	8001d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80019ac:	bf00      	nop
 80019ae:	3718      	adds	r7, #24
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20000270 	.word	0x20000270
 80019b8:	40010000 	.word	0x40010000

080019bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b08e      	sub	sp, #56	@ 0x38
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	605a      	str	r2, [r3, #4]
 80019cc:	609a      	str	r2, [r3, #8]
 80019ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d0:	f107 0320 	add.w	r3, r7, #32
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019da:	1d3b      	adds	r3, r7, #4
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	60da      	str	r2, [r3, #12]
 80019e6:	611a      	str	r2, [r3, #16]
 80019e8:	615a      	str	r2, [r3, #20]
 80019ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019ec:	4b2c      	ldr	r3, [pc, #176]	@ (8001aa0 <MX_TIM2_Init+0xe4>)
 80019ee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 221-1;
 80019f4:	4b2a      	ldr	r3, [pc, #168]	@ (8001aa0 <MX_TIM2_Init+0xe4>)
 80019f6:	22dc      	movs	r2, #220	@ 0xdc
 80019f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019fa:	4b29      	ldr	r3, [pc, #164]	@ (8001aa0 <MX_TIM2_Init+0xe4>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 8001a00:	4b27      	ldr	r3, [pc, #156]	@ (8001aa0 <MX_TIM2_Init+0xe4>)
 8001a02:	2209      	movs	r2, #9
 8001a04:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a06:	4b26      	ldr	r3, [pc, #152]	@ (8001aa0 <MX_TIM2_Init+0xe4>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a0c:	4b24      	ldr	r3, [pc, #144]	@ (8001aa0 <MX_TIM2_Init+0xe4>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a12:	4823      	ldr	r0, [pc, #140]	@ (8001aa0 <MX_TIM2_Init+0xe4>)
 8001a14:	f003 fadc 	bl	8004fd0 <HAL_TIM_Base_Init>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001a1e:	f000 f98d 	bl	8001d3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a26:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a28:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	481c      	ldr	r0, [pc, #112]	@ (8001aa0 <MX_TIM2_Init+0xe4>)
 8001a30:	f003 fec6 	bl	80057c0 <HAL_TIM_ConfigClockSource>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001a3a:	f000 f97f 	bl	8001d3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a3e:	4818      	ldr	r0, [pc, #96]	@ (8001aa0 <MX_TIM2_Init+0xe4>)
 8001a40:	f003 fb9e 	bl	8005180 <HAL_TIM_PWM_Init>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001a4a:	f000 f977 	bl	8001d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a52:	2300      	movs	r3, #0
 8001a54:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a56:	f107 0320 	add.w	r3, r7, #32
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4810      	ldr	r0, [pc, #64]	@ (8001aa0 <MX_TIM2_Init+0xe4>)
 8001a5e:	f004 fa77 	bl	8005f50 <HAL_TIMEx_MasterConfigSynchronization>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001a68:	f000 f968 	bl	8001d3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a6c:	2360      	movs	r3, #96	@ 0x60
 8001a6e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 5;
 8001a70:	2305      	movs	r3, #5
 8001a72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a74:	2300      	movs	r3, #0
 8001a76:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a7c:	1d3b      	adds	r3, r7, #4
 8001a7e:	2208      	movs	r2, #8
 8001a80:	4619      	mov	r1, r3
 8001a82:	4807      	ldr	r0, [pc, #28]	@ (8001aa0 <MX_TIM2_Init+0xe4>)
 8001a84:	f003 fdda 	bl	800563c <HAL_TIM_PWM_ConfigChannel>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001a8e:	f000 f955 	bl	8001d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a92:	4803      	ldr	r0, [pc, #12]	@ (8001aa0 <MX_TIM2_Init+0xe4>)
 8001a94:	f000 fa48 	bl	8001f28 <HAL_TIM_MspPostInit>

}
 8001a98:	bf00      	nop
 8001a9a:	3738      	adds	r7, #56	@ 0x38
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	200002b8 	.word	0x200002b8

08001aa4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aaa:	f107 0308 	add.w	r3, r7, #8
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	605a      	str	r2, [r3, #4]
 8001ab4:	609a      	str	r2, [r3, #8]
 8001ab6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ab8:	463b      	mov	r3, r7
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ac0:	4b1d      	ldr	r3, [pc, #116]	@ (8001b38 <MX_TIM3_Init+0x94>)
 8001ac2:	4a1e      	ldr	r2, [pc, #120]	@ (8001b3c <MX_TIM3_Init+0x98>)
 8001ac4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000-1;
 8001ac6:	4b1c      	ldr	r3, [pc, #112]	@ (8001b38 <MX_TIM3_Init+0x94>)
 8001ac8:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001acc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ace:	4b1a      	ldr	r3, [pc, #104]	@ (8001b38 <MX_TIM3_Init+0x94>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8400-1;
 8001ad4:	4b18      	ldr	r3, [pc, #96]	@ (8001b38 <MX_TIM3_Init+0x94>)
 8001ad6:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001ada:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001adc:	4b16      	ldr	r3, [pc, #88]	@ (8001b38 <MX_TIM3_Init+0x94>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ae2:	4b15      	ldr	r3, [pc, #84]	@ (8001b38 <MX_TIM3_Init+0x94>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ae8:	4813      	ldr	r0, [pc, #76]	@ (8001b38 <MX_TIM3_Init+0x94>)
 8001aea:	f003 fa71 	bl	8004fd0 <HAL_TIM_Base_Init>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001af4:	f000 f922 	bl	8001d3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001af8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001afc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001afe:	f107 0308 	add.w	r3, r7, #8
 8001b02:	4619      	mov	r1, r3
 8001b04:	480c      	ldr	r0, [pc, #48]	@ (8001b38 <MX_TIM3_Init+0x94>)
 8001b06:	f003 fe5b 	bl	80057c0 <HAL_TIM_ConfigClockSource>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001b10:	f000 f914 	bl	8001d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b14:	2300      	movs	r3, #0
 8001b16:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b1c:	463b      	mov	r3, r7
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4805      	ldr	r0, [pc, #20]	@ (8001b38 <MX_TIM3_Init+0x94>)
 8001b22:	f004 fa15 	bl	8005f50 <HAL_TIMEx_MasterConfigSynchronization>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001b2c:	f000 f906 	bl	8001d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b30:	bf00      	nop
 8001b32:	3718      	adds	r7, #24
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	20000300 	.word	0x20000300
 8001b3c:	40000400 	.word	0x40000400

08001b40 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001b44:	4b0e      	ldr	r3, [pc, #56]	@ (8001b80 <MX_TIM10_Init+0x40>)
 8001b46:	4a0f      	ldr	r2, [pc, #60]	@ (8001b84 <MX_TIM10_Init+0x44>)
 8001b48:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 84-1;
 8001b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b80 <MX_TIM10_Init+0x40>)
 8001b4c:	2253      	movs	r2, #83	@ 0x53
 8001b4e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b50:	4b0b      	ldr	r3, [pc, #44]	@ (8001b80 <MX_TIM10_Init+0x40>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4000-1;
 8001b56:	4b0a      	ldr	r3, [pc, #40]	@ (8001b80 <MX_TIM10_Init+0x40>)
 8001b58:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8001b5c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b5e:	4b08      	ldr	r3, [pc, #32]	@ (8001b80 <MX_TIM10_Init+0x40>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b64:	4b06      	ldr	r3, [pc, #24]	@ (8001b80 <MX_TIM10_Init+0x40>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001b6a:	4805      	ldr	r0, [pc, #20]	@ (8001b80 <MX_TIM10_Init+0x40>)
 8001b6c:	f003 fa30 	bl	8004fd0 <HAL_TIM_Base_Init>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001b76:	f000 f8e1 	bl	8001d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000348 	.word	0x20000348
 8001b84:	40014400 	.word	0x40014400

08001b88 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b8c:	4b11      	ldr	r3, [pc, #68]	@ (8001bd4 <MX_USART1_UART_Init+0x4c>)
 8001b8e:	4a12      	ldr	r2, [pc, #72]	@ (8001bd8 <MX_USART1_UART_Init+0x50>)
 8001b90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2400;
 8001b92:	4b10      	ldr	r3, [pc, #64]	@ (8001bd4 <MX_USART1_UART_Init+0x4c>)
 8001b94:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8001b98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001bd4 <MX_USART1_UART_Init+0x4c>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd4 <MX_USART1_UART_Init+0x4c>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 8001ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd4 <MX_USART1_UART_Init+0x4c>)
 8001ba8:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8001bac:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bae:	4b09      	ldr	r3, [pc, #36]	@ (8001bd4 <MX_USART1_UART_Init+0x4c>)
 8001bb0:	220c      	movs	r2, #12
 8001bb2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bb4:	4b07      	ldr	r3, [pc, #28]	@ (8001bd4 <MX_USART1_UART_Init+0x4c>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bba:	4b06      	ldr	r3, [pc, #24]	@ (8001bd4 <MX_USART1_UART_Init+0x4c>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bc0:	4804      	ldr	r0, [pc, #16]	@ (8001bd4 <MX_USART1_UART_Init+0x4c>)
 8001bc2:	f004 fa47 	bl	8006054 <HAL_UART_Init>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8001bcc:	f000 f8b6 	bl	8001d3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bd0:	bf00      	nop
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	20000390 	.word	0x20000390
 8001bd8:	40011000 	.word	0x40011000

08001bdc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001be0:	4b11      	ldr	r3, [pc, #68]	@ (8001c28 <MX_USART2_UART_Init+0x4c>)
 8001be2:	4a12      	ldr	r2, [pc, #72]	@ (8001c2c <MX_USART2_UART_Init+0x50>)
 8001be4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001be6:	4b10      	ldr	r3, [pc, #64]	@ (8001c28 <MX_USART2_UART_Init+0x4c>)
 8001be8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001bec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bee:	4b0e      	ldr	r3, [pc, #56]	@ (8001c28 <MX_USART2_UART_Init+0x4c>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8001c28 <MX_USART2_UART_Init+0x4c>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8001c28 <MX_USART2_UART_Init+0x4c>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c00:	4b09      	ldr	r3, [pc, #36]	@ (8001c28 <MX_USART2_UART_Init+0x4c>)
 8001c02:	220c      	movs	r2, #12
 8001c04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c06:	4b08      	ldr	r3, [pc, #32]	@ (8001c28 <MX_USART2_UART_Init+0x4c>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c0c:	4b06      	ldr	r3, [pc, #24]	@ (8001c28 <MX_USART2_UART_Init+0x4c>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c12:	4805      	ldr	r0, [pc, #20]	@ (8001c28 <MX_USART2_UART_Init+0x4c>)
 8001c14:	f004 fa1e 	bl	8006054 <HAL_UART_Init>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c1e:	f000 f88d 	bl	8001d3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	200003d8 	.word	0x200003d8
 8001c2c:	40004400 	.word	0x40004400

08001c30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b08a      	sub	sp, #40	@ 0x28
 8001c34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c36:	f107 0314 	add.w	r3, r7, #20
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	605a      	str	r2, [r3, #4]
 8001c40:	609a      	str	r2, [r3, #8]
 8001c42:	60da      	str	r2, [r3, #12]
 8001c44:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	613b      	str	r3, [r7, #16]
 8001c4a:	4b38      	ldr	r3, [pc, #224]	@ (8001d2c <MX_GPIO_Init+0xfc>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4e:	4a37      	ldr	r2, [pc, #220]	@ (8001d2c <MX_GPIO_Init+0xfc>)
 8001c50:	f043 0304 	orr.w	r3, r3, #4
 8001c54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c56:	4b35      	ldr	r3, [pc, #212]	@ (8001d2c <MX_GPIO_Init+0xfc>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5a:	f003 0304 	and.w	r3, r3, #4
 8001c5e:	613b      	str	r3, [r7, #16]
 8001c60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	4b31      	ldr	r3, [pc, #196]	@ (8001d2c <MX_GPIO_Init+0xfc>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6a:	4a30      	ldr	r2, [pc, #192]	@ (8001d2c <MX_GPIO_Init+0xfc>)
 8001c6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c72:	4b2e      	ldr	r3, [pc, #184]	@ (8001d2c <MX_GPIO_Init+0xfc>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60bb      	str	r3, [r7, #8]
 8001c82:	4b2a      	ldr	r3, [pc, #168]	@ (8001d2c <MX_GPIO_Init+0xfc>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c86:	4a29      	ldr	r2, [pc, #164]	@ (8001d2c <MX_GPIO_Init+0xfc>)
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c8e:	4b27      	ldr	r3, [pc, #156]	@ (8001d2c <MX_GPIO_Init+0xfc>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	60bb      	str	r3, [r7, #8]
 8001c98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	607b      	str	r3, [r7, #4]
 8001c9e:	4b23      	ldr	r3, [pc, #140]	@ (8001d2c <MX_GPIO_Init+0xfc>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca2:	4a22      	ldr	r2, [pc, #136]	@ (8001d2c <MX_GPIO_Init+0xfc>)
 8001ca4:	f043 0302 	orr.w	r3, r3, #2
 8001ca8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001caa:	4b20      	ldr	r3, [pc, #128]	@ (8001d2c <MX_GPIO_Init+0xfc>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	607b      	str	r3, [r7, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	2110      	movs	r1, #16
 8001cba:	481d      	ldr	r0, [pc, #116]	@ (8001d30 <MX_GPIO_Init+0x100>)
 8001cbc:	f000 ff1a 	bl	8002af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f24f 0146 	movw	r1, #61510	@ 0xf046
 8001cc6:	481b      	ldr	r0, [pc, #108]	@ (8001d34 <MX_GPIO_Init+0x104>)
 8001cc8:	f000 ff14 	bl	8002af4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001ccc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001cd2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001cd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001cdc:	f107 0314 	add.w	r3, r7, #20
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4815      	ldr	r0, [pc, #84]	@ (8001d38 <MX_GPIO_Init+0x108>)
 8001ce4:	f000 fd82 	bl	80027ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ce8:	2310      	movs	r3, #16
 8001cea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cec:	2301      	movs	r3, #1
 8001cee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf8:	f107 0314 	add.w	r3, r7, #20
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	480c      	ldr	r0, [pc, #48]	@ (8001d30 <MX_GPIO_Init+0x100>)
 8001d00:	f000 fd74 	bl	80027ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB13
                           PB14 PB15 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 8001d04:	f24f 0346 	movw	r3, #61510	@ 0xf046
 8001d08:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d12:	2300      	movs	r3, #0
 8001d14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d16:	f107 0314 	add.w	r3, r7, #20
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4805      	ldr	r0, [pc, #20]	@ (8001d34 <MX_GPIO_Init+0x104>)
 8001d1e:	f000 fd65 	bl	80027ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d22:	bf00      	nop
 8001d24:	3728      	adds	r7, #40	@ 0x28
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40020000 	.word	0x40020000
 8001d34:	40020400 	.word	0x40020400
 8001d38:	40020800 	.word	0x40020800

08001d3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d40:	b672      	cpsid	i
}
 8001d42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d44:	bf00      	nop
 8001d46:	e7fd      	b.n	8001d44 <Error_Handler+0x8>

08001d48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	607b      	str	r3, [r7, #4]
 8001d52:	4b10      	ldr	r3, [pc, #64]	@ (8001d94 <HAL_MspInit+0x4c>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d56:	4a0f      	ldr	r2, [pc, #60]	@ (8001d94 <HAL_MspInit+0x4c>)
 8001d58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d94 <HAL_MspInit+0x4c>)
 8001d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d66:	607b      	str	r3, [r7, #4]
 8001d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	603b      	str	r3, [r7, #0]
 8001d6e:	4b09      	ldr	r3, [pc, #36]	@ (8001d94 <HAL_MspInit+0x4c>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d72:	4a08      	ldr	r2, [pc, #32]	@ (8001d94 <HAL_MspInit+0x4c>)
 8001d74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d78:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d7a:	4b06      	ldr	r3, [pc, #24]	@ (8001d94 <HAL_MspInit+0x4c>)
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d82:	603b      	str	r3, [r7, #0]
 8001d84:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d86:	2007      	movs	r0, #7
 8001d88:	f000 fc4e 	bl	8002628 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d8c:	bf00      	nop
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40023800 	.word	0x40023800

08001d98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b08a      	sub	sp, #40	@ 0x28
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da0:	f107 0314 	add.w	r3, r7, #20
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]
 8001dae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a1d      	ldr	r2, [pc, #116]	@ (8001e2c <HAL_I2C_MspInit+0x94>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d134      	bne.n	8001e24 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	613b      	str	r3, [r7, #16]
 8001dbe:	4b1c      	ldr	r3, [pc, #112]	@ (8001e30 <HAL_I2C_MspInit+0x98>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc2:	4a1b      	ldr	r2, [pc, #108]	@ (8001e30 <HAL_I2C_MspInit+0x98>)
 8001dc4:	f043 0302 	orr.w	r3, r3, #2
 8001dc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dca:	4b19      	ldr	r3, [pc, #100]	@ (8001e30 <HAL_I2C_MspInit+0x98>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	613b      	str	r3, [r7, #16]
 8001dd4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001dd6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001dda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ddc:	2312      	movs	r3, #18
 8001dde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de0:	2300      	movs	r3, #0
 8001de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de4:	2303      	movs	r3, #3
 8001de6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001de8:	2304      	movs	r3, #4
 8001dea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dec:	f107 0314 	add.w	r3, r7, #20
 8001df0:	4619      	mov	r1, r3
 8001df2:	4810      	ldr	r0, [pc, #64]	@ (8001e34 <HAL_I2C_MspInit+0x9c>)
 8001df4:	f000 fcfa 	bl	80027ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8001e30 <HAL_I2C_MspInit+0x98>)
 8001dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e00:	4a0b      	ldr	r2, [pc, #44]	@ (8001e30 <HAL_I2C_MspInit+0x98>)
 8001e02:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e06:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e08:	4b09      	ldr	r3, [pc, #36]	@ (8001e30 <HAL_I2C_MspInit+0x98>)
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001e14:	2200      	movs	r2, #0
 8001e16:	2100      	movs	r1, #0
 8001e18:	201f      	movs	r0, #31
 8001e1a:	f000 fc10 	bl	800263e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001e1e:	201f      	movs	r0, #31
 8001e20:	f000 fc29 	bl	8002676 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e24:	bf00      	nop
 8001e26:	3728      	adds	r7, #40	@ 0x28
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40005400 	.word	0x40005400
 8001e30:	40023800 	.word	0x40023800
 8001e34:	40020400 	.word	0x40020400

08001e38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a34      	ldr	r2, [pc, #208]	@ (8001f18 <HAL_TIM_Base_MspInit+0xe0>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d116      	bne.n	8001e78 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	617b      	str	r3, [r7, #20]
 8001e4e:	4b33      	ldr	r3, [pc, #204]	@ (8001f1c <HAL_TIM_Base_MspInit+0xe4>)
 8001e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e52:	4a32      	ldr	r2, [pc, #200]	@ (8001f1c <HAL_TIM_Base_MspInit+0xe4>)
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e5a:	4b30      	ldr	r3, [pc, #192]	@ (8001f1c <HAL_TIM_Base_MspInit+0xe4>)
 8001e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	617b      	str	r3, [r7, #20]
 8001e64:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001e66:	2200      	movs	r2, #0
 8001e68:	2100      	movs	r1, #0
 8001e6a:	2019      	movs	r0, #25
 8001e6c:	f000 fbe7 	bl	800263e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001e70:	2019      	movs	r0, #25
 8001e72:	f000 fc00 	bl	8002676 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001e76:	e04a      	b.n	8001f0e <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM2)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e80:	d10e      	bne.n	8001ea0 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	613b      	str	r3, [r7, #16]
 8001e86:	4b25      	ldr	r3, [pc, #148]	@ (8001f1c <HAL_TIM_Base_MspInit+0xe4>)
 8001e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8a:	4a24      	ldr	r2, [pc, #144]	@ (8001f1c <HAL_TIM_Base_MspInit+0xe4>)
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e92:	4b22      	ldr	r3, [pc, #136]	@ (8001f1c <HAL_TIM_Base_MspInit+0xe4>)
 8001e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	613b      	str	r3, [r7, #16]
 8001e9c:	693b      	ldr	r3, [r7, #16]
}
 8001e9e:	e036      	b.n	8001f0e <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM3)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a1e      	ldr	r2, [pc, #120]	@ (8001f20 <HAL_TIM_Base_MspInit+0xe8>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d116      	bne.n	8001ed8 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	60fb      	str	r3, [r7, #12]
 8001eae:	4b1b      	ldr	r3, [pc, #108]	@ (8001f1c <HAL_TIM_Base_MspInit+0xe4>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb2:	4a1a      	ldr	r2, [pc, #104]	@ (8001f1c <HAL_TIM_Base_MspInit+0xe4>)
 8001eb4:	f043 0302 	orr.w	r3, r3, #2
 8001eb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eba:	4b18      	ldr	r3, [pc, #96]	@ (8001f1c <HAL_TIM_Base_MspInit+0xe4>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	2100      	movs	r1, #0
 8001eca:	201d      	movs	r0, #29
 8001ecc:	f000 fbb7 	bl	800263e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ed0:	201d      	movs	r0, #29
 8001ed2:	f000 fbd0 	bl	8002676 <HAL_NVIC_EnableIRQ>
}
 8001ed6:	e01a      	b.n	8001f0e <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM10)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a11      	ldr	r2, [pc, #68]	@ (8001f24 <HAL_TIM_Base_MspInit+0xec>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d115      	bne.n	8001f0e <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60bb      	str	r3, [r7, #8]
 8001ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8001f1c <HAL_TIM_Base_MspInit+0xe4>)
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eea:	4a0c      	ldr	r2, [pc, #48]	@ (8001f1c <HAL_TIM_Base_MspInit+0xe4>)
 8001eec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ef0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ef2:	4b0a      	ldr	r3, [pc, #40]	@ (8001f1c <HAL_TIM_Base_MspInit+0xe4>)
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001efa:	60bb      	str	r3, [r7, #8]
 8001efc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001efe:	2200      	movs	r2, #0
 8001f00:	2100      	movs	r1, #0
 8001f02:	2019      	movs	r0, #25
 8001f04:	f000 fb9b 	bl	800263e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001f08:	2019      	movs	r0, #25
 8001f0a:	f000 fbb4 	bl	8002676 <HAL_NVIC_EnableIRQ>
}
 8001f0e:	bf00      	nop
 8001f10:	3718      	adds	r7, #24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40010000 	.word	0x40010000
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	40000400 	.word	0x40000400
 8001f24:	40014400 	.word	0x40014400

08001f28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b088      	sub	sp, #32
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f30:	f107 030c 	add.w	r3, r7, #12
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	605a      	str	r2, [r3, #4]
 8001f3a:	609a      	str	r2, [r3, #8]
 8001f3c:	60da      	str	r2, [r3, #12]
 8001f3e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f48:	d11e      	bne.n	8001f88 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60bb      	str	r3, [r7, #8]
 8001f4e:	4b10      	ldr	r3, [pc, #64]	@ (8001f90 <HAL_TIM_MspPostInit+0x68>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f52:	4a0f      	ldr	r2, [pc, #60]	@ (8001f90 <HAL_TIM_MspPostInit+0x68>)
 8001f54:	f043 0302 	orr.w	r3, r3, #2
 8001f58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f90 <HAL_TIM_MspPostInit+0x68>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	60bb      	str	r3, [r7, #8]
 8001f64:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f6a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f74:	2300      	movs	r3, #0
 8001f76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f7c:	f107 030c 	add.w	r3, r7, #12
 8001f80:	4619      	mov	r1, r3
 8001f82:	4804      	ldr	r0, [pc, #16]	@ (8001f94 <HAL_TIM_MspPostInit+0x6c>)
 8001f84:	f000 fc32 	bl	80027ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001f88:	bf00      	nop
 8001f8a:	3720      	adds	r7, #32
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40023800 	.word	0x40023800
 8001f94:	40020400 	.word	0x40020400

08001f98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08c      	sub	sp, #48	@ 0x30
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa0:	f107 031c 	add.w	r3, r7, #28
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	605a      	str	r2, [r3, #4]
 8001faa:	609a      	str	r2, [r3, #8]
 8001fac:	60da      	str	r2, [r3, #12]
 8001fae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a36      	ldr	r2, [pc, #216]	@ (8002090 <HAL_UART_MspInit+0xf8>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d135      	bne.n	8002026 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61bb      	str	r3, [r7, #24]
 8001fbe:	4b35      	ldr	r3, [pc, #212]	@ (8002094 <HAL_UART_MspInit+0xfc>)
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc2:	4a34      	ldr	r2, [pc, #208]	@ (8002094 <HAL_UART_MspInit+0xfc>)
 8001fc4:	f043 0310 	orr.w	r3, r3, #16
 8001fc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fca:	4b32      	ldr	r3, [pc, #200]	@ (8002094 <HAL_UART_MspInit+0xfc>)
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fce:	f003 0310 	and.w	r3, r3, #16
 8001fd2:	61bb      	str	r3, [r7, #24]
 8001fd4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	617b      	str	r3, [r7, #20]
 8001fda:	4b2e      	ldr	r3, [pc, #184]	@ (8002094 <HAL_UART_MspInit+0xfc>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fde:	4a2d      	ldr	r2, [pc, #180]	@ (8002094 <HAL_UART_MspInit+0xfc>)
 8001fe0:	f043 0301 	orr.w	r3, r3, #1
 8001fe4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fe6:	4b2b      	ldr	r3, [pc, #172]	@ (8002094 <HAL_UART_MspInit+0xfc>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	617b      	str	r3, [r7, #20]
 8001ff0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ff2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001ff6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002000:	2303      	movs	r3, #3
 8002002:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002004:	2307      	movs	r3, #7
 8002006:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002008:	f107 031c 	add.w	r3, r7, #28
 800200c:	4619      	mov	r1, r3
 800200e:	4822      	ldr	r0, [pc, #136]	@ (8002098 <HAL_UART_MspInit+0x100>)
 8002010:	f000 fbec 	bl	80027ec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002014:	2200      	movs	r2, #0
 8002016:	2100      	movs	r1, #0
 8002018:	2025      	movs	r0, #37	@ 0x25
 800201a:	f000 fb10 	bl	800263e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800201e:	2025      	movs	r0, #37	@ 0x25
 8002020:	f000 fb29 	bl	8002676 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002024:	e030      	b.n	8002088 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a1c      	ldr	r2, [pc, #112]	@ (800209c <HAL_UART_MspInit+0x104>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d12b      	bne.n	8002088 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002030:	2300      	movs	r3, #0
 8002032:	613b      	str	r3, [r7, #16]
 8002034:	4b17      	ldr	r3, [pc, #92]	@ (8002094 <HAL_UART_MspInit+0xfc>)
 8002036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002038:	4a16      	ldr	r2, [pc, #88]	@ (8002094 <HAL_UART_MspInit+0xfc>)
 800203a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800203e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002040:	4b14      	ldr	r3, [pc, #80]	@ (8002094 <HAL_UART_MspInit+0xfc>)
 8002042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002044:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002048:	613b      	str	r3, [r7, #16]
 800204a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800204c:	2300      	movs	r3, #0
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	4b10      	ldr	r3, [pc, #64]	@ (8002094 <HAL_UART_MspInit+0xfc>)
 8002052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002054:	4a0f      	ldr	r2, [pc, #60]	@ (8002094 <HAL_UART_MspInit+0xfc>)
 8002056:	f043 0301 	orr.w	r3, r3, #1
 800205a:	6313      	str	r3, [r2, #48]	@ 0x30
 800205c:	4b0d      	ldr	r3, [pc, #52]	@ (8002094 <HAL_UART_MspInit+0xfc>)
 800205e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002068:	230c      	movs	r3, #12
 800206a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206c:	2302      	movs	r3, #2
 800206e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002070:	2300      	movs	r3, #0
 8002072:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002074:	2300      	movs	r3, #0
 8002076:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002078:	2307      	movs	r3, #7
 800207a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207c:	f107 031c 	add.w	r3, r7, #28
 8002080:	4619      	mov	r1, r3
 8002082:	4805      	ldr	r0, [pc, #20]	@ (8002098 <HAL_UART_MspInit+0x100>)
 8002084:	f000 fbb2 	bl	80027ec <HAL_GPIO_Init>
}
 8002088:	bf00      	nop
 800208a:	3730      	adds	r7, #48	@ 0x30
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	40011000 	.word	0x40011000
 8002094:	40023800 	.word	0x40023800
 8002098:	40020000 	.word	0x40020000
 800209c:	40004400 	.word	0x40004400

080020a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020a4:	bf00      	nop
 80020a6:	e7fd      	b.n	80020a4 <NMI_Handler+0x4>

080020a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020ac:	bf00      	nop
 80020ae:	e7fd      	b.n	80020ac <HardFault_Handler+0x4>

080020b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020b4:	bf00      	nop
 80020b6:	e7fd      	b.n	80020b4 <MemManage_Handler+0x4>

080020b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020bc:	bf00      	nop
 80020be:	e7fd      	b.n	80020bc <BusFault_Handler+0x4>

080020c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020c4:	bf00      	nop
 80020c6:	e7fd      	b.n	80020c4 <UsageFault_Handler+0x4>

080020c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020cc:	bf00      	nop
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020d6:	b480      	push	{r7}
 80020d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020da:	bf00      	nop
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020e8:	bf00      	nop
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020f6:	f000 f983 	bl	8002400 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020fa:	bf00      	nop
 80020fc:	bd80      	pop	{r7, pc}
	...

08002100 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002104:	4803      	ldr	r0, [pc, #12]	@ (8002114 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8002106:	f003 f9a9 	bl	800545c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800210a:	4803      	ldr	r0, [pc, #12]	@ (8002118 <TIM1_UP_TIM10_IRQHandler+0x18>)
 800210c:	f003 f9a6 	bl	800545c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002110:	bf00      	nop
 8002112:	bd80      	pop	{r7, pc}
 8002114:	20000270 	.word	0x20000270
 8002118:	20000348 	.word	0x20000348

0800211c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002120:	4802      	ldr	r0, [pc, #8]	@ (800212c <TIM3_IRQHandler+0x10>)
 8002122:	f003 f99b 	bl	800545c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002126:	bf00      	nop
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	20000300 	.word	0x20000300

08002130 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002134:	4802      	ldr	r0, [pc, #8]	@ (8002140 <I2C1_EV_IRQHandler+0x10>)
 8002136:	f000 fefb 	bl	8002f30 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800213a:	bf00      	nop
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	2000021c 	.word	0x2000021c

08002144 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002148:	4802      	ldr	r0, [pc, #8]	@ (8002154 <USART1_IRQHandler+0x10>)
 800214a:	f004 f883 	bl	8006254 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	20000390 	.word	0x20000390

08002158 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  return 1;
 800215c:	2301      	movs	r3, #1
}
 800215e:	4618      	mov	r0, r3
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <_kill>:

int _kill(int pid, int sig)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002172:	f005 fdc9 	bl	8007d08 <__errno>
 8002176:	4603      	mov	r3, r0
 8002178:	2216      	movs	r2, #22
 800217a:	601a      	str	r2, [r3, #0]
  return -1;
 800217c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002180:	4618      	mov	r0, r3
 8002182:	3708      	adds	r7, #8
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <_exit>:

void _exit (int status)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002190:	f04f 31ff 	mov.w	r1, #4294967295
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f7ff ffe7 	bl	8002168 <_kill>
  while (1) {}    /* Make sure we hang here */
 800219a:	bf00      	nop
 800219c:	e7fd      	b.n	800219a <_exit+0x12>

0800219e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b086      	sub	sp, #24
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	60f8      	str	r0, [r7, #12]
 80021a6:	60b9      	str	r1, [r7, #8]
 80021a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021aa:	2300      	movs	r3, #0
 80021ac:	617b      	str	r3, [r7, #20]
 80021ae:	e00a      	b.n	80021c6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021b0:	f3af 8000 	nop.w
 80021b4:	4601      	mov	r1, r0
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	1c5a      	adds	r2, r3, #1
 80021ba:	60ba      	str	r2, [r7, #8]
 80021bc:	b2ca      	uxtb	r2, r1
 80021be:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	3301      	adds	r3, #1
 80021c4:	617b      	str	r3, [r7, #20]
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	dbf0      	blt.n	80021b0 <_read+0x12>
  }

  return len;
 80021ce:	687b      	ldr	r3, [r7, #4]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3718      	adds	r7, #24
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]
 80021e8:	e009      	b.n	80021fe <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	1c5a      	adds	r2, r3, #1
 80021ee:	60ba      	str	r2, [r7, #8]
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	3301      	adds	r3, #1
 80021fc:	617b      	str	r3, [r7, #20]
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	429a      	cmp	r2, r3
 8002204:	dbf1      	blt.n	80021ea <_write+0x12>
  }
  return len;
 8002206:	687b      	ldr	r3, [r7, #4]
}
 8002208:	4618      	mov	r0, r3
 800220a:	3718      	adds	r7, #24
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <_close>:

int _close(int file)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002218:	f04f 33ff 	mov.w	r3, #4294967295
}
 800221c:	4618      	mov	r0, r3
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002238:	605a      	str	r2, [r3, #4]
  return 0;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <_isatty>:

int _isatty(int file)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002250:	2301      	movs	r3, #1
}
 8002252:	4618      	mov	r0, r3
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr

0800225e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800225e:	b480      	push	{r7}
 8002260:	b085      	sub	sp, #20
 8002262:	af00      	add	r7, sp, #0
 8002264:	60f8      	str	r0, [r7, #12]
 8002266:	60b9      	str	r1, [r7, #8]
 8002268:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	3714      	adds	r7, #20
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002280:	4a14      	ldr	r2, [pc, #80]	@ (80022d4 <_sbrk+0x5c>)
 8002282:	4b15      	ldr	r3, [pc, #84]	@ (80022d8 <_sbrk+0x60>)
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800228c:	4b13      	ldr	r3, [pc, #76]	@ (80022dc <_sbrk+0x64>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d102      	bne.n	800229a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002294:	4b11      	ldr	r3, [pc, #68]	@ (80022dc <_sbrk+0x64>)
 8002296:	4a12      	ldr	r2, [pc, #72]	@ (80022e0 <_sbrk+0x68>)
 8002298:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800229a:	4b10      	ldr	r3, [pc, #64]	@ (80022dc <_sbrk+0x64>)
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4413      	add	r3, r2
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d207      	bcs.n	80022b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022a8:	f005 fd2e 	bl	8007d08 <__errno>
 80022ac:	4603      	mov	r3, r0
 80022ae:	220c      	movs	r2, #12
 80022b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022b2:	f04f 33ff 	mov.w	r3, #4294967295
 80022b6:	e009      	b.n	80022cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022b8:	4b08      	ldr	r3, [pc, #32]	@ (80022dc <_sbrk+0x64>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022be:	4b07      	ldr	r3, [pc, #28]	@ (80022dc <_sbrk+0x64>)
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4413      	add	r3, r2
 80022c6:	4a05      	ldr	r2, [pc, #20]	@ (80022dc <_sbrk+0x64>)
 80022c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022ca:	68fb      	ldr	r3, [r7, #12]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3718      	adds	r7, #24
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	20018000 	.word	0x20018000
 80022d8:	00000400 	.word	0x00000400
 80022dc:	20000480 	.word	0x20000480
 80022e0:	200005d8 	.word	0x200005d8

080022e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022e8:	4b06      	ldr	r3, [pc, #24]	@ (8002304 <SystemInit+0x20>)
 80022ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ee:	4a05      	ldr	r2, [pc, #20]	@ (8002304 <SystemInit+0x20>)
 80022f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022f8:	bf00      	nop
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	e000ed00 	.word	0xe000ed00

08002308 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002308:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002340 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800230c:	f7ff ffea 	bl	80022e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002310:	480c      	ldr	r0, [pc, #48]	@ (8002344 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002312:	490d      	ldr	r1, [pc, #52]	@ (8002348 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002314:	4a0d      	ldr	r2, [pc, #52]	@ (800234c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002316:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002318:	e002      	b.n	8002320 <LoopCopyDataInit>

0800231a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800231a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800231c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800231e:	3304      	adds	r3, #4

08002320 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002320:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002322:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002324:	d3f9      	bcc.n	800231a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002326:	4a0a      	ldr	r2, [pc, #40]	@ (8002350 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002328:	4c0a      	ldr	r4, [pc, #40]	@ (8002354 <LoopFillZerobss+0x22>)
  movs r3, #0
 800232a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800232c:	e001      	b.n	8002332 <LoopFillZerobss>

0800232e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800232e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002330:	3204      	adds	r2, #4

08002332 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002332:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002334:	d3fb      	bcc.n	800232e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002336:	f005 fced 	bl	8007d14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800233a:	f7ff f99b 	bl	8001674 <main>
  bx  lr    
 800233e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002340:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002344:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002348:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 800234c:	0800a210 	.word	0x0800a210
  ldr r2, =_sbss
 8002350:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8002354:	200005d4 	.word	0x200005d4

08002358 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002358:	e7fe      	b.n	8002358 <ADC_IRQHandler>
	...

0800235c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002360:	4b0e      	ldr	r3, [pc, #56]	@ (800239c <HAL_Init+0x40>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a0d      	ldr	r2, [pc, #52]	@ (800239c <HAL_Init+0x40>)
 8002366:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800236a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800236c:	4b0b      	ldr	r3, [pc, #44]	@ (800239c <HAL_Init+0x40>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a0a      	ldr	r2, [pc, #40]	@ (800239c <HAL_Init+0x40>)
 8002372:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002376:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002378:	4b08      	ldr	r3, [pc, #32]	@ (800239c <HAL_Init+0x40>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a07      	ldr	r2, [pc, #28]	@ (800239c <HAL_Init+0x40>)
 800237e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002382:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002384:	2003      	movs	r0, #3
 8002386:	f000 f94f 	bl	8002628 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800238a:	2000      	movs	r0, #0
 800238c:	f000 f808 	bl	80023a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002390:	f7ff fcda 	bl	8001d48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	40023c00 	.word	0x40023c00

080023a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023a8:	4b12      	ldr	r3, [pc, #72]	@ (80023f4 <HAL_InitTick+0x54>)
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	4b12      	ldr	r3, [pc, #72]	@ (80023f8 <HAL_InitTick+0x58>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	4619      	mov	r1, r3
 80023b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80023ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80023be:	4618      	mov	r0, r3
 80023c0:	f000 f967 	bl	8002692 <HAL_SYSTICK_Config>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e00e      	b.n	80023ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2b0f      	cmp	r3, #15
 80023d2:	d80a      	bhi.n	80023ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023d4:	2200      	movs	r2, #0
 80023d6:	6879      	ldr	r1, [r7, #4]
 80023d8:	f04f 30ff 	mov.w	r0, #4294967295
 80023dc:	f000 f92f 	bl	800263e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023e0:	4a06      	ldr	r2, [pc, #24]	@ (80023fc <HAL_InitTick+0x5c>)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
 80023e8:	e000      	b.n	80023ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3708      	adds	r7, #8
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	20000028 	.word	0x20000028
 80023f8:	20000030 	.word	0x20000030
 80023fc:	2000002c 	.word	0x2000002c

08002400 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002404:	4b06      	ldr	r3, [pc, #24]	@ (8002420 <HAL_IncTick+0x20>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	461a      	mov	r2, r3
 800240a:	4b06      	ldr	r3, [pc, #24]	@ (8002424 <HAL_IncTick+0x24>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4413      	add	r3, r2
 8002410:	4a04      	ldr	r2, [pc, #16]	@ (8002424 <HAL_IncTick+0x24>)
 8002412:	6013      	str	r3, [r2, #0]
}
 8002414:	bf00      	nop
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	20000030 	.word	0x20000030
 8002424:	20000484 	.word	0x20000484

08002428 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  return uwTick;
 800242c:	4b03      	ldr	r3, [pc, #12]	@ (800243c <HAL_GetTick+0x14>)
 800242e:	681b      	ldr	r3, [r3, #0]
}
 8002430:	4618      	mov	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	20000484 	.word	0x20000484

08002440 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002448:	f7ff ffee 	bl	8002428 <HAL_GetTick>
 800244c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002458:	d005      	beq.n	8002466 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800245a:	4b0a      	ldr	r3, [pc, #40]	@ (8002484 <HAL_Delay+0x44>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	461a      	mov	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	4413      	add	r3, r2
 8002464:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002466:	bf00      	nop
 8002468:	f7ff ffde 	bl	8002428 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	429a      	cmp	r2, r3
 8002476:	d8f7      	bhi.n	8002468 <HAL_Delay+0x28>
  {
  }
}
 8002478:	bf00      	nop
 800247a:	bf00      	nop
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20000030 	.word	0x20000030

08002488 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002498:	4b0c      	ldr	r3, [pc, #48]	@ (80024cc <__NVIC_SetPriorityGrouping+0x44>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800249e:	68ba      	ldr	r2, [r7, #8]
 80024a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024a4:	4013      	ands	r3, r2
 80024a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ba:	4a04      	ldr	r2, [pc, #16]	@ (80024cc <__NVIC_SetPriorityGrouping+0x44>)
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	60d3      	str	r3, [r2, #12]
}
 80024c0:	bf00      	nop
 80024c2:	3714      	adds	r7, #20
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	e000ed00 	.word	0xe000ed00

080024d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024d4:	4b04      	ldr	r3, [pc, #16]	@ (80024e8 <__NVIC_GetPriorityGrouping+0x18>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	0a1b      	lsrs	r3, r3, #8
 80024da:	f003 0307 	and.w	r3, r3, #7
}
 80024de:	4618      	mov	r0, r3
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	e000ed00 	.word	0xe000ed00

080024ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	4603      	mov	r3, r0
 80024f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	db0b      	blt.n	8002516 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024fe:	79fb      	ldrb	r3, [r7, #7]
 8002500:	f003 021f 	and.w	r2, r3, #31
 8002504:	4907      	ldr	r1, [pc, #28]	@ (8002524 <__NVIC_EnableIRQ+0x38>)
 8002506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250a:	095b      	lsrs	r3, r3, #5
 800250c:	2001      	movs	r0, #1
 800250e:	fa00 f202 	lsl.w	r2, r0, r2
 8002512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002516:	bf00      	nop
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	e000e100 	.word	0xe000e100

08002528 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	4603      	mov	r3, r0
 8002530:	6039      	str	r1, [r7, #0]
 8002532:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002538:	2b00      	cmp	r3, #0
 800253a:	db0a      	blt.n	8002552 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	b2da      	uxtb	r2, r3
 8002540:	490c      	ldr	r1, [pc, #48]	@ (8002574 <__NVIC_SetPriority+0x4c>)
 8002542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002546:	0112      	lsls	r2, r2, #4
 8002548:	b2d2      	uxtb	r2, r2
 800254a:	440b      	add	r3, r1
 800254c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002550:	e00a      	b.n	8002568 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	b2da      	uxtb	r2, r3
 8002556:	4908      	ldr	r1, [pc, #32]	@ (8002578 <__NVIC_SetPriority+0x50>)
 8002558:	79fb      	ldrb	r3, [r7, #7]
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	3b04      	subs	r3, #4
 8002560:	0112      	lsls	r2, r2, #4
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	440b      	add	r3, r1
 8002566:	761a      	strb	r2, [r3, #24]
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	e000e100 	.word	0xe000e100
 8002578:	e000ed00 	.word	0xe000ed00

0800257c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800257c:	b480      	push	{r7}
 800257e:	b089      	sub	sp, #36	@ 0x24
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	f1c3 0307 	rsb	r3, r3, #7
 8002596:	2b04      	cmp	r3, #4
 8002598:	bf28      	it	cs
 800259a:	2304      	movcs	r3, #4
 800259c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	3304      	adds	r3, #4
 80025a2:	2b06      	cmp	r3, #6
 80025a4:	d902      	bls.n	80025ac <NVIC_EncodePriority+0x30>
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	3b03      	subs	r3, #3
 80025aa:	e000      	b.n	80025ae <NVIC_EncodePriority+0x32>
 80025ac:	2300      	movs	r3, #0
 80025ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b0:	f04f 32ff 	mov.w	r2, #4294967295
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ba:	43da      	mvns	r2, r3
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	401a      	ands	r2, r3
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025c4:	f04f 31ff 	mov.w	r1, #4294967295
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	fa01 f303 	lsl.w	r3, r1, r3
 80025ce:	43d9      	mvns	r1, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d4:	4313      	orrs	r3, r2
         );
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3724      	adds	r7, #36	@ 0x24
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
	...

080025e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3b01      	subs	r3, #1
 80025f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025f4:	d301      	bcc.n	80025fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025f6:	2301      	movs	r3, #1
 80025f8:	e00f      	b.n	800261a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002624 <SysTick_Config+0x40>)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3b01      	subs	r3, #1
 8002600:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002602:	210f      	movs	r1, #15
 8002604:	f04f 30ff 	mov.w	r0, #4294967295
 8002608:	f7ff ff8e 	bl	8002528 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800260c:	4b05      	ldr	r3, [pc, #20]	@ (8002624 <SysTick_Config+0x40>)
 800260e:	2200      	movs	r2, #0
 8002610:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002612:	4b04      	ldr	r3, [pc, #16]	@ (8002624 <SysTick_Config+0x40>)
 8002614:	2207      	movs	r2, #7
 8002616:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	e000e010 	.word	0xe000e010

08002628 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f7ff ff29 	bl	8002488 <__NVIC_SetPriorityGrouping>
}
 8002636:	bf00      	nop
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800263e:	b580      	push	{r7, lr}
 8002640:	b086      	sub	sp, #24
 8002642:	af00      	add	r7, sp, #0
 8002644:	4603      	mov	r3, r0
 8002646:	60b9      	str	r1, [r7, #8]
 8002648:	607a      	str	r2, [r7, #4]
 800264a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002650:	f7ff ff3e 	bl	80024d0 <__NVIC_GetPriorityGrouping>
 8002654:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	68b9      	ldr	r1, [r7, #8]
 800265a:	6978      	ldr	r0, [r7, #20]
 800265c:	f7ff ff8e 	bl	800257c <NVIC_EncodePriority>
 8002660:	4602      	mov	r2, r0
 8002662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002666:	4611      	mov	r1, r2
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff ff5d 	bl	8002528 <__NVIC_SetPriority>
}
 800266e:	bf00      	nop
 8002670:	3718      	adds	r7, #24
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b082      	sub	sp, #8
 800267a:	af00      	add	r7, sp, #0
 800267c:	4603      	mov	r3, r0
 800267e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff ff31 	bl	80024ec <__NVIC_EnableIRQ>
}
 800268a:	bf00      	nop
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b082      	sub	sp, #8
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f7ff ffa2 	bl	80025e4 <SysTick_Config>
 80026a0:	4603      	mov	r3, r0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b084      	sub	sp, #16
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026b6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80026b8:	f7ff feb6 	bl	8002428 <HAL_GetTick>
 80026bc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d008      	beq.n	80026dc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2280      	movs	r2, #128	@ 0x80
 80026ce:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e052      	b.n	8002782 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0216 	bic.w	r2, r2, #22
 80026ea:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	695a      	ldr	r2, [r3, #20]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026fa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002700:	2b00      	cmp	r3, #0
 8002702:	d103      	bne.n	800270c <HAL_DMA_Abort+0x62>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002708:	2b00      	cmp	r3, #0
 800270a:	d007      	beq.n	800271c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f022 0208 	bic.w	r2, r2, #8
 800271a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f022 0201 	bic.w	r2, r2, #1
 800272a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800272c:	e013      	b.n	8002756 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800272e:	f7ff fe7b 	bl	8002428 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b05      	cmp	r3, #5
 800273a:	d90c      	bls.n	8002756 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2220      	movs	r2, #32
 8002740:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2203      	movs	r2, #3
 8002746:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e015      	b.n	8002782 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1e4      	bne.n	800272e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002768:	223f      	movs	r2, #63	@ 0x3f
 800276a:	409a      	lsls	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800278a:	b480      	push	{r7}
 800278c:	b083      	sub	sp, #12
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d004      	beq.n	80027a8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2280      	movs	r2, #128	@ 0x80
 80027a2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e00c      	b.n	80027c2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2205      	movs	r2, #5
 80027ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f022 0201 	bic.w	r2, r2, #1
 80027be:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr

080027ce <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b083      	sub	sp, #12
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027dc:	b2db      	uxtb	r3, r3
}
 80027de:	4618      	mov	r0, r3
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
	...

080027ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b089      	sub	sp, #36	@ 0x24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027fa:	2300      	movs	r3, #0
 80027fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027fe:	2300      	movs	r3, #0
 8002800:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002802:	2300      	movs	r3, #0
 8002804:	61fb      	str	r3, [r7, #28]
 8002806:	e159      	b.n	8002abc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002808:	2201      	movs	r2, #1
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	4013      	ands	r3, r2
 800281a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	429a      	cmp	r2, r3
 8002822:	f040 8148 	bne.w	8002ab6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f003 0303 	and.w	r3, r3, #3
 800282e:	2b01      	cmp	r3, #1
 8002830:	d005      	beq.n	800283e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800283a:	2b02      	cmp	r3, #2
 800283c:	d130      	bne.n	80028a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	2203      	movs	r2, #3
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	43db      	mvns	r3, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4013      	ands	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	68da      	ldr	r2, [r3, #12]
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4313      	orrs	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002874:	2201      	movs	r2, #1
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	43db      	mvns	r3, r3
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	4013      	ands	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	091b      	lsrs	r3, r3, #4
 800288a:	f003 0201 	and.w	r2, r3, #1
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	4313      	orrs	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f003 0303 	and.w	r3, r3, #3
 80028a8:	2b03      	cmp	r3, #3
 80028aa:	d017      	beq.n	80028dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	2203      	movs	r2, #3
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	43db      	mvns	r3, r3
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4013      	ands	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f003 0303 	and.w	r3, r3, #3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d123      	bne.n	8002930 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	08da      	lsrs	r2, r3, #3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	3208      	adds	r2, #8
 80028f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	f003 0307 	and.w	r3, r3, #7
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	220f      	movs	r2, #15
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	43db      	mvns	r3, r3
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	4013      	ands	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	691a      	ldr	r2, [r3, #16]
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	4313      	orrs	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	08da      	lsrs	r2, r3, #3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	3208      	adds	r2, #8
 800292a:	69b9      	ldr	r1, [r7, #24]
 800292c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	2203      	movs	r2, #3
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	43db      	mvns	r3, r3
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	4013      	ands	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f003 0203 	and.w	r2, r3, #3
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	4313      	orrs	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800296c:	2b00      	cmp	r3, #0
 800296e:	f000 80a2 	beq.w	8002ab6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002972:	2300      	movs	r3, #0
 8002974:	60fb      	str	r3, [r7, #12]
 8002976:	4b57      	ldr	r3, [pc, #348]	@ (8002ad4 <HAL_GPIO_Init+0x2e8>)
 8002978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800297a:	4a56      	ldr	r2, [pc, #344]	@ (8002ad4 <HAL_GPIO_Init+0x2e8>)
 800297c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002980:	6453      	str	r3, [r2, #68]	@ 0x44
 8002982:	4b54      	ldr	r3, [pc, #336]	@ (8002ad4 <HAL_GPIO_Init+0x2e8>)
 8002984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002986:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800298a:	60fb      	str	r3, [r7, #12]
 800298c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800298e:	4a52      	ldr	r2, [pc, #328]	@ (8002ad8 <HAL_GPIO_Init+0x2ec>)
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	089b      	lsrs	r3, r3, #2
 8002994:	3302      	adds	r3, #2
 8002996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800299a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	f003 0303 	and.w	r3, r3, #3
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	220f      	movs	r2, #15
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	43db      	mvns	r3, r3
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	4013      	ands	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a49      	ldr	r2, [pc, #292]	@ (8002adc <HAL_GPIO_Init+0x2f0>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d019      	beq.n	80029ee <HAL_GPIO_Init+0x202>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a48      	ldr	r2, [pc, #288]	@ (8002ae0 <HAL_GPIO_Init+0x2f4>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d013      	beq.n	80029ea <HAL_GPIO_Init+0x1fe>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a47      	ldr	r2, [pc, #284]	@ (8002ae4 <HAL_GPIO_Init+0x2f8>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d00d      	beq.n	80029e6 <HAL_GPIO_Init+0x1fa>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a46      	ldr	r2, [pc, #280]	@ (8002ae8 <HAL_GPIO_Init+0x2fc>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d007      	beq.n	80029e2 <HAL_GPIO_Init+0x1f6>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a45      	ldr	r2, [pc, #276]	@ (8002aec <HAL_GPIO_Init+0x300>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d101      	bne.n	80029de <HAL_GPIO_Init+0x1f2>
 80029da:	2304      	movs	r3, #4
 80029dc:	e008      	b.n	80029f0 <HAL_GPIO_Init+0x204>
 80029de:	2307      	movs	r3, #7
 80029e0:	e006      	b.n	80029f0 <HAL_GPIO_Init+0x204>
 80029e2:	2303      	movs	r3, #3
 80029e4:	e004      	b.n	80029f0 <HAL_GPIO_Init+0x204>
 80029e6:	2302      	movs	r3, #2
 80029e8:	e002      	b.n	80029f0 <HAL_GPIO_Init+0x204>
 80029ea:	2301      	movs	r3, #1
 80029ec:	e000      	b.n	80029f0 <HAL_GPIO_Init+0x204>
 80029ee:	2300      	movs	r3, #0
 80029f0:	69fa      	ldr	r2, [r7, #28]
 80029f2:	f002 0203 	and.w	r2, r2, #3
 80029f6:	0092      	lsls	r2, r2, #2
 80029f8:	4093      	lsls	r3, r2
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a00:	4935      	ldr	r1, [pc, #212]	@ (8002ad8 <HAL_GPIO_Init+0x2ec>)
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	089b      	lsrs	r3, r3, #2
 8002a06:	3302      	adds	r3, #2
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a0e:	4b38      	ldr	r3, [pc, #224]	@ (8002af0 <HAL_GPIO_Init+0x304>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	43db      	mvns	r3, r3
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a32:	4a2f      	ldr	r2, [pc, #188]	@ (8002af0 <HAL_GPIO_Init+0x304>)
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a38:	4b2d      	ldr	r3, [pc, #180]	@ (8002af0 <HAL_GPIO_Init+0x304>)
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	43db      	mvns	r3, r3
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4013      	ands	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d003      	beq.n	8002a5c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a5c:	4a24      	ldr	r2, [pc, #144]	@ (8002af0 <HAL_GPIO_Init+0x304>)
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a62:	4b23      	ldr	r3, [pc, #140]	@ (8002af0 <HAL_GPIO_Init+0x304>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a86:	4a1a      	ldr	r2, [pc, #104]	@ (8002af0 <HAL_GPIO_Init+0x304>)
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a8c:	4b18      	ldr	r3, [pc, #96]	@ (8002af0 <HAL_GPIO_Init+0x304>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	43db      	mvns	r3, r3
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ab0:	4a0f      	ldr	r2, [pc, #60]	@ (8002af0 <HAL_GPIO_Init+0x304>)
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	61fb      	str	r3, [r7, #28]
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	2b0f      	cmp	r3, #15
 8002ac0:	f67f aea2 	bls.w	8002808 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ac4:	bf00      	nop
 8002ac6:	bf00      	nop
 8002ac8:	3724      	adds	r7, #36	@ 0x24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	40023800 	.word	0x40023800
 8002ad8:	40013800 	.word	0x40013800
 8002adc:	40020000 	.word	0x40020000
 8002ae0:	40020400 	.word	0x40020400
 8002ae4:	40020800 	.word	0x40020800
 8002ae8:	40020c00 	.word	0x40020c00
 8002aec:	40021000 	.word	0x40021000
 8002af0:	40013c00 	.word	0x40013c00

08002af4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	460b      	mov	r3, r1
 8002afe:	807b      	strh	r3, [r7, #2]
 8002b00:	4613      	mov	r3, r2
 8002b02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b04:	787b      	ldrb	r3, [r7, #1]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d003      	beq.n	8002b12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b0a:	887a      	ldrh	r2, [r7, #2]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b10:	e003      	b.n	8002b1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b12:	887b      	ldrh	r3, [r7, #2]
 8002b14:	041a      	lsls	r2, r3, #16
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	619a      	str	r2, [r3, #24]
}
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
	...

08002b28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e12b      	b.n	8002d92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d106      	bne.n	8002b54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7ff f922 	bl	8001d98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2224      	movs	r2, #36	@ 0x24
 8002b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f022 0201 	bic.w	r2, r2, #1
 8002b6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b8c:	f002 f9f8 	bl	8004f80 <HAL_RCC_GetPCLK1Freq>
 8002b90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	4a81      	ldr	r2, [pc, #516]	@ (8002d9c <HAL_I2C_Init+0x274>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d807      	bhi.n	8002bac <HAL_I2C_Init+0x84>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	4a80      	ldr	r2, [pc, #512]	@ (8002da0 <HAL_I2C_Init+0x278>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	bf94      	ite	ls
 8002ba4:	2301      	movls	r3, #1
 8002ba6:	2300      	movhi	r3, #0
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	e006      	b.n	8002bba <HAL_I2C_Init+0x92>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	4a7d      	ldr	r2, [pc, #500]	@ (8002da4 <HAL_I2C_Init+0x27c>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	bf94      	ite	ls
 8002bb4:	2301      	movls	r3, #1
 8002bb6:	2300      	movhi	r3, #0
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e0e7      	b.n	8002d92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	4a78      	ldr	r2, [pc, #480]	@ (8002da8 <HAL_I2C_Init+0x280>)
 8002bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bca:	0c9b      	lsrs	r3, r3, #18
 8002bcc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68ba      	ldr	r2, [r7, #8]
 8002bde:	430a      	orrs	r2, r1
 8002be0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	6a1b      	ldr	r3, [r3, #32]
 8002be8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	4a6a      	ldr	r2, [pc, #424]	@ (8002d9c <HAL_I2C_Init+0x274>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d802      	bhi.n	8002bfc <HAL_I2C_Init+0xd4>
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	e009      	b.n	8002c10 <HAL_I2C_Init+0xe8>
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002c02:	fb02 f303 	mul.w	r3, r2, r3
 8002c06:	4a69      	ldr	r2, [pc, #420]	@ (8002dac <HAL_I2C_Init+0x284>)
 8002c08:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0c:	099b      	lsrs	r3, r3, #6
 8002c0e:	3301      	adds	r3, #1
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	6812      	ldr	r2, [r2, #0]
 8002c14:	430b      	orrs	r3, r1
 8002c16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002c22:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	495c      	ldr	r1, [pc, #368]	@ (8002d9c <HAL_I2C_Init+0x274>)
 8002c2c:	428b      	cmp	r3, r1
 8002c2e:	d819      	bhi.n	8002c64 <HAL_I2C_Init+0x13c>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	1e59      	subs	r1, r3, #1
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c3e:	1c59      	adds	r1, r3, #1
 8002c40:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002c44:	400b      	ands	r3, r1
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00a      	beq.n	8002c60 <HAL_I2C_Init+0x138>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	1e59      	subs	r1, r3, #1
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c58:	3301      	adds	r3, #1
 8002c5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c5e:	e051      	b.n	8002d04 <HAL_I2C_Init+0x1dc>
 8002c60:	2304      	movs	r3, #4
 8002c62:	e04f      	b.n	8002d04 <HAL_I2C_Init+0x1dc>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d111      	bne.n	8002c90 <HAL_I2C_Init+0x168>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	1e58      	subs	r0, r3, #1
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6859      	ldr	r1, [r3, #4]
 8002c74:	460b      	mov	r3, r1
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	440b      	add	r3, r1
 8002c7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c7e:	3301      	adds	r3, #1
 8002c80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	bf0c      	ite	eq
 8002c88:	2301      	moveq	r3, #1
 8002c8a:	2300      	movne	r3, #0
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	e012      	b.n	8002cb6 <HAL_I2C_Init+0x18e>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	1e58      	subs	r0, r3, #1
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6859      	ldr	r1, [r3, #4]
 8002c98:	460b      	mov	r3, r1
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	0099      	lsls	r1, r3, #2
 8002ca0:	440b      	add	r3, r1
 8002ca2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	bf0c      	ite	eq
 8002cb0:	2301      	moveq	r3, #1
 8002cb2:	2300      	movne	r3, #0
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <HAL_I2C_Init+0x196>
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e022      	b.n	8002d04 <HAL_I2C_Init+0x1dc>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10e      	bne.n	8002ce4 <HAL_I2C_Init+0x1bc>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	1e58      	subs	r0, r3, #1
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6859      	ldr	r1, [r3, #4]
 8002cce:	460b      	mov	r3, r1
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	440b      	add	r3, r1
 8002cd4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cd8:	3301      	adds	r3, #1
 8002cda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ce2:	e00f      	b.n	8002d04 <HAL_I2C_Init+0x1dc>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	1e58      	subs	r0, r3, #1
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6859      	ldr	r1, [r3, #4]
 8002cec:	460b      	mov	r3, r1
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	0099      	lsls	r1, r3, #2
 8002cf4:	440b      	add	r3, r1
 8002cf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d00:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	6809      	ldr	r1, [r1, #0]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	69da      	ldr	r2, [r3, #28]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	430a      	orrs	r2, r1
 8002d26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002d32:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	6911      	ldr	r1, [r2, #16]
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	68d2      	ldr	r2, [r2, #12]
 8002d3e:	4311      	orrs	r1, r2
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	6812      	ldr	r2, [r2, #0]
 8002d44:	430b      	orrs	r3, r1
 8002d46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	695a      	ldr	r2, [r3, #20]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	430a      	orrs	r2, r1
 8002d62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f042 0201 	orr.w	r2, r2, #1
 8002d72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2220      	movs	r2, #32
 8002d7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	000186a0 	.word	0x000186a0
 8002da0:	001e847f 	.word	0x001e847f
 8002da4:	003d08ff 	.word	0x003d08ff
 8002da8:	431bde83 	.word	0x431bde83
 8002dac:	10624dd3 	.word	0x10624dd3

08002db0 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dc2:	2b80      	cmp	r3, #128	@ 0x80
 8002dc4:	d103      	bne.n	8002dce <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	611a      	str	r2, [r3, #16]
  }
}
 8002dce:	bf00      	nop
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
	...

08002ddc <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b087      	sub	sp, #28
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	607a      	str	r2, [r7, #4]
 8002de6:	461a      	mov	r2, r3
 8002de8:	460b      	mov	r3, r1
 8002dea:	817b      	strh	r3, [r7, #10]
 8002dec:	4613      	mov	r3, r2
 8002dee:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002df0:	2300      	movs	r3, #0
 8002df2:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	2b20      	cmp	r3, #32
 8002dfe:	f040 8089 	bne.w	8002f14 <HAL_I2C_Master_Receive_IT+0x138>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002e02:	4b48      	ldr	r3, [pc, #288]	@ (8002f24 <HAL_I2C_Master_Receive_IT+0x148>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	08db      	lsrs	r3, r3, #3
 8002e08:	4a47      	ldr	r2, [pc, #284]	@ (8002f28 <HAL_I2C_Master_Receive_IT+0x14c>)
 8002e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0e:	0a1a      	lsrs	r2, r3, #8
 8002e10:	4613      	mov	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	4413      	add	r3, r2
 8002e16:	009a      	lsls	r2, r3, #2
 8002e18:	4413      	add	r3, r2
 8002e1a:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d112      	bne.n	8002e4e <HAL_I2C_Master_Receive_IT+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2220      	movs	r2, #32
 8002e32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e42:	f043 0220 	orr.w	r2, r3, #32
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	e063      	b.n	8002f16 <HAL_I2C_Master_Receive_IT+0x13a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d0df      	beq.n	8002e1c <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d101      	bne.n	8002e6a <HAL_I2C_Master_Receive_IT+0x8e>
 8002e66:	2302      	movs	r3, #2
 8002e68:	e055      	b.n	8002f16 <HAL_I2C_Master_Receive_IT+0x13a>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0301 	and.w	r3, r3, #1
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d007      	beq.n	8002e90 <HAL_I2C_Master_Receive_IT+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f042 0201 	orr.w	r2, r2, #1
 8002e8e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e9e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2222      	movs	r2, #34	@ 0x22
 8002ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2210      	movs	r2, #16
 8002eac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	893a      	ldrh	r2, [r7, #8]
 8002ec0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4a17      	ldr	r2, [pc, #92]	@ (8002f2c <HAL_I2C_Master_Receive_IT+0x150>)
 8002ed0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8002ed2:	897a      	ldrh	r2, [r7, #10]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	645a      	str	r2, [r3, #68]	@ 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	685a      	ldr	r2, [r3, #4]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8002eee:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002efe:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f0e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002f10:	2300      	movs	r3, #0
 8002f12:	e000      	b.n	8002f16 <HAL_I2C_Master_Receive_IT+0x13a>
  }
  else
  {
    return HAL_BUSY;
 8002f14:	2302      	movs	r3, #2
  }
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	371c      	adds	r7, #28
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	20000028 	.word	0x20000028
 8002f28:	14f8b589 	.word	0x14f8b589
 8002f2c:	ffff0000 	.word	0xffff0000

08002f30 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b088      	sub	sp, #32
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f48:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f50:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f58:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002f5a:	7bfb      	ldrb	r3, [r7, #15]
 8002f5c:	2b10      	cmp	r3, #16
 8002f5e:	d003      	beq.n	8002f68 <HAL_I2C_EV_IRQHandler+0x38>
 8002f60:	7bfb      	ldrb	r3, [r7, #15]
 8002f62:	2b40      	cmp	r3, #64	@ 0x40
 8002f64:	f040 80b1 	bne.w	80030ca <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d10d      	bne.n	8002f9e <HAL_I2C_EV_IRQHandler+0x6e>
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8002f88:	d003      	beq.n	8002f92 <HAL_I2C_EV_IRQHandler+0x62>
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002f90:	d101      	bne.n	8002f96 <HAL_I2C_EV_IRQHandler+0x66>
 8002f92:	2301      	movs	r3, #1
 8002f94:	e000      	b.n	8002f98 <HAL_I2C_EV_IRQHandler+0x68>
 8002f96:	2300      	movs	r3, #0
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	f000 8114 	beq.w	80031c6 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00b      	beq.n	8002fc0 <HAL_I2C_EV_IRQHandler+0x90>
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d006      	beq.n	8002fc0 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f001 fb58 	bl	8004668 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f000 fcd1 	bl	8003960 <I2C_Master_SB>
 8002fbe:	e083      	b.n	80030c8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	f003 0308 	and.w	r3, r3, #8
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d008      	beq.n	8002fdc <HAL_I2C_EV_IRQHandler+0xac>
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d003      	beq.n	8002fdc <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f000 fd49 	bl	8003a6c <I2C_Master_ADD10>
 8002fda:	e075      	b.n	80030c8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d008      	beq.n	8002ff8 <HAL_I2C_EV_IRQHandler+0xc8>
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d003      	beq.n	8002ff8 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 fd65 	bl	8003ac0 <I2C_Master_ADDR>
 8002ff6:	e067      	b.n	80030c8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	f003 0304 	and.w	r3, r3, #4
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d036      	beq.n	8003070 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800300c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003010:	f000 80db 	beq.w	80031ca <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00d      	beq.n	800303a <HAL_I2C_EV_IRQHandler+0x10a>
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003024:	2b00      	cmp	r3, #0
 8003026:	d008      	beq.n	800303a <HAL_I2C_EV_IRQHandler+0x10a>
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	f003 0304 	and.w	r3, r3, #4
 800302e:	2b00      	cmp	r3, #0
 8003030:	d103      	bne.n	800303a <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 f92d 	bl	8003292 <I2C_MasterTransmit_TXE>
 8003038:	e046      	b.n	80030c8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	f003 0304 	and.w	r3, r3, #4
 8003040:	2b00      	cmp	r3, #0
 8003042:	f000 80c2 	beq.w	80031ca <HAL_I2C_EV_IRQHandler+0x29a>
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 80bc 	beq.w	80031ca <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003052:	7bbb      	ldrb	r3, [r7, #14]
 8003054:	2b21      	cmp	r3, #33	@ 0x21
 8003056:	d103      	bne.n	8003060 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 f9b6 	bl	80033ca <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800305e:	e0b4      	b.n	80031ca <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003060:	7bfb      	ldrb	r3, [r7, #15]
 8003062:	2b40      	cmp	r3, #64	@ 0x40
 8003064:	f040 80b1 	bne.w	80031ca <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f000 fa24 	bl	80034b6 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800306e:	e0ac      	b.n	80031ca <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800307a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800307e:	f000 80a4 	beq.w	80031ca <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00d      	beq.n	80030a8 <HAL_I2C_EV_IRQHandler+0x178>
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003092:	2b00      	cmp	r3, #0
 8003094:	d008      	beq.n	80030a8 <HAL_I2C_EV_IRQHandler+0x178>
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	f003 0304 	and.w	r3, r3, #4
 800309c:	2b00      	cmp	r3, #0
 800309e:	d103      	bne.n	80030a8 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 faa0 	bl	80035e6 <I2C_MasterReceive_RXNE>
 80030a6:	e00f      	b.n	80030c8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	f003 0304 	and.w	r3, r3, #4
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f000 808b 	beq.w	80031ca <HAL_I2C_EV_IRQHandler+0x29a>
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 8085 	beq.w	80031ca <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f000 fb58 	bl	8003776 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030c6:	e080      	b.n	80031ca <HAL_I2C_EV_IRQHandler+0x29a>
 80030c8:	e07f      	b.n	80031ca <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d004      	beq.n	80030dc <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	695b      	ldr	r3, [r3, #20]
 80030d8:	61fb      	str	r3, [r7, #28]
 80030da:	e007      	b.n	80030ec <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d011      	beq.n	800311a <HAL_I2C_EV_IRQHandler+0x1ea>
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00c      	beq.n	800311a <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003104:	2b00      	cmp	r3, #0
 8003106:	d003      	beq.n	8003110 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003110:	69b9      	ldr	r1, [r7, #24]
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 ff23 	bl	8003f5e <I2C_Slave_ADDR>
 8003118:	e05a      	b.n	80031d0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	f003 0310 	and.w	r3, r3, #16
 8003120:	2b00      	cmp	r3, #0
 8003122:	d008      	beq.n	8003136 <HAL_I2C_EV_IRQHandler+0x206>
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800312a:	2b00      	cmp	r3, #0
 800312c:	d003      	beq.n	8003136 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 ff5e 	bl	8003ff0 <I2C_Slave_STOPF>
 8003134:	e04c      	b.n	80031d0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003136:	7bbb      	ldrb	r3, [r7, #14]
 8003138:	2b21      	cmp	r3, #33	@ 0x21
 800313a:	d002      	beq.n	8003142 <HAL_I2C_EV_IRQHandler+0x212>
 800313c:	7bbb      	ldrb	r3, [r7, #14]
 800313e:	2b29      	cmp	r3, #41	@ 0x29
 8003140:	d120      	bne.n	8003184 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003148:	2b00      	cmp	r3, #0
 800314a:	d00d      	beq.n	8003168 <HAL_I2C_EV_IRQHandler+0x238>
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003152:	2b00      	cmp	r3, #0
 8003154:	d008      	beq.n	8003168 <HAL_I2C_EV_IRQHandler+0x238>
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	f003 0304 	and.w	r3, r3, #4
 800315c:	2b00      	cmp	r3, #0
 800315e:	d103      	bne.n	8003168 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f000 fe3e 	bl	8003de2 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003166:	e032      	b.n	80031ce <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	f003 0304 	and.w	r3, r3, #4
 800316e:	2b00      	cmp	r3, #0
 8003170:	d02d      	beq.n	80031ce <HAL_I2C_EV_IRQHandler+0x29e>
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003178:	2b00      	cmp	r3, #0
 800317a:	d028      	beq.n	80031ce <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 fe6d 	bl	8003e5c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003182:	e024      	b.n	80031ce <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00d      	beq.n	80031aa <HAL_I2C_EV_IRQHandler+0x27a>
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003194:	2b00      	cmp	r3, #0
 8003196:	d008      	beq.n	80031aa <HAL_I2C_EV_IRQHandler+0x27a>
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	f003 0304 	and.w	r3, r3, #4
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d103      	bne.n	80031aa <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 fe7b 	bl	8003e9e <I2C_SlaveReceive_RXNE>
 80031a8:	e012      	b.n	80031d0 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	f003 0304 	and.w	r3, r3, #4
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d00d      	beq.n	80031d0 <HAL_I2C_EV_IRQHandler+0x2a0>
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d008      	beq.n	80031d0 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 feab 	bl	8003f1a <I2C_SlaveReceive_BTF>
 80031c4:	e004      	b.n	80031d0 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80031c6:	bf00      	nop
 80031c8:	e002      	b.n	80031d0 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031ca:	bf00      	nop
 80031cc:	e000      	b.n	80031d0 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031ce:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80031d0:	3720      	adds	r7, #32
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031d6:	b480      	push	{r7}
 80031d8:	b083      	sub	sp, #12
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80031de:	bf00      	nop
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b083      	sub	sp, #12
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80031f2:	bf00      	nop
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031fe:	b480      	push	{r7}
 8003200:	b083      	sub	sp, #12
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003212:	b480      	push	{r7}
 8003214:	b083      	sub	sp, #12
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
 800321a:	460b      	mov	r3, r1
 800321c:	70fb      	strb	r3, [r7, #3]
 800321e:	4613      	mov	r3, r2
 8003220:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003222:	bf00      	nop
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr

0800322e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800322e:	b480      	push	{r7}
 8003230:	b083      	sub	sp, #12
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003236:	bf00      	nop
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr

08003242 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003242:	b480      	push	{r7}
 8003244:	b083      	sub	sp, #12
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800324a:	bf00      	nop
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr

08003256 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003256:	b480      	push	{r7}
 8003258:	b083      	sub	sp, #12
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800325e:	bf00      	nop
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr

0800326a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800326a:	b480      	push	{r7}
 800326c:	b083      	sub	sp, #12
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003272:	bf00      	nop
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr

0800327e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800327e:	b480      	push	{r7}
 8003280:	b083      	sub	sp, #12
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003286:	bf00      	nop
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr

08003292 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b084      	sub	sp, #16
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032a0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80032a8:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ae:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d150      	bne.n	800335a <I2C_MasterTransmit_TXE+0xc8>
 80032b8:	7bfb      	ldrb	r3, [r7, #15]
 80032ba:	2b21      	cmp	r3, #33	@ 0x21
 80032bc:	d14d      	bne.n	800335a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	2b08      	cmp	r3, #8
 80032c2:	d01d      	beq.n	8003300 <I2C_MasterTransmit_TXE+0x6e>
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	2b20      	cmp	r3, #32
 80032c8:	d01a      	beq.n	8003300 <I2C_MasterTransmit_TXE+0x6e>
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80032d0:	d016      	beq.n	8003300 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	685a      	ldr	r2, [r3, #4]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80032e0:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2211      	movs	r2, #17
 80032e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2220      	movs	r2, #32
 80032f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f7ff ff6c 	bl	80031d6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80032fe:	e060      	b.n	80033c2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	685a      	ldr	r2, [r3, #4]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800330e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800331e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2220      	movs	r2, #32
 800332a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b40      	cmp	r3, #64	@ 0x40
 8003338:	d107      	bne.n	800334a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f7ff ff7d 	bl	8003242 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003348:	e03b      	b.n	80033c2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f7ff ff3f 	bl	80031d6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003358:	e033      	b.n	80033c2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800335a:	7bfb      	ldrb	r3, [r7, #15]
 800335c:	2b21      	cmp	r3, #33	@ 0x21
 800335e:	d005      	beq.n	800336c <I2C_MasterTransmit_TXE+0xda>
 8003360:	7bbb      	ldrb	r3, [r7, #14]
 8003362:	2b40      	cmp	r3, #64	@ 0x40
 8003364:	d12d      	bne.n	80033c2 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003366:	7bfb      	ldrb	r3, [r7, #15]
 8003368:	2b22      	cmp	r3, #34	@ 0x22
 800336a:	d12a      	bne.n	80033c2 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003370:	b29b      	uxth	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d108      	bne.n	8003388 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003384:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003386:	e01c      	b.n	80033c2 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800338e:	b2db      	uxtb	r3, r3
 8003390:	2b40      	cmp	r3, #64	@ 0x40
 8003392:	d103      	bne.n	800339c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 f88e 	bl	80034b6 <I2C_MemoryTransmit_TXE_BTF>
}
 800339a:	e012      	b.n	80033c2 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a0:	781a      	ldrb	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ac:	1c5a      	adds	r2, r3, #1
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	3b01      	subs	r3, #1
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80033c0:	e7ff      	b.n	80033c2 <I2C_MasterTransmit_TXE+0x130>
 80033c2:	bf00      	nop
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b084      	sub	sp, #16
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033d6:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	2b21      	cmp	r3, #33	@ 0x21
 80033e2:	d164      	bne.n	80034ae <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d012      	beq.n	8003414 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f2:	781a      	ldrb	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033fe:	1c5a      	adds	r2, r3, #1
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003408:	b29b      	uxth	r3, r3
 800340a:	3b01      	subs	r3, #1
 800340c:	b29a      	uxth	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003412:	e04c      	b.n	80034ae <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2b08      	cmp	r3, #8
 8003418:	d01d      	beq.n	8003456 <I2C_MasterTransmit_BTF+0x8c>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2b20      	cmp	r3, #32
 800341e:	d01a      	beq.n	8003456 <I2C_MasterTransmit_BTF+0x8c>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003426:	d016      	beq.n	8003456 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685a      	ldr	r2, [r3, #4]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003436:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2211      	movs	r2, #17
 800343c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2220      	movs	r2, #32
 800344a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f7ff fec1 	bl	80031d6 <HAL_I2C_MasterTxCpltCallback>
}
 8003454:	e02b      	b.n	80034ae <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003464:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003474:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2220      	movs	r2, #32
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800348a:	b2db      	uxtb	r3, r3
 800348c:	2b40      	cmp	r3, #64	@ 0x40
 800348e:	d107      	bne.n	80034a0 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f7ff fed2 	bl	8003242 <HAL_I2C_MemTxCpltCallback>
}
 800349e:	e006      	b.n	80034ae <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f7ff fe94 	bl	80031d6 <HAL_I2C_MasterTxCpltCallback>
}
 80034ae:	bf00      	nop
 80034b0:	3710      	adds	r7, #16
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b084      	sub	sp, #16
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034c4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d11d      	bne.n	800350a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d10b      	bne.n	80034ee <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034da:	b2da      	uxtb	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034e6:	1c9a      	adds	r2, r3, #2
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80034ec:	e077      	b.n	80035de <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	121b      	asrs	r3, r3, #8
 80034f6:	b2da      	uxtb	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003502:	1c5a      	adds	r2, r3, #1
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003508:	e069      	b.n	80035de <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800350e:	2b01      	cmp	r3, #1
 8003510:	d10b      	bne.n	800352a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003516:	b2da      	uxtb	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003522:	1c5a      	adds	r2, r3, #1
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003528:	e059      	b.n	80035de <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800352e:	2b02      	cmp	r3, #2
 8003530:	d152      	bne.n	80035d8 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003532:	7bfb      	ldrb	r3, [r7, #15]
 8003534:	2b22      	cmp	r3, #34	@ 0x22
 8003536:	d10d      	bne.n	8003554 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003546:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800354c:	1c5a      	adds	r2, r3, #1
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003552:	e044      	b.n	80035de <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003558:	b29b      	uxth	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d015      	beq.n	800358a <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800355e:	7bfb      	ldrb	r3, [r7, #15]
 8003560:	2b21      	cmp	r3, #33	@ 0x21
 8003562:	d112      	bne.n	800358a <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003568:	781a      	ldrb	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003574:	1c5a      	adds	r2, r3, #1
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800357e:	b29b      	uxth	r3, r3
 8003580:	3b01      	subs	r3, #1
 8003582:	b29a      	uxth	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003588:	e029      	b.n	80035de <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800358e:	b29b      	uxth	r3, r3
 8003590:	2b00      	cmp	r3, #0
 8003592:	d124      	bne.n	80035de <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003594:	7bfb      	ldrb	r3, [r7, #15]
 8003596:	2b21      	cmp	r3, #33	@ 0x21
 8003598:	d121      	bne.n	80035de <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80035a8:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035b8:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2220      	movs	r2, #32
 80035c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f7ff fe36 	bl	8003242 <HAL_I2C_MemTxCpltCallback>
}
 80035d6:	e002      	b.n	80035de <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f7ff fbe9 	bl	8002db0 <I2C_Flush_DR>
}
 80035de:	bf00      	nop
 80035e0:	3710      	adds	r7, #16
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b084      	sub	sp, #16
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b22      	cmp	r3, #34	@ 0x22
 80035f8:	f040 80b9 	bne.w	800376e <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003600:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003606:	b29b      	uxth	r3, r3
 8003608:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	2b03      	cmp	r3, #3
 800360e:	d921      	bls.n	8003654 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	691a      	ldr	r2, [r3, #16]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361a:	b2d2      	uxtb	r2, r2
 800361c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003622:	1c5a      	adds	r2, r3, #1
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800362c:	b29b      	uxth	r3, r3
 800362e:	3b01      	subs	r3, #1
 8003630:	b29a      	uxth	r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800363a:	b29b      	uxth	r3, r3
 800363c:	2b03      	cmp	r3, #3
 800363e:	f040 8096 	bne.w	800376e <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003650:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003652:	e08c      	b.n	800376e <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003658:	2b02      	cmp	r3, #2
 800365a:	d07f      	beq.n	800375c <I2C_MasterReceive_RXNE+0x176>
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d002      	beq.n	8003668 <I2C_MasterReceive_RXNE+0x82>
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d179      	bne.n	800375c <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 ffcb 	bl	8004604 <I2C_WaitOnSTOPRequestThroughIT>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d14c      	bne.n	800370e <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003682:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	685a      	ldr	r2, [r3, #4]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003692:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	691a      	ldr	r2, [r3, #16]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800369e:	b2d2      	uxtb	r2, r2
 80036a0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a6:	1c5a      	adds	r2, r3, #1
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	3b01      	subs	r3, #1
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2220      	movs	r2, #32
 80036be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b40      	cmp	r3, #64	@ 0x40
 80036cc:	d10a      	bne.n	80036e4 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f7ff fdba 	bl	8003256 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80036e2:	e044      	b.n	800376e <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2b08      	cmp	r3, #8
 80036f0:	d002      	beq.n	80036f8 <I2C_MasterReceive_RXNE+0x112>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2b20      	cmp	r3, #32
 80036f6:	d103      	bne.n	8003700 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80036fe:	e002      	b.n	8003706 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2212      	movs	r2, #18
 8003704:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f7fd fe36 	bl	8001378 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800370c:	e02f      	b.n	800376e <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800371c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	691a      	ldr	r2, [r3, #16]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003728:	b2d2      	uxtb	r2, r2
 800372a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003730:	1c5a      	adds	r2, r3, #1
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800373a:	b29b      	uxth	r3, r3
 800373c:	3b01      	subs	r3, #1
 800373e:	b29a      	uxth	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2220      	movs	r2, #32
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f7ff fd88 	bl	800326a <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800375a:	e008      	b.n	800376e <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800376a:	605a      	str	r2, [r3, #4]
}
 800376c:	e7ff      	b.n	800376e <I2C_MasterReceive_RXNE+0x188>
 800376e:	bf00      	nop
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b084      	sub	sp, #16
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003782:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003788:	b29b      	uxth	r3, r3
 800378a:	2b04      	cmp	r3, #4
 800378c:	d11b      	bne.n	80037c6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800379c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	691a      	ldr	r2, [r3, #16]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a8:	b2d2      	uxtb	r2, r2
 80037aa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b0:	1c5a      	adds	r2, r3, #1
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	3b01      	subs	r3, #1
 80037be:	b29a      	uxth	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80037c4:	e0c8      	b.n	8003958 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	2b03      	cmp	r3, #3
 80037ce:	d129      	bne.n	8003824 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	685a      	ldr	r2, [r3, #4]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037de:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2b04      	cmp	r3, #4
 80037e4:	d00a      	beq.n	80037fc <I2C_MasterReceive_BTF+0x86>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d007      	beq.n	80037fc <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037fa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	691a      	ldr	r2, [r3, #16]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003806:	b2d2      	uxtb	r2, r2
 8003808:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800380e:	1c5a      	adds	r2, r3, #1
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003818:	b29b      	uxth	r3, r3
 800381a:	3b01      	subs	r3, #1
 800381c:	b29a      	uxth	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003822:	e099      	b.n	8003958 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003828:	b29b      	uxth	r3, r3
 800382a:	2b02      	cmp	r3, #2
 800382c:	f040 8081 	bne.w	8003932 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d002      	beq.n	800383c <I2C_MasterReceive_BTF+0xc6>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2b10      	cmp	r3, #16
 800383a:	d108      	bne.n	800384e <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800384a:	601a      	str	r2, [r3, #0]
 800384c:	e019      	b.n	8003882 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2b04      	cmp	r3, #4
 8003852:	d002      	beq.n	800385a <I2C_MasterReceive_BTF+0xe4>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2b02      	cmp	r3, #2
 8003858:	d108      	bne.n	800386c <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003868:	601a      	str	r2, [r3, #0]
 800386a:	e00a      	b.n	8003882 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2b10      	cmp	r3, #16
 8003870:	d007      	beq.n	8003882 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003880:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	691a      	ldr	r2, [r3, #16]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800388c:	b2d2      	uxtb	r2, r2
 800388e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003894:	1c5a      	adds	r2, r3, #1
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800389e:	b29b      	uxth	r3, r3
 80038a0:	3b01      	subs	r3, #1
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	691a      	ldr	r2, [r3, #16]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b2:	b2d2      	uxtb	r2, r2
 80038b4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ba:	1c5a      	adds	r2, r3, #1
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	3b01      	subs	r3, #1
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	685a      	ldr	r2, [r3, #4]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80038dc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2220      	movs	r2, #32
 80038e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b40      	cmp	r3, #64	@ 0x40
 80038f0:	d10a      	bne.n	8003908 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f7ff fca8 	bl	8003256 <HAL_I2C_MemRxCpltCallback>
}
 8003906:	e027      	b.n	8003958 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2b08      	cmp	r3, #8
 8003914:	d002      	beq.n	800391c <I2C_MasterReceive_BTF+0x1a6>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2b20      	cmp	r3, #32
 800391a:	d103      	bne.n	8003924 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	631a      	str	r2, [r3, #48]	@ 0x30
 8003922:	e002      	b.n	800392a <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2212      	movs	r2, #18
 8003928:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f7fd fd24 	bl	8001378 <HAL_I2C_MasterRxCpltCallback>
}
 8003930:	e012      	b.n	8003958 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	691a      	ldr	r2, [r3, #16]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800393c:	b2d2      	uxtb	r2, r2
 800393e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003944:	1c5a      	adds	r2, r3, #1
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800394e:	b29b      	uxth	r3, r3
 8003950:	3b01      	subs	r3, #1
 8003952:	b29a      	uxth	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003958:	bf00      	nop
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800396e:	b2db      	uxtb	r3, r3
 8003970:	2b40      	cmp	r3, #64	@ 0x40
 8003972:	d117      	bne.n	80039a4 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003978:	2b00      	cmp	r3, #0
 800397a:	d109      	bne.n	8003990 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003980:	b2db      	uxtb	r3, r3
 8003982:	461a      	mov	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800398c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800398e:	e067      	b.n	8003a60 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003994:	b2db      	uxtb	r3, r3
 8003996:	f043 0301 	orr.w	r3, r3, #1
 800399a:	b2da      	uxtb	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	611a      	str	r2, [r3, #16]
}
 80039a2:	e05d      	b.n	8003a60 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039ac:	d133      	bne.n	8003a16 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b21      	cmp	r3, #33	@ 0x21
 80039b8:	d109      	bne.n	80039ce <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	461a      	mov	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80039ca:	611a      	str	r2, [r3, #16]
 80039cc:	e008      	b.n	80039e0 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	f043 0301 	orr.w	r3, r3, #1
 80039d8:	b2da      	uxtb	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d004      	beq.n	80039f2 <I2C_Master_SB+0x92>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d108      	bne.n	8003a04 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d032      	beq.n	8003a60 <I2C_Master_SB+0x100>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d02d      	beq.n	8003a60 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	685a      	ldr	r2, [r3, #4]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a12:	605a      	str	r2, [r3, #4]
}
 8003a14:	e024      	b.n	8003a60 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10e      	bne.n	8003a3c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	11db      	asrs	r3, r3, #7
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	f003 0306 	and.w	r3, r3, #6
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	f063 030f 	orn	r3, r3, #15
 8003a32:	b2da      	uxtb	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	611a      	str	r2, [r3, #16]
}
 8003a3a:	e011      	b.n	8003a60 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d10d      	bne.n	8003a60 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	11db      	asrs	r3, r3, #7
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	f003 0306 	and.w	r3, r3, #6
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	f063 030e 	orn	r3, r3, #14
 8003a58:	b2da      	uxtb	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	611a      	str	r2, [r3, #16]
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a78:	b2da      	uxtb	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d004      	beq.n	8003a92 <I2C_Master_ADD10+0x26>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d108      	bne.n	8003aa4 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00c      	beq.n	8003ab4 <I2C_Master_ADD10+0x48>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d007      	beq.n	8003ab4 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	685a      	ldr	r2, [r3, #4]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ab2:	605a      	str	r2, [r3, #4]
  }
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b091      	sub	sp, #68	@ 0x44
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ace:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ad6:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003adc:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b22      	cmp	r3, #34	@ 0x22
 8003ae8:	f040 8169 	bne.w	8003dbe <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d10f      	bne.n	8003b14 <I2C_Master_ADDR+0x54>
 8003af4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003af8:	2b40      	cmp	r3, #64	@ 0x40
 8003afa:	d10b      	bne.n	8003b14 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003afc:	2300      	movs	r3, #0
 8003afe:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b12:	e160      	b.n	8003dd6 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d11d      	bne.n	8003b58 <I2C_Master_ADDR+0x98>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003b24:	d118      	bne.n	8003b58 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b26:	2300      	movs	r3, #0
 8003b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b4a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b50:	1c5a      	adds	r2, r3, #1
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	651a      	str	r2, [r3, #80]	@ 0x50
 8003b56:	e13e      	b.n	8003dd6 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d113      	bne.n	8003b8a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b62:	2300      	movs	r3, #0
 8003b64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b86:	601a      	str	r2, [r3, #0]
 8003b88:	e115      	b.n	8003db6 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	f040 808a 	bne.w	8003caa <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b98:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003b9c:	d137      	bne.n	8003c0e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bac:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bbc:	d113      	bne.n	8003be6 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bcc:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bce:	2300      	movs	r3, #0
 8003bd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be4:	e0e7      	b.n	8003db6 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003be6:	2300      	movs	r3, #0
 8003be8:	623b      	str	r3, [r7, #32]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	623b      	str	r3, [r7, #32]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	623b      	str	r3, [r7, #32]
 8003bfa:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	e0d3      	b.n	8003db6 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c10:	2b08      	cmp	r3, #8
 8003c12:	d02e      	beq.n	8003c72 <I2C_Master_ADDR+0x1b2>
 8003c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c16:	2b20      	cmp	r3, #32
 8003c18:	d02b      	beq.n	8003c72 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003c1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c1c:	2b12      	cmp	r3, #18
 8003c1e:	d102      	bne.n	8003c26 <I2C_Master_ADDR+0x166>
 8003c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d125      	bne.n	8003c72 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c28:	2b04      	cmp	r3, #4
 8003c2a:	d00e      	beq.n	8003c4a <I2C_Master_ADDR+0x18a>
 8003c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d00b      	beq.n	8003c4a <I2C_Master_ADDR+0x18a>
 8003c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c34:	2b10      	cmp	r3, #16
 8003c36:	d008      	beq.n	8003c4a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c46:	601a      	str	r2, [r3, #0]
 8003c48:	e007      	b.n	8003c5a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003c58:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	61fb      	str	r3, [r7, #28]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	695b      	ldr	r3, [r3, #20]
 8003c64:	61fb      	str	r3, [r7, #28]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	61fb      	str	r3, [r7, #28]
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	e0a1      	b.n	8003db6 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c80:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c82:	2300      	movs	r3, #0
 8003c84:	61bb      	str	r3, [r7, #24]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	695b      	ldr	r3, [r3, #20]
 8003c8c:	61bb      	str	r3, [r7, #24]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	61bb      	str	r3, [r7, #24]
 8003c96:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ca6:	601a      	str	r2, [r3, #0]
 8003ca8:	e085      	b.n	8003db6 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d14d      	bne.n	8003d50 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cb6:	2b04      	cmp	r3, #4
 8003cb8:	d016      	beq.n	8003ce8 <I2C_Master_ADDR+0x228>
 8003cba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d013      	beq.n	8003ce8 <I2C_Master_ADDR+0x228>
 8003cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cc2:	2b10      	cmp	r3, #16
 8003cc4:	d010      	beq.n	8003ce8 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cd4:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ce4:	601a      	str	r2, [r3, #0]
 8003ce6:	e007      	b.n	8003cf8 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003cf6:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d06:	d117      	bne.n	8003d38 <I2C_Master_ADDR+0x278>
 8003d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d0a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003d0e:	d00b      	beq.n	8003d28 <I2C_Master_ADDR+0x268>
 8003d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d008      	beq.n	8003d28 <I2C_Master_ADDR+0x268>
 8003d16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d18:	2b08      	cmp	r3, #8
 8003d1a:	d005      	beq.n	8003d28 <I2C_Master_ADDR+0x268>
 8003d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d1e:	2b10      	cmp	r3, #16
 8003d20:	d002      	beq.n	8003d28 <I2C_Master_ADDR+0x268>
 8003d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d24:	2b20      	cmp	r3, #32
 8003d26:	d107      	bne.n	8003d38 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	685a      	ldr	r2, [r3, #4]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003d36:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d38:	2300      	movs	r3, #0
 8003d3a:	617b      	str	r3, [r7, #20]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	617b      	str	r3, [r7, #20]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	617b      	str	r3, [r7, #20]
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	e032      	b.n	8003db6 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003d5e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d6e:	d117      	bne.n	8003da0 <I2C_Master_ADDR+0x2e0>
 8003d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d72:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003d76:	d00b      	beq.n	8003d90 <I2C_Master_ADDR+0x2d0>
 8003d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d008      	beq.n	8003d90 <I2C_Master_ADDR+0x2d0>
 8003d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d80:	2b08      	cmp	r3, #8
 8003d82:	d005      	beq.n	8003d90 <I2C_Master_ADDR+0x2d0>
 8003d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d86:	2b10      	cmp	r3, #16
 8003d88:	d002      	beq.n	8003d90 <I2C_Master_ADDR+0x2d0>
 8003d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d8c:	2b20      	cmp	r3, #32
 8003d8e:	d107      	bne.n	8003da0 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003d9e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003da0:	2300      	movs	r3, #0
 8003da2:	613b      	str	r3, [r7, #16]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	613b      	str	r3, [r7, #16]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	613b      	str	r3, [r7, #16]
 8003db4:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003dbc:	e00b      	b.n	8003dd6 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	60fb      	str	r3, [r7, #12]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	60fb      	str	r3, [r7, #12]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	60fb      	str	r3, [r7, #12]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
}
 8003dd4:	e7ff      	b.n	8003dd6 <I2C_Master_ADDR+0x316>
 8003dd6:	bf00      	nop
 8003dd8:	3744      	adds	r7, #68	@ 0x44
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b084      	sub	sp, #16
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003df0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d02b      	beq.n	8003e54 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e00:	781a      	ldrb	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e0c:	1c5a      	adds	r2, r3, #1
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d114      	bne.n	8003e54 <I2C_SlaveTransmit_TXE+0x72>
 8003e2a:	7bfb      	ldrb	r3, [r7, #15]
 8003e2c:	2b29      	cmp	r3, #41	@ 0x29
 8003e2e:	d111      	bne.n	8003e54 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	685a      	ldr	r2, [r3, #4]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e3e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2221      	movs	r2, #33	@ 0x21
 8003e44:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2228      	movs	r2, #40	@ 0x28
 8003e4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7ff f9cb 	bl	80031ea <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003e54:	bf00      	nop
 8003e56:	3710      	adds	r7, #16
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d011      	beq.n	8003e92 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e72:	781a      	ldrb	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e7e:	1c5a      	adds	r2, r3, #1
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	b29a      	uxth	r2, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003e92:	bf00      	nop
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr

08003e9e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b084      	sub	sp, #16
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003eac:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d02c      	beq.n	8003f12 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	691a      	ldr	r2, [r3, #16]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec2:	b2d2      	uxtb	r2, r2
 8003ec4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eca:	1c5a      	adds	r2, r3, #1
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d114      	bne.n	8003f12 <I2C_SlaveReceive_RXNE+0x74>
 8003ee8:	7bfb      	ldrb	r3, [r7, #15]
 8003eea:	2b2a      	cmp	r3, #42	@ 0x2a
 8003eec:	d111      	bne.n	8003f12 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	685a      	ldr	r2, [r3, #4]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003efc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2222      	movs	r2, #34	@ 0x22
 8003f02:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2228      	movs	r2, #40	@ 0x28
 8003f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f7ff f976 	bl	80031fe <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003f12:	bf00      	nop
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b083      	sub	sp, #12
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d012      	beq.n	8003f52 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	691a      	ldr	r2, [r3, #16]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f36:	b2d2      	uxtb	r2, r2
 8003f38:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f3e:	1c5a      	adds	r2, r3, #1
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	b29a      	uxth	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003f52:	bf00      	nop
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr

08003f5e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b084      	sub	sp, #16
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
 8003f66:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003f78:	2b28      	cmp	r3, #40	@ 0x28
 8003f7a:	d125      	bne.n	8003fc8 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	685a      	ldr	r2, [r3, #4]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f8a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	f003 0304 	and.w	r3, r3, #4
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003f96:	2301      	movs	r3, #1
 8003f98:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d103      	bne.n	8003fac <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	81bb      	strh	r3, [r7, #12]
 8003faa:	e002      	b.n	8003fb2 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003fba:	89ba      	ldrh	r2, [r7, #12]
 8003fbc:	7bfb      	ldrb	r3, [r7, #15]
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f7ff f926 	bl	8003212 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003fc6:	e00e      	b.n	8003fe6 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fc8:	2300      	movs	r3, #0
 8003fca:	60bb      	str	r3, [r7, #8]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	60bb      	str	r3, [r7, #8]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	60bb      	str	r3, [r7, #8]
 8003fdc:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8003fe6:	bf00      	nop
 8003fe8:	3710      	adds	r7, #16
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
	...

08003ff0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ffe:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	685a      	ldr	r2, [r3, #4]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800400e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004010:	2300      	movs	r3, #0
 8004012:	60bb      	str	r3, [r7, #8]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	60bb      	str	r3, [r7, #8]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f042 0201 	orr.w	r2, r2, #1
 800402a:	601a      	str	r2, [r3, #0]
 800402c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800403c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004048:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800404c:	d172      	bne.n	8004134 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800404e:	7bfb      	ldrb	r3, [r7, #15]
 8004050:	2b22      	cmp	r3, #34	@ 0x22
 8004052:	d002      	beq.n	800405a <I2C_Slave_STOPF+0x6a>
 8004054:	7bfb      	ldrb	r3, [r7, #15]
 8004056:	2b2a      	cmp	r3, #42	@ 0x2a
 8004058:	d135      	bne.n	80040c6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	b29a      	uxth	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800406c:	b29b      	uxth	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d005      	beq.n	800407e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004076:	f043 0204 	orr.w	r2, r3, #4
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	685a      	ldr	r2, [r3, #4]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800408c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004092:	4618      	mov	r0, r3
 8004094:	f7fe fb9b 	bl	80027ce <HAL_DMA_GetState>
 8004098:	4603      	mov	r3, r0
 800409a:	2b01      	cmp	r3, #1
 800409c:	d049      	beq.n	8004132 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040a2:	4a69      	ldr	r2, [pc, #420]	@ (8004248 <I2C_Slave_STOPF+0x258>)
 80040a4:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7fe fb6d 	bl	800278a <HAL_DMA_Abort_IT>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d03d      	beq.n	8004132 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80040c0:	4610      	mov	r0, r2
 80040c2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80040c4:	e035      	b.n	8004132 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040d8:	b29b      	uxth	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d005      	beq.n	80040ea <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e2:	f043 0204 	orr.w	r2, r3, #4
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	685a      	ldr	r2, [r3, #4]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040f8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040fe:	4618      	mov	r0, r3
 8004100:	f7fe fb65 	bl	80027ce <HAL_DMA_GetState>
 8004104:	4603      	mov	r3, r0
 8004106:	2b01      	cmp	r3, #1
 8004108:	d014      	beq.n	8004134 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800410e:	4a4e      	ldr	r2, [pc, #312]	@ (8004248 <I2C_Slave_STOPF+0x258>)
 8004110:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004116:	4618      	mov	r0, r3
 8004118:	f7fe fb37 	bl	800278a <HAL_DMA_Abort_IT>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d008      	beq.n	8004134 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004126:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800412c:	4610      	mov	r0, r2
 800412e:	4798      	blx	r3
 8004130:	e000      	b.n	8004134 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004132:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004138:	b29b      	uxth	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d03e      	beq.n	80041bc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	f003 0304 	and.w	r3, r3, #4
 8004148:	2b04      	cmp	r3, #4
 800414a:	d112      	bne.n	8004172 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	691a      	ldr	r2, [r3, #16]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004156:	b2d2      	uxtb	r2, r2
 8004158:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800415e:	1c5a      	adds	r2, r3, #1
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004168:	b29b      	uxth	r3, r3
 800416a:	3b01      	subs	r3, #1
 800416c:	b29a      	uxth	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	695b      	ldr	r3, [r3, #20]
 8004178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800417c:	2b40      	cmp	r3, #64	@ 0x40
 800417e:	d112      	bne.n	80041a6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	691a      	ldr	r2, [r3, #16]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800418a:	b2d2      	uxtb	r2, r2
 800418c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004192:	1c5a      	adds	r2, r3, #1
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800419c:	b29b      	uxth	r3, r3
 800419e:	3b01      	subs	r3, #1
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d005      	beq.n	80041bc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b4:	f043 0204 	orr.w	r2, r3, #4
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d003      	beq.n	80041cc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f000 f843 	bl	8004250 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80041ca:	e039      	b.n	8004240 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80041cc:	7bfb      	ldrb	r3, [r7, #15]
 80041ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80041d0:	d109      	bne.n	80041e6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2228      	movs	r2, #40	@ 0x28
 80041dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f7ff f80c 	bl	80031fe <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b28      	cmp	r3, #40	@ 0x28
 80041f0:	d111      	bne.n	8004216 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a15      	ldr	r2, [pc, #84]	@ (800424c <I2C_Slave_STOPF+0x25c>)
 80041f6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2220      	movs	r2, #32
 8004202:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f7ff f80d 	bl	800322e <HAL_I2C_ListenCpltCallback>
}
 8004214:	e014      	b.n	8004240 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800421a:	2b22      	cmp	r3, #34	@ 0x22
 800421c:	d002      	beq.n	8004224 <I2C_Slave_STOPF+0x234>
 800421e:	7bfb      	ldrb	r3, [r7, #15]
 8004220:	2b22      	cmp	r3, #34	@ 0x22
 8004222:	d10d      	bne.n	8004240 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2220      	movs	r2, #32
 800422e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f7fe ffdf 	bl	80031fe <HAL_I2C_SlaveRxCpltCallback>
}
 8004240:	bf00      	nop
 8004242:	3710      	adds	r7, #16
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	080044b5 	.word	0x080044b5
 800424c:	ffff0000 	.word	0xffff0000

08004250 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800425e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004266:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004268:	7bbb      	ldrb	r3, [r7, #14]
 800426a:	2b10      	cmp	r3, #16
 800426c:	d002      	beq.n	8004274 <I2C_ITError+0x24>
 800426e:	7bbb      	ldrb	r3, [r7, #14]
 8004270:	2b40      	cmp	r3, #64	@ 0x40
 8004272:	d10a      	bne.n	800428a <I2C_ITError+0x3a>
 8004274:	7bfb      	ldrb	r3, [r7, #15]
 8004276:	2b22      	cmp	r3, #34	@ 0x22
 8004278:	d107      	bne.n	800428a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004288:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800428a:	7bfb      	ldrb	r3, [r7, #15]
 800428c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004290:	2b28      	cmp	r3, #40	@ 0x28
 8004292:	d107      	bne.n	80042a4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2228      	movs	r2, #40	@ 0x28
 800429e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80042a2:	e015      	b.n	80042d0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042b2:	d00a      	beq.n	80042ca <I2C_ITError+0x7a>
 80042b4:	7bfb      	ldrb	r3, [r7, #15]
 80042b6:	2b60      	cmp	r3, #96	@ 0x60
 80042b8:	d007      	beq.n	80042ca <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2220      	movs	r2, #32
 80042be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042de:	d162      	bne.n	80043a6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	685a      	ldr	r2, [r3, #4]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042ee:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d020      	beq.n	8004340 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004302:	4a6a      	ldr	r2, [pc, #424]	@ (80044ac <I2C_ITError+0x25c>)
 8004304:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800430a:	4618      	mov	r0, r3
 800430c:	f7fe fa3d 	bl	800278a <HAL_DMA_Abort_IT>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	f000 8089 	beq.w	800442a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f022 0201 	bic.w	r2, r2, #1
 8004326:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2220      	movs	r2, #32
 800432c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004334:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800433a:	4610      	mov	r0, r2
 800433c:	4798      	blx	r3
 800433e:	e074      	b.n	800442a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004344:	4a59      	ldr	r2, [pc, #356]	@ (80044ac <I2C_ITError+0x25c>)
 8004346:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800434c:	4618      	mov	r0, r3
 800434e:	f7fe fa1c 	bl	800278a <HAL_DMA_Abort_IT>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d068      	beq.n	800442a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004362:	2b40      	cmp	r3, #64	@ 0x40
 8004364:	d10b      	bne.n	800437e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	691a      	ldr	r2, [r3, #16]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004370:	b2d2      	uxtb	r2, r2
 8004372:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004378:	1c5a      	adds	r2, r3, #1
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f022 0201 	bic.w	r2, r2, #1
 800438c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2220      	movs	r2, #32
 8004392:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800439a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80043a0:	4610      	mov	r0, r2
 80043a2:	4798      	blx	r3
 80043a4:	e041      	b.n	800442a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	2b60      	cmp	r3, #96	@ 0x60
 80043b0:	d125      	bne.n	80043fe <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2220      	movs	r2, #32
 80043b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043ca:	2b40      	cmp	r3, #64	@ 0x40
 80043cc:	d10b      	bne.n	80043e6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	691a      	ldr	r2, [r3, #16]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d8:	b2d2      	uxtb	r2, r2
 80043da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e0:	1c5a      	adds	r2, r3, #1
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f022 0201 	bic.w	r2, r2, #1
 80043f4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f7fe ff41 	bl	800327e <HAL_I2C_AbortCpltCallback>
 80043fc:	e015      	b.n	800442a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004408:	2b40      	cmp	r3, #64	@ 0x40
 800440a:	d10b      	bne.n	8004424 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	691a      	ldr	r2, [r3, #16]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004416:	b2d2      	uxtb	r2, r2
 8004418:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800441e:	1c5a      	adds	r2, r3, #1
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f7fe ff20 	bl	800326a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10e      	bne.n	8004458 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004440:	2b00      	cmp	r3, #0
 8004442:	d109      	bne.n	8004458 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800444a:	2b00      	cmp	r3, #0
 800444c:	d104      	bne.n	8004458 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004454:	2b00      	cmp	r3, #0
 8004456:	d007      	beq.n	8004468 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	685a      	ldr	r2, [r3, #4]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004466:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800446e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004474:	f003 0304 	and.w	r3, r3, #4
 8004478:	2b04      	cmp	r3, #4
 800447a:	d113      	bne.n	80044a4 <I2C_ITError+0x254>
 800447c:	7bfb      	ldrb	r3, [r7, #15]
 800447e:	2b28      	cmp	r3, #40	@ 0x28
 8004480:	d110      	bne.n	80044a4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a0a      	ldr	r2, [pc, #40]	@ (80044b0 <I2C_ITError+0x260>)
 8004486:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2220      	movs	r2, #32
 8004492:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f7fe fec5 	bl	800322e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80044a4:	bf00      	nop
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	080044b5 	.word	0x080044b5
 80044b0:	ffff0000 	.word	0xffff0000

080044b4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b086      	sub	sp, #24
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80044bc:	2300      	movs	r3, #0
 80044be:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044c4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044cc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80044ce:	4b4b      	ldr	r3, [pc, #300]	@ (80045fc <I2C_DMAAbort+0x148>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	08db      	lsrs	r3, r3, #3
 80044d4:	4a4a      	ldr	r2, [pc, #296]	@ (8004600 <I2C_DMAAbort+0x14c>)
 80044d6:	fba2 2303 	umull	r2, r3, r2, r3
 80044da:	0a1a      	lsrs	r2, r3, #8
 80044dc:	4613      	mov	r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4413      	add	r3, r2
 80044e2:	00da      	lsls	r2, r3, #3
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d106      	bne.n	80044fc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f2:	f043 0220 	orr.w	r2, r3, #32
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80044fa:	e00a      	b.n	8004512 <I2C_DMAAbort+0x5e>
    }
    count--;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	3b01      	subs	r3, #1
 8004500:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800450c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004510:	d0ea      	beq.n	80044e8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004516:	2b00      	cmp	r3, #0
 8004518:	d003      	beq.n	8004522 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800451e:	2200      	movs	r2, #0
 8004520:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004526:	2b00      	cmp	r3, #0
 8004528:	d003      	beq.n	8004532 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800452e:	2200      	movs	r2, #0
 8004530:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004540:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	2200      	movs	r2, #0
 8004546:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800454c:	2b00      	cmp	r3, #0
 800454e:	d003      	beq.n	8004558 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004554:	2200      	movs	r2, #0
 8004556:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800455c:	2b00      	cmp	r3, #0
 800455e:	d003      	beq.n	8004568 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004564:	2200      	movs	r2, #0
 8004566:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f022 0201 	bic.w	r2, r2, #1
 8004576:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800457e:	b2db      	uxtb	r3, r3
 8004580:	2b60      	cmp	r3, #96	@ 0x60
 8004582:	d10e      	bne.n	80045a2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	2220      	movs	r2, #32
 8004588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	2200      	movs	r2, #0
 8004598:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800459a:	6978      	ldr	r0, [r7, #20]
 800459c:	f7fe fe6f 	bl	800327e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80045a0:	e027      	b.n	80045f2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80045a2:	7cfb      	ldrb	r3, [r7, #19]
 80045a4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80045a8:	2b28      	cmp	r3, #40	@ 0x28
 80045aa:	d117      	bne.n	80045dc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f042 0201 	orr.w	r2, r2, #1
 80045ba:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80045ca:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	2200      	movs	r2, #0
 80045d0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	2228      	movs	r2, #40	@ 0x28
 80045d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80045da:	e007      	b.n	80045ec <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	2220      	movs	r2, #32
 80045e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80045ec:	6978      	ldr	r0, [r7, #20]
 80045ee:	f7fe fe3c 	bl	800326a <HAL_I2C_ErrorCallback>
}
 80045f2:	bf00      	nop
 80045f4:	3718      	adds	r7, #24
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	20000028 	.word	0x20000028
 8004600:	14f8b589 	.word	0x14f8b589

08004604 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800460c:	2300      	movs	r3, #0
 800460e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004610:	4b13      	ldr	r3, [pc, #76]	@ (8004660 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	08db      	lsrs	r3, r3, #3
 8004616:	4a13      	ldr	r2, [pc, #76]	@ (8004664 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004618:	fba2 2303 	umull	r2, r3, r2, r3
 800461c:	0a1a      	lsrs	r2, r3, #8
 800461e:	4613      	mov	r3, r2
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	4413      	add	r3, r2
 8004624:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	3b01      	subs	r3, #1
 800462a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d107      	bne.n	8004642 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004636:	f043 0220 	orr.w	r2, r3, #32
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e008      	b.n	8004654 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800464c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004650:	d0e9      	beq.n	8004626 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	3714      	adds	r7, #20
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr
 8004660:	20000028 	.word	0x20000028
 8004664:	14f8b589 	.word	0x14f8b589

08004668 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004674:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004678:	d103      	bne.n	8004682 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004680:	e007      	b.n	8004692 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004686:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800468a:	d102      	bne.n	8004692 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2208      	movs	r2, #8
 8004690:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004692:	bf00      	nop
 8004694:	370c      	adds	r7, #12
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
	...

080046a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b086      	sub	sp, #24
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d101      	bne.n	80046b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e267      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d075      	beq.n	80047aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046be:	4b88      	ldr	r3, [pc, #544]	@ (80048e0 <HAL_RCC_OscConfig+0x240>)
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f003 030c 	and.w	r3, r3, #12
 80046c6:	2b04      	cmp	r3, #4
 80046c8:	d00c      	beq.n	80046e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046ca:	4b85      	ldr	r3, [pc, #532]	@ (80048e0 <HAL_RCC_OscConfig+0x240>)
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046d2:	2b08      	cmp	r3, #8
 80046d4:	d112      	bne.n	80046fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046d6:	4b82      	ldr	r3, [pc, #520]	@ (80048e0 <HAL_RCC_OscConfig+0x240>)
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80046e2:	d10b      	bne.n	80046fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046e4:	4b7e      	ldr	r3, [pc, #504]	@ (80048e0 <HAL_RCC_OscConfig+0x240>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d05b      	beq.n	80047a8 <HAL_RCC_OscConfig+0x108>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d157      	bne.n	80047a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e242      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004704:	d106      	bne.n	8004714 <HAL_RCC_OscConfig+0x74>
 8004706:	4b76      	ldr	r3, [pc, #472]	@ (80048e0 <HAL_RCC_OscConfig+0x240>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a75      	ldr	r2, [pc, #468]	@ (80048e0 <HAL_RCC_OscConfig+0x240>)
 800470c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004710:	6013      	str	r3, [r2, #0]
 8004712:	e01d      	b.n	8004750 <HAL_RCC_OscConfig+0xb0>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800471c:	d10c      	bne.n	8004738 <HAL_RCC_OscConfig+0x98>
 800471e:	4b70      	ldr	r3, [pc, #448]	@ (80048e0 <HAL_RCC_OscConfig+0x240>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a6f      	ldr	r2, [pc, #444]	@ (80048e0 <HAL_RCC_OscConfig+0x240>)
 8004724:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004728:	6013      	str	r3, [r2, #0]
 800472a:	4b6d      	ldr	r3, [pc, #436]	@ (80048e0 <HAL_RCC_OscConfig+0x240>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a6c      	ldr	r2, [pc, #432]	@ (80048e0 <HAL_RCC_OscConfig+0x240>)
 8004730:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004734:	6013      	str	r3, [r2, #0]
 8004736:	e00b      	b.n	8004750 <HAL_RCC_OscConfig+0xb0>
 8004738:	4b69      	ldr	r3, [pc, #420]	@ (80048e0 <HAL_RCC_OscConfig+0x240>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a68      	ldr	r2, [pc, #416]	@ (80048e0 <HAL_RCC_OscConfig+0x240>)
 800473e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004742:	6013      	str	r3, [r2, #0]
 8004744:	4b66      	ldr	r3, [pc, #408]	@ (80048e0 <HAL_RCC_OscConfig+0x240>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a65      	ldr	r2, [pc, #404]	@ (80048e0 <HAL_RCC_OscConfig+0x240>)
 800474a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800474e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d013      	beq.n	8004780 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004758:	f7fd fe66 	bl	8002428 <HAL_GetTick>
 800475c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800475e:	e008      	b.n	8004772 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004760:	f7fd fe62 	bl	8002428 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b64      	cmp	r3, #100	@ 0x64
 800476c:	d901      	bls.n	8004772 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e207      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004772:	4b5b      	ldr	r3, [pc, #364]	@ (80048e0 <HAL_RCC_OscConfig+0x240>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d0f0      	beq.n	8004760 <HAL_RCC_OscConfig+0xc0>
 800477e:	e014      	b.n	80047aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004780:	f7fd fe52 	bl	8002428 <HAL_GetTick>
 8004784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004786:	e008      	b.n	800479a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004788:	f7fd fe4e 	bl	8002428 <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	2b64      	cmp	r3, #100	@ 0x64
 8004794:	d901      	bls.n	800479a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e1f3      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800479a:	4b51      	ldr	r3, [pc, #324]	@ (80048e0 <HAL_RCC_OscConfig+0x240>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1f0      	bne.n	8004788 <HAL_RCC_OscConfig+0xe8>
 80047a6:	e000      	b.n	80047aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0302 	and.w	r3, r3, #2
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d063      	beq.n	800487e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047b6:	4b4a      	ldr	r3, [pc, #296]	@ (80048e0 <HAL_RCC_OscConfig+0x240>)
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	f003 030c 	and.w	r3, r3, #12
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00b      	beq.n	80047da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047c2:	4b47      	ldr	r3, [pc, #284]	@ (80048e0 <HAL_RCC_OscConfig+0x240>)
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047ca:	2b08      	cmp	r3, #8
 80047cc:	d11c      	bne.n	8004808 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047ce:	4b44      	ldr	r3, [pc, #272]	@ (80048e0 <HAL_RCC_OscConfig+0x240>)
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d116      	bne.n	8004808 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047da:	4b41      	ldr	r3, [pc, #260]	@ (80048e0 <HAL_RCC_OscConfig+0x240>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d005      	beq.n	80047f2 <HAL_RCC_OscConfig+0x152>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d001      	beq.n	80047f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e1c7      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047f2:	4b3b      	ldr	r3, [pc, #236]	@ (80048e0 <HAL_RCC_OscConfig+0x240>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	00db      	lsls	r3, r3, #3
 8004800:	4937      	ldr	r1, [pc, #220]	@ (80048e0 <HAL_RCC_OscConfig+0x240>)
 8004802:	4313      	orrs	r3, r2
 8004804:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004806:	e03a      	b.n	800487e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d020      	beq.n	8004852 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004810:	4b34      	ldr	r3, [pc, #208]	@ (80048e4 <HAL_RCC_OscConfig+0x244>)
 8004812:	2201      	movs	r2, #1
 8004814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004816:	f7fd fe07 	bl	8002428 <HAL_GetTick>
 800481a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800481c:	e008      	b.n	8004830 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800481e:	f7fd fe03 	bl	8002428 <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	2b02      	cmp	r3, #2
 800482a:	d901      	bls.n	8004830 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e1a8      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004830:	4b2b      	ldr	r3, [pc, #172]	@ (80048e0 <HAL_RCC_OscConfig+0x240>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0302 	and.w	r3, r3, #2
 8004838:	2b00      	cmp	r3, #0
 800483a:	d0f0      	beq.n	800481e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800483c:	4b28      	ldr	r3, [pc, #160]	@ (80048e0 <HAL_RCC_OscConfig+0x240>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	00db      	lsls	r3, r3, #3
 800484a:	4925      	ldr	r1, [pc, #148]	@ (80048e0 <HAL_RCC_OscConfig+0x240>)
 800484c:	4313      	orrs	r3, r2
 800484e:	600b      	str	r3, [r1, #0]
 8004850:	e015      	b.n	800487e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004852:	4b24      	ldr	r3, [pc, #144]	@ (80048e4 <HAL_RCC_OscConfig+0x244>)
 8004854:	2200      	movs	r2, #0
 8004856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004858:	f7fd fde6 	bl	8002428 <HAL_GetTick>
 800485c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800485e:	e008      	b.n	8004872 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004860:	f7fd fde2 	bl	8002428 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b02      	cmp	r3, #2
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e187      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004872:	4b1b      	ldr	r3, [pc, #108]	@ (80048e0 <HAL_RCC_OscConfig+0x240>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1f0      	bne.n	8004860 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0308 	and.w	r3, r3, #8
 8004886:	2b00      	cmp	r3, #0
 8004888:	d036      	beq.n	80048f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d016      	beq.n	80048c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004892:	4b15      	ldr	r3, [pc, #84]	@ (80048e8 <HAL_RCC_OscConfig+0x248>)
 8004894:	2201      	movs	r2, #1
 8004896:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004898:	f7fd fdc6 	bl	8002428 <HAL_GetTick>
 800489c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800489e:	e008      	b.n	80048b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048a0:	f7fd fdc2 	bl	8002428 <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e167      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048b2:	4b0b      	ldr	r3, [pc, #44]	@ (80048e0 <HAL_RCC_OscConfig+0x240>)
 80048b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d0f0      	beq.n	80048a0 <HAL_RCC_OscConfig+0x200>
 80048be:	e01b      	b.n	80048f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048c0:	4b09      	ldr	r3, [pc, #36]	@ (80048e8 <HAL_RCC_OscConfig+0x248>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048c6:	f7fd fdaf 	bl	8002428 <HAL_GetTick>
 80048ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048cc:	e00e      	b.n	80048ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048ce:	f7fd fdab 	bl	8002428 <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d907      	bls.n	80048ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e150      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
 80048e0:	40023800 	.word	0x40023800
 80048e4:	42470000 	.word	0x42470000
 80048e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048ec:	4b88      	ldr	r3, [pc, #544]	@ (8004b10 <HAL_RCC_OscConfig+0x470>)
 80048ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048f0:	f003 0302 	and.w	r3, r3, #2
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1ea      	bne.n	80048ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0304 	and.w	r3, r3, #4
 8004900:	2b00      	cmp	r3, #0
 8004902:	f000 8097 	beq.w	8004a34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004906:	2300      	movs	r3, #0
 8004908:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800490a:	4b81      	ldr	r3, [pc, #516]	@ (8004b10 <HAL_RCC_OscConfig+0x470>)
 800490c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800490e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10f      	bne.n	8004936 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004916:	2300      	movs	r3, #0
 8004918:	60bb      	str	r3, [r7, #8]
 800491a:	4b7d      	ldr	r3, [pc, #500]	@ (8004b10 <HAL_RCC_OscConfig+0x470>)
 800491c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800491e:	4a7c      	ldr	r2, [pc, #496]	@ (8004b10 <HAL_RCC_OscConfig+0x470>)
 8004920:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004924:	6413      	str	r3, [r2, #64]	@ 0x40
 8004926:	4b7a      	ldr	r3, [pc, #488]	@ (8004b10 <HAL_RCC_OscConfig+0x470>)
 8004928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800492a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800492e:	60bb      	str	r3, [r7, #8]
 8004930:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004932:	2301      	movs	r3, #1
 8004934:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004936:	4b77      	ldr	r3, [pc, #476]	@ (8004b14 <HAL_RCC_OscConfig+0x474>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800493e:	2b00      	cmp	r3, #0
 8004940:	d118      	bne.n	8004974 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004942:	4b74      	ldr	r3, [pc, #464]	@ (8004b14 <HAL_RCC_OscConfig+0x474>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a73      	ldr	r2, [pc, #460]	@ (8004b14 <HAL_RCC_OscConfig+0x474>)
 8004948:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800494c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800494e:	f7fd fd6b 	bl	8002428 <HAL_GetTick>
 8004952:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004954:	e008      	b.n	8004968 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004956:	f7fd fd67 	bl	8002428 <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	2b02      	cmp	r3, #2
 8004962:	d901      	bls.n	8004968 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e10c      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004968:	4b6a      	ldr	r3, [pc, #424]	@ (8004b14 <HAL_RCC_OscConfig+0x474>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004970:	2b00      	cmp	r3, #0
 8004972:	d0f0      	beq.n	8004956 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d106      	bne.n	800498a <HAL_RCC_OscConfig+0x2ea>
 800497c:	4b64      	ldr	r3, [pc, #400]	@ (8004b10 <HAL_RCC_OscConfig+0x470>)
 800497e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004980:	4a63      	ldr	r2, [pc, #396]	@ (8004b10 <HAL_RCC_OscConfig+0x470>)
 8004982:	f043 0301 	orr.w	r3, r3, #1
 8004986:	6713      	str	r3, [r2, #112]	@ 0x70
 8004988:	e01c      	b.n	80049c4 <HAL_RCC_OscConfig+0x324>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	2b05      	cmp	r3, #5
 8004990:	d10c      	bne.n	80049ac <HAL_RCC_OscConfig+0x30c>
 8004992:	4b5f      	ldr	r3, [pc, #380]	@ (8004b10 <HAL_RCC_OscConfig+0x470>)
 8004994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004996:	4a5e      	ldr	r2, [pc, #376]	@ (8004b10 <HAL_RCC_OscConfig+0x470>)
 8004998:	f043 0304 	orr.w	r3, r3, #4
 800499c:	6713      	str	r3, [r2, #112]	@ 0x70
 800499e:	4b5c      	ldr	r3, [pc, #368]	@ (8004b10 <HAL_RCC_OscConfig+0x470>)
 80049a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049a2:	4a5b      	ldr	r2, [pc, #364]	@ (8004b10 <HAL_RCC_OscConfig+0x470>)
 80049a4:	f043 0301 	orr.w	r3, r3, #1
 80049a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80049aa:	e00b      	b.n	80049c4 <HAL_RCC_OscConfig+0x324>
 80049ac:	4b58      	ldr	r3, [pc, #352]	@ (8004b10 <HAL_RCC_OscConfig+0x470>)
 80049ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049b0:	4a57      	ldr	r2, [pc, #348]	@ (8004b10 <HAL_RCC_OscConfig+0x470>)
 80049b2:	f023 0301 	bic.w	r3, r3, #1
 80049b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80049b8:	4b55      	ldr	r3, [pc, #340]	@ (8004b10 <HAL_RCC_OscConfig+0x470>)
 80049ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049bc:	4a54      	ldr	r2, [pc, #336]	@ (8004b10 <HAL_RCC_OscConfig+0x470>)
 80049be:	f023 0304 	bic.w	r3, r3, #4
 80049c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d015      	beq.n	80049f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049cc:	f7fd fd2c 	bl	8002428 <HAL_GetTick>
 80049d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049d2:	e00a      	b.n	80049ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049d4:	f7fd fd28 	bl	8002428 <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d901      	bls.n	80049ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e0cb      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049ea:	4b49      	ldr	r3, [pc, #292]	@ (8004b10 <HAL_RCC_OscConfig+0x470>)
 80049ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d0ee      	beq.n	80049d4 <HAL_RCC_OscConfig+0x334>
 80049f6:	e014      	b.n	8004a22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049f8:	f7fd fd16 	bl	8002428 <HAL_GetTick>
 80049fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049fe:	e00a      	b.n	8004a16 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a00:	f7fd fd12 	bl	8002428 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d901      	bls.n	8004a16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e0b5      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a16:	4b3e      	ldr	r3, [pc, #248]	@ (8004b10 <HAL_RCC_OscConfig+0x470>)
 8004a18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d1ee      	bne.n	8004a00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a22:	7dfb      	ldrb	r3, [r7, #23]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d105      	bne.n	8004a34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a28:	4b39      	ldr	r3, [pc, #228]	@ (8004b10 <HAL_RCC_OscConfig+0x470>)
 8004a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a2c:	4a38      	ldr	r2, [pc, #224]	@ (8004b10 <HAL_RCC_OscConfig+0x470>)
 8004a2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a32:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f000 80a1 	beq.w	8004b80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a3e:	4b34      	ldr	r3, [pc, #208]	@ (8004b10 <HAL_RCC_OscConfig+0x470>)
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f003 030c 	and.w	r3, r3, #12
 8004a46:	2b08      	cmp	r3, #8
 8004a48:	d05c      	beq.n	8004b04 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d141      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a52:	4b31      	ldr	r3, [pc, #196]	@ (8004b18 <HAL_RCC_OscConfig+0x478>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a58:	f7fd fce6 	bl	8002428 <HAL_GetTick>
 8004a5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a5e:	e008      	b.n	8004a72 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a60:	f7fd fce2 	bl	8002428 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d901      	bls.n	8004a72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e087      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a72:	4b27      	ldr	r3, [pc, #156]	@ (8004b10 <HAL_RCC_OscConfig+0x470>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1f0      	bne.n	8004a60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	69da      	ldr	r2, [r3, #28]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	431a      	orrs	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a8c:	019b      	lsls	r3, r3, #6
 8004a8e:	431a      	orrs	r2, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a94:	085b      	lsrs	r3, r3, #1
 8004a96:	3b01      	subs	r3, #1
 8004a98:	041b      	lsls	r3, r3, #16
 8004a9a:	431a      	orrs	r2, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aa0:	061b      	lsls	r3, r3, #24
 8004aa2:	491b      	ldr	r1, [pc, #108]	@ (8004b10 <HAL_RCC_OscConfig+0x470>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8004b18 <HAL_RCC_OscConfig+0x478>)
 8004aaa:	2201      	movs	r2, #1
 8004aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aae:	f7fd fcbb 	bl	8002428 <HAL_GetTick>
 8004ab2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ab4:	e008      	b.n	8004ac8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ab6:	f7fd fcb7 	bl	8002428 <HAL_GetTick>
 8004aba:	4602      	mov	r2, r0
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d901      	bls.n	8004ac8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e05c      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ac8:	4b11      	ldr	r3, [pc, #68]	@ (8004b10 <HAL_RCC_OscConfig+0x470>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d0f0      	beq.n	8004ab6 <HAL_RCC_OscConfig+0x416>
 8004ad4:	e054      	b.n	8004b80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ad6:	4b10      	ldr	r3, [pc, #64]	@ (8004b18 <HAL_RCC_OscConfig+0x478>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004adc:	f7fd fca4 	bl	8002428 <HAL_GetTick>
 8004ae0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ae2:	e008      	b.n	8004af6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ae4:	f7fd fca0 	bl	8002428 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d901      	bls.n	8004af6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e045      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004af6:	4b06      	ldr	r3, [pc, #24]	@ (8004b10 <HAL_RCC_OscConfig+0x470>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1f0      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x444>
 8004b02:	e03d      	b.n	8004b80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	699b      	ldr	r3, [r3, #24]
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d107      	bne.n	8004b1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e038      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
 8004b10:	40023800 	.word	0x40023800
 8004b14:	40007000 	.word	0x40007000
 8004b18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b1c:	4b1b      	ldr	r3, [pc, #108]	@ (8004b8c <HAL_RCC_OscConfig+0x4ec>)
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d028      	beq.n	8004b7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d121      	bne.n	8004b7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d11a      	bne.n	8004b7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004b52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d111      	bne.n	8004b7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b62:	085b      	lsrs	r3, r3, #1
 8004b64:	3b01      	subs	r3, #1
 8004b66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d107      	bne.n	8004b7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d001      	beq.n	8004b80 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e000      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3718      	adds	r7, #24
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	40023800 	.word	0x40023800

08004b90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d101      	bne.n	8004ba4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e0cc      	b.n	8004d3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ba4:	4b68      	ldr	r3, [pc, #416]	@ (8004d48 <HAL_RCC_ClockConfig+0x1b8>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0307 	and.w	r3, r3, #7
 8004bac:	683a      	ldr	r2, [r7, #0]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d90c      	bls.n	8004bcc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bb2:	4b65      	ldr	r3, [pc, #404]	@ (8004d48 <HAL_RCC_ClockConfig+0x1b8>)
 8004bb4:	683a      	ldr	r2, [r7, #0]
 8004bb6:	b2d2      	uxtb	r2, r2
 8004bb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bba:	4b63      	ldr	r3, [pc, #396]	@ (8004d48 <HAL_RCC_ClockConfig+0x1b8>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0307 	and.w	r3, r3, #7
 8004bc2:	683a      	ldr	r2, [r7, #0]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d001      	beq.n	8004bcc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e0b8      	b.n	8004d3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0302 	and.w	r3, r3, #2
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d020      	beq.n	8004c1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0304 	and.w	r3, r3, #4
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d005      	beq.n	8004bf0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004be4:	4b59      	ldr	r3, [pc, #356]	@ (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	4a58      	ldr	r2, [pc, #352]	@ (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004bea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004bee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0308 	and.w	r3, r3, #8
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d005      	beq.n	8004c08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bfc:	4b53      	ldr	r3, [pc, #332]	@ (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	4a52      	ldr	r2, [pc, #328]	@ (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004c02:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004c06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c08:	4b50      	ldr	r3, [pc, #320]	@ (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	494d      	ldr	r1, [pc, #308]	@ (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d044      	beq.n	8004cb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d107      	bne.n	8004c3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c2e:	4b47      	ldr	r3, [pc, #284]	@ (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d119      	bne.n	8004c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e07f      	b.n	8004d3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d003      	beq.n	8004c4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c4a:	2b03      	cmp	r3, #3
 8004c4c:	d107      	bne.n	8004c5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c4e:	4b3f      	ldr	r3, [pc, #252]	@ (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d109      	bne.n	8004c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e06f      	b.n	8004d3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c5e:	4b3b      	ldr	r3, [pc, #236]	@ (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d101      	bne.n	8004c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e067      	b.n	8004d3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c6e:	4b37      	ldr	r3, [pc, #220]	@ (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f023 0203 	bic.w	r2, r3, #3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	4934      	ldr	r1, [pc, #208]	@ (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c80:	f7fd fbd2 	bl	8002428 <HAL_GetTick>
 8004c84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c86:	e00a      	b.n	8004c9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c88:	f7fd fbce 	bl	8002428 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d901      	bls.n	8004c9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e04f      	b.n	8004d3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c9e:	4b2b      	ldr	r3, [pc, #172]	@ (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	f003 020c 	and.w	r2, r3, #12
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d1eb      	bne.n	8004c88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cb0:	4b25      	ldr	r3, [pc, #148]	@ (8004d48 <HAL_RCC_ClockConfig+0x1b8>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0307 	and.w	r3, r3, #7
 8004cb8:	683a      	ldr	r2, [r7, #0]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d20c      	bcs.n	8004cd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cbe:	4b22      	ldr	r3, [pc, #136]	@ (8004d48 <HAL_RCC_ClockConfig+0x1b8>)
 8004cc0:	683a      	ldr	r2, [r7, #0]
 8004cc2:	b2d2      	uxtb	r2, r2
 8004cc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cc6:	4b20      	ldr	r3, [pc, #128]	@ (8004d48 <HAL_RCC_ClockConfig+0x1b8>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0307 	and.w	r3, r3, #7
 8004cce:	683a      	ldr	r2, [r7, #0]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d001      	beq.n	8004cd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e032      	b.n	8004d3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0304 	and.w	r3, r3, #4
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d008      	beq.n	8004cf6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ce4:	4b19      	ldr	r3, [pc, #100]	@ (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	4916      	ldr	r1, [pc, #88]	@ (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0308 	and.w	r3, r3, #8
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d009      	beq.n	8004d16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d02:	4b12      	ldr	r3, [pc, #72]	@ (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	00db      	lsls	r3, r3, #3
 8004d10:	490e      	ldr	r1, [pc, #56]	@ (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d16:	f000 f821 	bl	8004d5c <HAL_RCC_GetSysClockFreq>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	091b      	lsrs	r3, r3, #4
 8004d22:	f003 030f 	and.w	r3, r3, #15
 8004d26:	490a      	ldr	r1, [pc, #40]	@ (8004d50 <HAL_RCC_ClockConfig+0x1c0>)
 8004d28:	5ccb      	ldrb	r3, [r1, r3]
 8004d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d2e:	4a09      	ldr	r2, [pc, #36]	@ (8004d54 <HAL_RCC_ClockConfig+0x1c4>)
 8004d30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d32:	4b09      	ldr	r3, [pc, #36]	@ (8004d58 <HAL_RCC_ClockConfig+0x1c8>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7fd fb32 	bl	80023a0 <HAL_InitTick>

  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	40023c00 	.word	0x40023c00
 8004d4c:	40023800 	.word	0x40023800
 8004d50:	08009e78 	.word	0x08009e78
 8004d54:	20000028 	.word	0x20000028
 8004d58:	2000002c 	.word	0x2000002c

08004d5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d60:	b094      	sub	sp, #80	@ 0x50
 8004d62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d64:	2300      	movs	r3, #0
 8004d66:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d68:	2300      	movs	r3, #0
 8004d6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004d70:	2300      	movs	r3, #0
 8004d72:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d74:	4b79      	ldr	r3, [pc, #484]	@ (8004f5c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	f003 030c 	and.w	r3, r3, #12
 8004d7c:	2b08      	cmp	r3, #8
 8004d7e:	d00d      	beq.n	8004d9c <HAL_RCC_GetSysClockFreq+0x40>
 8004d80:	2b08      	cmp	r3, #8
 8004d82:	f200 80e1 	bhi.w	8004f48 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d002      	beq.n	8004d90 <HAL_RCC_GetSysClockFreq+0x34>
 8004d8a:	2b04      	cmp	r3, #4
 8004d8c:	d003      	beq.n	8004d96 <HAL_RCC_GetSysClockFreq+0x3a>
 8004d8e:	e0db      	b.n	8004f48 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d90:	4b73      	ldr	r3, [pc, #460]	@ (8004f60 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d92:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004d94:	e0db      	b.n	8004f4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d96:	4b73      	ldr	r3, [pc, #460]	@ (8004f64 <HAL_RCC_GetSysClockFreq+0x208>)
 8004d98:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d9a:	e0d8      	b.n	8004f4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d9c:	4b6f      	ldr	r3, [pc, #444]	@ (8004f5c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004da4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004da6:	4b6d      	ldr	r3, [pc, #436]	@ (8004f5c <HAL_RCC_GetSysClockFreq+0x200>)
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d063      	beq.n	8004e7a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004db2:	4b6a      	ldr	r3, [pc, #424]	@ (8004f5c <HAL_RCC_GetSysClockFreq+0x200>)
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	099b      	lsrs	r3, r3, #6
 8004db8:	2200      	movs	r2, #0
 8004dba:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004dbc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dc4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004dce:	4622      	mov	r2, r4
 8004dd0:	462b      	mov	r3, r5
 8004dd2:	f04f 0000 	mov.w	r0, #0
 8004dd6:	f04f 0100 	mov.w	r1, #0
 8004dda:	0159      	lsls	r1, r3, #5
 8004ddc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004de0:	0150      	lsls	r0, r2, #5
 8004de2:	4602      	mov	r2, r0
 8004de4:	460b      	mov	r3, r1
 8004de6:	4621      	mov	r1, r4
 8004de8:	1a51      	subs	r1, r2, r1
 8004dea:	6139      	str	r1, [r7, #16]
 8004dec:	4629      	mov	r1, r5
 8004dee:	eb63 0301 	sbc.w	r3, r3, r1
 8004df2:	617b      	str	r3, [r7, #20]
 8004df4:	f04f 0200 	mov.w	r2, #0
 8004df8:	f04f 0300 	mov.w	r3, #0
 8004dfc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e00:	4659      	mov	r1, fp
 8004e02:	018b      	lsls	r3, r1, #6
 8004e04:	4651      	mov	r1, sl
 8004e06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e0a:	4651      	mov	r1, sl
 8004e0c:	018a      	lsls	r2, r1, #6
 8004e0e:	4651      	mov	r1, sl
 8004e10:	ebb2 0801 	subs.w	r8, r2, r1
 8004e14:	4659      	mov	r1, fp
 8004e16:	eb63 0901 	sbc.w	r9, r3, r1
 8004e1a:	f04f 0200 	mov.w	r2, #0
 8004e1e:	f04f 0300 	mov.w	r3, #0
 8004e22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e2e:	4690      	mov	r8, r2
 8004e30:	4699      	mov	r9, r3
 8004e32:	4623      	mov	r3, r4
 8004e34:	eb18 0303 	adds.w	r3, r8, r3
 8004e38:	60bb      	str	r3, [r7, #8]
 8004e3a:	462b      	mov	r3, r5
 8004e3c:	eb49 0303 	adc.w	r3, r9, r3
 8004e40:	60fb      	str	r3, [r7, #12]
 8004e42:	f04f 0200 	mov.w	r2, #0
 8004e46:	f04f 0300 	mov.w	r3, #0
 8004e4a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e4e:	4629      	mov	r1, r5
 8004e50:	024b      	lsls	r3, r1, #9
 8004e52:	4621      	mov	r1, r4
 8004e54:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e58:	4621      	mov	r1, r4
 8004e5a:	024a      	lsls	r2, r1, #9
 8004e5c:	4610      	mov	r0, r2
 8004e5e:	4619      	mov	r1, r3
 8004e60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e62:	2200      	movs	r2, #0
 8004e64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004e6c:	f7fb fef4 	bl	8000c58 <__aeabi_uldivmod>
 8004e70:	4602      	mov	r2, r0
 8004e72:	460b      	mov	r3, r1
 8004e74:	4613      	mov	r3, r2
 8004e76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e78:	e058      	b.n	8004f2c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e7a:	4b38      	ldr	r3, [pc, #224]	@ (8004f5c <HAL_RCC_GetSysClockFreq+0x200>)
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	099b      	lsrs	r3, r3, #6
 8004e80:	2200      	movs	r2, #0
 8004e82:	4618      	mov	r0, r3
 8004e84:	4611      	mov	r1, r2
 8004e86:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e8a:	623b      	str	r3, [r7, #32]
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e94:	4642      	mov	r2, r8
 8004e96:	464b      	mov	r3, r9
 8004e98:	f04f 0000 	mov.w	r0, #0
 8004e9c:	f04f 0100 	mov.w	r1, #0
 8004ea0:	0159      	lsls	r1, r3, #5
 8004ea2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ea6:	0150      	lsls	r0, r2, #5
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	460b      	mov	r3, r1
 8004eac:	4641      	mov	r1, r8
 8004eae:	ebb2 0a01 	subs.w	sl, r2, r1
 8004eb2:	4649      	mov	r1, r9
 8004eb4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004eb8:	f04f 0200 	mov.w	r2, #0
 8004ebc:	f04f 0300 	mov.w	r3, #0
 8004ec0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ec4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ec8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ecc:	ebb2 040a 	subs.w	r4, r2, sl
 8004ed0:	eb63 050b 	sbc.w	r5, r3, fp
 8004ed4:	f04f 0200 	mov.w	r2, #0
 8004ed8:	f04f 0300 	mov.w	r3, #0
 8004edc:	00eb      	lsls	r3, r5, #3
 8004ede:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ee2:	00e2      	lsls	r2, r4, #3
 8004ee4:	4614      	mov	r4, r2
 8004ee6:	461d      	mov	r5, r3
 8004ee8:	4643      	mov	r3, r8
 8004eea:	18e3      	adds	r3, r4, r3
 8004eec:	603b      	str	r3, [r7, #0]
 8004eee:	464b      	mov	r3, r9
 8004ef0:	eb45 0303 	adc.w	r3, r5, r3
 8004ef4:	607b      	str	r3, [r7, #4]
 8004ef6:	f04f 0200 	mov.w	r2, #0
 8004efa:	f04f 0300 	mov.w	r3, #0
 8004efe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f02:	4629      	mov	r1, r5
 8004f04:	028b      	lsls	r3, r1, #10
 8004f06:	4621      	mov	r1, r4
 8004f08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f0c:	4621      	mov	r1, r4
 8004f0e:	028a      	lsls	r2, r1, #10
 8004f10:	4610      	mov	r0, r2
 8004f12:	4619      	mov	r1, r3
 8004f14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f16:	2200      	movs	r2, #0
 8004f18:	61bb      	str	r3, [r7, #24]
 8004f1a:	61fa      	str	r2, [r7, #28]
 8004f1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f20:	f7fb fe9a 	bl	8000c58 <__aeabi_uldivmod>
 8004f24:	4602      	mov	r2, r0
 8004f26:	460b      	mov	r3, r1
 8004f28:	4613      	mov	r3, r2
 8004f2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8004f5c <HAL_RCC_GetSysClockFreq+0x200>)
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	0c1b      	lsrs	r3, r3, #16
 8004f32:	f003 0303 	and.w	r3, r3, #3
 8004f36:	3301      	adds	r3, #1
 8004f38:	005b      	lsls	r3, r3, #1
 8004f3a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004f3c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f44:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f46:	e002      	b.n	8004f4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f48:	4b05      	ldr	r3, [pc, #20]	@ (8004f60 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f4a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3750      	adds	r7, #80	@ 0x50
 8004f54:	46bd      	mov	sp, r7
 8004f56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f5a:	bf00      	nop
 8004f5c:	40023800 	.word	0x40023800
 8004f60:	00f42400 	.word	0x00f42400
 8004f64:	007a1200 	.word	0x007a1200

08004f68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f6c:	4b03      	ldr	r3, [pc, #12]	@ (8004f7c <HAL_RCC_GetHCLKFreq+0x14>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	20000028 	.word	0x20000028

08004f80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f84:	f7ff fff0 	bl	8004f68 <HAL_RCC_GetHCLKFreq>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	4b05      	ldr	r3, [pc, #20]	@ (8004fa0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	0a9b      	lsrs	r3, r3, #10
 8004f90:	f003 0307 	and.w	r3, r3, #7
 8004f94:	4903      	ldr	r1, [pc, #12]	@ (8004fa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f96:	5ccb      	ldrb	r3, [r1, r3]
 8004f98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	40023800 	.word	0x40023800
 8004fa4:	08009e88 	.word	0x08009e88

08004fa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004fac:	f7ff ffdc 	bl	8004f68 <HAL_RCC_GetHCLKFreq>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	4b05      	ldr	r3, [pc, #20]	@ (8004fc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	0b5b      	lsrs	r3, r3, #13
 8004fb8:	f003 0307 	and.w	r3, r3, #7
 8004fbc:	4903      	ldr	r1, [pc, #12]	@ (8004fcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fbe:	5ccb      	ldrb	r3, [r1, r3]
 8004fc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	40023800 	.word	0x40023800
 8004fcc:	08009e88 	.word	0x08009e88

08004fd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d101      	bne.n	8004fe2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e041      	b.n	8005066 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d106      	bne.n	8004ffc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f7fc ff1e 	bl	8001e38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2202      	movs	r2, #2
 8005000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	3304      	adds	r3, #4
 800500c:	4619      	mov	r1, r3
 800500e:	4610      	mov	r0, r2
 8005010:	f000 fcc6 	bl	80059a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3708      	adds	r7, #8
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}

0800506e <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800506e:	b480      	push	{r7}
 8005070:	b083      	sub	sp, #12
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	6a1a      	ldr	r2, [r3, #32]
 800507c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005080:	4013      	ands	r3, r2
 8005082:	2b00      	cmp	r3, #0
 8005084:	d10f      	bne.n	80050a6 <HAL_TIM_Base_Stop+0x38>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	6a1a      	ldr	r2, [r3, #32]
 800508c:	f240 4344 	movw	r3, #1092	@ 0x444
 8005090:	4013      	ands	r3, r2
 8005092:	2b00      	cmp	r3, #0
 8005094:	d107      	bne.n	80050a6 <HAL_TIM_Base_Stop+0x38>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f022 0201 	bic.w	r2, r2, #1
 80050a4:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d001      	beq.n	80050d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e044      	b.n	800515e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2202      	movs	r2, #2
 80050d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68da      	ldr	r2, [r3, #12]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f042 0201 	orr.w	r2, r2, #1
 80050ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a1e      	ldr	r2, [pc, #120]	@ (800516c <HAL_TIM_Base_Start_IT+0xb0>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d018      	beq.n	8005128 <HAL_TIM_Base_Start_IT+0x6c>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050fe:	d013      	beq.n	8005128 <HAL_TIM_Base_Start_IT+0x6c>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a1a      	ldr	r2, [pc, #104]	@ (8005170 <HAL_TIM_Base_Start_IT+0xb4>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d00e      	beq.n	8005128 <HAL_TIM_Base_Start_IT+0x6c>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a19      	ldr	r2, [pc, #100]	@ (8005174 <HAL_TIM_Base_Start_IT+0xb8>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d009      	beq.n	8005128 <HAL_TIM_Base_Start_IT+0x6c>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a17      	ldr	r2, [pc, #92]	@ (8005178 <HAL_TIM_Base_Start_IT+0xbc>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d004      	beq.n	8005128 <HAL_TIM_Base_Start_IT+0x6c>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a16      	ldr	r2, [pc, #88]	@ (800517c <HAL_TIM_Base_Start_IT+0xc0>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d111      	bne.n	800514c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f003 0307 	and.w	r3, r3, #7
 8005132:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2b06      	cmp	r3, #6
 8005138:	d010      	beq.n	800515c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f042 0201 	orr.w	r2, r2, #1
 8005148:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800514a:	e007      	b.n	800515c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f042 0201 	orr.w	r2, r2, #1
 800515a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3714      	adds	r7, #20
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop
 800516c:	40010000 	.word	0x40010000
 8005170:	40000400 	.word	0x40000400
 8005174:	40000800 	.word	0x40000800
 8005178:	40000c00 	.word	0x40000c00
 800517c:	40014000 	.word	0x40014000

08005180 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d101      	bne.n	8005192 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e041      	b.n	8005216 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d106      	bne.n	80051ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 f839 	bl	800521e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2202      	movs	r2, #2
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	3304      	adds	r3, #4
 80051bc:	4619      	mov	r1, r3
 80051be:	4610      	mov	r0, r2
 80051c0:	f000 fbee 	bl	80059a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3708      	adds	r7, #8
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800521e:	b480      	push	{r7}
 8005220:	b083      	sub	sp, #12
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005226:	bf00      	nop
 8005228:	370c      	adds	r7, #12
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
	...

08005234 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d109      	bne.n	8005258 <HAL_TIM_PWM_Start+0x24>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800524a:	b2db      	uxtb	r3, r3
 800524c:	2b01      	cmp	r3, #1
 800524e:	bf14      	ite	ne
 8005250:	2301      	movne	r3, #1
 8005252:	2300      	moveq	r3, #0
 8005254:	b2db      	uxtb	r3, r3
 8005256:	e022      	b.n	800529e <HAL_TIM_PWM_Start+0x6a>
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	2b04      	cmp	r3, #4
 800525c:	d109      	bne.n	8005272 <HAL_TIM_PWM_Start+0x3e>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005264:	b2db      	uxtb	r3, r3
 8005266:	2b01      	cmp	r3, #1
 8005268:	bf14      	ite	ne
 800526a:	2301      	movne	r3, #1
 800526c:	2300      	moveq	r3, #0
 800526e:	b2db      	uxtb	r3, r3
 8005270:	e015      	b.n	800529e <HAL_TIM_PWM_Start+0x6a>
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	2b08      	cmp	r3, #8
 8005276:	d109      	bne.n	800528c <HAL_TIM_PWM_Start+0x58>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800527e:	b2db      	uxtb	r3, r3
 8005280:	2b01      	cmp	r3, #1
 8005282:	bf14      	ite	ne
 8005284:	2301      	movne	r3, #1
 8005286:	2300      	moveq	r3, #0
 8005288:	b2db      	uxtb	r3, r3
 800528a:	e008      	b.n	800529e <HAL_TIM_PWM_Start+0x6a>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005292:	b2db      	uxtb	r3, r3
 8005294:	2b01      	cmp	r3, #1
 8005296:	bf14      	ite	ne
 8005298:	2301      	movne	r3, #1
 800529a:	2300      	moveq	r3, #0
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d001      	beq.n	80052a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e068      	b.n	8005378 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d104      	bne.n	80052b6 <HAL_TIM_PWM_Start+0x82>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2202      	movs	r2, #2
 80052b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052b4:	e013      	b.n	80052de <HAL_TIM_PWM_Start+0xaa>
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	2b04      	cmp	r3, #4
 80052ba:	d104      	bne.n	80052c6 <HAL_TIM_PWM_Start+0x92>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2202      	movs	r2, #2
 80052c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052c4:	e00b      	b.n	80052de <HAL_TIM_PWM_Start+0xaa>
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	2b08      	cmp	r3, #8
 80052ca:	d104      	bne.n	80052d6 <HAL_TIM_PWM_Start+0xa2>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2202      	movs	r2, #2
 80052d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052d4:	e003      	b.n	80052de <HAL_TIM_PWM_Start+0xaa>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2202      	movs	r2, #2
 80052da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2201      	movs	r2, #1
 80052e4:	6839      	ldr	r1, [r7, #0]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f000 fe0c 	bl	8005f04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a23      	ldr	r2, [pc, #140]	@ (8005380 <HAL_TIM_PWM_Start+0x14c>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d107      	bne.n	8005306 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005304:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a1d      	ldr	r2, [pc, #116]	@ (8005380 <HAL_TIM_PWM_Start+0x14c>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d018      	beq.n	8005342 <HAL_TIM_PWM_Start+0x10e>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005318:	d013      	beq.n	8005342 <HAL_TIM_PWM_Start+0x10e>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a19      	ldr	r2, [pc, #100]	@ (8005384 <HAL_TIM_PWM_Start+0x150>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d00e      	beq.n	8005342 <HAL_TIM_PWM_Start+0x10e>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a17      	ldr	r2, [pc, #92]	@ (8005388 <HAL_TIM_PWM_Start+0x154>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d009      	beq.n	8005342 <HAL_TIM_PWM_Start+0x10e>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a16      	ldr	r2, [pc, #88]	@ (800538c <HAL_TIM_PWM_Start+0x158>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d004      	beq.n	8005342 <HAL_TIM_PWM_Start+0x10e>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a14      	ldr	r2, [pc, #80]	@ (8005390 <HAL_TIM_PWM_Start+0x15c>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d111      	bne.n	8005366 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	f003 0307 	and.w	r3, r3, #7
 800534c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2b06      	cmp	r3, #6
 8005352:	d010      	beq.n	8005376 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f042 0201 	orr.w	r2, r2, #1
 8005362:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005364:	e007      	b.n	8005376 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f042 0201 	orr.w	r2, r2, #1
 8005374:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3710      	adds	r7, #16
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}
 8005380:	40010000 	.word	0x40010000
 8005384:	40000400 	.word	0x40000400
 8005388:	40000800 	.word	0x40000800
 800538c:	40000c00 	.word	0x40000c00
 8005390:	40014000 	.word	0x40014000

08005394 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b082      	sub	sp, #8
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2200      	movs	r2, #0
 80053a4:	6839      	ldr	r1, [r7, #0]
 80053a6:	4618      	mov	r0, r3
 80053a8:	f000 fdac 	bl	8005f04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a29      	ldr	r2, [pc, #164]	@ (8005458 <HAL_TIM_PWM_Stop+0xc4>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d117      	bne.n	80053e6 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	6a1a      	ldr	r2, [r3, #32]
 80053bc:	f241 1311 	movw	r3, #4369	@ 0x1111
 80053c0:	4013      	ands	r3, r2
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d10f      	bne.n	80053e6 <HAL_TIM_PWM_Stop+0x52>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	6a1a      	ldr	r2, [r3, #32]
 80053cc:	f240 4344 	movw	r3, #1092	@ 0x444
 80053d0:	4013      	ands	r3, r2
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d107      	bne.n	80053e6 <HAL_TIM_PWM_Stop+0x52>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80053e4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	6a1a      	ldr	r2, [r3, #32]
 80053ec:	f241 1311 	movw	r3, #4369	@ 0x1111
 80053f0:	4013      	ands	r3, r2
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d10f      	bne.n	8005416 <HAL_TIM_PWM_Stop+0x82>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	6a1a      	ldr	r2, [r3, #32]
 80053fc:	f240 4344 	movw	r3, #1092	@ 0x444
 8005400:	4013      	ands	r3, r2
 8005402:	2b00      	cmp	r3, #0
 8005404:	d107      	bne.n	8005416 <HAL_TIM_PWM_Stop+0x82>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f022 0201 	bic.w	r2, r2, #1
 8005414:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d104      	bne.n	8005426 <HAL_TIM_PWM_Stop+0x92>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005424:	e013      	b.n	800544e <HAL_TIM_PWM_Stop+0xba>
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	2b04      	cmp	r3, #4
 800542a:	d104      	bne.n	8005436 <HAL_TIM_PWM_Stop+0xa2>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005434:	e00b      	b.n	800544e <HAL_TIM_PWM_Stop+0xba>
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	2b08      	cmp	r3, #8
 800543a:	d104      	bne.n	8005446 <HAL_TIM_PWM_Stop+0xb2>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005444:	e003      	b.n	800544e <HAL_TIM_PWM_Stop+0xba>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2201      	movs	r2, #1
 800544a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	3708      	adds	r7, #8
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}
 8005458:	40010000 	.word	0x40010000

0800545c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	f003 0302 	and.w	r3, r3, #2
 800547a:	2b00      	cmp	r3, #0
 800547c:	d020      	beq.n	80054c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f003 0302 	and.w	r3, r3, #2
 8005484:	2b00      	cmp	r3, #0
 8005486:	d01b      	beq.n	80054c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f06f 0202 	mvn.w	r2, #2
 8005490:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2201      	movs	r2, #1
 8005496:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	f003 0303 	and.w	r3, r3, #3
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d003      	beq.n	80054ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 fa5b 	bl	8005962 <HAL_TIM_IC_CaptureCallback>
 80054ac:	e005      	b.n	80054ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 fa4d 	bl	800594e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f000 fa5e 	bl	8005976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	f003 0304 	and.w	r3, r3, #4
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d020      	beq.n	800550c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f003 0304 	and.w	r3, r3, #4
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d01b      	beq.n	800550c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f06f 0204 	mvn.w	r2, #4
 80054dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2202      	movs	r2, #2
 80054e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	699b      	ldr	r3, [r3, #24]
 80054ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d003      	beq.n	80054fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 fa35 	bl	8005962 <HAL_TIM_IC_CaptureCallback>
 80054f8:	e005      	b.n	8005506 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 fa27 	bl	800594e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 fa38 	bl	8005976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	f003 0308 	and.w	r3, r3, #8
 8005512:	2b00      	cmp	r3, #0
 8005514:	d020      	beq.n	8005558 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f003 0308 	and.w	r3, r3, #8
 800551c:	2b00      	cmp	r3, #0
 800551e:	d01b      	beq.n	8005558 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f06f 0208 	mvn.w	r2, #8
 8005528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2204      	movs	r2, #4
 800552e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	69db      	ldr	r3, [r3, #28]
 8005536:	f003 0303 	and.w	r3, r3, #3
 800553a:	2b00      	cmp	r3, #0
 800553c:	d003      	beq.n	8005546 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 fa0f 	bl	8005962 <HAL_TIM_IC_CaptureCallback>
 8005544:	e005      	b.n	8005552 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 fa01 	bl	800594e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 fa12 	bl	8005976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	f003 0310 	and.w	r3, r3, #16
 800555e:	2b00      	cmp	r3, #0
 8005560:	d020      	beq.n	80055a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f003 0310 	and.w	r3, r3, #16
 8005568:	2b00      	cmp	r3, #0
 800556a:	d01b      	beq.n	80055a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f06f 0210 	mvn.w	r2, #16
 8005574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2208      	movs	r2, #8
 800557a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	69db      	ldr	r3, [r3, #28]
 8005582:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005586:	2b00      	cmp	r3, #0
 8005588:	d003      	beq.n	8005592 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 f9e9 	bl	8005962 <HAL_TIM_IC_CaptureCallback>
 8005590:	e005      	b.n	800559e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f9db 	bl	800594e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 f9ec 	bl	8005976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00c      	beq.n	80055c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f003 0301 	and.w	r3, r3, #1
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d007      	beq.n	80055c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f06f 0201 	mvn.w	r2, #1
 80055c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f7fb ff58 	bl	8001478 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00c      	beq.n	80055ec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d007      	beq.n	80055ec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80055e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 fd2a 	bl	8006040 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00c      	beq.n	8005610 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d007      	beq.n	8005610 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f9bd 	bl	800598a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	f003 0320 	and.w	r3, r3, #32
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00c      	beq.n	8005634 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f003 0320 	and.w	r3, r3, #32
 8005620:	2b00      	cmp	r3, #0
 8005622:	d007      	beq.n	8005634 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f06f 0220 	mvn.w	r2, #32
 800562c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 fcfc 	bl	800602c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005634:	bf00      	nop
 8005636:	3710      	adds	r7, #16
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b086      	sub	sp, #24
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005648:	2300      	movs	r3, #0
 800564a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005652:	2b01      	cmp	r3, #1
 8005654:	d101      	bne.n	800565a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005656:	2302      	movs	r3, #2
 8005658:	e0ae      	b.n	80057b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2201      	movs	r2, #1
 800565e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2b0c      	cmp	r3, #12
 8005666:	f200 809f 	bhi.w	80057a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800566a:	a201      	add	r2, pc, #4	@ (adr r2, 8005670 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800566c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005670:	080056a5 	.word	0x080056a5
 8005674:	080057a9 	.word	0x080057a9
 8005678:	080057a9 	.word	0x080057a9
 800567c:	080057a9 	.word	0x080057a9
 8005680:	080056e5 	.word	0x080056e5
 8005684:	080057a9 	.word	0x080057a9
 8005688:	080057a9 	.word	0x080057a9
 800568c:	080057a9 	.word	0x080057a9
 8005690:	08005727 	.word	0x08005727
 8005694:	080057a9 	.word	0x080057a9
 8005698:	080057a9 	.word	0x080057a9
 800569c:	080057a9 	.word	0x080057a9
 80056a0:	08005767 	.word	0x08005767
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68b9      	ldr	r1, [r7, #8]
 80056aa:	4618      	mov	r0, r3
 80056ac:	f000 fa04 	bl	8005ab8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	699a      	ldr	r2, [r3, #24]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f042 0208 	orr.w	r2, r2, #8
 80056be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	699a      	ldr	r2, [r3, #24]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f022 0204 	bic.w	r2, r2, #4
 80056ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6999      	ldr	r1, [r3, #24]
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	691a      	ldr	r2, [r3, #16]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	430a      	orrs	r2, r1
 80056e0:	619a      	str	r2, [r3, #24]
      break;
 80056e2:	e064      	b.n	80057ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68b9      	ldr	r1, [r7, #8]
 80056ea:	4618      	mov	r0, r3
 80056ec:	f000 fa4a 	bl	8005b84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	699a      	ldr	r2, [r3, #24]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	699a      	ldr	r2, [r3, #24]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800570e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	6999      	ldr	r1, [r3, #24]
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	021a      	lsls	r2, r3, #8
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	430a      	orrs	r2, r1
 8005722:	619a      	str	r2, [r3, #24]
      break;
 8005724:	e043      	b.n	80057ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68b9      	ldr	r1, [r7, #8]
 800572c:	4618      	mov	r0, r3
 800572e:	f000 fa95 	bl	8005c5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	69da      	ldr	r2, [r3, #28]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f042 0208 	orr.w	r2, r2, #8
 8005740:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	69da      	ldr	r2, [r3, #28]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f022 0204 	bic.w	r2, r2, #4
 8005750:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	69d9      	ldr	r1, [r3, #28]
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	691a      	ldr	r2, [r3, #16]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	430a      	orrs	r2, r1
 8005762:	61da      	str	r2, [r3, #28]
      break;
 8005764:	e023      	b.n	80057ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68b9      	ldr	r1, [r7, #8]
 800576c:	4618      	mov	r0, r3
 800576e:	f000 fadf 	bl	8005d30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	69da      	ldr	r2, [r3, #28]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005780:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	69da      	ldr	r2, [r3, #28]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005790:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	69d9      	ldr	r1, [r3, #28]
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	021a      	lsls	r2, r3, #8
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	430a      	orrs	r2, r1
 80057a4:	61da      	str	r2, [r3, #28]
      break;
 80057a6:	e002      	b.n	80057ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	75fb      	strb	r3, [r7, #23]
      break;
 80057ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80057b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3718      	adds	r7, #24
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057ca:	2300      	movs	r3, #0
 80057cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d101      	bne.n	80057dc <HAL_TIM_ConfigClockSource+0x1c>
 80057d8:	2302      	movs	r3, #2
 80057da:	e0b4      	b.n	8005946 <HAL_TIM_ConfigClockSource+0x186>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2202      	movs	r2, #2
 80057e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80057fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005802:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68ba      	ldr	r2, [r7, #8]
 800580a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005814:	d03e      	beq.n	8005894 <HAL_TIM_ConfigClockSource+0xd4>
 8005816:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800581a:	f200 8087 	bhi.w	800592c <HAL_TIM_ConfigClockSource+0x16c>
 800581e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005822:	f000 8086 	beq.w	8005932 <HAL_TIM_ConfigClockSource+0x172>
 8005826:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800582a:	d87f      	bhi.n	800592c <HAL_TIM_ConfigClockSource+0x16c>
 800582c:	2b70      	cmp	r3, #112	@ 0x70
 800582e:	d01a      	beq.n	8005866 <HAL_TIM_ConfigClockSource+0xa6>
 8005830:	2b70      	cmp	r3, #112	@ 0x70
 8005832:	d87b      	bhi.n	800592c <HAL_TIM_ConfigClockSource+0x16c>
 8005834:	2b60      	cmp	r3, #96	@ 0x60
 8005836:	d050      	beq.n	80058da <HAL_TIM_ConfigClockSource+0x11a>
 8005838:	2b60      	cmp	r3, #96	@ 0x60
 800583a:	d877      	bhi.n	800592c <HAL_TIM_ConfigClockSource+0x16c>
 800583c:	2b50      	cmp	r3, #80	@ 0x50
 800583e:	d03c      	beq.n	80058ba <HAL_TIM_ConfigClockSource+0xfa>
 8005840:	2b50      	cmp	r3, #80	@ 0x50
 8005842:	d873      	bhi.n	800592c <HAL_TIM_ConfigClockSource+0x16c>
 8005844:	2b40      	cmp	r3, #64	@ 0x40
 8005846:	d058      	beq.n	80058fa <HAL_TIM_ConfigClockSource+0x13a>
 8005848:	2b40      	cmp	r3, #64	@ 0x40
 800584a:	d86f      	bhi.n	800592c <HAL_TIM_ConfigClockSource+0x16c>
 800584c:	2b30      	cmp	r3, #48	@ 0x30
 800584e:	d064      	beq.n	800591a <HAL_TIM_ConfigClockSource+0x15a>
 8005850:	2b30      	cmp	r3, #48	@ 0x30
 8005852:	d86b      	bhi.n	800592c <HAL_TIM_ConfigClockSource+0x16c>
 8005854:	2b20      	cmp	r3, #32
 8005856:	d060      	beq.n	800591a <HAL_TIM_ConfigClockSource+0x15a>
 8005858:	2b20      	cmp	r3, #32
 800585a:	d867      	bhi.n	800592c <HAL_TIM_ConfigClockSource+0x16c>
 800585c:	2b00      	cmp	r3, #0
 800585e:	d05c      	beq.n	800591a <HAL_TIM_ConfigClockSource+0x15a>
 8005860:	2b10      	cmp	r3, #16
 8005862:	d05a      	beq.n	800591a <HAL_TIM_ConfigClockSource+0x15a>
 8005864:	e062      	b.n	800592c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005876:	f000 fb25 	bl	8005ec4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005888:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68ba      	ldr	r2, [r7, #8]
 8005890:	609a      	str	r2, [r3, #8]
      break;
 8005892:	e04f      	b.n	8005934 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058a4:	f000 fb0e 	bl	8005ec4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	689a      	ldr	r2, [r3, #8]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80058b6:	609a      	str	r2, [r3, #8]
      break;
 80058b8:	e03c      	b.n	8005934 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058c6:	461a      	mov	r2, r3
 80058c8:	f000 fa82 	bl	8005dd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2150      	movs	r1, #80	@ 0x50
 80058d2:	4618      	mov	r0, r3
 80058d4:	f000 fadb 	bl	8005e8e <TIM_ITRx_SetConfig>
      break;
 80058d8:	e02c      	b.n	8005934 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80058e6:	461a      	mov	r2, r3
 80058e8:	f000 faa1 	bl	8005e2e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2160      	movs	r1, #96	@ 0x60
 80058f2:	4618      	mov	r0, r3
 80058f4:	f000 facb 	bl	8005e8e <TIM_ITRx_SetConfig>
      break;
 80058f8:	e01c      	b.n	8005934 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005906:	461a      	mov	r2, r3
 8005908:	f000 fa62 	bl	8005dd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2140      	movs	r1, #64	@ 0x40
 8005912:	4618      	mov	r0, r3
 8005914:	f000 fabb 	bl	8005e8e <TIM_ITRx_SetConfig>
      break;
 8005918:	e00c      	b.n	8005934 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4619      	mov	r1, r3
 8005924:	4610      	mov	r0, r2
 8005926:	f000 fab2 	bl	8005e8e <TIM_ITRx_SetConfig>
      break;
 800592a:	e003      	b.n	8005934 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	73fb      	strb	r3, [r7, #15]
      break;
 8005930:	e000      	b.n	8005934 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005932:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005944:	7bfb      	ldrb	r3, [r7, #15]
}
 8005946:	4618      	mov	r0, r3
 8005948:	3710      	adds	r7, #16
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}

0800594e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800594e:	b480      	push	{r7}
 8005950:	b083      	sub	sp, #12
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005956:	bf00      	nop
 8005958:	370c      	adds	r7, #12
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr

08005962 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005962:	b480      	push	{r7}
 8005964:	b083      	sub	sp, #12
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800596a:	bf00      	nop
 800596c:	370c      	adds	r7, #12
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr

08005976 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005976:	b480      	push	{r7}
 8005978:	b083      	sub	sp, #12
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800597e:	bf00      	nop
 8005980:	370c      	adds	r7, #12
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr

0800598a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800598a:	b480      	push	{r7}
 800598c:	b083      	sub	sp, #12
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005992:	bf00      	nop
 8005994:	370c      	adds	r7, #12
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr
	...

080059a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b085      	sub	sp, #20
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a3a      	ldr	r2, [pc, #232]	@ (8005a9c <TIM_Base_SetConfig+0xfc>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d00f      	beq.n	80059d8 <TIM_Base_SetConfig+0x38>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059be:	d00b      	beq.n	80059d8 <TIM_Base_SetConfig+0x38>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a37      	ldr	r2, [pc, #220]	@ (8005aa0 <TIM_Base_SetConfig+0x100>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d007      	beq.n	80059d8 <TIM_Base_SetConfig+0x38>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a36      	ldr	r2, [pc, #216]	@ (8005aa4 <TIM_Base_SetConfig+0x104>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d003      	beq.n	80059d8 <TIM_Base_SetConfig+0x38>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a35      	ldr	r2, [pc, #212]	@ (8005aa8 <TIM_Base_SetConfig+0x108>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d108      	bne.n	80059ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a2b      	ldr	r2, [pc, #172]	@ (8005a9c <TIM_Base_SetConfig+0xfc>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d01b      	beq.n	8005a2a <TIM_Base_SetConfig+0x8a>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059f8:	d017      	beq.n	8005a2a <TIM_Base_SetConfig+0x8a>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a28      	ldr	r2, [pc, #160]	@ (8005aa0 <TIM_Base_SetConfig+0x100>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d013      	beq.n	8005a2a <TIM_Base_SetConfig+0x8a>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a27      	ldr	r2, [pc, #156]	@ (8005aa4 <TIM_Base_SetConfig+0x104>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d00f      	beq.n	8005a2a <TIM_Base_SetConfig+0x8a>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a26      	ldr	r2, [pc, #152]	@ (8005aa8 <TIM_Base_SetConfig+0x108>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d00b      	beq.n	8005a2a <TIM_Base_SetConfig+0x8a>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a25      	ldr	r2, [pc, #148]	@ (8005aac <TIM_Base_SetConfig+0x10c>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d007      	beq.n	8005a2a <TIM_Base_SetConfig+0x8a>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a24      	ldr	r2, [pc, #144]	@ (8005ab0 <TIM_Base_SetConfig+0x110>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d003      	beq.n	8005a2a <TIM_Base_SetConfig+0x8a>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a23      	ldr	r2, [pc, #140]	@ (8005ab4 <TIM_Base_SetConfig+0x114>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d108      	bne.n	8005a3c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	695b      	ldr	r3, [r3, #20]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	689a      	ldr	r2, [r3, #8]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a0e      	ldr	r2, [pc, #56]	@ (8005a9c <TIM_Base_SetConfig+0xfc>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d103      	bne.n	8005a70 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	691a      	ldr	r2, [r3, #16]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	691b      	ldr	r3, [r3, #16]
 8005a7a:	f003 0301 	and.w	r3, r3, #1
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d105      	bne.n	8005a8e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	f023 0201 	bic.w	r2, r3, #1
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	611a      	str	r2, [r3, #16]
  }
}
 8005a8e:	bf00      	nop
 8005a90:	3714      	adds	r7, #20
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	40010000 	.word	0x40010000
 8005aa0:	40000400 	.word	0x40000400
 8005aa4:	40000800 	.word	0x40000800
 8005aa8:	40000c00 	.word	0x40000c00
 8005aac:	40014000 	.word	0x40014000
 8005ab0:	40014400 	.word	0x40014400
 8005ab4:	40014800 	.word	0x40014800

08005ab8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b087      	sub	sp, #28
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a1b      	ldr	r3, [r3, #32]
 8005ac6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6a1b      	ldr	r3, [r3, #32]
 8005acc:	f023 0201 	bic.w	r2, r3, #1
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	699b      	ldr	r3, [r3, #24]
 8005ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f023 0303 	bic.w	r3, r3, #3
 8005aee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	f023 0302 	bic.w	r3, r3, #2
 8005b00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	697a      	ldr	r2, [r7, #20]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a1c      	ldr	r2, [pc, #112]	@ (8005b80 <TIM_OC1_SetConfig+0xc8>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d10c      	bne.n	8005b2e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	f023 0308 	bic.w	r3, r3, #8
 8005b1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	697a      	ldr	r2, [r7, #20]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	f023 0304 	bic.w	r3, r3, #4
 8005b2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a13      	ldr	r2, [pc, #76]	@ (8005b80 <TIM_OC1_SetConfig+0xc8>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d111      	bne.n	8005b5a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	695b      	ldr	r3, [r3, #20]
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	693a      	ldr	r2, [r7, #16]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	693a      	ldr	r2, [r7, #16]
 8005b5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	685a      	ldr	r2, [r3, #4]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	697a      	ldr	r2, [r7, #20]
 8005b72:	621a      	str	r2, [r3, #32]
}
 8005b74:	bf00      	nop
 8005b76:	371c      	adds	r7, #28
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr
 8005b80:	40010000 	.word	0x40010000

08005b84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b087      	sub	sp, #28
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a1b      	ldr	r3, [r3, #32]
 8005b92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6a1b      	ldr	r3, [r3, #32]
 8005b98:	f023 0210 	bic.w	r2, r3, #16
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	699b      	ldr	r3, [r3, #24]
 8005baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	021b      	lsls	r3, r3, #8
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	f023 0320 	bic.w	r3, r3, #32
 8005bce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	011b      	lsls	r3, r3, #4
 8005bd6:	697a      	ldr	r2, [r7, #20]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4a1e      	ldr	r2, [pc, #120]	@ (8005c58 <TIM_OC2_SetConfig+0xd4>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d10d      	bne.n	8005c00 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	011b      	lsls	r3, r3, #4
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bfe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a15      	ldr	r2, [pc, #84]	@ (8005c58 <TIM_OC2_SetConfig+0xd4>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d113      	bne.n	8005c30 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	695b      	ldr	r3, [r3, #20]
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	699b      	ldr	r3, [r3, #24]
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	693a      	ldr	r2, [r7, #16]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	693a      	ldr	r2, [r7, #16]
 8005c34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	685a      	ldr	r2, [r3, #4]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	697a      	ldr	r2, [r7, #20]
 8005c48:	621a      	str	r2, [r3, #32]
}
 8005c4a:	bf00      	nop
 8005c4c:	371c      	adds	r7, #28
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	40010000 	.word	0x40010000

08005c5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b087      	sub	sp, #28
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a1b      	ldr	r3, [r3, #32]
 8005c6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a1b      	ldr	r3, [r3, #32]
 8005c70:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	69db      	ldr	r3, [r3, #28]
 8005c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f023 0303 	bic.w	r3, r3, #3
 8005c92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ca4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	021b      	lsls	r3, r3, #8
 8005cac:	697a      	ldr	r2, [r7, #20]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a1d      	ldr	r2, [pc, #116]	@ (8005d2c <TIM_OC3_SetConfig+0xd0>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d10d      	bne.n	8005cd6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005cc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	021b      	lsls	r3, r3, #8
 8005cc8:	697a      	ldr	r2, [r7, #20]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005cd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a14      	ldr	r2, [pc, #80]	@ (8005d2c <TIM_OC3_SetConfig+0xd0>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d113      	bne.n	8005d06 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ce4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005cec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	011b      	lsls	r3, r3, #4
 8005cf4:	693a      	ldr	r2, [r7, #16]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	699b      	ldr	r3, [r3, #24]
 8005cfe:	011b      	lsls	r3, r3, #4
 8005d00:	693a      	ldr	r2, [r7, #16]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	693a      	ldr	r2, [r7, #16]
 8005d0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	685a      	ldr	r2, [r3, #4]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	697a      	ldr	r2, [r7, #20]
 8005d1e:	621a      	str	r2, [r3, #32]
}
 8005d20:	bf00      	nop
 8005d22:	371c      	adds	r7, #28
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr
 8005d2c:	40010000 	.word	0x40010000

08005d30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b087      	sub	sp, #28
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a1b      	ldr	r3, [r3, #32]
 8005d3e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a1b      	ldr	r3, [r3, #32]
 8005d44:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	69db      	ldr	r3, [r3, #28]
 8005d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	021b      	lsls	r3, r3, #8
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	031b      	lsls	r3, r3, #12
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a10      	ldr	r2, [pc, #64]	@ (8005dcc <TIM_OC4_SetConfig+0x9c>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d109      	bne.n	8005da4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	695b      	ldr	r3, [r3, #20]
 8005d9c:	019b      	lsls	r3, r3, #6
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	685a      	ldr	r2, [r3, #4]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	693a      	ldr	r2, [r7, #16]
 8005dbc:	621a      	str	r2, [r3, #32]
}
 8005dbe:	bf00      	nop
 8005dc0:	371c      	adds	r7, #28
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop
 8005dcc:	40010000 	.word	0x40010000

08005dd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b087      	sub	sp, #28
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6a1b      	ldr	r3, [r3, #32]
 8005de0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6a1b      	ldr	r3, [r3, #32]
 8005de6:	f023 0201 	bic.w	r2, r3, #1
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	699b      	ldr	r3, [r3, #24]
 8005df2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005dfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	011b      	lsls	r3, r3, #4
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	f023 030a 	bic.w	r3, r3, #10
 8005e0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e0e:	697a      	ldr	r2, [r7, #20]
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	693a      	ldr	r2, [r7, #16]
 8005e1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	697a      	ldr	r2, [r7, #20]
 8005e20:	621a      	str	r2, [r3, #32]
}
 8005e22:	bf00      	nop
 8005e24:	371c      	adds	r7, #28
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr

08005e2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e2e:	b480      	push	{r7}
 8005e30:	b087      	sub	sp, #28
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	60f8      	str	r0, [r7, #12]
 8005e36:	60b9      	str	r1, [r7, #8]
 8005e38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6a1b      	ldr	r3, [r3, #32]
 8005e3e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6a1b      	ldr	r3, [r3, #32]
 8005e44:	f023 0210 	bic.w	r2, r3, #16
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	699b      	ldr	r3, [r3, #24]
 8005e50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005e58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	031b      	lsls	r3, r3, #12
 8005e5e:	693a      	ldr	r2, [r7, #16]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005e6a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	011b      	lsls	r3, r3, #4
 8005e70:	697a      	ldr	r2, [r7, #20]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	693a      	ldr	r2, [r7, #16]
 8005e7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	697a      	ldr	r2, [r7, #20]
 8005e80:	621a      	str	r2, [r3, #32]
}
 8005e82:	bf00      	nop
 8005e84:	371c      	adds	r7, #28
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr

08005e8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e8e:	b480      	push	{r7}
 8005e90:	b085      	sub	sp, #20
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
 8005e96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ea4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ea6:	683a      	ldr	r2, [r7, #0]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	f043 0307 	orr.w	r3, r3, #7
 8005eb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	68fa      	ldr	r2, [r7, #12]
 8005eb6:	609a      	str	r2, [r3, #8]
}
 8005eb8:	bf00      	nop
 8005eba:	3714      	adds	r7, #20
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b087      	sub	sp, #28
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	607a      	str	r2, [r7, #4]
 8005ed0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ede:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	021a      	lsls	r2, r3, #8
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	431a      	orrs	r2, r3
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	697a      	ldr	r2, [r7, #20]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	697a      	ldr	r2, [r7, #20]
 8005ef6:	609a      	str	r2, [r3, #8]
}
 8005ef8:	bf00      	nop
 8005efa:	371c      	adds	r7, #28
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b087      	sub	sp, #28
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	f003 031f 	and.w	r3, r3, #31
 8005f16:	2201      	movs	r2, #1
 8005f18:	fa02 f303 	lsl.w	r3, r2, r3
 8005f1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6a1a      	ldr	r2, [r3, #32]
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	43db      	mvns	r3, r3
 8005f26:	401a      	ands	r2, r3
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6a1a      	ldr	r2, [r3, #32]
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	f003 031f 	and.w	r3, r3, #31
 8005f36:	6879      	ldr	r1, [r7, #4]
 8005f38:	fa01 f303 	lsl.w	r3, r1, r3
 8005f3c:	431a      	orrs	r2, r3
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	621a      	str	r2, [r3, #32]
}
 8005f42:	bf00      	nop
 8005f44:	371c      	adds	r7, #28
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr
	...

08005f50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b085      	sub	sp, #20
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d101      	bne.n	8005f68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f64:	2302      	movs	r3, #2
 8005f66:	e050      	b.n	800600a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2202      	movs	r2, #2
 8005f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68fa      	ldr	r2, [r7, #12]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a1c      	ldr	r2, [pc, #112]	@ (8006018 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d018      	beq.n	8005fde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fb4:	d013      	beq.n	8005fde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a18      	ldr	r2, [pc, #96]	@ (800601c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d00e      	beq.n	8005fde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a16      	ldr	r2, [pc, #88]	@ (8006020 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d009      	beq.n	8005fde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a15      	ldr	r2, [pc, #84]	@ (8006024 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d004      	beq.n	8005fde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a13      	ldr	r2, [pc, #76]	@ (8006028 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d10c      	bne.n	8005ff8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005fe4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	68ba      	ldr	r2, [r7, #8]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68ba      	ldr	r2, [r7, #8]
 8005ff6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3714      	adds	r7, #20
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop
 8006018:	40010000 	.word	0x40010000
 800601c:	40000400 	.word	0x40000400
 8006020:	40000800 	.word	0x40000800
 8006024:	40000c00 	.word	0x40000c00
 8006028:	40014000 	.word	0x40014000

0800602c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006034:	bf00      	nop
 8006036:	370c      	adds	r7, #12
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006048:	bf00      	nop
 800604a:	370c      	adds	r7, #12
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr

08006054 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d101      	bne.n	8006066 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e042      	b.n	80060ec <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800606c:	b2db      	uxtb	r3, r3
 800606e:	2b00      	cmp	r3, #0
 8006070:	d106      	bne.n	8006080 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f7fb ff8c 	bl	8001f98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2224      	movs	r2, #36	@ 0x24
 8006084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68da      	ldr	r2, [r3, #12]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006096:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 fdbd 	bl	8006c18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	691a      	ldr	r2, [r3, #16]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80060ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	695a      	ldr	r2, [r3, #20]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80060bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68da      	ldr	r2, [r3, #12]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80060cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2220      	movs	r2, #32
 80060d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2220      	movs	r2, #32
 80060e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80060ea:	2300      	movs	r3, #0
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3708      	adds	r7, #8
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b08a      	sub	sp, #40	@ 0x28
 80060f8:	af02      	add	r7, sp, #8
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	603b      	str	r3, [r7, #0]
 8006100:	4613      	mov	r3, r2
 8006102:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006104:	2300      	movs	r3, #0
 8006106:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800610e:	b2db      	uxtb	r3, r3
 8006110:	2b20      	cmp	r3, #32
 8006112:	d175      	bne.n	8006200 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d002      	beq.n	8006120 <HAL_UART_Transmit+0x2c>
 800611a:	88fb      	ldrh	r3, [r7, #6]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d101      	bne.n	8006124 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e06e      	b.n	8006202 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2200      	movs	r2, #0
 8006128:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2221      	movs	r2, #33	@ 0x21
 800612e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006132:	f7fc f979 	bl	8002428 <HAL_GetTick>
 8006136:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	88fa      	ldrh	r2, [r7, #6]
 800613c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	88fa      	ldrh	r2, [r7, #6]
 8006142:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800614c:	d108      	bne.n	8006160 <HAL_UART_Transmit+0x6c>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d104      	bne.n	8006160 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006156:	2300      	movs	r3, #0
 8006158:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	61bb      	str	r3, [r7, #24]
 800615e:	e003      	b.n	8006168 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006164:	2300      	movs	r3, #0
 8006166:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006168:	e02e      	b.n	80061c8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	9300      	str	r3, [sp, #0]
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	2200      	movs	r2, #0
 8006172:	2180      	movs	r1, #128	@ 0x80
 8006174:	68f8      	ldr	r0, [r7, #12]
 8006176:	f000 fb1f 	bl	80067b8 <UART_WaitOnFlagUntilTimeout>
 800617a:	4603      	mov	r3, r0
 800617c:	2b00      	cmp	r3, #0
 800617e:	d005      	beq.n	800618c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2220      	movs	r2, #32
 8006184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006188:	2303      	movs	r3, #3
 800618a:	e03a      	b.n	8006202 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d10b      	bne.n	80061aa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	881b      	ldrh	r3, [r3, #0]
 8006196:	461a      	mov	r2, r3
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	3302      	adds	r3, #2
 80061a6:	61bb      	str	r3, [r7, #24]
 80061a8:	e007      	b.n	80061ba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	781a      	ldrb	r2, [r3, #0]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	3301      	adds	r3, #1
 80061b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80061be:	b29b      	uxth	r3, r3
 80061c0:	3b01      	subs	r3, #1
 80061c2:	b29a      	uxth	r2, r3
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d1cb      	bne.n	800616a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	9300      	str	r3, [sp, #0]
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	2200      	movs	r2, #0
 80061da:	2140      	movs	r1, #64	@ 0x40
 80061dc:	68f8      	ldr	r0, [r7, #12]
 80061de:	f000 faeb 	bl	80067b8 <UART_WaitOnFlagUntilTimeout>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d005      	beq.n	80061f4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2220      	movs	r2, #32
 80061ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80061f0:	2303      	movs	r3, #3
 80061f2:	e006      	b.n	8006202 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2220      	movs	r2, #32
 80061f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80061fc:	2300      	movs	r3, #0
 80061fe:	e000      	b.n	8006202 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006200:	2302      	movs	r3, #2
  }
}
 8006202:	4618      	mov	r0, r3
 8006204:	3720      	adds	r7, #32
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800620a:	b580      	push	{r7, lr}
 800620c:	b084      	sub	sp, #16
 800620e:	af00      	add	r7, sp, #0
 8006210:	60f8      	str	r0, [r7, #12]
 8006212:	60b9      	str	r1, [r7, #8]
 8006214:	4613      	mov	r3, r2
 8006216:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800621e:	b2db      	uxtb	r3, r3
 8006220:	2b20      	cmp	r3, #32
 8006222:	d112      	bne.n	800624a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d002      	beq.n	8006230 <HAL_UART_Receive_IT+0x26>
 800622a:	88fb      	ldrh	r3, [r7, #6]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d101      	bne.n	8006234 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e00b      	b.n	800624c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2200      	movs	r2, #0
 8006238:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800623a:	88fb      	ldrh	r3, [r7, #6]
 800623c:	461a      	mov	r2, r3
 800623e:	68b9      	ldr	r1, [r7, #8]
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	f000 fb12 	bl	800686a <UART_Start_Receive_IT>
 8006246:	4603      	mov	r3, r0
 8006248:	e000      	b.n	800624c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800624a:	2302      	movs	r3, #2
  }
}
 800624c:	4618      	mov	r0, r3
 800624e:	3710      	adds	r7, #16
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b0ba      	sub	sp, #232	@ 0xe8
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	695b      	ldr	r3, [r3, #20]
 8006276:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800627a:	2300      	movs	r3, #0
 800627c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006280:	2300      	movs	r3, #0
 8006282:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800628a:	f003 030f 	and.w	r3, r3, #15
 800628e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006292:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006296:	2b00      	cmp	r3, #0
 8006298:	d10f      	bne.n	80062ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800629a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800629e:	f003 0320 	and.w	r3, r3, #32
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d009      	beq.n	80062ba <HAL_UART_IRQHandler+0x66>
 80062a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062aa:	f003 0320 	and.w	r3, r3, #32
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d003      	beq.n	80062ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 fbf2 	bl	8006a9c <UART_Receive_IT>
      return;
 80062b8:	e25b      	b.n	8006772 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80062ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80062be:	2b00      	cmp	r3, #0
 80062c0:	f000 80de 	beq.w	8006480 <HAL_UART_IRQHandler+0x22c>
 80062c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062c8:	f003 0301 	and.w	r3, r3, #1
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d106      	bne.n	80062de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80062d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062d4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80062d8:	2b00      	cmp	r3, #0
 80062da:	f000 80d1 	beq.w	8006480 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80062de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062e2:	f003 0301 	and.w	r3, r3, #1
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00b      	beq.n	8006302 <HAL_UART_IRQHandler+0xae>
 80062ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d005      	beq.n	8006302 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062fa:	f043 0201 	orr.w	r2, r3, #1
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006306:	f003 0304 	and.w	r3, r3, #4
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00b      	beq.n	8006326 <HAL_UART_IRQHandler+0xd2>
 800630e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006312:	f003 0301 	and.w	r3, r3, #1
 8006316:	2b00      	cmp	r3, #0
 8006318:	d005      	beq.n	8006326 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800631e:	f043 0202 	orr.w	r2, r3, #2
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800632a:	f003 0302 	and.w	r3, r3, #2
 800632e:	2b00      	cmp	r3, #0
 8006330:	d00b      	beq.n	800634a <HAL_UART_IRQHandler+0xf6>
 8006332:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006336:	f003 0301 	and.w	r3, r3, #1
 800633a:	2b00      	cmp	r3, #0
 800633c:	d005      	beq.n	800634a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006342:	f043 0204 	orr.w	r2, r3, #4
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800634a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800634e:	f003 0308 	and.w	r3, r3, #8
 8006352:	2b00      	cmp	r3, #0
 8006354:	d011      	beq.n	800637a <HAL_UART_IRQHandler+0x126>
 8006356:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800635a:	f003 0320 	and.w	r3, r3, #32
 800635e:	2b00      	cmp	r3, #0
 8006360:	d105      	bne.n	800636e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006362:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006366:	f003 0301 	and.w	r3, r3, #1
 800636a:	2b00      	cmp	r3, #0
 800636c:	d005      	beq.n	800637a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006372:	f043 0208 	orr.w	r2, r3, #8
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800637e:	2b00      	cmp	r3, #0
 8006380:	f000 81f2 	beq.w	8006768 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006388:	f003 0320 	and.w	r3, r3, #32
 800638c:	2b00      	cmp	r3, #0
 800638e:	d008      	beq.n	80063a2 <HAL_UART_IRQHandler+0x14e>
 8006390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006394:	f003 0320 	and.w	r3, r3, #32
 8006398:	2b00      	cmp	r3, #0
 800639a:	d002      	beq.n	80063a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 fb7d 	bl	8006a9c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	695b      	ldr	r3, [r3, #20]
 80063a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063ac:	2b40      	cmp	r3, #64	@ 0x40
 80063ae:	bf0c      	ite	eq
 80063b0:	2301      	moveq	r3, #1
 80063b2:	2300      	movne	r3, #0
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063be:	f003 0308 	and.w	r3, r3, #8
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d103      	bne.n	80063ce <HAL_UART_IRQHandler+0x17a>
 80063c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d04f      	beq.n	800646e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 fa85 	bl	80068de <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	695b      	ldr	r3, [r3, #20]
 80063da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063de:	2b40      	cmp	r3, #64	@ 0x40
 80063e0:	d141      	bne.n	8006466 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	3314      	adds	r3, #20
 80063e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80063f0:	e853 3f00 	ldrex	r3, [r3]
 80063f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80063f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80063fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006400:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	3314      	adds	r3, #20
 800640a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800640e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006412:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006416:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800641a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800641e:	e841 2300 	strex	r3, r2, [r1]
 8006422:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006426:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d1d9      	bne.n	80063e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006432:	2b00      	cmp	r3, #0
 8006434:	d013      	beq.n	800645e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800643a:	4a7e      	ldr	r2, [pc, #504]	@ (8006634 <HAL_UART_IRQHandler+0x3e0>)
 800643c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006442:	4618      	mov	r0, r3
 8006444:	f7fc f9a1 	bl	800278a <HAL_DMA_Abort_IT>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d016      	beq.n	800647c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006452:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006458:	4610      	mov	r0, r2
 800645a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800645c:	e00e      	b.n	800647c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 f994 	bl	800678c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006464:	e00a      	b.n	800647c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 f990 	bl	800678c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800646c:	e006      	b.n	800647c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 f98c 	bl	800678c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800647a:	e175      	b.n	8006768 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800647c:	bf00      	nop
    return;
 800647e:	e173      	b.n	8006768 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006484:	2b01      	cmp	r3, #1
 8006486:	f040 814f 	bne.w	8006728 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800648a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800648e:	f003 0310 	and.w	r3, r3, #16
 8006492:	2b00      	cmp	r3, #0
 8006494:	f000 8148 	beq.w	8006728 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800649c:	f003 0310 	and.w	r3, r3, #16
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f000 8141 	beq.w	8006728 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80064a6:	2300      	movs	r3, #0
 80064a8:	60bb      	str	r3, [r7, #8]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	60bb      	str	r3, [r7, #8]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	60bb      	str	r3, [r7, #8]
 80064ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	695b      	ldr	r3, [r3, #20]
 80064c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064c6:	2b40      	cmp	r3, #64	@ 0x40
 80064c8:	f040 80b6 	bne.w	8006638 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80064d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f000 8145 	beq.w	800676c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80064e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80064ea:	429a      	cmp	r2, r3
 80064ec:	f080 813e 	bcs.w	800676c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80064f6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064fc:	69db      	ldr	r3, [r3, #28]
 80064fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006502:	f000 8088 	beq.w	8006616 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	330c      	adds	r3, #12
 800650c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006510:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006514:	e853 3f00 	ldrex	r3, [r3]
 8006518:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800651c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006520:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006524:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	330c      	adds	r3, #12
 800652e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006532:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006536:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800653a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800653e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006542:	e841 2300 	strex	r3, r2, [r1]
 8006546:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800654a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800654e:	2b00      	cmp	r3, #0
 8006550:	d1d9      	bne.n	8006506 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	3314      	adds	r3, #20
 8006558:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800655a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800655c:	e853 3f00 	ldrex	r3, [r3]
 8006560:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006562:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006564:	f023 0301 	bic.w	r3, r3, #1
 8006568:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	3314      	adds	r3, #20
 8006572:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006576:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800657a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800657c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800657e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006582:	e841 2300 	strex	r3, r2, [r1]
 8006586:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006588:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800658a:	2b00      	cmp	r3, #0
 800658c:	d1e1      	bne.n	8006552 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	3314      	adds	r3, #20
 8006594:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006596:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006598:	e853 3f00 	ldrex	r3, [r3]
 800659c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800659e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	3314      	adds	r3, #20
 80065ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80065b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80065b4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80065b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80065ba:	e841 2300 	strex	r3, r2, [r1]
 80065be:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80065c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d1e3      	bne.n	800658e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2220      	movs	r2, #32
 80065ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	330c      	adds	r3, #12
 80065da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065de:	e853 3f00 	ldrex	r3, [r3]
 80065e2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80065e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065e6:	f023 0310 	bic.w	r3, r3, #16
 80065ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	330c      	adds	r3, #12
 80065f4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80065f8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80065fa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80065fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006600:	e841 2300 	strex	r3, r2, [r1]
 8006604:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006606:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006608:	2b00      	cmp	r3, #0
 800660a:	d1e3      	bne.n	80065d4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006610:	4618      	mov	r0, r3
 8006612:	f7fc f84a 	bl	80026aa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2202      	movs	r2, #2
 800661a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006624:	b29b      	uxth	r3, r3
 8006626:	1ad3      	subs	r3, r2, r3
 8006628:	b29b      	uxth	r3, r3
 800662a:	4619      	mov	r1, r3
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 f8b7 	bl	80067a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006632:	e09b      	b.n	800676c <HAL_UART_IRQHandler+0x518>
 8006634:	080069a5 	.word	0x080069a5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006640:	b29b      	uxth	r3, r3
 8006642:	1ad3      	subs	r3, r2, r3
 8006644:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800664c:	b29b      	uxth	r3, r3
 800664e:	2b00      	cmp	r3, #0
 8006650:	f000 808e 	beq.w	8006770 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006654:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006658:	2b00      	cmp	r3, #0
 800665a:	f000 8089 	beq.w	8006770 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	330c      	adds	r3, #12
 8006664:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006668:	e853 3f00 	ldrex	r3, [r3]
 800666c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800666e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006670:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006674:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	330c      	adds	r3, #12
 800667e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006682:	647a      	str	r2, [r7, #68]	@ 0x44
 8006684:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006686:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006688:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800668a:	e841 2300 	strex	r3, r2, [r1]
 800668e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006690:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006692:	2b00      	cmp	r3, #0
 8006694:	d1e3      	bne.n	800665e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	3314      	adds	r3, #20
 800669c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a0:	e853 3f00 	ldrex	r3, [r3]
 80066a4:	623b      	str	r3, [r7, #32]
   return(result);
 80066a6:	6a3b      	ldr	r3, [r7, #32]
 80066a8:	f023 0301 	bic.w	r3, r3, #1
 80066ac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	3314      	adds	r3, #20
 80066b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80066ba:	633a      	str	r2, [r7, #48]	@ 0x30
 80066bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066c2:	e841 2300 	strex	r3, r2, [r1]
 80066c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80066c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d1e3      	bne.n	8006696 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2220      	movs	r2, #32
 80066d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	330c      	adds	r3, #12
 80066e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	e853 3f00 	ldrex	r3, [r3]
 80066ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f023 0310 	bic.w	r3, r3, #16
 80066f2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	330c      	adds	r3, #12
 80066fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006700:	61fa      	str	r2, [r7, #28]
 8006702:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006704:	69b9      	ldr	r1, [r7, #24]
 8006706:	69fa      	ldr	r2, [r7, #28]
 8006708:	e841 2300 	strex	r3, r2, [r1]
 800670c:	617b      	str	r3, [r7, #20]
   return(result);
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d1e3      	bne.n	80066dc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2202      	movs	r2, #2
 8006718:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800671a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800671e:	4619      	mov	r1, r3
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 f83d 	bl	80067a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006726:	e023      	b.n	8006770 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800672c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006730:	2b00      	cmp	r3, #0
 8006732:	d009      	beq.n	8006748 <HAL_UART_IRQHandler+0x4f4>
 8006734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006738:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800673c:	2b00      	cmp	r3, #0
 800673e:	d003      	beq.n	8006748 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 f943 	bl	80069cc <UART_Transmit_IT>
    return;
 8006746:	e014      	b.n	8006772 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800674c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006750:	2b00      	cmp	r3, #0
 8006752:	d00e      	beq.n	8006772 <HAL_UART_IRQHandler+0x51e>
 8006754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006758:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800675c:	2b00      	cmp	r3, #0
 800675e:	d008      	beq.n	8006772 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 f983 	bl	8006a6c <UART_EndTransmit_IT>
    return;
 8006766:	e004      	b.n	8006772 <HAL_UART_IRQHandler+0x51e>
    return;
 8006768:	bf00      	nop
 800676a:	e002      	b.n	8006772 <HAL_UART_IRQHandler+0x51e>
      return;
 800676c:	bf00      	nop
 800676e:	e000      	b.n	8006772 <HAL_UART_IRQHandler+0x51e>
      return;
 8006770:	bf00      	nop
  }
}
 8006772:	37e8      	adds	r7, #232	@ 0xe8
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006780:	bf00      	nop
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006794:	bf00      	nop
 8006796:	370c      	adds	r7, #12
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	460b      	mov	r3, r1
 80067aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80067ac:	bf00      	nop
 80067ae:	370c      	adds	r7, #12
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b086      	sub	sp, #24
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	603b      	str	r3, [r7, #0]
 80067c4:	4613      	mov	r3, r2
 80067c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067c8:	e03b      	b.n	8006842 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067ca:	6a3b      	ldr	r3, [r7, #32]
 80067cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d0:	d037      	beq.n	8006842 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067d2:	f7fb fe29 	bl	8002428 <HAL_GetTick>
 80067d6:	4602      	mov	r2, r0
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	1ad3      	subs	r3, r2, r3
 80067dc:	6a3a      	ldr	r2, [r7, #32]
 80067de:	429a      	cmp	r2, r3
 80067e0:	d302      	bcc.n	80067e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80067e2:	6a3b      	ldr	r3, [r7, #32]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d101      	bne.n	80067ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80067e8:	2303      	movs	r3, #3
 80067ea:	e03a      	b.n	8006862 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	f003 0304 	and.w	r3, r3, #4
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d023      	beq.n	8006842 <UART_WaitOnFlagUntilTimeout+0x8a>
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	2b80      	cmp	r3, #128	@ 0x80
 80067fe:	d020      	beq.n	8006842 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	2b40      	cmp	r3, #64	@ 0x40
 8006804:	d01d      	beq.n	8006842 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 0308 	and.w	r3, r3, #8
 8006810:	2b08      	cmp	r3, #8
 8006812:	d116      	bne.n	8006842 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006814:	2300      	movs	r3, #0
 8006816:	617b      	str	r3, [r7, #20]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	617b      	str	r3, [r7, #20]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	617b      	str	r3, [r7, #20]
 8006828:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800682a:	68f8      	ldr	r0, [r7, #12]
 800682c:	f000 f857 	bl	80068de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2208      	movs	r2, #8
 8006834:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e00f      	b.n	8006862 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	4013      	ands	r3, r2
 800684c:	68ba      	ldr	r2, [r7, #8]
 800684e:	429a      	cmp	r2, r3
 8006850:	bf0c      	ite	eq
 8006852:	2301      	moveq	r3, #1
 8006854:	2300      	movne	r3, #0
 8006856:	b2db      	uxtb	r3, r3
 8006858:	461a      	mov	r2, r3
 800685a:	79fb      	ldrb	r3, [r7, #7]
 800685c:	429a      	cmp	r2, r3
 800685e:	d0b4      	beq.n	80067ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3718      	adds	r7, #24
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}

0800686a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800686a:	b480      	push	{r7}
 800686c:	b085      	sub	sp, #20
 800686e:	af00      	add	r7, sp, #0
 8006870:	60f8      	str	r0, [r7, #12]
 8006872:	60b9      	str	r1, [r7, #8]
 8006874:	4613      	mov	r3, r2
 8006876:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	68ba      	ldr	r2, [r7, #8]
 800687c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	88fa      	ldrh	r2, [r7, #6]
 8006882:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	88fa      	ldrh	r2, [r7, #6]
 8006888:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2200      	movs	r2, #0
 800688e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2222      	movs	r2, #34	@ 0x22
 8006894:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	691b      	ldr	r3, [r3, #16]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d007      	beq.n	80068b0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	68da      	ldr	r2, [r3, #12]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80068ae:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	695a      	ldr	r2, [r3, #20]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f042 0201 	orr.w	r2, r2, #1
 80068be:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	68da      	ldr	r2, [r3, #12]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f042 0220 	orr.w	r2, r2, #32
 80068ce:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80068d0:	2300      	movs	r3, #0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3714      	adds	r7, #20
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr

080068de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068de:	b480      	push	{r7}
 80068e0:	b095      	sub	sp, #84	@ 0x54
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	330c      	adds	r3, #12
 80068ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068f0:	e853 3f00 	ldrex	r3, [r3]
 80068f4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80068f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80068fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	330c      	adds	r3, #12
 8006904:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006906:	643a      	str	r2, [r7, #64]	@ 0x40
 8006908:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800690a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800690c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800690e:	e841 2300 	strex	r3, r2, [r1]
 8006912:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1e5      	bne.n	80068e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	3314      	adds	r3, #20
 8006920:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006922:	6a3b      	ldr	r3, [r7, #32]
 8006924:	e853 3f00 	ldrex	r3, [r3]
 8006928:	61fb      	str	r3, [r7, #28]
   return(result);
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	f023 0301 	bic.w	r3, r3, #1
 8006930:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	3314      	adds	r3, #20
 8006938:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800693a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800693c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006940:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006942:	e841 2300 	strex	r3, r2, [r1]
 8006946:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800694a:	2b00      	cmp	r3, #0
 800694c:	d1e5      	bne.n	800691a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006952:	2b01      	cmp	r3, #1
 8006954:	d119      	bne.n	800698a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	330c      	adds	r3, #12
 800695c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	e853 3f00 	ldrex	r3, [r3]
 8006964:	60bb      	str	r3, [r7, #8]
   return(result);
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	f023 0310 	bic.w	r3, r3, #16
 800696c:	647b      	str	r3, [r7, #68]	@ 0x44
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	330c      	adds	r3, #12
 8006974:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006976:	61ba      	str	r2, [r7, #24]
 8006978:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697a:	6979      	ldr	r1, [r7, #20]
 800697c:	69ba      	ldr	r2, [r7, #24]
 800697e:	e841 2300 	strex	r3, r2, [r1]
 8006982:	613b      	str	r3, [r7, #16]
   return(result);
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1e5      	bne.n	8006956 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2220      	movs	r2, #32
 800698e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006998:	bf00      	nop
 800699a:	3754      	adds	r7, #84	@ 0x54
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2200      	movs	r2, #0
 80069b6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2200      	movs	r2, #0
 80069bc:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069be:	68f8      	ldr	r0, [r7, #12]
 80069c0:	f7ff fee4 	bl	800678c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069c4:	bf00      	nop
 80069c6:	3710      	adds	r7, #16
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}

080069cc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b085      	sub	sp, #20
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069da:	b2db      	uxtb	r3, r3
 80069dc:	2b21      	cmp	r3, #33	@ 0x21
 80069de:	d13e      	bne.n	8006a5e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069e8:	d114      	bne.n	8006a14 <UART_Transmit_IT+0x48>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d110      	bne.n	8006a14 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a1b      	ldr	r3, [r3, #32]
 80069f6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	881b      	ldrh	r3, [r3, #0]
 80069fc:	461a      	mov	r2, r3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a06:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6a1b      	ldr	r3, [r3, #32]
 8006a0c:	1c9a      	adds	r2, r3, #2
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	621a      	str	r2, [r3, #32]
 8006a12:	e008      	b.n	8006a26 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6a1b      	ldr	r3, [r3, #32]
 8006a18:	1c59      	adds	r1, r3, #1
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	6211      	str	r1, [r2, #32]
 8006a1e:	781a      	ldrb	r2, [r3, #0]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	3b01      	subs	r3, #1
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	4619      	mov	r1, r3
 8006a34:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d10f      	bne.n	8006a5a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	68da      	ldr	r2, [r3, #12]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006a48:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68da      	ldr	r2, [r3, #12]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a58:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	e000      	b.n	8006a60 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006a5e:	2302      	movs	r3, #2
  }
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3714      	adds	r7, #20
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b082      	sub	sp, #8
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	68da      	ldr	r2, [r3, #12]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a82:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2220      	movs	r2, #32
 8006a88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f7ff fe73 	bl	8006778 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006a92:	2300      	movs	r3, #0
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3708      	adds	r7, #8
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b08c      	sub	sp, #48	@ 0x30
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	2b22      	cmp	r3, #34	@ 0x22
 8006aae:	f040 80ae 	bne.w	8006c0e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006aba:	d117      	bne.n	8006aec <UART_Receive_IT+0x50>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	691b      	ldr	r3, [r3, #16]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d113      	bne.n	8006aec <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006acc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ada:	b29a      	uxth	r2, r3
 8006adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ade:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ae4:	1c9a      	adds	r2, r3, #2
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	629a      	str	r2, [r3, #40]	@ 0x28
 8006aea:	e026      	b.n	8006b3a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006af2:	2300      	movs	r3, #0
 8006af4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006afe:	d007      	beq.n	8006b10 <UART_Receive_IT+0x74>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d10a      	bne.n	8006b1e <UART_Receive_IT+0x82>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	691b      	ldr	r3, [r3, #16]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d106      	bne.n	8006b1e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	b2da      	uxtb	r2, r3
 8006b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b1a:	701a      	strb	r2, [r3, #0]
 8006b1c:	e008      	b.n	8006b30 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b2a:	b2da      	uxtb	r2, r3
 8006b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b2e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b34:	1c5a      	adds	r2, r3, #1
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	3b01      	subs	r3, #1
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	4619      	mov	r1, r3
 8006b48:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d15d      	bne.n	8006c0a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	68da      	ldr	r2, [r3, #12]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f022 0220 	bic.w	r2, r2, #32
 8006b5c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	68da      	ldr	r2, [r3, #12]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006b6c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	695a      	ldr	r2, [r3, #20]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f022 0201 	bic.w	r2, r2, #1
 8006b7c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2220      	movs	r2, #32
 8006b82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d135      	bne.n	8006c00 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	330c      	adds	r3, #12
 8006ba0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	e853 3f00 	ldrex	r3, [r3]
 8006ba8:	613b      	str	r3, [r7, #16]
   return(result);
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	f023 0310 	bic.w	r3, r3, #16
 8006bb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	330c      	adds	r3, #12
 8006bb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bba:	623a      	str	r2, [r7, #32]
 8006bbc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bbe:	69f9      	ldr	r1, [r7, #28]
 8006bc0:	6a3a      	ldr	r2, [r7, #32]
 8006bc2:	e841 2300 	strex	r3, r2, [r1]
 8006bc6:	61bb      	str	r3, [r7, #24]
   return(result);
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d1e5      	bne.n	8006b9a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f003 0310 	and.w	r3, r3, #16
 8006bd8:	2b10      	cmp	r3, #16
 8006bda:	d10a      	bne.n	8006bf2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006bdc:	2300      	movs	r3, #0
 8006bde:	60fb      	str	r3, [r7, #12]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	60fb      	str	r3, [r7, #12]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	60fb      	str	r3, [r7, #12]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f7ff fdd1 	bl	80067a0 <HAL_UARTEx_RxEventCallback>
 8006bfe:	e002      	b.n	8006c06 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f7fa fc55 	bl	80014b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006c06:	2300      	movs	r3, #0
 8006c08:	e002      	b.n	8006c10 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	e000      	b.n	8006c10 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006c0e:	2302      	movs	r3, #2
  }
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3730      	adds	r7, #48	@ 0x30
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c1c:	b0c0      	sub	sp, #256	@ 0x100
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	691b      	ldr	r3, [r3, #16]
 8006c2c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c34:	68d9      	ldr	r1, [r3, #12]
 8006c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	ea40 0301 	orr.w	r3, r0, r1
 8006c40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c46:	689a      	ldr	r2, [r3, #8]
 8006c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c4c:	691b      	ldr	r3, [r3, #16]
 8006c4e:	431a      	orrs	r2, r3
 8006c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c54:	695b      	ldr	r3, [r3, #20]
 8006c56:	431a      	orrs	r2, r3
 8006c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c5c:	69db      	ldr	r3, [r3, #28]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006c70:	f021 010c 	bic.w	r1, r1, #12
 8006c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006c7e:	430b      	orrs	r3, r1
 8006c80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	695b      	ldr	r3, [r3, #20]
 8006c8a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c92:	6999      	ldr	r1, [r3, #24]
 8006c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	ea40 0301 	orr.w	r3, r0, r1
 8006c9e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	4b8f      	ldr	r3, [pc, #572]	@ (8006ee4 <UART_SetConfig+0x2cc>)
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d005      	beq.n	8006cb8 <UART_SetConfig+0xa0>
 8006cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	4b8d      	ldr	r3, [pc, #564]	@ (8006ee8 <UART_SetConfig+0x2d0>)
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d104      	bne.n	8006cc2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006cb8:	f7fe f976 	bl	8004fa8 <HAL_RCC_GetPCLK2Freq>
 8006cbc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006cc0:	e003      	b.n	8006cca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006cc2:	f7fe f95d 	bl	8004f80 <HAL_RCC_GetPCLK1Freq>
 8006cc6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cce:	69db      	ldr	r3, [r3, #28]
 8006cd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cd4:	f040 810c 	bne.w	8006ef0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006cd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006ce2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006ce6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006cea:	4622      	mov	r2, r4
 8006cec:	462b      	mov	r3, r5
 8006cee:	1891      	adds	r1, r2, r2
 8006cf0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006cf2:	415b      	adcs	r3, r3
 8006cf4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006cf6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006cfa:	4621      	mov	r1, r4
 8006cfc:	eb12 0801 	adds.w	r8, r2, r1
 8006d00:	4629      	mov	r1, r5
 8006d02:	eb43 0901 	adc.w	r9, r3, r1
 8006d06:	f04f 0200 	mov.w	r2, #0
 8006d0a:	f04f 0300 	mov.w	r3, #0
 8006d0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d1a:	4690      	mov	r8, r2
 8006d1c:	4699      	mov	r9, r3
 8006d1e:	4623      	mov	r3, r4
 8006d20:	eb18 0303 	adds.w	r3, r8, r3
 8006d24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006d28:	462b      	mov	r3, r5
 8006d2a:	eb49 0303 	adc.w	r3, r9, r3
 8006d2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006d3e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006d42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006d46:	460b      	mov	r3, r1
 8006d48:	18db      	adds	r3, r3, r3
 8006d4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d4c:	4613      	mov	r3, r2
 8006d4e:	eb42 0303 	adc.w	r3, r2, r3
 8006d52:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006d58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006d5c:	f7f9 ff7c 	bl	8000c58 <__aeabi_uldivmod>
 8006d60:	4602      	mov	r2, r0
 8006d62:	460b      	mov	r3, r1
 8006d64:	4b61      	ldr	r3, [pc, #388]	@ (8006eec <UART_SetConfig+0x2d4>)
 8006d66:	fba3 2302 	umull	r2, r3, r3, r2
 8006d6a:	095b      	lsrs	r3, r3, #5
 8006d6c:	011c      	lsls	r4, r3, #4
 8006d6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d72:	2200      	movs	r2, #0
 8006d74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006d78:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006d7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006d80:	4642      	mov	r2, r8
 8006d82:	464b      	mov	r3, r9
 8006d84:	1891      	adds	r1, r2, r2
 8006d86:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006d88:	415b      	adcs	r3, r3
 8006d8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006d90:	4641      	mov	r1, r8
 8006d92:	eb12 0a01 	adds.w	sl, r2, r1
 8006d96:	4649      	mov	r1, r9
 8006d98:	eb43 0b01 	adc.w	fp, r3, r1
 8006d9c:	f04f 0200 	mov.w	r2, #0
 8006da0:	f04f 0300 	mov.w	r3, #0
 8006da4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006da8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006dac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006db0:	4692      	mov	sl, r2
 8006db2:	469b      	mov	fp, r3
 8006db4:	4643      	mov	r3, r8
 8006db6:	eb1a 0303 	adds.w	r3, sl, r3
 8006dba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006dbe:	464b      	mov	r3, r9
 8006dc0:	eb4b 0303 	adc.w	r3, fp, r3
 8006dc4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006dd4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006dd8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006ddc:	460b      	mov	r3, r1
 8006dde:	18db      	adds	r3, r3, r3
 8006de0:	643b      	str	r3, [r7, #64]	@ 0x40
 8006de2:	4613      	mov	r3, r2
 8006de4:	eb42 0303 	adc.w	r3, r2, r3
 8006de8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006dea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006dee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006df2:	f7f9 ff31 	bl	8000c58 <__aeabi_uldivmod>
 8006df6:	4602      	mov	r2, r0
 8006df8:	460b      	mov	r3, r1
 8006dfa:	4611      	mov	r1, r2
 8006dfc:	4b3b      	ldr	r3, [pc, #236]	@ (8006eec <UART_SetConfig+0x2d4>)
 8006dfe:	fba3 2301 	umull	r2, r3, r3, r1
 8006e02:	095b      	lsrs	r3, r3, #5
 8006e04:	2264      	movs	r2, #100	@ 0x64
 8006e06:	fb02 f303 	mul.w	r3, r2, r3
 8006e0a:	1acb      	subs	r3, r1, r3
 8006e0c:	00db      	lsls	r3, r3, #3
 8006e0e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006e12:	4b36      	ldr	r3, [pc, #216]	@ (8006eec <UART_SetConfig+0x2d4>)
 8006e14:	fba3 2302 	umull	r2, r3, r3, r2
 8006e18:	095b      	lsrs	r3, r3, #5
 8006e1a:	005b      	lsls	r3, r3, #1
 8006e1c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006e20:	441c      	add	r4, r3
 8006e22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e26:	2200      	movs	r2, #0
 8006e28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006e2c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006e30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006e34:	4642      	mov	r2, r8
 8006e36:	464b      	mov	r3, r9
 8006e38:	1891      	adds	r1, r2, r2
 8006e3a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006e3c:	415b      	adcs	r3, r3
 8006e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006e44:	4641      	mov	r1, r8
 8006e46:	1851      	adds	r1, r2, r1
 8006e48:	6339      	str	r1, [r7, #48]	@ 0x30
 8006e4a:	4649      	mov	r1, r9
 8006e4c:	414b      	adcs	r3, r1
 8006e4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e50:	f04f 0200 	mov.w	r2, #0
 8006e54:	f04f 0300 	mov.w	r3, #0
 8006e58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006e5c:	4659      	mov	r1, fp
 8006e5e:	00cb      	lsls	r3, r1, #3
 8006e60:	4651      	mov	r1, sl
 8006e62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e66:	4651      	mov	r1, sl
 8006e68:	00ca      	lsls	r2, r1, #3
 8006e6a:	4610      	mov	r0, r2
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	4603      	mov	r3, r0
 8006e70:	4642      	mov	r2, r8
 8006e72:	189b      	adds	r3, r3, r2
 8006e74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006e78:	464b      	mov	r3, r9
 8006e7a:	460a      	mov	r2, r1
 8006e7c:	eb42 0303 	adc.w	r3, r2, r3
 8006e80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006e90:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006e94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006e98:	460b      	mov	r3, r1
 8006e9a:	18db      	adds	r3, r3, r3
 8006e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e9e:	4613      	mov	r3, r2
 8006ea0:	eb42 0303 	adc.w	r3, r2, r3
 8006ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ea6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006eaa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006eae:	f7f9 fed3 	bl	8000c58 <__aeabi_uldivmod>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	460b      	mov	r3, r1
 8006eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8006eec <UART_SetConfig+0x2d4>)
 8006eb8:	fba3 1302 	umull	r1, r3, r3, r2
 8006ebc:	095b      	lsrs	r3, r3, #5
 8006ebe:	2164      	movs	r1, #100	@ 0x64
 8006ec0:	fb01 f303 	mul.w	r3, r1, r3
 8006ec4:	1ad3      	subs	r3, r2, r3
 8006ec6:	00db      	lsls	r3, r3, #3
 8006ec8:	3332      	adds	r3, #50	@ 0x32
 8006eca:	4a08      	ldr	r2, [pc, #32]	@ (8006eec <UART_SetConfig+0x2d4>)
 8006ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8006ed0:	095b      	lsrs	r3, r3, #5
 8006ed2:	f003 0207 	and.w	r2, r3, #7
 8006ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4422      	add	r2, r4
 8006ede:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006ee0:	e106      	b.n	80070f0 <UART_SetConfig+0x4d8>
 8006ee2:	bf00      	nop
 8006ee4:	40011000 	.word	0x40011000
 8006ee8:	40011400 	.word	0x40011400
 8006eec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ef0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006efa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006efe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006f02:	4642      	mov	r2, r8
 8006f04:	464b      	mov	r3, r9
 8006f06:	1891      	adds	r1, r2, r2
 8006f08:	6239      	str	r1, [r7, #32]
 8006f0a:	415b      	adcs	r3, r3
 8006f0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006f12:	4641      	mov	r1, r8
 8006f14:	1854      	adds	r4, r2, r1
 8006f16:	4649      	mov	r1, r9
 8006f18:	eb43 0501 	adc.w	r5, r3, r1
 8006f1c:	f04f 0200 	mov.w	r2, #0
 8006f20:	f04f 0300 	mov.w	r3, #0
 8006f24:	00eb      	lsls	r3, r5, #3
 8006f26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f2a:	00e2      	lsls	r2, r4, #3
 8006f2c:	4614      	mov	r4, r2
 8006f2e:	461d      	mov	r5, r3
 8006f30:	4643      	mov	r3, r8
 8006f32:	18e3      	adds	r3, r4, r3
 8006f34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006f38:	464b      	mov	r3, r9
 8006f3a:	eb45 0303 	adc.w	r3, r5, r3
 8006f3e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006f4e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006f52:	f04f 0200 	mov.w	r2, #0
 8006f56:	f04f 0300 	mov.w	r3, #0
 8006f5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006f5e:	4629      	mov	r1, r5
 8006f60:	008b      	lsls	r3, r1, #2
 8006f62:	4621      	mov	r1, r4
 8006f64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f68:	4621      	mov	r1, r4
 8006f6a:	008a      	lsls	r2, r1, #2
 8006f6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006f70:	f7f9 fe72 	bl	8000c58 <__aeabi_uldivmod>
 8006f74:	4602      	mov	r2, r0
 8006f76:	460b      	mov	r3, r1
 8006f78:	4b60      	ldr	r3, [pc, #384]	@ (80070fc <UART_SetConfig+0x4e4>)
 8006f7a:	fba3 2302 	umull	r2, r3, r3, r2
 8006f7e:	095b      	lsrs	r3, r3, #5
 8006f80:	011c      	lsls	r4, r3, #4
 8006f82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f86:	2200      	movs	r2, #0
 8006f88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006f8c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006f90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006f94:	4642      	mov	r2, r8
 8006f96:	464b      	mov	r3, r9
 8006f98:	1891      	adds	r1, r2, r2
 8006f9a:	61b9      	str	r1, [r7, #24]
 8006f9c:	415b      	adcs	r3, r3
 8006f9e:	61fb      	str	r3, [r7, #28]
 8006fa0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006fa4:	4641      	mov	r1, r8
 8006fa6:	1851      	adds	r1, r2, r1
 8006fa8:	6139      	str	r1, [r7, #16]
 8006faa:	4649      	mov	r1, r9
 8006fac:	414b      	adcs	r3, r1
 8006fae:	617b      	str	r3, [r7, #20]
 8006fb0:	f04f 0200 	mov.w	r2, #0
 8006fb4:	f04f 0300 	mov.w	r3, #0
 8006fb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006fbc:	4659      	mov	r1, fp
 8006fbe:	00cb      	lsls	r3, r1, #3
 8006fc0:	4651      	mov	r1, sl
 8006fc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fc6:	4651      	mov	r1, sl
 8006fc8:	00ca      	lsls	r2, r1, #3
 8006fca:	4610      	mov	r0, r2
 8006fcc:	4619      	mov	r1, r3
 8006fce:	4603      	mov	r3, r0
 8006fd0:	4642      	mov	r2, r8
 8006fd2:	189b      	adds	r3, r3, r2
 8006fd4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006fd8:	464b      	mov	r3, r9
 8006fda:	460a      	mov	r2, r1
 8006fdc:	eb42 0303 	adc.w	r3, r2, r3
 8006fe0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006fee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006ff0:	f04f 0200 	mov.w	r2, #0
 8006ff4:	f04f 0300 	mov.w	r3, #0
 8006ff8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006ffc:	4649      	mov	r1, r9
 8006ffe:	008b      	lsls	r3, r1, #2
 8007000:	4641      	mov	r1, r8
 8007002:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007006:	4641      	mov	r1, r8
 8007008:	008a      	lsls	r2, r1, #2
 800700a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800700e:	f7f9 fe23 	bl	8000c58 <__aeabi_uldivmod>
 8007012:	4602      	mov	r2, r0
 8007014:	460b      	mov	r3, r1
 8007016:	4611      	mov	r1, r2
 8007018:	4b38      	ldr	r3, [pc, #224]	@ (80070fc <UART_SetConfig+0x4e4>)
 800701a:	fba3 2301 	umull	r2, r3, r3, r1
 800701e:	095b      	lsrs	r3, r3, #5
 8007020:	2264      	movs	r2, #100	@ 0x64
 8007022:	fb02 f303 	mul.w	r3, r2, r3
 8007026:	1acb      	subs	r3, r1, r3
 8007028:	011b      	lsls	r3, r3, #4
 800702a:	3332      	adds	r3, #50	@ 0x32
 800702c:	4a33      	ldr	r2, [pc, #204]	@ (80070fc <UART_SetConfig+0x4e4>)
 800702e:	fba2 2303 	umull	r2, r3, r2, r3
 8007032:	095b      	lsrs	r3, r3, #5
 8007034:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007038:	441c      	add	r4, r3
 800703a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800703e:	2200      	movs	r2, #0
 8007040:	673b      	str	r3, [r7, #112]	@ 0x70
 8007042:	677a      	str	r2, [r7, #116]	@ 0x74
 8007044:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007048:	4642      	mov	r2, r8
 800704a:	464b      	mov	r3, r9
 800704c:	1891      	adds	r1, r2, r2
 800704e:	60b9      	str	r1, [r7, #8]
 8007050:	415b      	adcs	r3, r3
 8007052:	60fb      	str	r3, [r7, #12]
 8007054:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007058:	4641      	mov	r1, r8
 800705a:	1851      	adds	r1, r2, r1
 800705c:	6039      	str	r1, [r7, #0]
 800705e:	4649      	mov	r1, r9
 8007060:	414b      	adcs	r3, r1
 8007062:	607b      	str	r3, [r7, #4]
 8007064:	f04f 0200 	mov.w	r2, #0
 8007068:	f04f 0300 	mov.w	r3, #0
 800706c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007070:	4659      	mov	r1, fp
 8007072:	00cb      	lsls	r3, r1, #3
 8007074:	4651      	mov	r1, sl
 8007076:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800707a:	4651      	mov	r1, sl
 800707c:	00ca      	lsls	r2, r1, #3
 800707e:	4610      	mov	r0, r2
 8007080:	4619      	mov	r1, r3
 8007082:	4603      	mov	r3, r0
 8007084:	4642      	mov	r2, r8
 8007086:	189b      	adds	r3, r3, r2
 8007088:	66bb      	str	r3, [r7, #104]	@ 0x68
 800708a:	464b      	mov	r3, r9
 800708c:	460a      	mov	r2, r1
 800708e:	eb42 0303 	adc.w	r3, r2, r3
 8007092:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	663b      	str	r3, [r7, #96]	@ 0x60
 800709e:	667a      	str	r2, [r7, #100]	@ 0x64
 80070a0:	f04f 0200 	mov.w	r2, #0
 80070a4:	f04f 0300 	mov.w	r3, #0
 80070a8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80070ac:	4649      	mov	r1, r9
 80070ae:	008b      	lsls	r3, r1, #2
 80070b0:	4641      	mov	r1, r8
 80070b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070b6:	4641      	mov	r1, r8
 80070b8:	008a      	lsls	r2, r1, #2
 80070ba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80070be:	f7f9 fdcb 	bl	8000c58 <__aeabi_uldivmod>
 80070c2:	4602      	mov	r2, r0
 80070c4:	460b      	mov	r3, r1
 80070c6:	4b0d      	ldr	r3, [pc, #52]	@ (80070fc <UART_SetConfig+0x4e4>)
 80070c8:	fba3 1302 	umull	r1, r3, r3, r2
 80070cc:	095b      	lsrs	r3, r3, #5
 80070ce:	2164      	movs	r1, #100	@ 0x64
 80070d0:	fb01 f303 	mul.w	r3, r1, r3
 80070d4:	1ad3      	subs	r3, r2, r3
 80070d6:	011b      	lsls	r3, r3, #4
 80070d8:	3332      	adds	r3, #50	@ 0x32
 80070da:	4a08      	ldr	r2, [pc, #32]	@ (80070fc <UART_SetConfig+0x4e4>)
 80070dc:	fba2 2303 	umull	r2, r3, r2, r3
 80070e0:	095b      	lsrs	r3, r3, #5
 80070e2:	f003 020f 	and.w	r2, r3, #15
 80070e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4422      	add	r2, r4
 80070ee:	609a      	str	r2, [r3, #8]
}
 80070f0:	bf00      	nop
 80070f2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80070f6:	46bd      	mov	sp, r7
 80070f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070fc:	51eb851f 	.word	0x51eb851f

08007100 <__cvt>:
 8007100:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007104:	ec57 6b10 	vmov	r6, r7, d0
 8007108:	2f00      	cmp	r7, #0
 800710a:	460c      	mov	r4, r1
 800710c:	4619      	mov	r1, r3
 800710e:	463b      	mov	r3, r7
 8007110:	bfbb      	ittet	lt
 8007112:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007116:	461f      	movlt	r7, r3
 8007118:	2300      	movge	r3, #0
 800711a:	232d      	movlt	r3, #45	@ 0x2d
 800711c:	700b      	strb	r3, [r1, #0]
 800711e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007120:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007124:	4691      	mov	r9, r2
 8007126:	f023 0820 	bic.w	r8, r3, #32
 800712a:	bfbc      	itt	lt
 800712c:	4632      	movlt	r2, r6
 800712e:	4616      	movlt	r6, r2
 8007130:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007134:	d005      	beq.n	8007142 <__cvt+0x42>
 8007136:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800713a:	d100      	bne.n	800713e <__cvt+0x3e>
 800713c:	3401      	adds	r4, #1
 800713e:	2102      	movs	r1, #2
 8007140:	e000      	b.n	8007144 <__cvt+0x44>
 8007142:	2103      	movs	r1, #3
 8007144:	ab03      	add	r3, sp, #12
 8007146:	9301      	str	r3, [sp, #4]
 8007148:	ab02      	add	r3, sp, #8
 800714a:	9300      	str	r3, [sp, #0]
 800714c:	ec47 6b10 	vmov	d0, r6, r7
 8007150:	4653      	mov	r3, sl
 8007152:	4622      	mov	r2, r4
 8007154:	f000 fe90 	bl	8007e78 <_dtoa_r>
 8007158:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800715c:	4605      	mov	r5, r0
 800715e:	d119      	bne.n	8007194 <__cvt+0x94>
 8007160:	f019 0f01 	tst.w	r9, #1
 8007164:	d00e      	beq.n	8007184 <__cvt+0x84>
 8007166:	eb00 0904 	add.w	r9, r0, r4
 800716a:	2200      	movs	r2, #0
 800716c:	2300      	movs	r3, #0
 800716e:	4630      	mov	r0, r6
 8007170:	4639      	mov	r1, r7
 8007172:	f7f9 fcb1 	bl	8000ad8 <__aeabi_dcmpeq>
 8007176:	b108      	cbz	r0, 800717c <__cvt+0x7c>
 8007178:	f8cd 900c 	str.w	r9, [sp, #12]
 800717c:	2230      	movs	r2, #48	@ 0x30
 800717e:	9b03      	ldr	r3, [sp, #12]
 8007180:	454b      	cmp	r3, r9
 8007182:	d31e      	bcc.n	80071c2 <__cvt+0xc2>
 8007184:	9b03      	ldr	r3, [sp, #12]
 8007186:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007188:	1b5b      	subs	r3, r3, r5
 800718a:	4628      	mov	r0, r5
 800718c:	6013      	str	r3, [r2, #0]
 800718e:	b004      	add	sp, #16
 8007190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007194:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007198:	eb00 0904 	add.w	r9, r0, r4
 800719c:	d1e5      	bne.n	800716a <__cvt+0x6a>
 800719e:	7803      	ldrb	r3, [r0, #0]
 80071a0:	2b30      	cmp	r3, #48	@ 0x30
 80071a2:	d10a      	bne.n	80071ba <__cvt+0xba>
 80071a4:	2200      	movs	r2, #0
 80071a6:	2300      	movs	r3, #0
 80071a8:	4630      	mov	r0, r6
 80071aa:	4639      	mov	r1, r7
 80071ac:	f7f9 fc94 	bl	8000ad8 <__aeabi_dcmpeq>
 80071b0:	b918      	cbnz	r0, 80071ba <__cvt+0xba>
 80071b2:	f1c4 0401 	rsb	r4, r4, #1
 80071b6:	f8ca 4000 	str.w	r4, [sl]
 80071ba:	f8da 3000 	ldr.w	r3, [sl]
 80071be:	4499      	add	r9, r3
 80071c0:	e7d3      	b.n	800716a <__cvt+0x6a>
 80071c2:	1c59      	adds	r1, r3, #1
 80071c4:	9103      	str	r1, [sp, #12]
 80071c6:	701a      	strb	r2, [r3, #0]
 80071c8:	e7d9      	b.n	800717e <__cvt+0x7e>

080071ca <__exponent>:
 80071ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071cc:	2900      	cmp	r1, #0
 80071ce:	bfba      	itte	lt
 80071d0:	4249      	neglt	r1, r1
 80071d2:	232d      	movlt	r3, #45	@ 0x2d
 80071d4:	232b      	movge	r3, #43	@ 0x2b
 80071d6:	2909      	cmp	r1, #9
 80071d8:	7002      	strb	r2, [r0, #0]
 80071da:	7043      	strb	r3, [r0, #1]
 80071dc:	dd29      	ble.n	8007232 <__exponent+0x68>
 80071de:	f10d 0307 	add.w	r3, sp, #7
 80071e2:	461d      	mov	r5, r3
 80071e4:	270a      	movs	r7, #10
 80071e6:	461a      	mov	r2, r3
 80071e8:	fbb1 f6f7 	udiv	r6, r1, r7
 80071ec:	fb07 1416 	mls	r4, r7, r6, r1
 80071f0:	3430      	adds	r4, #48	@ 0x30
 80071f2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80071f6:	460c      	mov	r4, r1
 80071f8:	2c63      	cmp	r4, #99	@ 0x63
 80071fa:	f103 33ff 	add.w	r3, r3, #4294967295
 80071fe:	4631      	mov	r1, r6
 8007200:	dcf1      	bgt.n	80071e6 <__exponent+0x1c>
 8007202:	3130      	adds	r1, #48	@ 0x30
 8007204:	1e94      	subs	r4, r2, #2
 8007206:	f803 1c01 	strb.w	r1, [r3, #-1]
 800720a:	1c41      	adds	r1, r0, #1
 800720c:	4623      	mov	r3, r4
 800720e:	42ab      	cmp	r3, r5
 8007210:	d30a      	bcc.n	8007228 <__exponent+0x5e>
 8007212:	f10d 0309 	add.w	r3, sp, #9
 8007216:	1a9b      	subs	r3, r3, r2
 8007218:	42ac      	cmp	r4, r5
 800721a:	bf88      	it	hi
 800721c:	2300      	movhi	r3, #0
 800721e:	3302      	adds	r3, #2
 8007220:	4403      	add	r3, r0
 8007222:	1a18      	subs	r0, r3, r0
 8007224:	b003      	add	sp, #12
 8007226:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007228:	f813 6b01 	ldrb.w	r6, [r3], #1
 800722c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007230:	e7ed      	b.n	800720e <__exponent+0x44>
 8007232:	2330      	movs	r3, #48	@ 0x30
 8007234:	3130      	adds	r1, #48	@ 0x30
 8007236:	7083      	strb	r3, [r0, #2]
 8007238:	70c1      	strb	r1, [r0, #3]
 800723a:	1d03      	adds	r3, r0, #4
 800723c:	e7f1      	b.n	8007222 <__exponent+0x58>
	...

08007240 <_printf_float>:
 8007240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007244:	b08d      	sub	sp, #52	@ 0x34
 8007246:	460c      	mov	r4, r1
 8007248:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800724c:	4616      	mov	r6, r2
 800724e:	461f      	mov	r7, r3
 8007250:	4605      	mov	r5, r0
 8007252:	f000 fd0f 	bl	8007c74 <_localeconv_r>
 8007256:	6803      	ldr	r3, [r0, #0]
 8007258:	9304      	str	r3, [sp, #16]
 800725a:	4618      	mov	r0, r3
 800725c:	f7f9 f810 	bl	8000280 <strlen>
 8007260:	2300      	movs	r3, #0
 8007262:	930a      	str	r3, [sp, #40]	@ 0x28
 8007264:	f8d8 3000 	ldr.w	r3, [r8]
 8007268:	9005      	str	r0, [sp, #20]
 800726a:	3307      	adds	r3, #7
 800726c:	f023 0307 	bic.w	r3, r3, #7
 8007270:	f103 0208 	add.w	r2, r3, #8
 8007274:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007278:	f8d4 b000 	ldr.w	fp, [r4]
 800727c:	f8c8 2000 	str.w	r2, [r8]
 8007280:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007284:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007288:	9307      	str	r3, [sp, #28]
 800728a:	f8cd 8018 	str.w	r8, [sp, #24]
 800728e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007292:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007296:	4b9c      	ldr	r3, [pc, #624]	@ (8007508 <_printf_float+0x2c8>)
 8007298:	f04f 32ff 	mov.w	r2, #4294967295
 800729c:	f7f9 fc4e 	bl	8000b3c <__aeabi_dcmpun>
 80072a0:	bb70      	cbnz	r0, 8007300 <_printf_float+0xc0>
 80072a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80072a6:	4b98      	ldr	r3, [pc, #608]	@ (8007508 <_printf_float+0x2c8>)
 80072a8:	f04f 32ff 	mov.w	r2, #4294967295
 80072ac:	f7f9 fc28 	bl	8000b00 <__aeabi_dcmple>
 80072b0:	bb30      	cbnz	r0, 8007300 <_printf_float+0xc0>
 80072b2:	2200      	movs	r2, #0
 80072b4:	2300      	movs	r3, #0
 80072b6:	4640      	mov	r0, r8
 80072b8:	4649      	mov	r1, r9
 80072ba:	f7f9 fc17 	bl	8000aec <__aeabi_dcmplt>
 80072be:	b110      	cbz	r0, 80072c6 <_printf_float+0x86>
 80072c0:	232d      	movs	r3, #45	@ 0x2d
 80072c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072c6:	4a91      	ldr	r2, [pc, #580]	@ (800750c <_printf_float+0x2cc>)
 80072c8:	4b91      	ldr	r3, [pc, #580]	@ (8007510 <_printf_float+0x2d0>)
 80072ca:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80072ce:	bf94      	ite	ls
 80072d0:	4690      	movls	r8, r2
 80072d2:	4698      	movhi	r8, r3
 80072d4:	2303      	movs	r3, #3
 80072d6:	6123      	str	r3, [r4, #16]
 80072d8:	f02b 0304 	bic.w	r3, fp, #4
 80072dc:	6023      	str	r3, [r4, #0]
 80072de:	f04f 0900 	mov.w	r9, #0
 80072e2:	9700      	str	r7, [sp, #0]
 80072e4:	4633      	mov	r3, r6
 80072e6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80072e8:	4621      	mov	r1, r4
 80072ea:	4628      	mov	r0, r5
 80072ec:	f000 f9d2 	bl	8007694 <_printf_common>
 80072f0:	3001      	adds	r0, #1
 80072f2:	f040 808d 	bne.w	8007410 <_printf_float+0x1d0>
 80072f6:	f04f 30ff 	mov.w	r0, #4294967295
 80072fa:	b00d      	add	sp, #52	@ 0x34
 80072fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007300:	4642      	mov	r2, r8
 8007302:	464b      	mov	r3, r9
 8007304:	4640      	mov	r0, r8
 8007306:	4649      	mov	r1, r9
 8007308:	f7f9 fc18 	bl	8000b3c <__aeabi_dcmpun>
 800730c:	b140      	cbz	r0, 8007320 <_printf_float+0xe0>
 800730e:	464b      	mov	r3, r9
 8007310:	2b00      	cmp	r3, #0
 8007312:	bfbc      	itt	lt
 8007314:	232d      	movlt	r3, #45	@ 0x2d
 8007316:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800731a:	4a7e      	ldr	r2, [pc, #504]	@ (8007514 <_printf_float+0x2d4>)
 800731c:	4b7e      	ldr	r3, [pc, #504]	@ (8007518 <_printf_float+0x2d8>)
 800731e:	e7d4      	b.n	80072ca <_printf_float+0x8a>
 8007320:	6863      	ldr	r3, [r4, #4]
 8007322:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007326:	9206      	str	r2, [sp, #24]
 8007328:	1c5a      	adds	r2, r3, #1
 800732a:	d13b      	bne.n	80073a4 <_printf_float+0x164>
 800732c:	2306      	movs	r3, #6
 800732e:	6063      	str	r3, [r4, #4]
 8007330:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007334:	2300      	movs	r3, #0
 8007336:	6022      	str	r2, [r4, #0]
 8007338:	9303      	str	r3, [sp, #12]
 800733a:	ab0a      	add	r3, sp, #40	@ 0x28
 800733c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007340:	ab09      	add	r3, sp, #36	@ 0x24
 8007342:	9300      	str	r3, [sp, #0]
 8007344:	6861      	ldr	r1, [r4, #4]
 8007346:	ec49 8b10 	vmov	d0, r8, r9
 800734a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800734e:	4628      	mov	r0, r5
 8007350:	f7ff fed6 	bl	8007100 <__cvt>
 8007354:	9b06      	ldr	r3, [sp, #24]
 8007356:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007358:	2b47      	cmp	r3, #71	@ 0x47
 800735a:	4680      	mov	r8, r0
 800735c:	d129      	bne.n	80073b2 <_printf_float+0x172>
 800735e:	1cc8      	adds	r0, r1, #3
 8007360:	db02      	blt.n	8007368 <_printf_float+0x128>
 8007362:	6863      	ldr	r3, [r4, #4]
 8007364:	4299      	cmp	r1, r3
 8007366:	dd41      	ble.n	80073ec <_printf_float+0x1ac>
 8007368:	f1aa 0a02 	sub.w	sl, sl, #2
 800736c:	fa5f fa8a 	uxtb.w	sl, sl
 8007370:	3901      	subs	r1, #1
 8007372:	4652      	mov	r2, sl
 8007374:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007378:	9109      	str	r1, [sp, #36]	@ 0x24
 800737a:	f7ff ff26 	bl	80071ca <__exponent>
 800737e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007380:	1813      	adds	r3, r2, r0
 8007382:	2a01      	cmp	r2, #1
 8007384:	4681      	mov	r9, r0
 8007386:	6123      	str	r3, [r4, #16]
 8007388:	dc02      	bgt.n	8007390 <_printf_float+0x150>
 800738a:	6822      	ldr	r2, [r4, #0]
 800738c:	07d2      	lsls	r2, r2, #31
 800738e:	d501      	bpl.n	8007394 <_printf_float+0x154>
 8007390:	3301      	adds	r3, #1
 8007392:	6123      	str	r3, [r4, #16]
 8007394:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007398:	2b00      	cmp	r3, #0
 800739a:	d0a2      	beq.n	80072e2 <_printf_float+0xa2>
 800739c:	232d      	movs	r3, #45	@ 0x2d
 800739e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80073a2:	e79e      	b.n	80072e2 <_printf_float+0xa2>
 80073a4:	9a06      	ldr	r2, [sp, #24]
 80073a6:	2a47      	cmp	r2, #71	@ 0x47
 80073a8:	d1c2      	bne.n	8007330 <_printf_float+0xf0>
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d1c0      	bne.n	8007330 <_printf_float+0xf0>
 80073ae:	2301      	movs	r3, #1
 80073b0:	e7bd      	b.n	800732e <_printf_float+0xee>
 80073b2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80073b6:	d9db      	bls.n	8007370 <_printf_float+0x130>
 80073b8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80073bc:	d118      	bne.n	80073f0 <_printf_float+0x1b0>
 80073be:	2900      	cmp	r1, #0
 80073c0:	6863      	ldr	r3, [r4, #4]
 80073c2:	dd0b      	ble.n	80073dc <_printf_float+0x19c>
 80073c4:	6121      	str	r1, [r4, #16]
 80073c6:	b913      	cbnz	r3, 80073ce <_printf_float+0x18e>
 80073c8:	6822      	ldr	r2, [r4, #0]
 80073ca:	07d0      	lsls	r0, r2, #31
 80073cc:	d502      	bpl.n	80073d4 <_printf_float+0x194>
 80073ce:	3301      	adds	r3, #1
 80073d0:	440b      	add	r3, r1
 80073d2:	6123      	str	r3, [r4, #16]
 80073d4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80073d6:	f04f 0900 	mov.w	r9, #0
 80073da:	e7db      	b.n	8007394 <_printf_float+0x154>
 80073dc:	b913      	cbnz	r3, 80073e4 <_printf_float+0x1a4>
 80073de:	6822      	ldr	r2, [r4, #0]
 80073e0:	07d2      	lsls	r2, r2, #31
 80073e2:	d501      	bpl.n	80073e8 <_printf_float+0x1a8>
 80073e4:	3302      	adds	r3, #2
 80073e6:	e7f4      	b.n	80073d2 <_printf_float+0x192>
 80073e8:	2301      	movs	r3, #1
 80073ea:	e7f2      	b.n	80073d2 <_printf_float+0x192>
 80073ec:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80073f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073f2:	4299      	cmp	r1, r3
 80073f4:	db05      	blt.n	8007402 <_printf_float+0x1c2>
 80073f6:	6823      	ldr	r3, [r4, #0]
 80073f8:	6121      	str	r1, [r4, #16]
 80073fa:	07d8      	lsls	r0, r3, #31
 80073fc:	d5ea      	bpl.n	80073d4 <_printf_float+0x194>
 80073fe:	1c4b      	adds	r3, r1, #1
 8007400:	e7e7      	b.n	80073d2 <_printf_float+0x192>
 8007402:	2900      	cmp	r1, #0
 8007404:	bfd4      	ite	le
 8007406:	f1c1 0202 	rsble	r2, r1, #2
 800740a:	2201      	movgt	r2, #1
 800740c:	4413      	add	r3, r2
 800740e:	e7e0      	b.n	80073d2 <_printf_float+0x192>
 8007410:	6823      	ldr	r3, [r4, #0]
 8007412:	055a      	lsls	r2, r3, #21
 8007414:	d407      	bmi.n	8007426 <_printf_float+0x1e6>
 8007416:	6923      	ldr	r3, [r4, #16]
 8007418:	4642      	mov	r2, r8
 800741a:	4631      	mov	r1, r6
 800741c:	4628      	mov	r0, r5
 800741e:	47b8      	blx	r7
 8007420:	3001      	adds	r0, #1
 8007422:	d12b      	bne.n	800747c <_printf_float+0x23c>
 8007424:	e767      	b.n	80072f6 <_printf_float+0xb6>
 8007426:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800742a:	f240 80dd 	bls.w	80075e8 <_printf_float+0x3a8>
 800742e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007432:	2200      	movs	r2, #0
 8007434:	2300      	movs	r3, #0
 8007436:	f7f9 fb4f 	bl	8000ad8 <__aeabi_dcmpeq>
 800743a:	2800      	cmp	r0, #0
 800743c:	d033      	beq.n	80074a6 <_printf_float+0x266>
 800743e:	4a37      	ldr	r2, [pc, #220]	@ (800751c <_printf_float+0x2dc>)
 8007440:	2301      	movs	r3, #1
 8007442:	4631      	mov	r1, r6
 8007444:	4628      	mov	r0, r5
 8007446:	47b8      	blx	r7
 8007448:	3001      	adds	r0, #1
 800744a:	f43f af54 	beq.w	80072f6 <_printf_float+0xb6>
 800744e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007452:	4543      	cmp	r3, r8
 8007454:	db02      	blt.n	800745c <_printf_float+0x21c>
 8007456:	6823      	ldr	r3, [r4, #0]
 8007458:	07d8      	lsls	r0, r3, #31
 800745a:	d50f      	bpl.n	800747c <_printf_float+0x23c>
 800745c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007460:	4631      	mov	r1, r6
 8007462:	4628      	mov	r0, r5
 8007464:	47b8      	blx	r7
 8007466:	3001      	adds	r0, #1
 8007468:	f43f af45 	beq.w	80072f6 <_printf_float+0xb6>
 800746c:	f04f 0900 	mov.w	r9, #0
 8007470:	f108 38ff 	add.w	r8, r8, #4294967295
 8007474:	f104 0a1a 	add.w	sl, r4, #26
 8007478:	45c8      	cmp	r8, r9
 800747a:	dc09      	bgt.n	8007490 <_printf_float+0x250>
 800747c:	6823      	ldr	r3, [r4, #0]
 800747e:	079b      	lsls	r3, r3, #30
 8007480:	f100 8103 	bmi.w	800768a <_printf_float+0x44a>
 8007484:	68e0      	ldr	r0, [r4, #12]
 8007486:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007488:	4298      	cmp	r0, r3
 800748a:	bfb8      	it	lt
 800748c:	4618      	movlt	r0, r3
 800748e:	e734      	b.n	80072fa <_printf_float+0xba>
 8007490:	2301      	movs	r3, #1
 8007492:	4652      	mov	r2, sl
 8007494:	4631      	mov	r1, r6
 8007496:	4628      	mov	r0, r5
 8007498:	47b8      	blx	r7
 800749a:	3001      	adds	r0, #1
 800749c:	f43f af2b 	beq.w	80072f6 <_printf_float+0xb6>
 80074a0:	f109 0901 	add.w	r9, r9, #1
 80074a4:	e7e8      	b.n	8007478 <_printf_float+0x238>
 80074a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	dc39      	bgt.n	8007520 <_printf_float+0x2e0>
 80074ac:	4a1b      	ldr	r2, [pc, #108]	@ (800751c <_printf_float+0x2dc>)
 80074ae:	2301      	movs	r3, #1
 80074b0:	4631      	mov	r1, r6
 80074b2:	4628      	mov	r0, r5
 80074b4:	47b8      	blx	r7
 80074b6:	3001      	adds	r0, #1
 80074b8:	f43f af1d 	beq.w	80072f6 <_printf_float+0xb6>
 80074bc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80074c0:	ea59 0303 	orrs.w	r3, r9, r3
 80074c4:	d102      	bne.n	80074cc <_printf_float+0x28c>
 80074c6:	6823      	ldr	r3, [r4, #0]
 80074c8:	07d9      	lsls	r1, r3, #31
 80074ca:	d5d7      	bpl.n	800747c <_printf_float+0x23c>
 80074cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074d0:	4631      	mov	r1, r6
 80074d2:	4628      	mov	r0, r5
 80074d4:	47b8      	blx	r7
 80074d6:	3001      	adds	r0, #1
 80074d8:	f43f af0d 	beq.w	80072f6 <_printf_float+0xb6>
 80074dc:	f04f 0a00 	mov.w	sl, #0
 80074e0:	f104 0b1a 	add.w	fp, r4, #26
 80074e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074e6:	425b      	negs	r3, r3
 80074e8:	4553      	cmp	r3, sl
 80074ea:	dc01      	bgt.n	80074f0 <_printf_float+0x2b0>
 80074ec:	464b      	mov	r3, r9
 80074ee:	e793      	b.n	8007418 <_printf_float+0x1d8>
 80074f0:	2301      	movs	r3, #1
 80074f2:	465a      	mov	r2, fp
 80074f4:	4631      	mov	r1, r6
 80074f6:	4628      	mov	r0, r5
 80074f8:	47b8      	blx	r7
 80074fa:	3001      	adds	r0, #1
 80074fc:	f43f aefb 	beq.w	80072f6 <_printf_float+0xb6>
 8007500:	f10a 0a01 	add.w	sl, sl, #1
 8007504:	e7ee      	b.n	80074e4 <_printf_float+0x2a4>
 8007506:	bf00      	nop
 8007508:	7fefffff 	.word	0x7fefffff
 800750c:	08009e90 	.word	0x08009e90
 8007510:	08009e94 	.word	0x08009e94
 8007514:	08009e98 	.word	0x08009e98
 8007518:	08009e9c 	.word	0x08009e9c
 800751c:	08009ea0 	.word	0x08009ea0
 8007520:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007522:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007526:	4553      	cmp	r3, sl
 8007528:	bfa8      	it	ge
 800752a:	4653      	movge	r3, sl
 800752c:	2b00      	cmp	r3, #0
 800752e:	4699      	mov	r9, r3
 8007530:	dc36      	bgt.n	80075a0 <_printf_float+0x360>
 8007532:	f04f 0b00 	mov.w	fp, #0
 8007536:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800753a:	f104 021a 	add.w	r2, r4, #26
 800753e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007540:	9306      	str	r3, [sp, #24]
 8007542:	eba3 0309 	sub.w	r3, r3, r9
 8007546:	455b      	cmp	r3, fp
 8007548:	dc31      	bgt.n	80075ae <_printf_float+0x36e>
 800754a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800754c:	459a      	cmp	sl, r3
 800754e:	dc3a      	bgt.n	80075c6 <_printf_float+0x386>
 8007550:	6823      	ldr	r3, [r4, #0]
 8007552:	07da      	lsls	r2, r3, #31
 8007554:	d437      	bmi.n	80075c6 <_printf_float+0x386>
 8007556:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007558:	ebaa 0903 	sub.w	r9, sl, r3
 800755c:	9b06      	ldr	r3, [sp, #24]
 800755e:	ebaa 0303 	sub.w	r3, sl, r3
 8007562:	4599      	cmp	r9, r3
 8007564:	bfa8      	it	ge
 8007566:	4699      	movge	r9, r3
 8007568:	f1b9 0f00 	cmp.w	r9, #0
 800756c:	dc33      	bgt.n	80075d6 <_printf_float+0x396>
 800756e:	f04f 0800 	mov.w	r8, #0
 8007572:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007576:	f104 0b1a 	add.w	fp, r4, #26
 800757a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800757c:	ebaa 0303 	sub.w	r3, sl, r3
 8007580:	eba3 0309 	sub.w	r3, r3, r9
 8007584:	4543      	cmp	r3, r8
 8007586:	f77f af79 	ble.w	800747c <_printf_float+0x23c>
 800758a:	2301      	movs	r3, #1
 800758c:	465a      	mov	r2, fp
 800758e:	4631      	mov	r1, r6
 8007590:	4628      	mov	r0, r5
 8007592:	47b8      	blx	r7
 8007594:	3001      	adds	r0, #1
 8007596:	f43f aeae 	beq.w	80072f6 <_printf_float+0xb6>
 800759a:	f108 0801 	add.w	r8, r8, #1
 800759e:	e7ec      	b.n	800757a <_printf_float+0x33a>
 80075a0:	4642      	mov	r2, r8
 80075a2:	4631      	mov	r1, r6
 80075a4:	4628      	mov	r0, r5
 80075a6:	47b8      	blx	r7
 80075a8:	3001      	adds	r0, #1
 80075aa:	d1c2      	bne.n	8007532 <_printf_float+0x2f2>
 80075ac:	e6a3      	b.n	80072f6 <_printf_float+0xb6>
 80075ae:	2301      	movs	r3, #1
 80075b0:	4631      	mov	r1, r6
 80075b2:	4628      	mov	r0, r5
 80075b4:	9206      	str	r2, [sp, #24]
 80075b6:	47b8      	blx	r7
 80075b8:	3001      	adds	r0, #1
 80075ba:	f43f ae9c 	beq.w	80072f6 <_printf_float+0xb6>
 80075be:	9a06      	ldr	r2, [sp, #24]
 80075c0:	f10b 0b01 	add.w	fp, fp, #1
 80075c4:	e7bb      	b.n	800753e <_printf_float+0x2fe>
 80075c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075ca:	4631      	mov	r1, r6
 80075cc:	4628      	mov	r0, r5
 80075ce:	47b8      	blx	r7
 80075d0:	3001      	adds	r0, #1
 80075d2:	d1c0      	bne.n	8007556 <_printf_float+0x316>
 80075d4:	e68f      	b.n	80072f6 <_printf_float+0xb6>
 80075d6:	9a06      	ldr	r2, [sp, #24]
 80075d8:	464b      	mov	r3, r9
 80075da:	4442      	add	r2, r8
 80075dc:	4631      	mov	r1, r6
 80075de:	4628      	mov	r0, r5
 80075e0:	47b8      	blx	r7
 80075e2:	3001      	adds	r0, #1
 80075e4:	d1c3      	bne.n	800756e <_printf_float+0x32e>
 80075e6:	e686      	b.n	80072f6 <_printf_float+0xb6>
 80075e8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80075ec:	f1ba 0f01 	cmp.w	sl, #1
 80075f0:	dc01      	bgt.n	80075f6 <_printf_float+0x3b6>
 80075f2:	07db      	lsls	r3, r3, #31
 80075f4:	d536      	bpl.n	8007664 <_printf_float+0x424>
 80075f6:	2301      	movs	r3, #1
 80075f8:	4642      	mov	r2, r8
 80075fa:	4631      	mov	r1, r6
 80075fc:	4628      	mov	r0, r5
 80075fe:	47b8      	blx	r7
 8007600:	3001      	adds	r0, #1
 8007602:	f43f ae78 	beq.w	80072f6 <_printf_float+0xb6>
 8007606:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800760a:	4631      	mov	r1, r6
 800760c:	4628      	mov	r0, r5
 800760e:	47b8      	blx	r7
 8007610:	3001      	adds	r0, #1
 8007612:	f43f ae70 	beq.w	80072f6 <_printf_float+0xb6>
 8007616:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800761a:	2200      	movs	r2, #0
 800761c:	2300      	movs	r3, #0
 800761e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007622:	f7f9 fa59 	bl	8000ad8 <__aeabi_dcmpeq>
 8007626:	b9c0      	cbnz	r0, 800765a <_printf_float+0x41a>
 8007628:	4653      	mov	r3, sl
 800762a:	f108 0201 	add.w	r2, r8, #1
 800762e:	4631      	mov	r1, r6
 8007630:	4628      	mov	r0, r5
 8007632:	47b8      	blx	r7
 8007634:	3001      	adds	r0, #1
 8007636:	d10c      	bne.n	8007652 <_printf_float+0x412>
 8007638:	e65d      	b.n	80072f6 <_printf_float+0xb6>
 800763a:	2301      	movs	r3, #1
 800763c:	465a      	mov	r2, fp
 800763e:	4631      	mov	r1, r6
 8007640:	4628      	mov	r0, r5
 8007642:	47b8      	blx	r7
 8007644:	3001      	adds	r0, #1
 8007646:	f43f ae56 	beq.w	80072f6 <_printf_float+0xb6>
 800764a:	f108 0801 	add.w	r8, r8, #1
 800764e:	45d0      	cmp	r8, sl
 8007650:	dbf3      	blt.n	800763a <_printf_float+0x3fa>
 8007652:	464b      	mov	r3, r9
 8007654:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007658:	e6df      	b.n	800741a <_printf_float+0x1da>
 800765a:	f04f 0800 	mov.w	r8, #0
 800765e:	f104 0b1a 	add.w	fp, r4, #26
 8007662:	e7f4      	b.n	800764e <_printf_float+0x40e>
 8007664:	2301      	movs	r3, #1
 8007666:	4642      	mov	r2, r8
 8007668:	e7e1      	b.n	800762e <_printf_float+0x3ee>
 800766a:	2301      	movs	r3, #1
 800766c:	464a      	mov	r2, r9
 800766e:	4631      	mov	r1, r6
 8007670:	4628      	mov	r0, r5
 8007672:	47b8      	blx	r7
 8007674:	3001      	adds	r0, #1
 8007676:	f43f ae3e 	beq.w	80072f6 <_printf_float+0xb6>
 800767a:	f108 0801 	add.w	r8, r8, #1
 800767e:	68e3      	ldr	r3, [r4, #12]
 8007680:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007682:	1a5b      	subs	r3, r3, r1
 8007684:	4543      	cmp	r3, r8
 8007686:	dcf0      	bgt.n	800766a <_printf_float+0x42a>
 8007688:	e6fc      	b.n	8007484 <_printf_float+0x244>
 800768a:	f04f 0800 	mov.w	r8, #0
 800768e:	f104 0919 	add.w	r9, r4, #25
 8007692:	e7f4      	b.n	800767e <_printf_float+0x43e>

08007694 <_printf_common>:
 8007694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007698:	4616      	mov	r6, r2
 800769a:	4698      	mov	r8, r3
 800769c:	688a      	ldr	r2, [r1, #8]
 800769e:	690b      	ldr	r3, [r1, #16]
 80076a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80076a4:	4293      	cmp	r3, r2
 80076a6:	bfb8      	it	lt
 80076a8:	4613      	movlt	r3, r2
 80076aa:	6033      	str	r3, [r6, #0]
 80076ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80076b0:	4607      	mov	r7, r0
 80076b2:	460c      	mov	r4, r1
 80076b4:	b10a      	cbz	r2, 80076ba <_printf_common+0x26>
 80076b6:	3301      	adds	r3, #1
 80076b8:	6033      	str	r3, [r6, #0]
 80076ba:	6823      	ldr	r3, [r4, #0]
 80076bc:	0699      	lsls	r1, r3, #26
 80076be:	bf42      	ittt	mi
 80076c0:	6833      	ldrmi	r3, [r6, #0]
 80076c2:	3302      	addmi	r3, #2
 80076c4:	6033      	strmi	r3, [r6, #0]
 80076c6:	6825      	ldr	r5, [r4, #0]
 80076c8:	f015 0506 	ands.w	r5, r5, #6
 80076cc:	d106      	bne.n	80076dc <_printf_common+0x48>
 80076ce:	f104 0a19 	add.w	sl, r4, #25
 80076d2:	68e3      	ldr	r3, [r4, #12]
 80076d4:	6832      	ldr	r2, [r6, #0]
 80076d6:	1a9b      	subs	r3, r3, r2
 80076d8:	42ab      	cmp	r3, r5
 80076da:	dc26      	bgt.n	800772a <_printf_common+0x96>
 80076dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80076e0:	6822      	ldr	r2, [r4, #0]
 80076e2:	3b00      	subs	r3, #0
 80076e4:	bf18      	it	ne
 80076e6:	2301      	movne	r3, #1
 80076e8:	0692      	lsls	r2, r2, #26
 80076ea:	d42b      	bmi.n	8007744 <_printf_common+0xb0>
 80076ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80076f0:	4641      	mov	r1, r8
 80076f2:	4638      	mov	r0, r7
 80076f4:	47c8      	blx	r9
 80076f6:	3001      	adds	r0, #1
 80076f8:	d01e      	beq.n	8007738 <_printf_common+0xa4>
 80076fa:	6823      	ldr	r3, [r4, #0]
 80076fc:	6922      	ldr	r2, [r4, #16]
 80076fe:	f003 0306 	and.w	r3, r3, #6
 8007702:	2b04      	cmp	r3, #4
 8007704:	bf02      	ittt	eq
 8007706:	68e5      	ldreq	r5, [r4, #12]
 8007708:	6833      	ldreq	r3, [r6, #0]
 800770a:	1aed      	subeq	r5, r5, r3
 800770c:	68a3      	ldr	r3, [r4, #8]
 800770e:	bf0c      	ite	eq
 8007710:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007714:	2500      	movne	r5, #0
 8007716:	4293      	cmp	r3, r2
 8007718:	bfc4      	itt	gt
 800771a:	1a9b      	subgt	r3, r3, r2
 800771c:	18ed      	addgt	r5, r5, r3
 800771e:	2600      	movs	r6, #0
 8007720:	341a      	adds	r4, #26
 8007722:	42b5      	cmp	r5, r6
 8007724:	d11a      	bne.n	800775c <_printf_common+0xc8>
 8007726:	2000      	movs	r0, #0
 8007728:	e008      	b.n	800773c <_printf_common+0xa8>
 800772a:	2301      	movs	r3, #1
 800772c:	4652      	mov	r2, sl
 800772e:	4641      	mov	r1, r8
 8007730:	4638      	mov	r0, r7
 8007732:	47c8      	blx	r9
 8007734:	3001      	adds	r0, #1
 8007736:	d103      	bne.n	8007740 <_printf_common+0xac>
 8007738:	f04f 30ff 	mov.w	r0, #4294967295
 800773c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007740:	3501      	adds	r5, #1
 8007742:	e7c6      	b.n	80076d2 <_printf_common+0x3e>
 8007744:	18e1      	adds	r1, r4, r3
 8007746:	1c5a      	adds	r2, r3, #1
 8007748:	2030      	movs	r0, #48	@ 0x30
 800774a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800774e:	4422      	add	r2, r4
 8007750:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007754:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007758:	3302      	adds	r3, #2
 800775a:	e7c7      	b.n	80076ec <_printf_common+0x58>
 800775c:	2301      	movs	r3, #1
 800775e:	4622      	mov	r2, r4
 8007760:	4641      	mov	r1, r8
 8007762:	4638      	mov	r0, r7
 8007764:	47c8      	blx	r9
 8007766:	3001      	adds	r0, #1
 8007768:	d0e6      	beq.n	8007738 <_printf_common+0xa4>
 800776a:	3601      	adds	r6, #1
 800776c:	e7d9      	b.n	8007722 <_printf_common+0x8e>
	...

08007770 <_printf_i>:
 8007770:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007774:	7e0f      	ldrb	r7, [r1, #24]
 8007776:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007778:	2f78      	cmp	r7, #120	@ 0x78
 800777a:	4691      	mov	r9, r2
 800777c:	4680      	mov	r8, r0
 800777e:	460c      	mov	r4, r1
 8007780:	469a      	mov	sl, r3
 8007782:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007786:	d807      	bhi.n	8007798 <_printf_i+0x28>
 8007788:	2f62      	cmp	r7, #98	@ 0x62
 800778a:	d80a      	bhi.n	80077a2 <_printf_i+0x32>
 800778c:	2f00      	cmp	r7, #0
 800778e:	f000 80d2 	beq.w	8007936 <_printf_i+0x1c6>
 8007792:	2f58      	cmp	r7, #88	@ 0x58
 8007794:	f000 80b9 	beq.w	800790a <_printf_i+0x19a>
 8007798:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800779c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80077a0:	e03a      	b.n	8007818 <_printf_i+0xa8>
 80077a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80077a6:	2b15      	cmp	r3, #21
 80077a8:	d8f6      	bhi.n	8007798 <_printf_i+0x28>
 80077aa:	a101      	add	r1, pc, #4	@ (adr r1, 80077b0 <_printf_i+0x40>)
 80077ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80077b0:	08007809 	.word	0x08007809
 80077b4:	0800781d 	.word	0x0800781d
 80077b8:	08007799 	.word	0x08007799
 80077bc:	08007799 	.word	0x08007799
 80077c0:	08007799 	.word	0x08007799
 80077c4:	08007799 	.word	0x08007799
 80077c8:	0800781d 	.word	0x0800781d
 80077cc:	08007799 	.word	0x08007799
 80077d0:	08007799 	.word	0x08007799
 80077d4:	08007799 	.word	0x08007799
 80077d8:	08007799 	.word	0x08007799
 80077dc:	0800791d 	.word	0x0800791d
 80077e0:	08007847 	.word	0x08007847
 80077e4:	080078d7 	.word	0x080078d7
 80077e8:	08007799 	.word	0x08007799
 80077ec:	08007799 	.word	0x08007799
 80077f0:	0800793f 	.word	0x0800793f
 80077f4:	08007799 	.word	0x08007799
 80077f8:	08007847 	.word	0x08007847
 80077fc:	08007799 	.word	0x08007799
 8007800:	08007799 	.word	0x08007799
 8007804:	080078df 	.word	0x080078df
 8007808:	6833      	ldr	r3, [r6, #0]
 800780a:	1d1a      	adds	r2, r3, #4
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	6032      	str	r2, [r6, #0]
 8007810:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007814:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007818:	2301      	movs	r3, #1
 800781a:	e09d      	b.n	8007958 <_printf_i+0x1e8>
 800781c:	6833      	ldr	r3, [r6, #0]
 800781e:	6820      	ldr	r0, [r4, #0]
 8007820:	1d19      	adds	r1, r3, #4
 8007822:	6031      	str	r1, [r6, #0]
 8007824:	0606      	lsls	r6, r0, #24
 8007826:	d501      	bpl.n	800782c <_printf_i+0xbc>
 8007828:	681d      	ldr	r5, [r3, #0]
 800782a:	e003      	b.n	8007834 <_printf_i+0xc4>
 800782c:	0645      	lsls	r5, r0, #25
 800782e:	d5fb      	bpl.n	8007828 <_printf_i+0xb8>
 8007830:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007834:	2d00      	cmp	r5, #0
 8007836:	da03      	bge.n	8007840 <_printf_i+0xd0>
 8007838:	232d      	movs	r3, #45	@ 0x2d
 800783a:	426d      	negs	r5, r5
 800783c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007840:	4859      	ldr	r0, [pc, #356]	@ (80079a8 <_printf_i+0x238>)
 8007842:	230a      	movs	r3, #10
 8007844:	e011      	b.n	800786a <_printf_i+0xfa>
 8007846:	6821      	ldr	r1, [r4, #0]
 8007848:	6833      	ldr	r3, [r6, #0]
 800784a:	0608      	lsls	r0, r1, #24
 800784c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007850:	d402      	bmi.n	8007858 <_printf_i+0xe8>
 8007852:	0649      	lsls	r1, r1, #25
 8007854:	bf48      	it	mi
 8007856:	b2ad      	uxthmi	r5, r5
 8007858:	2f6f      	cmp	r7, #111	@ 0x6f
 800785a:	4853      	ldr	r0, [pc, #332]	@ (80079a8 <_printf_i+0x238>)
 800785c:	6033      	str	r3, [r6, #0]
 800785e:	bf14      	ite	ne
 8007860:	230a      	movne	r3, #10
 8007862:	2308      	moveq	r3, #8
 8007864:	2100      	movs	r1, #0
 8007866:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800786a:	6866      	ldr	r6, [r4, #4]
 800786c:	60a6      	str	r6, [r4, #8]
 800786e:	2e00      	cmp	r6, #0
 8007870:	bfa2      	ittt	ge
 8007872:	6821      	ldrge	r1, [r4, #0]
 8007874:	f021 0104 	bicge.w	r1, r1, #4
 8007878:	6021      	strge	r1, [r4, #0]
 800787a:	b90d      	cbnz	r5, 8007880 <_printf_i+0x110>
 800787c:	2e00      	cmp	r6, #0
 800787e:	d04b      	beq.n	8007918 <_printf_i+0x1a8>
 8007880:	4616      	mov	r6, r2
 8007882:	fbb5 f1f3 	udiv	r1, r5, r3
 8007886:	fb03 5711 	mls	r7, r3, r1, r5
 800788a:	5dc7      	ldrb	r7, [r0, r7]
 800788c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007890:	462f      	mov	r7, r5
 8007892:	42bb      	cmp	r3, r7
 8007894:	460d      	mov	r5, r1
 8007896:	d9f4      	bls.n	8007882 <_printf_i+0x112>
 8007898:	2b08      	cmp	r3, #8
 800789a:	d10b      	bne.n	80078b4 <_printf_i+0x144>
 800789c:	6823      	ldr	r3, [r4, #0]
 800789e:	07df      	lsls	r7, r3, #31
 80078a0:	d508      	bpl.n	80078b4 <_printf_i+0x144>
 80078a2:	6923      	ldr	r3, [r4, #16]
 80078a4:	6861      	ldr	r1, [r4, #4]
 80078a6:	4299      	cmp	r1, r3
 80078a8:	bfde      	ittt	le
 80078aa:	2330      	movle	r3, #48	@ 0x30
 80078ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80078b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80078b4:	1b92      	subs	r2, r2, r6
 80078b6:	6122      	str	r2, [r4, #16]
 80078b8:	f8cd a000 	str.w	sl, [sp]
 80078bc:	464b      	mov	r3, r9
 80078be:	aa03      	add	r2, sp, #12
 80078c0:	4621      	mov	r1, r4
 80078c2:	4640      	mov	r0, r8
 80078c4:	f7ff fee6 	bl	8007694 <_printf_common>
 80078c8:	3001      	adds	r0, #1
 80078ca:	d14a      	bne.n	8007962 <_printf_i+0x1f2>
 80078cc:	f04f 30ff 	mov.w	r0, #4294967295
 80078d0:	b004      	add	sp, #16
 80078d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078d6:	6823      	ldr	r3, [r4, #0]
 80078d8:	f043 0320 	orr.w	r3, r3, #32
 80078dc:	6023      	str	r3, [r4, #0]
 80078de:	4833      	ldr	r0, [pc, #204]	@ (80079ac <_printf_i+0x23c>)
 80078e0:	2778      	movs	r7, #120	@ 0x78
 80078e2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80078e6:	6823      	ldr	r3, [r4, #0]
 80078e8:	6831      	ldr	r1, [r6, #0]
 80078ea:	061f      	lsls	r7, r3, #24
 80078ec:	f851 5b04 	ldr.w	r5, [r1], #4
 80078f0:	d402      	bmi.n	80078f8 <_printf_i+0x188>
 80078f2:	065f      	lsls	r7, r3, #25
 80078f4:	bf48      	it	mi
 80078f6:	b2ad      	uxthmi	r5, r5
 80078f8:	6031      	str	r1, [r6, #0]
 80078fa:	07d9      	lsls	r1, r3, #31
 80078fc:	bf44      	itt	mi
 80078fe:	f043 0320 	orrmi.w	r3, r3, #32
 8007902:	6023      	strmi	r3, [r4, #0]
 8007904:	b11d      	cbz	r5, 800790e <_printf_i+0x19e>
 8007906:	2310      	movs	r3, #16
 8007908:	e7ac      	b.n	8007864 <_printf_i+0xf4>
 800790a:	4827      	ldr	r0, [pc, #156]	@ (80079a8 <_printf_i+0x238>)
 800790c:	e7e9      	b.n	80078e2 <_printf_i+0x172>
 800790e:	6823      	ldr	r3, [r4, #0]
 8007910:	f023 0320 	bic.w	r3, r3, #32
 8007914:	6023      	str	r3, [r4, #0]
 8007916:	e7f6      	b.n	8007906 <_printf_i+0x196>
 8007918:	4616      	mov	r6, r2
 800791a:	e7bd      	b.n	8007898 <_printf_i+0x128>
 800791c:	6833      	ldr	r3, [r6, #0]
 800791e:	6825      	ldr	r5, [r4, #0]
 8007920:	6961      	ldr	r1, [r4, #20]
 8007922:	1d18      	adds	r0, r3, #4
 8007924:	6030      	str	r0, [r6, #0]
 8007926:	062e      	lsls	r6, r5, #24
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	d501      	bpl.n	8007930 <_printf_i+0x1c0>
 800792c:	6019      	str	r1, [r3, #0]
 800792e:	e002      	b.n	8007936 <_printf_i+0x1c6>
 8007930:	0668      	lsls	r0, r5, #25
 8007932:	d5fb      	bpl.n	800792c <_printf_i+0x1bc>
 8007934:	8019      	strh	r1, [r3, #0]
 8007936:	2300      	movs	r3, #0
 8007938:	6123      	str	r3, [r4, #16]
 800793a:	4616      	mov	r6, r2
 800793c:	e7bc      	b.n	80078b8 <_printf_i+0x148>
 800793e:	6833      	ldr	r3, [r6, #0]
 8007940:	1d1a      	adds	r2, r3, #4
 8007942:	6032      	str	r2, [r6, #0]
 8007944:	681e      	ldr	r6, [r3, #0]
 8007946:	6862      	ldr	r2, [r4, #4]
 8007948:	2100      	movs	r1, #0
 800794a:	4630      	mov	r0, r6
 800794c:	f7f8 fc48 	bl	80001e0 <memchr>
 8007950:	b108      	cbz	r0, 8007956 <_printf_i+0x1e6>
 8007952:	1b80      	subs	r0, r0, r6
 8007954:	6060      	str	r0, [r4, #4]
 8007956:	6863      	ldr	r3, [r4, #4]
 8007958:	6123      	str	r3, [r4, #16]
 800795a:	2300      	movs	r3, #0
 800795c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007960:	e7aa      	b.n	80078b8 <_printf_i+0x148>
 8007962:	6923      	ldr	r3, [r4, #16]
 8007964:	4632      	mov	r2, r6
 8007966:	4649      	mov	r1, r9
 8007968:	4640      	mov	r0, r8
 800796a:	47d0      	blx	sl
 800796c:	3001      	adds	r0, #1
 800796e:	d0ad      	beq.n	80078cc <_printf_i+0x15c>
 8007970:	6823      	ldr	r3, [r4, #0]
 8007972:	079b      	lsls	r3, r3, #30
 8007974:	d413      	bmi.n	800799e <_printf_i+0x22e>
 8007976:	68e0      	ldr	r0, [r4, #12]
 8007978:	9b03      	ldr	r3, [sp, #12]
 800797a:	4298      	cmp	r0, r3
 800797c:	bfb8      	it	lt
 800797e:	4618      	movlt	r0, r3
 8007980:	e7a6      	b.n	80078d0 <_printf_i+0x160>
 8007982:	2301      	movs	r3, #1
 8007984:	4632      	mov	r2, r6
 8007986:	4649      	mov	r1, r9
 8007988:	4640      	mov	r0, r8
 800798a:	47d0      	blx	sl
 800798c:	3001      	adds	r0, #1
 800798e:	d09d      	beq.n	80078cc <_printf_i+0x15c>
 8007990:	3501      	adds	r5, #1
 8007992:	68e3      	ldr	r3, [r4, #12]
 8007994:	9903      	ldr	r1, [sp, #12]
 8007996:	1a5b      	subs	r3, r3, r1
 8007998:	42ab      	cmp	r3, r5
 800799a:	dcf2      	bgt.n	8007982 <_printf_i+0x212>
 800799c:	e7eb      	b.n	8007976 <_printf_i+0x206>
 800799e:	2500      	movs	r5, #0
 80079a0:	f104 0619 	add.w	r6, r4, #25
 80079a4:	e7f5      	b.n	8007992 <_printf_i+0x222>
 80079a6:	bf00      	nop
 80079a8:	08009ea2 	.word	0x08009ea2
 80079ac:	08009eb3 	.word	0x08009eb3

080079b0 <std>:
 80079b0:	2300      	movs	r3, #0
 80079b2:	b510      	push	{r4, lr}
 80079b4:	4604      	mov	r4, r0
 80079b6:	e9c0 3300 	strd	r3, r3, [r0]
 80079ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80079be:	6083      	str	r3, [r0, #8]
 80079c0:	8181      	strh	r1, [r0, #12]
 80079c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80079c4:	81c2      	strh	r2, [r0, #14]
 80079c6:	6183      	str	r3, [r0, #24]
 80079c8:	4619      	mov	r1, r3
 80079ca:	2208      	movs	r2, #8
 80079cc:	305c      	adds	r0, #92	@ 0x5c
 80079ce:	f000 f948 	bl	8007c62 <memset>
 80079d2:	4b0d      	ldr	r3, [pc, #52]	@ (8007a08 <std+0x58>)
 80079d4:	6263      	str	r3, [r4, #36]	@ 0x24
 80079d6:	4b0d      	ldr	r3, [pc, #52]	@ (8007a0c <std+0x5c>)
 80079d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80079da:	4b0d      	ldr	r3, [pc, #52]	@ (8007a10 <std+0x60>)
 80079dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80079de:	4b0d      	ldr	r3, [pc, #52]	@ (8007a14 <std+0x64>)
 80079e0:	6323      	str	r3, [r4, #48]	@ 0x30
 80079e2:	4b0d      	ldr	r3, [pc, #52]	@ (8007a18 <std+0x68>)
 80079e4:	6224      	str	r4, [r4, #32]
 80079e6:	429c      	cmp	r4, r3
 80079e8:	d006      	beq.n	80079f8 <std+0x48>
 80079ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80079ee:	4294      	cmp	r4, r2
 80079f0:	d002      	beq.n	80079f8 <std+0x48>
 80079f2:	33d0      	adds	r3, #208	@ 0xd0
 80079f4:	429c      	cmp	r4, r3
 80079f6:	d105      	bne.n	8007a04 <std+0x54>
 80079f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80079fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a00:	f000 b9ac 	b.w	8007d5c <__retarget_lock_init_recursive>
 8007a04:	bd10      	pop	{r4, pc}
 8007a06:	bf00      	nop
 8007a08:	08007bdd 	.word	0x08007bdd
 8007a0c:	08007bff 	.word	0x08007bff
 8007a10:	08007c37 	.word	0x08007c37
 8007a14:	08007c5b 	.word	0x08007c5b
 8007a18:	20000488 	.word	0x20000488

08007a1c <stdio_exit_handler>:
 8007a1c:	4a02      	ldr	r2, [pc, #8]	@ (8007a28 <stdio_exit_handler+0xc>)
 8007a1e:	4903      	ldr	r1, [pc, #12]	@ (8007a2c <stdio_exit_handler+0x10>)
 8007a20:	4803      	ldr	r0, [pc, #12]	@ (8007a30 <stdio_exit_handler+0x14>)
 8007a22:	f000 b869 	b.w	8007af8 <_fwalk_sglue>
 8007a26:	bf00      	nop
 8007a28:	20000034 	.word	0x20000034
 8007a2c:	080096bd 	.word	0x080096bd
 8007a30:	20000044 	.word	0x20000044

08007a34 <cleanup_stdio>:
 8007a34:	6841      	ldr	r1, [r0, #4]
 8007a36:	4b0c      	ldr	r3, [pc, #48]	@ (8007a68 <cleanup_stdio+0x34>)
 8007a38:	4299      	cmp	r1, r3
 8007a3a:	b510      	push	{r4, lr}
 8007a3c:	4604      	mov	r4, r0
 8007a3e:	d001      	beq.n	8007a44 <cleanup_stdio+0x10>
 8007a40:	f001 fe3c 	bl	80096bc <_fflush_r>
 8007a44:	68a1      	ldr	r1, [r4, #8]
 8007a46:	4b09      	ldr	r3, [pc, #36]	@ (8007a6c <cleanup_stdio+0x38>)
 8007a48:	4299      	cmp	r1, r3
 8007a4a:	d002      	beq.n	8007a52 <cleanup_stdio+0x1e>
 8007a4c:	4620      	mov	r0, r4
 8007a4e:	f001 fe35 	bl	80096bc <_fflush_r>
 8007a52:	68e1      	ldr	r1, [r4, #12]
 8007a54:	4b06      	ldr	r3, [pc, #24]	@ (8007a70 <cleanup_stdio+0x3c>)
 8007a56:	4299      	cmp	r1, r3
 8007a58:	d004      	beq.n	8007a64 <cleanup_stdio+0x30>
 8007a5a:	4620      	mov	r0, r4
 8007a5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a60:	f001 be2c 	b.w	80096bc <_fflush_r>
 8007a64:	bd10      	pop	{r4, pc}
 8007a66:	bf00      	nop
 8007a68:	20000488 	.word	0x20000488
 8007a6c:	200004f0 	.word	0x200004f0
 8007a70:	20000558 	.word	0x20000558

08007a74 <global_stdio_init.part.0>:
 8007a74:	b510      	push	{r4, lr}
 8007a76:	4b0b      	ldr	r3, [pc, #44]	@ (8007aa4 <global_stdio_init.part.0+0x30>)
 8007a78:	4c0b      	ldr	r4, [pc, #44]	@ (8007aa8 <global_stdio_init.part.0+0x34>)
 8007a7a:	4a0c      	ldr	r2, [pc, #48]	@ (8007aac <global_stdio_init.part.0+0x38>)
 8007a7c:	601a      	str	r2, [r3, #0]
 8007a7e:	4620      	mov	r0, r4
 8007a80:	2200      	movs	r2, #0
 8007a82:	2104      	movs	r1, #4
 8007a84:	f7ff ff94 	bl	80079b0 <std>
 8007a88:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	2109      	movs	r1, #9
 8007a90:	f7ff ff8e 	bl	80079b0 <std>
 8007a94:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007a98:	2202      	movs	r2, #2
 8007a9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a9e:	2112      	movs	r1, #18
 8007aa0:	f7ff bf86 	b.w	80079b0 <std>
 8007aa4:	200005c0 	.word	0x200005c0
 8007aa8:	20000488 	.word	0x20000488
 8007aac:	08007a1d 	.word	0x08007a1d

08007ab0 <__sfp_lock_acquire>:
 8007ab0:	4801      	ldr	r0, [pc, #4]	@ (8007ab8 <__sfp_lock_acquire+0x8>)
 8007ab2:	f000 b954 	b.w	8007d5e <__retarget_lock_acquire_recursive>
 8007ab6:	bf00      	nop
 8007ab8:	200005c9 	.word	0x200005c9

08007abc <__sfp_lock_release>:
 8007abc:	4801      	ldr	r0, [pc, #4]	@ (8007ac4 <__sfp_lock_release+0x8>)
 8007abe:	f000 b94f 	b.w	8007d60 <__retarget_lock_release_recursive>
 8007ac2:	bf00      	nop
 8007ac4:	200005c9 	.word	0x200005c9

08007ac8 <__sinit>:
 8007ac8:	b510      	push	{r4, lr}
 8007aca:	4604      	mov	r4, r0
 8007acc:	f7ff fff0 	bl	8007ab0 <__sfp_lock_acquire>
 8007ad0:	6a23      	ldr	r3, [r4, #32]
 8007ad2:	b11b      	cbz	r3, 8007adc <__sinit+0x14>
 8007ad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ad8:	f7ff bff0 	b.w	8007abc <__sfp_lock_release>
 8007adc:	4b04      	ldr	r3, [pc, #16]	@ (8007af0 <__sinit+0x28>)
 8007ade:	6223      	str	r3, [r4, #32]
 8007ae0:	4b04      	ldr	r3, [pc, #16]	@ (8007af4 <__sinit+0x2c>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d1f5      	bne.n	8007ad4 <__sinit+0xc>
 8007ae8:	f7ff ffc4 	bl	8007a74 <global_stdio_init.part.0>
 8007aec:	e7f2      	b.n	8007ad4 <__sinit+0xc>
 8007aee:	bf00      	nop
 8007af0:	08007a35 	.word	0x08007a35
 8007af4:	200005c0 	.word	0x200005c0

08007af8 <_fwalk_sglue>:
 8007af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007afc:	4607      	mov	r7, r0
 8007afe:	4688      	mov	r8, r1
 8007b00:	4614      	mov	r4, r2
 8007b02:	2600      	movs	r6, #0
 8007b04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007b08:	f1b9 0901 	subs.w	r9, r9, #1
 8007b0c:	d505      	bpl.n	8007b1a <_fwalk_sglue+0x22>
 8007b0e:	6824      	ldr	r4, [r4, #0]
 8007b10:	2c00      	cmp	r4, #0
 8007b12:	d1f7      	bne.n	8007b04 <_fwalk_sglue+0xc>
 8007b14:	4630      	mov	r0, r6
 8007b16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b1a:	89ab      	ldrh	r3, [r5, #12]
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d907      	bls.n	8007b30 <_fwalk_sglue+0x38>
 8007b20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b24:	3301      	adds	r3, #1
 8007b26:	d003      	beq.n	8007b30 <_fwalk_sglue+0x38>
 8007b28:	4629      	mov	r1, r5
 8007b2a:	4638      	mov	r0, r7
 8007b2c:	47c0      	blx	r8
 8007b2e:	4306      	orrs	r6, r0
 8007b30:	3568      	adds	r5, #104	@ 0x68
 8007b32:	e7e9      	b.n	8007b08 <_fwalk_sglue+0x10>

08007b34 <sniprintf>:
 8007b34:	b40c      	push	{r2, r3}
 8007b36:	b530      	push	{r4, r5, lr}
 8007b38:	4b17      	ldr	r3, [pc, #92]	@ (8007b98 <sniprintf+0x64>)
 8007b3a:	1e0c      	subs	r4, r1, #0
 8007b3c:	681d      	ldr	r5, [r3, #0]
 8007b3e:	b09d      	sub	sp, #116	@ 0x74
 8007b40:	da08      	bge.n	8007b54 <sniprintf+0x20>
 8007b42:	238b      	movs	r3, #139	@ 0x8b
 8007b44:	602b      	str	r3, [r5, #0]
 8007b46:	f04f 30ff 	mov.w	r0, #4294967295
 8007b4a:	b01d      	add	sp, #116	@ 0x74
 8007b4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b50:	b002      	add	sp, #8
 8007b52:	4770      	bx	lr
 8007b54:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007b58:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007b5c:	bf14      	ite	ne
 8007b5e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007b62:	4623      	moveq	r3, r4
 8007b64:	9304      	str	r3, [sp, #16]
 8007b66:	9307      	str	r3, [sp, #28]
 8007b68:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007b6c:	9002      	str	r0, [sp, #8]
 8007b6e:	9006      	str	r0, [sp, #24]
 8007b70:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007b74:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007b76:	ab21      	add	r3, sp, #132	@ 0x84
 8007b78:	a902      	add	r1, sp, #8
 8007b7a:	4628      	mov	r0, r5
 8007b7c:	9301      	str	r3, [sp, #4]
 8007b7e:	f001 fc1d 	bl	80093bc <_svfiprintf_r>
 8007b82:	1c43      	adds	r3, r0, #1
 8007b84:	bfbc      	itt	lt
 8007b86:	238b      	movlt	r3, #139	@ 0x8b
 8007b88:	602b      	strlt	r3, [r5, #0]
 8007b8a:	2c00      	cmp	r4, #0
 8007b8c:	d0dd      	beq.n	8007b4a <sniprintf+0x16>
 8007b8e:	9b02      	ldr	r3, [sp, #8]
 8007b90:	2200      	movs	r2, #0
 8007b92:	701a      	strb	r2, [r3, #0]
 8007b94:	e7d9      	b.n	8007b4a <sniprintf+0x16>
 8007b96:	bf00      	nop
 8007b98:	20000040 	.word	0x20000040

08007b9c <siprintf>:
 8007b9c:	b40e      	push	{r1, r2, r3}
 8007b9e:	b500      	push	{lr}
 8007ba0:	b09c      	sub	sp, #112	@ 0x70
 8007ba2:	ab1d      	add	r3, sp, #116	@ 0x74
 8007ba4:	9002      	str	r0, [sp, #8]
 8007ba6:	9006      	str	r0, [sp, #24]
 8007ba8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007bac:	4809      	ldr	r0, [pc, #36]	@ (8007bd4 <siprintf+0x38>)
 8007bae:	9107      	str	r1, [sp, #28]
 8007bb0:	9104      	str	r1, [sp, #16]
 8007bb2:	4909      	ldr	r1, [pc, #36]	@ (8007bd8 <siprintf+0x3c>)
 8007bb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bb8:	9105      	str	r1, [sp, #20]
 8007bba:	6800      	ldr	r0, [r0, #0]
 8007bbc:	9301      	str	r3, [sp, #4]
 8007bbe:	a902      	add	r1, sp, #8
 8007bc0:	f001 fbfc 	bl	80093bc <_svfiprintf_r>
 8007bc4:	9b02      	ldr	r3, [sp, #8]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	701a      	strb	r2, [r3, #0]
 8007bca:	b01c      	add	sp, #112	@ 0x70
 8007bcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007bd0:	b003      	add	sp, #12
 8007bd2:	4770      	bx	lr
 8007bd4:	20000040 	.word	0x20000040
 8007bd8:	ffff0208 	.word	0xffff0208

08007bdc <__sread>:
 8007bdc:	b510      	push	{r4, lr}
 8007bde:	460c      	mov	r4, r1
 8007be0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007be4:	f000 f86c 	bl	8007cc0 <_read_r>
 8007be8:	2800      	cmp	r0, #0
 8007bea:	bfab      	itete	ge
 8007bec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007bee:	89a3      	ldrhlt	r3, [r4, #12]
 8007bf0:	181b      	addge	r3, r3, r0
 8007bf2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007bf6:	bfac      	ite	ge
 8007bf8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007bfa:	81a3      	strhlt	r3, [r4, #12]
 8007bfc:	bd10      	pop	{r4, pc}

08007bfe <__swrite>:
 8007bfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c02:	461f      	mov	r7, r3
 8007c04:	898b      	ldrh	r3, [r1, #12]
 8007c06:	05db      	lsls	r3, r3, #23
 8007c08:	4605      	mov	r5, r0
 8007c0a:	460c      	mov	r4, r1
 8007c0c:	4616      	mov	r6, r2
 8007c0e:	d505      	bpl.n	8007c1c <__swrite+0x1e>
 8007c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c14:	2302      	movs	r3, #2
 8007c16:	2200      	movs	r2, #0
 8007c18:	f000 f840 	bl	8007c9c <_lseek_r>
 8007c1c:	89a3      	ldrh	r3, [r4, #12]
 8007c1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c22:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007c26:	81a3      	strh	r3, [r4, #12]
 8007c28:	4632      	mov	r2, r6
 8007c2a:	463b      	mov	r3, r7
 8007c2c:	4628      	mov	r0, r5
 8007c2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c32:	f000 b857 	b.w	8007ce4 <_write_r>

08007c36 <__sseek>:
 8007c36:	b510      	push	{r4, lr}
 8007c38:	460c      	mov	r4, r1
 8007c3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c3e:	f000 f82d 	bl	8007c9c <_lseek_r>
 8007c42:	1c43      	adds	r3, r0, #1
 8007c44:	89a3      	ldrh	r3, [r4, #12]
 8007c46:	bf15      	itete	ne
 8007c48:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007c4a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007c4e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007c52:	81a3      	strheq	r3, [r4, #12]
 8007c54:	bf18      	it	ne
 8007c56:	81a3      	strhne	r3, [r4, #12]
 8007c58:	bd10      	pop	{r4, pc}

08007c5a <__sclose>:
 8007c5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c5e:	f000 b80d 	b.w	8007c7c <_close_r>

08007c62 <memset>:
 8007c62:	4402      	add	r2, r0
 8007c64:	4603      	mov	r3, r0
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d100      	bne.n	8007c6c <memset+0xa>
 8007c6a:	4770      	bx	lr
 8007c6c:	f803 1b01 	strb.w	r1, [r3], #1
 8007c70:	e7f9      	b.n	8007c66 <memset+0x4>
	...

08007c74 <_localeconv_r>:
 8007c74:	4800      	ldr	r0, [pc, #0]	@ (8007c78 <_localeconv_r+0x4>)
 8007c76:	4770      	bx	lr
 8007c78:	20000180 	.word	0x20000180

08007c7c <_close_r>:
 8007c7c:	b538      	push	{r3, r4, r5, lr}
 8007c7e:	4d06      	ldr	r5, [pc, #24]	@ (8007c98 <_close_r+0x1c>)
 8007c80:	2300      	movs	r3, #0
 8007c82:	4604      	mov	r4, r0
 8007c84:	4608      	mov	r0, r1
 8007c86:	602b      	str	r3, [r5, #0]
 8007c88:	f7fa fac2 	bl	8002210 <_close>
 8007c8c:	1c43      	adds	r3, r0, #1
 8007c8e:	d102      	bne.n	8007c96 <_close_r+0x1a>
 8007c90:	682b      	ldr	r3, [r5, #0]
 8007c92:	b103      	cbz	r3, 8007c96 <_close_r+0x1a>
 8007c94:	6023      	str	r3, [r4, #0]
 8007c96:	bd38      	pop	{r3, r4, r5, pc}
 8007c98:	200005c4 	.word	0x200005c4

08007c9c <_lseek_r>:
 8007c9c:	b538      	push	{r3, r4, r5, lr}
 8007c9e:	4d07      	ldr	r5, [pc, #28]	@ (8007cbc <_lseek_r+0x20>)
 8007ca0:	4604      	mov	r4, r0
 8007ca2:	4608      	mov	r0, r1
 8007ca4:	4611      	mov	r1, r2
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	602a      	str	r2, [r5, #0]
 8007caa:	461a      	mov	r2, r3
 8007cac:	f7fa fad7 	bl	800225e <_lseek>
 8007cb0:	1c43      	adds	r3, r0, #1
 8007cb2:	d102      	bne.n	8007cba <_lseek_r+0x1e>
 8007cb4:	682b      	ldr	r3, [r5, #0]
 8007cb6:	b103      	cbz	r3, 8007cba <_lseek_r+0x1e>
 8007cb8:	6023      	str	r3, [r4, #0]
 8007cba:	bd38      	pop	{r3, r4, r5, pc}
 8007cbc:	200005c4 	.word	0x200005c4

08007cc0 <_read_r>:
 8007cc0:	b538      	push	{r3, r4, r5, lr}
 8007cc2:	4d07      	ldr	r5, [pc, #28]	@ (8007ce0 <_read_r+0x20>)
 8007cc4:	4604      	mov	r4, r0
 8007cc6:	4608      	mov	r0, r1
 8007cc8:	4611      	mov	r1, r2
 8007cca:	2200      	movs	r2, #0
 8007ccc:	602a      	str	r2, [r5, #0]
 8007cce:	461a      	mov	r2, r3
 8007cd0:	f7fa fa65 	bl	800219e <_read>
 8007cd4:	1c43      	adds	r3, r0, #1
 8007cd6:	d102      	bne.n	8007cde <_read_r+0x1e>
 8007cd8:	682b      	ldr	r3, [r5, #0]
 8007cda:	b103      	cbz	r3, 8007cde <_read_r+0x1e>
 8007cdc:	6023      	str	r3, [r4, #0]
 8007cde:	bd38      	pop	{r3, r4, r5, pc}
 8007ce0:	200005c4 	.word	0x200005c4

08007ce4 <_write_r>:
 8007ce4:	b538      	push	{r3, r4, r5, lr}
 8007ce6:	4d07      	ldr	r5, [pc, #28]	@ (8007d04 <_write_r+0x20>)
 8007ce8:	4604      	mov	r4, r0
 8007cea:	4608      	mov	r0, r1
 8007cec:	4611      	mov	r1, r2
 8007cee:	2200      	movs	r2, #0
 8007cf0:	602a      	str	r2, [r5, #0]
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	f7fa fa70 	bl	80021d8 <_write>
 8007cf8:	1c43      	adds	r3, r0, #1
 8007cfa:	d102      	bne.n	8007d02 <_write_r+0x1e>
 8007cfc:	682b      	ldr	r3, [r5, #0]
 8007cfe:	b103      	cbz	r3, 8007d02 <_write_r+0x1e>
 8007d00:	6023      	str	r3, [r4, #0]
 8007d02:	bd38      	pop	{r3, r4, r5, pc}
 8007d04:	200005c4 	.word	0x200005c4

08007d08 <__errno>:
 8007d08:	4b01      	ldr	r3, [pc, #4]	@ (8007d10 <__errno+0x8>)
 8007d0a:	6818      	ldr	r0, [r3, #0]
 8007d0c:	4770      	bx	lr
 8007d0e:	bf00      	nop
 8007d10:	20000040 	.word	0x20000040

08007d14 <__libc_init_array>:
 8007d14:	b570      	push	{r4, r5, r6, lr}
 8007d16:	4d0d      	ldr	r5, [pc, #52]	@ (8007d4c <__libc_init_array+0x38>)
 8007d18:	4c0d      	ldr	r4, [pc, #52]	@ (8007d50 <__libc_init_array+0x3c>)
 8007d1a:	1b64      	subs	r4, r4, r5
 8007d1c:	10a4      	asrs	r4, r4, #2
 8007d1e:	2600      	movs	r6, #0
 8007d20:	42a6      	cmp	r6, r4
 8007d22:	d109      	bne.n	8007d38 <__libc_init_array+0x24>
 8007d24:	4d0b      	ldr	r5, [pc, #44]	@ (8007d54 <__libc_init_array+0x40>)
 8007d26:	4c0c      	ldr	r4, [pc, #48]	@ (8007d58 <__libc_init_array+0x44>)
 8007d28:	f002 f866 	bl	8009df8 <_init>
 8007d2c:	1b64      	subs	r4, r4, r5
 8007d2e:	10a4      	asrs	r4, r4, #2
 8007d30:	2600      	movs	r6, #0
 8007d32:	42a6      	cmp	r6, r4
 8007d34:	d105      	bne.n	8007d42 <__libc_init_array+0x2e>
 8007d36:	bd70      	pop	{r4, r5, r6, pc}
 8007d38:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d3c:	4798      	blx	r3
 8007d3e:	3601      	adds	r6, #1
 8007d40:	e7ee      	b.n	8007d20 <__libc_init_array+0xc>
 8007d42:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d46:	4798      	blx	r3
 8007d48:	3601      	adds	r6, #1
 8007d4a:	e7f2      	b.n	8007d32 <__libc_init_array+0x1e>
 8007d4c:	0800a208 	.word	0x0800a208
 8007d50:	0800a208 	.word	0x0800a208
 8007d54:	0800a208 	.word	0x0800a208
 8007d58:	0800a20c 	.word	0x0800a20c

08007d5c <__retarget_lock_init_recursive>:
 8007d5c:	4770      	bx	lr

08007d5e <__retarget_lock_acquire_recursive>:
 8007d5e:	4770      	bx	lr

08007d60 <__retarget_lock_release_recursive>:
 8007d60:	4770      	bx	lr

08007d62 <quorem>:
 8007d62:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d66:	6903      	ldr	r3, [r0, #16]
 8007d68:	690c      	ldr	r4, [r1, #16]
 8007d6a:	42a3      	cmp	r3, r4
 8007d6c:	4607      	mov	r7, r0
 8007d6e:	db7e      	blt.n	8007e6e <quorem+0x10c>
 8007d70:	3c01      	subs	r4, #1
 8007d72:	f101 0814 	add.w	r8, r1, #20
 8007d76:	00a3      	lsls	r3, r4, #2
 8007d78:	f100 0514 	add.w	r5, r0, #20
 8007d7c:	9300      	str	r3, [sp, #0]
 8007d7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d82:	9301      	str	r3, [sp, #4]
 8007d84:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007d88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007d94:	fbb2 f6f3 	udiv	r6, r2, r3
 8007d98:	d32e      	bcc.n	8007df8 <quorem+0x96>
 8007d9a:	f04f 0a00 	mov.w	sl, #0
 8007d9e:	46c4      	mov	ip, r8
 8007da0:	46ae      	mov	lr, r5
 8007da2:	46d3      	mov	fp, sl
 8007da4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007da8:	b298      	uxth	r0, r3
 8007daa:	fb06 a000 	mla	r0, r6, r0, sl
 8007dae:	0c02      	lsrs	r2, r0, #16
 8007db0:	0c1b      	lsrs	r3, r3, #16
 8007db2:	fb06 2303 	mla	r3, r6, r3, r2
 8007db6:	f8de 2000 	ldr.w	r2, [lr]
 8007dba:	b280      	uxth	r0, r0
 8007dbc:	b292      	uxth	r2, r2
 8007dbe:	1a12      	subs	r2, r2, r0
 8007dc0:	445a      	add	r2, fp
 8007dc2:	f8de 0000 	ldr.w	r0, [lr]
 8007dc6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007dd0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007dd4:	b292      	uxth	r2, r2
 8007dd6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007dda:	45e1      	cmp	r9, ip
 8007ddc:	f84e 2b04 	str.w	r2, [lr], #4
 8007de0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007de4:	d2de      	bcs.n	8007da4 <quorem+0x42>
 8007de6:	9b00      	ldr	r3, [sp, #0]
 8007de8:	58eb      	ldr	r3, [r5, r3]
 8007dea:	b92b      	cbnz	r3, 8007df8 <quorem+0x96>
 8007dec:	9b01      	ldr	r3, [sp, #4]
 8007dee:	3b04      	subs	r3, #4
 8007df0:	429d      	cmp	r5, r3
 8007df2:	461a      	mov	r2, r3
 8007df4:	d32f      	bcc.n	8007e56 <quorem+0xf4>
 8007df6:	613c      	str	r4, [r7, #16]
 8007df8:	4638      	mov	r0, r7
 8007dfa:	f001 f97b 	bl	80090f4 <__mcmp>
 8007dfe:	2800      	cmp	r0, #0
 8007e00:	db25      	blt.n	8007e4e <quorem+0xec>
 8007e02:	4629      	mov	r1, r5
 8007e04:	2000      	movs	r0, #0
 8007e06:	f858 2b04 	ldr.w	r2, [r8], #4
 8007e0a:	f8d1 c000 	ldr.w	ip, [r1]
 8007e0e:	fa1f fe82 	uxth.w	lr, r2
 8007e12:	fa1f f38c 	uxth.w	r3, ip
 8007e16:	eba3 030e 	sub.w	r3, r3, lr
 8007e1a:	4403      	add	r3, r0
 8007e1c:	0c12      	lsrs	r2, r2, #16
 8007e1e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007e22:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e2c:	45c1      	cmp	r9, r8
 8007e2e:	f841 3b04 	str.w	r3, [r1], #4
 8007e32:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007e36:	d2e6      	bcs.n	8007e06 <quorem+0xa4>
 8007e38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e3c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e40:	b922      	cbnz	r2, 8007e4c <quorem+0xea>
 8007e42:	3b04      	subs	r3, #4
 8007e44:	429d      	cmp	r5, r3
 8007e46:	461a      	mov	r2, r3
 8007e48:	d30b      	bcc.n	8007e62 <quorem+0x100>
 8007e4a:	613c      	str	r4, [r7, #16]
 8007e4c:	3601      	adds	r6, #1
 8007e4e:	4630      	mov	r0, r6
 8007e50:	b003      	add	sp, #12
 8007e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e56:	6812      	ldr	r2, [r2, #0]
 8007e58:	3b04      	subs	r3, #4
 8007e5a:	2a00      	cmp	r2, #0
 8007e5c:	d1cb      	bne.n	8007df6 <quorem+0x94>
 8007e5e:	3c01      	subs	r4, #1
 8007e60:	e7c6      	b.n	8007df0 <quorem+0x8e>
 8007e62:	6812      	ldr	r2, [r2, #0]
 8007e64:	3b04      	subs	r3, #4
 8007e66:	2a00      	cmp	r2, #0
 8007e68:	d1ef      	bne.n	8007e4a <quorem+0xe8>
 8007e6a:	3c01      	subs	r4, #1
 8007e6c:	e7ea      	b.n	8007e44 <quorem+0xe2>
 8007e6e:	2000      	movs	r0, #0
 8007e70:	e7ee      	b.n	8007e50 <quorem+0xee>
 8007e72:	0000      	movs	r0, r0
 8007e74:	0000      	movs	r0, r0
	...

08007e78 <_dtoa_r>:
 8007e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e7c:	69c7      	ldr	r7, [r0, #28]
 8007e7e:	b099      	sub	sp, #100	@ 0x64
 8007e80:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007e84:	ec55 4b10 	vmov	r4, r5, d0
 8007e88:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007e8a:	9109      	str	r1, [sp, #36]	@ 0x24
 8007e8c:	4683      	mov	fp, r0
 8007e8e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007e90:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007e92:	b97f      	cbnz	r7, 8007eb4 <_dtoa_r+0x3c>
 8007e94:	2010      	movs	r0, #16
 8007e96:	f000 fdfd 	bl	8008a94 <malloc>
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	f8cb 001c 	str.w	r0, [fp, #28]
 8007ea0:	b920      	cbnz	r0, 8007eac <_dtoa_r+0x34>
 8007ea2:	4ba7      	ldr	r3, [pc, #668]	@ (8008140 <_dtoa_r+0x2c8>)
 8007ea4:	21ef      	movs	r1, #239	@ 0xef
 8007ea6:	48a7      	ldr	r0, [pc, #668]	@ (8008144 <_dtoa_r+0x2cc>)
 8007ea8:	f001 fc68 	bl	800977c <__assert_func>
 8007eac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007eb0:	6007      	str	r7, [r0, #0]
 8007eb2:	60c7      	str	r7, [r0, #12]
 8007eb4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007eb8:	6819      	ldr	r1, [r3, #0]
 8007eba:	b159      	cbz	r1, 8007ed4 <_dtoa_r+0x5c>
 8007ebc:	685a      	ldr	r2, [r3, #4]
 8007ebe:	604a      	str	r2, [r1, #4]
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	4093      	lsls	r3, r2
 8007ec4:	608b      	str	r3, [r1, #8]
 8007ec6:	4658      	mov	r0, fp
 8007ec8:	f000 feda 	bl	8008c80 <_Bfree>
 8007ecc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	601a      	str	r2, [r3, #0]
 8007ed4:	1e2b      	subs	r3, r5, #0
 8007ed6:	bfb9      	ittee	lt
 8007ed8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007edc:	9303      	strlt	r3, [sp, #12]
 8007ede:	2300      	movge	r3, #0
 8007ee0:	6033      	strge	r3, [r6, #0]
 8007ee2:	9f03      	ldr	r7, [sp, #12]
 8007ee4:	4b98      	ldr	r3, [pc, #608]	@ (8008148 <_dtoa_r+0x2d0>)
 8007ee6:	bfbc      	itt	lt
 8007ee8:	2201      	movlt	r2, #1
 8007eea:	6032      	strlt	r2, [r6, #0]
 8007eec:	43bb      	bics	r3, r7
 8007eee:	d112      	bne.n	8007f16 <_dtoa_r+0x9e>
 8007ef0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007ef2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007ef6:	6013      	str	r3, [r2, #0]
 8007ef8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007efc:	4323      	orrs	r3, r4
 8007efe:	f000 854d 	beq.w	800899c <_dtoa_r+0xb24>
 8007f02:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007f04:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800815c <_dtoa_r+0x2e4>
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	f000 854f 	beq.w	80089ac <_dtoa_r+0xb34>
 8007f0e:	f10a 0303 	add.w	r3, sl, #3
 8007f12:	f000 bd49 	b.w	80089a8 <_dtoa_r+0xb30>
 8007f16:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	ec51 0b17 	vmov	r0, r1, d7
 8007f20:	2300      	movs	r3, #0
 8007f22:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007f26:	f7f8 fdd7 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f2a:	4680      	mov	r8, r0
 8007f2c:	b158      	cbz	r0, 8007f46 <_dtoa_r+0xce>
 8007f2e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007f30:	2301      	movs	r3, #1
 8007f32:	6013      	str	r3, [r2, #0]
 8007f34:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007f36:	b113      	cbz	r3, 8007f3e <_dtoa_r+0xc6>
 8007f38:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007f3a:	4b84      	ldr	r3, [pc, #528]	@ (800814c <_dtoa_r+0x2d4>)
 8007f3c:	6013      	str	r3, [r2, #0]
 8007f3e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008160 <_dtoa_r+0x2e8>
 8007f42:	f000 bd33 	b.w	80089ac <_dtoa_r+0xb34>
 8007f46:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007f4a:	aa16      	add	r2, sp, #88	@ 0x58
 8007f4c:	a917      	add	r1, sp, #92	@ 0x5c
 8007f4e:	4658      	mov	r0, fp
 8007f50:	f001 f980 	bl	8009254 <__d2b>
 8007f54:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007f58:	4681      	mov	r9, r0
 8007f5a:	2e00      	cmp	r6, #0
 8007f5c:	d077      	beq.n	800804e <_dtoa_r+0x1d6>
 8007f5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007f60:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007f64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f6c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007f70:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007f74:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007f78:	4619      	mov	r1, r3
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	4b74      	ldr	r3, [pc, #464]	@ (8008150 <_dtoa_r+0x2d8>)
 8007f7e:	f7f8 f98b 	bl	8000298 <__aeabi_dsub>
 8007f82:	a369      	add	r3, pc, #420	@ (adr r3, 8008128 <_dtoa_r+0x2b0>)
 8007f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f88:	f7f8 fb3e 	bl	8000608 <__aeabi_dmul>
 8007f8c:	a368      	add	r3, pc, #416	@ (adr r3, 8008130 <_dtoa_r+0x2b8>)
 8007f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f92:	f7f8 f983 	bl	800029c <__adddf3>
 8007f96:	4604      	mov	r4, r0
 8007f98:	4630      	mov	r0, r6
 8007f9a:	460d      	mov	r5, r1
 8007f9c:	f7f8 faca 	bl	8000534 <__aeabi_i2d>
 8007fa0:	a365      	add	r3, pc, #404	@ (adr r3, 8008138 <_dtoa_r+0x2c0>)
 8007fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa6:	f7f8 fb2f 	bl	8000608 <__aeabi_dmul>
 8007faa:	4602      	mov	r2, r0
 8007fac:	460b      	mov	r3, r1
 8007fae:	4620      	mov	r0, r4
 8007fb0:	4629      	mov	r1, r5
 8007fb2:	f7f8 f973 	bl	800029c <__adddf3>
 8007fb6:	4604      	mov	r4, r0
 8007fb8:	460d      	mov	r5, r1
 8007fba:	f7f8 fdd5 	bl	8000b68 <__aeabi_d2iz>
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	4607      	mov	r7, r0
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	4620      	mov	r0, r4
 8007fc6:	4629      	mov	r1, r5
 8007fc8:	f7f8 fd90 	bl	8000aec <__aeabi_dcmplt>
 8007fcc:	b140      	cbz	r0, 8007fe0 <_dtoa_r+0x168>
 8007fce:	4638      	mov	r0, r7
 8007fd0:	f7f8 fab0 	bl	8000534 <__aeabi_i2d>
 8007fd4:	4622      	mov	r2, r4
 8007fd6:	462b      	mov	r3, r5
 8007fd8:	f7f8 fd7e 	bl	8000ad8 <__aeabi_dcmpeq>
 8007fdc:	b900      	cbnz	r0, 8007fe0 <_dtoa_r+0x168>
 8007fde:	3f01      	subs	r7, #1
 8007fe0:	2f16      	cmp	r7, #22
 8007fe2:	d851      	bhi.n	8008088 <_dtoa_r+0x210>
 8007fe4:	4b5b      	ldr	r3, [pc, #364]	@ (8008154 <_dtoa_r+0x2dc>)
 8007fe6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007ff2:	f7f8 fd7b 	bl	8000aec <__aeabi_dcmplt>
 8007ff6:	2800      	cmp	r0, #0
 8007ff8:	d048      	beq.n	800808c <_dtoa_r+0x214>
 8007ffa:	3f01      	subs	r7, #1
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	9312      	str	r3, [sp, #72]	@ 0x48
 8008000:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008002:	1b9b      	subs	r3, r3, r6
 8008004:	1e5a      	subs	r2, r3, #1
 8008006:	bf44      	itt	mi
 8008008:	f1c3 0801 	rsbmi	r8, r3, #1
 800800c:	2300      	movmi	r3, #0
 800800e:	9208      	str	r2, [sp, #32]
 8008010:	bf54      	ite	pl
 8008012:	f04f 0800 	movpl.w	r8, #0
 8008016:	9308      	strmi	r3, [sp, #32]
 8008018:	2f00      	cmp	r7, #0
 800801a:	db39      	blt.n	8008090 <_dtoa_r+0x218>
 800801c:	9b08      	ldr	r3, [sp, #32]
 800801e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008020:	443b      	add	r3, r7
 8008022:	9308      	str	r3, [sp, #32]
 8008024:	2300      	movs	r3, #0
 8008026:	930a      	str	r3, [sp, #40]	@ 0x28
 8008028:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800802a:	2b09      	cmp	r3, #9
 800802c:	d864      	bhi.n	80080f8 <_dtoa_r+0x280>
 800802e:	2b05      	cmp	r3, #5
 8008030:	bfc4      	itt	gt
 8008032:	3b04      	subgt	r3, #4
 8008034:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008036:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008038:	f1a3 0302 	sub.w	r3, r3, #2
 800803c:	bfcc      	ite	gt
 800803e:	2400      	movgt	r4, #0
 8008040:	2401      	movle	r4, #1
 8008042:	2b03      	cmp	r3, #3
 8008044:	d863      	bhi.n	800810e <_dtoa_r+0x296>
 8008046:	e8df f003 	tbb	[pc, r3]
 800804a:	372a      	.short	0x372a
 800804c:	5535      	.short	0x5535
 800804e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008052:	441e      	add	r6, r3
 8008054:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008058:	2b20      	cmp	r3, #32
 800805a:	bfc1      	itttt	gt
 800805c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008060:	409f      	lslgt	r7, r3
 8008062:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008066:	fa24 f303 	lsrgt.w	r3, r4, r3
 800806a:	bfd6      	itet	le
 800806c:	f1c3 0320 	rsble	r3, r3, #32
 8008070:	ea47 0003 	orrgt.w	r0, r7, r3
 8008074:	fa04 f003 	lslle.w	r0, r4, r3
 8008078:	f7f8 fa4c 	bl	8000514 <__aeabi_ui2d>
 800807c:	2201      	movs	r2, #1
 800807e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008082:	3e01      	subs	r6, #1
 8008084:	9214      	str	r2, [sp, #80]	@ 0x50
 8008086:	e777      	b.n	8007f78 <_dtoa_r+0x100>
 8008088:	2301      	movs	r3, #1
 800808a:	e7b8      	b.n	8007ffe <_dtoa_r+0x186>
 800808c:	9012      	str	r0, [sp, #72]	@ 0x48
 800808e:	e7b7      	b.n	8008000 <_dtoa_r+0x188>
 8008090:	427b      	negs	r3, r7
 8008092:	930a      	str	r3, [sp, #40]	@ 0x28
 8008094:	2300      	movs	r3, #0
 8008096:	eba8 0807 	sub.w	r8, r8, r7
 800809a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800809c:	e7c4      	b.n	8008028 <_dtoa_r+0x1b0>
 800809e:	2300      	movs	r3, #0
 80080a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80080a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	dc35      	bgt.n	8008114 <_dtoa_r+0x29c>
 80080a8:	2301      	movs	r3, #1
 80080aa:	9300      	str	r3, [sp, #0]
 80080ac:	9307      	str	r3, [sp, #28]
 80080ae:	461a      	mov	r2, r3
 80080b0:	920e      	str	r2, [sp, #56]	@ 0x38
 80080b2:	e00b      	b.n	80080cc <_dtoa_r+0x254>
 80080b4:	2301      	movs	r3, #1
 80080b6:	e7f3      	b.n	80080a0 <_dtoa_r+0x228>
 80080b8:	2300      	movs	r3, #0
 80080ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 80080bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80080be:	18fb      	adds	r3, r7, r3
 80080c0:	9300      	str	r3, [sp, #0]
 80080c2:	3301      	adds	r3, #1
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	9307      	str	r3, [sp, #28]
 80080c8:	bfb8      	it	lt
 80080ca:	2301      	movlt	r3, #1
 80080cc:	f8db 001c 	ldr.w	r0, [fp, #28]
 80080d0:	2100      	movs	r1, #0
 80080d2:	2204      	movs	r2, #4
 80080d4:	f102 0514 	add.w	r5, r2, #20
 80080d8:	429d      	cmp	r5, r3
 80080da:	d91f      	bls.n	800811c <_dtoa_r+0x2a4>
 80080dc:	6041      	str	r1, [r0, #4]
 80080de:	4658      	mov	r0, fp
 80080e0:	f000 fd8e 	bl	8008c00 <_Balloc>
 80080e4:	4682      	mov	sl, r0
 80080e6:	2800      	cmp	r0, #0
 80080e8:	d13c      	bne.n	8008164 <_dtoa_r+0x2ec>
 80080ea:	4b1b      	ldr	r3, [pc, #108]	@ (8008158 <_dtoa_r+0x2e0>)
 80080ec:	4602      	mov	r2, r0
 80080ee:	f240 11af 	movw	r1, #431	@ 0x1af
 80080f2:	e6d8      	b.n	8007ea6 <_dtoa_r+0x2e>
 80080f4:	2301      	movs	r3, #1
 80080f6:	e7e0      	b.n	80080ba <_dtoa_r+0x242>
 80080f8:	2401      	movs	r4, #1
 80080fa:	2300      	movs	r3, #0
 80080fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80080fe:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008100:	f04f 33ff 	mov.w	r3, #4294967295
 8008104:	9300      	str	r3, [sp, #0]
 8008106:	9307      	str	r3, [sp, #28]
 8008108:	2200      	movs	r2, #0
 800810a:	2312      	movs	r3, #18
 800810c:	e7d0      	b.n	80080b0 <_dtoa_r+0x238>
 800810e:	2301      	movs	r3, #1
 8008110:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008112:	e7f5      	b.n	8008100 <_dtoa_r+0x288>
 8008114:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008116:	9300      	str	r3, [sp, #0]
 8008118:	9307      	str	r3, [sp, #28]
 800811a:	e7d7      	b.n	80080cc <_dtoa_r+0x254>
 800811c:	3101      	adds	r1, #1
 800811e:	0052      	lsls	r2, r2, #1
 8008120:	e7d8      	b.n	80080d4 <_dtoa_r+0x25c>
 8008122:	bf00      	nop
 8008124:	f3af 8000 	nop.w
 8008128:	636f4361 	.word	0x636f4361
 800812c:	3fd287a7 	.word	0x3fd287a7
 8008130:	8b60c8b3 	.word	0x8b60c8b3
 8008134:	3fc68a28 	.word	0x3fc68a28
 8008138:	509f79fb 	.word	0x509f79fb
 800813c:	3fd34413 	.word	0x3fd34413
 8008140:	08009ed1 	.word	0x08009ed1
 8008144:	08009ee8 	.word	0x08009ee8
 8008148:	7ff00000 	.word	0x7ff00000
 800814c:	08009ea1 	.word	0x08009ea1
 8008150:	3ff80000 	.word	0x3ff80000
 8008154:	08009fe0 	.word	0x08009fe0
 8008158:	08009f40 	.word	0x08009f40
 800815c:	08009ecd 	.word	0x08009ecd
 8008160:	08009ea0 	.word	0x08009ea0
 8008164:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008168:	6018      	str	r0, [r3, #0]
 800816a:	9b07      	ldr	r3, [sp, #28]
 800816c:	2b0e      	cmp	r3, #14
 800816e:	f200 80a4 	bhi.w	80082ba <_dtoa_r+0x442>
 8008172:	2c00      	cmp	r4, #0
 8008174:	f000 80a1 	beq.w	80082ba <_dtoa_r+0x442>
 8008178:	2f00      	cmp	r7, #0
 800817a:	dd33      	ble.n	80081e4 <_dtoa_r+0x36c>
 800817c:	4bad      	ldr	r3, [pc, #692]	@ (8008434 <_dtoa_r+0x5bc>)
 800817e:	f007 020f 	and.w	r2, r7, #15
 8008182:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008186:	ed93 7b00 	vldr	d7, [r3]
 800818a:	05f8      	lsls	r0, r7, #23
 800818c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008190:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008194:	d516      	bpl.n	80081c4 <_dtoa_r+0x34c>
 8008196:	4ba8      	ldr	r3, [pc, #672]	@ (8008438 <_dtoa_r+0x5c0>)
 8008198:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800819c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80081a0:	f7f8 fb5c 	bl	800085c <__aeabi_ddiv>
 80081a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081a8:	f004 040f 	and.w	r4, r4, #15
 80081ac:	2603      	movs	r6, #3
 80081ae:	4da2      	ldr	r5, [pc, #648]	@ (8008438 <_dtoa_r+0x5c0>)
 80081b0:	b954      	cbnz	r4, 80081c8 <_dtoa_r+0x350>
 80081b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081ba:	f7f8 fb4f 	bl	800085c <__aeabi_ddiv>
 80081be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081c2:	e028      	b.n	8008216 <_dtoa_r+0x39e>
 80081c4:	2602      	movs	r6, #2
 80081c6:	e7f2      	b.n	80081ae <_dtoa_r+0x336>
 80081c8:	07e1      	lsls	r1, r4, #31
 80081ca:	d508      	bpl.n	80081de <_dtoa_r+0x366>
 80081cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80081d4:	f7f8 fa18 	bl	8000608 <__aeabi_dmul>
 80081d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80081dc:	3601      	adds	r6, #1
 80081de:	1064      	asrs	r4, r4, #1
 80081e0:	3508      	adds	r5, #8
 80081e2:	e7e5      	b.n	80081b0 <_dtoa_r+0x338>
 80081e4:	f000 80d2 	beq.w	800838c <_dtoa_r+0x514>
 80081e8:	427c      	negs	r4, r7
 80081ea:	4b92      	ldr	r3, [pc, #584]	@ (8008434 <_dtoa_r+0x5bc>)
 80081ec:	4d92      	ldr	r5, [pc, #584]	@ (8008438 <_dtoa_r+0x5c0>)
 80081ee:	f004 020f 	and.w	r2, r4, #15
 80081f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80081fe:	f7f8 fa03 	bl	8000608 <__aeabi_dmul>
 8008202:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008206:	1124      	asrs	r4, r4, #4
 8008208:	2300      	movs	r3, #0
 800820a:	2602      	movs	r6, #2
 800820c:	2c00      	cmp	r4, #0
 800820e:	f040 80b2 	bne.w	8008376 <_dtoa_r+0x4fe>
 8008212:	2b00      	cmp	r3, #0
 8008214:	d1d3      	bne.n	80081be <_dtoa_r+0x346>
 8008216:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008218:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800821c:	2b00      	cmp	r3, #0
 800821e:	f000 80b7 	beq.w	8008390 <_dtoa_r+0x518>
 8008222:	4b86      	ldr	r3, [pc, #536]	@ (800843c <_dtoa_r+0x5c4>)
 8008224:	2200      	movs	r2, #0
 8008226:	4620      	mov	r0, r4
 8008228:	4629      	mov	r1, r5
 800822a:	f7f8 fc5f 	bl	8000aec <__aeabi_dcmplt>
 800822e:	2800      	cmp	r0, #0
 8008230:	f000 80ae 	beq.w	8008390 <_dtoa_r+0x518>
 8008234:	9b07      	ldr	r3, [sp, #28]
 8008236:	2b00      	cmp	r3, #0
 8008238:	f000 80aa 	beq.w	8008390 <_dtoa_r+0x518>
 800823c:	9b00      	ldr	r3, [sp, #0]
 800823e:	2b00      	cmp	r3, #0
 8008240:	dd37      	ble.n	80082b2 <_dtoa_r+0x43a>
 8008242:	1e7b      	subs	r3, r7, #1
 8008244:	9304      	str	r3, [sp, #16]
 8008246:	4620      	mov	r0, r4
 8008248:	4b7d      	ldr	r3, [pc, #500]	@ (8008440 <_dtoa_r+0x5c8>)
 800824a:	2200      	movs	r2, #0
 800824c:	4629      	mov	r1, r5
 800824e:	f7f8 f9db 	bl	8000608 <__aeabi_dmul>
 8008252:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008256:	9c00      	ldr	r4, [sp, #0]
 8008258:	3601      	adds	r6, #1
 800825a:	4630      	mov	r0, r6
 800825c:	f7f8 f96a 	bl	8000534 <__aeabi_i2d>
 8008260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008264:	f7f8 f9d0 	bl	8000608 <__aeabi_dmul>
 8008268:	4b76      	ldr	r3, [pc, #472]	@ (8008444 <_dtoa_r+0x5cc>)
 800826a:	2200      	movs	r2, #0
 800826c:	f7f8 f816 	bl	800029c <__adddf3>
 8008270:	4605      	mov	r5, r0
 8008272:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008276:	2c00      	cmp	r4, #0
 8008278:	f040 808d 	bne.w	8008396 <_dtoa_r+0x51e>
 800827c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008280:	4b71      	ldr	r3, [pc, #452]	@ (8008448 <_dtoa_r+0x5d0>)
 8008282:	2200      	movs	r2, #0
 8008284:	f7f8 f808 	bl	8000298 <__aeabi_dsub>
 8008288:	4602      	mov	r2, r0
 800828a:	460b      	mov	r3, r1
 800828c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008290:	462a      	mov	r2, r5
 8008292:	4633      	mov	r3, r6
 8008294:	f7f8 fc48 	bl	8000b28 <__aeabi_dcmpgt>
 8008298:	2800      	cmp	r0, #0
 800829a:	f040 828b 	bne.w	80087b4 <_dtoa_r+0x93c>
 800829e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082a2:	462a      	mov	r2, r5
 80082a4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80082a8:	f7f8 fc20 	bl	8000aec <__aeabi_dcmplt>
 80082ac:	2800      	cmp	r0, #0
 80082ae:	f040 8128 	bne.w	8008502 <_dtoa_r+0x68a>
 80082b2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80082b6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80082ba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80082bc:	2b00      	cmp	r3, #0
 80082be:	f2c0 815a 	blt.w	8008576 <_dtoa_r+0x6fe>
 80082c2:	2f0e      	cmp	r7, #14
 80082c4:	f300 8157 	bgt.w	8008576 <_dtoa_r+0x6fe>
 80082c8:	4b5a      	ldr	r3, [pc, #360]	@ (8008434 <_dtoa_r+0x5bc>)
 80082ca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80082ce:	ed93 7b00 	vldr	d7, [r3]
 80082d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	ed8d 7b00 	vstr	d7, [sp]
 80082da:	da03      	bge.n	80082e4 <_dtoa_r+0x46c>
 80082dc:	9b07      	ldr	r3, [sp, #28]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	f340 8101 	ble.w	80084e6 <_dtoa_r+0x66e>
 80082e4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80082e8:	4656      	mov	r6, sl
 80082ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082ee:	4620      	mov	r0, r4
 80082f0:	4629      	mov	r1, r5
 80082f2:	f7f8 fab3 	bl	800085c <__aeabi_ddiv>
 80082f6:	f7f8 fc37 	bl	8000b68 <__aeabi_d2iz>
 80082fa:	4680      	mov	r8, r0
 80082fc:	f7f8 f91a 	bl	8000534 <__aeabi_i2d>
 8008300:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008304:	f7f8 f980 	bl	8000608 <__aeabi_dmul>
 8008308:	4602      	mov	r2, r0
 800830a:	460b      	mov	r3, r1
 800830c:	4620      	mov	r0, r4
 800830e:	4629      	mov	r1, r5
 8008310:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008314:	f7f7 ffc0 	bl	8000298 <__aeabi_dsub>
 8008318:	f806 4b01 	strb.w	r4, [r6], #1
 800831c:	9d07      	ldr	r5, [sp, #28]
 800831e:	eba6 040a 	sub.w	r4, r6, sl
 8008322:	42a5      	cmp	r5, r4
 8008324:	4602      	mov	r2, r0
 8008326:	460b      	mov	r3, r1
 8008328:	f040 8117 	bne.w	800855a <_dtoa_r+0x6e2>
 800832c:	f7f7 ffb6 	bl	800029c <__adddf3>
 8008330:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008334:	4604      	mov	r4, r0
 8008336:	460d      	mov	r5, r1
 8008338:	f7f8 fbf6 	bl	8000b28 <__aeabi_dcmpgt>
 800833c:	2800      	cmp	r0, #0
 800833e:	f040 80f9 	bne.w	8008534 <_dtoa_r+0x6bc>
 8008342:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008346:	4620      	mov	r0, r4
 8008348:	4629      	mov	r1, r5
 800834a:	f7f8 fbc5 	bl	8000ad8 <__aeabi_dcmpeq>
 800834e:	b118      	cbz	r0, 8008358 <_dtoa_r+0x4e0>
 8008350:	f018 0f01 	tst.w	r8, #1
 8008354:	f040 80ee 	bne.w	8008534 <_dtoa_r+0x6bc>
 8008358:	4649      	mov	r1, r9
 800835a:	4658      	mov	r0, fp
 800835c:	f000 fc90 	bl	8008c80 <_Bfree>
 8008360:	2300      	movs	r3, #0
 8008362:	7033      	strb	r3, [r6, #0]
 8008364:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008366:	3701      	adds	r7, #1
 8008368:	601f      	str	r7, [r3, #0]
 800836a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800836c:	2b00      	cmp	r3, #0
 800836e:	f000 831d 	beq.w	80089ac <_dtoa_r+0xb34>
 8008372:	601e      	str	r6, [r3, #0]
 8008374:	e31a      	b.n	80089ac <_dtoa_r+0xb34>
 8008376:	07e2      	lsls	r2, r4, #31
 8008378:	d505      	bpl.n	8008386 <_dtoa_r+0x50e>
 800837a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800837e:	f7f8 f943 	bl	8000608 <__aeabi_dmul>
 8008382:	3601      	adds	r6, #1
 8008384:	2301      	movs	r3, #1
 8008386:	1064      	asrs	r4, r4, #1
 8008388:	3508      	adds	r5, #8
 800838a:	e73f      	b.n	800820c <_dtoa_r+0x394>
 800838c:	2602      	movs	r6, #2
 800838e:	e742      	b.n	8008216 <_dtoa_r+0x39e>
 8008390:	9c07      	ldr	r4, [sp, #28]
 8008392:	9704      	str	r7, [sp, #16]
 8008394:	e761      	b.n	800825a <_dtoa_r+0x3e2>
 8008396:	4b27      	ldr	r3, [pc, #156]	@ (8008434 <_dtoa_r+0x5bc>)
 8008398:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800839a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800839e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80083a2:	4454      	add	r4, sl
 80083a4:	2900      	cmp	r1, #0
 80083a6:	d053      	beq.n	8008450 <_dtoa_r+0x5d8>
 80083a8:	4928      	ldr	r1, [pc, #160]	@ (800844c <_dtoa_r+0x5d4>)
 80083aa:	2000      	movs	r0, #0
 80083ac:	f7f8 fa56 	bl	800085c <__aeabi_ddiv>
 80083b0:	4633      	mov	r3, r6
 80083b2:	462a      	mov	r2, r5
 80083b4:	f7f7 ff70 	bl	8000298 <__aeabi_dsub>
 80083b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80083bc:	4656      	mov	r6, sl
 80083be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083c2:	f7f8 fbd1 	bl	8000b68 <__aeabi_d2iz>
 80083c6:	4605      	mov	r5, r0
 80083c8:	f7f8 f8b4 	bl	8000534 <__aeabi_i2d>
 80083cc:	4602      	mov	r2, r0
 80083ce:	460b      	mov	r3, r1
 80083d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083d4:	f7f7 ff60 	bl	8000298 <__aeabi_dsub>
 80083d8:	3530      	adds	r5, #48	@ 0x30
 80083da:	4602      	mov	r2, r0
 80083dc:	460b      	mov	r3, r1
 80083de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80083e2:	f806 5b01 	strb.w	r5, [r6], #1
 80083e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80083ea:	f7f8 fb7f 	bl	8000aec <__aeabi_dcmplt>
 80083ee:	2800      	cmp	r0, #0
 80083f0:	d171      	bne.n	80084d6 <_dtoa_r+0x65e>
 80083f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80083f6:	4911      	ldr	r1, [pc, #68]	@ (800843c <_dtoa_r+0x5c4>)
 80083f8:	2000      	movs	r0, #0
 80083fa:	f7f7 ff4d 	bl	8000298 <__aeabi_dsub>
 80083fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008402:	f7f8 fb73 	bl	8000aec <__aeabi_dcmplt>
 8008406:	2800      	cmp	r0, #0
 8008408:	f040 8095 	bne.w	8008536 <_dtoa_r+0x6be>
 800840c:	42a6      	cmp	r6, r4
 800840e:	f43f af50 	beq.w	80082b2 <_dtoa_r+0x43a>
 8008412:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008416:	4b0a      	ldr	r3, [pc, #40]	@ (8008440 <_dtoa_r+0x5c8>)
 8008418:	2200      	movs	r2, #0
 800841a:	f7f8 f8f5 	bl	8000608 <__aeabi_dmul>
 800841e:	4b08      	ldr	r3, [pc, #32]	@ (8008440 <_dtoa_r+0x5c8>)
 8008420:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008424:	2200      	movs	r2, #0
 8008426:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800842a:	f7f8 f8ed 	bl	8000608 <__aeabi_dmul>
 800842e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008432:	e7c4      	b.n	80083be <_dtoa_r+0x546>
 8008434:	08009fe0 	.word	0x08009fe0
 8008438:	08009fb8 	.word	0x08009fb8
 800843c:	3ff00000 	.word	0x3ff00000
 8008440:	40240000 	.word	0x40240000
 8008444:	401c0000 	.word	0x401c0000
 8008448:	40140000 	.word	0x40140000
 800844c:	3fe00000 	.word	0x3fe00000
 8008450:	4631      	mov	r1, r6
 8008452:	4628      	mov	r0, r5
 8008454:	f7f8 f8d8 	bl	8000608 <__aeabi_dmul>
 8008458:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800845c:	9415      	str	r4, [sp, #84]	@ 0x54
 800845e:	4656      	mov	r6, sl
 8008460:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008464:	f7f8 fb80 	bl	8000b68 <__aeabi_d2iz>
 8008468:	4605      	mov	r5, r0
 800846a:	f7f8 f863 	bl	8000534 <__aeabi_i2d>
 800846e:	4602      	mov	r2, r0
 8008470:	460b      	mov	r3, r1
 8008472:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008476:	f7f7 ff0f 	bl	8000298 <__aeabi_dsub>
 800847a:	3530      	adds	r5, #48	@ 0x30
 800847c:	f806 5b01 	strb.w	r5, [r6], #1
 8008480:	4602      	mov	r2, r0
 8008482:	460b      	mov	r3, r1
 8008484:	42a6      	cmp	r6, r4
 8008486:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800848a:	f04f 0200 	mov.w	r2, #0
 800848e:	d124      	bne.n	80084da <_dtoa_r+0x662>
 8008490:	4bac      	ldr	r3, [pc, #688]	@ (8008744 <_dtoa_r+0x8cc>)
 8008492:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008496:	f7f7 ff01 	bl	800029c <__adddf3>
 800849a:	4602      	mov	r2, r0
 800849c:	460b      	mov	r3, r1
 800849e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084a2:	f7f8 fb41 	bl	8000b28 <__aeabi_dcmpgt>
 80084a6:	2800      	cmp	r0, #0
 80084a8:	d145      	bne.n	8008536 <_dtoa_r+0x6be>
 80084aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80084ae:	49a5      	ldr	r1, [pc, #660]	@ (8008744 <_dtoa_r+0x8cc>)
 80084b0:	2000      	movs	r0, #0
 80084b2:	f7f7 fef1 	bl	8000298 <__aeabi_dsub>
 80084b6:	4602      	mov	r2, r0
 80084b8:	460b      	mov	r3, r1
 80084ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084be:	f7f8 fb15 	bl	8000aec <__aeabi_dcmplt>
 80084c2:	2800      	cmp	r0, #0
 80084c4:	f43f aef5 	beq.w	80082b2 <_dtoa_r+0x43a>
 80084c8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80084ca:	1e73      	subs	r3, r6, #1
 80084cc:	9315      	str	r3, [sp, #84]	@ 0x54
 80084ce:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80084d2:	2b30      	cmp	r3, #48	@ 0x30
 80084d4:	d0f8      	beq.n	80084c8 <_dtoa_r+0x650>
 80084d6:	9f04      	ldr	r7, [sp, #16]
 80084d8:	e73e      	b.n	8008358 <_dtoa_r+0x4e0>
 80084da:	4b9b      	ldr	r3, [pc, #620]	@ (8008748 <_dtoa_r+0x8d0>)
 80084dc:	f7f8 f894 	bl	8000608 <__aeabi_dmul>
 80084e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084e4:	e7bc      	b.n	8008460 <_dtoa_r+0x5e8>
 80084e6:	d10c      	bne.n	8008502 <_dtoa_r+0x68a>
 80084e8:	4b98      	ldr	r3, [pc, #608]	@ (800874c <_dtoa_r+0x8d4>)
 80084ea:	2200      	movs	r2, #0
 80084ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084f0:	f7f8 f88a 	bl	8000608 <__aeabi_dmul>
 80084f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80084f8:	f7f8 fb0c 	bl	8000b14 <__aeabi_dcmpge>
 80084fc:	2800      	cmp	r0, #0
 80084fe:	f000 8157 	beq.w	80087b0 <_dtoa_r+0x938>
 8008502:	2400      	movs	r4, #0
 8008504:	4625      	mov	r5, r4
 8008506:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008508:	43db      	mvns	r3, r3
 800850a:	9304      	str	r3, [sp, #16]
 800850c:	4656      	mov	r6, sl
 800850e:	2700      	movs	r7, #0
 8008510:	4621      	mov	r1, r4
 8008512:	4658      	mov	r0, fp
 8008514:	f000 fbb4 	bl	8008c80 <_Bfree>
 8008518:	2d00      	cmp	r5, #0
 800851a:	d0dc      	beq.n	80084d6 <_dtoa_r+0x65e>
 800851c:	b12f      	cbz	r7, 800852a <_dtoa_r+0x6b2>
 800851e:	42af      	cmp	r7, r5
 8008520:	d003      	beq.n	800852a <_dtoa_r+0x6b2>
 8008522:	4639      	mov	r1, r7
 8008524:	4658      	mov	r0, fp
 8008526:	f000 fbab 	bl	8008c80 <_Bfree>
 800852a:	4629      	mov	r1, r5
 800852c:	4658      	mov	r0, fp
 800852e:	f000 fba7 	bl	8008c80 <_Bfree>
 8008532:	e7d0      	b.n	80084d6 <_dtoa_r+0x65e>
 8008534:	9704      	str	r7, [sp, #16]
 8008536:	4633      	mov	r3, r6
 8008538:	461e      	mov	r6, r3
 800853a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800853e:	2a39      	cmp	r2, #57	@ 0x39
 8008540:	d107      	bne.n	8008552 <_dtoa_r+0x6da>
 8008542:	459a      	cmp	sl, r3
 8008544:	d1f8      	bne.n	8008538 <_dtoa_r+0x6c0>
 8008546:	9a04      	ldr	r2, [sp, #16]
 8008548:	3201      	adds	r2, #1
 800854a:	9204      	str	r2, [sp, #16]
 800854c:	2230      	movs	r2, #48	@ 0x30
 800854e:	f88a 2000 	strb.w	r2, [sl]
 8008552:	781a      	ldrb	r2, [r3, #0]
 8008554:	3201      	adds	r2, #1
 8008556:	701a      	strb	r2, [r3, #0]
 8008558:	e7bd      	b.n	80084d6 <_dtoa_r+0x65e>
 800855a:	4b7b      	ldr	r3, [pc, #492]	@ (8008748 <_dtoa_r+0x8d0>)
 800855c:	2200      	movs	r2, #0
 800855e:	f7f8 f853 	bl	8000608 <__aeabi_dmul>
 8008562:	2200      	movs	r2, #0
 8008564:	2300      	movs	r3, #0
 8008566:	4604      	mov	r4, r0
 8008568:	460d      	mov	r5, r1
 800856a:	f7f8 fab5 	bl	8000ad8 <__aeabi_dcmpeq>
 800856e:	2800      	cmp	r0, #0
 8008570:	f43f aebb 	beq.w	80082ea <_dtoa_r+0x472>
 8008574:	e6f0      	b.n	8008358 <_dtoa_r+0x4e0>
 8008576:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008578:	2a00      	cmp	r2, #0
 800857a:	f000 80db 	beq.w	8008734 <_dtoa_r+0x8bc>
 800857e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008580:	2a01      	cmp	r2, #1
 8008582:	f300 80bf 	bgt.w	8008704 <_dtoa_r+0x88c>
 8008586:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008588:	2a00      	cmp	r2, #0
 800858a:	f000 80b7 	beq.w	80086fc <_dtoa_r+0x884>
 800858e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008592:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008594:	4646      	mov	r6, r8
 8008596:	9a08      	ldr	r2, [sp, #32]
 8008598:	2101      	movs	r1, #1
 800859a:	441a      	add	r2, r3
 800859c:	4658      	mov	r0, fp
 800859e:	4498      	add	r8, r3
 80085a0:	9208      	str	r2, [sp, #32]
 80085a2:	f000 fc21 	bl	8008de8 <__i2b>
 80085a6:	4605      	mov	r5, r0
 80085a8:	b15e      	cbz	r6, 80085c2 <_dtoa_r+0x74a>
 80085aa:	9b08      	ldr	r3, [sp, #32]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	dd08      	ble.n	80085c2 <_dtoa_r+0x74a>
 80085b0:	42b3      	cmp	r3, r6
 80085b2:	9a08      	ldr	r2, [sp, #32]
 80085b4:	bfa8      	it	ge
 80085b6:	4633      	movge	r3, r6
 80085b8:	eba8 0803 	sub.w	r8, r8, r3
 80085bc:	1af6      	subs	r6, r6, r3
 80085be:	1ad3      	subs	r3, r2, r3
 80085c0:	9308      	str	r3, [sp, #32]
 80085c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085c4:	b1f3      	cbz	r3, 8008604 <_dtoa_r+0x78c>
 80085c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	f000 80b7 	beq.w	800873c <_dtoa_r+0x8c4>
 80085ce:	b18c      	cbz	r4, 80085f4 <_dtoa_r+0x77c>
 80085d0:	4629      	mov	r1, r5
 80085d2:	4622      	mov	r2, r4
 80085d4:	4658      	mov	r0, fp
 80085d6:	f000 fcc7 	bl	8008f68 <__pow5mult>
 80085da:	464a      	mov	r2, r9
 80085dc:	4601      	mov	r1, r0
 80085de:	4605      	mov	r5, r0
 80085e0:	4658      	mov	r0, fp
 80085e2:	f000 fc17 	bl	8008e14 <__multiply>
 80085e6:	4649      	mov	r1, r9
 80085e8:	9004      	str	r0, [sp, #16]
 80085ea:	4658      	mov	r0, fp
 80085ec:	f000 fb48 	bl	8008c80 <_Bfree>
 80085f0:	9b04      	ldr	r3, [sp, #16]
 80085f2:	4699      	mov	r9, r3
 80085f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085f6:	1b1a      	subs	r2, r3, r4
 80085f8:	d004      	beq.n	8008604 <_dtoa_r+0x78c>
 80085fa:	4649      	mov	r1, r9
 80085fc:	4658      	mov	r0, fp
 80085fe:	f000 fcb3 	bl	8008f68 <__pow5mult>
 8008602:	4681      	mov	r9, r0
 8008604:	2101      	movs	r1, #1
 8008606:	4658      	mov	r0, fp
 8008608:	f000 fbee 	bl	8008de8 <__i2b>
 800860c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800860e:	4604      	mov	r4, r0
 8008610:	2b00      	cmp	r3, #0
 8008612:	f000 81cf 	beq.w	80089b4 <_dtoa_r+0xb3c>
 8008616:	461a      	mov	r2, r3
 8008618:	4601      	mov	r1, r0
 800861a:	4658      	mov	r0, fp
 800861c:	f000 fca4 	bl	8008f68 <__pow5mult>
 8008620:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008622:	2b01      	cmp	r3, #1
 8008624:	4604      	mov	r4, r0
 8008626:	f300 8095 	bgt.w	8008754 <_dtoa_r+0x8dc>
 800862a:	9b02      	ldr	r3, [sp, #8]
 800862c:	2b00      	cmp	r3, #0
 800862e:	f040 8087 	bne.w	8008740 <_dtoa_r+0x8c8>
 8008632:	9b03      	ldr	r3, [sp, #12]
 8008634:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008638:	2b00      	cmp	r3, #0
 800863a:	f040 8089 	bne.w	8008750 <_dtoa_r+0x8d8>
 800863e:	9b03      	ldr	r3, [sp, #12]
 8008640:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008644:	0d1b      	lsrs	r3, r3, #20
 8008646:	051b      	lsls	r3, r3, #20
 8008648:	b12b      	cbz	r3, 8008656 <_dtoa_r+0x7de>
 800864a:	9b08      	ldr	r3, [sp, #32]
 800864c:	3301      	adds	r3, #1
 800864e:	9308      	str	r3, [sp, #32]
 8008650:	f108 0801 	add.w	r8, r8, #1
 8008654:	2301      	movs	r3, #1
 8008656:	930a      	str	r3, [sp, #40]	@ 0x28
 8008658:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800865a:	2b00      	cmp	r3, #0
 800865c:	f000 81b0 	beq.w	80089c0 <_dtoa_r+0xb48>
 8008660:	6923      	ldr	r3, [r4, #16]
 8008662:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008666:	6918      	ldr	r0, [r3, #16]
 8008668:	f000 fb72 	bl	8008d50 <__hi0bits>
 800866c:	f1c0 0020 	rsb	r0, r0, #32
 8008670:	9b08      	ldr	r3, [sp, #32]
 8008672:	4418      	add	r0, r3
 8008674:	f010 001f 	ands.w	r0, r0, #31
 8008678:	d077      	beq.n	800876a <_dtoa_r+0x8f2>
 800867a:	f1c0 0320 	rsb	r3, r0, #32
 800867e:	2b04      	cmp	r3, #4
 8008680:	dd6b      	ble.n	800875a <_dtoa_r+0x8e2>
 8008682:	9b08      	ldr	r3, [sp, #32]
 8008684:	f1c0 001c 	rsb	r0, r0, #28
 8008688:	4403      	add	r3, r0
 800868a:	4480      	add	r8, r0
 800868c:	4406      	add	r6, r0
 800868e:	9308      	str	r3, [sp, #32]
 8008690:	f1b8 0f00 	cmp.w	r8, #0
 8008694:	dd05      	ble.n	80086a2 <_dtoa_r+0x82a>
 8008696:	4649      	mov	r1, r9
 8008698:	4642      	mov	r2, r8
 800869a:	4658      	mov	r0, fp
 800869c:	f000 fcbe 	bl	800901c <__lshift>
 80086a0:	4681      	mov	r9, r0
 80086a2:	9b08      	ldr	r3, [sp, #32]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	dd05      	ble.n	80086b4 <_dtoa_r+0x83c>
 80086a8:	4621      	mov	r1, r4
 80086aa:	461a      	mov	r2, r3
 80086ac:	4658      	mov	r0, fp
 80086ae:	f000 fcb5 	bl	800901c <__lshift>
 80086b2:	4604      	mov	r4, r0
 80086b4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d059      	beq.n	800876e <_dtoa_r+0x8f6>
 80086ba:	4621      	mov	r1, r4
 80086bc:	4648      	mov	r0, r9
 80086be:	f000 fd19 	bl	80090f4 <__mcmp>
 80086c2:	2800      	cmp	r0, #0
 80086c4:	da53      	bge.n	800876e <_dtoa_r+0x8f6>
 80086c6:	1e7b      	subs	r3, r7, #1
 80086c8:	9304      	str	r3, [sp, #16]
 80086ca:	4649      	mov	r1, r9
 80086cc:	2300      	movs	r3, #0
 80086ce:	220a      	movs	r2, #10
 80086d0:	4658      	mov	r0, fp
 80086d2:	f000 faf7 	bl	8008cc4 <__multadd>
 80086d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80086d8:	4681      	mov	r9, r0
 80086da:	2b00      	cmp	r3, #0
 80086dc:	f000 8172 	beq.w	80089c4 <_dtoa_r+0xb4c>
 80086e0:	2300      	movs	r3, #0
 80086e2:	4629      	mov	r1, r5
 80086e4:	220a      	movs	r2, #10
 80086e6:	4658      	mov	r0, fp
 80086e8:	f000 faec 	bl	8008cc4 <__multadd>
 80086ec:	9b00      	ldr	r3, [sp, #0]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	4605      	mov	r5, r0
 80086f2:	dc67      	bgt.n	80087c4 <_dtoa_r+0x94c>
 80086f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086f6:	2b02      	cmp	r3, #2
 80086f8:	dc41      	bgt.n	800877e <_dtoa_r+0x906>
 80086fa:	e063      	b.n	80087c4 <_dtoa_r+0x94c>
 80086fc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80086fe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008702:	e746      	b.n	8008592 <_dtoa_r+0x71a>
 8008704:	9b07      	ldr	r3, [sp, #28]
 8008706:	1e5c      	subs	r4, r3, #1
 8008708:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800870a:	42a3      	cmp	r3, r4
 800870c:	bfbf      	itttt	lt
 800870e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008710:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008712:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008714:	1ae3      	sublt	r3, r4, r3
 8008716:	bfb4      	ite	lt
 8008718:	18d2      	addlt	r2, r2, r3
 800871a:	1b1c      	subge	r4, r3, r4
 800871c:	9b07      	ldr	r3, [sp, #28]
 800871e:	bfbc      	itt	lt
 8008720:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008722:	2400      	movlt	r4, #0
 8008724:	2b00      	cmp	r3, #0
 8008726:	bfb5      	itete	lt
 8008728:	eba8 0603 	sublt.w	r6, r8, r3
 800872c:	9b07      	ldrge	r3, [sp, #28]
 800872e:	2300      	movlt	r3, #0
 8008730:	4646      	movge	r6, r8
 8008732:	e730      	b.n	8008596 <_dtoa_r+0x71e>
 8008734:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008736:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008738:	4646      	mov	r6, r8
 800873a:	e735      	b.n	80085a8 <_dtoa_r+0x730>
 800873c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800873e:	e75c      	b.n	80085fa <_dtoa_r+0x782>
 8008740:	2300      	movs	r3, #0
 8008742:	e788      	b.n	8008656 <_dtoa_r+0x7de>
 8008744:	3fe00000 	.word	0x3fe00000
 8008748:	40240000 	.word	0x40240000
 800874c:	40140000 	.word	0x40140000
 8008750:	9b02      	ldr	r3, [sp, #8]
 8008752:	e780      	b.n	8008656 <_dtoa_r+0x7de>
 8008754:	2300      	movs	r3, #0
 8008756:	930a      	str	r3, [sp, #40]	@ 0x28
 8008758:	e782      	b.n	8008660 <_dtoa_r+0x7e8>
 800875a:	d099      	beq.n	8008690 <_dtoa_r+0x818>
 800875c:	9a08      	ldr	r2, [sp, #32]
 800875e:	331c      	adds	r3, #28
 8008760:	441a      	add	r2, r3
 8008762:	4498      	add	r8, r3
 8008764:	441e      	add	r6, r3
 8008766:	9208      	str	r2, [sp, #32]
 8008768:	e792      	b.n	8008690 <_dtoa_r+0x818>
 800876a:	4603      	mov	r3, r0
 800876c:	e7f6      	b.n	800875c <_dtoa_r+0x8e4>
 800876e:	9b07      	ldr	r3, [sp, #28]
 8008770:	9704      	str	r7, [sp, #16]
 8008772:	2b00      	cmp	r3, #0
 8008774:	dc20      	bgt.n	80087b8 <_dtoa_r+0x940>
 8008776:	9300      	str	r3, [sp, #0]
 8008778:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800877a:	2b02      	cmp	r3, #2
 800877c:	dd1e      	ble.n	80087bc <_dtoa_r+0x944>
 800877e:	9b00      	ldr	r3, [sp, #0]
 8008780:	2b00      	cmp	r3, #0
 8008782:	f47f aec0 	bne.w	8008506 <_dtoa_r+0x68e>
 8008786:	4621      	mov	r1, r4
 8008788:	2205      	movs	r2, #5
 800878a:	4658      	mov	r0, fp
 800878c:	f000 fa9a 	bl	8008cc4 <__multadd>
 8008790:	4601      	mov	r1, r0
 8008792:	4604      	mov	r4, r0
 8008794:	4648      	mov	r0, r9
 8008796:	f000 fcad 	bl	80090f4 <__mcmp>
 800879a:	2800      	cmp	r0, #0
 800879c:	f77f aeb3 	ble.w	8008506 <_dtoa_r+0x68e>
 80087a0:	4656      	mov	r6, sl
 80087a2:	2331      	movs	r3, #49	@ 0x31
 80087a4:	f806 3b01 	strb.w	r3, [r6], #1
 80087a8:	9b04      	ldr	r3, [sp, #16]
 80087aa:	3301      	adds	r3, #1
 80087ac:	9304      	str	r3, [sp, #16]
 80087ae:	e6ae      	b.n	800850e <_dtoa_r+0x696>
 80087b0:	9c07      	ldr	r4, [sp, #28]
 80087b2:	9704      	str	r7, [sp, #16]
 80087b4:	4625      	mov	r5, r4
 80087b6:	e7f3      	b.n	80087a0 <_dtoa_r+0x928>
 80087b8:	9b07      	ldr	r3, [sp, #28]
 80087ba:	9300      	str	r3, [sp, #0]
 80087bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80087be:	2b00      	cmp	r3, #0
 80087c0:	f000 8104 	beq.w	80089cc <_dtoa_r+0xb54>
 80087c4:	2e00      	cmp	r6, #0
 80087c6:	dd05      	ble.n	80087d4 <_dtoa_r+0x95c>
 80087c8:	4629      	mov	r1, r5
 80087ca:	4632      	mov	r2, r6
 80087cc:	4658      	mov	r0, fp
 80087ce:	f000 fc25 	bl	800901c <__lshift>
 80087d2:	4605      	mov	r5, r0
 80087d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d05a      	beq.n	8008890 <_dtoa_r+0xa18>
 80087da:	6869      	ldr	r1, [r5, #4]
 80087dc:	4658      	mov	r0, fp
 80087de:	f000 fa0f 	bl	8008c00 <_Balloc>
 80087e2:	4606      	mov	r6, r0
 80087e4:	b928      	cbnz	r0, 80087f2 <_dtoa_r+0x97a>
 80087e6:	4b84      	ldr	r3, [pc, #528]	@ (80089f8 <_dtoa_r+0xb80>)
 80087e8:	4602      	mov	r2, r0
 80087ea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80087ee:	f7ff bb5a 	b.w	8007ea6 <_dtoa_r+0x2e>
 80087f2:	692a      	ldr	r2, [r5, #16]
 80087f4:	3202      	adds	r2, #2
 80087f6:	0092      	lsls	r2, r2, #2
 80087f8:	f105 010c 	add.w	r1, r5, #12
 80087fc:	300c      	adds	r0, #12
 80087fe:	f000 ffaf 	bl	8009760 <memcpy>
 8008802:	2201      	movs	r2, #1
 8008804:	4631      	mov	r1, r6
 8008806:	4658      	mov	r0, fp
 8008808:	f000 fc08 	bl	800901c <__lshift>
 800880c:	f10a 0301 	add.w	r3, sl, #1
 8008810:	9307      	str	r3, [sp, #28]
 8008812:	9b00      	ldr	r3, [sp, #0]
 8008814:	4453      	add	r3, sl
 8008816:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008818:	9b02      	ldr	r3, [sp, #8]
 800881a:	f003 0301 	and.w	r3, r3, #1
 800881e:	462f      	mov	r7, r5
 8008820:	930a      	str	r3, [sp, #40]	@ 0x28
 8008822:	4605      	mov	r5, r0
 8008824:	9b07      	ldr	r3, [sp, #28]
 8008826:	4621      	mov	r1, r4
 8008828:	3b01      	subs	r3, #1
 800882a:	4648      	mov	r0, r9
 800882c:	9300      	str	r3, [sp, #0]
 800882e:	f7ff fa98 	bl	8007d62 <quorem>
 8008832:	4639      	mov	r1, r7
 8008834:	9002      	str	r0, [sp, #8]
 8008836:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800883a:	4648      	mov	r0, r9
 800883c:	f000 fc5a 	bl	80090f4 <__mcmp>
 8008840:	462a      	mov	r2, r5
 8008842:	9008      	str	r0, [sp, #32]
 8008844:	4621      	mov	r1, r4
 8008846:	4658      	mov	r0, fp
 8008848:	f000 fc70 	bl	800912c <__mdiff>
 800884c:	68c2      	ldr	r2, [r0, #12]
 800884e:	4606      	mov	r6, r0
 8008850:	bb02      	cbnz	r2, 8008894 <_dtoa_r+0xa1c>
 8008852:	4601      	mov	r1, r0
 8008854:	4648      	mov	r0, r9
 8008856:	f000 fc4d 	bl	80090f4 <__mcmp>
 800885a:	4602      	mov	r2, r0
 800885c:	4631      	mov	r1, r6
 800885e:	4658      	mov	r0, fp
 8008860:	920e      	str	r2, [sp, #56]	@ 0x38
 8008862:	f000 fa0d 	bl	8008c80 <_Bfree>
 8008866:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008868:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800886a:	9e07      	ldr	r6, [sp, #28]
 800886c:	ea43 0102 	orr.w	r1, r3, r2
 8008870:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008872:	4319      	orrs	r1, r3
 8008874:	d110      	bne.n	8008898 <_dtoa_r+0xa20>
 8008876:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800887a:	d029      	beq.n	80088d0 <_dtoa_r+0xa58>
 800887c:	9b08      	ldr	r3, [sp, #32]
 800887e:	2b00      	cmp	r3, #0
 8008880:	dd02      	ble.n	8008888 <_dtoa_r+0xa10>
 8008882:	9b02      	ldr	r3, [sp, #8]
 8008884:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008888:	9b00      	ldr	r3, [sp, #0]
 800888a:	f883 8000 	strb.w	r8, [r3]
 800888e:	e63f      	b.n	8008510 <_dtoa_r+0x698>
 8008890:	4628      	mov	r0, r5
 8008892:	e7bb      	b.n	800880c <_dtoa_r+0x994>
 8008894:	2201      	movs	r2, #1
 8008896:	e7e1      	b.n	800885c <_dtoa_r+0x9e4>
 8008898:	9b08      	ldr	r3, [sp, #32]
 800889a:	2b00      	cmp	r3, #0
 800889c:	db04      	blt.n	80088a8 <_dtoa_r+0xa30>
 800889e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80088a0:	430b      	orrs	r3, r1
 80088a2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80088a4:	430b      	orrs	r3, r1
 80088a6:	d120      	bne.n	80088ea <_dtoa_r+0xa72>
 80088a8:	2a00      	cmp	r2, #0
 80088aa:	dded      	ble.n	8008888 <_dtoa_r+0xa10>
 80088ac:	4649      	mov	r1, r9
 80088ae:	2201      	movs	r2, #1
 80088b0:	4658      	mov	r0, fp
 80088b2:	f000 fbb3 	bl	800901c <__lshift>
 80088b6:	4621      	mov	r1, r4
 80088b8:	4681      	mov	r9, r0
 80088ba:	f000 fc1b 	bl	80090f4 <__mcmp>
 80088be:	2800      	cmp	r0, #0
 80088c0:	dc03      	bgt.n	80088ca <_dtoa_r+0xa52>
 80088c2:	d1e1      	bne.n	8008888 <_dtoa_r+0xa10>
 80088c4:	f018 0f01 	tst.w	r8, #1
 80088c8:	d0de      	beq.n	8008888 <_dtoa_r+0xa10>
 80088ca:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80088ce:	d1d8      	bne.n	8008882 <_dtoa_r+0xa0a>
 80088d0:	9a00      	ldr	r2, [sp, #0]
 80088d2:	2339      	movs	r3, #57	@ 0x39
 80088d4:	7013      	strb	r3, [r2, #0]
 80088d6:	4633      	mov	r3, r6
 80088d8:	461e      	mov	r6, r3
 80088da:	3b01      	subs	r3, #1
 80088dc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80088e0:	2a39      	cmp	r2, #57	@ 0x39
 80088e2:	d052      	beq.n	800898a <_dtoa_r+0xb12>
 80088e4:	3201      	adds	r2, #1
 80088e6:	701a      	strb	r2, [r3, #0]
 80088e8:	e612      	b.n	8008510 <_dtoa_r+0x698>
 80088ea:	2a00      	cmp	r2, #0
 80088ec:	dd07      	ble.n	80088fe <_dtoa_r+0xa86>
 80088ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80088f2:	d0ed      	beq.n	80088d0 <_dtoa_r+0xa58>
 80088f4:	9a00      	ldr	r2, [sp, #0]
 80088f6:	f108 0301 	add.w	r3, r8, #1
 80088fa:	7013      	strb	r3, [r2, #0]
 80088fc:	e608      	b.n	8008510 <_dtoa_r+0x698>
 80088fe:	9b07      	ldr	r3, [sp, #28]
 8008900:	9a07      	ldr	r2, [sp, #28]
 8008902:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008906:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008908:	4293      	cmp	r3, r2
 800890a:	d028      	beq.n	800895e <_dtoa_r+0xae6>
 800890c:	4649      	mov	r1, r9
 800890e:	2300      	movs	r3, #0
 8008910:	220a      	movs	r2, #10
 8008912:	4658      	mov	r0, fp
 8008914:	f000 f9d6 	bl	8008cc4 <__multadd>
 8008918:	42af      	cmp	r7, r5
 800891a:	4681      	mov	r9, r0
 800891c:	f04f 0300 	mov.w	r3, #0
 8008920:	f04f 020a 	mov.w	r2, #10
 8008924:	4639      	mov	r1, r7
 8008926:	4658      	mov	r0, fp
 8008928:	d107      	bne.n	800893a <_dtoa_r+0xac2>
 800892a:	f000 f9cb 	bl	8008cc4 <__multadd>
 800892e:	4607      	mov	r7, r0
 8008930:	4605      	mov	r5, r0
 8008932:	9b07      	ldr	r3, [sp, #28]
 8008934:	3301      	adds	r3, #1
 8008936:	9307      	str	r3, [sp, #28]
 8008938:	e774      	b.n	8008824 <_dtoa_r+0x9ac>
 800893a:	f000 f9c3 	bl	8008cc4 <__multadd>
 800893e:	4629      	mov	r1, r5
 8008940:	4607      	mov	r7, r0
 8008942:	2300      	movs	r3, #0
 8008944:	220a      	movs	r2, #10
 8008946:	4658      	mov	r0, fp
 8008948:	f000 f9bc 	bl	8008cc4 <__multadd>
 800894c:	4605      	mov	r5, r0
 800894e:	e7f0      	b.n	8008932 <_dtoa_r+0xaba>
 8008950:	9b00      	ldr	r3, [sp, #0]
 8008952:	2b00      	cmp	r3, #0
 8008954:	bfcc      	ite	gt
 8008956:	461e      	movgt	r6, r3
 8008958:	2601      	movle	r6, #1
 800895a:	4456      	add	r6, sl
 800895c:	2700      	movs	r7, #0
 800895e:	4649      	mov	r1, r9
 8008960:	2201      	movs	r2, #1
 8008962:	4658      	mov	r0, fp
 8008964:	f000 fb5a 	bl	800901c <__lshift>
 8008968:	4621      	mov	r1, r4
 800896a:	4681      	mov	r9, r0
 800896c:	f000 fbc2 	bl	80090f4 <__mcmp>
 8008970:	2800      	cmp	r0, #0
 8008972:	dcb0      	bgt.n	80088d6 <_dtoa_r+0xa5e>
 8008974:	d102      	bne.n	800897c <_dtoa_r+0xb04>
 8008976:	f018 0f01 	tst.w	r8, #1
 800897a:	d1ac      	bne.n	80088d6 <_dtoa_r+0xa5e>
 800897c:	4633      	mov	r3, r6
 800897e:	461e      	mov	r6, r3
 8008980:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008984:	2a30      	cmp	r2, #48	@ 0x30
 8008986:	d0fa      	beq.n	800897e <_dtoa_r+0xb06>
 8008988:	e5c2      	b.n	8008510 <_dtoa_r+0x698>
 800898a:	459a      	cmp	sl, r3
 800898c:	d1a4      	bne.n	80088d8 <_dtoa_r+0xa60>
 800898e:	9b04      	ldr	r3, [sp, #16]
 8008990:	3301      	adds	r3, #1
 8008992:	9304      	str	r3, [sp, #16]
 8008994:	2331      	movs	r3, #49	@ 0x31
 8008996:	f88a 3000 	strb.w	r3, [sl]
 800899a:	e5b9      	b.n	8008510 <_dtoa_r+0x698>
 800899c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800899e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80089fc <_dtoa_r+0xb84>
 80089a2:	b11b      	cbz	r3, 80089ac <_dtoa_r+0xb34>
 80089a4:	f10a 0308 	add.w	r3, sl, #8
 80089a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80089aa:	6013      	str	r3, [r2, #0]
 80089ac:	4650      	mov	r0, sl
 80089ae:	b019      	add	sp, #100	@ 0x64
 80089b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089b6:	2b01      	cmp	r3, #1
 80089b8:	f77f ae37 	ble.w	800862a <_dtoa_r+0x7b2>
 80089bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089be:	930a      	str	r3, [sp, #40]	@ 0x28
 80089c0:	2001      	movs	r0, #1
 80089c2:	e655      	b.n	8008670 <_dtoa_r+0x7f8>
 80089c4:	9b00      	ldr	r3, [sp, #0]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	f77f aed6 	ble.w	8008778 <_dtoa_r+0x900>
 80089cc:	4656      	mov	r6, sl
 80089ce:	4621      	mov	r1, r4
 80089d0:	4648      	mov	r0, r9
 80089d2:	f7ff f9c6 	bl	8007d62 <quorem>
 80089d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80089da:	f806 8b01 	strb.w	r8, [r6], #1
 80089de:	9b00      	ldr	r3, [sp, #0]
 80089e0:	eba6 020a 	sub.w	r2, r6, sl
 80089e4:	4293      	cmp	r3, r2
 80089e6:	ddb3      	ble.n	8008950 <_dtoa_r+0xad8>
 80089e8:	4649      	mov	r1, r9
 80089ea:	2300      	movs	r3, #0
 80089ec:	220a      	movs	r2, #10
 80089ee:	4658      	mov	r0, fp
 80089f0:	f000 f968 	bl	8008cc4 <__multadd>
 80089f4:	4681      	mov	r9, r0
 80089f6:	e7ea      	b.n	80089ce <_dtoa_r+0xb56>
 80089f8:	08009f40 	.word	0x08009f40
 80089fc:	08009ec4 	.word	0x08009ec4

08008a00 <_free_r>:
 8008a00:	b538      	push	{r3, r4, r5, lr}
 8008a02:	4605      	mov	r5, r0
 8008a04:	2900      	cmp	r1, #0
 8008a06:	d041      	beq.n	8008a8c <_free_r+0x8c>
 8008a08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a0c:	1f0c      	subs	r4, r1, #4
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	bfb8      	it	lt
 8008a12:	18e4      	addlt	r4, r4, r3
 8008a14:	f000 f8e8 	bl	8008be8 <__malloc_lock>
 8008a18:	4a1d      	ldr	r2, [pc, #116]	@ (8008a90 <_free_r+0x90>)
 8008a1a:	6813      	ldr	r3, [r2, #0]
 8008a1c:	b933      	cbnz	r3, 8008a2c <_free_r+0x2c>
 8008a1e:	6063      	str	r3, [r4, #4]
 8008a20:	6014      	str	r4, [r2, #0]
 8008a22:	4628      	mov	r0, r5
 8008a24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a28:	f000 b8e4 	b.w	8008bf4 <__malloc_unlock>
 8008a2c:	42a3      	cmp	r3, r4
 8008a2e:	d908      	bls.n	8008a42 <_free_r+0x42>
 8008a30:	6820      	ldr	r0, [r4, #0]
 8008a32:	1821      	adds	r1, r4, r0
 8008a34:	428b      	cmp	r3, r1
 8008a36:	bf01      	itttt	eq
 8008a38:	6819      	ldreq	r1, [r3, #0]
 8008a3a:	685b      	ldreq	r3, [r3, #4]
 8008a3c:	1809      	addeq	r1, r1, r0
 8008a3e:	6021      	streq	r1, [r4, #0]
 8008a40:	e7ed      	b.n	8008a1e <_free_r+0x1e>
 8008a42:	461a      	mov	r2, r3
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	b10b      	cbz	r3, 8008a4c <_free_r+0x4c>
 8008a48:	42a3      	cmp	r3, r4
 8008a4a:	d9fa      	bls.n	8008a42 <_free_r+0x42>
 8008a4c:	6811      	ldr	r1, [r2, #0]
 8008a4e:	1850      	adds	r0, r2, r1
 8008a50:	42a0      	cmp	r0, r4
 8008a52:	d10b      	bne.n	8008a6c <_free_r+0x6c>
 8008a54:	6820      	ldr	r0, [r4, #0]
 8008a56:	4401      	add	r1, r0
 8008a58:	1850      	adds	r0, r2, r1
 8008a5a:	4283      	cmp	r3, r0
 8008a5c:	6011      	str	r1, [r2, #0]
 8008a5e:	d1e0      	bne.n	8008a22 <_free_r+0x22>
 8008a60:	6818      	ldr	r0, [r3, #0]
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	6053      	str	r3, [r2, #4]
 8008a66:	4408      	add	r0, r1
 8008a68:	6010      	str	r0, [r2, #0]
 8008a6a:	e7da      	b.n	8008a22 <_free_r+0x22>
 8008a6c:	d902      	bls.n	8008a74 <_free_r+0x74>
 8008a6e:	230c      	movs	r3, #12
 8008a70:	602b      	str	r3, [r5, #0]
 8008a72:	e7d6      	b.n	8008a22 <_free_r+0x22>
 8008a74:	6820      	ldr	r0, [r4, #0]
 8008a76:	1821      	adds	r1, r4, r0
 8008a78:	428b      	cmp	r3, r1
 8008a7a:	bf04      	itt	eq
 8008a7c:	6819      	ldreq	r1, [r3, #0]
 8008a7e:	685b      	ldreq	r3, [r3, #4]
 8008a80:	6063      	str	r3, [r4, #4]
 8008a82:	bf04      	itt	eq
 8008a84:	1809      	addeq	r1, r1, r0
 8008a86:	6021      	streq	r1, [r4, #0]
 8008a88:	6054      	str	r4, [r2, #4]
 8008a8a:	e7ca      	b.n	8008a22 <_free_r+0x22>
 8008a8c:	bd38      	pop	{r3, r4, r5, pc}
 8008a8e:	bf00      	nop
 8008a90:	200005d0 	.word	0x200005d0

08008a94 <malloc>:
 8008a94:	4b02      	ldr	r3, [pc, #8]	@ (8008aa0 <malloc+0xc>)
 8008a96:	4601      	mov	r1, r0
 8008a98:	6818      	ldr	r0, [r3, #0]
 8008a9a:	f000 b825 	b.w	8008ae8 <_malloc_r>
 8008a9e:	bf00      	nop
 8008aa0:	20000040 	.word	0x20000040

08008aa4 <sbrk_aligned>:
 8008aa4:	b570      	push	{r4, r5, r6, lr}
 8008aa6:	4e0f      	ldr	r6, [pc, #60]	@ (8008ae4 <sbrk_aligned+0x40>)
 8008aa8:	460c      	mov	r4, r1
 8008aaa:	6831      	ldr	r1, [r6, #0]
 8008aac:	4605      	mov	r5, r0
 8008aae:	b911      	cbnz	r1, 8008ab6 <sbrk_aligned+0x12>
 8008ab0:	f000 fe46 	bl	8009740 <_sbrk_r>
 8008ab4:	6030      	str	r0, [r6, #0]
 8008ab6:	4621      	mov	r1, r4
 8008ab8:	4628      	mov	r0, r5
 8008aba:	f000 fe41 	bl	8009740 <_sbrk_r>
 8008abe:	1c43      	adds	r3, r0, #1
 8008ac0:	d103      	bne.n	8008aca <sbrk_aligned+0x26>
 8008ac2:	f04f 34ff 	mov.w	r4, #4294967295
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	bd70      	pop	{r4, r5, r6, pc}
 8008aca:	1cc4      	adds	r4, r0, #3
 8008acc:	f024 0403 	bic.w	r4, r4, #3
 8008ad0:	42a0      	cmp	r0, r4
 8008ad2:	d0f8      	beq.n	8008ac6 <sbrk_aligned+0x22>
 8008ad4:	1a21      	subs	r1, r4, r0
 8008ad6:	4628      	mov	r0, r5
 8008ad8:	f000 fe32 	bl	8009740 <_sbrk_r>
 8008adc:	3001      	adds	r0, #1
 8008ade:	d1f2      	bne.n	8008ac6 <sbrk_aligned+0x22>
 8008ae0:	e7ef      	b.n	8008ac2 <sbrk_aligned+0x1e>
 8008ae2:	bf00      	nop
 8008ae4:	200005cc 	.word	0x200005cc

08008ae8 <_malloc_r>:
 8008ae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008aec:	1ccd      	adds	r5, r1, #3
 8008aee:	f025 0503 	bic.w	r5, r5, #3
 8008af2:	3508      	adds	r5, #8
 8008af4:	2d0c      	cmp	r5, #12
 8008af6:	bf38      	it	cc
 8008af8:	250c      	movcc	r5, #12
 8008afa:	2d00      	cmp	r5, #0
 8008afc:	4606      	mov	r6, r0
 8008afe:	db01      	blt.n	8008b04 <_malloc_r+0x1c>
 8008b00:	42a9      	cmp	r1, r5
 8008b02:	d904      	bls.n	8008b0e <_malloc_r+0x26>
 8008b04:	230c      	movs	r3, #12
 8008b06:	6033      	str	r3, [r6, #0]
 8008b08:	2000      	movs	r0, #0
 8008b0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008be4 <_malloc_r+0xfc>
 8008b12:	f000 f869 	bl	8008be8 <__malloc_lock>
 8008b16:	f8d8 3000 	ldr.w	r3, [r8]
 8008b1a:	461c      	mov	r4, r3
 8008b1c:	bb44      	cbnz	r4, 8008b70 <_malloc_r+0x88>
 8008b1e:	4629      	mov	r1, r5
 8008b20:	4630      	mov	r0, r6
 8008b22:	f7ff ffbf 	bl	8008aa4 <sbrk_aligned>
 8008b26:	1c43      	adds	r3, r0, #1
 8008b28:	4604      	mov	r4, r0
 8008b2a:	d158      	bne.n	8008bde <_malloc_r+0xf6>
 8008b2c:	f8d8 4000 	ldr.w	r4, [r8]
 8008b30:	4627      	mov	r7, r4
 8008b32:	2f00      	cmp	r7, #0
 8008b34:	d143      	bne.n	8008bbe <_malloc_r+0xd6>
 8008b36:	2c00      	cmp	r4, #0
 8008b38:	d04b      	beq.n	8008bd2 <_malloc_r+0xea>
 8008b3a:	6823      	ldr	r3, [r4, #0]
 8008b3c:	4639      	mov	r1, r7
 8008b3e:	4630      	mov	r0, r6
 8008b40:	eb04 0903 	add.w	r9, r4, r3
 8008b44:	f000 fdfc 	bl	8009740 <_sbrk_r>
 8008b48:	4581      	cmp	r9, r0
 8008b4a:	d142      	bne.n	8008bd2 <_malloc_r+0xea>
 8008b4c:	6821      	ldr	r1, [r4, #0]
 8008b4e:	1a6d      	subs	r5, r5, r1
 8008b50:	4629      	mov	r1, r5
 8008b52:	4630      	mov	r0, r6
 8008b54:	f7ff ffa6 	bl	8008aa4 <sbrk_aligned>
 8008b58:	3001      	adds	r0, #1
 8008b5a:	d03a      	beq.n	8008bd2 <_malloc_r+0xea>
 8008b5c:	6823      	ldr	r3, [r4, #0]
 8008b5e:	442b      	add	r3, r5
 8008b60:	6023      	str	r3, [r4, #0]
 8008b62:	f8d8 3000 	ldr.w	r3, [r8]
 8008b66:	685a      	ldr	r2, [r3, #4]
 8008b68:	bb62      	cbnz	r2, 8008bc4 <_malloc_r+0xdc>
 8008b6a:	f8c8 7000 	str.w	r7, [r8]
 8008b6e:	e00f      	b.n	8008b90 <_malloc_r+0xa8>
 8008b70:	6822      	ldr	r2, [r4, #0]
 8008b72:	1b52      	subs	r2, r2, r5
 8008b74:	d420      	bmi.n	8008bb8 <_malloc_r+0xd0>
 8008b76:	2a0b      	cmp	r2, #11
 8008b78:	d917      	bls.n	8008baa <_malloc_r+0xc2>
 8008b7a:	1961      	adds	r1, r4, r5
 8008b7c:	42a3      	cmp	r3, r4
 8008b7e:	6025      	str	r5, [r4, #0]
 8008b80:	bf18      	it	ne
 8008b82:	6059      	strne	r1, [r3, #4]
 8008b84:	6863      	ldr	r3, [r4, #4]
 8008b86:	bf08      	it	eq
 8008b88:	f8c8 1000 	streq.w	r1, [r8]
 8008b8c:	5162      	str	r2, [r4, r5]
 8008b8e:	604b      	str	r3, [r1, #4]
 8008b90:	4630      	mov	r0, r6
 8008b92:	f000 f82f 	bl	8008bf4 <__malloc_unlock>
 8008b96:	f104 000b 	add.w	r0, r4, #11
 8008b9a:	1d23      	adds	r3, r4, #4
 8008b9c:	f020 0007 	bic.w	r0, r0, #7
 8008ba0:	1ac2      	subs	r2, r0, r3
 8008ba2:	bf1c      	itt	ne
 8008ba4:	1a1b      	subne	r3, r3, r0
 8008ba6:	50a3      	strne	r3, [r4, r2]
 8008ba8:	e7af      	b.n	8008b0a <_malloc_r+0x22>
 8008baa:	6862      	ldr	r2, [r4, #4]
 8008bac:	42a3      	cmp	r3, r4
 8008bae:	bf0c      	ite	eq
 8008bb0:	f8c8 2000 	streq.w	r2, [r8]
 8008bb4:	605a      	strne	r2, [r3, #4]
 8008bb6:	e7eb      	b.n	8008b90 <_malloc_r+0xa8>
 8008bb8:	4623      	mov	r3, r4
 8008bba:	6864      	ldr	r4, [r4, #4]
 8008bbc:	e7ae      	b.n	8008b1c <_malloc_r+0x34>
 8008bbe:	463c      	mov	r4, r7
 8008bc0:	687f      	ldr	r7, [r7, #4]
 8008bc2:	e7b6      	b.n	8008b32 <_malloc_r+0x4a>
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	42a3      	cmp	r3, r4
 8008bca:	d1fb      	bne.n	8008bc4 <_malloc_r+0xdc>
 8008bcc:	2300      	movs	r3, #0
 8008bce:	6053      	str	r3, [r2, #4]
 8008bd0:	e7de      	b.n	8008b90 <_malloc_r+0xa8>
 8008bd2:	230c      	movs	r3, #12
 8008bd4:	6033      	str	r3, [r6, #0]
 8008bd6:	4630      	mov	r0, r6
 8008bd8:	f000 f80c 	bl	8008bf4 <__malloc_unlock>
 8008bdc:	e794      	b.n	8008b08 <_malloc_r+0x20>
 8008bde:	6005      	str	r5, [r0, #0]
 8008be0:	e7d6      	b.n	8008b90 <_malloc_r+0xa8>
 8008be2:	bf00      	nop
 8008be4:	200005d0 	.word	0x200005d0

08008be8 <__malloc_lock>:
 8008be8:	4801      	ldr	r0, [pc, #4]	@ (8008bf0 <__malloc_lock+0x8>)
 8008bea:	f7ff b8b8 	b.w	8007d5e <__retarget_lock_acquire_recursive>
 8008bee:	bf00      	nop
 8008bf0:	200005c8 	.word	0x200005c8

08008bf4 <__malloc_unlock>:
 8008bf4:	4801      	ldr	r0, [pc, #4]	@ (8008bfc <__malloc_unlock+0x8>)
 8008bf6:	f7ff b8b3 	b.w	8007d60 <__retarget_lock_release_recursive>
 8008bfa:	bf00      	nop
 8008bfc:	200005c8 	.word	0x200005c8

08008c00 <_Balloc>:
 8008c00:	b570      	push	{r4, r5, r6, lr}
 8008c02:	69c6      	ldr	r6, [r0, #28]
 8008c04:	4604      	mov	r4, r0
 8008c06:	460d      	mov	r5, r1
 8008c08:	b976      	cbnz	r6, 8008c28 <_Balloc+0x28>
 8008c0a:	2010      	movs	r0, #16
 8008c0c:	f7ff ff42 	bl	8008a94 <malloc>
 8008c10:	4602      	mov	r2, r0
 8008c12:	61e0      	str	r0, [r4, #28]
 8008c14:	b920      	cbnz	r0, 8008c20 <_Balloc+0x20>
 8008c16:	4b18      	ldr	r3, [pc, #96]	@ (8008c78 <_Balloc+0x78>)
 8008c18:	4818      	ldr	r0, [pc, #96]	@ (8008c7c <_Balloc+0x7c>)
 8008c1a:	216b      	movs	r1, #107	@ 0x6b
 8008c1c:	f000 fdae 	bl	800977c <__assert_func>
 8008c20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c24:	6006      	str	r6, [r0, #0]
 8008c26:	60c6      	str	r6, [r0, #12]
 8008c28:	69e6      	ldr	r6, [r4, #28]
 8008c2a:	68f3      	ldr	r3, [r6, #12]
 8008c2c:	b183      	cbz	r3, 8008c50 <_Balloc+0x50>
 8008c2e:	69e3      	ldr	r3, [r4, #28]
 8008c30:	68db      	ldr	r3, [r3, #12]
 8008c32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008c36:	b9b8      	cbnz	r0, 8008c68 <_Balloc+0x68>
 8008c38:	2101      	movs	r1, #1
 8008c3a:	fa01 f605 	lsl.w	r6, r1, r5
 8008c3e:	1d72      	adds	r2, r6, #5
 8008c40:	0092      	lsls	r2, r2, #2
 8008c42:	4620      	mov	r0, r4
 8008c44:	f000 fdb8 	bl	80097b8 <_calloc_r>
 8008c48:	b160      	cbz	r0, 8008c64 <_Balloc+0x64>
 8008c4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008c4e:	e00e      	b.n	8008c6e <_Balloc+0x6e>
 8008c50:	2221      	movs	r2, #33	@ 0x21
 8008c52:	2104      	movs	r1, #4
 8008c54:	4620      	mov	r0, r4
 8008c56:	f000 fdaf 	bl	80097b8 <_calloc_r>
 8008c5a:	69e3      	ldr	r3, [r4, #28]
 8008c5c:	60f0      	str	r0, [r6, #12]
 8008c5e:	68db      	ldr	r3, [r3, #12]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d1e4      	bne.n	8008c2e <_Balloc+0x2e>
 8008c64:	2000      	movs	r0, #0
 8008c66:	bd70      	pop	{r4, r5, r6, pc}
 8008c68:	6802      	ldr	r2, [r0, #0]
 8008c6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008c6e:	2300      	movs	r3, #0
 8008c70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008c74:	e7f7      	b.n	8008c66 <_Balloc+0x66>
 8008c76:	bf00      	nop
 8008c78:	08009ed1 	.word	0x08009ed1
 8008c7c:	08009f51 	.word	0x08009f51

08008c80 <_Bfree>:
 8008c80:	b570      	push	{r4, r5, r6, lr}
 8008c82:	69c6      	ldr	r6, [r0, #28]
 8008c84:	4605      	mov	r5, r0
 8008c86:	460c      	mov	r4, r1
 8008c88:	b976      	cbnz	r6, 8008ca8 <_Bfree+0x28>
 8008c8a:	2010      	movs	r0, #16
 8008c8c:	f7ff ff02 	bl	8008a94 <malloc>
 8008c90:	4602      	mov	r2, r0
 8008c92:	61e8      	str	r0, [r5, #28]
 8008c94:	b920      	cbnz	r0, 8008ca0 <_Bfree+0x20>
 8008c96:	4b09      	ldr	r3, [pc, #36]	@ (8008cbc <_Bfree+0x3c>)
 8008c98:	4809      	ldr	r0, [pc, #36]	@ (8008cc0 <_Bfree+0x40>)
 8008c9a:	218f      	movs	r1, #143	@ 0x8f
 8008c9c:	f000 fd6e 	bl	800977c <__assert_func>
 8008ca0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ca4:	6006      	str	r6, [r0, #0]
 8008ca6:	60c6      	str	r6, [r0, #12]
 8008ca8:	b13c      	cbz	r4, 8008cba <_Bfree+0x3a>
 8008caa:	69eb      	ldr	r3, [r5, #28]
 8008cac:	6862      	ldr	r2, [r4, #4]
 8008cae:	68db      	ldr	r3, [r3, #12]
 8008cb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008cb4:	6021      	str	r1, [r4, #0]
 8008cb6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008cba:	bd70      	pop	{r4, r5, r6, pc}
 8008cbc:	08009ed1 	.word	0x08009ed1
 8008cc0:	08009f51 	.word	0x08009f51

08008cc4 <__multadd>:
 8008cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cc8:	690d      	ldr	r5, [r1, #16]
 8008cca:	4607      	mov	r7, r0
 8008ccc:	460c      	mov	r4, r1
 8008cce:	461e      	mov	r6, r3
 8008cd0:	f101 0c14 	add.w	ip, r1, #20
 8008cd4:	2000      	movs	r0, #0
 8008cd6:	f8dc 3000 	ldr.w	r3, [ip]
 8008cda:	b299      	uxth	r1, r3
 8008cdc:	fb02 6101 	mla	r1, r2, r1, r6
 8008ce0:	0c1e      	lsrs	r6, r3, #16
 8008ce2:	0c0b      	lsrs	r3, r1, #16
 8008ce4:	fb02 3306 	mla	r3, r2, r6, r3
 8008ce8:	b289      	uxth	r1, r1
 8008cea:	3001      	adds	r0, #1
 8008cec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008cf0:	4285      	cmp	r5, r0
 8008cf2:	f84c 1b04 	str.w	r1, [ip], #4
 8008cf6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008cfa:	dcec      	bgt.n	8008cd6 <__multadd+0x12>
 8008cfc:	b30e      	cbz	r6, 8008d42 <__multadd+0x7e>
 8008cfe:	68a3      	ldr	r3, [r4, #8]
 8008d00:	42ab      	cmp	r3, r5
 8008d02:	dc19      	bgt.n	8008d38 <__multadd+0x74>
 8008d04:	6861      	ldr	r1, [r4, #4]
 8008d06:	4638      	mov	r0, r7
 8008d08:	3101      	adds	r1, #1
 8008d0a:	f7ff ff79 	bl	8008c00 <_Balloc>
 8008d0e:	4680      	mov	r8, r0
 8008d10:	b928      	cbnz	r0, 8008d1e <__multadd+0x5a>
 8008d12:	4602      	mov	r2, r0
 8008d14:	4b0c      	ldr	r3, [pc, #48]	@ (8008d48 <__multadd+0x84>)
 8008d16:	480d      	ldr	r0, [pc, #52]	@ (8008d4c <__multadd+0x88>)
 8008d18:	21ba      	movs	r1, #186	@ 0xba
 8008d1a:	f000 fd2f 	bl	800977c <__assert_func>
 8008d1e:	6922      	ldr	r2, [r4, #16]
 8008d20:	3202      	adds	r2, #2
 8008d22:	f104 010c 	add.w	r1, r4, #12
 8008d26:	0092      	lsls	r2, r2, #2
 8008d28:	300c      	adds	r0, #12
 8008d2a:	f000 fd19 	bl	8009760 <memcpy>
 8008d2e:	4621      	mov	r1, r4
 8008d30:	4638      	mov	r0, r7
 8008d32:	f7ff ffa5 	bl	8008c80 <_Bfree>
 8008d36:	4644      	mov	r4, r8
 8008d38:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008d3c:	3501      	adds	r5, #1
 8008d3e:	615e      	str	r6, [r3, #20]
 8008d40:	6125      	str	r5, [r4, #16]
 8008d42:	4620      	mov	r0, r4
 8008d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d48:	08009f40 	.word	0x08009f40
 8008d4c:	08009f51 	.word	0x08009f51

08008d50 <__hi0bits>:
 8008d50:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008d54:	4603      	mov	r3, r0
 8008d56:	bf36      	itet	cc
 8008d58:	0403      	lslcc	r3, r0, #16
 8008d5a:	2000      	movcs	r0, #0
 8008d5c:	2010      	movcc	r0, #16
 8008d5e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008d62:	bf3c      	itt	cc
 8008d64:	021b      	lslcc	r3, r3, #8
 8008d66:	3008      	addcc	r0, #8
 8008d68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d6c:	bf3c      	itt	cc
 8008d6e:	011b      	lslcc	r3, r3, #4
 8008d70:	3004      	addcc	r0, #4
 8008d72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d76:	bf3c      	itt	cc
 8008d78:	009b      	lslcc	r3, r3, #2
 8008d7a:	3002      	addcc	r0, #2
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	db05      	blt.n	8008d8c <__hi0bits+0x3c>
 8008d80:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008d84:	f100 0001 	add.w	r0, r0, #1
 8008d88:	bf08      	it	eq
 8008d8a:	2020      	moveq	r0, #32
 8008d8c:	4770      	bx	lr

08008d8e <__lo0bits>:
 8008d8e:	6803      	ldr	r3, [r0, #0]
 8008d90:	4602      	mov	r2, r0
 8008d92:	f013 0007 	ands.w	r0, r3, #7
 8008d96:	d00b      	beq.n	8008db0 <__lo0bits+0x22>
 8008d98:	07d9      	lsls	r1, r3, #31
 8008d9a:	d421      	bmi.n	8008de0 <__lo0bits+0x52>
 8008d9c:	0798      	lsls	r0, r3, #30
 8008d9e:	bf49      	itett	mi
 8008da0:	085b      	lsrmi	r3, r3, #1
 8008da2:	089b      	lsrpl	r3, r3, #2
 8008da4:	2001      	movmi	r0, #1
 8008da6:	6013      	strmi	r3, [r2, #0]
 8008da8:	bf5c      	itt	pl
 8008daa:	6013      	strpl	r3, [r2, #0]
 8008dac:	2002      	movpl	r0, #2
 8008dae:	4770      	bx	lr
 8008db0:	b299      	uxth	r1, r3
 8008db2:	b909      	cbnz	r1, 8008db8 <__lo0bits+0x2a>
 8008db4:	0c1b      	lsrs	r3, r3, #16
 8008db6:	2010      	movs	r0, #16
 8008db8:	b2d9      	uxtb	r1, r3
 8008dba:	b909      	cbnz	r1, 8008dc0 <__lo0bits+0x32>
 8008dbc:	3008      	adds	r0, #8
 8008dbe:	0a1b      	lsrs	r3, r3, #8
 8008dc0:	0719      	lsls	r1, r3, #28
 8008dc2:	bf04      	itt	eq
 8008dc4:	091b      	lsreq	r3, r3, #4
 8008dc6:	3004      	addeq	r0, #4
 8008dc8:	0799      	lsls	r1, r3, #30
 8008dca:	bf04      	itt	eq
 8008dcc:	089b      	lsreq	r3, r3, #2
 8008dce:	3002      	addeq	r0, #2
 8008dd0:	07d9      	lsls	r1, r3, #31
 8008dd2:	d403      	bmi.n	8008ddc <__lo0bits+0x4e>
 8008dd4:	085b      	lsrs	r3, r3, #1
 8008dd6:	f100 0001 	add.w	r0, r0, #1
 8008dda:	d003      	beq.n	8008de4 <__lo0bits+0x56>
 8008ddc:	6013      	str	r3, [r2, #0]
 8008dde:	4770      	bx	lr
 8008de0:	2000      	movs	r0, #0
 8008de2:	4770      	bx	lr
 8008de4:	2020      	movs	r0, #32
 8008de6:	4770      	bx	lr

08008de8 <__i2b>:
 8008de8:	b510      	push	{r4, lr}
 8008dea:	460c      	mov	r4, r1
 8008dec:	2101      	movs	r1, #1
 8008dee:	f7ff ff07 	bl	8008c00 <_Balloc>
 8008df2:	4602      	mov	r2, r0
 8008df4:	b928      	cbnz	r0, 8008e02 <__i2b+0x1a>
 8008df6:	4b05      	ldr	r3, [pc, #20]	@ (8008e0c <__i2b+0x24>)
 8008df8:	4805      	ldr	r0, [pc, #20]	@ (8008e10 <__i2b+0x28>)
 8008dfa:	f240 1145 	movw	r1, #325	@ 0x145
 8008dfe:	f000 fcbd 	bl	800977c <__assert_func>
 8008e02:	2301      	movs	r3, #1
 8008e04:	6144      	str	r4, [r0, #20]
 8008e06:	6103      	str	r3, [r0, #16]
 8008e08:	bd10      	pop	{r4, pc}
 8008e0a:	bf00      	nop
 8008e0c:	08009f40 	.word	0x08009f40
 8008e10:	08009f51 	.word	0x08009f51

08008e14 <__multiply>:
 8008e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e18:	4614      	mov	r4, r2
 8008e1a:	690a      	ldr	r2, [r1, #16]
 8008e1c:	6923      	ldr	r3, [r4, #16]
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	bfa8      	it	ge
 8008e22:	4623      	movge	r3, r4
 8008e24:	460f      	mov	r7, r1
 8008e26:	bfa4      	itt	ge
 8008e28:	460c      	movge	r4, r1
 8008e2a:	461f      	movge	r7, r3
 8008e2c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008e30:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008e34:	68a3      	ldr	r3, [r4, #8]
 8008e36:	6861      	ldr	r1, [r4, #4]
 8008e38:	eb0a 0609 	add.w	r6, sl, r9
 8008e3c:	42b3      	cmp	r3, r6
 8008e3e:	b085      	sub	sp, #20
 8008e40:	bfb8      	it	lt
 8008e42:	3101      	addlt	r1, #1
 8008e44:	f7ff fedc 	bl	8008c00 <_Balloc>
 8008e48:	b930      	cbnz	r0, 8008e58 <__multiply+0x44>
 8008e4a:	4602      	mov	r2, r0
 8008e4c:	4b44      	ldr	r3, [pc, #272]	@ (8008f60 <__multiply+0x14c>)
 8008e4e:	4845      	ldr	r0, [pc, #276]	@ (8008f64 <__multiply+0x150>)
 8008e50:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008e54:	f000 fc92 	bl	800977c <__assert_func>
 8008e58:	f100 0514 	add.w	r5, r0, #20
 8008e5c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008e60:	462b      	mov	r3, r5
 8008e62:	2200      	movs	r2, #0
 8008e64:	4543      	cmp	r3, r8
 8008e66:	d321      	bcc.n	8008eac <__multiply+0x98>
 8008e68:	f107 0114 	add.w	r1, r7, #20
 8008e6c:	f104 0214 	add.w	r2, r4, #20
 8008e70:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008e74:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008e78:	9302      	str	r3, [sp, #8]
 8008e7a:	1b13      	subs	r3, r2, r4
 8008e7c:	3b15      	subs	r3, #21
 8008e7e:	f023 0303 	bic.w	r3, r3, #3
 8008e82:	3304      	adds	r3, #4
 8008e84:	f104 0715 	add.w	r7, r4, #21
 8008e88:	42ba      	cmp	r2, r7
 8008e8a:	bf38      	it	cc
 8008e8c:	2304      	movcc	r3, #4
 8008e8e:	9301      	str	r3, [sp, #4]
 8008e90:	9b02      	ldr	r3, [sp, #8]
 8008e92:	9103      	str	r1, [sp, #12]
 8008e94:	428b      	cmp	r3, r1
 8008e96:	d80c      	bhi.n	8008eb2 <__multiply+0x9e>
 8008e98:	2e00      	cmp	r6, #0
 8008e9a:	dd03      	ble.n	8008ea4 <__multiply+0x90>
 8008e9c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d05b      	beq.n	8008f5c <__multiply+0x148>
 8008ea4:	6106      	str	r6, [r0, #16]
 8008ea6:	b005      	add	sp, #20
 8008ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eac:	f843 2b04 	str.w	r2, [r3], #4
 8008eb0:	e7d8      	b.n	8008e64 <__multiply+0x50>
 8008eb2:	f8b1 a000 	ldrh.w	sl, [r1]
 8008eb6:	f1ba 0f00 	cmp.w	sl, #0
 8008eba:	d024      	beq.n	8008f06 <__multiply+0xf2>
 8008ebc:	f104 0e14 	add.w	lr, r4, #20
 8008ec0:	46a9      	mov	r9, r5
 8008ec2:	f04f 0c00 	mov.w	ip, #0
 8008ec6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008eca:	f8d9 3000 	ldr.w	r3, [r9]
 8008ece:	fa1f fb87 	uxth.w	fp, r7
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	fb0a 330b 	mla	r3, sl, fp, r3
 8008ed8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008edc:	f8d9 7000 	ldr.w	r7, [r9]
 8008ee0:	4463      	add	r3, ip
 8008ee2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008ee6:	fb0a c70b 	mla	r7, sl, fp, ip
 8008eea:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008ef4:	4572      	cmp	r2, lr
 8008ef6:	f849 3b04 	str.w	r3, [r9], #4
 8008efa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008efe:	d8e2      	bhi.n	8008ec6 <__multiply+0xb2>
 8008f00:	9b01      	ldr	r3, [sp, #4]
 8008f02:	f845 c003 	str.w	ip, [r5, r3]
 8008f06:	9b03      	ldr	r3, [sp, #12]
 8008f08:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008f0c:	3104      	adds	r1, #4
 8008f0e:	f1b9 0f00 	cmp.w	r9, #0
 8008f12:	d021      	beq.n	8008f58 <__multiply+0x144>
 8008f14:	682b      	ldr	r3, [r5, #0]
 8008f16:	f104 0c14 	add.w	ip, r4, #20
 8008f1a:	46ae      	mov	lr, r5
 8008f1c:	f04f 0a00 	mov.w	sl, #0
 8008f20:	f8bc b000 	ldrh.w	fp, [ip]
 8008f24:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008f28:	fb09 770b 	mla	r7, r9, fp, r7
 8008f2c:	4457      	add	r7, sl
 8008f2e:	b29b      	uxth	r3, r3
 8008f30:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008f34:	f84e 3b04 	str.w	r3, [lr], #4
 8008f38:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008f3c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f40:	f8be 3000 	ldrh.w	r3, [lr]
 8008f44:	fb09 330a 	mla	r3, r9, sl, r3
 8008f48:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008f4c:	4562      	cmp	r2, ip
 8008f4e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f52:	d8e5      	bhi.n	8008f20 <__multiply+0x10c>
 8008f54:	9f01      	ldr	r7, [sp, #4]
 8008f56:	51eb      	str	r3, [r5, r7]
 8008f58:	3504      	adds	r5, #4
 8008f5a:	e799      	b.n	8008e90 <__multiply+0x7c>
 8008f5c:	3e01      	subs	r6, #1
 8008f5e:	e79b      	b.n	8008e98 <__multiply+0x84>
 8008f60:	08009f40 	.word	0x08009f40
 8008f64:	08009f51 	.word	0x08009f51

08008f68 <__pow5mult>:
 8008f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f6c:	4615      	mov	r5, r2
 8008f6e:	f012 0203 	ands.w	r2, r2, #3
 8008f72:	4607      	mov	r7, r0
 8008f74:	460e      	mov	r6, r1
 8008f76:	d007      	beq.n	8008f88 <__pow5mult+0x20>
 8008f78:	4c25      	ldr	r4, [pc, #148]	@ (8009010 <__pow5mult+0xa8>)
 8008f7a:	3a01      	subs	r2, #1
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008f82:	f7ff fe9f 	bl	8008cc4 <__multadd>
 8008f86:	4606      	mov	r6, r0
 8008f88:	10ad      	asrs	r5, r5, #2
 8008f8a:	d03d      	beq.n	8009008 <__pow5mult+0xa0>
 8008f8c:	69fc      	ldr	r4, [r7, #28]
 8008f8e:	b97c      	cbnz	r4, 8008fb0 <__pow5mult+0x48>
 8008f90:	2010      	movs	r0, #16
 8008f92:	f7ff fd7f 	bl	8008a94 <malloc>
 8008f96:	4602      	mov	r2, r0
 8008f98:	61f8      	str	r0, [r7, #28]
 8008f9a:	b928      	cbnz	r0, 8008fa8 <__pow5mult+0x40>
 8008f9c:	4b1d      	ldr	r3, [pc, #116]	@ (8009014 <__pow5mult+0xac>)
 8008f9e:	481e      	ldr	r0, [pc, #120]	@ (8009018 <__pow5mult+0xb0>)
 8008fa0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008fa4:	f000 fbea 	bl	800977c <__assert_func>
 8008fa8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008fac:	6004      	str	r4, [r0, #0]
 8008fae:	60c4      	str	r4, [r0, #12]
 8008fb0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008fb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008fb8:	b94c      	cbnz	r4, 8008fce <__pow5mult+0x66>
 8008fba:	f240 2171 	movw	r1, #625	@ 0x271
 8008fbe:	4638      	mov	r0, r7
 8008fc0:	f7ff ff12 	bl	8008de8 <__i2b>
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	f8c8 0008 	str.w	r0, [r8, #8]
 8008fca:	4604      	mov	r4, r0
 8008fcc:	6003      	str	r3, [r0, #0]
 8008fce:	f04f 0900 	mov.w	r9, #0
 8008fd2:	07eb      	lsls	r3, r5, #31
 8008fd4:	d50a      	bpl.n	8008fec <__pow5mult+0x84>
 8008fd6:	4631      	mov	r1, r6
 8008fd8:	4622      	mov	r2, r4
 8008fda:	4638      	mov	r0, r7
 8008fdc:	f7ff ff1a 	bl	8008e14 <__multiply>
 8008fe0:	4631      	mov	r1, r6
 8008fe2:	4680      	mov	r8, r0
 8008fe4:	4638      	mov	r0, r7
 8008fe6:	f7ff fe4b 	bl	8008c80 <_Bfree>
 8008fea:	4646      	mov	r6, r8
 8008fec:	106d      	asrs	r5, r5, #1
 8008fee:	d00b      	beq.n	8009008 <__pow5mult+0xa0>
 8008ff0:	6820      	ldr	r0, [r4, #0]
 8008ff2:	b938      	cbnz	r0, 8009004 <__pow5mult+0x9c>
 8008ff4:	4622      	mov	r2, r4
 8008ff6:	4621      	mov	r1, r4
 8008ff8:	4638      	mov	r0, r7
 8008ffa:	f7ff ff0b 	bl	8008e14 <__multiply>
 8008ffe:	6020      	str	r0, [r4, #0]
 8009000:	f8c0 9000 	str.w	r9, [r0]
 8009004:	4604      	mov	r4, r0
 8009006:	e7e4      	b.n	8008fd2 <__pow5mult+0x6a>
 8009008:	4630      	mov	r0, r6
 800900a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800900e:	bf00      	nop
 8009010:	08009fac 	.word	0x08009fac
 8009014:	08009ed1 	.word	0x08009ed1
 8009018:	08009f51 	.word	0x08009f51

0800901c <__lshift>:
 800901c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009020:	460c      	mov	r4, r1
 8009022:	6849      	ldr	r1, [r1, #4]
 8009024:	6923      	ldr	r3, [r4, #16]
 8009026:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800902a:	68a3      	ldr	r3, [r4, #8]
 800902c:	4607      	mov	r7, r0
 800902e:	4691      	mov	r9, r2
 8009030:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009034:	f108 0601 	add.w	r6, r8, #1
 8009038:	42b3      	cmp	r3, r6
 800903a:	db0b      	blt.n	8009054 <__lshift+0x38>
 800903c:	4638      	mov	r0, r7
 800903e:	f7ff fddf 	bl	8008c00 <_Balloc>
 8009042:	4605      	mov	r5, r0
 8009044:	b948      	cbnz	r0, 800905a <__lshift+0x3e>
 8009046:	4602      	mov	r2, r0
 8009048:	4b28      	ldr	r3, [pc, #160]	@ (80090ec <__lshift+0xd0>)
 800904a:	4829      	ldr	r0, [pc, #164]	@ (80090f0 <__lshift+0xd4>)
 800904c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009050:	f000 fb94 	bl	800977c <__assert_func>
 8009054:	3101      	adds	r1, #1
 8009056:	005b      	lsls	r3, r3, #1
 8009058:	e7ee      	b.n	8009038 <__lshift+0x1c>
 800905a:	2300      	movs	r3, #0
 800905c:	f100 0114 	add.w	r1, r0, #20
 8009060:	f100 0210 	add.w	r2, r0, #16
 8009064:	4618      	mov	r0, r3
 8009066:	4553      	cmp	r3, sl
 8009068:	db33      	blt.n	80090d2 <__lshift+0xb6>
 800906a:	6920      	ldr	r0, [r4, #16]
 800906c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009070:	f104 0314 	add.w	r3, r4, #20
 8009074:	f019 091f 	ands.w	r9, r9, #31
 8009078:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800907c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009080:	d02b      	beq.n	80090da <__lshift+0xbe>
 8009082:	f1c9 0e20 	rsb	lr, r9, #32
 8009086:	468a      	mov	sl, r1
 8009088:	2200      	movs	r2, #0
 800908a:	6818      	ldr	r0, [r3, #0]
 800908c:	fa00 f009 	lsl.w	r0, r0, r9
 8009090:	4310      	orrs	r0, r2
 8009092:	f84a 0b04 	str.w	r0, [sl], #4
 8009096:	f853 2b04 	ldr.w	r2, [r3], #4
 800909a:	459c      	cmp	ip, r3
 800909c:	fa22 f20e 	lsr.w	r2, r2, lr
 80090a0:	d8f3      	bhi.n	800908a <__lshift+0x6e>
 80090a2:	ebac 0304 	sub.w	r3, ip, r4
 80090a6:	3b15      	subs	r3, #21
 80090a8:	f023 0303 	bic.w	r3, r3, #3
 80090ac:	3304      	adds	r3, #4
 80090ae:	f104 0015 	add.w	r0, r4, #21
 80090b2:	4584      	cmp	ip, r0
 80090b4:	bf38      	it	cc
 80090b6:	2304      	movcc	r3, #4
 80090b8:	50ca      	str	r2, [r1, r3]
 80090ba:	b10a      	cbz	r2, 80090c0 <__lshift+0xa4>
 80090bc:	f108 0602 	add.w	r6, r8, #2
 80090c0:	3e01      	subs	r6, #1
 80090c2:	4638      	mov	r0, r7
 80090c4:	612e      	str	r6, [r5, #16]
 80090c6:	4621      	mov	r1, r4
 80090c8:	f7ff fdda 	bl	8008c80 <_Bfree>
 80090cc:	4628      	mov	r0, r5
 80090ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80090d6:	3301      	adds	r3, #1
 80090d8:	e7c5      	b.n	8009066 <__lshift+0x4a>
 80090da:	3904      	subs	r1, #4
 80090dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80090e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80090e4:	459c      	cmp	ip, r3
 80090e6:	d8f9      	bhi.n	80090dc <__lshift+0xc0>
 80090e8:	e7ea      	b.n	80090c0 <__lshift+0xa4>
 80090ea:	bf00      	nop
 80090ec:	08009f40 	.word	0x08009f40
 80090f0:	08009f51 	.word	0x08009f51

080090f4 <__mcmp>:
 80090f4:	690a      	ldr	r2, [r1, #16]
 80090f6:	4603      	mov	r3, r0
 80090f8:	6900      	ldr	r0, [r0, #16]
 80090fa:	1a80      	subs	r0, r0, r2
 80090fc:	b530      	push	{r4, r5, lr}
 80090fe:	d10e      	bne.n	800911e <__mcmp+0x2a>
 8009100:	3314      	adds	r3, #20
 8009102:	3114      	adds	r1, #20
 8009104:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009108:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800910c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009110:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009114:	4295      	cmp	r5, r2
 8009116:	d003      	beq.n	8009120 <__mcmp+0x2c>
 8009118:	d205      	bcs.n	8009126 <__mcmp+0x32>
 800911a:	f04f 30ff 	mov.w	r0, #4294967295
 800911e:	bd30      	pop	{r4, r5, pc}
 8009120:	42a3      	cmp	r3, r4
 8009122:	d3f3      	bcc.n	800910c <__mcmp+0x18>
 8009124:	e7fb      	b.n	800911e <__mcmp+0x2a>
 8009126:	2001      	movs	r0, #1
 8009128:	e7f9      	b.n	800911e <__mcmp+0x2a>
	...

0800912c <__mdiff>:
 800912c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009130:	4689      	mov	r9, r1
 8009132:	4606      	mov	r6, r0
 8009134:	4611      	mov	r1, r2
 8009136:	4648      	mov	r0, r9
 8009138:	4614      	mov	r4, r2
 800913a:	f7ff ffdb 	bl	80090f4 <__mcmp>
 800913e:	1e05      	subs	r5, r0, #0
 8009140:	d112      	bne.n	8009168 <__mdiff+0x3c>
 8009142:	4629      	mov	r1, r5
 8009144:	4630      	mov	r0, r6
 8009146:	f7ff fd5b 	bl	8008c00 <_Balloc>
 800914a:	4602      	mov	r2, r0
 800914c:	b928      	cbnz	r0, 800915a <__mdiff+0x2e>
 800914e:	4b3f      	ldr	r3, [pc, #252]	@ (800924c <__mdiff+0x120>)
 8009150:	f240 2137 	movw	r1, #567	@ 0x237
 8009154:	483e      	ldr	r0, [pc, #248]	@ (8009250 <__mdiff+0x124>)
 8009156:	f000 fb11 	bl	800977c <__assert_func>
 800915a:	2301      	movs	r3, #1
 800915c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009160:	4610      	mov	r0, r2
 8009162:	b003      	add	sp, #12
 8009164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009168:	bfbc      	itt	lt
 800916a:	464b      	movlt	r3, r9
 800916c:	46a1      	movlt	r9, r4
 800916e:	4630      	mov	r0, r6
 8009170:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009174:	bfba      	itte	lt
 8009176:	461c      	movlt	r4, r3
 8009178:	2501      	movlt	r5, #1
 800917a:	2500      	movge	r5, #0
 800917c:	f7ff fd40 	bl	8008c00 <_Balloc>
 8009180:	4602      	mov	r2, r0
 8009182:	b918      	cbnz	r0, 800918c <__mdiff+0x60>
 8009184:	4b31      	ldr	r3, [pc, #196]	@ (800924c <__mdiff+0x120>)
 8009186:	f240 2145 	movw	r1, #581	@ 0x245
 800918a:	e7e3      	b.n	8009154 <__mdiff+0x28>
 800918c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009190:	6926      	ldr	r6, [r4, #16]
 8009192:	60c5      	str	r5, [r0, #12]
 8009194:	f109 0310 	add.w	r3, r9, #16
 8009198:	f109 0514 	add.w	r5, r9, #20
 800919c:	f104 0e14 	add.w	lr, r4, #20
 80091a0:	f100 0b14 	add.w	fp, r0, #20
 80091a4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80091a8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80091ac:	9301      	str	r3, [sp, #4]
 80091ae:	46d9      	mov	r9, fp
 80091b0:	f04f 0c00 	mov.w	ip, #0
 80091b4:	9b01      	ldr	r3, [sp, #4]
 80091b6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80091ba:	f853 af04 	ldr.w	sl, [r3, #4]!
 80091be:	9301      	str	r3, [sp, #4]
 80091c0:	fa1f f38a 	uxth.w	r3, sl
 80091c4:	4619      	mov	r1, r3
 80091c6:	b283      	uxth	r3, r0
 80091c8:	1acb      	subs	r3, r1, r3
 80091ca:	0c00      	lsrs	r0, r0, #16
 80091cc:	4463      	add	r3, ip
 80091ce:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80091d2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80091d6:	b29b      	uxth	r3, r3
 80091d8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80091dc:	4576      	cmp	r6, lr
 80091de:	f849 3b04 	str.w	r3, [r9], #4
 80091e2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80091e6:	d8e5      	bhi.n	80091b4 <__mdiff+0x88>
 80091e8:	1b33      	subs	r3, r6, r4
 80091ea:	3b15      	subs	r3, #21
 80091ec:	f023 0303 	bic.w	r3, r3, #3
 80091f0:	3415      	adds	r4, #21
 80091f2:	3304      	adds	r3, #4
 80091f4:	42a6      	cmp	r6, r4
 80091f6:	bf38      	it	cc
 80091f8:	2304      	movcc	r3, #4
 80091fa:	441d      	add	r5, r3
 80091fc:	445b      	add	r3, fp
 80091fe:	461e      	mov	r6, r3
 8009200:	462c      	mov	r4, r5
 8009202:	4544      	cmp	r4, r8
 8009204:	d30e      	bcc.n	8009224 <__mdiff+0xf8>
 8009206:	f108 0103 	add.w	r1, r8, #3
 800920a:	1b49      	subs	r1, r1, r5
 800920c:	f021 0103 	bic.w	r1, r1, #3
 8009210:	3d03      	subs	r5, #3
 8009212:	45a8      	cmp	r8, r5
 8009214:	bf38      	it	cc
 8009216:	2100      	movcc	r1, #0
 8009218:	440b      	add	r3, r1
 800921a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800921e:	b191      	cbz	r1, 8009246 <__mdiff+0x11a>
 8009220:	6117      	str	r7, [r2, #16]
 8009222:	e79d      	b.n	8009160 <__mdiff+0x34>
 8009224:	f854 1b04 	ldr.w	r1, [r4], #4
 8009228:	46e6      	mov	lr, ip
 800922a:	0c08      	lsrs	r0, r1, #16
 800922c:	fa1c fc81 	uxtah	ip, ip, r1
 8009230:	4471      	add	r1, lr
 8009232:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009236:	b289      	uxth	r1, r1
 8009238:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800923c:	f846 1b04 	str.w	r1, [r6], #4
 8009240:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009244:	e7dd      	b.n	8009202 <__mdiff+0xd6>
 8009246:	3f01      	subs	r7, #1
 8009248:	e7e7      	b.n	800921a <__mdiff+0xee>
 800924a:	bf00      	nop
 800924c:	08009f40 	.word	0x08009f40
 8009250:	08009f51 	.word	0x08009f51

08009254 <__d2b>:
 8009254:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009258:	460f      	mov	r7, r1
 800925a:	2101      	movs	r1, #1
 800925c:	ec59 8b10 	vmov	r8, r9, d0
 8009260:	4616      	mov	r6, r2
 8009262:	f7ff fccd 	bl	8008c00 <_Balloc>
 8009266:	4604      	mov	r4, r0
 8009268:	b930      	cbnz	r0, 8009278 <__d2b+0x24>
 800926a:	4602      	mov	r2, r0
 800926c:	4b23      	ldr	r3, [pc, #140]	@ (80092fc <__d2b+0xa8>)
 800926e:	4824      	ldr	r0, [pc, #144]	@ (8009300 <__d2b+0xac>)
 8009270:	f240 310f 	movw	r1, #783	@ 0x30f
 8009274:	f000 fa82 	bl	800977c <__assert_func>
 8009278:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800927c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009280:	b10d      	cbz	r5, 8009286 <__d2b+0x32>
 8009282:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009286:	9301      	str	r3, [sp, #4]
 8009288:	f1b8 0300 	subs.w	r3, r8, #0
 800928c:	d023      	beq.n	80092d6 <__d2b+0x82>
 800928e:	4668      	mov	r0, sp
 8009290:	9300      	str	r3, [sp, #0]
 8009292:	f7ff fd7c 	bl	8008d8e <__lo0bits>
 8009296:	e9dd 1200 	ldrd	r1, r2, [sp]
 800929a:	b1d0      	cbz	r0, 80092d2 <__d2b+0x7e>
 800929c:	f1c0 0320 	rsb	r3, r0, #32
 80092a0:	fa02 f303 	lsl.w	r3, r2, r3
 80092a4:	430b      	orrs	r3, r1
 80092a6:	40c2      	lsrs	r2, r0
 80092a8:	6163      	str	r3, [r4, #20]
 80092aa:	9201      	str	r2, [sp, #4]
 80092ac:	9b01      	ldr	r3, [sp, #4]
 80092ae:	61a3      	str	r3, [r4, #24]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	bf0c      	ite	eq
 80092b4:	2201      	moveq	r2, #1
 80092b6:	2202      	movne	r2, #2
 80092b8:	6122      	str	r2, [r4, #16]
 80092ba:	b1a5      	cbz	r5, 80092e6 <__d2b+0x92>
 80092bc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80092c0:	4405      	add	r5, r0
 80092c2:	603d      	str	r5, [r7, #0]
 80092c4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80092c8:	6030      	str	r0, [r6, #0]
 80092ca:	4620      	mov	r0, r4
 80092cc:	b003      	add	sp, #12
 80092ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80092d2:	6161      	str	r1, [r4, #20]
 80092d4:	e7ea      	b.n	80092ac <__d2b+0x58>
 80092d6:	a801      	add	r0, sp, #4
 80092d8:	f7ff fd59 	bl	8008d8e <__lo0bits>
 80092dc:	9b01      	ldr	r3, [sp, #4]
 80092de:	6163      	str	r3, [r4, #20]
 80092e0:	3020      	adds	r0, #32
 80092e2:	2201      	movs	r2, #1
 80092e4:	e7e8      	b.n	80092b8 <__d2b+0x64>
 80092e6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80092ea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80092ee:	6038      	str	r0, [r7, #0]
 80092f0:	6918      	ldr	r0, [r3, #16]
 80092f2:	f7ff fd2d 	bl	8008d50 <__hi0bits>
 80092f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80092fa:	e7e5      	b.n	80092c8 <__d2b+0x74>
 80092fc:	08009f40 	.word	0x08009f40
 8009300:	08009f51 	.word	0x08009f51

08009304 <__ssputs_r>:
 8009304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009308:	688e      	ldr	r6, [r1, #8]
 800930a:	461f      	mov	r7, r3
 800930c:	42be      	cmp	r6, r7
 800930e:	680b      	ldr	r3, [r1, #0]
 8009310:	4682      	mov	sl, r0
 8009312:	460c      	mov	r4, r1
 8009314:	4690      	mov	r8, r2
 8009316:	d82d      	bhi.n	8009374 <__ssputs_r+0x70>
 8009318:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800931c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009320:	d026      	beq.n	8009370 <__ssputs_r+0x6c>
 8009322:	6965      	ldr	r5, [r4, #20]
 8009324:	6909      	ldr	r1, [r1, #16]
 8009326:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800932a:	eba3 0901 	sub.w	r9, r3, r1
 800932e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009332:	1c7b      	adds	r3, r7, #1
 8009334:	444b      	add	r3, r9
 8009336:	106d      	asrs	r5, r5, #1
 8009338:	429d      	cmp	r5, r3
 800933a:	bf38      	it	cc
 800933c:	461d      	movcc	r5, r3
 800933e:	0553      	lsls	r3, r2, #21
 8009340:	d527      	bpl.n	8009392 <__ssputs_r+0x8e>
 8009342:	4629      	mov	r1, r5
 8009344:	f7ff fbd0 	bl	8008ae8 <_malloc_r>
 8009348:	4606      	mov	r6, r0
 800934a:	b360      	cbz	r0, 80093a6 <__ssputs_r+0xa2>
 800934c:	6921      	ldr	r1, [r4, #16]
 800934e:	464a      	mov	r2, r9
 8009350:	f000 fa06 	bl	8009760 <memcpy>
 8009354:	89a3      	ldrh	r3, [r4, #12]
 8009356:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800935a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800935e:	81a3      	strh	r3, [r4, #12]
 8009360:	6126      	str	r6, [r4, #16]
 8009362:	6165      	str	r5, [r4, #20]
 8009364:	444e      	add	r6, r9
 8009366:	eba5 0509 	sub.w	r5, r5, r9
 800936a:	6026      	str	r6, [r4, #0]
 800936c:	60a5      	str	r5, [r4, #8]
 800936e:	463e      	mov	r6, r7
 8009370:	42be      	cmp	r6, r7
 8009372:	d900      	bls.n	8009376 <__ssputs_r+0x72>
 8009374:	463e      	mov	r6, r7
 8009376:	6820      	ldr	r0, [r4, #0]
 8009378:	4632      	mov	r2, r6
 800937a:	4641      	mov	r1, r8
 800937c:	f000 f9c6 	bl	800970c <memmove>
 8009380:	68a3      	ldr	r3, [r4, #8]
 8009382:	1b9b      	subs	r3, r3, r6
 8009384:	60a3      	str	r3, [r4, #8]
 8009386:	6823      	ldr	r3, [r4, #0]
 8009388:	4433      	add	r3, r6
 800938a:	6023      	str	r3, [r4, #0]
 800938c:	2000      	movs	r0, #0
 800938e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009392:	462a      	mov	r2, r5
 8009394:	f000 fa36 	bl	8009804 <_realloc_r>
 8009398:	4606      	mov	r6, r0
 800939a:	2800      	cmp	r0, #0
 800939c:	d1e0      	bne.n	8009360 <__ssputs_r+0x5c>
 800939e:	6921      	ldr	r1, [r4, #16]
 80093a0:	4650      	mov	r0, sl
 80093a2:	f7ff fb2d 	bl	8008a00 <_free_r>
 80093a6:	230c      	movs	r3, #12
 80093a8:	f8ca 3000 	str.w	r3, [sl]
 80093ac:	89a3      	ldrh	r3, [r4, #12]
 80093ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093b2:	81a3      	strh	r3, [r4, #12]
 80093b4:	f04f 30ff 	mov.w	r0, #4294967295
 80093b8:	e7e9      	b.n	800938e <__ssputs_r+0x8a>
	...

080093bc <_svfiprintf_r>:
 80093bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093c0:	4698      	mov	r8, r3
 80093c2:	898b      	ldrh	r3, [r1, #12]
 80093c4:	061b      	lsls	r3, r3, #24
 80093c6:	b09d      	sub	sp, #116	@ 0x74
 80093c8:	4607      	mov	r7, r0
 80093ca:	460d      	mov	r5, r1
 80093cc:	4614      	mov	r4, r2
 80093ce:	d510      	bpl.n	80093f2 <_svfiprintf_r+0x36>
 80093d0:	690b      	ldr	r3, [r1, #16]
 80093d2:	b973      	cbnz	r3, 80093f2 <_svfiprintf_r+0x36>
 80093d4:	2140      	movs	r1, #64	@ 0x40
 80093d6:	f7ff fb87 	bl	8008ae8 <_malloc_r>
 80093da:	6028      	str	r0, [r5, #0]
 80093dc:	6128      	str	r0, [r5, #16]
 80093de:	b930      	cbnz	r0, 80093ee <_svfiprintf_r+0x32>
 80093e0:	230c      	movs	r3, #12
 80093e2:	603b      	str	r3, [r7, #0]
 80093e4:	f04f 30ff 	mov.w	r0, #4294967295
 80093e8:	b01d      	add	sp, #116	@ 0x74
 80093ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093ee:	2340      	movs	r3, #64	@ 0x40
 80093f0:	616b      	str	r3, [r5, #20]
 80093f2:	2300      	movs	r3, #0
 80093f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80093f6:	2320      	movs	r3, #32
 80093f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80093fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8009400:	2330      	movs	r3, #48	@ 0x30
 8009402:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80095a0 <_svfiprintf_r+0x1e4>
 8009406:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800940a:	f04f 0901 	mov.w	r9, #1
 800940e:	4623      	mov	r3, r4
 8009410:	469a      	mov	sl, r3
 8009412:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009416:	b10a      	cbz	r2, 800941c <_svfiprintf_r+0x60>
 8009418:	2a25      	cmp	r2, #37	@ 0x25
 800941a:	d1f9      	bne.n	8009410 <_svfiprintf_r+0x54>
 800941c:	ebba 0b04 	subs.w	fp, sl, r4
 8009420:	d00b      	beq.n	800943a <_svfiprintf_r+0x7e>
 8009422:	465b      	mov	r3, fp
 8009424:	4622      	mov	r2, r4
 8009426:	4629      	mov	r1, r5
 8009428:	4638      	mov	r0, r7
 800942a:	f7ff ff6b 	bl	8009304 <__ssputs_r>
 800942e:	3001      	adds	r0, #1
 8009430:	f000 80a7 	beq.w	8009582 <_svfiprintf_r+0x1c6>
 8009434:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009436:	445a      	add	r2, fp
 8009438:	9209      	str	r2, [sp, #36]	@ 0x24
 800943a:	f89a 3000 	ldrb.w	r3, [sl]
 800943e:	2b00      	cmp	r3, #0
 8009440:	f000 809f 	beq.w	8009582 <_svfiprintf_r+0x1c6>
 8009444:	2300      	movs	r3, #0
 8009446:	f04f 32ff 	mov.w	r2, #4294967295
 800944a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800944e:	f10a 0a01 	add.w	sl, sl, #1
 8009452:	9304      	str	r3, [sp, #16]
 8009454:	9307      	str	r3, [sp, #28]
 8009456:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800945a:	931a      	str	r3, [sp, #104]	@ 0x68
 800945c:	4654      	mov	r4, sl
 800945e:	2205      	movs	r2, #5
 8009460:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009464:	484e      	ldr	r0, [pc, #312]	@ (80095a0 <_svfiprintf_r+0x1e4>)
 8009466:	f7f6 febb 	bl	80001e0 <memchr>
 800946a:	9a04      	ldr	r2, [sp, #16]
 800946c:	b9d8      	cbnz	r0, 80094a6 <_svfiprintf_r+0xea>
 800946e:	06d0      	lsls	r0, r2, #27
 8009470:	bf44      	itt	mi
 8009472:	2320      	movmi	r3, #32
 8009474:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009478:	0711      	lsls	r1, r2, #28
 800947a:	bf44      	itt	mi
 800947c:	232b      	movmi	r3, #43	@ 0x2b
 800947e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009482:	f89a 3000 	ldrb.w	r3, [sl]
 8009486:	2b2a      	cmp	r3, #42	@ 0x2a
 8009488:	d015      	beq.n	80094b6 <_svfiprintf_r+0xfa>
 800948a:	9a07      	ldr	r2, [sp, #28]
 800948c:	4654      	mov	r4, sl
 800948e:	2000      	movs	r0, #0
 8009490:	f04f 0c0a 	mov.w	ip, #10
 8009494:	4621      	mov	r1, r4
 8009496:	f811 3b01 	ldrb.w	r3, [r1], #1
 800949a:	3b30      	subs	r3, #48	@ 0x30
 800949c:	2b09      	cmp	r3, #9
 800949e:	d94b      	bls.n	8009538 <_svfiprintf_r+0x17c>
 80094a0:	b1b0      	cbz	r0, 80094d0 <_svfiprintf_r+0x114>
 80094a2:	9207      	str	r2, [sp, #28]
 80094a4:	e014      	b.n	80094d0 <_svfiprintf_r+0x114>
 80094a6:	eba0 0308 	sub.w	r3, r0, r8
 80094aa:	fa09 f303 	lsl.w	r3, r9, r3
 80094ae:	4313      	orrs	r3, r2
 80094b0:	9304      	str	r3, [sp, #16]
 80094b2:	46a2      	mov	sl, r4
 80094b4:	e7d2      	b.n	800945c <_svfiprintf_r+0xa0>
 80094b6:	9b03      	ldr	r3, [sp, #12]
 80094b8:	1d19      	adds	r1, r3, #4
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	9103      	str	r1, [sp, #12]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	bfbb      	ittet	lt
 80094c2:	425b      	neglt	r3, r3
 80094c4:	f042 0202 	orrlt.w	r2, r2, #2
 80094c8:	9307      	strge	r3, [sp, #28]
 80094ca:	9307      	strlt	r3, [sp, #28]
 80094cc:	bfb8      	it	lt
 80094ce:	9204      	strlt	r2, [sp, #16]
 80094d0:	7823      	ldrb	r3, [r4, #0]
 80094d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80094d4:	d10a      	bne.n	80094ec <_svfiprintf_r+0x130>
 80094d6:	7863      	ldrb	r3, [r4, #1]
 80094d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80094da:	d132      	bne.n	8009542 <_svfiprintf_r+0x186>
 80094dc:	9b03      	ldr	r3, [sp, #12]
 80094de:	1d1a      	adds	r2, r3, #4
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	9203      	str	r2, [sp, #12]
 80094e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80094e8:	3402      	adds	r4, #2
 80094ea:	9305      	str	r3, [sp, #20]
 80094ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80095b0 <_svfiprintf_r+0x1f4>
 80094f0:	7821      	ldrb	r1, [r4, #0]
 80094f2:	2203      	movs	r2, #3
 80094f4:	4650      	mov	r0, sl
 80094f6:	f7f6 fe73 	bl	80001e0 <memchr>
 80094fa:	b138      	cbz	r0, 800950c <_svfiprintf_r+0x150>
 80094fc:	9b04      	ldr	r3, [sp, #16]
 80094fe:	eba0 000a 	sub.w	r0, r0, sl
 8009502:	2240      	movs	r2, #64	@ 0x40
 8009504:	4082      	lsls	r2, r0
 8009506:	4313      	orrs	r3, r2
 8009508:	3401      	adds	r4, #1
 800950a:	9304      	str	r3, [sp, #16]
 800950c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009510:	4824      	ldr	r0, [pc, #144]	@ (80095a4 <_svfiprintf_r+0x1e8>)
 8009512:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009516:	2206      	movs	r2, #6
 8009518:	f7f6 fe62 	bl	80001e0 <memchr>
 800951c:	2800      	cmp	r0, #0
 800951e:	d036      	beq.n	800958e <_svfiprintf_r+0x1d2>
 8009520:	4b21      	ldr	r3, [pc, #132]	@ (80095a8 <_svfiprintf_r+0x1ec>)
 8009522:	bb1b      	cbnz	r3, 800956c <_svfiprintf_r+0x1b0>
 8009524:	9b03      	ldr	r3, [sp, #12]
 8009526:	3307      	adds	r3, #7
 8009528:	f023 0307 	bic.w	r3, r3, #7
 800952c:	3308      	adds	r3, #8
 800952e:	9303      	str	r3, [sp, #12]
 8009530:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009532:	4433      	add	r3, r6
 8009534:	9309      	str	r3, [sp, #36]	@ 0x24
 8009536:	e76a      	b.n	800940e <_svfiprintf_r+0x52>
 8009538:	fb0c 3202 	mla	r2, ip, r2, r3
 800953c:	460c      	mov	r4, r1
 800953e:	2001      	movs	r0, #1
 8009540:	e7a8      	b.n	8009494 <_svfiprintf_r+0xd8>
 8009542:	2300      	movs	r3, #0
 8009544:	3401      	adds	r4, #1
 8009546:	9305      	str	r3, [sp, #20]
 8009548:	4619      	mov	r1, r3
 800954a:	f04f 0c0a 	mov.w	ip, #10
 800954e:	4620      	mov	r0, r4
 8009550:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009554:	3a30      	subs	r2, #48	@ 0x30
 8009556:	2a09      	cmp	r2, #9
 8009558:	d903      	bls.n	8009562 <_svfiprintf_r+0x1a6>
 800955a:	2b00      	cmp	r3, #0
 800955c:	d0c6      	beq.n	80094ec <_svfiprintf_r+0x130>
 800955e:	9105      	str	r1, [sp, #20]
 8009560:	e7c4      	b.n	80094ec <_svfiprintf_r+0x130>
 8009562:	fb0c 2101 	mla	r1, ip, r1, r2
 8009566:	4604      	mov	r4, r0
 8009568:	2301      	movs	r3, #1
 800956a:	e7f0      	b.n	800954e <_svfiprintf_r+0x192>
 800956c:	ab03      	add	r3, sp, #12
 800956e:	9300      	str	r3, [sp, #0]
 8009570:	462a      	mov	r2, r5
 8009572:	4b0e      	ldr	r3, [pc, #56]	@ (80095ac <_svfiprintf_r+0x1f0>)
 8009574:	a904      	add	r1, sp, #16
 8009576:	4638      	mov	r0, r7
 8009578:	f7fd fe62 	bl	8007240 <_printf_float>
 800957c:	1c42      	adds	r2, r0, #1
 800957e:	4606      	mov	r6, r0
 8009580:	d1d6      	bne.n	8009530 <_svfiprintf_r+0x174>
 8009582:	89ab      	ldrh	r3, [r5, #12]
 8009584:	065b      	lsls	r3, r3, #25
 8009586:	f53f af2d 	bmi.w	80093e4 <_svfiprintf_r+0x28>
 800958a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800958c:	e72c      	b.n	80093e8 <_svfiprintf_r+0x2c>
 800958e:	ab03      	add	r3, sp, #12
 8009590:	9300      	str	r3, [sp, #0]
 8009592:	462a      	mov	r2, r5
 8009594:	4b05      	ldr	r3, [pc, #20]	@ (80095ac <_svfiprintf_r+0x1f0>)
 8009596:	a904      	add	r1, sp, #16
 8009598:	4638      	mov	r0, r7
 800959a:	f7fe f8e9 	bl	8007770 <_printf_i>
 800959e:	e7ed      	b.n	800957c <_svfiprintf_r+0x1c0>
 80095a0:	0800a0a8 	.word	0x0800a0a8
 80095a4:	0800a0b2 	.word	0x0800a0b2
 80095a8:	08007241 	.word	0x08007241
 80095ac:	08009305 	.word	0x08009305
 80095b0:	0800a0ae 	.word	0x0800a0ae

080095b4 <__sflush_r>:
 80095b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80095b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095bc:	0716      	lsls	r6, r2, #28
 80095be:	4605      	mov	r5, r0
 80095c0:	460c      	mov	r4, r1
 80095c2:	d454      	bmi.n	800966e <__sflush_r+0xba>
 80095c4:	684b      	ldr	r3, [r1, #4]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	dc02      	bgt.n	80095d0 <__sflush_r+0x1c>
 80095ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	dd48      	ble.n	8009662 <__sflush_r+0xae>
 80095d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80095d2:	2e00      	cmp	r6, #0
 80095d4:	d045      	beq.n	8009662 <__sflush_r+0xae>
 80095d6:	2300      	movs	r3, #0
 80095d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80095dc:	682f      	ldr	r7, [r5, #0]
 80095de:	6a21      	ldr	r1, [r4, #32]
 80095e0:	602b      	str	r3, [r5, #0]
 80095e2:	d030      	beq.n	8009646 <__sflush_r+0x92>
 80095e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80095e6:	89a3      	ldrh	r3, [r4, #12]
 80095e8:	0759      	lsls	r1, r3, #29
 80095ea:	d505      	bpl.n	80095f8 <__sflush_r+0x44>
 80095ec:	6863      	ldr	r3, [r4, #4]
 80095ee:	1ad2      	subs	r2, r2, r3
 80095f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80095f2:	b10b      	cbz	r3, 80095f8 <__sflush_r+0x44>
 80095f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80095f6:	1ad2      	subs	r2, r2, r3
 80095f8:	2300      	movs	r3, #0
 80095fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80095fc:	6a21      	ldr	r1, [r4, #32]
 80095fe:	4628      	mov	r0, r5
 8009600:	47b0      	blx	r6
 8009602:	1c43      	adds	r3, r0, #1
 8009604:	89a3      	ldrh	r3, [r4, #12]
 8009606:	d106      	bne.n	8009616 <__sflush_r+0x62>
 8009608:	6829      	ldr	r1, [r5, #0]
 800960a:	291d      	cmp	r1, #29
 800960c:	d82b      	bhi.n	8009666 <__sflush_r+0xb2>
 800960e:	4a2a      	ldr	r2, [pc, #168]	@ (80096b8 <__sflush_r+0x104>)
 8009610:	410a      	asrs	r2, r1
 8009612:	07d6      	lsls	r6, r2, #31
 8009614:	d427      	bmi.n	8009666 <__sflush_r+0xb2>
 8009616:	2200      	movs	r2, #0
 8009618:	6062      	str	r2, [r4, #4]
 800961a:	04d9      	lsls	r1, r3, #19
 800961c:	6922      	ldr	r2, [r4, #16]
 800961e:	6022      	str	r2, [r4, #0]
 8009620:	d504      	bpl.n	800962c <__sflush_r+0x78>
 8009622:	1c42      	adds	r2, r0, #1
 8009624:	d101      	bne.n	800962a <__sflush_r+0x76>
 8009626:	682b      	ldr	r3, [r5, #0]
 8009628:	b903      	cbnz	r3, 800962c <__sflush_r+0x78>
 800962a:	6560      	str	r0, [r4, #84]	@ 0x54
 800962c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800962e:	602f      	str	r7, [r5, #0]
 8009630:	b1b9      	cbz	r1, 8009662 <__sflush_r+0xae>
 8009632:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009636:	4299      	cmp	r1, r3
 8009638:	d002      	beq.n	8009640 <__sflush_r+0x8c>
 800963a:	4628      	mov	r0, r5
 800963c:	f7ff f9e0 	bl	8008a00 <_free_r>
 8009640:	2300      	movs	r3, #0
 8009642:	6363      	str	r3, [r4, #52]	@ 0x34
 8009644:	e00d      	b.n	8009662 <__sflush_r+0xae>
 8009646:	2301      	movs	r3, #1
 8009648:	4628      	mov	r0, r5
 800964a:	47b0      	blx	r6
 800964c:	4602      	mov	r2, r0
 800964e:	1c50      	adds	r0, r2, #1
 8009650:	d1c9      	bne.n	80095e6 <__sflush_r+0x32>
 8009652:	682b      	ldr	r3, [r5, #0]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d0c6      	beq.n	80095e6 <__sflush_r+0x32>
 8009658:	2b1d      	cmp	r3, #29
 800965a:	d001      	beq.n	8009660 <__sflush_r+0xac>
 800965c:	2b16      	cmp	r3, #22
 800965e:	d11e      	bne.n	800969e <__sflush_r+0xea>
 8009660:	602f      	str	r7, [r5, #0]
 8009662:	2000      	movs	r0, #0
 8009664:	e022      	b.n	80096ac <__sflush_r+0xf8>
 8009666:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800966a:	b21b      	sxth	r3, r3
 800966c:	e01b      	b.n	80096a6 <__sflush_r+0xf2>
 800966e:	690f      	ldr	r7, [r1, #16]
 8009670:	2f00      	cmp	r7, #0
 8009672:	d0f6      	beq.n	8009662 <__sflush_r+0xae>
 8009674:	0793      	lsls	r3, r2, #30
 8009676:	680e      	ldr	r6, [r1, #0]
 8009678:	bf08      	it	eq
 800967a:	694b      	ldreq	r3, [r1, #20]
 800967c:	600f      	str	r7, [r1, #0]
 800967e:	bf18      	it	ne
 8009680:	2300      	movne	r3, #0
 8009682:	eba6 0807 	sub.w	r8, r6, r7
 8009686:	608b      	str	r3, [r1, #8]
 8009688:	f1b8 0f00 	cmp.w	r8, #0
 800968c:	dde9      	ble.n	8009662 <__sflush_r+0xae>
 800968e:	6a21      	ldr	r1, [r4, #32]
 8009690:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009692:	4643      	mov	r3, r8
 8009694:	463a      	mov	r2, r7
 8009696:	4628      	mov	r0, r5
 8009698:	47b0      	blx	r6
 800969a:	2800      	cmp	r0, #0
 800969c:	dc08      	bgt.n	80096b0 <__sflush_r+0xfc>
 800969e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096a6:	81a3      	strh	r3, [r4, #12]
 80096a8:	f04f 30ff 	mov.w	r0, #4294967295
 80096ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096b0:	4407      	add	r7, r0
 80096b2:	eba8 0800 	sub.w	r8, r8, r0
 80096b6:	e7e7      	b.n	8009688 <__sflush_r+0xd4>
 80096b8:	dfbffffe 	.word	0xdfbffffe

080096bc <_fflush_r>:
 80096bc:	b538      	push	{r3, r4, r5, lr}
 80096be:	690b      	ldr	r3, [r1, #16]
 80096c0:	4605      	mov	r5, r0
 80096c2:	460c      	mov	r4, r1
 80096c4:	b913      	cbnz	r3, 80096cc <_fflush_r+0x10>
 80096c6:	2500      	movs	r5, #0
 80096c8:	4628      	mov	r0, r5
 80096ca:	bd38      	pop	{r3, r4, r5, pc}
 80096cc:	b118      	cbz	r0, 80096d6 <_fflush_r+0x1a>
 80096ce:	6a03      	ldr	r3, [r0, #32]
 80096d0:	b90b      	cbnz	r3, 80096d6 <_fflush_r+0x1a>
 80096d2:	f7fe f9f9 	bl	8007ac8 <__sinit>
 80096d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d0f3      	beq.n	80096c6 <_fflush_r+0xa>
 80096de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80096e0:	07d0      	lsls	r0, r2, #31
 80096e2:	d404      	bmi.n	80096ee <_fflush_r+0x32>
 80096e4:	0599      	lsls	r1, r3, #22
 80096e6:	d402      	bmi.n	80096ee <_fflush_r+0x32>
 80096e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80096ea:	f7fe fb38 	bl	8007d5e <__retarget_lock_acquire_recursive>
 80096ee:	4628      	mov	r0, r5
 80096f0:	4621      	mov	r1, r4
 80096f2:	f7ff ff5f 	bl	80095b4 <__sflush_r>
 80096f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80096f8:	07da      	lsls	r2, r3, #31
 80096fa:	4605      	mov	r5, r0
 80096fc:	d4e4      	bmi.n	80096c8 <_fflush_r+0xc>
 80096fe:	89a3      	ldrh	r3, [r4, #12]
 8009700:	059b      	lsls	r3, r3, #22
 8009702:	d4e1      	bmi.n	80096c8 <_fflush_r+0xc>
 8009704:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009706:	f7fe fb2b 	bl	8007d60 <__retarget_lock_release_recursive>
 800970a:	e7dd      	b.n	80096c8 <_fflush_r+0xc>

0800970c <memmove>:
 800970c:	4288      	cmp	r0, r1
 800970e:	b510      	push	{r4, lr}
 8009710:	eb01 0402 	add.w	r4, r1, r2
 8009714:	d902      	bls.n	800971c <memmove+0x10>
 8009716:	4284      	cmp	r4, r0
 8009718:	4623      	mov	r3, r4
 800971a:	d807      	bhi.n	800972c <memmove+0x20>
 800971c:	1e43      	subs	r3, r0, #1
 800971e:	42a1      	cmp	r1, r4
 8009720:	d008      	beq.n	8009734 <memmove+0x28>
 8009722:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009726:	f803 2f01 	strb.w	r2, [r3, #1]!
 800972a:	e7f8      	b.n	800971e <memmove+0x12>
 800972c:	4402      	add	r2, r0
 800972e:	4601      	mov	r1, r0
 8009730:	428a      	cmp	r2, r1
 8009732:	d100      	bne.n	8009736 <memmove+0x2a>
 8009734:	bd10      	pop	{r4, pc}
 8009736:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800973a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800973e:	e7f7      	b.n	8009730 <memmove+0x24>

08009740 <_sbrk_r>:
 8009740:	b538      	push	{r3, r4, r5, lr}
 8009742:	4d06      	ldr	r5, [pc, #24]	@ (800975c <_sbrk_r+0x1c>)
 8009744:	2300      	movs	r3, #0
 8009746:	4604      	mov	r4, r0
 8009748:	4608      	mov	r0, r1
 800974a:	602b      	str	r3, [r5, #0]
 800974c:	f7f8 fd94 	bl	8002278 <_sbrk>
 8009750:	1c43      	adds	r3, r0, #1
 8009752:	d102      	bne.n	800975a <_sbrk_r+0x1a>
 8009754:	682b      	ldr	r3, [r5, #0]
 8009756:	b103      	cbz	r3, 800975a <_sbrk_r+0x1a>
 8009758:	6023      	str	r3, [r4, #0]
 800975a:	bd38      	pop	{r3, r4, r5, pc}
 800975c:	200005c4 	.word	0x200005c4

08009760 <memcpy>:
 8009760:	440a      	add	r2, r1
 8009762:	4291      	cmp	r1, r2
 8009764:	f100 33ff 	add.w	r3, r0, #4294967295
 8009768:	d100      	bne.n	800976c <memcpy+0xc>
 800976a:	4770      	bx	lr
 800976c:	b510      	push	{r4, lr}
 800976e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009772:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009776:	4291      	cmp	r1, r2
 8009778:	d1f9      	bne.n	800976e <memcpy+0xe>
 800977a:	bd10      	pop	{r4, pc}

0800977c <__assert_func>:
 800977c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800977e:	4614      	mov	r4, r2
 8009780:	461a      	mov	r2, r3
 8009782:	4b09      	ldr	r3, [pc, #36]	@ (80097a8 <__assert_func+0x2c>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	4605      	mov	r5, r0
 8009788:	68d8      	ldr	r0, [r3, #12]
 800978a:	b954      	cbnz	r4, 80097a2 <__assert_func+0x26>
 800978c:	4b07      	ldr	r3, [pc, #28]	@ (80097ac <__assert_func+0x30>)
 800978e:	461c      	mov	r4, r3
 8009790:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009794:	9100      	str	r1, [sp, #0]
 8009796:	462b      	mov	r3, r5
 8009798:	4905      	ldr	r1, [pc, #20]	@ (80097b0 <__assert_func+0x34>)
 800979a:	f000 f86f 	bl	800987c <fiprintf>
 800979e:	f000 f87f 	bl	80098a0 <abort>
 80097a2:	4b04      	ldr	r3, [pc, #16]	@ (80097b4 <__assert_func+0x38>)
 80097a4:	e7f4      	b.n	8009790 <__assert_func+0x14>
 80097a6:	bf00      	nop
 80097a8:	20000040 	.word	0x20000040
 80097ac:	0800a0fe 	.word	0x0800a0fe
 80097b0:	0800a0d0 	.word	0x0800a0d0
 80097b4:	0800a0c3 	.word	0x0800a0c3

080097b8 <_calloc_r>:
 80097b8:	b570      	push	{r4, r5, r6, lr}
 80097ba:	fba1 5402 	umull	r5, r4, r1, r2
 80097be:	b93c      	cbnz	r4, 80097d0 <_calloc_r+0x18>
 80097c0:	4629      	mov	r1, r5
 80097c2:	f7ff f991 	bl	8008ae8 <_malloc_r>
 80097c6:	4606      	mov	r6, r0
 80097c8:	b928      	cbnz	r0, 80097d6 <_calloc_r+0x1e>
 80097ca:	2600      	movs	r6, #0
 80097cc:	4630      	mov	r0, r6
 80097ce:	bd70      	pop	{r4, r5, r6, pc}
 80097d0:	220c      	movs	r2, #12
 80097d2:	6002      	str	r2, [r0, #0]
 80097d4:	e7f9      	b.n	80097ca <_calloc_r+0x12>
 80097d6:	462a      	mov	r2, r5
 80097d8:	4621      	mov	r1, r4
 80097da:	f7fe fa42 	bl	8007c62 <memset>
 80097de:	e7f5      	b.n	80097cc <_calloc_r+0x14>

080097e0 <__ascii_mbtowc>:
 80097e0:	b082      	sub	sp, #8
 80097e2:	b901      	cbnz	r1, 80097e6 <__ascii_mbtowc+0x6>
 80097e4:	a901      	add	r1, sp, #4
 80097e6:	b142      	cbz	r2, 80097fa <__ascii_mbtowc+0x1a>
 80097e8:	b14b      	cbz	r3, 80097fe <__ascii_mbtowc+0x1e>
 80097ea:	7813      	ldrb	r3, [r2, #0]
 80097ec:	600b      	str	r3, [r1, #0]
 80097ee:	7812      	ldrb	r2, [r2, #0]
 80097f0:	1e10      	subs	r0, r2, #0
 80097f2:	bf18      	it	ne
 80097f4:	2001      	movne	r0, #1
 80097f6:	b002      	add	sp, #8
 80097f8:	4770      	bx	lr
 80097fa:	4610      	mov	r0, r2
 80097fc:	e7fb      	b.n	80097f6 <__ascii_mbtowc+0x16>
 80097fe:	f06f 0001 	mvn.w	r0, #1
 8009802:	e7f8      	b.n	80097f6 <__ascii_mbtowc+0x16>

08009804 <_realloc_r>:
 8009804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009808:	4680      	mov	r8, r0
 800980a:	4615      	mov	r5, r2
 800980c:	460c      	mov	r4, r1
 800980e:	b921      	cbnz	r1, 800981a <_realloc_r+0x16>
 8009810:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009814:	4611      	mov	r1, r2
 8009816:	f7ff b967 	b.w	8008ae8 <_malloc_r>
 800981a:	b92a      	cbnz	r2, 8009828 <_realloc_r+0x24>
 800981c:	f7ff f8f0 	bl	8008a00 <_free_r>
 8009820:	2400      	movs	r4, #0
 8009822:	4620      	mov	r0, r4
 8009824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009828:	f000 f841 	bl	80098ae <_malloc_usable_size_r>
 800982c:	4285      	cmp	r5, r0
 800982e:	4606      	mov	r6, r0
 8009830:	d802      	bhi.n	8009838 <_realloc_r+0x34>
 8009832:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009836:	d8f4      	bhi.n	8009822 <_realloc_r+0x1e>
 8009838:	4629      	mov	r1, r5
 800983a:	4640      	mov	r0, r8
 800983c:	f7ff f954 	bl	8008ae8 <_malloc_r>
 8009840:	4607      	mov	r7, r0
 8009842:	2800      	cmp	r0, #0
 8009844:	d0ec      	beq.n	8009820 <_realloc_r+0x1c>
 8009846:	42b5      	cmp	r5, r6
 8009848:	462a      	mov	r2, r5
 800984a:	4621      	mov	r1, r4
 800984c:	bf28      	it	cs
 800984e:	4632      	movcs	r2, r6
 8009850:	f7ff ff86 	bl	8009760 <memcpy>
 8009854:	4621      	mov	r1, r4
 8009856:	4640      	mov	r0, r8
 8009858:	f7ff f8d2 	bl	8008a00 <_free_r>
 800985c:	463c      	mov	r4, r7
 800985e:	e7e0      	b.n	8009822 <_realloc_r+0x1e>

08009860 <__ascii_wctomb>:
 8009860:	4603      	mov	r3, r0
 8009862:	4608      	mov	r0, r1
 8009864:	b141      	cbz	r1, 8009878 <__ascii_wctomb+0x18>
 8009866:	2aff      	cmp	r2, #255	@ 0xff
 8009868:	d904      	bls.n	8009874 <__ascii_wctomb+0x14>
 800986a:	228a      	movs	r2, #138	@ 0x8a
 800986c:	601a      	str	r2, [r3, #0]
 800986e:	f04f 30ff 	mov.w	r0, #4294967295
 8009872:	4770      	bx	lr
 8009874:	700a      	strb	r2, [r1, #0]
 8009876:	2001      	movs	r0, #1
 8009878:	4770      	bx	lr
	...

0800987c <fiprintf>:
 800987c:	b40e      	push	{r1, r2, r3}
 800987e:	b503      	push	{r0, r1, lr}
 8009880:	4601      	mov	r1, r0
 8009882:	ab03      	add	r3, sp, #12
 8009884:	4805      	ldr	r0, [pc, #20]	@ (800989c <fiprintf+0x20>)
 8009886:	f853 2b04 	ldr.w	r2, [r3], #4
 800988a:	6800      	ldr	r0, [r0, #0]
 800988c:	9301      	str	r3, [sp, #4]
 800988e:	f000 f83f 	bl	8009910 <_vfiprintf_r>
 8009892:	b002      	add	sp, #8
 8009894:	f85d eb04 	ldr.w	lr, [sp], #4
 8009898:	b003      	add	sp, #12
 800989a:	4770      	bx	lr
 800989c:	20000040 	.word	0x20000040

080098a0 <abort>:
 80098a0:	b508      	push	{r3, lr}
 80098a2:	2006      	movs	r0, #6
 80098a4:	f000 fa08 	bl	8009cb8 <raise>
 80098a8:	2001      	movs	r0, #1
 80098aa:	f7f8 fc6d 	bl	8002188 <_exit>

080098ae <_malloc_usable_size_r>:
 80098ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098b2:	1f18      	subs	r0, r3, #4
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	bfbc      	itt	lt
 80098b8:	580b      	ldrlt	r3, [r1, r0]
 80098ba:	18c0      	addlt	r0, r0, r3
 80098bc:	4770      	bx	lr

080098be <__sfputc_r>:
 80098be:	6893      	ldr	r3, [r2, #8]
 80098c0:	3b01      	subs	r3, #1
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	b410      	push	{r4}
 80098c6:	6093      	str	r3, [r2, #8]
 80098c8:	da08      	bge.n	80098dc <__sfputc_r+0x1e>
 80098ca:	6994      	ldr	r4, [r2, #24]
 80098cc:	42a3      	cmp	r3, r4
 80098ce:	db01      	blt.n	80098d4 <__sfputc_r+0x16>
 80098d0:	290a      	cmp	r1, #10
 80098d2:	d103      	bne.n	80098dc <__sfputc_r+0x1e>
 80098d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098d8:	f000 b932 	b.w	8009b40 <__swbuf_r>
 80098dc:	6813      	ldr	r3, [r2, #0]
 80098de:	1c58      	adds	r0, r3, #1
 80098e0:	6010      	str	r0, [r2, #0]
 80098e2:	7019      	strb	r1, [r3, #0]
 80098e4:	4608      	mov	r0, r1
 80098e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098ea:	4770      	bx	lr

080098ec <__sfputs_r>:
 80098ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ee:	4606      	mov	r6, r0
 80098f0:	460f      	mov	r7, r1
 80098f2:	4614      	mov	r4, r2
 80098f4:	18d5      	adds	r5, r2, r3
 80098f6:	42ac      	cmp	r4, r5
 80098f8:	d101      	bne.n	80098fe <__sfputs_r+0x12>
 80098fa:	2000      	movs	r0, #0
 80098fc:	e007      	b.n	800990e <__sfputs_r+0x22>
 80098fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009902:	463a      	mov	r2, r7
 8009904:	4630      	mov	r0, r6
 8009906:	f7ff ffda 	bl	80098be <__sfputc_r>
 800990a:	1c43      	adds	r3, r0, #1
 800990c:	d1f3      	bne.n	80098f6 <__sfputs_r+0xa>
 800990e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009910 <_vfiprintf_r>:
 8009910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009914:	460d      	mov	r5, r1
 8009916:	b09d      	sub	sp, #116	@ 0x74
 8009918:	4614      	mov	r4, r2
 800991a:	4698      	mov	r8, r3
 800991c:	4606      	mov	r6, r0
 800991e:	b118      	cbz	r0, 8009928 <_vfiprintf_r+0x18>
 8009920:	6a03      	ldr	r3, [r0, #32]
 8009922:	b90b      	cbnz	r3, 8009928 <_vfiprintf_r+0x18>
 8009924:	f7fe f8d0 	bl	8007ac8 <__sinit>
 8009928:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800992a:	07d9      	lsls	r1, r3, #31
 800992c:	d405      	bmi.n	800993a <_vfiprintf_r+0x2a>
 800992e:	89ab      	ldrh	r3, [r5, #12]
 8009930:	059a      	lsls	r2, r3, #22
 8009932:	d402      	bmi.n	800993a <_vfiprintf_r+0x2a>
 8009934:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009936:	f7fe fa12 	bl	8007d5e <__retarget_lock_acquire_recursive>
 800993a:	89ab      	ldrh	r3, [r5, #12]
 800993c:	071b      	lsls	r3, r3, #28
 800993e:	d501      	bpl.n	8009944 <_vfiprintf_r+0x34>
 8009940:	692b      	ldr	r3, [r5, #16]
 8009942:	b99b      	cbnz	r3, 800996c <_vfiprintf_r+0x5c>
 8009944:	4629      	mov	r1, r5
 8009946:	4630      	mov	r0, r6
 8009948:	f000 f938 	bl	8009bbc <__swsetup_r>
 800994c:	b170      	cbz	r0, 800996c <_vfiprintf_r+0x5c>
 800994e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009950:	07dc      	lsls	r4, r3, #31
 8009952:	d504      	bpl.n	800995e <_vfiprintf_r+0x4e>
 8009954:	f04f 30ff 	mov.w	r0, #4294967295
 8009958:	b01d      	add	sp, #116	@ 0x74
 800995a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800995e:	89ab      	ldrh	r3, [r5, #12]
 8009960:	0598      	lsls	r0, r3, #22
 8009962:	d4f7      	bmi.n	8009954 <_vfiprintf_r+0x44>
 8009964:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009966:	f7fe f9fb 	bl	8007d60 <__retarget_lock_release_recursive>
 800996a:	e7f3      	b.n	8009954 <_vfiprintf_r+0x44>
 800996c:	2300      	movs	r3, #0
 800996e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009970:	2320      	movs	r3, #32
 8009972:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009976:	f8cd 800c 	str.w	r8, [sp, #12]
 800997a:	2330      	movs	r3, #48	@ 0x30
 800997c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009b2c <_vfiprintf_r+0x21c>
 8009980:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009984:	f04f 0901 	mov.w	r9, #1
 8009988:	4623      	mov	r3, r4
 800998a:	469a      	mov	sl, r3
 800998c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009990:	b10a      	cbz	r2, 8009996 <_vfiprintf_r+0x86>
 8009992:	2a25      	cmp	r2, #37	@ 0x25
 8009994:	d1f9      	bne.n	800998a <_vfiprintf_r+0x7a>
 8009996:	ebba 0b04 	subs.w	fp, sl, r4
 800999a:	d00b      	beq.n	80099b4 <_vfiprintf_r+0xa4>
 800999c:	465b      	mov	r3, fp
 800999e:	4622      	mov	r2, r4
 80099a0:	4629      	mov	r1, r5
 80099a2:	4630      	mov	r0, r6
 80099a4:	f7ff ffa2 	bl	80098ec <__sfputs_r>
 80099a8:	3001      	adds	r0, #1
 80099aa:	f000 80a7 	beq.w	8009afc <_vfiprintf_r+0x1ec>
 80099ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80099b0:	445a      	add	r2, fp
 80099b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80099b4:	f89a 3000 	ldrb.w	r3, [sl]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	f000 809f 	beq.w	8009afc <_vfiprintf_r+0x1ec>
 80099be:	2300      	movs	r3, #0
 80099c0:	f04f 32ff 	mov.w	r2, #4294967295
 80099c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099c8:	f10a 0a01 	add.w	sl, sl, #1
 80099cc:	9304      	str	r3, [sp, #16]
 80099ce:	9307      	str	r3, [sp, #28]
 80099d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80099d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80099d6:	4654      	mov	r4, sl
 80099d8:	2205      	movs	r2, #5
 80099da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099de:	4853      	ldr	r0, [pc, #332]	@ (8009b2c <_vfiprintf_r+0x21c>)
 80099e0:	f7f6 fbfe 	bl	80001e0 <memchr>
 80099e4:	9a04      	ldr	r2, [sp, #16]
 80099e6:	b9d8      	cbnz	r0, 8009a20 <_vfiprintf_r+0x110>
 80099e8:	06d1      	lsls	r1, r2, #27
 80099ea:	bf44      	itt	mi
 80099ec:	2320      	movmi	r3, #32
 80099ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80099f2:	0713      	lsls	r3, r2, #28
 80099f4:	bf44      	itt	mi
 80099f6:	232b      	movmi	r3, #43	@ 0x2b
 80099f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80099fc:	f89a 3000 	ldrb.w	r3, [sl]
 8009a00:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a02:	d015      	beq.n	8009a30 <_vfiprintf_r+0x120>
 8009a04:	9a07      	ldr	r2, [sp, #28]
 8009a06:	4654      	mov	r4, sl
 8009a08:	2000      	movs	r0, #0
 8009a0a:	f04f 0c0a 	mov.w	ip, #10
 8009a0e:	4621      	mov	r1, r4
 8009a10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a14:	3b30      	subs	r3, #48	@ 0x30
 8009a16:	2b09      	cmp	r3, #9
 8009a18:	d94b      	bls.n	8009ab2 <_vfiprintf_r+0x1a2>
 8009a1a:	b1b0      	cbz	r0, 8009a4a <_vfiprintf_r+0x13a>
 8009a1c:	9207      	str	r2, [sp, #28]
 8009a1e:	e014      	b.n	8009a4a <_vfiprintf_r+0x13a>
 8009a20:	eba0 0308 	sub.w	r3, r0, r8
 8009a24:	fa09 f303 	lsl.w	r3, r9, r3
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	9304      	str	r3, [sp, #16]
 8009a2c:	46a2      	mov	sl, r4
 8009a2e:	e7d2      	b.n	80099d6 <_vfiprintf_r+0xc6>
 8009a30:	9b03      	ldr	r3, [sp, #12]
 8009a32:	1d19      	adds	r1, r3, #4
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	9103      	str	r1, [sp, #12]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	bfbb      	ittet	lt
 8009a3c:	425b      	neglt	r3, r3
 8009a3e:	f042 0202 	orrlt.w	r2, r2, #2
 8009a42:	9307      	strge	r3, [sp, #28]
 8009a44:	9307      	strlt	r3, [sp, #28]
 8009a46:	bfb8      	it	lt
 8009a48:	9204      	strlt	r2, [sp, #16]
 8009a4a:	7823      	ldrb	r3, [r4, #0]
 8009a4c:	2b2e      	cmp	r3, #46	@ 0x2e
 8009a4e:	d10a      	bne.n	8009a66 <_vfiprintf_r+0x156>
 8009a50:	7863      	ldrb	r3, [r4, #1]
 8009a52:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a54:	d132      	bne.n	8009abc <_vfiprintf_r+0x1ac>
 8009a56:	9b03      	ldr	r3, [sp, #12]
 8009a58:	1d1a      	adds	r2, r3, #4
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	9203      	str	r2, [sp, #12]
 8009a5e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009a62:	3402      	adds	r4, #2
 8009a64:	9305      	str	r3, [sp, #20]
 8009a66:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009b3c <_vfiprintf_r+0x22c>
 8009a6a:	7821      	ldrb	r1, [r4, #0]
 8009a6c:	2203      	movs	r2, #3
 8009a6e:	4650      	mov	r0, sl
 8009a70:	f7f6 fbb6 	bl	80001e0 <memchr>
 8009a74:	b138      	cbz	r0, 8009a86 <_vfiprintf_r+0x176>
 8009a76:	9b04      	ldr	r3, [sp, #16]
 8009a78:	eba0 000a 	sub.w	r0, r0, sl
 8009a7c:	2240      	movs	r2, #64	@ 0x40
 8009a7e:	4082      	lsls	r2, r0
 8009a80:	4313      	orrs	r3, r2
 8009a82:	3401      	adds	r4, #1
 8009a84:	9304      	str	r3, [sp, #16]
 8009a86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a8a:	4829      	ldr	r0, [pc, #164]	@ (8009b30 <_vfiprintf_r+0x220>)
 8009a8c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009a90:	2206      	movs	r2, #6
 8009a92:	f7f6 fba5 	bl	80001e0 <memchr>
 8009a96:	2800      	cmp	r0, #0
 8009a98:	d03f      	beq.n	8009b1a <_vfiprintf_r+0x20a>
 8009a9a:	4b26      	ldr	r3, [pc, #152]	@ (8009b34 <_vfiprintf_r+0x224>)
 8009a9c:	bb1b      	cbnz	r3, 8009ae6 <_vfiprintf_r+0x1d6>
 8009a9e:	9b03      	ldr	r3, [sp, #12]
 8009aa0:	3307      	adds	r3, #7
 8009aa2:	f023 0307 	bic.w	r3, r3, #7
 8009aa6:	3308      	adds	r3, #8
 8009aa8:	9303      	str	r3, [sp, #12]
 8009aaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009aac:	443b      	add	r3, r7
 8009aae:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ab0:	e76a      	b.n	8009988 <_vfiprintf_r+0x78>
 8009ab2:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ab6:	460c      	mov	r4, r1
 8009ab8:	2001      	movs	r0, #1
 8009aba:	e7a8      	b.n	8009a0e <_vfiprintf_r+0xfe>
 8009abc:	2300      	movs	r3, #0
 8009abe:	3401      	adds	r4, #1
 8009ac0:	9305      	str	r3, [sp, #20]
 8009ac2:	4619      	mov	r1, r3
 8009ac4:	f04f 0c0a 	mov.w	ip, #10
 8009ac8:	4620      	mov	r0, r4
 8009aca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ace:	3a30      	subs	r2, #48	@ 0x30
 8009ad0:	2a09      	cmp	r2, #9
 8009ad2:	d903      	bls.n	8009adc <_vfiprintf_r+0x1cc>
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d0c6      	beq.n	8009a66 <_vfiprintf_r+0x156>
 8009ad8:	9105      	str	r1, [sp, #20]
 8009ada:	e7c4      	b.n	8009a66 <_vfiprintf_r+0x156>
 8009adc:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ae0:	4604      	mov	r4, r0
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	e7f0      	b.n	8009ac8 <_vfiprintf_r+0x1b8>
 8009ae6:	ab03      	add	r3, sp, #12
 8009ae8:	9300      	str	r3, [sp, #0]
 8009aea:	462a      	mov	r2, r5
 8009aec:	4b12      	ldr	r3, [pc, #72]	@ (8009b38 <_vfiprintf_r+0x228>)
 8009aee:	a904      	add	r1, sp, #16
 8009af0:	4630      	mov	r0, r6
 8009af2:	f7fd fba5 	bl	8007240 <_printf_float>
 8009af6:	4607      	mov	r7, r0
 8009af8:	1c78      	adds	r0, r7, #1
 8009afa:	d1d6      	bne.n	8009aaa <_vfiprintf_r+0x19a>
 8009afc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009afe:	07d9      	lsls	r1, r3, #31
 8009b00:	d405      	bmi.n	8009b0e <_vfiprintf_r+0x1fe>
 8009b02:	89ab      	ldrh	r3, [r5, #12]
 8009b04:	059a      	lsls	r2, r3, #22
 8009b06:	d402      	bmi.n	8009b0e <_vfiprintf_r+0x1fe>
 8009b08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b0a:	f7fe f929 	bl	8007d60 <__retarget_lock_release_recursive>
 8009b0e:	89ab      	ldrh	r3, [r5, #12]
 8009b10:	065b      	lsls	r3, r3, #25
 8009b12:	f53f af1f 	bmi.w	8009954 <_vfiprintf_r+0x44>
 8009b16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009b18:	e71e      	b.n	8009958 <_vfiprintf_r+0x48>
 8009b1a:	ab03      	add	r3, sp, #12
 8009b1c:	9300      	str	r3, [sp, #0]
 8009b1e:	462a      	mov	r2, r5
 8009b20:	4b05      	ldr	r3, [pc, #20]	@ (8009b38 <_vfiprintf_r+0x228>)
 8009b22:	a904      	add	r1, sp, #16
 8009b24:	4630      	mov	r0, r6
 8009b26:	f7fd fe23 	bl	8007770 <_printf_i>
 8009b2a:	e7e4      	b.n	8009af6 <_vfiprintf_r+0x1e6>
 8009b2c:	0800a0a8 	.word	0x0800a0a8
 8009b30:	0800a0b2 	.word	0x0800a0b2
 8009b34:	08007241 	.word	0x08007241
 8009b38:	080098ed 	.word	0x080098ed
 8009b3c:	0800a0ae 	.word	0x0800a0ae

08009b40 <__swbuf_r>:
 8009b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b42:	460e      	mov	r6, r1
 8009b44:	4614      	mov	r4, r2
 8009b46:	4605      	mov	r5, r0
 8009b48:	b118      	cbz	r0, 8009b52 <__swbuf_r+0x12>
 8009b4a:	6a03      	ldr	r3, [r0, #32]
 8009b4c:	b90b      	cbnz	r3, 8009b52 <__swbuf_r+0x12>
 8009b4e:	f7fd ffbb 	bl	8007ac8 <__sinit>
 8009b52:	69a3      	ldr	r3, [r4, #24]
 8009b54:	60a3      	str	r3, [r4, #8]
 8009b56:	89a3      	ldrh	r3, [r4, #12]
 8009b58:	071a      	lsls	r2, r3, #28
 8009b5a:	d501      	bpl.n	8009b60 <__swbuf_r+0x20>
 8009b5c:	6923      	ldr	r3, [r4, #16]
 8009b5e:	b943      	cbnz	r3, 8009b72 <__swbuf_r+0x32>
 8009b60:	4621      	mov	r1, r4
 8009b62:	4628      	mov	r0, r5
 8009b64:	f000 f82a 	bl	8009bbc <__swsetup_r>
 8009b68:	b118      	cbz	r0, 8009b72 <__swbuf_r+0x32>
 8009b6a:	f04f 37ff 	mov.w	r7, #4294967295
 8009b6e:	4638      	mov	r0, r7
 8009b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b72:	6823      	ldr	r3, [r4, #0]
 8009b74:	6922      	ldr	r2, [r4, #16]
 8009b76:	1a98      	subs	r0, r3, r2
 8009b78:	6963      	ldr	r3, [r4, #20]
 8009b7a:	b2f6      	uxtb	r6, r6
 8009b7c:	4283      	cmp	r3, r0
 8009b7e:	4637      	mov	r7, r6
 8009b80:	dc05      	bgt.n	8009b8e <__swbuf_r+0x4e>
 8009b82:	4621      	mov	r1, r4
 8009b84:	4628      	mov	r0, r5
 8009b86:	f7ff fd99 	bl	80096bc <_fflush_r>
 8009b8a:	2800      	cmp	r0, #0
 8009b8c:	d1ed      	bne.n	8009b6a <__swbuf_r+0x2a>
 8009b8e:	68a3      	ldr	r3, [r4, #8]
 8009b90:	3b01      	subs	r3, #1
 8009b92:	60a3      	str	r3, [r4, #8]
 8009b94:	6823      	ldr	r3, [r4, #0]
 8009b96:	1c5a      	adds	r2, r3, #1
 8009b98:	6022      	str	r2, [r4, #0]
 8009b9a:	701e      	strb	r6, [r3, #0]
 8009b9c:	6962      	ldr	r2, [r4, #20]
 8009b9e:	1c43      	adds	r3, r0, #1
 8009ba0:	429a      	cmp	r2, r3
 8009ba2:	d004      	beq.n	8009bae <__swbuf_r+0x6e>
 8009ba4:	89a3      	ldrh	r3, [r4, #12]
 8009ba6:	07db      	lsls	r3, r3, #31
 8009ba8:	d5e1      	bpl.n	8009b6e <__swbuf_r+0x2e>
 8009baa:	2e0a      	cmp	r6, #10
 8009bac:	d1df      	bne.n	8009b6e <__swbuf_r+0x2e>
 8009bae:	4621      	mov	r1, r4
 8009bb0:	4628      	mov	r0, r5
 8009bb2:	f7ff fd83 	bl	80096bc <_fflush_r>
 8009bb6:	2800      	cmp	r0, #0
 8009bb8:	d0d9      	beq.n	8009b6e <__swbuf_r+0x2e>
 8009bba:	e7d6      	b.n	8009b6a <__swbuf_r+0x2a>

08009bbc <__swsetup_r>:
 8009bbc:	b538      	push	{r3, r4, r5, lr}
 8009bbe:	4b29      	ldr	r3, [pc, #164]	@ (8009c64 <__swsetup_r+0xa8>)
 8009bc0:	4605      	mov	r5, r0
 8009bc2:	6818      	ldr	r0, [r3, #0]
 8009bc4:	460c      	mov	r4, r1
 8009bc6:	b118      	cbz	r0, 8009bd0 <__swsetup_r+0x14>
 8009bc8:	6a03      	ldr	r3, [r0, #32]
 8009bca:	b90b      	cbnz	r3, 8009bd0 <__swsetup_r+0x14>
 8009bcc:	f7fd ff7c 	bl	8007ac8 <__sinit>
 8009bd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bd4:	0719      	lsls	r1, r3, #28
 8009bd6:	d422      	bmi.n	8009c1e <__swsetup_r+0x62>
 8009bd8:	06da      	lsls	r2, r3, #27
 8009bda:	d407      	bmi.n	8009bec <__swsetup_r+0x30>
 8009bdc:	2209      	movs	r2, #9
 8009bde:	602a      	str	r2, [r5, #0]
 8009be0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009be4:	81a3      	strh	r3, [r4, #12]
 8009be6:	f04f 30ff 	mov.w	r0, #4294967295
 8009bea:	e033      	b.n	8009c54 <__swsetup_r+0x98>
 8009bec:	0758      	lsls	r0, r3, #29
 8009bee:	d512      	bpl.n	8009c16 <__swsetup_r+0x5a>
 8009bf0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009bf2:	b141      	cbz	r1, 8009c06 <__swsetup_r+0x4a>
 8009bf4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009bf8:	4299      	cmp	r1, r3
 8009bfa:	d002      	beq.n	8009c02 <__swsetup_r+0x46>
 8009bfc:	4628      	mov	r0, r5
 8009bfe:	f7fe feff 	bl	8008a00 <_free_r>
 8009c02:	2300      	movs	r3, #0
 8009c04:	6363      	str	r3, [r4, #52]	@ 0x34
 8009c06:	89a3      	ldrh	r3, [r4, #12]
 8009c08:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009c0c:	81a3      	strh	r3, [r4, #12]
 8009c0e:	2300      	movs	r3, #0
 8009c10:	6063      	str	r3, [r4, #4]
 8009c12:	6923      	ldr	r3, [r4, #16]
 8009c14:	6023      	str	r3, [r4, #0]
 8009c16:	89a3      	ldrh	r3, [r4, #12]
 8009c18:	f043 0308 	orr.w	r3, r3, #8
 8009c1c:	81a3      	strh	r3, [r4, #12]
 8009c1e:	6923      	ldr	r3, [r4, #16]
 8009c20:	b94b      	cbnz	r3, 8009c36 <__swsetup_r+0x7a>
 8009c22:	89a3      	ldrh	r3, [r4, #12]
 8009c24:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009c28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c2c:	d003      	beq.n	8009c36 <__swsetup_r+0x7a>
 8009c2e:	4621      	mov	r1, r4
 8009c30:	4628      	mov	r0, r5
 8009c32:	f000 f883 	bl	8009d3c <__smakebuf_r>
 8009c36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c3a:	f013 0201 	ands.w	r2, r3, #1
 8009c3e:	d00a      	beq.n	8009c56 <__swsetup_r+0x9a>
 8009c40:	2200      	movs	r2, #0
 8009c42:	60a2      	str	r2, [r4, #8]
 8009c44:	6962      	ldr	r2, [r4, #20]
 8009c46:	4252      	negs	r2, r2
 8009c48:	61a2      	str	r2, [r4, #24]
 8009c4a:	6922      	ldr	r2, [r4, #16]
 8009c4c:	b942      	cbnz	r2, 8009c60 <__swsetup_r+0xa4>
 8009c4e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009c52:	d1c5      	bne.n	8009be0 <__swsetup_r+0x24>
 8009c54:	bd38      	pop	{r3, r4, r5, pc}
 8009c56:	0799      	lsls	r1, r3, #30
 8009c58:	bf58      	it	pl
 8009c5a:	6962      	ldrpl	r2, [r4, #20]
 8009c5c:	60a2      	str	r2, [r4, #8]
 8009c5e:	e7f4      	b.n	8009c4a <__swsetup_r+0x8e>
 8009c60:	2000      	movs	r0, #0
 8009c62:	e7f7      	b.n	8009c54 <__swsetup_r+0x98>
 8009c64:	20000040 	.word	0x20000040

08009c68 <_raise_r>:
 8009c68:	291f      	cmp	r1, #31
 8009c6a:	b538      	push	{r3, r4, r5, lr}
 8009c6c:	4605      	mov	r5, r0
 8009c6e:	460c      	mov	r4, r1
 8009c70:	d904      	bls.n	8009c7c <_raise_r+0x14>
 8009c72:	2316      	movs	r3, #22
 8009c74:	6003      	str	r3, [r0, #0]
 8009c76:	f04f 30ff 	mov.w	r0, #4294967295
 8009c7a:	bd38      	pop	{r3, r4, r5, pc}
 8009c7c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009c7e:	b112      	cbz	r2, 8009c86 <_raise_r+0x1e>
 8009c80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009c84:	b94b      	cbnz	r3, 8009c9a <_raise_r+0x32>
 8009c86:	4628      	mov	r0, r5
 8009c88:	f000 f830 	bl	8009cec <_getpid_r>
 8009c8c:	4622      	mov	r2, r4
 8009c8e:	4601      	mov	r1, r0
 8009c90:	4628      	mov	r0, r5
 8009c92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c96:	f000 b817 	b.w	8009cc8 <_kill_r>
 8009c9a:	2b01      	cmp	r3, #1
 8009c9c:	d00a      	beq.n	8009cb4 <_raise_r+0x4c>
 8009c9e:	1c59      	adds	r1, r3, #1
 8009ca0:	d103      	bne.n	8009caa <_raise_r+0x42>
 8009ca2:	2316      	movs	r3, #22
 8009ca4:	6003      	str	r3, [r0, #0]
 8009ca6:	2001      	movs	r0, #1
 8009ca8:	e7e7      	b.n	8009c7a <_raise_r+0x12>
 8009caa:	2100      	movs	r1, #0
 8009cac:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009cb0:	4620      	mov	r0, r4
 8009cb2:	4798      	blx	r3
 8009cb4:	2000      	movs	r0, #0
 8009cb6:	e7e0      	b.n	8009c7a <_raise_r+0x12>

08009cb8 <raise>:
 8009cb8:	4b02      	ldr	r3, [pc, #8]	@ (8009cc4 <raise+0xc>)
 8009cba:	4601      	mov	r1, r0
 8009cbc:	6818      	ldr	r0, [r3, #0]
 8009cbe:	f7ff bfd3 	b.w	8009c68 <_raise_r>
 8009cc2:	bf00      	nop
 8009cc4:	20000040 	.word	0x20000040

08009cc8 <_kill_r>:
 8009cc8:	b538      	push	{r3, r4, r5, lr}
 8009cca:	4d07      	ldr	r5, [pc, #28]	@ (8009ce8 <_kill_r+0x20>)
 8009ccc:	2300      	movs	r3, #0
 8009cce:	4604      	mov	r4, r0
 8009cd0:	4608      	mov	r0, r1
 8009cd2:	4611      	mov	r1, r2
 8009cd4:	602b      	str	r3, [r5, #0]
 8009cd6:	f7f8 fa47 	bl	8002168 <_kill>
 8009cda:	1c43      	adds	r3, r0, #1
 8009cdc:	d102      	bne.n	8009ce4 <_kill_r+0x1c>
 8009cde:	682b      	ldr	r3, [r5, #0]
 8009ce0:	b103      	cbz	r3, 8009ce4 <_kill_r+0x1c>
 8009ce2:	6023      	str	r3, [r4, #0]
 8009ce4:	bd38      	pop	{r3, r4, r5, pc}
 8009ce6:	bf00      	nop
 8009ce8:	200005c4 	.word	0x200005c4

08009cec <_getpid_r>:
 8009cec:	f7f8 ba34 	b.w	8002158 <_getpid>

08009cf0 <__swhatbuf_r>:
 8009cf0:	b570      	push	{r4, r5, r6, lr}
 8009cf2:	460c      	mov	r4, r1
 8009cf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cf8:	2900      	cmp	r1, #0
 8009cfa:	b096      	sub	sp, #88	@ 0x58
 8009cfc:	4615      	mov	r5, r2
 8009cfe:	461e      	mov	r6, r3
 8009d00:	da0d      	bge.n	8009d1e <__swhatbuf_r+0x2e>
 8009d02:	89a3      	ldrh	r3, [r4, #12]
 8009d04:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009d08:	f04f 0100 	mov.w	r1, #0
 8009d0c:	bf14      	ite	ne
 8009d0e:	2340      	movne	r3, #64	@ 0x40
 8009d10:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009d14:	2000      	movs	r0, #0
 8009d16:	6031      	str	r1, [r6, #0]
 8009d18:	602b      	str	r3, [r5, #0]
 8009d1a:	b016      	add	sp, #88	@ 0x58
 8009d1c:	bd70      	pop	{r4, r5, r6, pc}
 8009d1e:	466a      	mov	r2, sp
 8009d20:	f000 f848 	bl	8009db4 <_fstat_r>
 8009d24:	2800      	cmp	r0, #0
 8009d26:	dbec      	blt.n	8009d02 <__swhatbuf_r+0x12>
 8009d28:	9901      	ldr	r1, [sp, #4]
 8009d2a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009d2e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009d32:	4259      	negs	r1, r3
 8009d34:	4159      	adcs	r1, r3
 8009d36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d3a:	e7eb      	b.n	8009d14 <__swhatbuf_r+0x24>

08009d3c <__smakebuf_r>:
 8009d3c:	898b      	ldrh	r3, [r1, #12]
 8009d3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d40:	079d      	lsls	r5, r3, #30
 8009d42:	4606      	mov	r6, r0
 8009d44:	460c      	mov	r4, r1
 8009d46:	d507      	bpl.n	8009d58 <__smakebuf_r+0x1c>
 8009d48:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009d4c:	6023      	str	r3, [r4, #0]
 8009d4e:	6123      	str	r3, [r4, #16]
 8009d50:	2301      	movs	r3, #1
 8009d52:	6163      	str	r3, [r4, #20]
 8009d54:	b003      	add	sp, #12
 8009d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d58:	ab01      	add	r3, sp, #4
 8009d5a:	466a      	mov	r2, sp
 8009d5c:	f7ff ffc8 	bl	8009cf0 <__swhatbuf_r>
 8009d60:	9f00      	ldr	r7, [sp, #0]
 8009d62:	4605      	mov	r5, r0
 8009d64:	4639      	mov	r1, r7
 8009d66:	4630      	mov	r0, r6
 8009d68:	f7fe febe 	bl	8008ae8 <_malloc_r>
 8009d6c:	b948      	cbnz	r0, 8009d82 <__smakebuf_r+0x46>
 8009d6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d72:	059a      	lsls	r2, r3, #22
 8009d74:	d4ee      	bmi.n	8009d54 <__smakebuf_r+0x18>
 8009d76:	f023 0303 	bic.w	r3, r3, #3
 8009d7a:	f043 0302 	orr.w	r3, r3, #2
 8009d7e:	81a3      	strh	r3, [r4, #12]
 8009d80:	e7e2      	b.n	8009d48 <__smakebuf_r+0xc>
 8009d82:	89a3      	ldrh	r3, [r4, #12]
 8009d84:	6020      	str	r0, [r4, #0]
 8009d86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d8a:	81a3      	strh	r3, [r4, #12]
 8009d8c:	9b01      	ldr	r3, [sp, #4]
 8009d8e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009d92:	b15b      	cbz	r3, 8009dac <__smakebuf_r+0x70>
 8009d94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d98:	4630      	mov	r0, r6
 8009d9a:	f000 f81d 	bl	8009dd8 <_isatty_r>
 8009d9e:	b128      	cbz	r0, 8009dac <__smakebuf_r+0x70>
 8009da0:	89a3      	ldrh	r3, [r4, #12]
 8009da2:	f023 0303 	bic.w	r3, r3, #3
 8009da6:	f043 0301 	orr.w	r3, r3, #1
 8009daa:	81a3      	strh	r3, [r4, #12]
 8009dac:	89a3      	ldrh	r3, [r4, #12]
 8009dae:	431d      	orrs	r5, r3
 8009db0:	81a5      	strh	r5, [r4, #12]
 8009db2:	e7cf      	b.n	8009d54 <__smakebuf_r+0x18>

08009db4 <_fstat_r>:
 8009db4:	b538      	push	{r3, r4, r5, lr}
 8009db6:	4d07      	ldr	r5, [pc, #28]	@ (8009dd4 <_fstat_r+0x20>)
 8009db8:	2300      	movs	r3, #0
 8009dba:	4604      	mov	r4, r0
 8009dbc:	4608      	mov	r0, r1
 8009dbe:	4611      	mov	r1, r2
 8009dc0:	602b      	str	r3, [r5, #0]
 8009dc2:	f7f8 fa31 	bl	8002228 <_fstat>
 8009dc6:	1c43      	adds	r3, r0, #1
 8009dc8:	d102      	bne.n	8009dd0 <_fstat_r+0x1c>
 8009dca:	682b      	ldr	r3, [r5, #0]
 8009dcc:	b103      	cbz	r3, 8009dd0 <_fstat_r+0x1c>
 8009dce:	6023      	str	r3, [r4, #0]
 8009dd0:	bd38      	pop	{r3, r4, r5, pc}
 8009dd2:	bf00      	nop
 8009dd4:	200005c4 	.word	0x200005c4

08009dd8 <_isatty_r>:
 8009dd8:	b538      	push	{r3, r4, r5, lr}
 8009dda:	4d06      	ldr	r5, [pc, #24]	@ (8009df4 <_isatty_r+0x1c>)
 8009ddc:	2300      	movs	r3, #0
 8009dde:	4604      	mov	r4, r0
 8009de0:	4608      	mov	r0, r1
 8009de2:	602b      	str	r3, [r5, #0]
 8009de4:	f7f8 fa30 	bl	8002248 <_isatty>
 8009de8:	1c43      	adds	r3, r0, #1
 8009dea:	d102      	bne.n	8009df2 <_isatty_r+0x1a>
 8009dec:	682b      	ldr	r3, [r5, #0]
 8009dee:	b103      	cbz	r3, 8009df2 <_isatty_r+0x1a>
 8009df0:	6023      	str	r3, [r4, #0]
 8009df2:	bd38      	pop	{r3, r4, r5, pc}
 8009df4:	200005c4 	.word	0x200005c4

08009df8 <_init>:
 8009df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dfa:	bf00      	nop
 8009dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dfe:	bc08      	pop	{r3}
 8009e00:	469e      	mov	lr, r3
 8009e02:	4770      	bx	lr

08009e04 <_fini>:
 8009e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e06:	bf00      	nop
 8009e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e0a:	bc08      	pop	{r3}
 8009e0c:	469e      	mov	lr, r3
 8009e0e:	4770      	bx	lr
